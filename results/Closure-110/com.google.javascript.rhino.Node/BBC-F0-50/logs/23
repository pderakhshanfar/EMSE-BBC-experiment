* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 2067
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3262926708
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:44:19.357 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:44:21.564 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:44:21.723 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 10:44:23.349 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1919: com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;:566 - ReplaceComparisonOperator <= -> ==
[MASTER] 10:44:23.364 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;
[MASTER] 10:47:36.625 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 42
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 11888
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 42
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 42
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 42
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 824
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1722
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 602
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1400
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1785
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 3127
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 4342
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 42
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 5895
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 3392
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 17215
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 117
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 911
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 117
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 6928
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 3352
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 602
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 1955
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1520
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 76
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 13260
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2807
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1816
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 246
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 4249
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2289
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 458
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1400
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1911
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 1735
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 4057
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 16428
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3375
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 705
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 16063
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 57
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1865
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 732
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1617
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2344
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 4127
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 8705
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 22347
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 7782
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 3959
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 732
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1865
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 201
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1865
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4306
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 201
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 1034
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 42
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 663
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 42
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 7470
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 15100
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 4575
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 25913
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 3826
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 7765
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 4403
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 201
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 4936
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 602
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 6980
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 17736
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 18830
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 84119
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 289
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 212
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1216
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3964
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 769
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 23562
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 5734
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 323
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 306
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 6744
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 231
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 289
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 2226
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 289
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1799
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 201
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 309
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 732
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 943
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7377
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 608
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 1955
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 105
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 2616
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 13576
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 581
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 530
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 37
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 67
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 861
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 493
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 493
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 7248
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 2616
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 44818
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 493
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4075
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 746
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 7765
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 1177
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 5370
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 10928
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 1833
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 602
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 4992
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 44717
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 7956
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 84119
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 7623
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1833
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 84119
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 84119
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 16652
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 121
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 810
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 225
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 6222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1267
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 117
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 478
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 1000
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 3959
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 117
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 13236
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 117
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 5370
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 22898
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 1181
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 2689
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1004
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 862
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4013
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1881
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 1135
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 80
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 17506
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 102
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 171
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 602
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1042
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 4409
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 15615
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 5902
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 5688
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4409
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3093
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 1445
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 416
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 427
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 608
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 521
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 732
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 846
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 360
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 41102
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 26268
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 732
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 30
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 1833
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 3116
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5682
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 7809
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 2407
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 2407
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 9405
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 2407
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 293
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 2407
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 11476
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 642
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1266
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 8806
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1400
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 14887
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 3116
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 956
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 66
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 8253
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 2140
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 42
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 5609
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1400
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 247
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1721
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2021
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 732
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 2392
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 4127
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 160
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 18902
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2245
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 3839
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 903
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 166
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 602
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 602
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 117
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 6659
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 14699
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 2
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 15931
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 3116
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 11350
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 19738
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 4092
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 732
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 102
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 5734
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 473
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 1829
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 3758
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 602
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 7080
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 2252
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 13398
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 173
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 119
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4298
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 8487
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 3352
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 3584
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 81
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 3826
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 2140
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2360
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 3116
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 11495
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 160
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2360
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 14581
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 10543
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 10543
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1833
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 19074
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 602
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 2252
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2345
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 9405
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 771
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 3666
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 893
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 861
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 882
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1654
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3666
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 9550
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 7566
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 1000
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 9036
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 685
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 67
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 217
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 241
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 22497
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2310
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 228
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 5609
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 15584
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 5609
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - false: 173
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 2251
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 247
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 184
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 13291
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 289
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 602
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 1403
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 771
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 3893
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 4409
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 1030
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 834
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 2646
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 8287
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 233
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4746
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 10106
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 15976
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 602
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 602
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 602
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 602
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2993
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 24941
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 10403
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 167
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1000
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 6282
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 258
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 328
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 2991
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 601
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 149
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1438
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 30
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 516
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1047
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1753
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 416
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 914
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 82
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 399
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 311
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 9036
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1931
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 11416
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 299
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 4845
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 26585
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 160
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 26585
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 1135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 4845
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 4845
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 24853
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 732
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2289
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1865
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1865
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 11603
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 11603
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 12036
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 12284
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 390
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 4597
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 15082
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 390
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 12143
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1690
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 4645
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 732
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1321
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 117
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 20262
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 13716
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 2152
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 201
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 201
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 3686
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 244
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 16776
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 493
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 732
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 952
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 732
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 5196
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1928
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 390
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 2771
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 11747
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1690
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 9957
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 2741
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 10413
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 2407
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 732
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 5888
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 10608
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 493
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 31013
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 124
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1321
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 17797
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 1000
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 6282
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 11660
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 41102
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 6282
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 201
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 201
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 1361
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 201
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 201
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 16731
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 289
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 489
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 609
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 7566
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 29029
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 2396
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 84119
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 11837
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 201
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 5166
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4601
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1517
Number of times BBC is called in total: 4632735
* Search finished after 604s and 527 generations, 287104 statements, best individual has fitness: 2810.0
* Minimizing test suite
[MASTER] 10:55:45.955 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 797
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 628
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 472
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2224
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 587
* Generated 758 tests with total length 12804
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:56:55.192 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6699166666666667% of time used, but only 20/758 tests minimized), falling back to using all assertions
[MASTER] 10:57:15.068 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 10:57:22.804 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 10:57:32.571 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_59_1628161052177/com/google/javascript/rhino/Node_59_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_59_1628161052177/com/google/javascript/rhino/Node_59_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:32.571 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:32.571 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:32.575 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:57:32.577 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_59_1628161052177/com/google/javascript/rhino/Node_59_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_59_tmp__ESTest extends Node_59_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(155, "");
21:       assertNotNull(node0);
22:       assertEquals(52, Node.LENGTH);
23:       assertEquals(57, Node.REFLECTED_OBJECT);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(40, Node.ORIGINALNAME_PROP);
26:       assertEquals(57, Node.LAST_PROP);
27:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(30, Node.VAR_ARGS_NAME);
30:       assertEquals(55, Node.INFERRED_FUNCTION);
31:       assertEquals(37, Node.OPT_ARG_NAME);
32:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(48, Node.DIRECTIVES);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(4095, Node.COLUMN_MASK);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(46, Node.IS_NAMESPACE);
51:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(51, Node.STATIC_SOURCE_FILE);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertTrue(node0.isCast());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isNE());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isDebugger());
70:       assertEquals((-1), node0.getCharno());
71:       assertFalse(node0.isFunction());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.isParamList());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isComma());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isAdd());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isGetProp());
82:       assertFalse(node0.isNew());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isTrue());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isVoid());
90:       assertFalse(node0.isName());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.hasChildren());
93:       assertFalse(node0.isNumber());
94:       assertEquals((-1), node0.getSourcePosition());
95:       assertFalse(node0.isLabel());
96:       assertFalse(node0.isAssign());
97:       assertFalse(node0.isOr());
98:       assertFalse(node0.isTypeOf());
99:       assertFalse(node0.hasOneChild());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isAssignAdd());
102:       assertFalse(node0.isDo());
103:       assertFalse(node0.isScript());
104:       assertFalse(node0.isContinue());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isObjectLit());
107:       assertFalse(node0.isStringKey());
108:       assertFalse(node0.isAnd());
109:       assertFalse(node0.isLabelName());
110:       assertFalse(node0.isThis());
111:       assertFalse(node0.isSetterDef());
112:       assertFalse(node0.isFalse());
113:       assertFalse(node0.isHook());
114:       assertFalse(node0.isBlock());
115:       assertFalse(node0.isThrow());
116:       assertFalse(node0.isInc());
117:       assertFalse(node0.isWith());
118:       assertFalse(node0.hasMoreThanOneChild());
119:       assertFalse(node0.isRegExp());
120:       assertFalse(node0.isInstanceOf());
121:       assertFalse(node0.isCatch());
122:       assertEquals((-1), node0.getLineno());
123:       assertEquals(155, node0.getType());
124:       
125:       boolean boolean0 = node0.getBooleanProp(155);
126:       assertFalse(boolean0);
127:       assertEquals(52, Node.LENGTH);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(54, Node.SLASH_V);
130:       assertEquals(40, Node.ORIGINALNAME_PROP);
131:       assertEquals(57, Node.LAST_PROP);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(30, Node.VAR_ARGS_NAME);
135:       assertEquals(55, Node.INFERRED_FUNCTION);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(39, Node.EMPTY_BLOCK);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
142:       assertEquals(56, Node.CHANGE_TIME);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(4095, Node.COLUMN_MASK);
153:       assertEquals(2, Node.POST_FLAG);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(46, Node.IS_NAMESPACE);
156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:       assertEquals(1, Node.DECR_FLAG);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(50, Node.FREE_CALL);
163:       assertTrue(node0.isCast());
164:       assertFalse(node0.isIf());
165:       assertFalse(node0.isNE());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isEmpty());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isCase());
171:       assertFalse(node0.isTry());
172:       assertFalse(node0.isDefaultCase());
173:       assertFalse(node0.isString());
174:       assertFalse(node0.isDebugger());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isFunction());
177:       assertFalse(node0.isArrayLit());
178:       assertFalse(node0.isParamList());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isComma());
183:       assertEquals(0, node0.getChildCount());
184:       assertFalse(node0.isAdd());
185:       assertFalse(node0.isVar());
186:       assertFalse(node0.isGetProp());
187:       assertFalse(node0.isNew());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isTrue());
191:       assertFalse(node0.isCall());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isDelProp());
194:       assertFalse(node0.isVoid());
195:       assertFalse(node0.isName());
196:       assertFalse(node0.isDec());
197:       assertFalse(node0.hasChildren());
198:       assertFalse(node0.isNumber());
199:       assertEquals((-1), node0.getSourcePosition());
200:       assertFalse(node0.isLabel());
201:       assertFalse(node0.isAssign());
202:       assertFalse(node0.isOr());
203:       assertFalse(node0.isTypeOf());
204:       assertFalse(node0.hasOneChild());
205:       assertFalse(node0.isReturn());
206:       assertFalse(node0.isAssignAdd());
207:       assertFalse(node0.isDo());
208:       assertFalse(node0.isScript());
209:       assertFalse(node0.isContinue());
210:       assertFalse(node0.isNot());
211:       assertFalse(node0.isObjectLit());
212:       assertFalse(node0.isStringKey());
213:       assertFalse(node0.isAnd());
214:       assertFalse(node0.isLabelName());
215:       assertFalse(node0.isThis());
216:       assertFalse(node0.isSetterDef());
217:       assertFalse(node0.isFalse());
218:       assertFalse(node0.isHook());
219:       assertFalse(node0.isBlock());
220:       assertFalse(node0.isThrow());
221:       assertFalse(node0.isInc());
222:       assertFalse(node0.isWith());
223:       assertFalse(node0.hasMoreThanOneChild());
224:       assertFalse(node0.isRegExp());
225:       assertFalse(node0.isInstanceOf());
226:       assertFalse(node0.isCatch());
227:       assertEquals((-1), node0.getLineno());
228:       assertEquals(155, node0.getType());
229:       
230:       boolean boolean1 = node0.isThrow();
231:       assertFalse(boolean1);
232:       assertTrue(boolean1 == boolean0);
233:       assertEquals(52, Node.LENGTH);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(54, Node.SLASH_V);
236:       assertEquals(40, Node.ORIGINALNAME_PROP);
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(30, Node.VAR_ARGS_NAME);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(48, Node.DIRECTIVES);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
255:       assertEquals(53, Node.INPUT_ID);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(4095, Node.COLUMN_MASK);
259:       assertEquals(2, Node.POST_FLAG);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(46, Node.IS_NAMESPACE);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertTrue(node0.isCast());
270:       assertFalse(node0.isIf());
271:       assertFalse(node0.isNE());
272:       assertFalse(node0.isFor());
273:       assertFalse(node0.isEmpty());
274:       assertFalse(node0.isGetterDef());
275:       assertFalse(node0.isIn());
276:       assertFalse(node0.isCase());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isString());
280:       assertFalse(node0.isDebugger());
281:       assertEquals((-1), node0.getCharno());
282:       assertFalse(node0.isFunction());
283:       assertFalse(node0.isArrayLit());
284:       assertFalse(node0.isParamList());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isBreak());
287:       assertFalse(node0.isNull());
288:       assertFalse(node0.isComma());
289:       assertEquals(0, node0.getChildCount());
290:       assertFalse(node0.isAdd());
291:       assertFalse(node0.isVar());
292:       assertFalse(node0.isGetProp());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isWhile());
295:       assertFalse(node0.isExprResult());
296:       assertFalse(node0.isTrue());
297:       assertFalse(node0.isCall());
298:       assertFalse(node0.isGetElem());
299:       assertFalse(node0.isDelProp());
300:       assertFalse(node0.isVoid());
301:       assertFalse(node0.isName());
302:       assertFalse(node0.isDec());
303:       assertFalse(node0.hasChildren());
304:       assertFalse(node0.isNumber());
305:       assertEquals((-1), node0.getSourcePosition());
306:       assertFalse(node0.isLabel());
307:       assertFalse(node0.isAssign());
308:       assertFalse(node0.isOr());
309:       assertFalse(node0.isTypeOf());
310:       assertFalse(node0.hasOneChild());
311:       assertFalse(node0.isReturn());
312:       assertFalse(node0.isAssignAdd());
313:       assertFalse(node0.isDo());
314:       assertFalse(node0.isScript());
315:       assertFalse(node0.isContinue());
316:       assertFalse(node0.isNot());
317:       assertFalse(node0.isObjectLit());
318:       assertFalse(node0.isStringKey());
319:       assertFalse(node0.isAnd());
320:       assertFalse(node0.isLabelName());
321:       assertFalse(node0.isThis());
322:       assertFalse(node0.isSetterDef());
323:       assertFalse(node0.isFalse());
324:       assertFalse(node0.isHook());
325:       assertFalse(node0.isBlock());
326:       assertFalse(node0.isThrow());
327:       assertFalse(node0.isInc());
328:       assertFalse(node0.isWith());
329:       assertFalse(node0.hasMoreThanOneChild());
330:       assertFalse(node0.isRegExp());
331:       assertFalse(node0.isInstanceOf());
332:       assertFalse(node0.isCatch());
333:       assertEquals((-1), node0.getLineno());
334:       assertEquals(155, node0.getType());
335:       
336:       boolean boolean2 = node0.isBreak();
337:       assertFalse(boolean2);
338:       assertTrue(boolean2 == boolean0);
339:       assertTrue(boolean2 == boolean1);
340:       assertEquals(52, Node.LENGTH);
341:       assertEquals(57, Node.REFLECTED_OBJECT);
342:       assertEquals(54, Node.SLASH_V);
343:       assertEquals(40, Node.ORIGINALNAME_PROP);
344:       assertEquals(57, Node.LAST_PROP);
345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(55, Node.INFERRED_FUNCTION);
349:       assertEquals(37, Node.OPT_ARG_NAME);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(49, Node.DIRECT_EVAL);
354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(15, Node.NO_SIDE_EFFECTS);
357:       assertEquals(29, Node.JSDOC_INFO_PROP);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(36, Node.QUOTED_PROP);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(53, Node.INPUT_ID);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(4095, Node.COLUMN_MASK);
366:       assertEquals(2, Node.POST_FLAG);
367:       assertEquals(12, Node.COLUMN_BITS);
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(32, Node.INCRDECR_PROP);
372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
373:       assertEquals(43, Node.IS_CONSTANT_NAME);
374:       assertEquals(51, Node.STATIC_SOURCE_FILE);
375:       assertEquals(50, Node.FREE_CALL);
376:       assertTrue(node0.isCast());
377:       assertFalse(node0.isIf());
378:       assertFalse(node0.isNE());
379:       assertFalse(node0.isFor());
380:       assertFalse(node0.isEmpty());
381:       assertFalse(node0.isGetterDef());
382:       assertFalse(node0.isIn());
383:       assertFalse(node0.isCase());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isString());
387:       assertFalse(node0.isDebugger());
388:       assertEquals((-1), node0.getCharno());
389:       assertFalse(node0.isFunction());
390:       assertFalse(node0.isArrayLit());
391:       assertFalse(node0.isParamList());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isBreak());
394:       assertFalse(node0.isNull());
395:       assertFalse(node0.isComma());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isAdd());
398:       assertFalse(node0.isVar());
399:       assertFalse(node0.isGetProp());
400:       assertFalse(node0.isNew());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isTrue());
404:       assertFalse(node0.isCall());
405:       assertFalse(node0.isGetElem());
406:       assertFalse(node0.isDelProp());
407:       assertFalse(node0.isVoid());
408:       assertFalse(node0.isName());
409:       assertFalse(node0.isDec());
410:       assertFalse(node0.hasChildren());
411:       assertFalse(node0.isNumber());
412:       assertEquals((-1), node0.getSourcePosition());
413:       assertFalse(node0.isLabel());
414:       assertFalse(node0.isAssign());
415:       assertFalse(node0.isOr());
416:       assertFalse(node0.isTypeOf());
417:       assertFalse(node0.hasOneChild());
418:       assertFalse(node0.isReturn());
419:       assertFalse(node0.isAssignAdd());
420:       assertFalse(node0.isDo());
421:       assertFalse(node0.isScript());
422:       assertFalse(node0.isContinue());
423:       assertFalse(node0.isNot());
424:       assertFalse(node0.isObjectLit());
425:       assertFalse(node0.isStringKey());
426:       assertFalse(node0.isAnd());
427:       assertFalse(node0.isLabelName());
428:       assertFalse(node0.isThis());
429:       assertFalse(node0.isSetterDef());
430:       assertFalse(node0.isFalse());
431:       assertFalse(node0.isHook());
432:       assertFalse(node0.isBlock());
433:       assertFalse(node0.isThrow());
434:       assertFalse(node0.isInc());
435:       assertFalse(node0.isWith());
436:       assertFalse(node0.hasMoreThanOneChild());
437:       assertFalse(node0.isRegExp());
438:       assertFalse(node0.isInstanceOf());
439:       assertFalse(node0.isCatch());
440:       assertEquals((-1), node0.getLineno());
441:       assertEquals(155, node0.getType());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(57, Node.REFLECTED_OBJECT);
447:       assertEquals(54, Node.SLASH_V);
448:       assertEquals(40, Node.ORIGINALNAME_PROP);
449:       assertEquals(57, Node.LAST_PROP);
450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(37, Node.OPT_ARG_NAME);
455:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
456:       assertEquals(39, Node.EMPTY_BLOCK);
457:       assertEquals(48, Node.DIRECTIVES);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
460:       assertEquals(56, Node.CHANGE_TIME);
461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
464:       assertEquals(8, Node.FLAG_NO_THROWS);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(53, Node.INPUT_ID);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(47, Node.IS_DISPATCHER);
470:       assertEquals(4095, Node.COLUMN_MASK);
471:       assertEquals(2, Node.POST_FLAG);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(46, Node.IS_NAMESPACE);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(1, Node.DECR_FLAG);
476:       assertEquals(32, Node.INCRDECR_PROP);
477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
478:       assertEquals(43, Node.IS_CONSTANT_NAME);
479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
480:       assertEquals(50, Node.FREE_CALL);
481:       assertTrue(node0.isCast());
482:       assertFalse(node0.isIf());
483:       assertFalse(node0.isNE());
484:       assertFalse(node0.isFor());
485:       assertFalse(node0.isEmpty());
486:       assertFalse(node0.isGetterDef());
487:       assertFalse(node0.isIn());
488:       assertFalse(node0.isCase());
489:       assertFalse(node0.isTry());
490:       assertFalse(node0.isDefaultCase());
491:       assertFalse(node0.isString());
492:       assertFalse(node0.isDebugger());
493:       assertEquals((-1), node0.getCharno());
494:       assertFalse(node0.isFunction());
495:       assertFalse(node0.isArrayLit());
496:       assertFalse(node0.isParamList());
497:       assertFalse(node0.isSwitch());
498:       assertFalse(node0.isBreak());
499:       assertFalse(node0.isNull());
500:       assertFalse(node0.isComma());
501:       assertEquals(0, node0.getChildCount());
502:       assertFalse(node0.isAdd());
503:       assertFalse(node0.isVar());
504:       assertFalse(node0.isGetProp());
505:       assertFalse(node0.isNew());
506:       assertFalse(node0.isWhile());
507:       assertFalse(node0.isExprResult());
508:       assertFalse(node0.isTrue());
509:       assertFalse(node0.isCall());
510:       assertFalse(node0.isGetElem());
511:       assertFalse(node0.isDelProp());
512:       assertFalse(node0.isVoid());
513:       assertFalse(node0.isName());
514:       assertFalse(node0.isDec());
515:       assertFalse(node0.hasChildren());
516:       assertFalse(node0.isNumber());
517:       assertEquals((-1), node0.getSourcePosition());
518:       assertFalse(node0.isLabel());
519:       assertFalse(node0.isAssign());
520:       assertFalse(node0.isOr());
521:       assertFalse(node0.isTypeOf());
522:       assertFalse(node0.hasOneChild());
523:       assertFalse(node0.isReturn());
524:       assertFalse(node0.isAssignAdd());
525:       assertFalse(node0.isDo());
526:       assertFalse(node0.isScript());
527:       assertFalse(node0.isContinue());
528:       assertFalse(node0.isNot());
529:       assertFalse(node0.isObjectLit());
530:       assertFalse(node0.isStringKey());
531:       assertFalse(node0.isAnd());
532:       assertFalse(node0.isLabelName());
533:       assertFalse(node0.isThis());
534:       assertFalse(node0.isSetterDef());
535:       assertFalse(node0.isFalse());
536:       assertFalse(node0.isHook());
537:       assertFalse(node0.isBlock());
538:       assertFalse(node0.isThrow());
539:       assertFalse(node0.isInc());
540:       assertFalse(node0.isWith());
541:       assertFalse(node0.hasMoreThanOneChild());
542:       assertFalse(node0.isRegExp());
543:       assertFalse(node0.isInstanceOf());
544:       assertFalse(node0.isCatch());
545:       assertEquals((-1), node0.getLineno());
546:       assertEquals(155, node0.getType());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       node0.setQuotedString();
550:       assertEquals(52, Node.LENGTH);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(54, Node.SLASH_V);
553:       assertEquals(40, Node.ORIGINALNAME_PROP);
554:       assertEquals(57, Node.LAST_PROP);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(55, Node.INFERRED_FUNCTION);
559:       assertEquals(37, Node.OPT_ARG_NAME);
560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
565:       assertEquals(56, Node.CHANGE_TIME);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
569:       assertEquals(8, Node.FLAG_NO_THROWS);
570:       assertEquals(36, Node.QUOTED_PROP);
571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
572:       assertEquals(53, Node.INPUT_ID);
573:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(2, Node.POST_FLAG);
577:       assertEquals(12, Node.COLUMN_BITS);
578:       assertEquals(46, Node.IS_NAMESPACE);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(1, Node.DECR_FLAG);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
583:       assertEquals(43, Node.IS_CONSTANT_NAME);
584:       assertEquals(51, Node.STATIC_SOURCE_FILE);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertTrue(node0.isCast());
587:       assertFalse(node0.isIf());
588:       assertFalse(node0.isNE());
589:       assertFalse(node0.isFor());
590:       assertFalse(node0.isEmpty());
591:       assertFalse(node0.isGetterDef());
592:       assertFalse(node0.isIn());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.isTry());
595:       assertFalse(node0.isDefaultCase());
596:       assertFalse(node0.isString());
597:       assertFalse(node0.isDebugger());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isFunction());
600:       assertFalse(node0.isArrayLit());
601:       assertFalse(node0.isParamList());
602:       assertFalse(node0.isSwitch());
603:       assertFalse(node0.isBreak());
604:       assertFalse(node0.isNull());
605:       assertFalse(node0.isComma());
606:       assertEquals(0, node0.getChildCount());
607:       assertFalse(node0.isAdd());
608:       assertFalse(node0.isVar());
609:       assertFalse(node0.isGetProp());
610:       assertFalse(node0.isNew());
611:       assertFalse(node0.isWhile());
612:       assertFalse(node0.isExprResult());
613:       assertFalse(node0.isTrue());
614:       assertFalse(node0.isCall());
615:       assertFalse(node0.isGetElem());
616:       assertFalse(node0.isDelProp());
617:       assertFalse(node0.isVoid());
618:       assertFalse(node0.isName());
619:       assertFalse(node0.isDec());
620:       assertFalse(node0.hasChildren());
621:       assertFalse(node0.isNumber());
622:       assertEquals((-1), node0.getSourcePosition());
623:       assertFalse(node0.isLabel());
624:       assertFalse(node0.isAssign());
625:       assertFalse(node0.isOr());
626:       assertFalse(node0.isTypeOf());
627:       assertFalse(node0.hasOneChild());
628:       assertFalse(node0.isReturn());
629:       assertFalse(node0.isAssignAdd());
630:       assertFalse(node0.isDo());
631:       assertFalse(node0.isScript());
632:       assertFalse(node0.isContinue());
633:       assertFalse(node0.isNot());
634:       assertFalse(node0.isObjectLit());
635:       assertFalse(node0.isStringKey());
636:       assertFalse(node0.isAnd());
637:       assertFalse(node0.isLabelName());
638:       assertFalse(node0.isThis());
639:       assertFalse(node0.isSetterDef());
640:       assertFalse(node0.isFalse());
641:       assertFalse(node0.isHook());
642:       assertFalse(node0.isBlock());
643:       assertFalse(node0.isThrow());
644:       assertFalse(node0.isInc());
645:       assertFalse(node0.isWith());
646:       assertFalse(node0.hasMoreThanOneChild());
647:       assertFalse(node0.isRegExp());
648:       assertFalse(node0.isInstanceOf());
649:       assertFalse(node0.isCatch());
650:       assertEquals((-1), node0.getLineno());
651:       assertEquals(155, node0.getType());
652:       
653:       Node node1 = Node.newString(78132, "", (-3203), 117);
654:       assertNotNull(node1);
655:       assertFalse(node1.equals((Object)node0));
656:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
657:       assertEquals(53, Node.INPUT_ID);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(43, Node.IS_CONSTANT_NAME);
660:       assertEquals(56, Node.CHANGE_TIME);
661:       assertEquals(36, Node.QUOTED_PROP);
662:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
663:       assertEquals(29, Node.JSDOC_INFO_PROP);
664:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
665:       assertEquals(4095, Node.COLUMN_MASK);
666:       assertEquals(12, Node.COLUMN_BITS);
667:       assertEquals(1, Node.DECR_FLAG);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(48, Node.DIRECTIVES);
670:       assertEquals(49, Node.DIRECT_EVAL);
671:       assertEquals(32, Node.INCRDECR_PROP);
672:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(40, Node.ORIGINALNAME_PROP);
676:       assertEquals(15, Node.NO_SIDE_EFFECTS);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(54, Node.SLASH_V);
679:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
680:       assertEquals(52, Node.LENGTH);
681:       assertEquals(8, Node.FLAG_NO_THROWS);
682:       assertEquals(50, Node.FREE_CALL);
683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
684:       assertEquals(55, Node.INFERRED_FUNCTION);
685:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
686:       assertEquals(46, Node.IS_NAMESPACE);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(30, Node.VAR_ARGS_NAME);
692:       assertFalse(node1.isSetterDef());
693:       assertFalse(node1.isParamList());
694:       assertFalse(node1.isNull());
695:       assertEquals(0, node1.getChildCount());
696:       assertFalse(node1.isCatch());
697:       assertFalse(node1.isStringKey());
698:       assertFalse(node1.isCall());
699:       assertFalse(node1.isName());
700:       assertFalse(node1.isAdd());
701:       assertFalse(node1.isTrue());
702:       assertFalse(node1.isFunction());
703:       assertFalse(node1.isVar());
704:       assertFalse(node1.isEmpty());
705:       assertFalse(node1.isAssignAdd());
706:       assertFalse(node1.isDo());
707:       assertFalse(node1.isNew());
708:       assertFalse(node1.isDefaultCase());
709:       assertEquals((-1), node1.getSourcePosition());
710:       assertFalse(node1.hasChildren());
711:       assertFalse(node1.isAssign());
712:       assertFalse(node1.isReturn());
713:       assertFalse(node1.isOr());
714:       assertFalse(node1.isDec());
715:       assertFalse(node1.isTypeOf());
716:       assertFalse(node1.isCast());
717:       assertFalse(node1.isContinue());
718:       assertFalse(node1.isGetElem());
719:       assertFalse(node1.isDelProp());
720:       assertFalse(node1.isVoid());
721:       assertFalse(node1.isDebugger());
722:       assertFalse(node1.isExprResult());
723:       assertFalse(node1.isNot());
724:       assertFalse(node1.isString());
725:       assertFalse(node1.isObjectLit());
726:       assertEquals(78132, node1.getType());
727:       assertFalse(node1.isWhile());
728:       assertFalse(node1.isComma());
729:       assertFalse(node1.isThis());
730:       assertFalse(node1.isGetProp());
731:       assertFalse(node1.isBreak());
732:       assertFalse(node1.isFalse());
733:       assertFalse(node1.isAnd());
734:       assertFalse(node1.isInstanceOf());
735:       assertFalse(node1.isInc());
736:       assertFalse(node1.isThrow());
737:       assertFalse(node1.isNE());
738:       assertFalse(node1.isLabel());
739:       assertFalse(node1.isNumber());
740:       assertFalse(node1.isIn());
741:       assertFalse(node1.isGetterDef());
742:       assertFalse(node1.hasMoreThanOneChild());
743:       assertFalse(node1.isArrayLit());
744:       assertFalse(node1.isLabelName());
745:       assertEquals((-1), node1.getLineno());
746:       assertFalse(node1.isIf());
747:       assertFalse(node1.isSwitch());
748:       assertEquals((-1), node1.getCharno());
749:       assertFalse(node1.isScript());
750:       assertFalse(node1.isBlock());
751:       assertFalse(node1.isWith());
752:       assertFalse(node1.isRegExp());
753:       assertFalse(node1.isHook());
754:       assertFalse(node1.isFor());
755:       assertFalse(node1.isTry());
756:       assertFalse(node1.isCase());
757:       assertFalse(node1.hasOneChild());
758:       assertNotSame(node1, node0);
759:       
760:       int int0 = node1.getChangeTime();
761:       assertEquals(0, int0);
762:       assertFalse(node1.equals((Object)node0));
763:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
764:       assertEquals(53, Node.INPUT_ID);
765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
766:       assertEquals(43, Node.IS_CONSTANT_NAME);
767:       assertEquals(56, Node.CHANGE_TIME);
768:       assertEquals(36, Node.QUOTED_PROP);
769:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
770:       assertEquals(29, Node.JSDOC_INFO_PROP);
771:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
772:       assertEquals(4095, Node.COLUMN_MASK);
773:       assertEquals(12, Node.COLUMN_BITS);
774:       assertEquals(1, Node.DECR_FLAG);
775:       assertEquals(37, Node.OPT_ARG_NAME);
776:       assertEquals(48, Node.DIRECTIVES);
777:       assertEquals(49, Node.DIRECT_EVAL);
778:       assertEquals(32, Node.INCRDECR_PROP);
779:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
781:       assertEquals(57, Node.REFLECTED_OBJECT);
782:       assertEquals(40, Node.ORIGINALNAME_PROP);
783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
784:       assertEquals(39, Node.EMPTY_BLOCK);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertEquals(50, Node.FREE_CALL);
790:       assertEquals(51, Node.STATIC_SOURCE_FILE);
791:       assertEquals(55, Node.INFERRED_FUNCTION);
792:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
793:       assertEquals(46, Node.IS_NAMESPACE);
794:       assertEquals(47, Node.IS_DISPATCHER);
795:       assertEquals(57, Node.LAST_PROP);
796:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
797:       assertEquals(2, Node.POST_FLAG);
798:       assertEquals(30, Node.VAR_ARGS_NAME);
799:       assertFalse(node1.isSetterDef());
800:       assertFalse(node1.isParamList());
801:       assertFalse(node1.isNull());
802:       assertEquals(0, node1.getChildCount());
803:       assertFalse(node1.isCatch());
804:       assertFalse(node1.isStringKey());
805:       assertFalse(node1.isCall());
806:       assertFalse(node1.isName());
807:       assertFalse(node1.isAdd());
808:       assertFalse(node1.isTrue());
809:       assertFalse(node1.isFunction());
810:       assertFalse(node1.isVar());
811:       assertFalse(node1.isEmpty());
812:       assertFalse(node1.isAssignAdd());
813:       assertFalse(node1.isDo());
814:       assertFalse(node1.isNew());
815:       assertFalse(node1.isDefaultCase());
816:       assertEquals((-1), node1.getSourcePosition());
817:       assertFalse(node1.hasChildren());
818:       assertFalse(node1.isAssign());
819:       assertFalse(node1.isReturn());
820:       assertFalse(node1.isOr());
821:       assertFalse(node1.isDec());
822:       assertFalse(node1.isTypeOf());
823:       assertFalse(node1.isCast());
824:       assertFalse(node1.isContinue());
825:       assertFalse(node1.isGetElem());
826:       assertFalse(node1.isDelProp());
827:       assertFalse(node1.isVoid());
828:       assertFalse(node1.isDebugger());
829:       assertFalse(node1.isExprResult());
830:       assertFalse(node1.isNot());
831:       assertFalse(node1.isString());
832:       assertFalse(node1.isObjectLit());
833:       assertEquals(78132, node1.getType());
834:       assertFalse(node1.isWhile());
835:       assertFalse(node1.isComma());
836:       assertFalse(node1.isThis());
837:       assertFalse(node1.isGetProp());
838:       assertFalse(node1.isBreak());
839:       assertFalse(node1.isFalse());
840:       assertFalse(node1.isAnd());
841:       assertFalse(node1.isInstanceOf());
842:       assertFalse(node1.isInc());
843:       assertFalse(node1.isThrow());
844:       assertFalse(node1.isNE());
845:       assertFalse(node1.isLabel());
846:       assertFalse(node1.isNumber());
847:       assertFalse(node1.isIn());
848:       assertFalse(node1.isGetterDef());
849:       assertFalse(node1.hasMoreThanOneChild());
850:       assertFalse(node1.isArrayLit());
851:       assertFalse(node1.isLabelName());
852:       assertEquals((-1), node1.getLineno());
853:       assertFalse(node1.isIf());
854:       assertFalse(node1.isSwitch());
855:       assertEquals((-1), node1.getCharno());
856:       assertFalse(node1.isScript());
857:       assertFalse(node1.isBlock());
858:       assertFalse(node1.isWith());
859:       assertFalse(node1.isRegExp());
860:       assertFalse(node1.isHook());
861:       assertFalse(node1.isFor());
862:       assertFalse(node1.isTry());
863:       assertFalse(node1.isCase());
864:       assertFalse(node1.hasOneChild());
865:       assertNotSame(node1, node0);
866:       
867:       Node node2 = node1.srcref(node0);
868:       assertNotNull(node2);
869:       assertFalse(node0.equals((Object)node1));
870:       assertFalse(node1.equals((Object)node0));
871:       assertFalse(node2.equals((Object)node0));
872:       assertEquals(52, Node.LENGTH);
873:       assertEquals(57, Node.REFLECTED_OBJECT);
874:       assertEquals(54, Node.SLASH_V);
875:       assertEquals(40, Node.ORIGINALNAME_PROP);
876:       assertEquals(57, Node.LAST_PROP);
877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
878:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(55, Node.INFERRED_FUNCTION);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
883:       assertEquals(39, Node.EMPTY_BLOCK);
884:       assertEquals(48, Node.DIRECTIVES);
885:       assertEquals(49, Node.DIRECT_EVAL);
886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
887:       assertEquals(56, Node.CHANGE_TIME);
888:       assertEquals(15, Node.NO_SIDE_EFFECTS);
889:       assertEquals(29, Node.JSDOC_INFO_PROP);
890:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
891:       assertEquals(8, Node.FLAG_NO_THROWS);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
894:       assertEquals(53, Node.INPUT_ID);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(47, Node.IS_DISPATCHER);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertEquals(46, Node.IS_NAMESPACE);
901:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
902:       assertEquals(1, Node.DECR_FLAG);
903:       assertEquals(32, Node.INCRDECR_PROP);
904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
905:       assertEquals(43, Node.IS_CONSTANT_NAME);
906:       assertEquals(51, Node.STATIC_SOURCE_FILE);
907:       assertEquals(50, Node.FREE_CALL);
908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
909:       assertEquals(53, Node.INPUT_ID);
910:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
911:       assertEquals(43, Node.IS_CONSTANT_NAME);
912:       assertEquals(56, Node.CHANGE_TIME);
913:       assertEquals(36, Node.QUOTED_PROP);
914:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
915:       assertEquals(29, Node.JSDOC_INFO_PROP);
916:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
917:       assertEquals(4095, Node.COLUMN_MASK);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(1, Node.DECR_FLAG);
920:       assertEquals(37, Node.OPT_ARG_NAME);
921:       assertEquals(48, Node.DIRECTIVES);
922:       assertEquals(49, Node.DIRECT_EVAL);
923:       assertEquals(32, Node.INCRDECR_PROP);
924:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
925:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
926:       assertEquals(57, Node.REFLECTED_OBJECT);
927:       assertEquals(40, Node.ORIGINALNAME_PROP);
928:       assertEquals(15, Node.NO_SIDE_EFFECTS);
929:       assertEquals(39, Node.EMPTY_BLOCK);
930:       assertEquals(54, Node.SLASH_V);
931:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
932:       assertEquals(52, Node.LENGTH);
933:       assertEquals(8, Node.FLAG_NO_THROWS);
934:       assertEquals(50, Node.FREE_CALL);
935:       assertEquals(51, Node.STATIC_SOURCE_FILE);
936:       assertEquals(55, Node.INFERRED_FUNCTION);
937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
938:       assertEquals(46, Node.IS_NAMESPACE);
939:       assertEquals(47, Node.IS_DISPATCHER);
940:       assertEquals(57, Node.LAST_PROP);
941:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
942:       assertEquals(2, Node.POST_FLAG);
943:       assertEquals(30, Node.VAR_ARGS_NAME);
944:       assertEquals(51, Node.STATIC_SOURCE_FILE);
945:       assertEquals(32, Node.INCRDECR_PROP);
946:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
947:       assertEquals(37, Node.OPT_ARG_NAME);
948:       assertEquals(49, Node.DIRECT_EVAL);
949:       assertEquals(56, Node.CHANGE_TIME);
950:       assertEquals(46, Node.IS_NAMESPACE);
951:       assertEquals(54, Node.SLASH_V);
952:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
954:       assertEquals(1, Node.DECR_FLAG);
955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
956:       assertEquals(12, Node.COLUMN_BITS);
957:       assertEquals(48, Node.DIRECTIVES);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(8, Node.FLAG_NO_THROWS);
960:       assertEquals(39, Node.EMPTY_BLOCK);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
963:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
964:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
965:       assertEquals(36, Node.QUOTED_PROP);
966:       assertEquals(50, Node.FREE_CALL);
967:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
968:       assertEquals(43, Node.IS_CONSTANT_NAME);
969:       assertEquals(57, Node.REFLECTED_OBJECT);
970:       assertEquals(52, Node.LENGTH);
971:       assertEquals(15, Node.NO_SIDE_EFFECTS);
972:       assertEquals(40, Node.ORIGINALNAME_PROP);
973:       assertEquals(29, Node.JSDOC_INFO_PROP);
974:       assertEquals(53, Node.INPUT_ID);
975:       assertEquals(30, Node.VAR_ARGS_NAME);
976:       assertEquals(57, Node.LAST_PROP);
977:       assertEquals(2, Node.POST_FLAG);
978:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
979:       assertEquals(47, Node.IS_DISPATCHER);
980:       assertTrue(node0.isCast());
981:       assertFalse(node0.isIf());
982:       assertFalse(node0.isNE());
983:       assertFalse(node0.isFor());
984:       assertFalse(node0.isEmpty());
985:       assertFalse(node0.isGetterDef());
986:       assertFalse(node0.isIn());
987:       assertFalse(node0.isCase());
988:       assertFalse(node0.isTry());
989:       assertFalse(node0.isDefaultCase());
990:       assertFalse(node0.isString());
991:       assertFalse(node0.isDebugger());
992:       assertEquals((-1), node0.getCharno());
993:       assertFalse(node0.isFunction());
994:       assertFalse(node0.isArrayLit());
995:       assertFalse(node0.isParamList());
996:       assertFalse(node0.isSwitch());
997:       assertFalse(node0.isBreak());
998:       assertFalse(node0.isNull());
999:       assertFalse(node0.isComma());
1000:       assertEquals(0, node0.getChildCount());
1001:       assertFalse(node0.isAdd());
1002:       assertFalse(node0.isVar());
1003:       assertFalse(node0.isGetProp());
1004:       assertFalse(node0.isNew());
1005:       assertFalse(node0.isWhile());
1006:       assertFalse(node0.isExprResult());
1007:       assertFalse(node0.isTrue());
1008:       assertFalse(node0.isCall());
1009:       assertFalse(node0.isGetElem());
1010:       assertFalse(node0.isDelProp());
1011:       assertFalse(node0.isVoid());
1012:       assertFalse(node0.isName());
1013:       assertFalse(node0.isDec());
1014:       assertFalse(node0.hasChildren());
1015:       assertFalse(node0.isNumber());
1016:       assertEquals((-1), node0.getSourcePosition());
1017:       assertFalse(node0.isLabel());
1018:       assertFalse(node0.isAssign());
1019:       assertFalse(node0.isOr());
1020:       assertFalse(node0.isTypeOf());
1021:       assertFalse(node0.hasOneChild());
1022:       assertFalse(node0.isReturn());
1023:       assertFalse(node0.isAssignAdd());
1024:       assertFalse(node0.isDo());
1025:       assertFalse(node0.isScript());
1026:       assertFalse(node0.isContinue());
1027:       assertFalse(node0.isNot());
1028:       assertFalse(node0.isObjectLit());
1029:       assertFalse(node0.isStringKey());
1030:       assertFalse(node0.isAnd());
1031:       assertFalse(node0.isLabelName());
1032:       assertFalse(node0.isThis());
1033:       assertFalse(node0.isSetterDef());
1034:       assertFalse(node0.isFalse());
1035:       assertFalse(node0.isHook());
1036:       assertFalse(node0.isBlock());
1037:       assertFalse(node0.isThrow());
1038:       assertFalse(node0.isInc());
1039:       assertFalse(node0.isWith());
1040:       assertFalse(node0.hasMoreThanOneChild());
1041:       assertFalse(node0.isRegExp());
1042:       assertFalse(node0.isInstanceOf());
1043:       assertFalse(node0.isCatch());
1044:       assertEquals((-1), node0.getLineno());
1045:       assertEquals(155, node0.getType());
1046:       assertFalse(node1.isSetterDef());
1047:       assertFalse(node1.isParamList());
1048:       assertFalse(node1.isNull());
1049:       assertEquals(0, node1.getChildCount());
1050:       assertFalse(node1.isCatch());
1051:       assertFalse(node1.isStringKey());
1052:       assertFalse(node1.isCall());
1053:       assertFalse(node1.isName());
1054:       assertFalse(node1.isAdd());
1055:       assertFalse(node1.isTrue());
1056:       assertFalse(node1.isFunction());
1057:       assertFalse(node1.isVar());
1058:       assertFalse(node1.isEmpty());
1059:       assertFalse(node1.isAssignAdd());
1060:       assertFalse(node1.isDo());
1061:       assertFalse(node1.isNew());
1062:       assertFalse(node1.isDefaultCase());
1063:       assertEquals((-1), node1.getSourcePosition());
1064:       assertFalse(node1.hasChildren());
1065:       assertFalse(node1.isAssign());
1066:       assertFalse(node1.isReturn());
1067:       assertFalse(node1.isOr());
1068:       assertFalse(node1.isDec());
1069:       assertFalse(node1.isTypeOf());
1070:       assertFalse(node1.isCast());
1071:       assertFalse(node1.isContinue());
1072:       assertFalse(node1.isGetElem());
1073:       assertFalse(node1.isDelProp());
1074:       assertFalse(node1.isVoid());
1075:       assertFalse(node1.isDebugger());
1076:       assertFalse(node1.isExprResult());
1077:       assertFalse(node1.isNot());
1078:       assertFalse(node1.isString());
1079:       assertFalse(node1.isObjectLit());
1080:       assertEquals(78132, node1.getType());
1081:       assertFalse(node1.isWhile());
1082:       assertFalse(node1.isComma());
1083:       assertFalse(node1.isThis());
1084:       assertFalse(node1.isGetProp());
1085:       assertFalse(node1.isBreak());
1086:       assertFalse(node1.isFalse());
1087:       assertFalse(node1.isAnd());
1088:       assertFalse(node1.isInstanceOf());
1089:       assertFalse(node1.isInc());
1090:       assertFalse(node1.isThrow());
1091:       assertFalse(node1.isNE());
1092:       assertFalse(node1.isLabel());
1093:       assertFalse(node1.isNumber());
1094:       assertFalse(node1.isIn());
1095:       assertFalse(node1.isGetterDef());
1096:       assertFalse(node1.hasMoreThanOneChild());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isLabelName());
1099:       assertEquals((-1), node1.getLineno());
1100:       assertFalse(node1.isIf());
1101:       assertFalse(node1.isSwitch());
1102:       assertEquals((-1), node1.getCharno());
1103:       assertFalse(node1.isScript());
1104:       assertFalse(node1.isBlock());
1105:       assertFalse(node1.isWith());
1106:       assertFalse(node1.isRegExp());
1107:       assertFalse(node1.isHook());
1108:       assertFalse(node1.isFor());
1109:       assertFalse(node1.isTry());
1110:       assertFalse(node1.isCase());
1111:       assertFalse(node1.hasOneChild());
1112:       assertFalse(node2.isDefaultCase());
1113:       assertFalse(node2.isFunction());
1114:       assertFalse(node2.isRegExp());
1115:       assertFalse(node2.isDebugger());
1116:       assertFalse(node2.isTrue());
1117:       assertEquals(0, node2.getChildCount());
1118:       assertFalse(node2.isArrayLit());
1119:       assertFalse(node2.isVoid());
1120:       assertFalse(node2.isCatch());
1121:       assertFalse(node2.isIf());
1122:       assertFalse(node2.isDelProp());
1123:       assertFalse(node2.isName());
1124:       assertFalse(node2.isVar());
1125:       assertFalse(node2.isNE());
1126:       assertFalse(node2.isNull());
1127:       assertFalse(node2.isIn());
1128:       assertFalse(node2.isNew());
1129:       assertFalse(node2.isEmpty());
1130:       assertFalse(node2.isSetterDef());
1131:       assertFalse(node2.isAdd());
1132:       assertFalse(node2.isDo());
1133:       assertFalse(node2.isSwitch());
1134:       assertEquals((-1), node2.getCharno());
1135:       assertFalse(node2.isBlock());
1136:       assertEquals((-1), node2.getLineno());
1137:       assertFalse(node2.hasMoreThanOneChild());
1138:       assertFalse(node2.isNumber());
1139:       assertFalse(node2.isLabelName());
1140:       assertFalse(node2.isGetterDef());
1141:       assertFalse(node2.isStringKey());
1142:       assertFalse(node2.isParamList());
1143:       assertFalse(node2.isFor());
1144:       assertFalse(node2.isHook());
1145:       assertFalse(node2.isThis());
1146:       assertFalse(node2.hasOneChild());
1147:       assertFalse(node2.isTry());
1148:       assertFalse(node2.isCase());
1149:       assertFalse(node2.isScript());
1150:       assertFalse(node2.isWith());
1151:       assertFalse(node2.isNot());
1152:       assertFalse(node2.isAnd());
1153:       assertFalse(node2.isInstanceOf());
1154:       assertFalse(node2.isCast());
1155:       assertFalse(node2.isExprResult());
1156:       assertFalse(node2.isGetElem());
1157:       assertFalse(node2.isBreak());
1158:       assertFalse(node2.isThrow());
1159:       assertFalse(node2.isLabel());
1160:       assertFalse(node2.isAssignAdd());
1161:       assertFalse(node2.isOr());
1162:       assertFalse(node2.isInc());
1163:       assertFalse(node2.isString());
1164:       assertFalse(node2.isWhile());
1165:       assertFalse(node2.isFalse());
1166:       assertFalse(node2.isContinue());
1167:       assertFalse(node2.isCall());
1168:       assertFalse(node2.isDec());
1169:       assertFalse(node2.hasChildren());
1170:       assertEquals((-1), node2.getSourcePosition());
1171:       assertFalse(node2.isAssign());
1172:       assertFalse(node2.isTypeOf());
1173:       assertFalse(node2.isComma());
1174:       assertFalse(node2.isReturn());
1175:       assertFalse(node2.isObjectLit());
1176:       assertFalse(node2.isGetProp());
1177:       assertEquals(78132, node2.getType());
1178:       assertNotSame(node0, node1);
1179:       assertNotSame(node0, node2);
1180:       assertSame(node1, node2);
1181:       assertNotSame(node1, node0);
1182:       assertNotSame(node2, node0);
1183:       assertSame(node2, node1);
1184:       
1185:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
1186:       assertNotNull(node_FileLevelJsDocBuilder0);
1187:       assertFalse(node0.equals((Object)node1));
1188:       assertFalse(node0.equals((Object)node2));
1189:       assertFalse(node1.equals((Object)node0));
1190:       assertFalse(node2.equals((Object)node0));
1191:       assertEquals(52, Node.LENGTH);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(54, Node.SLASH_V);
1194:       assertEquals(40, Node.ORIGINALNAME_PROP);
1195:       assertEquals(57, Node.LAST_PROP);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1198:       assertEquals(30, Node.VAR_ARGS_NAME);
1199:       assertEquals(55, Node.INFERRED_FUNCTION);
1200:       assertEquals(37, Node.OPT_ARG_NAME);
1201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1202:       assertEquals(39, Node.EMPTY_BLOCK);
1203:       assertEquals(48, Node.DIRECTIVES);
1204:       assertEquals(49, Node.DIRECT_EVAL);
1205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1206:       assertEquals(56, Node.CHANGE_TIME);
1207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1208:       assertEquals(29, Node.JSDOC_INFO_PROP);
1209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertEquals(36, Node.QUOTED_PROP);
1212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1213:       assertEquals(53, Node.INPUT_ID);
1214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1215:       assertEquals(47, Node.IS_DISPATCHER);
1216:       assertEquals(4095, Node.COLUMN_MASK);
1217:       assertEquals(2, Node.POST_FLAG);
1218:       assertEquals(12, Node.COLUMN_BITS);
1219:       assertEquals(46, Node.IS_NAMESPACE);
1220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1221:       assertEquals(1, Node.DECR_FLAG);
1222:       assertEquals(32, Node.INCRDECR_PROP);
1223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1224:       assertEquals(43, Node.IS_CONSTANT_NAME);
1225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1226:       assertEquals(50, Node.FREE_CALL);
1227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1228:       assertEquals(53, Node.INPUT_ID);
1229:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1230:       assertEquals(43, Node.IS_CONSTANT_NAME);
1231:       assertEquals(56, Node.CHANGE_TIME);
1232:       assertEquals(36, Node.QUOTED_PROP);
1233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1234:       assertEquals(29, Node.JSDOC_INFO_PROP);
1235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1236:       assertEquals(4095, Node.COLUMN_MASK);
1237:       assertEquals(12, Node.COLUMN_BITS);
1238:       assertEquals(1, Node.DECR_FLAG);
1239:       assertEquals(37, Node.OPT_ARG_NAME);
1240:       assertEquals(48, Node.DIRECTIVES);
1241:       assertEquals(49, Node.DIRECT_EVAL);
1242:       assertEquals(32, Node.INCRDECR_PROP);
1243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1245:       assertEquals(57, Node.REFLECTED_OBJECT);
1246:       assertEquals(40, Node.ORIGINALNAME_PROP);
1247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1248:       assertEquals(39, Node.EMPTY_BLOCK);
1249:       assertEquals(54, Node.SLASH_V);
1250:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1251:       assertEquals(52, Node.LENGTH);
1252:       assertEquals(8, Node.FLAG_NO_THROWS);
1253:       assertEquals(50, Node.FREE_CALL);
1254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1255:       assertEquals(55, Node.INFERRED_FUNCTION);
1256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1257:       assertEquals(46, Node.IS_NAMESPACE);
1258:       assertEquals(47, Node.IS_DISPATCHER);
1259:       assertEquals(57, Node.LAST_PROP);
1260:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1261:       assertEquals(2, Node.POST_FLAG);
1262:       assertEquals(30, Node.VAR_ARGS_NAME);
1263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1264:       assertEquals(32, Node.INCRDECR_PROP);
1265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1266:       assertEquals(37, Node.OPT_ARG_NAME);
1267:       assertEquals(49, Node.DIRECT_EVAL);
1268:       assertEquals(56, Node.CHANGE_TIME);
1269:       assertEquals(46, Node.IS_NAMESPACE);
1270:       assertEquals(54, Node.SLASH_V);
1271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1273:       assertEquals(1, Node.DECR_FLAG);
1274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1275:       assertEquals(12, Node.COLUMN_BITS);
1276:       assertEquals(48, Node.DIRECTIVES);
1277:       assertEquals(55, Node.INFERRED_FUNCTION);
1278:       assertEquals(8, Node.FLAG_NO_THROWS);
1279:       assertEquals(39, Node.EMPTY_BLOCK);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1282:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1284:       assertEquals(36, Node.QUOTED_PROP);
1285:       assertEquals(50, Node.FREE_CALL);
1286:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1287:       assertEquals(43, Node.IS_CONSTANT_NAME);
1288:       assertEquals(57, Node.REFLECTED_OBJECT);
1289:       assertEquals(52, Node.LENGTH);
1290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1291:       assertEquals(40, Node.ORIGINALNAME_PROP);
1292:       assertEquals(29, Node.JSDOC_INFO_PROP);
1293:       assertEquals(53, Node.INPUT_ID);
1294:       assertEquals(30, Node.VAR_ARGS_NAME);
1295:       assertEquals(57, Node.LAST_PROP);
1296:       assertEquals(2, Node.POST_FLAG);
1297:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1298:       assertEquals(47, Node.IS_DISPATCHER);
1299:       assertTrue(node0.isCast());
1300:       assertFalse(node0.isIf());
1301:       assertFalse(node0.isNE());
1302:       assertFalse(node0.isFor());
1303:       assertFalse(node0.isEmpty());
1304:       assertFalse(node0.isGetterDef());
1305:       assertFalse(node0.isIn());
1306:       assertFalse(node0.isCase());
1307:       assertFalse(node0.isTry());
1308:       assertFalse(node0.isDefaultCase());
1309:       assertFalse(node0.isString());
1310:       assertFalse(node0.isDebugger());
1311:       assertEquals((-1), node0.getCharno());
1312:       assertFalse(node0.isFunction());
1313:       assertFalse(node0.isArrayLit());
1314:       assertFalse(node0.isParamList());
1315:       assertFalse(node0.isSwitch());
1316:       assertFalse(node0.isBreak());
1317:       assertFalse(node0.isNull());
1318:       assertFalse(node0.isComma());
1319:       assertEquals(0, node0.getChildCount());
1320:       assertFalse(node0.isAdd());
1321:       assertFalse(node0.isVar());
1322:       assertFalse(node0.isGetProp());
1323:       assertFalse(node0.isNew());
1324:       assertFalse(node0.isWhile());
1325:       assertFalse(node0.isExprResult());
1326:       assertFalse(node0.isTrue());
1327:       assertFalse(node0.isCall());
1328:       assertFalse(node0.isGetElem());
1329:       assertFalse(node0.isDelProp());
1330:       assertFalse(node0.isVoid());
1331:       assertFalse(node0.isName());
1332:       assertFalse(node0.isDec());
1333:       assertFalse(node0.hasChildren());
1334:       assertFalse(node0.isNumber());
1335:       assertEquals((-1), node0.getSourcePosition());
1336:       assertFalse(node0.isLabel());
1337:       assertFalse(node0.isAssign());
1338:       assertFalse(node0.isOr());
1339:       assertFalse(node0.isTypeOf());
1340:       assertFalse(node0.hasOneChild());
1341:       assertFalse(node0.isReturn());
1342:       assertFalse(node0.isAssignAdd());
1343:       assertFalse(node0.isDo());
1344:       assertFalse(node0.isScript());
1345:       assertFalse(node0.isContinue());
1346:       assertFalse(node0.isNot());
1347:       assertFalse(node0.isObjectLit());
1348:       assertFalse(node0.isStringKey());
1349:       assertFalse(node0.isAnd());
1350:       assertFalse(node0.isLabelName());
1351:       assertFalse(node0.isThis());
1352:       assertFalse(node0.isSetterDef());
1353:       assertFalse(node0.isFalse());
1354:       assertFalse(node0.isHook());
1355:       assertFalse(node0.isBlock());
1356:       assertFalse(node0.isThrow());
1357:       assertFalse(node0.isInc());
1358:       assertFalse(node0.isWith());
1359:       assertFalse(node0.hasMoreThanOneChild());
1360:       assertFalse(node0.isRegExp());
1361:       assertFalse(node0.isInstanceOf());
1362:       assertFalse(node0.isCatch());
1363:       assertEquals((-1), node0.getLineno());
1364:       assertEquals(155, node0.getType());
1365:       assertFalse(node1.isSetterDef());
1366:       assertFalse(node1.isParamList());
1367:       assertFalse(node1.isNull());
1368:       assertEquals(0, node1.getChildCount());
1369:       assertFalse(node1.isCatch());
1370:       assertFalse(node1.isStringKey());
1371:       assertFalse(node1.isCall());
1372:       assertFalse(node1.isName());
1373:       assertFalse(node1.isAdd());
1374:       assertFalse(node1.isTrue());
1375:       assertFalse(node1.isFunction());
1376:       assertFalse(node1.isVar());
1377:       assertFalse(node1.isEmpty());
1378:       assertFalse(node1.isAssignAdd());
1379:       assertFalse(node1.isDo());
1380:       assertFalse(node1.isNew());
1381:       assertFalse(node1.isDefaultCase());
1382:       assertEquals((-1), node1.getSourcePosition());
1383:       assertFalse(node1.hasChildren());
1384:       assertFalse(node1.isAssign());
1385:       assertFalse(node1.isReturn());
1386:       assertFalse(node1.isOr());
1387:       assertFalse(node1.isDec());
1388:       assertFalse(node1.isTypeOf());
1389:       assertFalse(node1.isCast());
1390:       assertFalse(node1.isContinue());
1391:       assertFalse(node1.isGetElem());
1392:       assertFalse(node1.isDelProp());
1393:       assertFalse(node1.isVoid());
1394:       assertFalse(node1.isDebugger());
1395:       assertFalse(node1.isExprResult());
1396:       assertFalse(node1.isNot());
1397:       assertFalse(node1.isString());
1398:       assertFalse(node1.isObjectLit());
1399:       assertEquals(78132, node1.getType());
1400:       assertFalse(node1.isWhile());
1401:       assertFalse(node1.isComma());
1402:       assertFalse(node1.isThis());
1403:       assertFalse(node1.isGetProp());
1404:       assertFalse(node1.isBreak());
1405:       assertFalse(node1.isFalse());
1406:       assertFalse(node1.isAnd());
1407:       assertFalse(node1.isInstanceOf());
1408:       assertFalse(node1.isInc());
1409:       assertFalse(node1.isThrow());
1410:       assertFalse(node1.isNE());
1411:       assertFalse(node1.isLabel());
1412:       assertFalse(node1.isNumber());
1413:       assertFalse(node1.isIn());
1414:       assertFalse(node1.isGetterDef());
1415:       assertFalse(node1.hasMoreThanOneChild());
1416:       assertFalse(node1.isArrayLit());
1417:       assertFalse(node1.isLabelName());
1418:       assertEquals((-1), node1.getLineno());
1419:       assertFalse(node1.isIf());
1420:       assertFalse(node1.isSwitch());
1421:       assertEquals((-1), node1.getCharno());
1422:       assertFalse(node1.isScript());
1423:       assertFalse(node1.isBlock());
1424:       assertFalse(node1.isWith());
1425:       assertFalse(node1.isRegExp());
1426:       assertFalse(node1.isHook());
1427:       assertFalse(node1.isFor());
1428:       assertFalse(node1.isTry());
1429:       assertFalse(node1.isCase());
1430:       assertFalse(node1.hasOneChild());
1431:       assertFalse(node2.isDefaultCase());
1432:       assertFalse(node2.isFunction());
1433:       assertFalse(node2.isRegExp());
1434:       assertFalse(node2.isDebugger());
1435:       assertFalse(node2.isTrue());
1436:       assertEquals(0, node2.getChildCount());
1437:       assertFalse(node2.isArrayLit());
1438:       assertFalse(node2.isVoid());
1439:       assertFalse(node2.isCatch());
1440:       assertFalse(node2.isIf());
1441:       assertFalse(node2.isDelProp());
1442:       assertFalse(node2.isName());
1443:       assertFalse(node2.isVar());
1444:       assertFalse(node2.isNE());
1445:       assertFalse(node2.isNull());
1446:       assertFalse(node2.isIn());
1447:       assertFalse(node2.isNew());
1448:       assertFalse(node2.isEmpty());
1449:       assertFalse(node2.isSetterDef());
1450:       assertFalse(node2.isAdd());
1451:       assertFalse(node2.isDo());
1452:       assertFalse(node2.isSwitch());
1453:       assertEquals((-1), node2.getCharno());
1454:       assertFalse(node2.isBlock());
1455:       assertEquals((-1), node2.getLineno());
1456:       assertFalse(node2.hasMoreThanOneChild());
1457:       assertFalse(node2.isNumber());
1458:       assertFalse(node2.isLabelName());
1459:       assertFalse(node2.isGetterDef());
1460:       assertFalse(node2.isStringKey());
1461:       assertFalse(node2.isParamList());
1462:       assertFalse(node2.isFor());
1463:       assertFalse(node2.isHook());
1464:       assertFalse(node2.isThis());
1465:       assertFalse(node2.hasOneChild());
1466:       assertFalse(node2.isTry());
1467:       assertFalse(node2.isCase());
1468:       assertFalse(node2.isScript());
1469:       assertFalse(node2.isWith());
1470:       assertFalse(node2.isNot());
1471:       assertFalse(node2.isAnd());
1472:       assertFalse(node2.isInstanceOf());
1473:       assertFalse(node2.isCast());
1474:       assertFalse(node2.isExprResult());
1475:       assertFalse(node2.isGetElem());
1476:       assertFalse(node2.isBreak());
1477:       assertFalse(node2.isThrow());
1478:       assertFalse(node2.isLabel());
1479:       assertFalse(node2.isAssignAdd());
1480:       assertFalse(node2.isOr());
1481:       assertFalse(node2.isInc());
1482:       assertFalse(node2.isString());
1483:       assertFalse(node2.isWhile());
1484:       assertFalse(node2.isFalse());
1485:       assertFalse(node2.isContinue());
1486:       assertFalse(node2.isCall());
1487:       assertFalse(node2.isDec());
1488:       assertFalse(node2.hasChildren());
1489:       assertEquals((-1), node2.getSourcePosition());
1490:       assertFalse(node2.isAssign());
1491:       assertFalse(node2.isTypeOf());
1492:       assertFalse(node2.isComma());
1493:       assertFalse(node2.isReturn());
1494:       assertFalse(node2.isObjectLit());
1495:       assertFalse(node2.isGetProp());
1496:       assertEquals(78132, node2.getType());
1497:       
1498:       node_FileLevelJsDocBuilder0.append("");
1499:       assertFalse(node0.equals((Object)node1));
1500:       assertFalse(node0.equals((Object)node2));
1501:       assertFalse(node1.equals((Object)node0));
1502:       assertFalse(node2.equals((Object)node0));
1503:       assertEquals(52, Node.LENGTH);
1504:       assertEquals(57, Node.REFLECTED_OBJECT);
1505:       assertEquals(54, Node.SLASH_V);
1506:       assertEquals(40, Node.ORIGINALNAME_PROP);
1507:       assertEquals(57, Node.LAST_PROP);
1508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1509:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1510:       assertEquals(30, Node.VAR_ARGS_NAME);
1511:       assertEquals(55, Node.INFERRED_FUNCTION);
1512:       assertEquals(37, Node.OPT_ARG_NAME);
1513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1514:       assertEquals(39, Node.EMPTY_BLOCK);
1515:       assertEquals(48, Node.DIRECTIVES);
1516:       assertEquals(49, Node.DIRECT_EVAL);
1517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1518:       assertEquals(56, Node.CHANGE_TIME);
1519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1520:       assertEquals(29, Node.JSDOC_INFO_PROP);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(8, Node.FLAG_NO_THROWS);
1523:       assertEquals(36, Node.QUOTED_PROP);
1524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1525:       assertEquals(53, Node.INPUT_ID);
1526:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1527:       assertEquals(47, Node.IS_DISPATCHER);
1528:       assertEquals(4095, Node.COLUMN_MASK);
1529:       assertEquals(2, Node.POST_FLAG);
1530:       assertEquals(12, Node.COLUMN_BITS);
1531:       assertEquals(46, Node.IS_NAMESPACE);
1532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1533:       assertEquals(1, Node.DECR_FLAG);
1534:       assertEquals(32, Node.INCRDECR_PROP);
1535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1536:       assertEquals(43, Node.IS_CONSTANT_NAME);
1537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1538:       assertEquals(50, Node.FREE_CALL);
1539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1540:       assertEquals(53, Node.INPUT_ID);
1541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1542:       assertEquals(43, Node.IS_CONSTANT_NAME);
1543:       assertEquals(56, Node.CHANGE_TIME);
1544:       assertEquals(36, Node.QUOTED_PROP);
1545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1546:       assertEquals(29, Node.JSDOC_INFO_PROP);
1547:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1548:       assertEquals(4095, Node.COLUMN_MASK);
1549:       assertEquals(12, Node.COLUMN_BITS);
1550:       assertEquals(1, Node.DECR_FLAG);
1551:       assertEquals(37, Node.OPT_ARG_NAME);
1552:       assertEquals(48, Node.DIRECTIVES);
1553:       assertEquals(49, Node.DIRECT_EVAL);
1554:       assertEquals(32, Node.INCRDECR_PROP);
1555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1557:       assertEquals(57, Node.REFLECTED_OBJECT);
1558:       assertEquals(40, Node.ORIGINALNAME_PROP);
1559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1560:       assertEquals(39, Node.EMPTY_BLOCK);
1561:       assertEquals(54, Node.SLASH_V);
1562:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1563:       assertEquals(52, Node.LENGTH);
1564:       assertEquals(8, Node.FLAG_NO_THROWS);
1565:       assertEquals(50, Node.FREE_CALL);
1566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1567:       assertEquals(55, Node.INFERRED_FUNCTION);
1568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1569:       assertEquals(46, Node.IS_NAMESPACE);
1570:       assertEquals(47, Node.IS_DISPATCHER);
1571:       assertEquals(57, Node.LAST_PROP);
1572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1573:       assertEquals(2, Node.POST_FLAG);
1574:       assertEquals(30, Node.VAR_ARGS_NAME);
1575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1576:       assertEquals(32, Node.INCRDECR_PROP);
1577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1578:       assertEquals(37, Node.OPT_ARG_NAME);
1579:       assertEquals(49, Node.DIRECT_EVAL);
1580:       assertEquals(56, Node.CHANGE_TIME);
1581:       assertEquals(46, Node.IS_NAMESPACE);
1582:       assertEquals(54, Node.SLASH_V);
1583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1584:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1585:       assertEquals(1, Node.DECR_FLAG);
1586:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1587:       assertEquals(12, Node.COLUMN_BITS);
1588:       assertEquals(48, Node.DIRECTIVES);
1589:       assertEquals(55, Node.INFERRED_FUNCTION);
1590:       assertEquals(8, Node.FLAG_NO_THROWS);
1591:       assertEquals(39, Node.EMPTY_BLOCK);
1592:       assertEquals(4095, Node.COLUMN_MASK);
1593:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1594:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1595:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1596:       assertEquals(36, Node.QUOTED_PROP);
1597:       assertEquals(50, Node.FREE_CALL);
1598:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1599:       assertEquals(43, Node.IS_CONSTANT_NAME);
1600:       assertEquals(57, Node.REFLECTED_OBJECT);
1601:       assertEquals(52, Node.LENGTH);
1602:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1603:       assertEquals(40, Node.ORIGINALNAME_PROP);
1604:       assertEquals(29, Node.JSDOC_INFO_PROP);
1605:       assertEquals(53, Node.INPUT_ID);
1606:       assertEquals(30, Node.VAR_ARGS_NAME);
1607:       assertEquals(57, Node.LAST_PROP);
1608:       assertEquals(2, Node.POST_FLAG);
1609:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1610:       assertEquals(47, Node.IS_DISPATCHER);
1611:       assertTrue(node0.isCast());
1612:       assertFalse(node0.isIf());
1613:       assertFalse(node0.isNE());
1614:       assertFalse(node0.isFor());
1615:       assertFalse(node0.isEmpty());
1616:       assertFalse(node0.isGetterDef());
1617:       assertFalse(node0.isIn());
1618:       assertFalse(node0.isCase());
1619:       assertFalse(node0.isTry());
1620:       assertFalse(node0.isDefaultCase());
1621:       assertFalse(node0.isString());
1622:       assertFalse(node0.isDebugger());
1623:       assertEquals((-1), node0.getCharno());
1624:       assertFalse(node0.isFunction());
1625:       assertFalse(node0.isArrayLit());
1626:       assertFalse(node0.isParamList());
1627:       assertFalse(node0.isSwitch());
1628:       assertFalse(node0.isBreak());
1629:       assertFalse(node0.isNull());
1630:       assertFalse(node0.isComma());
1631:       assertEquals(0, node0.getChildCount());
1632:       assertFalse(node0.isAdd());
1633:       assertFalse(node0.isVar());
1634:       assertFalse(node0.isGetProp());
1635:       assertFalse(node0.isNew());
1636:       assertFalse(node0.isWhile());
1637:       assertFalse(node0.isExprResult());
1638:       assertFalse(node0.isTrue());
1639:       assertFalse(node0.isCall());
1640:       assertFalse(node0.isGetElem());
1641:       assertFalse(node0.isDelProp());
1642:       assertFalse(node0.isVoid());
1643:       assertFalse(node0.isName());
1644:       assertFalse(node0.isDec());
1645:       assertFalse(node0.hasChildren());
1646:       assertFalse(node0.isNumber());
1647:       assertEquals((-1), node0.getSourcePosition());
1648:       assertFalse(node0.isLabel());
1649:       assertFalse(node0.isAssign());
1650:       assertFalse(node0.isOr());
1651:       assertFalse(node0.isTypeOf());
1652:       assertFalse(node0.hasOneChild());
1653:       assertFalse(node0.isReturn());
1654:       assertFalse(node0.isAssignAdd());
1655:       assertFalse(node0.isDo());
1656:       assertFalse(node0.isScript());
1657:       assertFalse(node0.isContinue());
1658:       assertFalse(node0.isNot());
1659:       assertFalse(node0.isObjectLit());
1660:       assertFalse(node0.isStringKey());
1661:       assertFalse(node0.isAnd());
1662:       assertFalse(node0.isLabelName());
1663:       assertFalse(node0.isThis());
1664:       assertFalse(node0.isSetterDef());
1665:       assertFalse(node0.isFalse());
1666:       assertFalse(node0.isHook());
1667:       assertFalse(node0.isBlock());
1668:       assertFalse(node0.isThrow());
1669:       assertFalse(node0.isInc());
1670:       assertFalse(node0.isWith());
1671:       assertFalse(node0.hasMoreThanOneChild());
1672:       assertFalse(node0.isRegExp());
1673:       assertFalse(node0.isInstanceOf());
1674:       assertFalse(node0.isCatch());
1675:       assertEquals((-1), node0.getLineno());
1676:       assertEquals(155, node0.getType());
1677:       assertFalse(node1.isSetterDef());
1678:       assertFalse(node1.isParamList());
1679:       assertFalse(node1.isNull());
1680:       assertEquals(0, node1.getChildCount());
1681:       assertFalse(node1.isCatch());
1682:       assertFalse(node1.isStringKey());
1683:       assertFalse(node1.isCall());
1684:       assertFalse(node1.isName());
1685:       assertFalse(node1.isAdd());
1686:       assertFalse(node1.isTrue());
1687:       assertFalse(node1.isFunction());
1688:       assertFalse(node1.isVar());
1689:       assertFalse(node1.isEmpty());
1690:       assertFalse(node1.isAssignAdd());
1691:       assertFalse(node1.isDo());
1692:       assertFalse(node1.isNew());
1693:       assertFalse(node1.isDefaultCase());
1694:       assertEquals((-1), node1.getSourcePosition());
1695:       assertFalse(node1.hasChildren());
1696:       assertFalse(node1.isAssign());
1697:       assertFalse(node1.isReturn());
1698:       assertFalse(node1.isOr());
1699:       assertFalse(node1.isDec());
1700:       assertFalse(node1.isTypeOf());
1701:       assertFalse(node1.isCast());
1702:       assertFalse(node1.isContinue());
1703:       assertFalse(node1.isGetElem());
1704:       assertFalse(node1.isDelProp());
1705:       assertFalse(node1.isVoid());
1706:       assertFalse(node1.isDebugger());
1707:       assertFalse(node1.isExprResult());
1708:       assertFalse(node1.isNot());
1709:       assertFalse(node1.isString());
1710:       assertFalse(node1.isObjectLit());
1711:       assertEquals(78132, node1.getType());
1712:       assertFalse(node1.isWhile());
1713:       assertFalse(node1.isComma());
1714:       assertFalse(node1.isThis());
1715:       assertFalse(node1.isGetProp());
1716:       assertFalse(node1.isBreak());
1717:       assertFalse(node1.isFalse());
1718:       assertFalse(node1.isAnd());
1719:       assertFalse(node1.isInstanceOf());
1720:       assertFalse(node1.isInc());
1721:       assertFalse(node1.isThrow());
1722:       assertFalse(node1.isNE());
1723:       assertFalse(node1.isLabel());
1724:       assertFalse(node1.isNumber());
1725:       assertFalse(node1.isIn());
1726:       assertFalse(node1.isGetterDef());
1727:       assertFalse(node1.hasMoreThanOneChild());
1728:       assertFalse(node1.isArrayLit());
1729:       assertFalse(node1.isLabelName());
1730:       assertEquals((-1), node1.getLineno());
1731:       assertFalse(node1.isIf());
1732:       assertFalse(node1.isSwitch());
1733:       assertEquals((-1), node1.getCharno());
1734:       assertFalse(node1.isScript());
1735:       assertFalse(node1.isBlock());
1736:       assertFalse(node1.isWith());
1737:       assertFalse(node1.isRegExp());
1738:       assertFalse(node1.isHook());
1739:       assertFalse(node1.isFor());
1740:       assertFalse(node1.isTry());
1741:       assertFalse(node1.isCase());
1742:       assertFalse(node1.hasOneChild());
1743:       assertFalse(node2.isDefaultCase());
1744:       assertFalse(node2.isFunction());
1745:       assertFalse(node2.isRegExp());
1746:       assertFalse(node2.isDebugger());
1747:       assertFalse(node2.isTrue());
1748:       assertEquals(0, node2.getChildCount());
1749:       assertFalse(node2.isArrayLit());
1750:       assertFalse(node2.isVoid());
1751:       assertFalse(node2.isCatch());
1752:       assertFalse(node2.isIf());
1753:       assertFalse(node2.isDelProp());
1754:       assertFalse(node2.isName());
1755:       assertFalse(node2.isVar());
1756:       assertFalse(node2.isNE());
1757:       assertFalse(node2.isNull());
1758:       assertFalse(node2.isIn());
1759:       assertFalse(node2.isNew());
1760:       assertFalse(node2.isEmpty());
1761:       assertFalse(node2.isSetterDef());
1762:       assertFalse(node2.isAdd());
1763:       assertFalse(node2.isDo());
1764:       assertFalse(node2.isSwitch());
1765:       assertEquals((-1), node2.getCharno());
1766:       assertFalse(node2.isBlock());
1767:       assertEquals((-1), node2.getLineno());
1768:       assertFalse(node2.hasMoreThanOneChild());
1769:       assertFalse(node2.isNumber());
1770:       assertFalse(node2.isLabelName());
1771:       assertFalse(node2.isGetterDef());
1772:       assertFalse(node2.isStringKey());
1773:       assertFalse(node2.isParamList());
1774:       assertFalse(node2.isFor());
1775:       assertFalse(node2.isHook());
1776:       assertFalse(node2.isThis());
1777:       assertFalse(node2.hasOneChild());
1778:       assertFalse(node2.isTry());
1779:       assertFalse(node2.isCase());
1780:       assertFalse(node2.isScript());
1781:       assertFalse(node2.isWith());
1782:       assertFalse(node2.isNot());
1783:       assertFalse(node2.isAnd());
1784:       assertFalse(node2.isInstanceOf());
1785:       assertFalse(node2.isCast());
1786:       assertFalse(node2.isExprResult());
1787:       assertFalse(node2.isGetElem());
1788:       assertFalse(node2.isBreak());
1789:       assertFalse(node2.isThrow());
1790:       assertFalse(node2.isLabel());
1791:       assertFalse(node2.isAssignAdd());
1792:       assertFalse(node2.isOr());
1793:       assertFalse(node2.isInc());
1794:       assertFalse(node2.isString());
1795:       assertFalse(node2.isWhile());
1796:       assertFalse(node2.isFalse());
1797:       assertFalse(node2.isContinue());
1798:       assertFalse(node2.isCall());
1799:       assertFalse(node2.isDec());
1800:       assertFalse(node2.hasChildren());
1801:       assertEquals((-1), node2.getSourcePosition());
1802:       assertFalse(node2.isAssign());
1803:       assertFalse(node2.isTypeOf());
1804:       assertFalse(node2.isComma());
1805:       assertFalse(node2.isReturn());
1806:       assertFalse(node2.isObjectLit());
1807:       assertFalse(node2.isGetProp());
1808:       assertEquals(78132, node2.getType());
1809:       assertNotSame(node0, node1);
1810:       assertNotSame(node0, node2);
1811:       assertSame(node1, node2);
1812:       assertNotSame(node1, node0);
1813:       assertNotSame(node2, node0);
1814:       assertSame(node2, node1);
1815:       
1816:       boolean boolean3 = node2.wasEmptyNode();
1817:       assertFalse(boolean3);
1818:       assertFalse(node0.equals((Object)node1));
1819:       assertFalse(node0.equals((Object)node2));
1820:       assertFalse(node1.equals((Object)node0));
1821:       assertFalse(node2.equals((Object)node0));
1822:       assertTrue(boolean3 == boolean0);
1823:       assertTrue(boolean3 == boolean1);
1824:       assertTrue(boolean3 == boolean2);
1825:       assertEquals(52, Node.LENGTH);
1826:       assertEquals(57, Node.REFLECTED_OBJECT);
1827:       assertEquals(54, Node.SLASH_V);
1828:       assertEquals(40, Node.ORIGINALNAME_PROP);
1829:       assertEquals(57, Node.LAST_PROP);
1830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1831:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1832:       assertEquals(30, Node.VAR_ARGS_NAME);
1833:       assertEquals(55, Node.INFERRED_FUNCTION);
1834:       assertEquals(37, Node.OPT_ARG_NAME);
1835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1836:       assertEquals(39, Node.EMPTY_BLOCK);
1837:       assertEquals(48, Node.DIRECTIVES);
1838:       assertEquals(49, Node.DIRECT_EVAL);
1839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1840:       assertEquals(56, Node.CHANGE_TIME);
1841:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1842:       assertEquals(29, Node.JSDOC_INFO_PROP);
1843:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1844:       assertEquals(8, Node.FLAG_NO_THROWS);
1845:       assertEquals(36, Node.QUOTED_PROP);
1846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1847:       assertEquals(53, Node.INPUT_ID);
1848:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1849:       assertEquals(47, Node.IS_DISPATCHER);
1850:       assertEquals(4095, Node.COLUMN_MASK);
1851:       assertEquals(2, Node.POST_FLAG);
1852:       assertEquals(12, Node.COLUMN_BITS);
1853:       assertEquals(46, Node.IS_NAMESPACE);
1854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1855:       assertEquals(1, Node.DECR_FLAG);
1856:       assertEquals(32, Node.INCRDECR_PROP);
1857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1858:       assertEquals(43, Node.IS_CONSTANT_NAME);
1859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1860:       assertEquals(50, Node.FREE_CALL);
1861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1862:       assertEquals(53, Node.INPUT_ID);
1863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1864:       assertEquals(43, Node.IS_CONSTANT_NAME);
1865:       assertEquals(56, Node.CHANGE_TIME);
1866:       assertEquals(36, Node.QUOTED_PROP);
1867:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1868:       assertEquals(29, Node.JSDOC_INFO_PROP);
1869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1870:       assertEquals(4095, Node.COLUMN_MASK);
1871:       assertEquals(12, Node.COLUMN_BITS);
1872:       assertEquals(1, Node.DECR_FLAG);
1873:       assertEquals(37, Node.OPT_ARG_NAME);
1874:       assertEquals(48, Node.DIRECTIVES);
1875:       assertEquals(49, Node.DIRECT_EVAL);
1876:       assertEquals(32, Node.INCRDECR_PROP);
1877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1878:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1879:       assertEquals(57, Node.REFLECTED_OBJECT);
1880:       assertEquals(40, Node.ORIGINALNAME_PROP);
1881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1882:       assertEquals(39, Node.EMPTY_BLOCK);
1883:       assertEquals(54, Node.SLASH_V);
1884:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1885:       assertEquals(52, Node.LENGTH);
1886:       assertEquals(8, Node.FLAG_NO_THROWS);
1887:       assertEquals(50, Node.FREE_CALL);
1888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1889:       assertEquals(55, Node.INFERRED_FUNCTION);
1890:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1891:       assertEquals(46, Node.IS_NAMESPACE);
1892:       assertEquals(47, Node.IS_DISPATCHER);
1893:       assertEquals(57, Node.LAST_PROP);
1894:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1895:       assertEquals(2, Node.POST_FLAG);
1896:       assertEquals(30, Node.VAR_ARGS_NAME);
1897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1898:       assertEquals(32, Node.INCRDECR_PROP);
1899:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1900:       assertEquals(37, Node.OPT_ARG_NAME);
1901:       assertEquals(49, Node.DIRECT_EVAL);
1902:       assertEquals(56, Node.CHANGE_TIME);
1903:       assertEquals(46, Node.IS_NAMESPACE);
1904:       assertEquals(54, Node.SLASH_V);
1905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1906:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1907:       assertEquals(1, Node.DECR_FLAG);
1908:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1909:       assertEquals(12, Node.COLUMN_BITS);
1910:       assertEquals(48, Node.DIRECTIVES);
1911:       assertEquals(55, Node.INFERRED_FUNCTION);
1912:       assertEquals(8, Node.FLAG_NO_THROWS);
1913:       assertEquals(39, Node.EMPTY_BLOCK);
1914:       assertEquals(4095, Node.COLUMN_MASK);
1915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1916:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1917:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1918:       assertEquals(36, Node.QUOTED_PROP);
1919:       assertEquals(50, Node.FREE_CALL);
1920:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1921:       assertEquals(43, Node.IS_CONSTANT_NAME);
1922:       assertEquals(57, Node.REFLECTED_OBJECT);
1923:       assertEquals(52, Node.LENGTH);
1924:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1925:       assertEquals(40, Node.ORIGINALNAME_PROP);
1926:       assertEquals(29, Node.JSDOC_INFO_PROP);
1927:       assertEquals(53, Node.INPUT_ID);
1928:       assertEquals(30, Node.VAR_ARGS_NAME);
1929:       assertEquals(57, Node.LAST_PROP);
1930:       assertEquals(2, Node.POST_FLAG);
1931:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1932:       assertEquals(47, Node.IS_DISPATCHER);
1933:       assertTrue(node0.isCast());
1934:       assertFalse(node0.isIf());
1935:       assertFalse(node0.isNE());
1936:       assertFalse(node0.isFor());
1937:       assertFalse(node0.isEmpty());
1938:       assertFalse(node0.isGetterDef());
1939:       assertFalse(node0.isIn());
1940:       assertFalse(node0.isCase());
1941:       assertFalse(node0.isTry());
1942:       assertFalse(node0.isDefaultCase());
1943:       assertFalse(node0.isString());
1944:       assertFalse(node0.isDebugger());
1945:       assertEquals((-1), node0.getCharno());
1946:       assertFalse(node0.isFunction());
1947:       assertFalse(node0.isArrayLit());
1948:       assertFalse(node0.isParamList());
1949:       assertFalse(node0.isSwitch());
1950:       assertFalse(node0.isBreak());
1951:       assertFalse(node0.isNull());
1952:       assertFalse(node0.isComma());
1953:       assertEquals(0, node0.getChildCount());
1954:       assertFalse(node0.isAdd());
1955:       assertFalse(node0.isVar());
1956:       assertFalse(node0.isGetProp());
1957:       assertFalse(node0.isNew());
1958:       assertFalse(node0.isWhile());
1959:       assertFalse(node0.isExprResult());
1960:       assertFalse(node0.isTrue());
1961:       assertFalse(node0.isCall());
1962:       assertFalse(node0.isGetElem());
1963:       assertFalse(node0.isDelProp());
1964:       assertFalse(node0.isVoid());
1965:       assertFalse(node0.isName());
1966:       assertFalse(node0.isDec());
1967:       assertFalse(node0.hasChildren());
1968:       assertFalse(node0.isNumber());
1969:       assertEquals((-1), node0.getSourcePosition());
1970:       assertFalse(node0.isLabel());
1971:       assertFalse(node0.isAssign());
1972:       assertFalse(node0.isOr());
1973:       assertFalse(node0.isTypeOf());
1974:       assertFalse(node0.hasOneChild());
1975:       assertFalse(node0.isReturn());
1976:       assertFalse(node0.isAssignAdd());
1977:       assertFalse(node0.isDo());
1978:       assertFalse(node0.isScript());
1979:       assertFalse(node0.isContinue());
1980:       assertFalse(node0.isNot());
1981:       assertFalse(node0.isObjectLit());
1982:       assertFalse(node0.isStringKey());
1983:       assertFalse(node0.isAnd());
1984:       assertFalse(node0.isLabelName());
1985:       assertFalse(node0.isThis());
1986:       assertFalse(node0.isSetterDef());
1987:       assertFalse(node0.isFalse());
1988:       assertFalse(node0.isHook());
1989:       assertFalse(node0.isBlock());
1990:       assertFalse(node0.isThrow());
1991:       assertFalse(node0.isInc());
1992:       assertFalse(node0.isWith());
1993:       assertFalse(node0.hasMoreThanOneChild());
1994:       assertFalse(node0.isRegExp());
1995:       assertFalse(node0.isInstanceOf());
1996:       assertFalse(node0.isCatch());
1997:       assertEquals((-1), node0.getLineno());
1998:       assertEquals(155, node0.getType());
1999:       assertFalse(node1.isSetterDef());
2000:       assertFalse(node1.isParamList());
2001:       assertFalse(node1.isNull());
2002:       assertEquals(0, node1.getChildCount());
2003:       assertFalse(node1.isCatch());
2004:       assertFalse(node1.isStringKey());
2005:       assertFalse(node1.isCall());
2006:       assertFalse(node1.isName());
2007:       assertFalse(node1.isAdd());
2008:       assertFalse(node1.isTrue());
2009:       assertFalse(node1.isFunction());
2010:       assertFalse(node1.isVar());
2011:       assertFalse(node1.isEmpty());
2012:       assertFalse(node1.isAssignAdd());
2013:       assertFalse(node1.isDo());
2014:       assertFalse(node1.isNew());
2015:       assertFalse(node1.isDefaultCase());
2016:       assertEquals((-1), node1.getSourcePosition());
2017:       assertFalse(node1.hasChildren());
2018:       assertFalse(node1.isAssign());
2019:       assertFalse(node1.isReturn());
2020:       assertFalse(node1.isOr());
2021:       assertFalse(node1.isDec());
2022:       assertFalse(node1.isTypeOf());
2023:       assertFalse(node1.isCast());
2024:       assertFalse(node1.isContinue());
2025:       assertFalse(node1.isGetElem());
2026:       assertFalse(node1.isDelProp());
2027:       assertFalse(node1.isVoid());
2028:       assertFalse(node1.isDebugger());
2029:       assertFalse(node1.isExprResult());
2030:       assertFalse(node1.isNot());
2031:       assertFalse(node1.isString());
2032:       assertFalse(node1.isObjectLit());
2033:       assertEquals(78132, node1.getType());
2034:       assertFalse(node1.isWhile());
2035:       assertFalse(node1.isComma());
2036:       assertFalse(node1.isThis());
2037:       assertFalse(node1.isGetProp());
2038:       assertFalse(node1.isBreak());
2039:       assertFalse(node1.isFalse());
2040:       assertFalse(node1.isAnd());
2041:       assertFalse(node1.isInstanceOf());
2042:       assertFalse(node1.isInc());
2043:       assertFalse(node1.isThrow());
2044:       assertFalse(node1.isNE());
2045:       assertFalse(node1.isLabel());
2046:       assertFalse(node1.isNumber());
2047:       assertFalse(node1.isIn());
2048:       assertFalse(node1.isGetterDef());
2049:       assertFalse(node1.hasMoreThanOneChild());
2050:       assertFalse(node1.isArrayLit());
2051:       assertFalse(node1.isLabelName());
2052:       assertEquals((-1), node1.getLineno());
2053:       assertFalse(node1.isIf());
2054:       assertFalse(node1.isSwitch());
2055:       assertEquals((-1), node1.getCharno());
2056:       assertFalse(node1.isScript());
2057:       assertFalse(node1.isBlock());
2058:       assertFalse(node1.isWith());
2059:       assertFalse(node1.isRegExp());
2060:       assertFalse(node1.isHook());
2061:       assertFalse(node1.isFor());
2062:       assertFalse(node1.isTry());
2063:       assertFalse(node1.isCase());
2064:       assertFalse(node1.hasOneChild());
2065:       assertFalse(node2.isDefaultCase());
2066:       assertFalse(node2.isFunction());
2067:       assertFalse(node2.isRegExp());
2068:       assertFalse(node2.isDebugger());
2069:       assertFalse(node2.isTrue());
2070:       assertEquals(0, node2.getChildCount());
2071:       assertFalse(node2.isArrayLit());
2072:       assertFalse(node2.isVoid());
2073:       assertFalse(node2.isCatch());
2074:       assertFalse(node2.isIf());
2075:       assertFalse(node2.isDelProp());
2076:       assertFalse(node2.isName());
2077:       assertFalse(node2.isVar());
2078:       assertFalse(node2.isNE());
2079:       assertFalse(node2.isNull());
2080:       assertFalse(node2.isIn());
2081:       assertFalse(node2.isNew());
2082:       assertFalse(node2.isEmpty());
2083:       assertFalse(node2.isSetterDef());
2084:       assertFalse(node2.isAdd());
2085:       assertFalse(node2.isDo());
2086:       assertFalse(node2.isSwitch());
2087:       assertEquals((-1), node2.getCharno());
2088:       assertFalse(node2.isBlock());
2089:       assertEquals((-1), node2.getLineno());
2090:       assertFalse(node2.hasMoreThanOneChild());
2091:       assertFalse(node2.isNumber());
2092:       assertFalse(node2.isLabelName());
2093:       assertFalse(node2.isGetterDef());
2094:       assertFalse(node2.isStringKey());
2095:       assertFalse(node2.isParamList());
2096:       assertFalse(node2.isFor());
2097:       assertFalse(node2.isHook());
2098:       assertFalse(node2.isThis());
2099:       assertFalse(node2.hasOneChild());
2100:       assertFalse(node2.isTry());
2101:       assertFalse(node2.isCase());
2102:       assertFalse(node2.isScript());
2103:       assertFalse(node2.isWith());
2104:       assertFalse(node2.isNot());
2105:       assertFalse(node2.isAnd());
2106:       assertFalse(node2.isInstanceOf());
2107:       assertFalse(node2.isCast());
2108:       assertFalse(node2.isExprResult());
2109:       assertFalse(node2.isGetElem());
2110:       assertFalse(node2.isBreak());
2111:       assertFalse(node2.isThrow());
2112:       assertFalse(node2.isLabel());
2113:       assertFalse(node2.isAssignAdd());
2114:       assertFalse(node2.isOr());
2115:       assertFalse(node2.isInc());
2116:       assertFalse(node2.isString());
2117:       assertFalse(node2.isWhile());
2118:       assertFalse(node2.isFalse());
2119:       assertFalse(node2.isContinue());
2120:       assertFalse(node2.isCall());
2121:       assertFalse(node2.isDec());
2122:       assertFalse(node2.hasChildren());
2123:       assertEquals((-1), node2.getSourcePosition());
2124:       assertFalse(node2.isAssign());
2125:       assertFalse(node2.isTypeOf());
2126:       assertFalse(node2.isComma());
2127:       assertFalse(node2.isReturn());
2128:       assertFalse(node2.isObjectLit());
2129:       assertFalse(node2.isGetProp());
2130:       assertEquals(78132, node2.getType());
2131:       assertNotSame(node0, node1);
2132:       assertNotSame(node0, node2);
2133:       assertSame(node1, node2);
2134:       assertNotSame(node1, node0);
2135:       assertNotSame(node2, node0);
2136:       assertSame(node2, node1);
2137:   }
2138: }
RegularFileObject[/tmp/EvoSuite_59_1628161052177/com/google/javascript/rhino/Node_59_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_59_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_59_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_59_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.javascript.rhino.jstype.TernaryValue",
343:       "com.google.javascript.rhino.jstype.JSType$2",
344:       "com.google.javascript.rhino.jstype.JSType$TypePair",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.jstype.NamespaceType",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2"
362:     );
363:   }
364: }

[MASTER] 10:57:32.667 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(155, "");
assertNotNull(node0);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());

boolean boolean0 = node0.getBooleanProp(155);
assertFalse(boolean0);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());

boolean boolean1 = node0.isThrow();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());

boolean boolean2 = node0.isBreak();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());
assertFalse(iterable0.contains(node0));

node0.setQuotedString();
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());

Node node1 = Node.newString(78132, "", (-3203), 117);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(78132, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertNotSame(node1, node0);

int int0 = node1.getChangeTime();
assertEquals(0, int0);
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(78132, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertNotSame(node1, node0);

Node node2 = node1.srcref(node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(78132, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(78132, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(78132, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);

boolean boolean3 = node2.wasEmptyNode();
assertFalse(boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertTrue(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertEquals(155, node0.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(78132, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);


[MASTER] 10:57:42.426 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1628161062029/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1628161062029/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:42.426 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:42.426 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:42.427 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:57:42.430 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1628161062029/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(155, "");
21:       assertNotNull(node0);
22:       assertEquals(55, Node.INFERRED_FUNCTION);
23:       assertEquals(4095, Node.COLUMN_MASK);
24:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(8, Node.FLAG_NO_THROWS);
29:       assertEquals(39, Node.EMPTY_BLOCK);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
32:       assertEquals(29, Node.JSDOC_INFO_PROP);
33:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(48, Node.DIRECTIVES);
36:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
37:       assertEquals(36, Node.QUOTED_PROP);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(30, Node.VAR_ARGS_NAME);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(1, Node.DECR_FLAG);
43:       assertEquals(49, Node.DIRECT_EVAL);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(32, Node.INCRDECR_PROP);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
48:       assertEquals(12, Node.COLUMN_BITS);
49:       assertEquals(2, Node.POST_FLAG);
50:       assertEquals(50, Node.FREE_CALL);
51:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(40, Node.ORIGINALNAME_PROP);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(155, node0.getType());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isBlock());
62:       assertFalse(node0.isWhile());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isNew());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isAdd());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isParamList());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isNumber());
80:       assertFalse(node0.isScript());
81:       assertFalse(node0.isIn());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isInstanceOf());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isNE());
86:       assertFalse(node0.isThis());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isRegExp());
90:       assertFalse(node0.isCatch());
91:       assertEquals((-1), node0.getCharno());
92:       assertFalse(node0.isThrow());
93:       assertFalse(node0.isHook());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isGetProp());
96:       assertFalse(node0.isCase());
97:       assertFalse(node0.isInc());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isAnd());
100:       assertTrue(node0.isCast());
101:       assertFalse(node0.isSwitch());
102:       assertFalse(node0.isFalse());
103:       assertFalse(node0.isDebugger());
104:       assertFalse(node0.isTrue());
105:       assertFalse(node0.isDefaultCase());
106:       assertEquals((-1), node0.getSourcePosition());
107:       assertFalse(node0.isNot());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isOr());
110:       assertFalse(node0.isComma());
111:       assertFalse(node0.isReturn());
112:       assertFalse(node0.isNull());
113:       assertFalse(node0.isDec());
114:       assertFalse(node0.hasChildren());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.isDelProp());
119:       assertFalse(node0.isName());
120:       assertFalse(node0.isVoid());
121:       assertFalse(node0.isExprResult());
122:       assertFalse(node0.isCall());
123:       assertFalse(node0.isGetElem());
124:       
125:       boolean boolean0 = node0.getBooleanProp(155);
126:       assertFalse(boolean0);
127:       assertEquals(55, Node.INFERRED_FUNCTION);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
130:       assertEquals(53, Node.INPUT_ID);
131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(8, Node.FLAG_NO_THROWS);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(37, Node.OPT_ARG_NAME);
136:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
137:       assertEquals(29, Node.JSDOC_INFO_PROP);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(48, Node.DIRECTIVES);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(36, Node.QUOTED_PROP);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(1, Node.DECR_FLAG);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
150:       assertEquals(32, Node.INCRDECR_PROP);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(12, Node.COLUMN_BITS);
154:       assertEquals(2, Node.POST_FLAG);
155:       assertEquals(50, Node.FREE_CALL);
156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(40, Node.ORIGINALNAME_PROP);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(155, node0.getType());
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isBlock());
167:       assertFalse(node0.isWhile());
168:       assertFalse(node0.isDo());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isSetterDef());
171:       assertFalse(node0.isAdd());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isParamList());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isLabelName());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isContinue());
179:       assertFalse(node0.hasOneChild());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isNumber());
185:       assertFalse(node0.isScript());
186:       assertFalse(node0.isIn());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isInstanceOf());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertFalse(node0.isNE());
191:       assertFalse(node0.isThis());
192:       assertFalse(node0.isIf());
193:       assertFalse(node0.isWith());
194:       assertFalse(node0.isRegExp());
195:       assertFalse(node0.isCatch());
196:       assertEquals((-1), node0.getCharno());
197:       assertFalse(node0.isThrow());
198:       assertFalse(node0.isHook());
199:       assertFalse(node0.isString());
200:       assertFalse(node0.isGetProp());
201:       assertFalse(node0.isCase());
202:       assertFalse(node0.isInc());
203:       assertFalse(node0.isObjectLit());
204:       assertFalse(node0.isAnd());
205:       assertTrue(node0.isCast());
206:       assertFalse(node0.isSwitch());
207:       assertFalse(node0.isFalse());
208:       assertFalse(node0.isDebugger());
209:       assertFalse(node0.isTrue());
210:       assertFalse(node0.isDefaultCase());
211:       assertEquals((-1), node0.getSourcePosition());
212:       assertFalse(node0.isNot());
213:       assertFalse(node0.isEmpty());
214:       assertFalse(node0.isOr());
215:       assertFalse(node0.isComma());
216:       assertFalse(node0.isReturn());
217:       assertFalse(node0.isNull());
218:       assertFalse(node0.isDec());
219:       assertFalse(node0.hasChildren());
220:       assertFalse(node0.isBreak());
221:       assertFalse(node0.isAssign());
222:       assertFalse(node0.isTypeOf());
223:       assertFalse(node0.isDelProp());
224:       assertFalse(node0.isName());
225:       assertFalse(node0.isVoid());
226:       assertFalse(node0.isExprResult());
227:       assertFalse(node0.isCall());
228:       assertFalse(node0.isGetElem());
229:       
230:       boolean boolean1 = node0.isThrow();
231:       assertFalse(boolean1);
232:       assertTrue(boolean1 == boolean0);
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
236:       assertEquals(53, Node.INPUT_ID);
237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(8, Node.FLAG_NO_THROWS);
240:       assertEquals(39, Node.EMPTY_BLOCK);
241:       assertEquals(37, Node.OPT_ARG_NAME);
242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
243:       assertEquals(29, Node.JSDOC_INFO_PROP);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(48, Node.DIRECTIVES);
247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(30, Node.VAR_ARGS_NAME);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(1, Node.DECR_FLAG);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
256:       assertEquals(32, Node.INCRDECR_PROP);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
259:       assertEquals(12, Node.COLUMN_BITS);
260:       assertEquals(2, Node.POST_FLAG);
261:       assertEquals(50, Node.FREE_CALL);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(40, Node.ORIGINALNAME_PROP);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(54, Node.SLASH_V);
269:       assertEquals(155, node0.getType());
270:       assertFalse(node0.isStringKey());
271:       assertFalse(node0.isVar());
272:       assertFalse(node0.isBlock());
273:       assertFalse(node0.isWhile());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isNew());
276:       assertFalse(node0.isSetterDef());
277:       assertFalse(node0.isAdd());
278:       assertEquals(0, node0.getChildCount());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.isParamList());
281:       assertFalse(node0.isLabel());
282:       assertFalse(node0.isLabelName());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isContinue());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isArrayLit());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node0.isNumber());
291:       assertFalse(node0.isScript());
292:       assertFalse(node0.isIn());
293:       assertEquals((-1), node0.getLineno());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.hasMoreThanOneChild());
296:       assertFalse(node0.isNE());
297:       assertFalse(node0.isThis());
298:       assertFalse(node0.isIf());
299:       assertFalse(node0.isWith());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isCatch());
302:       assertEquals((-1), node0.getCharno());
303:       assertFalse(node0.isThrow());
304:       assertFalse(node0.isHook());
305:       assertFalse(node0.isString());
306:       assertFalse(node0.isGetProp());
307:       assertFalse(node0.isCase());
308:       assertFalse(node0.isInc());
309:       assertFalse(node0.isObjectLit());
310:       assertFalse(node0.isAnd());
311:       assertTrue(node0.isCast());
312:       assertFalse(node0.isSwitch());
313:       assertFalse(node0.isFalse());
314:       assertFalse(node0.isDebugger());
315:       assertFalse(node0.isTrue());
316:       assertFalse(node0.isDefaultCase());
317:       assertEquals((-1), node0.getSourcePosition());
318:       assertFalse(node0.isNot());
319:       assertFalse(node0.isEmpty());
320:       assertFalse(node0.isOr());
321:       assertFalse(node0.isComma());
322:       assertFalse(node0.isReturn());
323:       assertFalse(node0.isNull());
324:       assertFalse(node0.isDec());
325:       assertFalse(node0.hasChildren());
326:       assertFalse(node0.isBreak());
327:       assertFalse(node0.isAssign());
328:       assertFalse(node0.isTypeOf());
329:       assertFalse(node0.isDelProp());
330:       assertFalse(node0.isName());
331:       assertFalse(node0.isVoid());
332:       assertFalse(node0.isExprResult());
333:       assertFalse(node0.isCall());
334:       assertFalse(node0.isGetElem());
335:       
336:       boolean boolean2 = node0.isBreak();
337:       assertFalse(boolean2);
338:       assertTrue(boolean2 == boolean0);
339:       assertTrue(boolean2 == boolean1);
340:       assertEquals(55, Node.INFERRED_FUNCTION);
341:       assertEquals(4095, Node.COLUMN_MASK);
342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(8, Node.FLAG_NO_THROWS);
347:       assertEquals(39, Node.EMPTY_BLOCK);
348:       assertEquals(37, Node.OPT_ARG_NAME);
349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
350:       assertEquals(29, Node.JSDOC_INFO_PROP);
351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
352:       assertEquals(52, Node.LENGTH);
353:       assertEquals(48, Node.DIRECTIVES);
354:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
355:       assertEquals(36, Node.QUOTED_PROP);
356:       assertEquals(56, Node.CHANGE_TIME);
357:       assertEquals(57, Node.REFLECTED_OBJECT);
358:       assertEquals(30, Node.VAR_ARGS_NAME);
359:       assertEquals(57, Node.LAST_PROP);
360:       assertEquals(1, Node.DECR_FLAG);
361:       assertEquals(49, Node.DIRECT_EVAL);
362:       assertEquals(15, Node.NO_SIDE_EFFECTS);
363:       assertEquals(32, Node.INCRDECR_PROP);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
366:       assertEquals(12, Node.COLUMN_BITS);
367:       assertEquals(2, Node.POST_FLAG);
368:       assertEquals(50, Node.FREE_CALL);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
371:       assertEquals(40, Node.ORIGINALNAME_PROP);
372:       assertEquals(51, Node.STATIC_SOURCE_FILE);
373:       assertEquals(43, Node.IS_CONSTANT_NAME);
374:       assertEquals(46, Node.IS_NAMESPACE);
375:       assertEquals(54, Node.SLASH_V);
376:       assertEquals(155, node0.getType());
377:       assertFalse(node0.isStringKey());
378:       assertFalse(node0.isVar());
379:       assertFalse(node0.isBlock());
380:       assertFalse(node0.isWhile());
381:       assertFalse(node0.isDo());
382:       assertFalse(node0.isNew());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isAdd());
385:       assertEquals(0, node0.getChildCount());
386:       assertFalse(node0.isAssignAdd());
387:       assertFalse(node0.isParamList());
388:       assertFalse(node0.isLabel());
389:       assertFalse(node0.isLabelName());
390:       assertFalse(node0.isFunction());
391:       assertFalse(node0.isContinue());
392:       assertFalse(node0.hasOneChild());
393:       assertFalse(node0.isArrayLit());
394:       assertFalse(node0.isTry());
395:       assertFalse(node0.isFor());
396:       assertFalse(node0.isGetterDef());
397:       assertFalse(node0.isNumber());
398:       assertFalse(node0.isScript());
399:       assertFalse(node0.isIn());
400:       assertEquals((-1), node0.getLineno());
401:       assertFalse(node0.isInstanceOf());
402:       assertFalse(node0.hasMoreThanOneChild());
403:       assertFalse(node0.isNE());
404:       assertFalse(node0.isThis());
405:       assertFalse(node0.isIf());
406:       assertFalse(node0.isWith());
407:       assertFalse(node0.isRegExp());
408:       assertFalse(node0.isCatch());
409:       assertEquals((-1), node0.getCharno());
410:       assertFalse(node0.isThrow());
411:       assertFalse(node0.isHook());
412:       assertFalse(node0.isString());
413:       assertFalse(node0.isGetProp());
414:       assertFalse(node0.isCase());
415:       assertFalse(node0.isInc());
416:       assertFalse(node0.isObjectLit());
417:       assertFalse(node0.isAnd());
418:       assertTrue(node0.isCast());
419:       assertFalse(node0.isSwitch());
420:       assertFalse(node0.isFalse());
421:       assertFalse(node0.isDebugger());
422:       assertFalse(node0.isTrue());
423:       assertFalse(node0.isDefaultCase());
424:       assertEquals((-1), node0.getSourcePosition());
425:       assertFalse(node0.isNot());
426:       assertFalse(node0.isEmpty());
427:       assertFalse(node0.isOr());
428:       assertFalse(node0.isComma());
429:       assertFalse(node0.isReturn());
430:       assertFalse(node0.isNull());
431:       assertFalse(node0.isDec());
432:       assertFalse(node0.hasChildren());
433:       assertFalse(node0.isBreak());
434:       assertFalse(node0.isAssign());
435:       assertFalse(node0.isTypeOf());
436:       assertFalse(node0.isDelProp());
437:       assertFalse(node0.isName());
438:       assertFalse(node0.isVoid());
439:       assertFalse(node0.isExprResult());
440:       assertFalse(node0.isCall());
441:       assertFalse(node0.isGetElem());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertEquals(55, Node.INFERRED_FUNCTION);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
451:       assertEquals(8, Node.FLAG_NO_THROWS);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(37, Node.OPT_ARG_NAME);
454:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
457:       assertEquals(52, Node.LENGTH);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(56, Node.CHANGE_TIME);
462:       assertEquals(57, Node.REFLECTED_OBJECT);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(57, Node.LAST_PROP);
465:       assertEquals(1, Node.DECR_FLAG);
466:       assertEquals(49, Node.DIRECT_EVAL);
467:       assertEquals(15, Node.NO_SIDE_EFFECTS);
468:       assertEquals(32, Node.INCRDECR_PROP);
469:       assertEquals(47, Node.IS_DISPATCHER);
470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
471:       assertEquals(12, Node.COLUMN_BITS);
472:       assertEquals(2, Node.POST_FLAG);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
476:       assertEquals(40, Node.ORIGINALNAME_PROP);
477:       assertEquals(51, Node.STATIC_SOURCE_FILE);
478:       assertEquals(43, Node.IS_CONSTANT_NAME);
479:       assertEquals(46, Node.IS_NAMESPACE);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(155, node0.getType());
482:       assertFalse(node0.isStringKey());
483:       assertFalse(node0.isVar());
484:       assertFalse(node0.isBlock());
485:       assertFalse(node0.isWhile());
486:       assertFalse(node0.isDo());
487:       assertFalse(node0.isNew());
488:       assertFalse(node0.isSetterDef());
489:       assertFalse(node0.isAdd());
490:       assertEquals(0, node0.getChildCount());
491:       assertFalse(node0.isAssignAdd());
492:       assertFalse(node0.isParamList());
493:       assertFalse(node0.isLabel());
494:       assertFalse(node0.isLabelName());
495:       assertFalse(node0.isFunction());
496:       assertFalse(node0.isContinue());
497:       assertFalse(node0.hasOneChild());
498:       assertFalse(node0.isArrayLit());
499:       assertFalse(node0.isTry());
500:       assertFalse(node0.isFor());
501:       assertFalse(node0.isGetterDef());
502:       assertFalse(node0.isNumber());
503:       assertFalse(node0.isScript());
504:       assertFalse(node0.isIn());
505:       assertEquals((-1), node0.getLineno());
506:       assertFalse(node0.isInstanceOf());
507:       assertFalse(node0.hasMoreThanOneChild());
508:       assertFalse(node0.isNE());
509:       assertFalse(node0.isThis());
510:       assertFalse(node0.isIf());
511:       assertFalse(node0.isWith());
512:       assertFalse(node0.isRegExp());
513:       assertFalse(node0.isCatch());
514:       assertEquals((-1), node0.getCharno());
515:       assertFalse(node0.isThrow());
516:       assertFalse(node0.isHook());
517:       assertFalse(node0.isString());
518:       assertFalse(node0.isGetProp());
519:       assertFalse(node0.isCase());
520:       assertFalse(node0.isInc());
521:       assertFalse(node0.isObjectLit());
522:       assertFalse(node0.isAnd());
523:       assertTrue(node0.isCast());
524:       assertFalse(node0.isSwitch());
525:       assertFalse(node0.isFalse());
526:       assertFalse(node0.isDebugger());
527:       assertFalse(node0.isTrue());
528:       assertFalse(node0.isDefaultCase());
529:       assertEquals((-1), node0.getSourcePosition());
530:       assertFalse(node0.isNot());
531:       assertFalse(node0.isEmpty());
532:       assertFalse(node0.isOr());
533:       assertFalse(node0.isComma());
534:       assertFalse(node0.isReturn());
535:       assertFalse(node0.isNull());
536:       assertFalse(node0.isDec());
537:       assertFalse(node0.hasChildren());
538:       assertFalse(node0.isBreak());
539:       assertFalse(node0.isAssign());
540:       assertFalse(node0.isTypeOf());
541:       assertFalse(node0.isDelProp());
542:       assertFalse(node0.isName());
543:       assertFalse(node0.isVoid());
544:       assertFalse(node0.isExprResult());
545:       assertFalse(node0.isCall());
546:       assertFalse(node0.isGetElem());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       node0.setQuotedString();
550:       assertEquals(55, Node.INFERRED_FUNCTION);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
553:       assertEquals(53, Node.INPUT_ID);
554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
556:       assertEquals(8, Node.FLAG_NO_THROWS);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(37, Node.OPT_ARG_NAME);
559:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
560:       assertEquals(29, Node.JSDOC_INFO_PROP);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(52, Node.LENGTH);
563:       assertEquals(48, Node.DIRECTIVES);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(36, Node.QUOTED_PROP);
566:       assertEquals(56, Node.CHANGE_TIME);
567:       assertEquals(57, Node.REFLECTED_OBJECT);
568:       assertEquals(30, Node.VAR_ARGS_NAME);
569:       assertEquals(57, Node.LAST_PROP);
570:       assertEquals(1, Node.DECR_FLAG);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
573:       assertEquals(32, Node.INCRDECR_PROP);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(2, Node.POST_FLAG);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
581:       assertEquals(40, Node.ORIGINALNAME_PROP);
582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
583:       assertEquals(43, Node.IS_CONSTANT_NAME);
584:       assertEquals(46, Node.IS_NAMESPACE);
585:       assertEquals(54, Node.SLASH_V);
586:       assertEquals(155, node0.getType());
587:       assertFalse(node0.isStringKey());
588:       assertFalse(node0.isVar());
589:       assertFalse(node0.isBlock());
590:       assertFalse(node0.isWhile());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isNew());
593:       assertFalse(node0.isSetterDef());
594:       assertFalse(node0.isAdd());
595:       assertEquals(0, node0.getChildCount());
596:       assertFalse(node0.isAssignAdd());
597:       assertFalse(node0.isParamList());
598:       assertFalse(node0.isLabel());
599:       assertFalse(node0.isLabelName());
600:       assertFalse(node0.isFunction());
601:       assertFalse(node0.isContinue());
602:       assertFalse(node0.hasOneChild());
603:       assertFalse(node0.isArrayLit());
604:       assertFalse(node0.isTry());
605:       assertFalse(node0.isFor());
606:       assertFalse(node0.isGetterDef());
607:       assertFalse(node0.isNumber());
608:       assertFalse(node0.isScript());
609:       assertFalse(node0.isIn());
610:       assertEquals((-1), node0.getLineno());
611:       assertFalse(node0.isInstanceOf());
612:       assertFalse(node0.hasMoreThanOneChild());
613:       assertFalse(node0.isNE());
614:       assertFalse(node0.isThis());
615:       assertFalse(node0.isIf());
616:       assertFalse(node0.isWith());
617:       assertFalse(node0.isRegExp());
618:       assertFalse(node0.isCatch());
619:       assertEquals((-1), node0.getCharno());
620:       assertFalse(node0.isThrow());
621:       assertFalse(node0.isHook());
622:       assertFalse(node0.isString());
623:       assertFalse(node0.isGetProp());
624:       assertFalse(node0.isCase());
625:       assertFalse(node0.isInc());
626:       assertFalse(node0.isObjectLit());
627:       assertFalse(node0.isAnd());
628:       assertTrue(node0.isCast());
629:       assertFalse(node0.isSwitch());
630:       assertFalse(node0.isFalse());
631:       assertFalse(node0.isDebugger());
632:       assertFalse(node0.isTrue());
633:       assertFalse(node0.isDefaultCase());
634:       assertEquals((-1), node0.getSourcePosition());
635:       assertFalse(node0.isNot());
636:       assertFalse(node0.isEmpty());
637:       assertFalse(node0.isOr());
638:       assertFalse(node0.isComma());
639:       assertFalse(node0.isReturn());
640:       assertFalse(node0.isNull());
641:       assertFalse(node0.isDec());
642:       assertFalse(node0.hasChildren());
643:       assertFalse(node0.isBreak());
644:       assertFalse(node0.isAssign());
645:       assertFalse(node0.isTypeOf());
646:       assertFalse(node0.isDelProp());
647:       assertFalse(node0.isName());
648:       assertFalse(node0.isVoid());
649:       assertFalse(node0.isExprResult());
650:       assertFalse(node0.isCall());
651:       assertFalse(node0.isGetElem());
652:       
653:       Node node1 = Node.newString(78132, "", (-3203), 117);
654:       assertNotNull(node1);
655:       assertFalse(node1.equals((Object)node0));
656:       assertEquals(2, Node.POST_FLAG);
657:       assertEquals(56, Node.CHANGE_TIME);
658:       assertEquals(29, Node.JSDOC_INFO_PROP);
659:       assertEquals(32, Node.INCRDECR_PROP);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(37, Node.OPT_ARG_NAME);
662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
663:       assertEquals(46, Node.IS_NAMESPACE);
664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
665:       assertEquals(54, Node.SLASH_V);
666:       assertEquals(43, Node.IS_CONSTANT_NAME);
667:       assertEquals(57, Node.LAST_PROP);
668:       assertEquals(15, Node.NO_SIDE_EFFECTS);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(47, Node.IS_DISPATCHER);
673:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
674:       assertEquals(8, Node.FLAG_NO_THROWS);
675:       assertEquals(39, Node.EMPTY_BLOCK);
676:       assertEquals(48, Node.DIRECTIVES);
677:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
681:       assertEquals(52, Node.LENGTH);
682:       assertEquals(50, Node.FREE_CALL);
683:       assertEquals(36, Node.QUOTED_PROP);
684:       assertEquals(57, Node.REFLECTED_OBJECT);
685:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
686:       assertEquals(49, Node.DIRECT_EVAL);
687:       assertEquals(1, Node.DECR_FLAG);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
692:       assertFalse(node1.isCatch());
693:       assertEquals(0, node1.getChildCount());
694:       assertFalse(node1.isRegExp());
695:       assertFalse(node1.isDebugger());
696:       assertFalse(node1.isVoid());
697:       assertFalse(node1.isTrue());
698:       assertFalse(node1.isFunction());
699:       assertFalse(node1.isParamList());
700:       assertFalse(node1.isArrayLit());
701:       assertFalse(node1.isStringKey());
702:       assertFalse(node1.isCall());
703:       assertFalse(node1.isFor());
704:       assertFalse(node1.isGetterDef());
705:       assertFalse(node1.isBlock());
706:       assertFalse(node1.isTry());
707:       assertFalse(node1.isWhile());
708:       assertFalse(node1.isReturn());
709:       assertFalse(node1.isLabel());
710:       assertFalse(node1.isOr());
711:       assertEquals((-1), node1.getCharno());
712:       assertFalse(node1.isSwitch());
713:       assertFalse(node1.isDelProp());
714:       assertFalse(node1.isLabelName());
715:       assertFalse(node1.isName());
716:       assertFalse(node1.isVar());
717:       assertFalse(node1.isEmpty());
718:       assertFalse(node1.isNull());
719:       assertFalse(node1.isAdd());
720:       assertFalse(node1.isAssignAdd());
721:       assertFalse(node1.isDefaultCase());
722:       assertFalse(node1.isDo());
723:       assertFalse(node1.isNew());
724:       assertFalse(node1.isObjectLit());
725:       assertFalse(node1.isWith());
726:       assertFalse(node1.isAnd());
727:       assertFalse(node1.isNot());
728:       assertFalse(node1.isExprResult());
729:       assertFalse(node1.isBreak());
730:       assertFalse(node1.isInstanceOf());
731:       assertEquals(78132, node1.getType());
732:       assertFalse(node1.isGetElem());
733:       assertFalse(node1.isDec());
734:       assertFalse(node1.hasChildren());
735:       assertFalse(node1.isNumber());
736:       assertFalse(node1.isHook());
737:       assertFalse(node1.isTypeOf());
738:       assertFalse(node1.isAssign());
739:       assertFalse(node1.isComma());
740:       assertEquals((-1), node1.getSourcePosition());
741:       assertFalse(node1.isGetProp());
742:       assertFalse(node1.isThis());
743:       assertFalse(node1.hasOneChild());
744:       assertFalse(node1.isScript());
745:       assertFalse(node1.isCase());
746:       assertFalse(node1.hasMoreThanOneChild());
747:       assertFalse(node1.isContinue());
748:       assertFalse(node1.isString());
749:       assertFalse(node1.isIn());
750:       assertFalse(node1.isNE());
751:       assertFalse(node1.isIf());
752:       assertEquals((-1), node1.getLineno());
753:       assertFalse(node1.isFalse());
754:       assertFalse(node1.isThrow());
755:       assertFalse(node1.isCast());
756:       assertFalse(node1.isInc());
757:       assertFalse(node1.isSetterDef());
758:       assertNotSame(node1, node0);
759:       
760:       int int0 = node1.getChangeTime();
761:       assertEquals(0, int0);
762:       assertFalse(node1.equals((Object)node0));
763:       assertEquals(2, Node.POST_FLAG);
764:       assertEquals(56, Node.CHANGE_TIME);
765:       assertEquals(29, Node.JSDOC_INFO_PROP);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
768:       assertEquals(37, Node.OPT_ARG_NAME);
769:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
770:       assertEquals(46, Node.IS_NAMESPACE);
771:       assertEquals(51, Node.STATIC_SOURCE_FILE);
772:       assertEquals(54, Node.SLASH_V);
773:       assertEquals(43, Node.IS_CONSTANT_NAME);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(15, Node.NO_SIDE_EFFECTS);
776:       assertEquals(53, Node.INPUT_ID);
777:       assertEquals(40, Node.ORIGINALNAME_PROP);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(8, Node.FLAG_NO_THROWS);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(48, Node.DIRECTIVES);
784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
785:       assertEquals(55, Node.INFERRED_FUNCTION);
786:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
787:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
788:       assertEquals(52, Node.LENGTH);
789:       assertEquals(50, Node.FREE_CALL);
790:       assertEquals(36, Node.QUOTED_PROP);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
793:       assertEquals(49, Node.DIRECT_EVAL);
794:       assertEquals(1, Node.DECR_FLAG);
795:       assertEquals(12, Node.COLUMN_BITS);
796:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
797:       assertEquals(4095, Node.COLUMN_MASK);
798:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
799:       assertFalse(node1.isCatch());
800:       assertEquals(0, node1.getChildCount());
801:       assertFalse(node1.isRegExp());
802:       assertFalse(node1.isDebugger());
803:       assertFalse(node1.isVoid());
804:       assertFalse(node1.isTrue());
805:       assertFalse(node1.isFunction());
806:       assertFalse(node1.isParamList());
807:       assertFalse(node1.isArrayLit());
808:       assertFalse(node1.isStringKey());
809:       assertFalse(node1.isCall());
810:       assertFalse(node1.isFor());
811:       assertFalse(node1.isGetterDef());
812:       assertFalse(node1.isBlock());
813:       assertFalse(node1.isTry());
814:       assertFalse(node1.isWhile());
815:       assertFalse(node1.isReturn());
816:       assertFalse(node1.isLabel());
817:       assertFalse(node1.isOr());
818:       assertEquals((-1), node1.getCharno());
819:       assertFalse(node1.isSwitch());
820:       assertFalse(node1.isDelProp());
821:       assertFalse(node1.isLabelName());
822:       assertFalse(node1.isName());
823:       assertFalse(node1.isVar());
824:       assertFalse(node1.isEmpty());
825:       assertFalse(node1.isNull());
826:       assertFalse(node1.isAdd());
827:       assertFalse(node1.isAssignAdd());
828:       assertFalse(node1.isDefaultCase());
829:       assertFalse(node1.isDo());
830:       assertFalse(node1.isNew());
831:       assertFalse(node1.isObjectLit());
832:       assertFalse(node1.isWith());
833:       assertFalse(node1.isAnd());
834:       assertFalse(node1.isNot());
835:       assertFalse(node1.isExprResult());
836:       assertFalse(node1.isBreak());
837:       assertFalse(node1.isInstanceOf());
838:       assertEquals(78132, node1.getType());
839:       assertFalse(node1.isGetElem());
840:       assertFalse(node1.isDec());
841:       assertFalse(node1.hasChildren());
842:       assertFalse(node1.isNumber());
843:       assertFalse(node1.isHook());
844:       assertFalse(node1.isTypeOf());
845:       assertFalse(node1.isAssign());
846:       assertFalse(node1.isComma());
847:       assertEquals((-1), node1.getSourcePosition());
848:       assertFalse(node1.isGetProp());
849:       assertFalse(node1.isThis());
850:       assertFalse(node1.hasOneChild());
851:       assertFalse(node1.isScript());
852:       assertFalse(node1.isCase());
853:       assertFalse(node1.hasMoreThanOneChild());
854:       assertFalse(node1.isContinue());
855:       assertFalse(node1.isString());
856:       assertFalse(node1.isIn());
857:       assertFalse(node1.isNE());
858:       assertFalse(node1.isIf());
859:       assertEquals((-1), node1.getLineno());
860:       assertFalse(node1.isFalse());
861:       assertFalse(node1.isThrow());
862:       assertFalse(node1.isCast());
863:       assertFalse(node1.isInc());
864:       assertFalse(node1.isSetterDef());
865:       assertNotSame(node1, node0);
866:       
867:       Node node2 = node1.srcref(node0);
868:       assertNotNull(node2);
869:       assertFalse(node0.equals((Object)node1));
870:       assertFalse(node1.equals((Object)node0));
871:       assertFalse(node2.equals((Object)node0));
872:       assertEquals(55, Node.INFERRED_FUNCTION);
873:       assertEquals(4095, Node.COLUMN_MASK);
874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
875:       assertEquals(53, Node.INPUT_ID);
876:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
878:       assertEquals(8, Node.FLAG_NO_THROWS);
879:       assertEquals(39, Node.EMPTY_BLOCK);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
882:       assertEquals(29, Node.JSDOC_INFO_PROP);
883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
884:       assertEquals(52, Node.LENGTH);
885:       assertEquals(48, Node.DIRECTIVES);
886:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
887:       assertEquals(36, Node.QUOTED_PROP);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(57, Node.REFLECTED_OBJECT);
890:       assertEquals(30, Node.VAR_ARGS_NAME);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(1, Node.DECR_FLAG);
893:       assertEquals(49, Node.DIRECT_EVAL);
894:       assertEquals(15, Node.NO_SIDE_EFFECTS);
895:       assertEquals(32, Node.INCRDECR_PROP);
896:       assertEquals(47, Node.IS_DISPATCHER);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(2, Node.POST_FLAG);
900:       assertEquals(50, Node.FREE_CALL);
901:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
902:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
903:       assertEquals(40, Node.ORIGINALNAME_PROP);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(43, Node.IS_CONSTANT_NAME);
906:       assertEquals(46, Node.IS_NAMESPACE);
907:       assertEquals(54, Node.SLASH_V);
908:       assertEquals(2, Node.POST_FLAG);
909:       assertEquals(56, Node.CHANGE_TIME);
910:       assertEquals(29, Node.JSDOC_INFO_PROP);
911:       assertEquals(32, Node.INCRDECR_PROP);
912:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
913:       assertEquals(37, Node.OPT_ARG_NAME);
914:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
915:       assertEquals(46, Node.IS_NAMESPACE);
916:       assertEquals(51, Node.STATIC_SOURCE_FILE);
917:       assertEquals(54, Node.SLASH_V);
918:       assertEquals(43, Node.IS_CONSTANT_NAME);
919:       assertEquals(57, Node.LAST_PROP);
920:       assertEquals(15, Node.NO_SIDE_EFFECTS);
921:       assertEquals(53, Node.INPUT_ID);
922:       assertEquals(40, Node.ORIGINALNAME_PROP);
923:       assertEquals(30, Node.VAR_ARGS_NAME);
924:       assertEquals(47, Node.IS_DISPATCHER);
925:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
926:       assertEquals(8, Node.FLAG_NO_THROWS);
927:       assertEquals(39, Node.EMPTY_BLOCK);
928:       assertEquals(48, Node.DIRECTIVES);
929:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
930:       assertEquals(55, Node.INFERRED_FUNCTION);
931:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(50, Node.FREE_CALL);
935:       assertEquals(36, Node.QUOTED_PROP);
936:       assertEquals(57, Node.REFLECTED_OBJECT);
937:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
938:       assertEquals(49, Node.DIRECT_EVAL);
939:       assertEquals(1, Node.DECR_FLAG);
940:       assertEquals(12, Node.COLUMN_BITS);
941:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
942:       assertEquals(4095, Node.COLUMN_MASK);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(53, Node.INPUT_ID);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(47, Node.IS_DISPATCHER);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
952:       assertEquals(8, Node.FLAG_NO_THROWS);
953:       assertEquals(39, Node.EMPTY_BLOCK);
954:       assertEquals(4095, Node.COLUMN_MASK);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
957:       assertEquals(49, Node.DIRECT_EVAL);
958:       assertEquals(37, Node.OPT_ARG_NAME);
959:       assertEquals(36, Node.QUOTED_PROP);
960:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
961:       assertEquals(48, Node.DIRECTIVES);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(57, Node.REFLECTED_OBJECT);
965:       assertEquals(40, Node.ORIGINALNAME_PROP);
966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
969:       assertEquals(30, Node.VAR_ARGS_NAME);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
972:       assertEquals(12, Node.COLUMN_BITS);
973:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
974:       assertEquals(32, Node.INCRDECR_PROP);
975:       assertEquals(46, Node.IS_NAMESPACE);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(50, Node.FREE_CALL);
978:       assertEquals(54, Node.SLASH_V);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(155, node0.getType());
981:       assertFalse(node0.isStringKey());
982:       assertFalse(node0.isVar());
983:       assertFalse(node0.isBlock());
984:       assertFalse(node0.isWhile());
985:       assertFalse(node0.isDo());
986:       assertFalse(node0.isNew());
987:       assertFalse(node0.isSetterDef());
988:       assertFalse(node0.isAdd());
989:       assertEquals(0, node0.getChildCount());
990:       assertFalse(node0.isAssignAdd());
991:       assertFalse(node0.isParamList());
992:       assertFalse(node0.isLabel());
993:       assertFalse(node0.isLabelName());
994:       assertFalse(node0.isFunction());
995:       assertFalse(node0.isContinue());
996:       assertFalse(node0.hasOneChild());
997:       assertFalse(node0.isArrayLit());
998:       assertFalse(node0.isTry());
999:       assertFalse(node0.isFor());
1000:       assertFalse(node0.isGetterDef());
1001:       assertFalse(node0.isNumber());
1002:       assertFalse(node0.isScript());
1003:       assertFalse(node0.isIn());
1004:       assertEquals((-1), node0.getLineno());
1005:       assertFalse(node0.isInstanceOf());
1006:       assertFalse(node0.hasMoreThanOneChild());
1007:       assertFalse(node0.isNE());
1008:       assertFalse(node0.isThis());
1009:       assertFalse(node0.isIf());
1010:       assertFalse(node0.isWith());
1011:       assertFalse(node0.isRegExp());
1012:       assertFalse(node0.isCatch());
1013:       assertEquals((-1), node0.getCharno());
1014:       assertFalse(node0.isThrow());
1015:       assertFalse(node0.isHook());
1016:       assertFalse(node0.isString());
1017:       assertFalse(node0.isGetProp());
1018:       assertFalse(node0.isCase());
1019:       assertFalse(node0.isInc());
1020:       assertFalse(node0.isObjectLit());
1021:       assertFalse(node0.isAnd());
1022:       assertTrue(node0.isCast());
1023:       assertFalse(node0.isSwitch());
1024:       assertFalse(node0.isFalse());
1025:       assertFalse(node0.isDebugger());
1026:       assertFalse(node0.isTrue());
1027:       assertFalse(node0.isDefaultCase());
1028:       assertEquals((-1), node0.getSourcePosition());
1029:       assertFalse(node0.isNot());
1030:       assertFalse(node0.isEmpty());
1031:       assertFalse(node0.isOr());
1032:       assertFalse(node0.isComma());
1033:       assertFalse(node0.isReturn());
1034:       assertFalse(node0.isNull());
1035:       assertFalse(node0.isDec());
1036:       assertFalse(node0.hasChildren());
1037:       assertFalse(node0.isBreak());
1038:       assertFalse(node0.isAssign());
1039:       assertFalse(node0.isTypeOf());
1040:       assertFalse(node0.isDelProp());
1041:       assertFalse(node0.isName());
1042:       assertFalse(node0.isVoid());
1043:       assertFalse(node0.isExprResult());
1044:       assertFalse(node0.isCall());
1045:       assertFalse(node0.isGetElem());
1046:       assertFalse(node1.isCatch());
1047:       assertEquals(0, node1.getChildCount());
1048:       assertFalse(node1.isRegExp());
1049:       assertFalse(node1.isDebugger());
1050:       assertFalse(node1.isVoid());
1051:       assertFalse(node1.isTrue());
1052:       assertFalse(node1.isFunction());
1053:       assertFalse(node1.isParamList());
1054:       assertFalse(node1.isArrayLit());
1055:       assertFalse(node1.isStringKey());
1056:       assertFalse(node1.isCall());
1057:       assertFalse(node1.isFor());
1058:       assertFalse(node1.isGetterDef());
1059:       assertFalse(node1.isBlock());
1060:       assertFalse(node1.isTry());
1061:       assertFalse(node1.isWhile());
1062:       assertFalse(node1.isReturn());
1063:       assertFalse(node1.isLabel());
1064:       assertFalse(node1.isOr());
1065:       assertEquals((-1), node1.getCharno());
1066:       assertFalse(node1.isSwitch());
1067:       assertFalse(node1.isDelProp());
1068:       assertFalse(node1.isLabelName());
1069:       assertFalse(node1.isName());
1070:       assertFalse(node1.isVar());
1071:       assertFalse(node1.isEmpty());
1072:       assertFalse(node1.isNull());
1073:       assertFalse(node1.isAdd());
1074:       assertFalse(node1.isAssignAdd());
1075:       assertFalse(node1.isDefaultCase());
1076:       assertFalse(node1.isDo());
1077:       assertFalse(node1.isNew());
1078:       assertFalse(node1.isObjectLit());
1079:       assertFalse(node1.isWith());
1080:       assertFalse(node1.isAnd());
1081:       assertFalse(node1.isNot());
1082:       assertFalse(node1.isExprResult());
1083:       assertFalse(node1.isBreak());
1084:       assertFalse(node1.isInstanceOf());
1085:       assertEquals(78132, node1.getType());
1086:       assertFalse(node1.isGetElem());
1087:       assertFalse(node1.isDec());
1088:       assertFalse(node1.hasChildren());
1089:       assertFalse(node1.isNumber());
1090:       assertFalse(node1.isHook());
1091:       assertFalse(node1.isTypeOf());
1092:       assertFalse(node1.isAssign());
1093:       assertFalse(node1.isComma());
1094:       assertEquals((-1), node1.getSourcePosition());
1095:       assertFalse(node1.isGetProp());
1096:       assertFalse(node1.isThis());
1097:       assertFalse(node1.hasOneChild());
1098:       assertFalse(node1.isScript());
1099:       assertFalse(node1.isCase());
1100:       assertFalse(node1.hasMoreThanOneChild());
1101:       assertFalse(node1.isContinue());
1102:       assertFalse(node1.isString());
1103:       assertFalse(node1.isIn());
1104:       assertFalse(node1.isNE());
1105:       assertFalse(node1.isIf());
1106:       assertEquals((-1), node1.getLineno());
1107:       assertFalse(node1.isFalse());
1108:       assertFalse(node1.isThrow());
1109:       assertFalse(node1.isCast());
1110:       assertFalse(node1.isInc());
1111:       assertFalse(node1.isSetterDef());
1112:       assertFalse(node2.isNull());
1113:       assertFalse(node2.isSetterDef());
1114:       assertFalse(node2.isName());
1115:       assertFalse(node2.isParamList());
1116:       assertFalse(node2.isStringKey());
1117:       assertFalse(node2.isAdd());
1118:       assertFalse(node2.isNew());
1119:       assertFalse(node2.isDefaultCase());
1120:       assertFalse(node2.isDebugger());
1121:       assertFalse(node2.isFunction());
1122:       assertFalse(node2.isDo());
1123:       assertFalse(node2.isVar());
1124:       assertFalse(node2.isArrayLit());
1125:       assertEquals(0, node2.getChildCount());
1126:       assertFalse(node2.isContinue());
1127:       assertEquals((-1), node2.getSourcePosition());
1128:       assertFalse(node2.isTypeOf());
1129:       assertFalse(node2.hasChildren());
1130:       assertFalse(node2.isDelProp());
1131:       assertFalse(node2.isAssign());
1132:       assertFalse(node2.isDec());
1133:       assertFalse(node2.isLabel());
1134:       assertFalse(node2.isAssignAdd());
1135:       assertFalse(node2.isReturn());
1136:       assertFalse(node2.isOr());
1137:       assertFalse(node2.isEmpty());
1138:       assertEquals(78132, node2.getType());
1139:       assertFalse(node2.isString());
1140:       assertFalse(node2.isVoid());
1141:       assertFalse(node2.isWhile());
1142:       assertFalse(node2.isTrue());
1143:       assertFalse(node2.isGetElem());
1144:       assertFalse(node2.isExprResult());
1145:       assertFalse(node2.isCall());
1146:       assertFalse(node2.isBreak());
1147:       assertFalse(node2.isThis());
1148:       assertFalse(node2.isComma());
1149:       assertFalse(node2.isThrow());
1150:       assertFalse(node2.isObjectLit());
1151:       assertFalse(node2.isGetProp());
1152:       assertFalse(node2.isInc());
1153:       assertFalse(node2.isSwitch());
1154:       assertEquals((-1), node2.getCharno());
1155:       assertFalse(node2.isNot());
1156:       assertFalse(node2.isAnd());
1157:       assertFalse(node2.isFalse());
1158:       assertFalse(node2.isCast());
1159:       assertFalse(node2.isNumber());
1160:       assertFalse(node2.isIf());
1161:       assertFalse(node2.isGetterDef());
1162:       assertFalse(node2.isLabelName());
1163:       assertFalse(node2.isFor());
1164:       assertFalse(node2.isNE());
1165:       assertFalse(node2.isIn());
1166:       assertFalse(node2.hasOneChild());
1167:       assertFalse(node2.isCase());
1168:       assertFalse(node2.isScript());
1169:       assertFalse(node2.isRegExp());
1170:       assertFalse(node2.isTry());
1171:       assertFalse(node2.isBlock());
1172:       assertFalse(node2.isHook());
1173:       assertFalse(node2.hasMoreThanOneChild());
1174:       assertEquals((-1), node2.getLineno());
1175:       assertFalse(node2.isWith());
1176:       assertFalse(node2.isCatch());
1177:       assertFalse(node2.isInstanceOf());
1178:       assertNotSame(node0, node1);
1179:       assertNotSame(node0, node2);
1180:       assertNotSame(node1, node0);
1181:       assertSame(node1, node2);
1182:       assertSame(node2, node1);
1183:       assertNotSame(node2, node0);
1184:       
1185:       boolean boolean3 = node1.isSyntheticBlock();
1186:       assertFalse(boolean3);
1187:       assertFalse(node1.equals((Object)node0));
1188:       assertTrue(boolean3 == boolean0);
1189:       assertTrue(boolean3 == boolean1);
1190:       assertTrue(boolean3 == boolean2);
1191:       assertEquals(2, Node.POST_FLAG);
1192:       assertEquals(56, Node.CHANGE_TIME);
1193:       assertEquals(29, Node.JSDOC_INFO_PROP);
1194:       assertEquals(32, Node.INCRDECR_PROP);
1195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1196:       assertEquals(37, Node.OPT_ARG_NAME);
1197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1198:       assertEquals(46, Node.IS_NAMESPACE);
1199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1200:       assertEquals(54, Node.SLASH_V);
1201:       assertEquals(43, Node.IS_CONSTANT_NAME);
1202:       assertEquals(57, Node.LAST_PROP);
1203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1204:       assertEquals(53, Node.INPUT_ID);
1205:       assertEquals(40, Node.ORIGINALNAME_PROP);
1206:       assertEquals(30, Node.VAR_ARGS_NAME);
1207:       assertEquals(47, Node.IS_DISPATCHER);
1208:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1209:       assertEquals(8, Node.FLAG_NO_THROWS);
1210:       assertEquals(39, Node.EMPTY_BLOCK);
1211:       assertEquals(48, Node.DIRECTIVES);
1212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1213:       assertEquals(55, Node.INFERRED_FUNCTION);
1214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1216:       assertEquals(52, Node.LENGTH);
1217:       assertEquals(50, Node.FREE_CALL);
1218:       assertEquals(36, Node.QUOTED_PROP);
1219:       assertEquals(57, Node.REFLECTED_OBJECT);
1220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1221:       assertEquals(49, Node.DIRECT_EVAL);
1222:       assertEquals(1, Node.DECR_FLAG);
1223:       assertEquals(12, Node.COLUMN_BITS);
1224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1225:       assertEquals(4095, Node.COLUMN_MASK);
1226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1227:       assertFalse(node1.isCatch());
1228:       assertEquals(0, node1.getChildCount());
1229:       assertFalse(node1.isRegExp());
1230:       assertFalse(node1.isDebugger());
1231:       assertFalse(node1.isVoid());
1232:       assertFalse(node1.isTrue());
1233:       assertFalse(node1.isFunction());
1234:       assertFalse(node1.isParamList());
1235:       assertFalse(node1.isArrayLit());
1236:       assertFalse(node1.isStringKey());
1237:       assertFalse(node1.isCall());
1238:       assertFalse(node1.isFor());
1239:       assertFalse(node1.isGetterDef());
1240:       assertFalse(node1.isBlock());
1241:       assertFalse(node1.isTry());
1242:       assertFalse(node1.isWhile());
1243:       assertFalse(node1.isReturn());
1244:       assertFalse(node1.isLabel());
1245:       assertFalse(node1.isOr());
1246:       assertEquals((-1), node1.getCharno());
1247:       assertFalse(node1.isSwitch());
1248:       assertFalse(node1.isDelProp());
1249:       assertFalse(node1.isLabelName());
1250:       assertFalse(node1.isName());
1251:       assertFalse(node1.isVar());
1252:       assertFalse(node1.isEmpty());
1253:       assertFalse(node1.isNull());
1254:       assertFalse(node1.isAdd());
1255:       assertFalse(node1.isAssignAdd());
1256:       assertFalse(node1.isDefaultCase());
1257:       assertFalse(node1.isDo());
1258:       assertFalse(node1.isNew());
1259:       assertFalse(node1.isObjectLit());
1260:       assertFalse(node1.isWith());
1261:       assertFalse(node1.isAnd());
1262:       assertFalse(node1.isNot());
1263:       assertFalse(node1.isExprResult());
1264:       assertFalse(node1.isBreak());
1265:       assertFalse(node1.isInstanceOf());
1266:       assertEquals(78132, node1.getType());
1267:       assertFalse(node1.isGetElem());
1268:       assertFalse(node1.isDec());
1269:       assertFalse(node1.hasChildren());
1270:       assertFalse(node1.isNumber());
1271:       assertFalse(node1.isHook());
1272:       assertFalse(node1.isTypeOf());
1273:       assertFalse(node1.isAssign());
1274:       assertFalse(node1.isComma());
1275:       assertEquals((-1), node1.getSourcePosition());
1276:       assertFalse(node1.isGetProp());
1277:       assertFalse(node1.isThis());
1278:       assertFalse(node1.hasOneChild());
1279:       assertFalse(node1.isScript());
1280:       assertFalse(node1.isCase());
1281:       assertFalse(node1.hasMoreThanOneChild());
1282:       assertFalse(node1.isContinue());
1283:       assertFalse(node1.isString());
1284:       assertFalse(node1.isIn());
1285:       assertFalse(node1.isNE());
1286:       assertFalse(node1.isIf());
1287:       assertEquals((-1), node1.getLineno());
1288:       assertFalse(node1.isFalse());
1289:       assertFalse(node1.isThrow());
1290:       assertFalse(node1.isCast());
1291:       assertFalse(node1.isInc());
1292:       assertFalse(node1.isSetterDef());
1293:       assertNotSame(node1, node0);
1294:       assertSame(node1, node2);
1295:       
1296:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
1297:       assertNotNull(node_FileLevelJsDocBuilder0);
1298:       assertFalse(node0.equals((Object)node1));
1299:       assertFalse(node0.equals((Object)node2));
1300:       assertFalse(node1.equals((Object)node0));
1301:       assertFalse(node2.equals((Object)node0));
1302:       assertEquals(55, Node.INFERRED_FUNCTION);
1303:       assertEquals(4095, Node.COLUMN_MASK);
1304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1305:       assertEquals(53, Node.INPUT_ID);
1306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(8, Node.FLAG_NO_THROWS);
1309:       assertEquals(39, Node.EMPTY_BLOCK);
1310:       assertEquals(37, Node.OPT_ARG_NAME);
1311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1312:       assertEquals(29, Node.JSDOC_INFO_PROP);
1313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1314:       assertEquals(52, Node.LENGTH);
1315:       assertEquals(48, Node.DIRECTIVES);
1316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1317:       assertEquals(36, Node.QUOTED_PROP);
1318:       assertEquals(56, Node.CHANGE_TIME);
1319:       assertEquals(57, Node.REFLECTED_OBJECT);
1320:       assertEquals(30, Node.VAR_ARGS_NAME);
1321:       assertEquals(57, Node.LAST_PROP);
1322:       assertEquals(1, Node.DECR_FLAG);
1323:       assertEquals(49, Node.DIRECT_EVAL);
1324:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1325:       assertEquals(32, Node.INCRDECR_PROP);
1326:       assertEquals(47, Node.IS_DISPATCHER);
1327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1328:       assertEquals(12, Node.COLUMN_BITS);
1329:       assertEquals(2, Node.POST_FLAG);
1330:       assertEquals(50, Node.FREE_CALL);
1331:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1333:       assertEquals(40, Node.ORIGINALNAME_PROP);
1334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1335:       assertEquals(43, Node.IS_CONSTANT_NAME);
1336:       assertEquals(46, Node.IS_NAMESPACE);
1337:       assertEquals(54, Node.SLASH_V);
1338:       assertEquals(2, Node.POST_FLAG);
1339:       assertEquals(56, Node.CHANGE_TIME);
1340:       assertEquals(29, Node.JSDOC_INFO_PROP);
1341:       assertEquals(32, Node.INCRDECR_PROP);
1342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1343:       assertEquals(37, Node.OPT_ARG_NAME);
1344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1345:       assertEquals(46, Node.IS_NAMESPACE);
1346:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1347:       assertEquals(54, Node.SLASH_V);
1348:       assertEquals(43, Node.IS_CONSTANT_NAME);
1349:       assertEquals(57, Node.LAST_PROP);
1350:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1351:       assertEquals(53, Node.INPUT_ID);
1352:       assertEquals(40, Node.ORIGINALNAME_PROP);
1353:       assertEquals(30, Node.VAR_ARGS_NAME);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1356:       assertEquals(8, Node.FLAG_NO_THROWS);
1357:       assertEquals(39, Node.EMPTY_BLOCK);
1358:       assertEquals(48, Node.DIRECTIVES);
1359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1360:       assertEquals(55, Node.INFERRED_FUNCTION);
1361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1363:       assertEquals(52, Node.LENGTH);
1364:       assertEquals(50, Node.FREE_CALL);
1365:       assertEquals(36, Node.QUOTED_PROP);
1366:       assertEquals(57, Node.REFLECTED_OBJECT);
1367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1368:       assertEquals(49, Node.DIRECT_EVAL);
1369:       assertEquals(1, Node.DECR_FLAG);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1372:       assertEquals(4095, Node.COLUMN_MASK);
1373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1374:       assertEquals(53, Node.INPUT_ID);
1375:       assertEquals(29, Node.JSDOC_INFO_PROP);
1376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1378:       assertEquals(47, Node.IS_DISPATCHER);
1379:       assertEquals(2, Node.POST_FLAG);
1380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1381:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1382:       assertEquals(8, Node.FLAG_NO_THROWS);
1383:       assertEquals(39, Node.EMPTY_BLOCK);
1384:       assertEquals(4095, Node.COLUMN_MASK);
1385:       assertEquals(55, Node.INFERRED_FUNCTION);
1386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1387:       assertEquals(49, Node.DIRECT_EVAL);
1388:       assertEquals(37, Node.OPT_ARG_NAME);
1389:       assertEquals(36, Node.QUOTED_PROP);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(48, Node.DIRECTIVES);
1392:       assertEquals(56, Node.CHANGE_TIME);
1393:       assertEquals(52, Node.LENGTH);
1394:       assertEquals(57, Node.REFLECTED_OBJECT);
1395:       assertEquals(40, Node.ORIGINALNAME_PROP);
1396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1397:       assertEquals(57, Node.LAST_PROP);
1398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1399:       assertEquals(30, Node.VAR_ARGS_NAME);
1400:       assertEquals(1, Node.DECR_FLAG);
1401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1402:       assertEquals(12, Node.COLUMN_BITS);
1403:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1404:       assertEquals(32, Node.INCRDECR_PROP);
1405:       assertEquals(46, Node.IS_NAMESPACE);
1406:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1407:       assertEquals(50, Node.FREE_CALL);
1408:       assertEquals(54, Node.SLASH_V);
1409:       assertEquals(43, Node.IS_CONSTANT_NAME);
1410:       assertEquals(155, node0.getType());
1411:       assertFalse(node0.isStringKey());
1412:       assertFalse(node0.isVar());
1413:       assertFalse(node0.isBlock());
1414:       assertFalse(node0.isWhile());
1415:       assertFalse(node0.isDo());
1416:       assertFalse(node0.isNew());
1417:       assertFalse(node0.isSetterDef());
1418:       assertFalse(node0.isAdd());
1419:       assertEquals(0, node0.getChildCount());
1420:       assertFalse(node0.isAssignAdd());
1421:       assertFalse(node0.isParamList());
1422:       assertFalse(node0.isLabel());
1423:       assertFalse(node0.isLabelName());
1424:       assertFalse(node0.isFunction());
1425:       assertFalse(node0.isContinue());
1426:       assertFalse(node0.hasOneChild());
1427:       assertFalse(node0.isArrayLit());
1428:       assertFalse(node0.isTry());
1429:       assertFalse(node0.isFor());
1430:       assertFalse(node0.isGetterDef());
1431:       assertFalse(node0.isNumber());
1432:       assertFalse(node0.isScript());
1433:       assertFalse(node0.isIn());
1434:       assertEquals((-1), node0.getLineno());
1435:       assertFalse(node0.isInstanceOf());
1436:       assertFalse(node0.hasMoreThanOneChild());
1437:       assertFalse(node0.isNE());
1438:       assertFalse(node0.isThis());
1439:       assertFalse(node0.isIf());
1440:       assertFalse(node0.isWith());
1441:       assertFalse(node0.isRegExp());
1442:       assertFalse(node0.isCatch());
1443:       assertEquals((-1), node0.getCharno());
1444:       assertFalse(node0.isThrow());
1445:       assertFalse(node0.isHook());
1446:       assertFalse(node0.isString());
1447:       assertFalse(node0.isGetProp());
1448:       assertFalse(node0.isCase());
1449:       assertFalse(node0.isInc());
1450:       assertFalse(node0.isObjectLit());
1451:       assertFalse(node0.isAnd());
1452:       assertTrue(node0.isCast());
1453:       assertFalse(node0.isSwitch());
1454:       assertFalse(node0.isFalse());
1455:       assertFalse(node0.isDebugger());
1456:       assertFalse(node0.isTrue());
1457:       assertFalse(node0.isDefaultCase());
1458:       assertEquals((-1), node0.getSourcePosition());
1459:       assertFalse(node0.isNot());
1460:       assertFalse(node0.isEmpty());
1461:       assertFalse(node0.isOr());
1462:       assertFalse(node0.isComma());
1463:       assertFalse(node0.isReturn());
1464:       assertFalse(node0.isNull());
1465:       assertFalse(node0.isDec());
1466:       assertFalse(node0.hasChildren());
1467:       assertFalse(node0.isBreak());
1468:       assertFalse(node0.isAssign());
1469:       assertFalse(node0.isTypeOf());
1470:       assertFalse(node0.isDelProp());
1471:       assertFalse(node0.isName());
1472:       assertFalse(node0.isVoid());
1473:       assertFalse(node0.isExprResult());
1474:       assertFalse(node0.isCall());
1475:       assertFalse(node0.isGetElem());
1476:       assertFalse(node1.isCatch());
1477:       assertEquals(0, node1.getChildCount());
1478:       assertFalse(node1.isRegExp());
1479:       assertFalse(node1.isDebugger());
1480:       assertFalse(node1.isVoid());
1481:       assertFalse(node1.isTrue());
1482:       assertFalse(node1.isFunction());
1483:       assertFalse(node1.isParamList());
1484:       assertFalse(node1.isArrayLit());
1485:       assertFalse(node1.isStringKey());
1486:       assertFalse(node1.isCall());
1487:       assertFalse(node1.isFor());
1488:       assertFalse(node1.isGetterDef());
1489:       assertFalse(node1.isBlock());
1490:       assertFalse(node1.isTry());
1491:       assertFalse(node1.isWhile());
1492:       assertFalse(node1.isReturn());
1493:       assertFalse(node1.isLabel());
1494:       assertFalse(node1.isOr());
1495:       assertEquals((-1), node1.getCharno());
1496:       assertFalse(node1.isSwitch());
1497:       assertFalse(node1.isDelProp());
1498:       assertFalse(node1.isLabelName());
1499:       assertFalse(node1.isName());
1500:       assertFalse(node1.isVar());
1501:       assertFalse(node1.isEmpty());
1502:       assertFalse(node1.isNull());
1503:       assertFalse(node1.isAdd());
1504:       assertFalse(node1.isAssignAdd());
1505:       assertFalse(node1.isDefaultCase());
1506:       assertFalse(node1.isDo());
1507:       assertFalse(node1.isNew());
1508:       assertFalse(node1.isObjectLit());
1509:       assertFalse(node1.isWith());
1510:       assertFalse(node1.isAnd());
1511:       assertFalse(node1.isNot());
1512:       assertFalse(node1.isExprResult());
1513:       assertFalse(node1.isBreak());
1514:       assertFalse(node1.isInstanceOf());
1515:       assertEquals(78132, node1.getType());
1516:       assertFalse(node1.isGetElem());
1517:       assertFalse(node1.isDec());
1518:       assertFalse(node1.hasChildren());
1519:       assertFalse(node1.isNumber());
1520:       assertFalse(node1.isHook());
1521:       assertFalse(node1.isTypeOf());
1522:       assertFalse(node1.isAssign());
1523:       assertFalse(node1.isComma());
1524:       assertEquals((-1), node1.getSourcePosition());
1525:       assertFalse(node1.isGetProp());
1526:       assertFalse(node1.isThis());
1527:       assertFalse(node1.hasOneChild());
1528:       assertFalse(node1.isScript());
1529:       assertFalse(node1.isCase());
1530:       assertFalse(node1.hasMoreThanOneChild());
1531:       assertFalse(node1.isContinue());
1532:       assertFalse(node1.isString());
1533:       assertFalse(node1.isIn());
1534:       assertFalse(node1.isNE());
1535:       assertFalse(node1.isIf());
1536:       assertEquals((-1), node1.getLineno());
1537:       assertFalse(node1.isFalse());
1538:       assertFalse(node1.isThrow());
1539:       assertFalse(node1.isCast());
1540:       assertFalse(node1.isInc());
1541:       assertFalse(node1.isSetterDef());
1542:       assertFalse(node2.isNull());
1543:       assertFalse(node2.isSetterDef());
1544:       assertFalse(node2.isName());
1545:       assertFalse(node2.isParamList());
1546:       assertFalse(node2.isStringKey());
1547:       assertFalse(node2.isAdd());
1548:       assertFalse(node2.isNew());
1549:       assertFalse(node2.isDefaultCase());
1550:       assertFalse(node2.isDebugger());
1551:       assertFalse(node2.isFunction());
1552:       assertFalse(node2.isDo());
1553:       assertFalse(node2.isVar());
1554:       assertFalse(node2.isArrayLit());
1555:       assertEquals(0, node2.getChildCount());
1556:       assertFalse(node2.isContinue());
1557:       assertEquals((-1), node2.getSourcePosition());
1558:       assertFalse(node2.isTypeOf());
1559:       assertFalse(node2.hasChildren());
1560:       assertFalse(node2.isDelProp());
1561:       assertFalse(node2.isAssign());
1562:       assertFalse(node2.isDec());
1563:       assertFalse(node2.isLabel());
1564:       assertFalse(node2.isAssignAdd());
1565:       assertFalse(node2.isReturn());
1566:       assertFalse(node2.isOr());
1567:       assertFalse(node2.isEmpty());
1568:       assertEquals(78132, node2.getType());
1569:       assertFalse(node2.isString());
1570:       assertFalse(node2.isVoid());
1571:       assertFalse(node2.isWhile());
1572:       assertFalse(node2.isTrue());
1573:       assertFalse(node2.isGetElem());
1574:       assertFalse(node2.isExprResult());
1575:       assertFalse(node2.isCall());
1576:       assertFalse(node2.isBreak());
1577:       assertFalse(node2.isThis());
1578:       assertFalse(node2.isComma());
1579:       assertFalse(node2.isThrow());
1580:       assertFalse(node2.isObjectLit());
1581:       assertFalse(node2.isGetProp());
1582:       assertFalse(node2.isInc());
1583:       assertFalse(node2.isSwitch());
1584:       assertEquals((-1), node2.getCharno());
1585:       assertFalse(node2.isNot());
1586:       assertFalse(node2.isAnd());
1587:       assertFalse(node2.isFalse());
1588:       assertFalse(node2.isCast());
1589:       assertFalse(node2.isNumber());
1590:       assertFalse(node2.isIf());
1591:       assertFalse(node2.isGetterDef());
1592:       assertFalse(node2.isLabelName());
1593:       assertFalse(node2.isFor());
1594:       assertFalse(node2.isNE());
1595:       assertFalse(node2.isIn());
1596:       assertFalse(node2.hasOneChild());
1597:       assertFalse(node2.isCase());
1598:       assertFalse(node2.isScript());
1599:       assertFalse(node2.isRegExp());
1600:       assertFalse(node2.isTry());
1601:       assertFalse(node2.isBlock());
1602:       assertFalse(node2.isHook());
1603:       assertFalse(node2.hasMoreThanOneChild());
1604:       assertEquals((-1), node2.getLineno());
1605:       assertFalse(node2.isWith());
1606:       assertFalse(node2.isCatch());
1607:       assertFalse(node2.isInstanceOf());
1608:       
1609:       node_FileLevelJsDocBuilder0.append("");
1610:       assertFalse(node0.equals((Object)node1));
1611:       assertFalse(node0.equals((Object)node2));
1612:       assertFalse(node1.equals((Object)node0));
1613:       assertFalse(node2.equals((Object)node0));
1614:       assertEquals(55, Node.INFERRED_FUNCTION);
1615:       assertEquals(4095, Node.COLUMN_MASK);
1616:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1617:       assertEquals(53, Node.INPUT_ID);
1618:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1620:       assertEquals(8, Node.FLAG_NO_THROWS);
1621:       assertEquals(39, Node.EMPTY_BLOCK);
1622:       assertEquals(37, Node.OPT_ARG_NAME);
1623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1624:       assertEquals(29, Node.JSDOC_INFO_PROP);
1625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1626:       assertEquals(52, Node.LENGTH);
1627:       assertEquals(48, Node.DIRECTIVES);
1628:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1629:       assertEquals(36, Node.QUOTED_PROP);
1630:       assertEquals(56, Node.CHANGE_TIME);
1631:       assertEquals(57, Node.REFLECTED_OBJECT);
1632:       assertEquals(30, Node.VAR_ARGS_NAME);
1633:       assertEquals(57, Node.LAST_PROP);
1634:       assertEquals(1, Node.DECR_FLAG);
1635:       assertEquals(49, Node.DIRECT_EVAL);
1636:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1637:       assertEquals(32, Node.INCRDECR_PROP);
1638:       assertEquals(47, Node.IS_DISPATCHER);
1639:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1640:       assertEquals(12, Node.COLUMN_BITS);
1641:       assertEquals(2, Node.POST_FLAG);
1642:       assertEquals(50, Node.FREE_CALL);
1643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1645:       assertEquals(40, Node.ORIGINALNAME_PROP);
1646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1647:       assertEquals(43, Node.IS_CONSTANT_NAME);
1648:       assertEquals(46, Node.IS_NAMESPACE);
1649:       assertEquals(54, Node.SLASH_V);
1650:       assertEquals(2, Node.POST_FLAG);
1651:       assertEquals(56, Node.CHANGE_TIME);
1652:       assertEquals(29, Node.JSDOC_INFO_PROP);
1653:       assertEquals(32, Node.INCRDECR_PROP);
1654:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1655:       assertEquals(37, Node.OPT_ARG_NAME);
1656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1657:       assertEquals(46, Node.IS_NAMESPACE);
1658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1659:       assertEquals(54, Node.SLASH_V);
1660:       assertEquals(43, Node.IS_CONSTANT_NAME);
1661:       assertEquals(57, Node.LAST_PROP);
1662:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1663:       assertEquals(53, Node.INPUT_ID);
1664:       assertEquals(40, Node.ORIGINALNAME_PROP);
1665:       assertEquals(30, Node.VAR_ARGS_NAME);
1666:       assertEquals(47, Node.IS_DISPATCHER);
1667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1668:       assertEquals(8, Node.FLAG_NO_THROWS);
1669:       assertEquals(39, Node.EMPTY_BLOCK);
1670:       assertEquals(48, Node.DIRECTIVES);
1671:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1672:       assertEquals(55, Node.INFERRED_FUNCTION);
1673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1674:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1675:       assertEquals(52, Node.LENGTH);
1676:       assertEquals(50, Node.FREE_CALL);
1677:       assertEquals(36, Node.QUOTED_PROP);
1678:       assertEquals(57, Node.REFLECTED_OBJECT);
1679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1680:       assertEquals(49, Node.DIRECT_EVAL);
1681:       assertEquals(1, Node.DECR_FLAG);
1682:       assertEquals(12, Node.COLUMN_BITS);
1683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1684:       assertEquals(4095, Node.COLUMN_MASK);
1685:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1686:       assertEquals(53, Node.INPUT_ID);
1687:       assertEquals(29, Node.JSDOC_INFO_PROP);
1688:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1690:       assertEquals(47, Node.IS_DISPATCHER);
1691:       assertEquals(2, Node.POST_FLAG);
1692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1693:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1694:       assertEquals(8, Node.FLAG_NO_THROWS);
1695:       assertEquals(39, Node.EMPTY_BLOCK);
1696:       assertEquals(4095, Node.COLUMN_MASK);
1697:       assertEquals(55, Node.INFERRED_FUNCTION);
1698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1699:       assertEquals(49, Node.DIRECT_EVAL);
1700:       assertEquals(37, Node.OPT_ARG_NAME);
1701:       assertEquals(36, Node.QUOTED_PROP);
1702:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1703:       assertEquals(48, Node.DIRECTIVES);
1704:       assertEquals(56, Node.CHANGE_TIME);
1705:       assertEquals(52, Node.LENGTH);
1706:       assertEquals(57, Node.REFLECTED_OBJECT);
1707:       assertEquals(40, Node.ORIGINALNAME_PROP);
1708:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1709:       assertEquals(57, Node.LAST_PROP);
1710:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1711:       assertEquals(30, Node.VAR_ARGS_NAME);
1712:       assertEquals(1, Node.DECR_FLAG);
1713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1714:       assertEquals(12, Node.COLUMN_BITS);
1715:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1716:       assertEquals(32, Node.INCRDECR_PROP);
1717:       assertEquals(46, Node.IS_NAMESPACE);
1718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1719:       assertEquals(50, Node.FREE_CALL);
1720:       assertEquals(54, Node.SLASH_V);
1721:       assertEquals(43, Node.IS_CONSTANT_NAME);
1722:       assertEquals(155, node0.getType());
1723:       assertFalse(node0.isStringKey());
1724:       assertFalse(node0.isVar());
1725:       assertFalse(node0.isBlock());
1726:       assertFalse(node0.isWhile());
1727:       assertFalse(node0.isDo());
1728:       assertFalse(node0.isNew());
1729:       assertFalse(node0.isSetterDef());
1730:       assertFalse(node0.isAdd());
1731:       assertEquals(0, node0.getChildCount());
1732:       assertFalse(node0.isAssignAdd());
1733:       assertFalse(node0.isParamList());
1734:       assertFalse(node0.isLabel());
1735:       assertFalse(node0.isLabelName());
1736:       assertFalse(node0.isFunction());
1737:       assertFalse(node0.isContinue());
1738:       assertFalse(node0.hasOneChild());
1739:       assertFalse(node0.isArrayLit());
1740:       assertFalse(node0.isTry());
1741:       assertFalse(node0.isFor());
1742:       assertFalse(node0.isGetterDef());
1743:       assertFalse(node0.isNumber());
1744:       assertFalse(node0.isScript());
1745:       assertFalse(node0.isIn());
1746:       assertEquals((-1), node0.getLineno());
1747:       assertFalse(node0.isInstanceOf());
1748:       assertFalse(node0.hasMoreThanOneChild());
1749:       assertFalse(node0.isNE());
1750:       assertFalse(node0.isThis());
1751:       assertFalse(node0.isIf());
1752:       assertFalse(node0.isWith());
1753:       assertFalse(node0.isRegExp());
1754:       assertFalse(node0.isCatch());
1755:       assertEquals((-1), node0.getCharno());
1756:       assertFalse(node0.isThrow());
1757:       assertFalse(node0.isHook());
1758:       assertFalse(node0.isString());
1759:       assertFalse(node0.isGetProp());
1760:       assertFalse(node0.isCase());
1761:       assertFalse(node0.isInc());
1762:       assertFalse(node0.isObjectLit());
1763:       assertFalse(node0.isAnd());
1764:       assertTrue(node0.isCast());
1765:       assertFalse(node0.isSwitch());
1766:       assertFalse(node0.isFalse());
1767:       assertFalse(node0.isDebugger());
1768:       assertFalse(node0.isTrue());
1769:       assertFalse(node0.isDefaultCase());
1770:       assertEquals((-1), node0.getSourcePosition());
1771:       assertFalse(node0.isNot());
1772:       assertFalse(node0.isEmpty());
1773:       assertFalse(node0.isOr());
1774:       assertFalse(node0.isComma());
1775:       assertFalse(node0.isReturn());
1776:       assertFalse(node0.isNull());
1777:       assertFalse(node0.isDec());
1778:       assertFalse(node0.hasChildren());
1779:       assertFalse(node0.isBreak());
1780:       assertFalse(node0.isAssign());
1781:       assertFalse(node0.isTypeOf());
1782:       assertFalse(node0.isDelProp());
1783:       assertFalse(node0.isName());
1784:       assertFalse(node0.isVoid());
1785:       assertFalse(node0.isExprResult());
1786:       assertFalse(node0.isCall());
1787:       assertFalse(node0.isGetElem());
1788:       assertFalse(node1.isCatch());
1789:       assertEquals(0, node1.getChildCount());
1790:       assertFalse(node1.isRegExp());
1791:       assertFalse(node1.isDebugger());
1792:       assertFalse(node1.isVoid());
1793:       assertFalse(node1.isTrue());
1794:       assertFalse(node1.isFunction());
1795:       assertFalse(node1.isParamList());
1796:       assertFalse(node1.isArrayLit());
1797:       assertFalse(node1.isStringKey());
1798:       assertFalse(node1.isCall());
1799:       assertFalse(node1.isFor());
1800:       assertFalse(node1.isGetterDef());
1801:       assertFalse(node1.isBlock());
1802:       assertFalse(node1.isTry());
1803:       assertFalse(node1.isWhile());
1804:       assertFalse(node1.isReturn());
1805:       assertFalse(node1.isLabel());
1806:       assertFalse(node1.isOr());
1807:       assertEquals((-1), node1.getCharno());
1808:       assertFalse(node1.isSwitch());
1809:       assertFalse(node1.isDelProp());
1810:       assertFalse(node1.isLabelName());
1811:       assertFalse(node1.isName());
1812:       assertFalse(node1.isVar());
1813:       assertFalse(node1.isEmpty());
1814:       assertFalse(node1.isNull());
1815:       assertFalse(node1.isAdd());
1816:       assertFalse(node1.isAssignAdd());
1817:       assertFalse(node1.isDefaultCase());
1818:       assertFalse(node1.isDo());
1819:       assertFalse(node1.isNew());
1820:       assertFalse(node1.isObjectLit());
1821:       assertFalse(node1.isWith());
1822:       assertFalse(node1.isAnd());
1823:       assertFalse(node1.isNot());
1824:       assertFalse(node1.isExprResult());
1825:       assertFalse(node1.isBreak());
1826:       assertFalse(node1.isInstanceOf());
1827:       assertEquals(78132, node1.getType());
1828:       assertFalse(node1.isGetElem());
1829:       assertFalse(node1.isDec());
1830:       assertFalse(node1.hasChildren());
1831:       assertFalse(node1.isNumber());
1832:       assertFalse(node1.isHook());
1833:       assertFalse(node1.isTypeOf());
1834:       assertFalse(node1.isAssign());
1835:       assertFalse(node1.isComma());
1836:       assertEquals((-1), node1.getSourcePosition());
1837:       assertFalse(node1.isGetProp());
1838:       assertFalse(node1.isThis());
1839:       assertFalse(node1.hasOneChild());
1840:       assertFalse(node1.isScript());
1841:       assertFalse(node1.isCase());
1842:       assertFalse(node1.hasMoreThanOneChild());
1843:       assertFalse(node1.isContinue());
1844:       assertFalse(node1.isString());
1845:       assertFalse(node1.isIn());
1846:       assertFalse(node1.isNE());
1847:       assertFalse(node1.isIf());
1848:       assertEquals((-1), node1.getLineno());
1849:       assertFalse(node1.isFalse());
1850:       assertFalse(node1.isThrow());
1851:       assertFalse(node1.isCast());
1852:       assertFalse(node1.isInc());
1853:       assertFalse(node1.isSetterDef());
1854:       assertFalse(node2.isNull());
1855:       assertFalse(node2.isSetterDef());
1856:       assertFalse(node2.isName());
1857:       assertFalse(node2.isParamList());
1858:       assertFalse(node2.isStringKey());
1859:       assertFalse(node2.isAdd());
1860:       assertFalse(node2.isNew());
1861:       assertFalse(node2.isDefaultCase());
1862:       assertFalse(node2.isDebugger());
1863:       assertFalse(node2.isFunction());
1864:       assertFalse(node2.isDo());
1865:       assertFalse(node2.isVar());
1866:       assertFalse(node2.isArrayLit());
1867:       assertEquals(0, node2.getChildCount());
1868:       assertFalse(node2.isContinue());
1869:       assertEquals((-1), node2.getSourcePosition());
1870:       assertFalse(node2.isTypeOf());
1871:       assertFalse(node2.hasChildren());
1872:       assertFalse(node2.isDelProp());
1873:       assertFalse(node2.isAssign());
1874:       assertFalse(node2.isDec());
1875:       assertFalse(node2.isLabel());
1876:       assertFalse(node2.isAssignAdd());
1877:       assertFalse(node2.isReturn());
1878:       assertFalse(node2.isOr());
1879:       assertFalse(node2.isEmpty());
1880:       assertEquals(78132, node2.getType());
1881:       assertFalse(node2.isString());
1882:       assertFalse(node2.isVoid());
1883:       assertFalse(node2.isWhile());
1884:       assertFalse(node2.isTrue());
1885:       assertFalse(node2.isGetElem());
1886:       assertFalse(node2.isExprResult());
1887:       assertFalse(node2.isCall());
1888:       assertFalse(node2.isBreak());
1889:       assertFalse(node2.isThis());
1890:       assertFalse(node2.isComma());
1891:       assertFalse(node2.isThrow());
1892:       assertFalse(node2.isObjectLit());
1893:       assertFalse(node2.isGetProp());
1894:       assertFalse(node2.isInc());
1895:       assertFalse(node2.isSwitch());
1896:       assertEquals((-1), node2.getCharno());
1897:       assertFalse(node2.isNot());
1898:       assertFalse(node2.isAnd());
1899:       assertFalse(node2.isFalse());
1900:       assertFalse(node2.isCast());
1901:       assertFalse(node2.isNumber());
1902:       assertFalse(node2.isIf());
1903:       assertFalse(node2.isGetterDef());
1904:       assertFalse(node2.isLabelName());
1905:       assertFalse(node2.isFor());
1906:       assertFalse(node2.isNE());
1907:       assertFalse(node2.isIn());
1908:       assertFalse(node2.hasOneChild());
1909:       assertFalse(node2.isCase());
1910:       assertFalse(node2.isScript());
1911:       assertFalse(node2.isRegExp());
1912:       assertFalse(node2.isTry());
1913:       assertFalse(node2.isBlock());
1914:       assertFalse(node2.isHook());
1915:       assertFalse(node2.hasMoreThanOneChild());
1916:       assertEquals((-1), node2.getLineno());
1917:       assertFalse(node2.isWith());
1918:       assertFalse(node2.isCatch());
1919:       assertFalse(node2.isInstanceOf());
1920:       assertNotSame(node0, node1);
1921:       assertNotSame(node0, node2);
1922:       assertNotSame(node1, node0);
1923:       assertSame(node1, node2);
1924:       assertSame(node2, node1);
1925:       assertNotSame(node2, node0);
1926:       
1927:       boolean boolean4 = node2.wasEmptyNode();
1928:       assertFalse(boolean4);
1929:       assertFalse(node0.equals((Object)node1));
1930:       assertFalse(node0.equals((Object)node2));
1931:       assertFalse(node1.equals((Object)node0));
1932:       assertFalse(node2.equals((Object)node0));
1933:       assertTrue(boolean4 == boolean0);
1934:       assertTrue(boolean4 == boolean2);
1935:       assertTrue(boolean4 == boolean1);
1936:       assertTrue(boolean4 == boolean3);
1937:       assertEquals(55, Node.INFERRED_FUNCTION);
1938:       assertEquals(4095, Node.COLUMN_MASK);
1939:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1940:       assertEquals(53, Node.INPUT_ID);
1941:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1943:       assertEquals(8, Node.FLAG_NO_THROWS);
1944:       assertEquals(39, Node.EMPTY_BLOCK);
1945:       assertEquals(37, Node.OPT_ARG_NAME);
1946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1947:       assertEquals(29, Node.JSDOC_INFO_PROP);
1948:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1949:       assertEquals(52, Node.LENGTH);
1950:       assertEquals(48, Node.DIRECTIVES);
1951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1952:       assertEquals(36, Node.QUOTED_PROP);
1953:       assertEquals(56, Node.CHANGE_TIME);
1954:       assertEquals(57, Node.REFLECTED_OBJECT);
1955:       assertEquals(30, Node.VAR_ARGS_NAME);
1956:       assertEquals(57, Node.LAST_PROP);
1957:       assertEquals(1, Node.DECR_FLAG);
1958:       assertEquals(49, Node.DIRECT_EVAL);
1959:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1960:       assertEquals(32, Node.INCRDECR_PROP);
1961:       assertEquals(47, Node.IS_DISPATCHER);
1962:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1963:       assertEquals(12, Node.COLUMN_BITS);
1964:       assertEquals(2, Node.POST_FLAG);
1965:       assertEquals(50, Node.FREE_CALL);
1966:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1967:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1968:       assertEquals(40, Node.ORIGINALNAME_PROP);
1969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1970:       assertEquals(43, Node.IS_CONSTANT_NAME);
1971:       assertEquals(46, Node.IS_NAMESPACE);
1972:       assertEquals(54, Node.SLASH_V);
1973:       assertEquals(2, Node.POST_FLAG);
1974:       assertEquals(56, Node.CHANGE_TIME);
1975:       assertEquals(29, Node.JSDOC_INFO_PROP);
1976:       assertEquals(32, Node.INCRDECR_PROP);
1977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1978:       assertEquals(37, Node.OPT_ARG_NAME);
1979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1980:       assertEquals(46, Node.IS_NAMESPACE);
1981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1982:       assertEquals(54, Node.SLASH_V);
1983:       assertEquals(43, Node.IS_CONSTANT_NAME);
1984:       assertEquals(57, Node.LAST_PROP);
1985:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1986:       assertEquals(53, Node.INPUT_ID);
1987:       assertEquals(40, Node.ORIGINALNAME_PROP);
1988:       assertEquals(30, Node.VAR_ARGS_NAME);
1989:       assertEquals(47, Node.IS_DISPATCHER);
1990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1991:       assertEquals(8, Node.FLAG_NO_THROWS);
1992:       assertEquals(39, Node.EMPTY_BLOCK);
1993:       assertEquals(48, Node.DIRECTIVES);
1994:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1995:       assertEquals(55, Node.INFERRED_FUNCTION);
1996:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1997:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1998:       assertEquals(52, Node.LENGTH);
1999:       assertEquals(50, Node.FREE_CALL);
2000:       assertEquals(36, Node.QUOTED_PROP);
2001:       assertEquals(57, Node.REFLECTED_OBJECT);
2002:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2003:       assertEquals(49, Node.DIRECT_EVAL);
2004:       assertEquals(1, Node.DECR_FLAG);
2005:       assertEquals(12, Node.COLUMN_BITS);
2006:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2007:       assertEquals(4095, Node.COLUMN_MASK);
2008:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2009:       assertEquals(53, Node.INPUT_ID);
2010:       assertEquals(29, Node.JSDOC_INFO_PROP);
2011:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2012:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2013:       assertEquals(47, Node.IS_DISPATCHER);
2014:       assertEquals(2, Node.POST_FLAG);
2015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2016:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2017:       assertEquals(8, Node.FLAG_NO_THROWS);
2018:       assertEquals(39, Node.EMPTY_BLOCK);
2019:       assertEquals(4095, Node.COLUMN_MASK);
2020:       assertEquals(55, Node.INFERRED_FUNCTION);
2021:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2022:       assertEquals(49, Node.DIRECT_EVAL);
2023:       assertEquals(37, Node.OPT_ARG_NAME);
2024:       assertEquals(36, Node.QUOTED_PROP);
2025:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2026:       assertEquals(48, Node.DIRECTIVES);
2027:       assertEquals(56, Node.CHANGE_TIME);
2028:       assertEquals(52, Node.LENGTH);
2029:       assertEquals(57, Node.REFLECTED_OBJECT);
2030:       assertEquals(40, Node.ORIGINALNAME_PROP);
2031:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2032:       assertEquals(57, Node.LAST_PROP);
2033:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2034:       assertEquals(30, Node.VAR_ARGS_NAME);
2035:       assertEquals(1, Node.DECR_FLAG);
2036:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2037:       assertEquals(12, Node.COLUMN_BITS);
2038:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2039:       assertEquals(32, Node.INCRDECR_PROP);
2040:       assertEquals(46, Node.IS_NAMESPACE);
2041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2042:       assertEquals(50, Node.FREE_CALL);
2043:       assertEquals(54, Node.SLASH_V);
2044:       assertEquals(43, Node.IS_CONSTANT_NAME);
2045:       assertEquals(155, node0.getType());
2046:       assertFalse(node0.isStringKey());
2047:       assertFalse(node0.isVar());
2048:       assertFalse(node0.isBlock());
2049:       assertFalse(node0.isWhile());
2050:       assertFalse(node0.isDo());
2051:       assertFalse(node0.isNew());
2052:       assertFalse(node0.isSetterDef());
2053:       assertFalse(node0.isAdd());
2054:       assertEquals(0, node0.getChildCount());
2055:       assertFalse(node0.isAssignAdd());
2056:       assertFalse(node0.isParamList());
2057:       assertFalse(node0.isLabel());
2058:       assertFalse(node0.isLabelName());
2059:       assertFalse(node0.isFunction());
2060:       assertFalse(node0.isContinue());
2061:       assertFalse(node0.hasOneChild());
2062:       assertFalse(node0.isArrayLit());
2063:       assertFalse(node0.isTry());
2064:       assertFalse(node0.isFor());
2065:       assertFalse(node0.isGetterDef());
2066:       assertFalse(node0.isNumber());
2067:       assertFalse(node0.isScript());
2068:       assertFalse(node0.isIn());
2069:       assertEquals((-1), node0.getLineno());
2070:       assertFalse(node0.isInstanceOf());
2071:       assertFalse(node0.hasMoreThanOneChild());
2072:       assertFalse(node0.isNE());
2073:       assertFalse(node0.isThis());
2074:       assertFalse(node0.isIf());
2075:       assertFalse(node0.isWith());
2076:       assertFalse(node0.isRegExp());
2077:       assertFalse(node0.isCatch());
2078:       assertEquals((-1), node0.getCharno());
2079:       assertFalse(node0.isThrow());
2080:       assertFalse(node0.isHook());
2081:       assertFalse(node0.isString());
2082:       assertFalse(node0.isGetProp());
2083:       assertFalse(node0.isCase());
2084:       assertFalse(node0.isInc());
2085:       assertFalse(node0.isObjectLit());
2086:       assertFalse(node0.isAnd());
2087:       assertTrue(node0.isCast());
2088:       assertFalse(node0.isSwitch());
2089:       assertFalse(node0.isFalse());
2090:       assertFalse(node0.isDebugger());
2091:       assertFalse(node0.isTrue());
2092:       assertFalse(node0.isDefaultCase());
2093:       assertEquals((-1), node0.getSourcePosition());
2094:       assertFalse(node0.isNot());
2095:       assertFalse(node0.isEmpty());
2096:       assertFalse(node0.isOr());
2097:       assertFalse(node0.isComma());
2098:       assertFalse(node0.isReturn());
2099:       assertFalse(node0.isNull());
2100:       assertFalse(node0.isDec());
2101:       assertFalse(node0.hasChildren());
2102:       assertFalse(node0.isBreak());
2103:       assertFalse(node0.isAssign());
2104:       assertFalse(node0.isTypeOf());
2105:       assertFalse(node0.isDelProp());
2106:       assertFalse(node0.isName());
2107:       assertFalse(node0.isVoid());
2108:       assertFalse(node0.isExprResult());
2109:       assertFalse(node0.isCall());
2110:       assertFalse(node0.isGetElem());
2111:       assertFalse(node1.isCatch());
2112:       assertEquals(0, node1.getChildCount());
2113:       assertFalse(node1.isRegExp());
2114:       assertFalse(node1.isDebugger());
2115:       assertFalse(node1.isVoid());
2116:       assertFalse(node1.isTrue());
2117:       assertFalse(node1.isFunction());
2118:       assertFalse(node1.isParamList());
2119:       assertFalse(node1.isArrayLit());
2120:       assertFalse(node1.isStringKey());
2121:       assertFalse(node1.isCall());
2122:       assertFalse(node1.isFor());
2123:       assertFalse(node1.isGetterDef());
2124:       assertFalse(node1.isBlock());
2125:       assertFalse(node1.isTry());
2126:       assertFalse(node1.isWhile());
2127:       assertFalse(node1.isReturn());
2128:       assertFalse(node1.isLabel());
2129:       assertFalse(node1.isOr());
2130:       assertEquals((-1), node1.getCharno());
2131:       assertFalse(node1.isSwitch());
2132:       assertFalse(node1.isDelProp());
2133:       assertFalse(node1.isLabelName());
2134:       assertFalse(node1.isName());
2135:       assertFalse(node1.isVar());
2136:       assertFalse(node1.isEmpty());
2137:       assertFalse(node1.isNull());
2138:       assertFalse(node1.isAdd());
2139:       assertFalse(node1.isAssignAdd());
2140:       assertFalse(node1.isDefaultCase());
2141:       assertFalse(node1.isDo());
2142:       assertFalse(node1.isNew());
2143:       assertFalse(node1.isObjectLit());
2144:       assertFalse(node1.isWith());
2145:       assertFalse(node1.isAnd());
2146:       assertFalse(node1.isNot());
2147:       assertFalse(node1.isExprResult());
2148:       assertFalse(node1.isBreak());
2149:       assertFalse(node1.isInstanceOf());
2150:       assertEquals(78132, node1.getType());
2151:       assertFalse(node1.isGetElem());
2152:       assertFalse(node1.isDec());
2153:       assertFalse(node1.hasChildren());
2154:       assertFalse(node1.isNumber());
2155:       assertFalse(node1.isHook());
2156:       assertFalse(node1.isTypeOf());
2157:       assertFalse(node1.isAssign());
2158:       assertFalse(node1.isComma());
2159:       assertEquals((-1), node1.getSourcePosition());
2160:       assertFalse(node1.isGetProp());
2161:       assertFalse(node1.isThis());
2162:       assertFalse(node1.hasOneChild());
2163:       assertFalse(node1.isScript());
2164:       assertFalse(node1.isCase());
2165:       assertFalse(node1.hasMoreThanOneChild());
2166:       assertFalse(node1.isContinue());
2167:       assertFalse(node1.isString());
2168:       assertFalse(node1.isIn());
2169:       assertFalse(node1.isNE());
2170:       assertFalse(node1.isIf());
2171:       assertEquals((-1), node1.getLineno());
2172:       assertFalse(node1.isFalse());
2173:       assertFalse(node1.isThrow());
2174:       assertFalse(node1.isCast());
2175:       assertFalse(node1.isInc());
2176:       assertFalse(node1.isSetterDef());
2177:       assertFalse(node2.isNull());
2178:       assertFalse(node2.isSetterDef());
2179:       assertFalse(node2.isName());
2180:       assertFalse(node2.isParamList());
2181:       assertFalse(node2.isStringKey());
2182:       assertFalse(node2.isAdd());
2183:       assertFalse(node2.isNew());
2184:       assertFalse(node2.isDefaultCase());
2185:       assertFalse(node2.isDebugger());
2186:       assertFalse(node2.isFunction());
2187:       assertFalse(node2.isDo());
2188:       assertFalse(node2.isVar());
2189:       assertFalse(node2.isArrayLit());
2190:       assertEquals(0, node2.getChildCount());
2191:       assertFalse(node2.isContinue());
2192:       assertEquals((-1), node2.getSourcePosition());
2193:       assertFalse(node2.isTypeOf());
2194:       assertFalse(node2.hasChildren());
2195:       assertFalse(node2.isDelProp());
2196:       assertFalse(node2.isAssign());
2197:       assertFalse(node2.isDec());
2198:       assertFalse(node2.isLabel());
2199:       assertFalse(node2.isAssignAdd());
2200:       assertFalse(node2.isReturn());
2201:       assertFalse(node2.isOr());
2202:       assertFalse(node2.isEmpty());
2203:       assertEquals(78132, node2.getType());
2204:       assertFalse(node2.isString());
2205:       assertFalse(node2.isVoid());
2206:       assertFalse(node2.isWhile());
2207:       assertFalse(node2.isTrue());
2208:       assertFalse(node2.isGetElem());
2209:       assertFalse(node2.isExprResult());
2210:       assertFalse(node2.isCall());
2211:       assertFalse(node2.isBreak());
2212:       assertFalse(node2.isThis());
2213:       assertFalse(node2.isComma());
2214:       assertFalse(node2.isThrow());
2215:       assertFalse(node2.isObjectLit());
2216:       assertFalse(node2.isGetProp());
2217:       assertFalse(node2.isInc());
2218:       assertFalse(node2.isSwitch());
2219:       assertEquals((-1), node2.getCharno());
2220:       assertFalse(node2.isNot());
2221:       assertFalse(node2.isAnd());
2222:       assertFalse(node2.isFalse());
2223:       assertFalse(node2.isCast());
2224:       assertFalse(node2.isNumber());
2225:       assertFalse(node2.isIf());
2226:       assertFalse(node2.isGetterDef());
2227:       assertFalse(node2.isLabelName());
2228:       assertFalse(node2.isFor());
2229:       assertFalse(node2.isNE());
2230:       assertFalse(node2.isIn());
2231:       assertFalse(node2.hasOneChild());
2232:       assertFalse(node2.isCase());
2233:       assertFalse(node2.isScript());
2234:       assertFalse(node2.isRegExp());
2235:       assertFalse(node2.isTry());
2236:       assertFalse(node2.isBlock());
2237:       assertFalse(node2.isHook());
2238:       assertFalse(node2.hasMoreThanOneChild());
2239:       assertEquals((-1), node2.getLineno());
2240:       assertFalse(node2.isWith());
2241:       assertFalse(node2.isCatch());
2242:       assertFalse(node2.isInstanceOf());
2243:       assertNotSame(node0, node1);
2244:       assertNotSame(node0, node2);
2245:       assertNotSame(node1, node0);
2246:       assertSame(node1, node2);
2247:       assertSame(node2, node1);
2248:       assertNotSame(node2, node0);
2249:       
2250:       boolean boolean5 = node0.isCatch();
2251:       assertFalse(boolean5);
2252:       assertFalse(node0.equals((Object)node1));
2253:       assertFalse(node0.equals((Object)node2));
2254:       assertTrue(boolean5 == boolean0);
2255:       assertTrue(boolean5 == boolean1);
2256:       assertTrue(boolean5 == boolean2);
2257:       assertTrue(boolean5 == boolean4);
2258:       assertTrue(boolean5 == boolean3);
2259:       assertEquals(55, Node.INFERRED_FUNCTION);
2260:       assertEquals(4095, Node.COLUMN_MASK);
2261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2262:       assertEquals(53, Node.INPUT_ID);
2263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2265:       assertEquals(8, Node.FLAG_NO_THROWS);
2266:       assertEquals(39, Node.EMPTY_BLOCK);
2267:       assertEquals(37, Node.OPT_ARG_NAME);
2268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2269:       assertEquals(29, Node.JSDOC_INFO_PROP);
2270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2271:       assertEquals(52, Node.LENGTH);
2272:       assertEquals(48, Node.DIRECTIVES);
2273:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2274:       assertEquals(36, Node.QUOTED_PROP);
2275:       assertEquals(56, Node.CHANGE_TIME);
2276:       assertEquals(57, Node.REFLECTED_OBJECT);
2277:       assertEquals(30, Node.VAR_ARGS_NAME);
2278:       assertEquals(57, Node.LAST_PROP);
2279:       assertEquals(1, Node.DECR_FLAG);
2280:       assertEquals(49, Node.DIRECT_EVAL);
2281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2282:       assertEquals(32, Node.INCRDECR_PROP);
2283:       assertEquals(47, Node.IS_DISPATCHER);
2284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2285:       assertEquals(12, Node.COLUMN_BITS);
2286:       assertEquals(2, Node.POST_FLAG);
2287:       assertEquals(50, Node.FREE_CALL);
2288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2289:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2290:       assertEquals(40, Node.ORIGINALNAME_PROP);
2291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2292:       assertEquals(43, Node.IS_CONSTANT_NAME);
2293:       assertEquals(46, Node.IS_NAMESPACE);
2294:       assertEquals(54, Node.SLASH_V);
2295:       assertEquals(155, node0.getType());
2296:       assertFalse(node0.isStringKey());
2297:       assertFalse(node0.isVar());
2298:       assertFalse(node0.isBlock());
2299:       assertFalse(node0.isWhile());
2300:       assertFalse(node0.isDo());
2301:       assertFalse(node0.isNew());
2302:       assertFalse(node0.isSetterDef());
2303:       assertFalse(node0.isAdd());
2304:       assertEquals(0, node0.getChildCount());
2305:       assertFalse(node0.isAssignAdd());
2306:       assertFalse(node0.isParamList());
2307:       assertFalse(node0.isLabel());
2308:       assertFalse(node0.isLabelName());
2309:       assertFalse(node0.isFunction());
2310:       assertFalse(node0.isContinue());
2311:       assertFalse(node0.hasOneChild());
2312:       assertFalse(node0.isArrayLit());
2313:       assertFalse(node0.isTry());
2314:       assertFalse(node0.isFor());
2315:       assertFalse(node0.isGetterDef());
2316:       assertFalse(node0.isNumber());
2317:       assertFalse(node0.isScript());
2318:       assertFalse(node0.isIn());
2319:       assertEquals((-1), node0.getLineno());
2320:       assertFalse(node0.isInstanceOf());
2321:       assertFalse(node0.hasMoreThanOneChild());
2322:       assertFalse(node0.isNE());
2323:       assertFalse(node0.isThis());
2324:       assertFalse(node0.isIf());
2325:       assertFalse(node0.isWith());
2326:       assertFalse(node0.isRegExp());
2327:       assertFalse(node0.isCatch());
2328:       assertEquals((-1), node0.getCharno());
2329:       assertFalse(node0.isThrow());
2330:       assertFalse(node0.isHook());
2331:       assertFalse(node0.isString());
2332:       assertFalse(node0.isGetProp());
2333:       assertFalse(node0.isCase());
2334:       assertFalse(node0.isInc());
2335:       assertFalse(node0.isObjectLit());
2336:       assertFalse(node0.isAnd());
2337:       assertTrue(node0.isCast());
2338:       assertFalse(node0.isSwitch());
2339:       assertFalse(node0.isFalse());
2340:       assertFalse(node0.isDebugger());
2341:       assertFalse(node0.isTrue());
2342:       assertFalse(node0.isDefaultCase());
2343:       assertEquals((-1), node0.getSourcePosition());
2344:       assertFalse(node0.isNot());
2345:       assertFalse(node0.isEmpty());
2346:       assertFalse(node0.isOr());
2347:       assertFalse(node0.isComma());
2348:       assertFalse(node0.isReturn());
2349:       assertFalse(node0.isNull());
2350:       assertFalse(node0.isDec());
2351:       assertFalse(node0.hasChildren());
2352:       assertFalse(node0.isBreak());
2353:       assertFalse(node0.isAssign());
2354:       assertFalse(node0.isTypeOf());
2355:       assertFalse(node0.isDelProp());
2356:       assertFalse(node0.isName());
2357:       assertFalse(node0.isVoid());
2358:       assertFalse(node0.isExprResult());
2359:       assertFalse(node0.isCall());
2360:       assertFalse(node0.isGetElem());
2361:       assertNotSame(node0, node1);
2362:       assertNotSame(node0, node2);
2363:   }
2364: }
RegularFileObject[/tmp/EvoSuite_100_1628161062029/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.javascript.rhino.jstype.TernaryValue",
343:       "com.google.javascript.rhino.jstype.JSType$2",
344:       "com.google.javascript.rhino.jstype.JSType$TypePair",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.jstype.NamespaceType",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2"
362:     );
363:   }
364: }

[MASTER] 10:57:42.575 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(155, "");
assertNotNull(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());

boolean boolean0 = node0.getBooleanProp(155);
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());

boolean boolean1 = node0.isThrow();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());

boolean boolean2 = node0.isBreak();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(iterable0.contains(node0));

node0.setQuotedString();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());

Node node1 = Node.newString(78132, "", (-3203), 117);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node1, node0);

int int0 = node1.getChangeTime();
assertEquals(0, int0);
assertFalse(node1.equals((Object)node0));
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node1, node0);

Node node2 = node1.srcref(node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean3 = node1.isSyntheticBlock();
assertFalse(boolean3);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node1, node0);
assertSame(node1, node2);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean4 = node2.wasEmptyNode();
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(78132, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean5 = node0.isCatch();
assertFalse(boolean5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(155, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertTrue(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertNotSame(node0, node1);
assertNotSame(node0, node2);


[MASTER] 10:57:52.129 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_140_1628161071814/com/google/javascript/rhino/Node_140_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_140_1628161071814/com/google/javascript/rhino/Node_140_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:52.129 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:52.129 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:52.130 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 10:57:52.131 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_140_1628161071814/com/google/javascript/rhino/Node_140_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_140_tmp__ESTest extends Node_140_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(155, "");
21:       assertNotNull(node0);
22:       assertEquals(53, Node.INPUT_ID);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
25:       assertEquals(29, Node.JSDOC_INFO_PROP);
26:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(43, Node.IS_CONSTANT_NAME);
29:       assertEquals(56, Node.CHANGE_TIME);
30:       assertEquals(36, Node.QUOTED_PROP);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
39:       assertEquals(54, Node.SLASH_V);
40:       assertEquals(52, Node.LENGTH);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(49, Node.DIRECT_EVAL);
44:       assertEquals(50, Node.FREE_CALL);
45:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
46:       assertEquals(51, Node.STATIC_SOURCE_FILE);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(46, Node.IS_NAMESPACE);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertFalse(node0.isFalse());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isSwitch());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isNot());
68:       assertFalse(node0.isAnd());
69:       assertFalse(node0.isString());
70:       assertFalse(node0.isObjectLit());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isCase());
76:       assertFalse(node0.isAssign());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isEmpty());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isGetElem());
81:       assertTrue(node0.isCast());
82:       assertFalse(node0.isNumber());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isDec());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isVoid());
89:       assertFalse(node0.isArrayLit());
90:       assertFalse(node0.isDo());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isTrue());
93:       assertEquals(0, node0.getChildCount());
94:       assertFalse(node0.isAssignAdd());
95:       assertFalse(node0.isLabel());
96:       assertFalse(node0.isOr());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isNew());
99:       assertFalse(node0.isName());
100:       assertFalse(node0.isStringKey());
101:       assertFalse(node0.isVar());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isParamList());
104:       assertFalse(node0.isCatch());
105:       assertEquals(155, node0.getType());
106:       assertFalse(node0.isCall());
107:       assertFalse(node0.isWhile());
108:       assertFalse(node0.hasMoreThanOneChild());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isDebugger());
111:       assertFalse(node0.isTry());
112:       assertFalse(node0.isReturn());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isFor());
115:       assertFalse(node0.isIf());
116:       assertFalse(node0.isNE());
117:       assertEquals((-1), node0.getSourcePosition());
118:       assertEquals((-1), node0.getLineno());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isFunction());
121:       assertFalse(node0.isIn());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isInc());
124:       
125:       boolean boolean0 = node0.getBooleanProp(155);
126:       assertFalse(boolean0);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
132:       assertEquals(55, Node.INFERRED_FUNCTION);
133:       assertEquals(43, Node.IS_CONSTANT_NAME);
134:       assertEquals(56, Node.CHANGE_TIME);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(39, Node.EMPTY_BLOCK);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(54, Node.SLASH_V);
145:       assertEquals(52, Node.LENGTH);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(57, Node.LAST_PROP);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(50, Node.FREE_CALL);
150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(46, Node.IS_NAMESPACE);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(32, Node.INCRDECR_PROP);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(37, Node.OPT_ARG_NAME);
159:       assertEquals(1, Node.DECR_FLAG);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(12, Node.COLUMN_BITS);
163:       assertFalse(node0.isFalse());
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isInstanceOf());
169:       assertFalse(node0.isSwitch());
170:       assertFalse(node0.isBreak());
171:       assertFalse(node0.isWith());
172:       assertFalse(node0.isNot());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isString());
175:       assertFalse(node0.isObjectLit());
176:       assertEquals((-1), node0.getCharno());
177:       assertFalse(node0.isScript());
178:       assertFalse(node0.isGetProp());
179:       assertFalse(node0.hasOneChild());
180:       assertFalse(node0.isCase());
181:       assertFalse(node0.isAssign());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isEmpty());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isGetElem());
186:       assertTrue(node0.isCast());
187:       assertFalse(node0.isNumber());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isDec());
190:       assertFalse(node0.hasChildren());
191:       assertFalse(node0.isGetterDef());
192:       assertFalse(node0.isExprResult());
193:       assertFalse(node0.isVoid());
194:       assertFalse(node0.isArrayLit());
195:       assertFalse(node0.isDo());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isTrue());
198:       assertEquals(0, node0.getChildCount());
199:       assertFalse(node0.isAssignAdd());
200:       assertFalse(node0.isLabel());
201:       assertFalse(node0.isOr());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isNew());
204:       assertFalse(node0.isName());
205:       assertFalse(node0.isStringKey());
206:       assertFalse(node0.isVar());
207:       assertFalse(node0.isNull());
208:       assertFalse(node0.isParamList());
209:       assertFalse(node0.isCatch());
210:       assertEquals(155, node0.getType());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.isWhile());
213:       assertFalse(node0.hasMoreThanOneChild());
214:       assertFalse(node0.isRegExp());
215:       assertFalse(node0.isDebugger());
216:       assertFalse(node0.isTry());
217:       assertFalse(node0.isReturn());
218:       assertFalse(node0.isBlock());
219:       assertFalse(node0.isFor());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isNE());
222:       assertEquals((-1), node0.getSourcePosition());
223:       assertEquals((-1), node0.getLineno());
224:       assertFalse(node0.isContinue());
225:       assertFalse(node0.isFunction());
226:       assertFalse(node0.isIn());
227:       assertFalse(node0.isSetterDef());
228:       assertFalse(node0.isInc());
229:       
230:       boolean boolean1 = node0.isThrow();
231:       assertFalse(boolean1);
232:       assertTrue(boolean1 == boolean0);
233:       assertEquals(53, Node.INPUT_ID);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
236:       assertEquals(29, Node.JSDOC_INFO_PROP);
237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(43, Node.IS_CONSTANT_NAME);
240:       assertEquals(56, Node.CHANGE_TIME);
241:       assertEquals(36, Node.QUOTED_PROP);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(8, Node.FLAG_NO_THROWS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
250:       assertEquals(54, Node.SLASH_V);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(50, Node.FREE_CALL);
256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
258:       assertEquals(57, Node.REFLECTED_OBJECT);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(37, Node.OPT_ARG_NAME);
265:       assertEquals(1, Node.DECR_FLAG);
266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertFalse(node0.isFalse());
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isHook());
272:       assertFalse(node0.isThis());
273:       assertFalse(node0.isComma());
274:       assertFalse(node0.isInstanceOf());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isBreak());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isNot());
279:       assertFalse(node0.isAnd());
280:       assertFalse(node0.isString());
281:       assertFalse(node0.isObjectLit());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isScript());
284:       assertFalse(node0.isGetProp());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isCase());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isLabelName());
289:       assertFalse(node0.isEmpty());
290:       assertFalse(node0.isDelProp());
291:       assertFalse(node0.isGetElem());
292:       assertTrue(node0.isCast());
293:       assertFalse(node0.isNumber());
294:       assertFalse(node0.isTypeOf());
295:       assertFalse(node0.isDec());
296:       assertFalse(node0.hasChildren());
297:       assertFalse(node0.isGetterDef());
298:       assertFalse(node0.isExprResult());
299:       assertFalse(node0.isVoid());
300:       assertFalse(node0.isArrayLit());
301:       assertFalse(node0.isDo());
302:       assertFalse(node0.isDefaultCase());
303:       assertFalse(node0.isTrue());
304:       assertEquals(0, node0.getChildCount());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isLabel());
307:       assertFalse(node0.isOr());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.isNew());
310:       assertFalse(node0.isName());
311:       assertFalse(node0.isStringKey());
312:       assertFalse(node0.isVar());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isParamList());
315:       assertFalse(node0.isCatch());
316:       assertEquals(155, node0.getType());
317:       assertFalse(node0.isCall());
318:       assertFalse(node0.isWhile());
319:       assertFalse(node0.hasMoreThanOneChild());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.isDebugger());
322:       assertFalse(node0.isTry());
323:       assertFalse(node0.isReturn());
324:       assertFalse(node0.isBlock());
325:       assertFalse(node0.isFor());
326:       assertFalse(node0.isIf());
327:       assertFalse(node0.isNE());
328:       assertEquals((-1), node0.getSourcePosition());
329:       assertEquals((-1), node0.getLineno());
330:       assertFalse(node0.isContinue());
331:       assertFalse(node0.isFunction());
332:       assertFalse(node0.isIn());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isInc());
335:       
336:       boolean boolean2 = node0.isAnd();
337:       assertFalse(boolean2);
338:       assertTrue(boolean2 == boolean0);
339:       assertTrue(boolean2 == boolean1);
340:       assertEquals(53, Node.INPUT_ID);
341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(36, Node.QUOTED_PROP);
349:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
350:       assertEquals(8, Node.FLAG_NO_THROWS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(40, Node.ORIGINALNAME_PROP);
353:       assertEquals(47, Node.IS_DISPATCHER);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(30, Node.VAR_ARGS_NAME);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(54, Node.SLASH_V);
358:       assertEquals(52, Node.LENGTH);
359:       assertEquals(15, Node.NO_SIDE_EFFECTS);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(49, Node.DIRECT_EVAL);
362:       assertEquals(50, Node.FREE_CALL);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(51, Node.STATIC_SOURCE_FILE);
365:       assertEquals(57, Node.REFLECTED_OBJECT);
366:       assertEquals(46, Node.IS_NAMESPACE);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(37, Node.OPT_ARG_NAME);
372:       assertEquals(1, Node.DECR_FLAG);
373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
374:       assertEquals(4095, Node.COLUMN_MASK);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertFalse(node0.isFalse());
377:       assertFalse(node0.isThrow());
378:       assertFalse(node0.isHook());
379:       assertFalse(node0.isThis());
380:       assertFalse(node0.isComma());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isSwitch());
383:       assertFalse(node0.isBreak());
384:       assertFalse(node0.isWith());
385:       assertFalse(node0.isNot());
386:       assertFalse(node0.isAnd());
387:       assertFalse(node0.isString());
388:       assertFalse(node0.isObjectLit());
389:       assertEquals((-1), node0.getCharno());
390:       assertFalse(node0.isScript());
391:       assertFalse(node0.isGetProp());
392:       assertFalse(node0.hasOneChild());
393:       assertFalse(node0.isCase());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isLabelName());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isDelProp());
398:       assertFalse(node0.isGetElem());
399:       assertTrue(node0.isCast());
400:       assertFalse(node0.isNumber());
401:       assertFalse(node0.isTypeOf());
402:       assertFalse(node0.isDec());
403:       assertFalse(node0.hasChildren());
404:       assertFalse(node0.isGetterDef());
405:       assertFalse(node0.isExprResult());
406:       assertFalse(node0.isVoid());
407:       assertFalse(node0.isArrayLit());
408:       assertFalse(node0.isDo());
409:       assertFalse(node0.isDefaultCase());
410:       assertFalse(node0.isTrue());
411:       assertEquals(0, node0.getChildCount());
412:       assertFalse(node0.isAssignAdd());
413:       assertFalse(node0.isLabel());
414:       assertFalse(node0.isOr());
415:       assertFalse(node0.isAdd());
416:       assertFalse(node0.isNew());
417:       assertFalse(node0.isName());
418:       assertFalse(node0.isStringKey());
419:       assertFalse(node0.isVar());
420:       assertFalse(node0.isNull());
421:       assertFalse(node0.isParamList());
422:       assertFalse(node0.isCatch());
423:       assertEquals(155, node0.getType());
424:       assertFalse(node0.isCall());
425:       assertFalse(node0.isWhile());
426:       assertFalse(node0.hasMoreThanOneChild());
427:       assertFalse(node0.isRegExp());
428:       assertFalse(node0.isDebugger());
429:       assertFalse(node0.isTry());
430:       assertFalse(node0.isReturn());
431:       assertFalse(node0.isBlock());
432:       assertFalse(node0.isFor());
433:       assertFalse(node0.isIf());
434:       assertFalse(node0.isNE());
435:       assertEquals((-1), node0.getSourcePosition());
436:       assertEquals((-1), node0.getLineno());
437:       assertFalse(node0.isContinue());
438:       assertFalse(node0.isFunction());
439:       assertFalse(node0.isIn());
440:       assertFalse(node0.isSetterDef());
441:       assertFalse(node0.isInc());
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
448:       assertEquals(29, Node.JSDOC_INFO_PROP);
449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
450:       assertEquals(55, Node.INFERRED_FUNCTION);
451:       assertEquals(43, Node.IS_CONSTANT_NAME);
452:       assertEquals(56, Node.CHANGE_TIME);
453:       assertEquals(36, Node.QUOTED_PROP);
454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
455:       assertEquals(8, Node.FLAG_NO_THROWS);
456:       assertEquals(39, Node.EMPTY_BLOCK);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(47, Node.IS_DISPATCHER);
459:       assertEquals(2, Node.POST_FLAG);
460:       assertEquals(30, Node.VAR_ARGS_NAME);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(54, Node.SLASH_V);
463:       assertEquals(52, Node.LENGTH);
464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
465:       assertEquals(57, Node.LAST_PROP);
466:       assertEquals(49, Node.DIRECT_EVAL);
467:       assertEquals(50, Node.FREE_CALL);
468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(57, Node.REFLECTED_OBJECT);
471:       assertEquals(46, Node.IS_NAMESPACE);
472:       assertEquals(48, Node.DIRECTIVES);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(32, Node.INCRDECR_PROP);
475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
479:       assertEquals(4095, Node.COLUMN_MASK);
480:       assertEquals(12, Node.COLUMN_BITS);
481:       assertFalse(node0.isFalse());
482:       assertFalse(node0.isThrow());
483:       assertFalse(node0.isHook());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.isComma());
486:       assertFalse(node0.isInstanceOf());
487:       assertFalse(node0.isSwitch());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.isWith());
490:       assertFalse(node0.isNot());
491:       assertFalse(node0.isAnd());
492:       assertFalse(node0.isString());
493:       assertFalse(node0.isObjectLit());
494:       assertEquals((-1), node0.getCharno());
495:       assertFalse(node0.isScript());
496:       assertFalse(node0.isGetProp());
497:       assertFalse(node0.hasOneChild());
498:       assertFalse(node0.isCase());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isLabelName());
501:       assertFalse(node0.isEmpty());
502:       assertFalse(node0.isDelProp());
503:       assertFalse(node0.isGetElem());
504:       assertTrue(node0.isCast());
505:       assertFalse(node0.isNumber());
506:       assertFalse(node0.isTypeOf());
507:       assertFalse(node0.isDec());
508:       assertFalse(node0.hasChildren());
509:       assertFalse(node0.isGetterDef());
510:       assertFalse(node0.isExprResult());
511:       assertFalse(node0.isVoid());
512:       assertFalse(node0.isArrayLit());
513:       assertFalse(node0.isDo());
514:       assertFalse(node0.isDefaultCase());
515:       assertFalse(node0.isTrue());
516:       assertEquals(0, node0.getChildCount());
517:       assertFalse(node0.isAssignAdd());
518:       assertFalse(node0.isLabel());
519:       assertFalse(node0.isOr());
520:       assertFalse(node0.isAdd());
521:       assertFalse(node0.isNew());
522:       assertFalse(node0.isName());
523:       assertFalse(node0.isStringKey());
524:       assertFalse(node0.isVar());
525:       assertFalse(node0.isNull());
526:       assertFalse(node0.isParamList());
527:       assertFalse(node0.isCatch());
528:       assertEquals(155, node0.getType());
529:       assertFalse(node0.isCall());
530:       assertFalse(node0.isWhile());
531:       assertFalse(node0.hasMoreThanOneChild());
532:       assertFalse(node0.isRegExp());
533:       assertFalse(node0.isDebugger());
534:       assertFalse(node0.isTry());
535:       assertFalse(node0.isReturn());
536:       assertFalse(node0.isBlock());
537:       assertFalse(node0.isFor());
538:       assertFalse(node0.isIf());
539:       assertFalse(node0.isNE());
540:       assertEquals((-1), node0.getSourcePosition());
541:       assertEquals((-1), node0.getLineno());
542:       assertFalse(node0.isContinue());
543:       assertFalse(node0.isFunction());
544:       assertFalse(node0.isIn());
545:       assertFalse(node0.isSetterDef());
546:       assertFalse(node0.isInc());
547:       assertFalse(iterable0.contains(node0));
548:       
549:       node0.setQuotedString();
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(43, Node.IS_CONSTANT_NAME);
557:       assertEquals(56, Node.CHANGE_TIME);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(40, Node.ORIGINALNAME_PROP);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(2, Node.POST_FLAG);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
567:       assertEquals(54, Node.SLASH_V);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(57, Node.LAST_PROP);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(50, Node.FREE_CALL);
573:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
575:       assertEquals(57, Node.REFLECTED_OBJECT);
576:       assertEquals(46, Node.IS_NAMESPACE);
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
579:       assertEquals(32, Node.INCRDECR_PROP);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(1, Node.DECR_FLAG);
583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
584:       assertEquals(4095, Node.COLUMN_MASK);
585:       assertEquals(12, Node.COLUMN_BITS);
586:       assertFalse(node0.isFalse());
587:       assertFalse(node0.isThrow());
588:       assertFalse(node0.isHook());
589:       assertFalse(node0.isThis());
590:       assertFalse(node0.isComma());
591:       assertFalse(node0.isInstanceOf());
592:       assertFalse(node0.isSwitch());
593:       assertFalse(node0.isBreak());
594:       assertFalse(node0.isWith());
595:       assertFalse(node0.isNot());
596:       assertFalse(node0.isAnd());
597:       assertFalse(node0.isString());
598:       assertFalse(node0.isObjectLit());
599:       assertEquals((-1), node0.getCharno());
600:       assertFalse(node0.isScript());
601:       assertFalse(node0.isGetProp());
602:       assertFalse(node0.hasOneChild());
603:       assertFalse(node0.isCase());
604:       assertFalse(node0.isAssign());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isEmpty());
607:       assertFalse(node0.isDelProp());
608:       assertFalse(node0.isGetElem());
609:       assertTrue(node0.isCast());
610:       assertFalse(node0.isNumber());
611:       assertFalse(node0.isTypeOf());
612:       assertFalse(node0.isDec());
613:       assertFalse(node0.hasChildren());
614:       assertFalse(node0.isGetterDef());
615:       assertFalse(node0.isExprResult());
616:       assertFalse(node0.isVoid());
617:       assertFalse(node0.isArrayLit());
618:       assertFalse(node0.isDo());
619:       assertFalse(node0.isDefaultCase());
620:       assertFalse(node0.isTrue());
621:       assertEquals(0, node0.getChildCount());
622:       assertFalse(node0.isAssignAdd());
623:       assertFalse(node0.isLabel());
624:       assertFalse(node0.isOr());
625:       assertFalse(node0.isAdd());
626:       assertFalse(node0.isNew());
627:       assertFalse(node0.isName());
628:       assertFalse(node0.isStringKey());
629:       assertFalse(node0.isVar());
630:       assertFalse(node0.isNull());
631:       assertFalse(node0.isParamList());
632:       assertFalse(node0.isCatch());
633:       assertEquals(155, node0.getType());
634:       assertFalse(node0.isCall());
635:       assertFalse(node0.isWhile());
636:       assertFalse(node0.hasMoreThanOneChild());
637:       assertFalse(node0.isRegExp());
638:       assertFalse(node0.isDebugger());
639:       assertFalse(node0.isTry());
640:       assertFalse(node0.isReturn());
641:       assertFalse(node0.isBlock());
642:       assertFalse(node0.isFor());
643:       assertFalse(node0.isIf());
644:       assertFalse(node0.isNE());
645:       assertEquals((-1), node0.getSourcePosition());
646:       assertEquals((-1), node0.getLineno());
647:       assertFalse(node0.isContinue());
648:       assertFalse(node0.isFunction());
649:       assertFalse(node0.isIn());
650:       assertFalse(node0.isSetterDef());
651:       assertFalse(node0.isInc());
652:       
653:       Node node1 = Node.newString((-241), "", (-3203), 117);
654:       assertNotNull(node1);
655:       assertFalse(node1.equals((Object)node0));
656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
657:       assertEquals(50, Node.FREE_CALL);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(39, Node.EMPTY_BLOCK);
660:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
661:       assertEquals(40, Node.ORIGINALNAME_PROP);
662:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
663:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
664:       assertEquals(30, Node.VAR_ARGS_NAME);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(43, Node.IS_CONSTANT_NAME);
667:       assertEquals(51, Node.STATIC_SOURCE_FILE);
668:       assertEquals(46, Node.IS_NAMESPACE);
669:       assertEquals(54, Node.SLASH_V);
670:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(37, Node.OPT_ARG_NAME);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(29, Node.JSDOC_INFO_PROP);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(2, Node.POST_FLAG);
677:       assertEquals(47, Node.IS_DISPATCHER);
678:       assertEquals(12, Node.COLUMN_BITS);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(55, Node.INFERRED_FUNCTION);
682:       assertEquals(4095, Node.COLUMN_MASK);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(52, Node.LENGTH);
687:       assertEquals(48, Node.DIRECTIVES);
688:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
689:       assertEquals(36, Node.QUOTED_PROP);
690:       assertEquals(56, Node.CHANGE_TIME);
691:       assertEquals(57, Node.REFLECTED_OBJECT);
692:       assertFalse(node1.isIn());
693:       assertFalse(node1.isNE());
694:       assertFalse(node1.isGetterDef());
695:       assertFalse(node1.isString());
696:       assertFalse(node1.isCase());
697:       assertFalse(node1.isEmpty());
698:       assertFalse(node1.isInc());
699:       assertFalse(node1.isTry());
700:       assertFalse(node1.isFor());
701:       assertFalse(node1.isTrue());
702:       assertFalse(node1.isHook());
703:       assertFalse(node1.isDelProp());
704:       assertFalse(node1.isBreak());
705:       assertFalse(node1.isIf());
706:       assertFalse(node1.isRegExp());
707:       assertFalse(node1.isVoid());
708:       assertFalse(node1.isCatch());
709:       assertFalse(node1.isObjectLit());
710:       assertFalse(node1.isAnd());
711:       assertFalse(node1.isComma());
712:       assertFalse(node1.isNot());
713:       assertFalse(node1.isGetProp());
714:       assertEquals((-241), node1.getType());
715:       assertFalse(node1.isSetterDef());
716:       assertFalse(node1.isDebugger());
717:       assertFalse(node1.isThrow());
718:       assertFalse(node1.isFunction());
719:       assertFalse(node1.isFalse());
720:       assertFalse(node1.isContinue());
721:       assertFalse(node1.isCast());
722:       assertEquals((-1), node1.getLineno());
723:       assertFalse(node1.isAssignAdd());
724:       assertFalse(node1.isOr());
725:       assertFalse(node1.hasMoreThanOneChild());
726:       assertFalse(node1.isLabel());
727:       assertFalse(node1.isReturn());
728:       assertEquals((-1), node1.getSourcePosition());
729:       assertFalse(node1.isWhile());
730:       assertFalse(node1.isDo());
731:       assertFalse(node1.isNumber());
732:       assertFalse(node1.isNew());
733:       assertFalse(node1.isAdd());
734:       assertFalse(node1.hasOneChild());
735:       assertFalse(node1.isBlock());
736:       assertFalse(node1.hasChildren());
737:       assertFalse(node1.isDec());
738:       assertFalse(node1.isAssign());
739:       assertFalse(node1.isWith());
740:       assertFalse(node1.isTypeOf());
741:       assertFalse(node1.isName());
742:       assertFalse(node1.isExprResult());
743:       assertFalse(node1.isCall());
744:       assertFalse(node1.isGetElem());
745:       assertEquals(0, node1.getChildCount());
746:       assertFalse(node1.isInstanceOf());
747:       assertFalse(node1.isParamList());
748:       assertFalse(node1.isNull());
749:       assertFalse(node1.isThis());
750:       assertFalse(node1.isDefaultCase());
751:       assertFalse(node1.isScript());
752:       assertEquals((-1), node1.getCharno());
753:       assertFalse(node1.isStringKey());
754:       assertFalse(node1.isVar());
755:       assertFalse(node1.isLabelName());
756:       assertFalse(node1.isSwitch());
757:       assertFalse(node1.isArrayLit());
758:       assertNotSame(node1, node0);
759:       
760:       int int0 = node1.getChangeTime();
761:       assertEquals(0, int0);
762:       assertFalse(node1.equals((Object)node0));
763:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
764:       assertEquals(50, Node.FREE_CALL);
765:       assertEquals(8, Node.FLAG_NO_THROWS);
766:       assertEquals(39, Node.EMPTY_BLOCK);
767:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
768:       assertEquals(40, Node.ORIGINALNAME_PROP);
769:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
770:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
771:       assertEquals(30, Node.VAR_ARGS_NAME);
772:       assertEquals(1, Node.DECR_FLAG);
773:       assertEquals(43, Node.IS_CONSTANT_NAME);
774:       assertEquals(51, Node.STATIC_SOURCE_FILE);
775:       assertEquals(46, Node.IS_NAMESPACE);
776:       assertEquals(54, Node.SLASH_V);
777:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
778:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(32, Node.INCRDECR_PROP);
783:       assertEquals(2, Node.POST_FLAG);
784:       assertEquals(47, Node.IS_DISPATCHER);
785:       assertEquals(12, Node.COLUMN_BITS);
786:       assertEquals(57, Node.LAST_PROP);
787:       assertEquals(49, Node.DIRECT_EVAL);
788:       assertEquals(55, Node.INFERRED_FUNCTION);
789:       assertEquals(4095, Node.COLUMN_MASK);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(48, Node.DIRECTIVES);
795:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
796:       assertEquals(36, Node.QUOTED_PROP);
797:       assertEquals(56, Node.CHANGE_TIME);
798:       assertEquals(57, Node.REFLECTED_OBJECT);
799:       assertFalse(node1.isIn());
800:       assertFalse(node1.isNE());
801:       assertFalse(node1.isGetterDef());
802:       assertFalse(node1.isString());
803:       assertFalse(node1.isCase());
804:       assertFalse(node1.isEmpty());
805:       assertFalse(node1.isInc());
806:       assertFalse(node1.isTry());
807:       assertFalse(node1.isFor());
808:       assertFalse(node1.isTrue());
809:       assertFalse(node1.isHook());
810:       assertFalse(node1.isDelProp());
811:       assertFalse(node1.isBreak());
812:       assertFalse(node1.isIf());
813:       assertFalse(node1.isRegExp());
814:       assertFalse(node1.isVoid());
815:       assertFalse(node1.isCatch());
816:       assertFalse(node1.isObjectLit());
817:       assertFalse(node1.isAnd());
818:       assertFalse(node1.isComma());
819:       assertFalse(node1.isNot());
820:       assertFalse(node1.isGetProp());
821:       assertEquals((-241), node1.getType());
822:       assertFalse(node1.isSetterDef());
823:       assertFalse(node1.isDebugger());
824:       assertFalse(node1.isThrow());
825:       assertFalse(node1.isFunction());
826:       assertFalse(node1.isFalse());
827:       assertFalse(node1.isContinue());
828:       assertFalse(node1.isCast());
829:       assertEquals((-1), node1.getLineno());
830:       assertFalse(node1.isAssignAdd());
831:       assertFalse(node1.isOr());
832:       assertFalse(node1.hasMoreThanOneChild());
833:       assertFalse(node1.isLabel());
834:       assertFalse(node1.isReturn());
835:       assertEquals((-1), node1.getSourcePosition());
836:       assertFalse(node1.isWhile());
837:       assertFalse(node1.isDo());
838:       assertFalse(node1.isNumber());
839:       assertFalse(node1.isNew());
840:       assertFalse(node1.isAdd());
841:       assertFalse(node1.hasOneChild());
842:       assertFalse(node1.isBlock());
843:       assertFalse(node1.hasChildren());
844:       assertFalse(node1.isDec());
845:       assertFalse(node1.isAssign());
846:       assertFalse(node1.isWith());
847:       assertFalse(node1.isTypeOf());
848:       assertFalse(node1.isName());
849:       assertFalse(node1.isExprResult());
850:       assertFalse(node1.isCall());
851:       assertFalse(node1.isGetElem());
852:       assertEquals(0, node1.getChildCount());
853:       assertFalse(node1.isInstanceOf());
854:       assertFalse(node1.isParamList());
855:       assertFalse(node1.isNull());
856:       assertFalse(node1.isThis());
857:       assertFalse(node1.isDefaultCase());
858:       assertFalse(node1.isScript());
859:       assertEquals((-1), node1.getCharno());
860:       assertFalse(node1.isStringKey());
861:       assertFalse(node1.isVar());
862:       assertFalse(node1.isLabelName());
863:       assertFalse(node1.isSwitch());
864:       assertFalse(node1.isArrayLit());
865:       assertNotSame(node1, node0);
866:       
867:       Node node2 = node1.srcref(node0);
868:       assertNotNull(node2);
869:       assertFalse(node0.equals((Object)node1));
870:       assertFalse(node1.equals((Object)node0));
871:       assertFalse(node2.equals((Object)node0));
872:       assertEquals(53, Node.INPUT_ID);
873:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(29, Node.JSDOC_INFO_PROP);
876:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(43, Node.IS_CONSTANT_NAME);
879:       assertEquals(56, Node.CHANGE_TIME);
880:       assertEquals(36, Node.QUOTED_PROP);
881:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
882:       assertEquals(8, Node.FLAG_NO_THROWS);
883:       assertEquals(39, Node.EMPTY_BLOCK);
884:       assertEquals(40, Node.ORIGINALNAME_PROP);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertEquals(2, Node.POST_FLAG);
887:       assertEquals(30, Node.VAR_ARGS_NAME);
888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
889:       assertEquals(54, Node.SLASH_V);
890:       assertEquals(52, Node.LENGTH);
891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
892:       assertEquals(57, Node.LAST_PROP);
893:       assertEquals(49, Node.DIRECT_EVAL);
894:       assertEquals(50, Node.FREE_CALL);
895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
896:       assertEquals(51, Node.STATIC_SOURCE_FILE);
897:       assertEquals(57, Node.REFLECTED_OBJECT);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(48, Node.DIRECTIVES);
900:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
903:       assertEquals(37, Node.OPT_ARG_NAME);
904:       assertEquals(1, Node.DECR_FLAG);
905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
906:       assertEquals(4095, Node.COLUMN_MASK);
907:       assertEquals(12, Node.COLUMN_BITS);
908:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
909:       assertEquals(50, Node.FREE_CALL);
910:       assertEquals(8, Node.FLAG_NO_THROWS);
911:       assertEquals(39, Node.EMPTY_BLOCK);
912:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
913:       assertEquals(40, Node.ORIGINALNAME_PROP);
914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
916:       assertEquals(30, Node.VAR_ARGS_NAME);
917:       assertEquals(1, Node.DECR_FLAG);
918:       assertEquals(43, Node.IS_CONSTANT_NAME);
919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
920:       assertEquals(46, Node.IS_NAMESPACE);
921:       assertEquals(54, Node.SLASH_V);
922:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
924:       assertEquals(37, Node.OPT_ARG_NAME);
925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(32, Node.INCRDECR_PROP);
928:       assertEquals(2, Node.POST_FLAG);
929:       assertEquals(47, Node.IS_DISPATCHER);
930:       assertEquals(12, Node.COLUMN_BITS);
931:       assertEquals(57, Node.LAST_PROP);
932:       assertEquals(49, Node.DIRECT_EVAL);
933:       assertEquals(55, Node.INFERRED_FUNCTION);
934:       assertEquals(4095, Node.COLUMN_MASK);
935:       assertEquals(15, Node.NO_SIDE_EFFECTS);
936:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
937:       assertEquals(53, Node.INPUT_ID);
938:       assertEquals(52, Node.LENGTH);
939:       assertEquals(48, Node.DIRECTIVES);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(36, Node.QUOTED_PROP);
942:       assertEquals(56, Node.CHANGE_TIME);
943:       assertEquals(57, Node.REFLECTED_OBJECT);
944:       assertEquals(4095, Node.COLUMN_MASK);
945:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
946:       assertEquals(55, Node.INFERRED_FUNCTION);
947:       assertEquals(43, Node.IS_CONSTANT_NAME);
948:       assertEquals(36, Node.QUOTED_PROP);
949:       assertEquals(8, Node.FLAG_NO_THROWS);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(57, Node.REFLECTED_OBJECT);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(53, Node.INPUT_ID);
955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
956:       assertEquals(52, Node.LENGTH);
957:       assertEquals(40, Node.ORIGINALNAME_PROP);
958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
959:       assertEquals(39, Node.EMPTY_BLOCK);
960:       assertEquals(57, Node.LAST_PROP);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(2, Node.POST_FLAG);
963:       assertEquals(30, Node.VAR_ARGS_NAME);
964:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
965:       assertEquals(51, Node.STATIC_SOURCE_FILE);
966:       assertEquals(12, Node.COLUMN_BITS);
967:       assertEquals(32, Node.INCRDECR_PROP);
968:       assertEquals(1, Node.DECR_FLAG);
969:       assertEquals(37, Node.OPT_ARG_NAME);
970:       assertEquals(49, Node.DIRECT_EVAL);
971:       assertEquals(46, Node.IS_NAMESPACE);
972:       assertEquals(54, Node.SLASH_V);
973:       assertEquals(56, Node.CHANGE_TIME);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
976:       assertEquals(50, Node.FREE_CALL);
977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertFalse(node0.isFalse());
981:       assertFalse(node0.isThrow());
982:       assertFalse(node0.isHook());
983:       assertFalse(node0.isThis());
984:       assertFalse(node0.isComma());
985:       assertFalse(node0.isInstanceOf());
986:       assertFalse(node0.isSwitch());
987:       assertFalse(node0.isBreak());
988:       assertFalse(node0.isWith());
989:       assertFalse(node0.isNot());
990:       assertFalse(node0.isAnd());
991:       assertFalse(node0.isString());
992:       assertFalse(node0.isObjectLit());
993:       assertEquals((-1), node0.getCharno());
994:       assertFalse(node0.isScript());
995:       assertFalse(node0.isGetProp());
996:       assertFalse(node0.hasOneChild());
997:       assertFalse(node0.isCase());
998:       assertFalse(node0.isAssign());
999:       assertFalse(node0.isLabelName());
1000:       assertFalse(node0.isEmpty());
1001:       assertFalse(node0.isDelProp());
1002:       assertFalse(node0.isGetElem());
1003:       assertTrue(node0.isCast());
1004:       assertFalse(node0.isNumber());
1005:       assertFalse(node0.isTypeOf());
1006:       assertFalse(node0.isDec());
1007:       assertFalse(node0.hasChildren());
1008:       assertFalse(node0.isGetterDef());
1009:       assertFalse(node0.isExprResult());
1010:       assertFalse(node0.isVoid());
1011:       assertFalse(node0.isArrayLit());
1012:       assertFalse(node0.isDo());
1013:       assertFalse(node0.isDefaultCase());
1014:       assertFalse(node0.isTrue());
1015:       assertEquals(0, node0.getChildCount());
1016:       assertFalse(node0.isAssignAdd());
1017:       assertFalse(node0.isLabel());
1018:       assertFalse(node0.isOr());
1019:       assertFalse(node0.isAdd());
1020:       assertFalse(node0.isNew());
1021:       assertFalse(node0.isName());
1022:       assertFalse(node0.isStringKey());
1023:       assertFalse(node0.isVar());
1024:       assertFalse(node0.isNull());
1025:       assertFalse(node0.isParamList());
1026:       assertFalse(node0.isCatch());
1027:       assertEquals(155, node0.getType());
1028:       assertFalse(node0.isCall());
1029:       assertFalse(node0.isWhile());
1030:       assertFalse(node0.hasMoreThanOneChild());
1031:       assertFalse(node0.isRegExp());
1032:       assertFalse(node0.isDebugger());
1033:       assertFalse(node0.isTry());
1034:       assertFalse(node0.isReturn());
1035:       assertFalse(node0.isBlock());
1036:       assertFalse(node0.isFor());
1037:       assertFalse(node0.isIf());
1038:       assertFalse(node0.isNE());
1039:       assertEquals((-1), node0.getSourcePosition());
1040:       assertEquals((-1), node0.getLineno());
1041:       assertFalse(node0.isContinue());
1042:       assertFalse(node0.isFunction());
1043:       assertFalse(node0.isIn());
1044:       assertFalse(node0.isSetterDef());
1045:       assertFalse(node0.isInc());
1046:       assertFalse(node1.isIn());
1047:       assertFalse(node1.isNE());
1048:       assertFalse(node1.isGetterDef());
1049:       assertFalse(node1.isString());
1050:       assertFalse(node1.isCase());
1051:       assertFalse(node1.isEmpty());
1052:       assertFalse(node1.isInc());
1053:       assertFalse(node1.isTry());
1054:       assertFalse(node1.isFor());
1055:       assertFalse(node1.isTrue());
1056:       assertFalse(node1.isHook());
1057:       assertFalse(node1.isDelProp());
1058:       assertFalse(node1.isBreak());
1059:       assertFalse(node1.isIf());
1060:       assertFalse(node1.isRegExp());
1061:       assertFalse(node1.isVoid());
1062:       assertFalse(node1.isCatch());
1063:       assertFalse(node1.isObjectLit());
1064:       assertFalse(node1.isAnd());
1065:       assertFalse(node1.isComma());
1066:       assertFalse(node1.isNot());
1067:       assertFalse(node1.isGetProp());
1068:       assertEquals((-241), node1.getType());
1069:       assertFalse(node1.isSetterDef());
1070:       assertFalse(node1.isDebugger());
1071:       assertFalse(node1.isThrow());
1072:       assertFalse(node1.isFunction());
1073:       assertFalse(node1.isFalse());
1074:       assertFalse(node1.isContinue());
1075:       assertFalse(node1.isCast());
1076:       assertEquals((-1), node1.getLineno());
1077:       assertFalse(node1.isAssignAdd());
1078:       assertFalse(node1.isOr());
1079:       assertFalse(node1.hasMoreThanOneChild());
1080:       assertFalse(node1.isLabel());
1081:       assertFalse(node1.isReturn());
1082:       assertEquals((-1), node1.getSourcePosition());
1083:       assertFalse(node1.isWhile());
1084:       assertFalse(node1.isDo());
1085:       assertFalse(node1.isNumber());
1086:       assertFalse(node1.isNew());
1087:       assertFalse(node1.isAdd());
1088:       assertFalse(node1.hasOneChild());
1089:       assertFalse(node1.isBlock());
1090:       assertFalse(node1.hasChildren());
1091:       assertFalse(node1.isDec());
1092:       assertFalse(node1.isAssign());
1093:       assertFalse(node1.isWith());
1094:       assertFalse(node1.isTypeOf());
1095:       assertFalse(node1.isName());
1096:       assertFalse(node1.isExprResult());
1097:       assertFalse(node1.isCall());
1098:       assertFalse(node1.isGetElem());
1099:       assertEquals(0, node1.getChildCount());
1100:       assertFalse(node1.isInstanceOf());
1101:       assertFalse(node1.isParamList());
1102:       assertFalse(node1.isNull());
1103:       assertFalse(node1.isThis());
1104:       assertFalse(node1.isDefaultCase());
1105:       assertFalse(node1.isScript());
1106:       assertEquals((-1), node1.getCharno());
1107:       assertFalse(node1.isStringKey());
1108:       assertFalse(node1.isVar());
1109:       assertFalse(node1.isLabelName());
1110:       assertFalse(node1.isSwitch());
1111:       assertFalse(node1.isArrayLit());
1112:       assertFalse(node2.isInc());
1113:       assertEquals((-1), node2.getCharno());
1114:       assertFalse(node2.isSwitch());
1115:       assertFalse(node2.isHook());
1116:       assertFalse(node2.isFalse());
1117:       assertFalse(node2.isBreak());
1118:       assertFalse(node2.isComma());
1119:       assertFalse(node2.isThis());
1120:       assertFalse(node2.isGetProp());
1121:       assertFalse(node2.isGetterDef());
1122:       assertFalse(node2.isFor());
1123:       assertFalse(node2.isCase());
1124:       assertFalse(node2.isObjectLit());
1125:       assertFalse(node2.isNot());
1126:       assertFalse(node2.isString());
1127:       assertFalse(node2.isScript());
1128:       assertFalse(node2.isExprResult());
1129:       assertFalse(node2.isTrue());
1130:       assertFalse(node2.isVoid());
1131:       assertFalse(node2.isDefaultCase());
1132:       assertFalse(node2.isArrayLit());
1133:       assertFalse(node2.isAssign());
1134:       assertFalse(node2.isLabelName());
1135:       assertEquals(0, node2.getChildCount());
1136:       assertFalse(node2.isGetElem());
1137:       assertFalse(node2.isOr());
1138:       assertFalse(node2.isDelProp());
1139:       assertFalse(node2.isAssignAdd());
1140:       assertFalse(node2.isLabel());
1141:       assertFalse(node2.isNull());
1142:       assertFalse(node2.isDo());
1143:       assertFalse(node2.isAdd());
1144:       assertFalse(node2.isEmpty());
1145:       assertFalse(node2.isNew());
1146:       assertFalse(node2.isWhile());
1147:       assertFalse(node2.isBlock());
1148:       assertFalse(node2.isVar());
1149:       assertFalse(node2.isCall());
1150:       assertFalse(node2.isContinue());
1151:       assertFalse(node2.hasMoreThanOneChild());
1152:       assertFalse(node2.isName());
1153:       assertEquals((-1), node2.getLineno());
1154:       assertFalse(node2.isParamList());
1155:       assertFalse(node2.isDec());
1156:       assertEquals((-1), node2.getSourcePosition());
1157:       assertFalse(node2.isNumber());
1158:       assertFalse(node2.isTypeOf());
1159:       assertFalse(node2.isReturn());
1160:       assertFalse(node2.hasChildren());
1161:       assertFalse(node2.isStringKey());
1162:       assertFalse(node2.hasOneChild());
1163:       assertFalse(node2.isFunction());
1164:       assertFalse(node2.isDebugger());
1165:       assertFalse(node2.isTry());
1166:       assertFalse(node2.isRegExp());
1167:       assertFalse(node2.isCatch());
1168:       assertFalse(node2.isAnd());
1169:       assertFalse(node2.isWith());
1170:       assertFalse(node2.isInstanceOf());
1171:       assertFalse(node2.isCast());
1172:       assertFalse(node2.isSetterDef());
1173:       assertFalse(node2.isIf());
1174:       assertFalse(node2.isThrow());
1175:       assertFalse(node2.isNE());
1176:       assertFalse(node2.isIn());
1177:       assertEquals((-241), node2.getType());
1178:       assertNotSame(node0, node1);
1179:       assertNotSame(node0, node2);
1180:       assertNotSame(node1, node0);
1181:       assertSame(node1, node2);
1182:       assertNotSame(node2, node0);
1183:       assertSame(node2, node1);
1184:       
1185:       boolean boolean3 = node1.isSyntheticBlock();
1186:       assertFalse(boolean3);
1187:       assertFalse(node1.equals((Object)node0));
1188:       assertTrue(boolean3 == boolean0);
1189:       assertTrue(boolean3 == boolean2);
1190:       assertTrue(boolean3 == boolean1);
1191:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1192:       assertEquals(50, Node.FREE_CALL);
1193:       assertEquals(8, Node.FLAG_NO_THROWS);
1194:       assertEquals(39, Node.EMPTY_BLOCK);
1195:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1196:       assertEquals(40, Node.ORIGINALNAME_PROP);
1197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1198:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1199:       assertEquals(30, Node.VAR_ARGS_NAME);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(43, Node.IS_CONSTANT_NAME);
1202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1203:       assertEquals(46, Node.IS_NAMESPACE);
1204:       assertEquals(54, Node.SLASH_V);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1207:       assertEquals(37, Node.OPT_ARG_NAME);
1208:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1209:       assertEquals(29, Node.JSDOC_INFO_PROP);
1210:       assertEquals(32, Node.INCRDECR_PROP);
1211:       assertEquals(2, Node.POST_FLAG);
1212:       assertEquals(47, Node.IS_DISPATCHER);
1213:       assertEquals(12, Node.COLUMN_BITS);
1214:       assertEquals(57, Node.LAST_PROP);
1215:       assertEquals(49, Node.DIRECT_EVAL);
1216:       assertEquals(55, Node.INFERRED_FUNCTION);
1217:       assertEquals(4095, Node.COLUMN_MASK);
1218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1220:       assertEquals(53, Node.INPUT_ID);
1221:       assertEquals(52, Node.LENGTH);
1222:       assertEquals(48, Node.DIRECTIVES);
1223:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1224:       assertEquals(36, Node.QUOTED_PROP);
1225:       assertEquals(56, Node.CHANGE_TIME);
1226:       assertEquals(57, Node.REFLECTED_OBJECT);
1227:       assertFalse(node1.isIn());
1228:       assertFalse(node1.isNE());
1229:       assertFalse(node1.isGetterDef());
1230:       assertFalse(node1.isString());
1231:       assertFalse(node1.isCase());
1232:       assertFalse(node1.isEmpty());
1233:       assertFalse(node1.isInc());
1234:       assertFalse(node1.isTry());
1235:       assertFalse(node1.isFor());
1236:       assertFalse(node1.isTrue());
1237:       assertFalse(node1.isHook());
1238:       assertFalse(node1.isDelProp());
1239:       assertFalse(node1.isBreak());
1240:       assertFalse(node1.isIf());
1241:       assertFalse(node1.isRegExp());
1242:       assertFalse(node1.isVoid());
1243:       assertFalse(node1.isCatch());
1244:       assertFalse(node1.isObjectLit());
1245:       assertFalse(node1.isAnd());
1246:       assertFalse(node1.isComma());
1247:       assertFalse(node1.isNot());
1248:       assertFalse(node1.isGetProp());
1249:       assertEquals((-241), node1.getType());
1250:       assertFalse(node1.isSetterDef());
1251:       assertFalse(node1.isDebugger());
1252:       assertFalse(node1.isThrow());
1253:       assertFalse(node1.isFunction());
1254:       assertFalse(node1.isFalse());
1255:       assertFalse(node1.isContinue());
1256:       assertFalse(node1.isCast());
1257:       assertEquals((-1), node1.getLineno());
1258:       assertFalse(node1.isAssignAdd());
1259:       assertFalse(node1.isOr());
1260:       assertFalse(node1.hasMoreThanOneChild());
1261:       assertFalse(node1.isLabel());
1262:       assertFalse(node1.isReturn());
1263:       assertEquals((-1), node1.getSourcePosition());
1264:       assertFalse(node1.isWhile());
1265:       assertFalse(node1.isDo());
1266:       assertFalse(node1.isNumber());
1267:       assertFalse(node1.isNew());
1268:       assertFalse(node1.isAdd());
1269:       assertFalse(node1.hasOneChild());
1270:       assertFalse(node1.isBlock());
1271:       assertFalse(node1.hasChildren());
1272:       assertFalse(node1.isDec());
1273:       assertFalse(node1.isAssign());
1274:       assertFalse(node1.isWith());
1275:       assertFalse(node1.isTypeOf());
1276:       assertFalse(node1.isName());
1277:       assertFalse(node1.isExprResult());
1278:       assertFalse(node1.isCall());
1279:       assertFalse(node1.isGetElem());
1280:       assertEquals(0, node1.getChildCount());
1281:       assertFalse(node1.isInstanceOf());
1282:       assertFalse(node1.isParamList());
1283:       assertFalse(node1.isNull());
1284:       assertFalse(node1.isThis());
1285:       assertFalse(node1.isDefaultCase());
1286:       assertFalse(node1.isScript());
1287:       assertEquals((-1), node1.getCharno());
1288:       assertFalse(node1.isStringKey());
1289:       assertFalse(node1.isVar());
1290:       assertFalse(node1.isLabelName());
1291:       assertFalse(node1.isSwitch());
1292:       assertFalse(node1.isArrayLit());
1293:       assertNotSame(node1, node0);
1294:       assertSame(node1, node2);
1295:       
1296:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
1297:       assertNotNull(node_FileLevelJsDocBuilder0);
1298:       assertFalse(node0.equals((Object)node1));
1299:       assertFalse(node0.equals((Object)node2));
1300:       assertFalse(node1.equals((Object)node0));
1301:       assertFalse(node2.equals((Object)node0));
1302:       assertEquals(53, Node.INPUT_ID);
1303:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1307:       assertEquals(55, Node.INFERRED_FUNCTION);
1308:       assertEquals(43, Node.IS_CONSTANT_NAME);
1309:       assertEquals(56, Node.CHANGE_TIME);
1310:       assertEquals(36, Node.QUOTED_PROP);
1311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1312:       assertEquals(8, Node.FLAG_NO_THROWS);
1313:       assertEquals(39, Node.EMPTY_BLOCK);
1314:       assertEquals(40, Node.ORIGINALNAME_PROP);
1315:       assertEquals(47, Node.IS_DISPATCHER);
1316:       assertEquals(2, Node.POST_FLAG);
1317:       assertEquals(30, Node.VAR_ARGS_NAME);
1318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1319:       assertEquals(54, Node.SLASH_V);
1320:       assertEquals(52, Node.LENGTH);
1321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1322:       assertEquals(57, Node.LAST_PROP);
1323:       assertEquals(49, Node.DIRECT_EVAL);
1324:       assertEquals(50, Node.FREE_CALL);
1325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1327:       assertEquals(57, Node.REFLECTED_OBJECT);
1328:       assertEquals(46, Node.IS_NAMESPACE);
1329:       assertEquals(48, Node.DIRECTIVES);
1330:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1331:       assertEquals(32, Node.INCRDECR_PROP);
1332:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1333:       assertEquals(37, Node.OPT_ARG_NAME);
1334:       assertEquals(1, Node.DECR_FLAG);
1335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1336:       assertEquals(4095, Node.COLUMN_MASK);
1337:       assertEquals(12, Node.COLUMN_BITS);
1338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1339:       assertEquals(50, Node.FREE_CALL);
1340:       assertEquals(8, Node.FLAG_NO_THROWS);
1341:       assertEquals(39, Node.EMPTY_BLOCK);
1342:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1343:       assertEquals(40, Node.ORIGINALNAME_PROP);
1344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1345:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1346:       assertEquals(30, Node.VAR_ARGS_NAME);
1347:       assertEquals(1, Node.DECR_FLAG);
1348:       assertEquals(43, Node.IS_CONSTANT_NAME);
1349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1350:       assertEquals(46, Node.IS_NAMESPACE);
1351:       assertEquals(54, Node.SLASH_V);
1352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1354:       assertEquals(37, Node.OPT_ARG_NAME);
1355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1356:       assertEquals(29, Node.JSDOC_INFO_PROP);
1357:       assertEquals(32, Node.INCRDECR_PROP);
1358:       assertEquals(2, Node.POST_FLAG);
1359:       assertEquals(47, Node.IS_DISPATCHER);
1360:       assertEquals(12, Node.COLUMN_BITS);
1361:       assertEquals(57, Node.LAST_PROP);
1362:       assertEquals(49, Node.DIRECT_EVAL);
1363:       assertEquals(55, Node.INFERRED_FUNCTION);
1364:       assertEquals(4095, Node.COLUMN_MASK);
1365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1367:       assertEquals(53, Node.INPUT_ID);
1368:       assertEquals(52, Node.LENGTH);
1369:       assertEquals(48, Node.DIRECTIVES);
1370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1371:       assertEquals(36, Node.QUOTED_PROP);
1372:       assertEquals(56, Node.CHANGE_TIME);
1373:       assertEquals(57, Node.REFLECTED_OBJECT);
1374:       assertEquals(4095, Node.COLUMN_MASK);
1375:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1376:       assertEquals(55, Node.INFERRED_FUNCTION);
1377:       assertEquals(43, Node.IS_CONSTANT_NAME);
1378:       assertEquals(36, Node.QUOTED_PROP);
1379:       assertEquals(8, Node.FLAG_NO_THROWS);
1380:       assertEquals(48, Node.DIRECTIVES);
1381:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1382:       assertEquals(57, Node.REFLECTED_OBJECT);
1383:       assertEquals(29, Node.JSDOC_INFO_PROP);
1384:       assertEquals(53, Node.INPUT_ID);
1385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1386:       assertEquals(52, Node.LENGTH);
1387:       assertEquals(40, Node.ORIGINALNAME_PROP);
1388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(57, Node.LAST_PROP);
1391:       assertEquals(47, Node.IS_DISPATCHER);
1392:       assertEquals(2, Node.POST_FLAG);
1393:       assertEquals(30, Node.VAR_ARGS_NAME);
1394:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1396:       assertEquals(12, Node.COLUMN_BITS);
1397:       assertEquals(32, Node.INCRDECR_PROP);
1398:       assertEquals(1, Node.DECR_FLAG);
1399:       assertEquals(37, Node.OPT_ARG_NAME);
1400:       assertEquals(49, Node.DIRECT_EVAL);
1401:       assertEquals(46, Node.IS_NAMESPACE);
1402:       assertEquals(54, Node.SLASH_V);
1403:       assertEquals(56, Node.CHANGE_TIME);
1404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1406:       assertEquals(50, Node.FREE_CALL);
1407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1410:       assertFalse(node0.isFalse());
1411:       assertFalse(node0.isThrow());
1412:       assertFalse(node0.isHook());
1413:       assertFalse(node0.isThis());
1414:       assertFalse(node0.isComma());
1415:       assertFalse(node0.isInstanceOf());
1416:       assertFalse(node0.isSwitch());
1417:       assertFalse(node0.isBreak());
1418:       assertFalse(node0.isWith());
1419:       assertFalse(node0.isNot());
1420:       assertFalse(node0.isAnd());
1421:       assertFalse(node0.isString());
1422:       assertFalse(node0.isObjectLit());
1423:       assertEquals((-1), node0.getCharno());
1424:       assertFalse(node0.isScript());
1425:       assertFalse(node0.isGetProp());
1426:       assertFalse(node0.hasOneChild());
1427:       assertFalse(node0.isCase());
1428:       assertFalse(node0.isAssign());
1429:       assertFalse(node0.isLabelName());
1430:       assertFalse(node0.isEmpty());
1431:       assertFalse(node0.isDelProp());
1432:       assertFalse(node0.isGetElem());
1433:       assertTrue(node0.isCast());
1434:       assertFalse(node0.isNumber());
1435:       assertFalse(node0.isTypeOf());
1436:       assertFalse(node0.isDec());
1437:       assertFalse(node0.hasChildren());
1438:       assertFalse(node0.isGetterDef());
1439:       assertFalse(node0.isExprResult());
1440:       assertFalse(node0.isVoid());
1441:       assertFalse(node0.isArrayLit());
1442:       assertFalse(node0.isDo());
1443:       assertFalse(node0.isDefaultCase());
1444:       assertFalse(node0.isTrue());
1445:       assertEquals(0, node0.getChildCount());
1446:       assertFalse(node0.isAssignAdd());
1447:       assertFalse(node0.isLabel());
1448:       assertFalse(node0.isOr());
1449:       assertFalse(node0.isAdd());
1450:       assertFalse(node0.isNew());
1451:       assertFalse(node0.isName());
1452:       assertFalse(node0.isStringKey());
1453:       assertFalse(node0.isVar());
1454:       assertFalse(node0.isNull());
1455:       assertFalse(node0.isParamList());
1456:       assertFalse(node0.isCatch());
1457:       assertEquals(155, node0.getType());
1458:       assertFalse(node0.isCall());
1459:       assertFalse(node0.isWhile());
1460:       assertFalse(node0.hasMoreThanOneChild());
1461:       assertFalse(node0.isRegExp());
1462:       assertFalse(node0.isDebugger());
1463:       assertFalse(node0.isTry());
1464:       assertFalse(node0.isReturn());
1465:       assertFalse(node0.isBlock());
1466:       assertFalse(node0.isFor());
1467:       assertFalse(node0.isIf());
1468:       assertFalse(node0.isNE());
1469:       assertEquals((-1), node0.getSourcePosition());
1470:       assertEquals((-1), node0.getLineno());
1471:       assertFalse(node0.isContinue());
1472:       assertFalse(node0.isFunction());
1473:       assertFalse(node0.isIn());
1474:       assertFalse(node0.isSetterDef());
1475:       assertFalse(node0.isInc());
1476:       assertFalse(node1.isIn());
1477:       assertFalse(node1.isNE());
1478:       assertFalse(node1.isGetterDef());
1479:       assertFalse(node1.isString());
1480:       assertFalse(node1.isCase());
1481:       assertFalse(node1.isEmpty());
1482:       assertFalse(node1.isInc());
1483:       assertFalse(node1.isTry());
1484:       assertFalse(node1.isFor());
1485:       assertFalse(node1.isTrue());
1486:       assertFalse(node1.isHook());
1487:       assertFalse(node1.isDelProp());
1488:       assertFalse(node1.isBreak());
1489:       assertFalse(node1.isIf());
1490:       assertFalse(node1.isRegExp());
1491:       assertFalse(node1.isVoid());
1492:       assertFalse(node1.isCatch());
1493:       assertFalse(node1.isObjectLit());
1494:       assertFalse(node1.isAnd());
1495:       assertFalse(node1.isComma());
1496:       assertFalse(node1.isNot());
1497:       assertFalse(node1.isGetProp());
1498:       assertEquals((-241), node1.getType());
1499:       assertFalse(node1.isSetterDef());
1500:       assertFalse(node1.isDebugger());
1501:       assertFalse(node1.isThrow());
1502:       assertFalse(node1.isFunction());
1503:       assertFalse(node1.isFalse());
1504:       assertFalse(node1.isContinue());
1505:       assertFalse(node1.isCast());
1506:       assertEquals((-1), node1.getLineno());
1507:       assertFalse(node1.isAssignAdd());
1508:       assertFalse(node1.isOr());
1509:       assertFalse(node1.hasMoreThanOneChild());
1510:       assertFalse(node1.isLabel());
1511:       assertFalse(node1.isReturn());
1512:       assertEquals((-1), node1.getSourcePosition());
1513:       assertFalse(node1.isWhile());
1514:       assertFalse(node1.isDo());
1515:       assertFalse(node1.isNumber());
1516:       assertFalse(node1.isNew());
1517:       assertFalse(node1.isAdd());
1518:       assertFalse(node1.hasOneChild());
1519:       assertFalse(node1.isBlock());
1520:       assertFalse(node1.hasChildren());
1521:       assertFalse(node1.isDec());
1522:       assertFalse(node1.isAssign());
1523:       assertFalse(node1.isWith());
1524:       assertFalse(node1.isTypeOf());
1525:       assertFalse(node1.isName());
1526:       assertFalse(node1.isExprResult());
1527:       assertFalse(node1.isCall());
1528:       assertFalse(node1.isGetElem());
1529:       assertEquals(0, node1.getChildCount());
1530:       assertFalse(node1.isInstanceOf());
1531:       assertFalse(node1.isParamList());
1532:       assertFalse(node1.isNull());
1533:       assertFalse(node1.isThis());
1534:       assertFalse(node1.isDefaultCase());
1535:       assertFalse(node1.isScript());
1536:       assertEquals((-1), node1.getCharno());
1537:       assertFalse(node1.isStringKey());
1538:       assertFalse(node1.isVar());
1539:       assertFalse(node1.isLabelName());
1540:       assertFalse(node1.isSwitch());
1541:       assertFalse(node1.isArrayLit());
1542:       assertFalse(node2.isInc());
1543:       assertEquals((-1), node2.getCharno());
1544:       assertFalse(node2.isSwitch());
1545:       assertFalse(node2.isHook());
1546:       assertFalse(node2.isFalse());
1547:       assertFalse(node2.isBreak());
1548:       assertFalse(node2.isComma());
1549:       assertFalse(node2.isThis());
1550:       assertFalse(node2.isGetProp());
1551:       assertFalse(node2.isGetterDef());
1552:       assertFalse(node2.isFor());
1553:       assertFalse(node2.isCase());
1554:       assertFalse(node2.isObjectLit());
1555:       assertFalse(node2.isNot());
1556:       assertFalse(node2.isString());
1557:       assertFalse(node2.isScript());
1558:       assertFalse(node2.isExprResult());
1559:       assertFalse(node2.isTrue());
1560:       assertFalse(node2.isVoid());
1561:       assertFalse(node2.isDefaultCase());
1562:       assertFalse(node2.isArrayLit());
1563:       assertFalse(node2.isAssign());
1564:       assertFalse(node2.isLabelName());
1565:       assertEquals(0, node2.getChildCount());
1566:       assertFalse(node2.isGetElem());
1567:       assertFalse(node2.isOr());
1568:       assertFalse(node2.isDelProp());
1569:       assertFalse(node2.isAssignAdd());
1570:       assertFalse(node2.isLabel());
1571:       assertFalse(node2.isNull());
1572:       assertFalse(node2.isDo());
1573:       assertFalse(node2.isAdd());
1574:       assertFalse(node2.isEmpty());
1575:       assertFalse(node2.isNew());
1576:       assertFalse(node2.isWhile());
1577:       assertFalse(node2.isBlock());
1578:       assertFalse(node2.isVar());
1579:       assertFalse(node2.isCall());
1580:       assertFalse(node2.isContinue());
1581:       assertFalse(node2.hasMoreThanOneChild());
1582:       assertFalse(node2.isName());
1583:       assertEquals((-1), node2.getLineno());
1584:       assertFalse(node2.isParamList());
1585:       assertFalse(node2.isDec());
1586:       assertEquals((-1), node2.getSourcePosition());
1587:       assertFalse(node2.isNumber());
1588:       assertFalse(node2.isTypeOf());
1589:       assertFalse(node2.isReturn());
1590:       assertFalse(node2.hasChildren());
1591:       assertFalse(node2.isStringKey());
1592:       assertFalse(node2.hasOneChild());
1593:       assertFalse(node2.isFunction());
1594:       assertFalse(node2.isDebugger());
1595:       assertFalse(node2.isTry());
1596:       assertFalse(node2.isRegExp());
1597:       assertFalse(node2.isCatch());
1598:       assertFalse(node2.isAnd());
1599:       assertFalse(node2.isWith());
1600:       assertFalse(node2.isInstanceOf());
1601:       assertFalse(node2.isCast());
1602:       assertFalse(node2.isSetterDef());
1603:       assertFalse(node2.isIf());
1604:       assertFalse(node2.isThrow());
1605:       assertFalse(node2.isNE());
1606:       assertFalse(node2.isIn());
1607:       assertEquals((-241), node2.getType());
1608:       
1609:       node_FileLevelJsDocBuilder0.append("");
1610:       assertFalse(node0.equals((Object)node1));
1611:       assertFalse(node0.equals((Object)node2));
1612:       assertFalse(node1.equals((Object)node0));
1613:       assertFalse(node2.equals((Object)node0));
1614:       assertEquals(53, Node.INPUT_ID);
1615:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1616:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1617:       assertEquals(29, Node.JSDOC_INFO_PROP);
1618:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1619:       assertEquals(55, Node.INFERRED_FUNCTION);
1620:       assertEquals(43, Node.IS_CONSTANT_NAME);
1621:       assertEquals(56, Node.CHANGE_TIME);
1622:       assertEquals(36, Node.QUOTED_PROP);
1623:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1624:       assertEquals(8, Node.FLAG_NO_THROWS);
1625:       assertEquals(39, Node.EMPTY_BLOCK);
1626:       assertEquals(40, Node.ORIGINALNAME_PROP);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(2, Node.POST_FLAG);
1629:       assertEquals(30, Node.VAR_ARGS_NAME);
1630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1631:       assertEquals(54, Node.SLASH_V);
1632:       assertEquals(52, Node.LENGTH);
1633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1634:       assertEquals(57, Node.LAST_PROP);
1635:       assertEquals(49, Node.DIRECT_EVAL);
1636:       assertEquals(50, Node.FREE_CALL);
1637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1638:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1639:       assertEquals(57, Node.REFLECTED_OBJECT);
1640:       assertEquals(46, Node.IS_NAMESPACE);
1641:       assertEquals(48, Node.DIRECTIVES);
1642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1643:       assertEquals(32, Node.INCRDECR_PROP);
1644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1645:       assertEquals(37, Node.OPT_ARG_NAME);
1646:       assertEquals(1, Node.DECR_FLAG);
1647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1648:       assertEquals(4095, Node.COLUMN_MASK);
1649:       assertEquals(12, Node.COLUMN_BITS);
1650:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1651:       assertEquals(50, Node.FREE_CALL);
1652:       assertEquals(8, Node.FLAG_NO_THROWS);
1653:       assertEquals(39, Node.EMPTY_BLOCK);
1654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1655:       assertEquals(40, Node.ORIGINALNAME_PROP);
1656:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1657:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1658:       assertEquals(30, Node.VAR_ARGS_NAME);
1659:       assertEquals(1, Node.DECR_FLAG);
1660:       assertEquals(43, Node.IS_CONSTANT_NAME);
1661:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1662:       assertEquals(46, Node.IS_NAMESPACE);
1663:       assertEquals(54, Node.SLASH_V);
1664:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1666:       assertEquals(37, Node.OPT_ARG_NAME);
1667:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1668:       assertEquals(29, Node.JSDOC_INFO_PROP);
1669:       assertEquals(32, Node.INCRDECR_PROP);
1670:       assertEquals(2, Node.POST_FLAG);
1671:       assertEquals(47, Node.IS_DISPATCHER);
1672:       assertEquals(12, Node.COLUMN_BITS);
1673:       assertEquals(57, Node.LAST_PROP);
1674:       assertEquals(49, Node.DIRECT_EVAL);
1675:       assertEquals(55, Node.INFERRED_FUNCTION);
1676:       assertEquals(4095, Node.COLUMN_MASK);
1677:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1679:       assertEquals(53, Node.INPUT_ID);
1680:       assertEquals(52, Node.LENGTH);
1681:       assertEquals(48, Node.DIRECTIVES);
1682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1683:       assertEquals(36, Node.QUOTED_PROP);
1684:       assertEquals(56, Node.CHANGE_TIME);
1685:       assertEquals(57, Node.REFLECTED_OBJECT);
1686:       assertEquals(4095, Node.COLUMN_MASK);
1687:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1688:       assertEquals(55, Node.INFERRED_FUNCTION);
1689:       assertEquals(43, Node.IS_CONSTANT_NAME);
1690:       assertEquals(36, Node.QUOTED_PROP);
1691:       assertEquals(8, Node.FLAG_NO_THROWS);
1692:       assertEquals(48, Node.DIRECTIVES);
1693:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1694:       assertEquals(57, Node.REFLECTED_OBJECT);
1695:       assertEquals(29, Node.JSDOC_INFO_PROP);
1696:       assertEquals(53, Node.INPUT_ID);
1697:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1698:       assertEquals(52, Node.LENGTH);
1699:       assertEquals(40, Node.ORIGINALNAME_PROP);
1700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1701:       assertEquals(39, Node.EMPTY_BLOCK);
1702:       assertEquals(57, Node.LAST_PROP);
1703:       assertEquals(47, Node.IS_DISPATCHER);
1704:       assertEquals(2, Node.POST_FLAG);
1705:       assertEquals(30, Node.VAR_ARGS_NAME);
1706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1707:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1708:       assertEquals(12, Node.COLUMN_BITS);
1709:       assertEquals(32, Node.INCRDECR_PROP);
1710:       assertEquals(1, Node.DECR_FLAG);
1711:       assertEquals(37, Node.OPT_ARG_NAME);
1712:       assertEquals(49, Node.DIRECT_EVAL);
1713:       assertEquals(46, Node.IS_NAMESPACE);
1714:       assertEquals(54, Node.SLASH_V);
1715:       assertEquals(56, Node.CHANGE_TIME);
1716:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1717:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1718:       assertEquals(50, Node.FREE_CALL);
1719:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1722:       assertFalse(node0.isFalse());
1723:       assertFalse(node0.isThrow());
1724:       assertFalse(node0.isHook());
1725:       assertFalse(node0.isThis());
1726:       assertFalse(node0.isComma());
1727:       assertFalse(node0.isInstanceOf());
1728:       assertFalse(node0.isSwitch());
1729:       assertFalse(node0.isBreak());
1730:       assertFalse(node0.isWith());
1731:       assertFalse(node0.isNot());
1732:       assertFalse(node0.isAnd());
1733:       assertFalse(node0.isString());
1734:       assertFalse(node0.isObjectLit());
1735:       assertEquals((-1), node0.getCharno());
1736:       assertFalse(node0.isScript());
1737:       assertFalse(node0.isGetProp());
1738:       assertFalse(node0.hasOneChild());
1739:       assertFalse(node0.isCase());
1740:       assertFalse(node0.isAssign());
1741:       assertFalse(node0.isLabelName());
1742:       assertFalse(node0.isEmpty());
1743:       assertFalse(node0.isDelProp());
1744:       assertFalse(node0.isGetElem());
1745:       assertTrue(node0.isCast());
1746:       assertFalse(node0.isNumber());
1747:       assertFalse(node0.isTypeOf());
1748:       assertFalse(node0.isDec());
1749:       assertFalse(node0.hasChildren());
1750:       assertFalse(node0.isGetterDef());
1751:       assertFalse(node0.isExprResult());
1752:       assertFalse(node0.isVoid());
1753:       assertFalse(node0.isArrayLit());
1754:       assertFalse(node0.isDo());
1755:       assertFalse(node0.isDefaultCase());
1756:       assertFalse(node0.isTrue());
1757:       assertEquals(0, node0.getChildCount());
1758:       assertFalse(node0.isAssignAdd());
1759:       assertFalse(node0.isLabel());
1760:       assertFalse(node0.isOr());
1761:       assertFalse(node0.isAdd());
1762:       assertFalse(node0.isNew());
1763:       assertFalse(node0.isName());
1764:       assertFalse(node0.isStringKey());
1765:       assertFalse(node0.isVar());
1766:       assertFalse(node0.isNull());
1767:       assertFalse(node0.isParamList());
1768:       assertFalse(node0.isCatch());
1769:       assertEquals(155, node0.getType());
1770:       assertFalse(node0.isCall());
1771:       assertFalse(node0.isWhile());
1772:       assertFalse(node0.hasMoreThanOneChild());
1773:       assertFalse(node0.isRegExp());
1774:       assertFalse(node0.isDebugger());
1775:       assertFalse(node0.isTry());
1776:       assertFalse(node0.isReturn());
1777:       assertFalse(node0.isBlock());
1778:       assertFalse(node0.isFor());
1779:       assertFalse(node0.isIf());
1780:       assertFalse(node0.isNE());
1781:       assertEquals((-1), node0.getSourcePosition());
1782:       assertEquals((-1), node0.getLineno());
1783:       assertFalse(node0.isContinue());
1784:       assertFalse(node0.isFunction());
1785:       assertFalse(node0.isIn());
1786:       assertFalse(node0.isSetterDef());
1787:       assertFalse(node0.isInc());
1788:       assertFalse(node1.isIn());
1789:       assertFalse(node1.isNE());
1790:       assertFalse(node1.isGetterDef());
1791:       assertFalse(node1.isString());
1792:       assertFalse(node1.isCase());
1793:       assertFalse(node1.isEmpty());
1794:       assertFalse(node1.isInc());
1795:       assertFalse(node1.isTry());
1796:       assertFalse(node1.isFor());
1797:       assertFalse(node1.isTrue());
1798:       assertFalse(node1.isHook());
1799:       assertFalse(node1.isDelProp());
1800:       assertFalse(node1.isBreak());
1801:       assertFalse(node1.isIf());
1802:       assertFalse(node1.isRegExp());
1803:       assertFalse(node1.isVoid());
1804:       assertFalse(node1.isCatch());
1805:       assertFalse(node1.isObjectLit());
1806:       assertFalse(node1.isAnd());
1807:       assertFalse(node1.isComma());
1808:       assertFalse(node1.isNot());
1809:       assertFalse(node1.isGetProp());
1810:       assertEquals((-241), node1.getType());
1811:       assertFalse(node1.isSetterDef());
1812:       assertFalse(node1.isDebugger());
1813:       assertFalse(node1.isThrow());
1814:       assertFalse(node1.isFunction());
1815:       assertFalse(node1.isFalse());
1816:       assertFalse(node1.isContinue());
1817:       assertFalse(node1.isCast());
1818:       assertEquals((-1), node1.getLineno());
1819:       assertFalse(node1.isAssignAdd());
1820:       assertFalse(node1.isOr());
1821:       assertFalse(node1.hasMoreThanOneChild());
1822:       assertFalse(node1.isLabel());
1823:       assertFalse(node1.isReturn());
1824:       assertEquals((-1), node1.getSourcePosition());
1825:       assertFalse(node1.isWhile());
1826:       assertFalse(node1.isDo());
1827:       assertFalse(node1.isNumber());
1828:       assertFalse(node1.isNew());
1829:       assertFalse(node1.isAdd());
1830:       assertFalse(node1.hasOneChild());
1831:       assertFalse(node1.isBlock());
1832:       assertFalse(node1.hasChildren());
1833:       assertFalse(node1.isDec());
1834:       assertFalse(node1.isAssign());
1835:       assertFalse(node1.isWith());
1836:       assertFalse(node1.isTypeOf());
1837:       assertFalse(node1.isName());
1838:       assertFalse(node1.isExprResult());
1839:       assertFalse(node1.isCall());
1840:       assertFalse(node1.isGetElem());
1841:       assertEquals(0, node1.getChildCount());
1842:       assertFalse(node1.isInstanceOf());
1843:       assertFalse(node1.isParamList());
1844:       assertFalse(node1.isNull());
1845:       assertFalse(node1.isThis());
1846:       assertFalse(node1.isDefaultCase());
1847:       assertFalse(node1.isScript());
1848:       assertEquals((-1), node1.getCharno());
1849:       assertFalse(node1.isStringKey());
1850:       assertFalse(node1.isVar());
1851:       assertFalse(node1.isLabelName());
1852:       assertFalse(node1.isSwitch());
1853:       assertFalse(node1.isArrayLit());
1854:       assertFalse(node2.isInc());
1855:       assertEquals((-1), node2.getCharno());
1856:       assertFalse(node2.isSwitch());
1857:       assertFalse(node2.isHook());
1858:       assertFalse(node2.isFalse());
1859:       assertFalse(node2.isBreak());
1860:       assertFalse(node2.isComma());
1861:       assertFalse(node2.isThis());
1862:       assertFalse(node2.isGetProp());
1863:       assertFalse(node2.isGetterDef());
1864:       assertFalse(node2.isFor());
1865:       assertFalse(node2.isCase());
1866:       assertFalse(node2.isObjectLit());
1867:       assertFalse(node2.isNot());
1868:       assertFalse(node2.isString());
1869:       assertFalse(node2.isScript());
1870:       assertFalse(node2.isExprResult());
1871:       assertFalse(node2.isTrue());
1872:       assertFalse(node2.isVoid());
1873:       assertFalse(node2.isDefaultCase());
1874:       assertFalse(node2.isArrayLit());
1875:       assertFalse(node2.isAssign());
1876:       assertFalse(node2.isLabelName());
1877:       assertEquals(0, node2.getChildCount());
1878:       assertFalse(node2.isGetElem());
1879:       assertFalse(node2.isOr());
1880:       assertFalse(node2.isDelProp());
1881:       assertFalse(node2.isAssignAdd());
1882:       assertFalse(node2.isLabel());
1883:       assertFalse(node2.isNull());
1884:       assertFalse(node2.isDo());
1885:       assertFalse(node2.isAdd());
1886:       assertFalse(node2.isEmpty());
1887:       assertFalse(node2.isNew());
1888:       assertFalse(node2.isWhile());
1889:       assertFalse(node2.isBlock());
1890:       assertFalse(node2.isVar());
1891:       assertFalse(node2.isCall());
1892:       assertFalse(node2.isContinue());
1893:       assertFalse(node2.hasMoreThanOneChild());
1894:       assertFalse(node2.isName());
1895:       assertEquals((-1), node2.getLineno());
1896:       assertFalse(node2.isParamList());
1897:       assertFalse(node2.isDec());
1898:       assertEquals((-1), node2.getSourcePosition());
1899:       assertFalse(node2.isNumber());
1900:       assertFalse(node2.isTypeOf());
1901:       assertFalse(node2.isReturn());
1902:       assertFalse(node2.hasChildren());
1903:       assertFalse(node2.isStringKey());
1904:       assertFalse(node2.hasOneChild());
1905:       assertFalse(node2.isFunction());
1906:       assertFalse(node2.isDebugger());
1907:       assertFalse(node2.isTry());
1908:       assertFalse(node2.isRegExp());
1909:       assertFalse(node2.isCatch());
1910:       assertFalse(node2.isAnd());
1911:       assertFalse(node2.isWith());
1912:       assertFalse(node2.isInstanceOf());
1913:       assertFalse(node2.isCast());
1914:       assertFalse(node2.isSetterDef());
1915:       assertFalse(node2.isIf());
1916:       assertFalse(node2.isThrow());
1917:       assertFalse(node2.isNE());
1918:       assertFalse(node2.isIn());
1919:       assertEquals((-241), node2.getType());
1920:       assertNotSame(node0, node1);
1921:       assertNotSame(node0, node2);
1922:       assertNotSame(node1, node0);
1923:       assertSame(node1, node2);
1924:       assertNotSame(node2, node0);
1925:       assertSame(node2, node1);
1926:       
1927:       boolean boolean4 = node2.wasEmptyNode();
1928:       assertFalse(boolean4);
1929:       assertFalse(node0.equals((Object)node1));
1930:       assertFalse(node0.equals((Object)node2));
1931:       assertFalse(node1.equals((Object)node0));
1932:       assertFalse(node2.equals((Object)node0));
1933:       assertTrue(boolean4 == boolean2);
1934:       assertTrue(boolean4 == boolean3);
1935:       assertTrue(boolean4 == boolean0);
1936:       assertTrue(boolean4 == boolean1);
1937:       assertEquals(53, Node.INPUT_ID);
1938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1940:       assertEquals(29, Node.JSDOC_INFO_PROP);
1941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1942:       assertEquals(55, Node.INFERRED_FUNCTION);
1943:       assertEquals(43, Node.IS_CONSTANT_NAME);
1944:       assertEquals(56, Node.CHANGE_TIME);
1945:       assertEquals(36, Node.QUOTED_PROP);
1946:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1947:       assertEquals(8, Node.FLAG_NO_THROWS);
1948:       assertEquals(39, Node.EMPTY_BLOCK);
1949:       assertEquals(40, Node.ORIGINALNAME_PROP);
1950:       assertEquals(47, Node.IS_DISPATCHER);
1951:       assertEquals(2, Node.POST_FLAG);
1952:       assertEquals(30, Node.VAR_ARGS_NAME);
1953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1954:       assertEquals(54, Node.SLASH_V);
1955:       assertEquals(52, Node.LENGTH);
1956:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1957:       assertEquals(57, Node.LAST_PROP);
1958:       assertEquals(49, Node.DIRECT_EVAL);
1959:       assertEquals(50, Node.FREE_CALL);
1960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1961:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1962:       assertEquals(57, Node.REFLECTED_OBJECT);
1963:       assertEquals(46, Node.IS_NAMESPACE);
1964:       assertEquals(48, Node.DIRECTIVES);
1965:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1966:       assertEquals(32, Node.INCRDECR_PROP);
1967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1968:       assertEquals(37, Node.OPT_ARG_NAME);
1969:       assertEquals(1, Node.DECR_FLAG);
1970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1971:       assertEquals(4095, Node.COLUMN_MASK);
1972:       assertEquals(12, Node.COLUMN_BITS);
1973:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1974:       assertEquals(50, Node.FREE_CALL);
1975:       assertEquals(8, Node.FLAG_NO_THROWS);
1976:       assertEquals(39, Node.EMPTY_BLOCK);
1977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1978:       assertEquals(40, Node.ORIGINALNAME_PROP);
1979:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1980:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1981:       assertEquals(30, Node.VAR_ARGS_NAME);
1982:       assertEquals(1, Node.DECR_FLAG);
1983:       assertEquals(43, Node.IS_CONSTANT_NAME);
1984:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1985:       assertEquals(46, Node.IS_NAMESPACE);
1986:       assertEquals(54, Node.SLASH_V);
1987:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1988:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1989:       assertEquals(37, Node.OPT_ARG_NAME);
1990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1991:       assertEquals(29, Node.JSDOC_INFO_PROP);
1992:       assertEquals(32, Node.INCRDECR_PROP);
1993:       assertEquals(2, Node.POST_FLAG);
1994:       assertEquals(47, Node.IS_DISPATCHER);
1995:       assertEquals(12, Node.COLUMN_BITS);
1996:       assertEquals(57, Node.LAST_PROP);
1997:       assertEquals(49, Node.DIRECT_EVAL);
1998:       assertEquals(55, Node.INFERRED_FUNCTION);
1999:       assertEquals(4095, Node.COLUMN_MASK);
2000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2001:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2002:       assertEquals(53, Node.INPUT_ID);
2003:       assertEquals(52, Node.LENGTH);
2004:       assertEquals(48, Node.DIRECTIVES);
2005:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2006:       assertEquals(36, Node.QUOTED_PROP);
2007:       assertEquals(56, Node.CHANGE_TIME);
2008:       assertEquals(57, Node.REFLECTED_OBJECT);
2009:       assertEquals(4095, Node.COLUMN_MASK);
2010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2011:       assertEquals(55, Node.INFERRED_FUNCTION);
2012:       assertEquals(43, Node.IS_CONSTANT_NAME);
2013:       assertEquals(36, Node.QUOTED_PROP);
2014:       assertEquals(8, Node.FLAG_NO_THROWS);
2015:       assertEquals(48, Node.DIRECTIVES);
2016:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2017:       assertEquals(57, Node.REFLECTED_OBJECT);
2018:       assertEquals(29, Node.JSDOC_INFO_PROP);
2019:       assertEquals(53, Node.INPUT_ID);
2020:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2021:       assertEquals(52, Node.LENGTH);
2022:       assertEquals(40, Node.ORIGINALNAME_PROP);
2023:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2024:       assertEquals(39, Node.EMPTY_BLOCK);
2025:       assertEquals(57, Node.LAST_PROP);
2026:       assertEquals(47, Node.IS_DISPATCHER);
2027:       assertEquals(2, Node.POST_FLAG);
2028:       assertEquals(30, Node.VAR_ARGS_NAME);
2029:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2030:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2031:       assertEquals(12, Node.COLUMN_BITS);
2032:       assertEquals(32, Node.INCRDECR_PROP);
2033:       assertEquals(1, Node.DECR_FLAG);
2034:       assertEquals(37, Node.OPT_ARG_NAME);
2035:       assertEquals(49, Node.DIRECT_EVAL);
2036:       assertEquals(46, Node.IS_NAMESPACE);
2037:       assertEquals(54, Node.SLASH_V);
2038:       assertEquals(56, Node.CHANGE_TIME);
2039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2041:       assertEquals(50, Node.FREE_CALL);
2042:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2044:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2045:       assertFalse(node0.isFalse());
2046:       assertFalse(node0.isThrow());
2047:       assertFalse(node0.isHook());
2048:       assertFalse(node0.isThis());
2049:       assertFalse(node0.isComma());
2050:       assertFalse(node0.isInstanceOf());
2051:       assertFalse(node0.isSwitch());
2052:       assertFalse(node0.isBreak());
2053:       assertFalse(node0.isWith());
2054:       assertFalse(node0.isNot());
2055:       assertFalse(node0.isAnd());
2056:       assertFalse(node0.isString());
2057:       assertFalse(node0.isObjectLit());
2058:       assertEquals((-1), node0.getCharno());
2059:       assertFalse(node0.isScript());
2060:       assertFalse(node0.isGetProp());
2061:       assertFalse(node0.hasOneChild());
2062:       assertFalse(node0.isCase());
2063:       assertFalse(node0.isAssign());
2064:       assertFalse(node0.isLabelName());
2065:       assertFalse(node0.isEmpty());
2066:       assertFalse(node0.isDelProp());
2067:       assertFalse(node0.isGetElem());
2068:       assertTrue(node0.isCast());
2069:       assertFalse(node0.isNumber());
2070:       assertFalse(node0.isTypeOf());
2071:       assertFalse(node0.isDec());
2072:       assertFalse(node0.hasChildren());
2073:       assertFalse(node0.isGetterDef());
2074:       assertFalse(node0.isExprResult());
2075:       assertFalse(node0.isVoid());
2076:       assertFalse(node0.isArrayLit());
2077:       assertFalse(node0.isDo());
2078:       assertFalse(node0.isDefaultCase());
2079:       assertFalse(node0.isTrue());
2080:       assertEquals(0, node0.getChildCount());
2081:       assertFalse(node0.isAssignAdd());
2082:       assertFalse(node0.isLabel());
2083:       assertFalse(node0.isOr());
2084:       assertFalse(node0.isAdd());
2085:       assertFalse(node0.isNew());
2086:       assertFalse(node0.isName());
2087:       assertFalse(node0.isStringKey());
2088:       assertFalse(node0.isVar());
2089:       assertFalse(node0.isNull());
2090:       assertFalse(node0.isParamList());
2091:       assertFalse(node0.isCatch());
2092:       assertEquals(155, node0.getType());
2093:       assertFalse(node0.isCall());
2094:       assertFalse(node0.isWhile());
2095:       assertFalse(node0.hasMoreThanOneChild());
2096:       assertFalse(node0.isRegExp());
2097:       assertFalse(node0.isDebugger());
2098:       assertFalse(node0.isTry());
2099:       assertFalse(node0.isReturn());
2100:       assertFalse(node0.isBlock());
2101:       assertFalse(node0.isFor());
2102:       assertFalse(node0.isIf());
2103:       assertFalse(node0.isNE());
2104:       assertEquals((-1), node0.getSourcePosition());
2105:       assertEquals((-1), node0.getLineno());
2106:       assertFalse(node0.isContinue());
2107:       assertFalse(node0.isFunction());
2108:       assertFalse(node0.isIn());
2109:       assertFalse(node0.isSetterDef());
2110:       assertFalse(node0.isInc());
2111:       assertFalse(node1.isIn());
2112:       assertFalse(node1.isNE());
2113:       assertFalse(node1.isGetterDef());
2114:       assertFalse(node1.isString());
2115:       assertFalse(node1.isCase());
2116:       assertFalse(node1.isEmpty());
2117:       assertFalse(node1.isInc());
2118:       assertFalse(node1.isTry());
2119:       assertFalse(node1.isFor());
2120:       assertFalse(node1.isTrue());
2121:       assertFalse(node1.isHook());
2122:       assertFalse(node1.isDelProp());
2123:       assertFalse(node1.isBreak());
2124:       assertFalse(node1.isIf());
2125:       assertFalse(node1.isRegExp());
2126:       assertFalse(node1.isVoid());
2127:       assertFalse(node1.isCatch());
2128:       assertFalse(node1.isObjectLit());
2129:       assertFalse(node1.isAnd());
2130:       assertFalse(node1.isComma());
2131:       assertFalse(node1.isNot());
2132:       assertFalse(node1.isGetProp());
2133:       assertEquals((-241), node1.getType());
2134:       assertFalse(node1.isSetterDef());
2135:       assertFalse(node1.isDebugger());
2136:       assertFalse(node1.isThrow());
2137:       assertFalse(node1.isFunction());
2138:       assertFalse(node1.isFalse());
2139:       assertFalse(node1.isContinue());
2140:       assertFalse(node1.isCast());
2141:       assertEquals((-1), node1.getLineno());
2142:       assertFalse(node1.isAssignAdd());
2143:       assertFalse(node1.isOr());
2144:       assertFalse(node1.hasMoreThanOneChild());
2145:       assertFalse(node1.isLabel());
2146:       assertFalse(node1.isReturn());
2147:       assertEquals((-1), node1.getSourcePosition());
2148:       assertFalse(node1.isWhile());
2149:       assertFalse(node1.isDo());
2150:       assertFalse(node1.isNumber());
2151:       assertFalse(node1.isNew());
2152:       assertFalse(node1.isAdd());
2153:       assertFalse(node1.hasOneChild());
2154:       assertFalse(node1.isBlock());
2155:       assertFalse(node1.hasChildren());
2156:       assertFalse(node1.isDec());
2157:       assertFalse(node1.isAssign());
2158:       assertFalse(node1.isWith());
2159:       assertFalse(node1.isTypeOf());
2160:       assertFalse(node1.isName());
2161:       assertFalse(node1.isExprResult());
2162:       assertFalse(node1.isCall());
2163:       assertFalse(node1.isGetElem());
2164:       assertEquals(0, node1.getChildCount());
2165:       assertFalse(node1.isInstanceOf());
2166:       assertFalse(node1.isParamList());
2167:       assertFalse(node1.isNull());
2168:       assertFalse(node1.isThis());
2169:       assertFalse(node1.isDefaultCase());
2170:       assertFalse(node1.isScript());
2171:       assertEquals((-1), node1.getCharno());
2172:       assertFalse(node1.isStringKey());
2173:       assertFalse(node1.isVar());
2174:       assertFalse(node1.isLabelName());
2175:       assertFalse(node1.isSwitch());
2176:       assertFalse(node1.isArrayLit());
2177:       assertFalse(node2.isInc());
2178:       assertEquals((-1), node2.getCharno());
2179:       assertFalse(node2.isSwitch());
2180:       assertFalse(node2.isHook());
2181:       assertFalse(node2.isFalse());
2182:       assertFalse(node2.isBreak());
2183:       assertFalse(node2.isComma());
2184:       assertFalse(node2.isThis());
2185:       assertFalse(node2.isGetProp());
2186:       assertFalse(node2.isGetterDef());
2187:       assertFalse(node2.isFor());
2188:       assertFalse(node2.isCase());
2189:       assertFalse(node2.isObjectLit());
2190:       assertFalse(node2.isNot());
2191:       assertFalse(node2.isString());
2192:       assertFalse(node2.isScript());
2193:       assertFalse(node2.isExprResult());
2194:       assertFalse(node2.isTrue());
2195:       assertFalse(node2.isVoid());
2196:       assertFalse(node2.isDefaultCase());
2197:       assertFalse(node2.isArrayLit());
2198:       assertFalse(node2.isAssign());
2199:       assertFalse(node2.isLabelName());
2200:       assertEquals(0, node2.getChildCount());
2201:       assertFalse(node2.isGetElem());
2202:       assertFalse(node2.isOr());
2203:       assertFalse(node2.isDelProp());
2204:       assertFalse(node2.isAssignAdd());
2205:       assertFalse(node2.isLabel());
2206:       assertFalse(node2.isNull());
2207:       assertFalse(node2.isDo());
2208:       assertFalse(node2.isAdd());
2209:       assertFalse(node2.isEmpty());
2210:       assertFalse(node2.isNew());
2211:       assertFalse(node2.isWhile());
2212:       assertFalse(node2.isBlock());
2213:       assertFalse(node2.isVar());
2214:       assertFalse(node2.isCall());
2215:       assertFalse(node2.isContinue());
2216:       assertFalse(node2.hasMoreThanOneChild());
2217:       assertFalse(node2.isName());
2218:       assertEquals((-1), node2.getLineno());
2219:       assertFalse(node2.isParamList());
2220:       assertFalse(node2.isDec());
2221:       assertEquals((-1), node2.getSourcePosition());
2222:       assertFalse(node2.isNumber());
2223:       assertFalse(node2.isTypeOf());
2224:       assertFalse(node2.isReturn());
2225:       assertFalse(node2.hasChildren());
2226:       assertFalse(node2.isStringKey());
2227:       assertFalse(node2.hasOneChild());
2228:       assertFalse(node2.isFunction());
2229:       assertFalse(node2.isDebugger());
2230:       assertFalse(node2.isTry());
2231:       assertFalse(node2.isRegExp());
2232:       assertFalse(node2.isCatch());
2233:       assertFalse(node2.isAnd());
2234:       assertFalse(node2.isWith());
2235:       assertFalse(node2.isInstanceOf());
2236:       assertFalse(node2.isCast());
2237:       assertFalse(node2.isSetterDef());
2238:       assertFalse(node2.isIf());
2239:       assertFalse(node2.isThrow());
2240:       assertFalse(node2.isNE());
2241:       assertFalse(node2.isIn());
2242:       assertEquals((-241), node2.getType());
2243:       assertNotSame(node0, node1);
2244:       assertNotSame(node0, node2);
2245:       assertNotSame(node1, node0);
2246:       assertSame(node1, node2);
2247:       assertNotSame(node2, node0);
2248:       assertSame(node2, node1);
2249:       
2250:       boolean boolean5 = node0.isCatch();
2251:       assertFalse(boolean5);
2252:       assertFalse(node0.equals((Object)node1));
2253:       assertFalse(node0.equals((Object)node2));
2254:       assertTrue(boolean5 == boolean3);
2255:       assertTrue(boolean5 == boolean1);
2256:       assertTrue(boolean5 == boolean0);
2257:       assertTrue(boolean5 == boolean2);
2258:       assertTrue(boolean5 == boolean4);
2259:       assertEquals(53, Node.INPUT_ID);
2260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2262:       assertEquals(29, Node.JSDOC_INFO_PROP);
2263:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2264:       assertEquals(55, Node.INFERRED_FUNCTION);
2265:       assertEquals(43, Node.IS_CONSTANT_NAME);
2266:       assertEquals(56, Node.CHANGE_TIME);
2267:       assertEquals(36, Node.QUOTED_PROP);
2268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2269:       assertEquals(8, Node.FLAG_NO_THROWS);
2270:       assertEquals(39, Node.EMPTY_BLOCK);
2271:       assertEquals(40, Node.ORIGINALNAME_PROP);
2272:       assertEquals(47, Node.IS_DISPATCHER);
2273:       assertEquals(2, Node.POST_FLAG);
2274:       assertEquals(30, Node.VAR_ARGS_NAME);
2275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2276:       assertEquals(54, Node.SLASH_V);
2277:       assertEquals(52, Node.LENGTH);
2278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2279:       assertEquals(57, Node.LAST_PROP);
2280:       assertEquals(49, Node.DIRECT_EVAL);
2281:       assertEquals(50, Node.FREE_CALL);
2282:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2284:       assertEquals(57, Node.REFLECTED_OBJECT);
2285:       assertEquals(46, Node.IS_NAMESPACE);
2286:       assertEquals(48, Node.DIRECTIVES);
2287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2288:       assertEquals(32, Node.INCRDECR_PROP);
2289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2290:       assertEquals(37, Node.OPT_ARG_NAME);
2291:       assertEquals(1, Node.DECR_FLAG);
2292:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2293:       assertEquals(4095, Node.COLUMN_MASK);
2294:       assertEquals(12, Node.COLUMN_BITS);
2295:       assertFalse(node0.isFalse());
2296:       assertFalse(node0.isThrow());
2297:       assertFalse(node0.isHook());
2298:       assertFalse(node0.isThis());
2299:       assertFalse(node0.isComma());
2300:       assertFalse(node0.isInstanceOf());
2301:       assertFalse(node0.isSwitch());
2302:       assertFalse(node0.isBreak());
2303:       assertFalse(node0.isWith());
2304:       assertFalse(node0.isNot());
2305:       assertFalse(node0.isAnd());
2306:       assertFalse(node0.isString());
2307:       assertFalse(node0.isObjectLit());
2308:       assertEquals((-1), node0.getCharno());
2309:       assertFalse(node0.isScript());
2310:       assertFalse(node0.isGetProp());
2311:       assertFalse(node0.hasOneChild());
2312:       assertFalse(node0.isCase());
2313:       assertFalse(node0.isAssign());
2314:       assertFalse(node0.isLabelName());
2315:       assertFalse(node0.isEmpty());
2316:       assertFalse(node0.isDelProp());
2317:       assertFalse(node0.isGetElem());
2318:       assertTrue(node0.isCast());
2319:       assertFalse(node0.isNumber());
2320:       assertFalse(node0.isTypeOf());
2321:       assertFalse(node0.isDec());
2322:       assertFalse(node0.hasChildren());
2323:       assertFalse(node0.isGetterDef());
2324:       assertFalse(node0.isExprResult());
2325:       assertFalse(node0.isVoid());
2326:       assertFalse(node0.isArrayLit());
2327:       assertFalse(node0.isDo());
2328:       assertFalse(node0.isDefaultCase());
2329:       assertFalse(node0.isTrue());
2330:       assertEquals(0, node0.getChildCount());
2331:       assertFalse(node0.isAssignAdd());
2332:       assertFalse(node0.isLabel());
2333:       assertFalse(node0.isOr());
2334:       assertFalse(node0.isAdd());
2335:       assertFalse(node0.isNew());
2336:       assertFalse(node0.isName());
2337:       assertFalse(node0.isStringKey());
2338:       assertFalse(node0.isVar());
2339:       assertFalse(node0.isNull());
2340:       assertFalse(node0.isParamList());
2341:       assertFalse(node0.isCatch());
2342:       assertEquals(155, node0.getType());
2343:       assertFalse(node0.isCall());
2344:       assertFalse(node0.isWhile());
2345:       assertFalse(node0.hasMoreThanOneChild());
2346:       assertFalse(node0.isRegExp());
2347:       assertFalse(node0.isDebugger());
2348:       assertFalse(node0.isTry());
2349:       assertFalse(node0.isReturn());
2350:       assertFalse(node0.isBlock());
2351:       assertFalse(node0.isFor());
2352:       assertFalse(node0.isIf());
2353:       assertFalse(node0.isNE());
2354:       assertEquals((-1), node0.getSourcePosition());
2355:       assertEquals((-1), node0.getLineno());
2356:       assertFalse(node0.isContinue());
2357:       assertFalse(node0.isFunction());
2358:       assertFalse(node0.isIn());
2359:       assertFalse(node0.isSetterDef());
2360:       assertFalse(node0.isInc());
2361:       assertNotSame(node0, node1);
2362:       assertNotSame(node0, node2);
2363:   }
2364: }
RegularFileObject[/tmp/EvoSuite_140_1628161071814/com/google/javascript/rhino/Node_140_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_140_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_140_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_140_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.jstype.NamedType",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.Node$AncestorIterable$1",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.javascript.rhino.jstype.TernaryValue",
343:       "com.google.javascript.rhino.jstype.JSType$2",
344:       "com.google.javascript.rhino.jstype.JSType$TypePair",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.jstype.NamespaceType",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2"
362:     );
363:   }
364: }

[MASTER] 10:57:52.287 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(155, "");
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

boolean boolean0 = node0.getBooleanProp(155);
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

boolean boolean1 = node0.isThrow();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

boolean boolean2 = node0.isAnd();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(iterable0.contains(node0));

node0.setQuotedString();
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());

Node node1 = Node.newString((-241), "", (-3203), 117);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertNotSame(node1, node0);

int int0 = node1.getChangeTime();
assertEquals(0, int0);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertNotSame(node1, node0);

Node node2 = node1.srcref(node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertEquals((-241), node2.getType());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertNotSame(node2, node0);
assertSame(node2, node1);

boolean boolean3 = node1.isSyntheticBlock();
assertFalse(boolean3);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertNotSame(node1, node0);
assertSame(node1, node2);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertEquals((-241), node2.getType());

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertEquals((-241), node2.getType());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertNotSame(node2, node0);
assertSame(node2, node1);

boolean boolean4 = node2.wasEmptyNode();
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertEquals((-241), node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertEquals((-241), node2.getType());
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertNotSame(node2, node0);
assertSame(node2, node1);

boolean boolean5 = node0.isCatch();
assertFalse(boolean5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertTrue(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertNotSame(node0, node1);
assertNotSame(node0, node2);


[MASTER] 10:58:17.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:18.227 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:18.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:18.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:18.924 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:19.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:19.428 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:19.657 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:19.865 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/23
* Done!

* Computation finished
