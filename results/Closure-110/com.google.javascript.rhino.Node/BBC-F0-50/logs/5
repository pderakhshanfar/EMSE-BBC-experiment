* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14418
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2085678232
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:34.606 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:45:53.879 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:46:10.863 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 415
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1589
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 2199
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 2199
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 2199
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 2199
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1986
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 23
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1114
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 57
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 16569
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 2199
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 17285
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1589
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 4687
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 4687
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 15008
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 214
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 3267
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 134
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 12616
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 159
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 134
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 134
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 5248
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3667
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 3598
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 17630
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 79
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 356
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - true: 168
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1654
Number of times BBC is called for com.google.javascript.rhino.Node.putProp(ILjava/lang/Object;)V: I8 Branch 108 IFNULL L846 - false: 80
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5210
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2032
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 879
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 3823
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 3823
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1300
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 785
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 23770
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 672
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 672
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 672
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2534
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 345
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 5592
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 3970
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 8178
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 141
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 452
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3941
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 39943
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 915
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 785
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 1271
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 19057
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 134
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 19279
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 4373
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 785
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 5627
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 91
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7881
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 2349
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 2457
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 5037
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 532
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 31561
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 447
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 3161
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 9520
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 4264
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 7028
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 3970
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 134
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 86654
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 81984
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2990
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 23107
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 4369
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 5037
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2990
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 658
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 260
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4378
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 785
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1503
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 498
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 582
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 12580
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: Line 1881: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 257
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 3321
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 16731
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 3321
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 2152
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.createProp(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 863: 216
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 3823
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 57
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 974
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1113
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 40
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 415
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 708
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 2832
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 7475
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 22454
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7475
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 43
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 711
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 415
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 117
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 745
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 2832
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 43
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 117
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 559
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 216
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 216
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 2832
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 216
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 532
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 5834
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5313
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 3564
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 3564
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 3564
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 3564
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 5521
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 47
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 19169
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 216
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 216
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1821
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 658
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 5694
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1086
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 57
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 4548
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 4743
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 785
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 3519
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 3651
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 14
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 25822
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 630
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 428
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 2824
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 13
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 750
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 12743
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 270
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4197
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 4197
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 514
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 6120
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 53
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 11821
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 11821
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 216
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 532
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 216
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 19688
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 216
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 308
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 750
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 1431
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 315
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 308
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 2605
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 915
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 815
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 915
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 8402
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3101
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 2045
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 33361
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 47
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 915
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 4330
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: Line 2174: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 4551
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 3651
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2997
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 31
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 3547
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 134
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1260
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 908
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 915
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 12659
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 40505
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 2997
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 205
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 5093
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 5093
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 216
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 2671
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 216
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 216
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 6982
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 216
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 658
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 2045
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2100
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 134
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 16769
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 953
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 37
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 5330
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7211
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 8653
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 38533
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 2572
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 8653
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 8653
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 19356
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 1048
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 532
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2032
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2032
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 11249
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 11249
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 16759
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 16950
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 415
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 704
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 11130
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 415
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 10583
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 93586
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 415
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 3255
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 915
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 303: 216
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 1048
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 302: 216
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 658
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 658
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 7278
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 1635
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 134
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 301: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 5794
Number of times BBC is called for com.google.javascript.rhino.Node.createProp(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 658
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 3564
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 658
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 10383
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 308
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 589
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 658
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 658
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 308
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 7522
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 454
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 915
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 32
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 11850
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 915
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 156
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 3152
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 156
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 156
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 4888
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 156
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 2484
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 14505
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 156
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 47
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 1451
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 415
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 4260
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 134
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3673
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 645
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 3878
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 789
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1777: 117
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 2997
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 308
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1779: 117
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 451
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1778: 117
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 2362
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 46741
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2025
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 2832
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 1788
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 438
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 6660
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 7007
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 785
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 92658
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 308
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 2832
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 915
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 2349
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 915
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 2032
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 5305
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 915
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 915
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 308
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 356
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 14935
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 8432
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 785
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 415
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 5557
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 1339
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 81984
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 658
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 6539
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 32912
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 13425
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 96608
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 93586
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 134
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 5372
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3645
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getNext()Lcom/google/javascript/rhino/Node$PropListItem;: Line 286: 308
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 15318
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 3651
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 2322
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 308
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 134
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1591
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 532
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 360
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 192
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 86654
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 216
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 214
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 81984
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 14179
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 8167
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1509
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 308
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 422
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 915
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 8402
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 532
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 532
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 532
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 46326
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 4687
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 5724
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 5592
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 915
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 15465
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 2319
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 86654
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 3970
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 81984
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 5422
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 532
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 96608
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 785
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 4687
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 37
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1309
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 92658
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1309
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 2938
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 159
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 96608
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getNext()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 308
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 3552
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 5379
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 415
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1734
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 308
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 3514
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 5231
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 39493
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 1175
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 1242
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 454
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 47
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3793
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 785
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 796
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 1536
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 9595
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 658
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 3651
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 3161
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 19169
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 12481
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 438
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 415
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 3568
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 23
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 915
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 3823
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 11005
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 3849
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 13989
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 4420
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 308
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 1746
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 648
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 2110
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 81984
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 47
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 2572
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 3482
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2349
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 14343
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 3018
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 92
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 915
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 5380
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 2799
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 17457
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 15387
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 15452
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 16519
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 785
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 5685
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 3321
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 321
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 16452
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 464
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1589
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 15745
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 345
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 5557
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 32
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 3823
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - false: 18
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 32
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 139
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 915
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 5163
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 915
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false: 21
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 3010
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 915
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2349
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 216
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 610
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 915
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 216
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 216
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 415
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 5669
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 15295
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1885
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 4420
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6179
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 4420
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 134
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 750
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 648
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 815
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 156
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 16521
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 4330
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 47
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 586
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 2916
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 2669
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1309
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 38533
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4197
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 22530
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 532
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 532
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 17530
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 134
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 134
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 134
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 1746
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 47
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 720
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1309
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 26350
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 186
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3214
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 31
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 216
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 216
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 216
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 440
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 532
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 576
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 4598
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 216
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 532
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 415
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 532
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 532
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 156
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 993: 34
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 415
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 893
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 989: 34
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 992: 34
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 985: 34
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 987: 34
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 1667
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 81984
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 134
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 1214
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 33130
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 658
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 915
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 22756
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 32538
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 23780
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1479
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 6120
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 19866
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1589
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 4687
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 216
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 6575
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 216
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 160
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 3267
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 2508
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 156
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 21507
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 620
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 308
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 17184
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 3823
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 6986
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1746
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 28801
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 7241
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 36379
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 415
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 5380
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 8974
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 3255
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1261
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 1048
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 1357
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 216
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1746
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 15759
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3548
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 96608
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 238
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 5781
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 23
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 216
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4066
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 718
Number of times BBC is called in total: 6130724
* Search finished after 604s and 561 generations, 251317 statements, best individual has fitness: 2799.0
* Minimizing test suite
[MASTER] 09:56:57.576 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 801
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 618
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2257
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 578
* Generated 784 tests with total length 10175
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:58:03.274 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66895% of time used, but only 51/784 tests minimized), falling back to using all assertions
[MASTER] 09:58:23.161 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 09:58:32.238 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 09:58:43.200 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_120_1628157523008/com/google/javascript/rhino/Node_120_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_120_1628157523008/com/google/javascript/rhino/Node_120_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:43.200 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:43.200 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:43.206 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1017
[MASTER] 09:58:43.208 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_120_1628157523008/com/google/javascript/rhino/Node_120_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_120_tmp__ESTest extends Node_120_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
24:       assertTrue(boolean0);
25:       
26:       boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
27:       assertFalse(boolean1);
28:       assertFalse(boolean1 == boolean0);
29:       
30:       Node node0 = Node.newString((-4823), "LrB ]VIYQ r,b");
31:       assertNotNull(node0);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
34:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(32, Node.INCRDECR_PROP);
39:       assertEquals(46, Node.IS_NAMESPACE);
40:       assertEquals(51, Node.STATIC_SOURCE_FILE);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(54, Node.SLASH_V);
43:       assertEquals(43, Node.IS_CONSTANT_NAME);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(50, Node.FREE_CALL);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(30, Node.VAR_ARGS_NAME);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(57, Node.LAST_PROP);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
58:       assertEquals(55, Node.INFERRED_FUNCTION);
59:       assertEquals(4095, Node.COLUMN_MASK);
60:       assertEquals(8, Node.FLAG_NO_THROWS);
61:       assertEquals(56, Node.CHANGE_TIME);
62:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
63:       assertEquals(49, Node.DIRECT_EVAL);
64:       assertEquals(36, Node.QUOTED_PROP);
65:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
66:       assertEquals(37, Node.OPT_ARG_NAME);
67:       assertEquals(48, Node.DIRECTIVES);
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isRegExp());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isFor());
74:       assertFalse(node0.isTry());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isDebugger());
80:       assertEquals((-1), node0.getCharno());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isStringKey());
84:       assertFalse(node0.isHook());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isSetterDef());
87:       assertFalse(node0.isInc());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isBlock());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.hasMoreThanOneChild());
92:       assertFalse(node0.isIn());
93:       assertEquals((-1), node0.getLineno());
94:       assertFalse(node0.isWith());
95:       assertFalse(node0.isCatch());
96:       assertFalse(node0.isInstanceOf());
97:       assertFalse(node0.isIf());
98:       assertFalse(node0.isNE());
99:       assertFalse(node0.hasOneChild());
100:       assertFalse(node0.isGetElem());
101:       assertFalse(node0.isExprResult());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isTypeOf());
104:       assertFalse(node0.isScript());
105:       assertFalse(node0.hasChildren());
106:       assertFalse(node0.isAssign());
107:       assertFalse(node0.isDec());
108:       assertFalse(node0.isLabel());
109:       assertFalse(node0.isReturn());
110:       assertFalse(node0.isAssignAdd());
111:       assertFalse(node0.isObjectLit());
112:       assertFalse(node0.isGetProp());
113:       assertFalse(node0.isContinue());
114:       assertEquals((-1), node0.getSourcePosition());
115:       assertFalse(node0.isNumber());
116:       assertFalse(node0.isNot());
117:       assertFalse(node0.isLabelName());
118:       assertFalse(node0.isAnd());
119:       assertFalse(node0.isVar());
120:       assertFalse(node0.isNew());
121:       assertFalse(node0.isAdd());
122:       assertFalse(node0.isCall());
123:       assertFalse(node0.isDo());
124:       assertFalse(node0.isComma());
125:       assertEquals((-4823), node0.getType());
126:       assertFalse(node0.isWhile());
127:       assertFalse(node0.isOr());
128:       assertFalse(node0.isNull());
129:       assertFalse(node0.isVoid());
130:       assertFalse(node0.isBreak());
131:       assertFalse(node0.isDelProp());
132:       assertFalse(node0.isName());
133:       assertFalse(node0.isTrue());
134:       
135:       boolean boolean2 = node0.mayMutateGlobalStateOrThrow();
136:       assertEquals(53, Node.INPUT_ID);
137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
139:       assertEquals(29, Node.JSDOC_INFO_PROP);
140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
141:       assertEquals(47, Node.IS_DISPATCHER);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(46, Node.IS_NAMESPACE);
144:       assertEquals(51, Node.STATIC_SOURCE_FILE);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(54, Node.SLASH_V);
147:       assertEquals(43, Node.IS_CONSTANT_NAME);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
150:       assertEquals(40, Node.ORIGINALNAME_PROP);
151:       assertEquals(50, Node.FREE_CALL);
152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
153:       assertEquals(52, Node.LENGTH);
154:       assertEquals(30, Node.VAR_ARGS_NAME);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(1, Node.DECR_FLAG);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(55, Node.INFERRED_FUNCTION);
163:       assertEquals(4095, Node.COLUMN_MASK);
164:       assertEquals(8, Node.FLAG_NO_THROWS);
165:       assertEquals(56, Node.CHANGE_TIME);
166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
167:       assertEquals(49, Node.DIRECT_EVAL);
168:       assertEquals(36, Node.QUOTED_PROP);
169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
170:       assertEquals(37, Node.OPT_ARG_NAME);
171:       assertEquals(48, Node.DIRECTIVES);
172:       assertFalse(node0.isArrayLit());
173:       assertFalse(node0.isEmpty());
174:       assertFalse(node0.isRegExp());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isFunction());
177:       assertFalse(node0.isFor());
178:       assertFalse(node0.isTry());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isCase());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isSwitch());
183:       assertFalse(node0.isDebugger());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isGetterDef());
186:       assertFalse(node0.isParamList());
187:       assertFalse(node0.isStringKey());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isFalse());
190:       assertFalse(node0.isSetterDef());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isThis());
193:       assertFalse(node0.isBlock());
194:       assertFalse(node0.isThrow());
195:       assertFalse(node0.hasMoreThanOneChild());
196:       assertFalse(node0.isIn());
197:       assertEquals((-1), node0.getLineno());
198:       assertFalse(node0.isWith());
199:       assertFalse(node0.isCatch());
200:       assertFalse(node0.isInstanceOf());
201:       assertFalse(node0.isIf());
202:       assertFalse(node0.isNE());
203:       assertFalse(node0.hasOneChild());
204:       assertFalse(node0.isGetElem());
205:       assertFalse(node0.isExprResult());
206:       assertFalse(node0.isCast());
207:       assertFalse(node0.isTypeOf());
208:       assertFalse(node0.isScript());
209:       assertFalse(node0.hasChildren());
210:       assertFalse(node0.isAssign());
211:       assertFalse(node0.isDec());
212:       assertFalse(node0.isLabel());
213:       assertFalse(node0.isReturn());
214:       assertFalse(node0.isAssignAdd());
215:       assertFalse(node0.isObjectLit());
216:       assertFalse(node0.isGetProp());
217:       assertFalse(node0.isContinue());
218:       assertEquals((-1), node0.getSourcePosition());
219:       assertFalse(node0.isNumber());
220:       assertFalse(node0.isNot());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isAnd());
223:       assertFalse(node0.isVar());
224:       assertFalse(node0.isNew());
225:       assertFalse(node0.isAdd());
226:       assertFalse(node0.isCall());
227:       assertFalse(node0.isDo());
228:       assertFalse(node0.isComma());
229:       assertEquals((-4823), node0.getType());
230:       assertFalse(node0.isWhile());
231:       assertFalse(node0.isOr());
232:       assertFalse(node0.isNull());
233:       assertFalse(node0.isVoid());
234:       assertFalse(node0.isBreak());
235:       assertFalse(node0.isDelProp());
236:       assertFalse(node0.isName());
237:       assertFalse(node0.isTrue());
238:       assertTrue(boolean2);
239:       assertTrue(boolean2 == boolean0);
240:       assertFalse(boolean2 == boolean1);
241:       
242:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
243:       assertNotNull(fileSystemHandling0);
244:       
245:       boolean boolean3 = node0.isSyntheticBlock();
246:       assertEquals(53, Node.INPUT_ID);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(32, Node.INCRDECR_PROP);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(54, Node.SLASH_V);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(57, Node.REFLECTED_OBJECT);
259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
260:       assertEquals(40, Node.ORIGINALNAME_PROP);
261:       assertEquals(50, Node.FREE_CALL);
262:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(30, Node.VAR_ARGS_NAME);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(39, Node.EMPTY_BLOCK);
267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
268:       assertEquals(1, Node.DECR_FLAG);
269:       assertEquals(57, Node.LAST_PROP);
270:       assertEquals(12, Node.COLUMN_BITS);
271:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
272:       assertEquals(55, Node.INFERRED_FUNCTION);
273:       assertEquals(4095, Node.COLUMN_MASK);
274:       assertEquals(8, Node.FLAG_NO_THROWS);
275:       assertEquals(56, Node.CHANGE_TIME);
276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
277:       assertEquals(49, Node.DIRECT_EVAL);
278:       assertEquals(36, Node.QUOTED_PROP);
279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
280:       assertEquals(37, Node.OPT_ARG_NAME);
281:       assertEquals(48, Node.DIRECTIVES);
282:       assertFalse(node0.isArrayLit());
283:       assertFalse(node0.isEmpty());
284:       assertFalse(node0.isRegExp());
285:       assertFalse(node0.isDefaultCase());
286:       assertFalse(node0.isFunction());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isTry());
289:       assertEquals(0, node0.getChildCount());
290:       assertFalse(node0.isCase());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.isSwitch());
293:       assertFalse(node0.isDebugger());
294:       assertEquals((-1), node0.getCharno());
295:       assertFalse(node0.isGetterDef());
296:       assertFalse(node0.isParamList());
297:       assertFalse(node0.isStringKey());
298:       assertFalse(node0.isHook());
299:       assertFalse(node0.isFalse());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isInc());
302:       assertFalse(node0.isThis());
303:       assertFalse(node0.isBlock());
304:       assertFalse(node0.isThrow());
305:       assertFalse(node0.hasMoreThanOneChild());
306:       assertFalse(node0.isIn());
307:       assertEquals((-1), node0.getLineno());
308:       assertFalse(node0.isWith());
309:       assertFalse(node0.isCatch());
310:       assertFalse(node0.isInstanceOf());
311:       assertFalse(node0.isIf());
312:       assertFalse(node0.isNE());
313:       assertFalse(node0.hasOneChild());
314:       assertFalse(node0.isGetElem());
315:       assertFalse(node0.isExprResult());
316:       assertFalse(node0.isCast());
317:       assertFalse(node0.isTypeOf());
318:       assertFalse(node0.isScript());
319:       assertFalse(node0.hasChildren());
320:       assertFalse(node0.isAssign());
321:       assertFalse(node0.isDec());
322:       assertFalse(node0.isLabel());
323:       assertFalse(node0.isReturn());
324:       assertFalse(node0.isAssignAdd());
325:       assertFalse(node0.isObjectLit());
326:       assertFalse(node0.isGetProp());
327:       assertFalse(node0.isContinue());
328:       assertEquals((-1), node0.getSourcePosition());
329:       assertFalse(node0.isNumber());
330:       assertFalse(node0.isNot());
331:       assertFalse(node0.isLabelName());
332:       assertFalse(node0.isAnd());
333:       assertFalse(node0.isVar());
334:       assertFalse(node0.isNew());
335:       assertFalse(node0.isAdd());
336:       assertFalse(node0.isCall());
337:       assertFalse(node0.isDo());
338:       assertFalse(node0.isComma());
339:       assertEquals((-4823), node0.getType());
340:       assertFalse(node0.isWhile());
341:       assertFalse(node0.isOr());
342:       assertFalse(node0.isNull());
343:       assertFalse(node0.isVoid());
344:       assertFalse(node0.isBreak());
345:       assertFalse(node0.isDelProp());
346:       assertFalse(node0.isName());
347:       assertFalse(node0.isTrue());
348:       assertFalse(boolean3);
349:       assertFalse(boolean3 == boolean0);
350:       assertFalse(boolean3 == boolean2);
351:       assertTrue(boolean3 == boolean1);
352:       
353:       byte[] byteArray0 = new byte[0];
354:       boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
355:       assertArrayEquals(new byte[] {}, byteArray0);
356:       assertEquals(0, byteArray0.length);
357:       assertFalse(boolean4);
358:       assertTrue(boolean4 == boolean3);
359:       assertFalse(boolean4 == boolean2);
360:       assertTrue(boolean4 == boolean1);
361:       assertFalse(boolean4 == boolean0);
362:       
363:       Node node1 = Node.newString("GV4*%Phq6VY", 8, 47);
364:       assertNotNull(node1);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(36, Node.QUOTED_PROP);
368:       assertEquals(55, Node.INFERRED_FUNCTION);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertEquals(53, Node.INPUT_ID);
371:       assertEquals(39, Node.EMPTY_BLOCK);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals(50, Node.FREE_CALL);
377:       assertEquals(46, Node.IS_NAMESPACE);
378:       assertEquals(40, Node.ORIGINALNAME_PROP);
379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
380:       assertEquals(57, Node.LAST_PROP);
381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
382:       assertEquals(54, Node.SLASH_V);
383:       assertEquals(30, Node.VAR_ARGS_NAME);
384:       assertEquals(51, Node.STATIC_SOURCE_FILE);
385:       assertEquals(12, Node.COLUMN_BITS);
386:       assertEquals(32, Node.INCRDECR_PROP);
387:       assertEquals(52, Node.LENGTH);
388:       assertEquals(1, Node.DECR_FLAG);
389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
390:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
392:       assertEquals(29, Node.JSDOC_INFO_PROP);
393:       assertEquals(8, Node.FLAG_NO_THROWS);
394:       assertEquals(56, Node.CHANGE_TIME);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
397:       assertEquals(4095, Node.COLUMN_MASK);
398:       assertEquals(48, Node.DIRECTIVES);
399:       assertEquals(49, Node.DIRECT_EVAL);
400:       assertEquals(37, Node.OPT_ARG_NAME);
401:       assertFalse(node1.isDebugger());
402:       assertFalse(node1.isTrue());
403:       assertFalse(node1.isFunction());
404:       assertFalse(node1.isRegExp());
405:       assertEquals(40, node1.getType());
406:       assertFalse(node1.isEmpty());
407:       assertFalse(node1.isFor());
408:       assertFalse(node1.isDefaultCase());
409:       assertFalse(node1.isTry());
410:       assertFalse(node1.isParamList());
411:       assertEquals(8, node1.getLineno());
412:       assertEquals(0, node1.getChildCount());
413:       assertFalse(node1.isGetterDef());
414:       assertFalse(node1.isArrayLit());
415:       assertFalse(node1.isStringKey());
416:       assertFalse(node1.isSwitch());
417:       assertFalse(node1.isBlock());
418:       assertFalse(node1.isInc());
419:       assertFalse(node1.isHook());
420:       assertFalse(node1.isThrow());
421:       assertFalse(node1.isCase());
422:       assertTrue(node1.isString());
423:       assertFalse(node1.isSetterDef());
424:       assertFalse(node1.isNE());
425:       assertFalse(node1.isThis());
426:       assertEquals(32815, node1.getSourcePosition());
427:       assertFalse(node1.isIn());
428:       assertFalse(node1.hasMoreThanOneChild());
429:       assertFalse(node1.isCatch());
430:       assertFalse(node1.isInstanceOf());
431:       assertFalse(node1.isIf());
432:       assertFalse(node1.isExprResult());
433:       assertFalse(node1.isScript());
434:       assertFalse(node1.isNot());
435:       assertFalse(node1.isWith());
436:       assertFalse(node1.isObjectLit());
437:       assertFalse(node1.hasOneChild());
438:       assertFalse(node1.isGetProp());
439:       assertFalse(node1.isLabel());
440:       assertFalse(node1.isFalse());
441:       assertFalse(node1.isNumber());
442:       assertFalse(node1.isCast());
443:       assertFalse(node1.isContinue());
444:       assertFalse(node1.isAnd());
445:       assertFalse(node1.isLabelName());
446:       assertFalse(node1.isAdd());
447:       assertFalse(node1.isVar());
448:       assertFalse(node1.isDo());
449:       assertFalse(node1.isAssignAdd());
450:       assertFalse(node1.isWhile());
451:       assertFalse(node1.isNew());
452:       assertFalse(node1.isComma());
453:       assertEquals(47, node1.getCharno());
454:       assertFalse(node1.hasChildren());
455:       assertFalse(node1.isNull());
456:       assertFalse(node1.isReturn());
457:       assertFalse(node1.isOr());
458:       assertFalse(node1.isAssign());
459:       assertFalse(node1.isDec());
460:       assertFalse(node1.isTypeOf());
461:       assertFalse(node1.isGetElem());
462:       assertFalse(node1.isCall());
463:       assertFalse(node1.isBreak());
464:       assertFalse(node1.isName());
465:       assertFalse(node1.isVoid());
466:       assertFalse(node1.isDelProp());
467:       assertFalse(node1.equals((Object)node0));
468:       assertNotSame(node1, node0);
469:       
470:       Node node2 = node0.copyInformationFromForTree(node1);
471:       assertNotNull(node2);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
474:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
475:       assertEquals(29, Node.JSDOC_INFO_PROP);
476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
477:       assertEquals(47, Node.IS_DISPATCHER);
478:       assertEquals(32, Node.INCRDECR_PROP);
479:       assertEquals(46, Node.IS_NAMESPACE);
480:       assertEquals(51, Node.STATIC_SOURCE_FILE);
481:       assertEquals(2, Node.POST_FLAG);
482:       assertEquals(54, Node.SLASH_V);
483:       assertEquals(43, Node.IS_CONSTANT_NAME);
484:       assertEquals(57, Node.REFLECTED_OBJECT);
485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
486:       assertEquals(40, Node.ORIGINALNAME_PROP);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
489:       assertEquals(52, Node.LENGTH);
490:       assertEquals(30, Node.VAR_ARGS_NAME);
491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
492:       assertEquals(39, Node.EMPTY_BLOCK);
493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
494:       assertEquals(1, Node.DECR_FLAG);
495:       assertEquals(57, Node.LAST_PROP);
496:       assertEquals(12, Node.COLUMN_BITS);
497:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
498:       assertEquals(55, Node.INFERRED_FUNCTION);
499:       assertEquals(4095, Node.COLUMN_MASK);
500:       assertEquals(8, Node.FLAG_NO_THROWS);
501:       assertEquals(56, Node.CHANGE_TIME);
502:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
503:       assertEquals(49, Node.DIRECT_EVAL);
504:       assertEquals(36, Node.QUOTED_PROP);
505:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
506:       assertEquals(37, Node.OPT_ARG_NAME);
507:       assertEquals(48, Node.DIRECTIVES);
508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
509:       assertEquals(43, Node.IS_CONSTANT_NAME);
510:       assertEquals(36, Node.QUOTED_PROP);
511:       assertEquals(55, Node.INFERRED_FUNCTION);
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(39, Node.EMPTY_BLOCK);
515:       assertEquals(47, Node.IS_DISPATCHER);
516:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
518:       assertEquals(2, Node.POST_FLAG);
519:       assertEquals(50, Node.FREE_CALL);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(40, Node.ORIGINALNAME_PROP);
522:       assertEquals(15, Node.NO_SIDE_EFFECTS);
523:       assertEquals(57, Node.LAST_PROP);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(30, Node.VAR_ARGS_NAME);
527:       assertEquals(51, Node.STATIC_SOURCE_FILE);
528:       assertEquals(12, Node.COLUMN_BITS);
529:       assertEquals(32, Node.INCRDECR_PROP);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(49, Node.DIRECT_EVAL);
543:       assertEquals(37, Node.OPT_ARG_NAME);
544:       assertEquals(52, Node.LENGTH);
545:       assertEquals(54, Node.SLASH_V);
546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
547:       assertEquals(57, Node.REFLECTED_OBJECT);
548:       assertEquals(57, Node.LAST_PROP);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(50, Node.FREE_CALL);
551:       assertEquals(8, Node.FLAG_NO_THROWS);
552:       assertEquals(1, Node.DECR_FLAG);
553:       assertEquals(15, Node.NO_SIDE_EFFECTS);
554:       assertEquals(39, Node.EMPTY_BLOCK);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
558:       assertEquals(47, Node.IS_DISPATCHER);
559:       assertEquals(43, Node.IS_CONSTANT_NAME);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(40, Node.ORIGINALNAME_PROP);
563:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(36, Node.QUOTED_PROP);
566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
569:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(53, Node.INPUT_ID);
572:       assertEquals(32, Node.INCRDECR_PROP);
573:       assertEquals(4095, Node.COLUMN_MASK);
574:       assertEquals(12, Node.COLUMN_BITS);
575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(49, Node.DIRECT_EVAL);
578:       assertEquals(37, Node.OPT_ARG_NAME);
579:       assertEquals(48, Node.DIRECTIVES);
580:       assertFalse(node0.isArrayLit());
581:       assertFalse(node0.isEmpty());
582:       assertFalse(node0.isRegExp());
583:       assertFalse(node0.isDefaultCase());
584:       assertFalse(node0.isFunction());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.isTry());
587:       assertEquals(0, node0.getChildCount());
588:       assertFalse(node0.isCase());
589:       assertFalse(node0.isString());
590:       assertFalse(node0.isSwitch());
591:       assertFalse(node0.isDebugger());
592:       assertFalse(node0.isGetterDef());
593:       assertFalse(node0.isParamList());
594:       assertFalse(node0.isStringKey());
595:       assertFalse(node0.isHook());
596:       assertFalse(node0.isFalse());
597:       assertFalse(node0.isSetterDef());
598:       assertFalse(node0.isInc());
599:       assertFalse(node0.isThis());
600:       assertFalse(node0.isBlock());
601:       assertEquals(8, node0.getLineno());
602:       assertFalse(node0.isThrow());
603:       assertFalse(node0.hasMoreThanOneChild());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.isWith());
606:       assertFalse(node0.isCatch());
607:       assertFalse(node0.isInstanceOf());
608:       assertEquals(32815, node0.getSourcePosition());
609:       assertFalse(node0.isIf());
610:       assertFalse(node0.isNE());
611:       assertFalse(node0.hasOneChild());
612:       assertFalse(node0.isGetElem());
613:       assertFalse(node0.isExprResult());
614:       assertFalse(node0.isCast());
615:       assertFalse(node0.isTypeOf());
616:       assertFalse(node0.isScript());
617:       assertFalse(node0.hasChildren());
618:       assertFalse(node0.isAssign());
619:       assertFalse(node0.isDec());
620:       assertFalse(node0.isLabel());
621:       assertFalse(node0.isReturn());
622:       assertFalse(node0.isAssignAdd());
623:       assertFalse(node0.isObjectLit());
624:       assertFalse(node0.isGetProp());
625:       assertFalse(node0.isContinue());
626:       assertFalse(node0.isNumber());
627:       assertFalse(node0.isNot());
628:       assertFalse(node0.isLabelName());
629:       assertFalse(node0.isAnd());
630:       assertFalse(node0.isVar());
631:       assertFalse(node0.isNew());
632:       assertFalse(node0.isAdd());
633:       assertFalse(node0.isCall());
634:       assertEquals(47, node0.getCharno());
635:       assertFalse(node0.isDo());
636:       assertFalse(node0.isComma());
637:       assertEquals((-4823), node0.getType());
638:       assertFalse(node0.isWhile());
639:       assertFalse(node0.isOr());
640:       assertFalse(node0.isNull());
641:       assertFalse(node0.isVoid());
642:       assertFalse(node0.isBreak());
643:       assertFalse(node0.isDelProp());
644:       assertFalse(node0.isName());
645:       assertFalse(node0.isTrue());
646:       assertFalse(node1.isDebugger());
647:       assertFalse(node1.isTrue());
648:       assertFalse(node1.isFunction());
649:       assertFalse(node1.isRegExp());
650:       assertEquals(40, node1.getType());
651:       assertFalse(node1.isEmpty());
652:       assertFalse(node1.isFor());
653:       assertFalse(node1.isDefaultCase());
654:       assertFalse(node1.isTry());
655:       assertFalse(node1.isParamList());
656:       assertEquals(8, node1.getLineno());
657:       assertEquals(0, node1.getChildCount());
658:       assertFalse(node1.isGetterDef());
659:       assertFalse(node1.isArrayLit());
660:       assertFalse(node1.isStringKey());
661:       assertFalse(node1.isSwitch());
662:       assertFalse(node1.isBlock());
663:       assertFalse(node1.isInc());
664:       assertFalse(node1.isHook());
665:       assertFalse(node1.isThrow());
666:       assertFalse(node1.isCase());
667:       assertTrue(node1.isString());
668:       assertFalse(node1.isSetterDef());
669:       assertFalse(node1.isNE());
670:       assertFalse(node1.isThis());
671:       assertEquals(32815, node1.getSourcePosition());
672:       assertFalse(node1.isIn());
673:       assertFalse(node1.hasMoreThanOneChild());
674:       assertFalse(node1.isCatch());
675:       assertFalse(node1.isInstanceOf());
676:       assertFalse(node1.isIf());
677:       assertFalse(node1.isExprResult());
678:       assertFalse(node1.isScript());
679:       assertFalse(node1.isNot());
680:       assertFalse(node1.isWith());
681:       assertFalse(node1.isObjectLit());
682:       assertFalse(node1.hasOneChild());
683:       assertFalse(node1.isGetProp());
684:       assertFalse(node1.isLabel());
685:       assertFalse(node1.isFalse());
686:       assertFalse(node1.isNumber());
687:       assertFalse(node1.isCast());
688:       assertFalse(node1.isContinue());
689:       assertFalse(node1.isAnd());
690:       assertFalse(node1.isLabelName());
691:       assertFalse(node1.isAdd());
692:       assertFalse(node1.isVar());
693:       assertFalse(node1.isDo());
694:       assertFalse(node1.isAssignAdd());
695:       assertFalse(node1.isWhile());
696:       assertFalse(node1.isNew());
697:       assertFalse(node1.isComma());
698:       assertEquals(47, node1.getCharno());
699:       assertFalse(node1.hasChildren());
700:       assertFalse(node1.isNull());
701:       assertFalse(node1.isReturn());
702:       assertFalse(node1.isOr());
703:       assertFalse(node1.isAssign());
704:       assertFalse(node1.isDec());
705:       assertFalse(node1.isTypeOf());
706:       assertFalse(node1.isGetElem());
707:       assertFalse(node1.isCall());
708:       assertFalse(node1.isBreak());
709:       assertFalse(node1.isName());
710:       assertFalse(node1.isVoid());
711:       assertFalse(node1.isDelProp());
712:       assertFalse(node2.isVar());
713:       assertFalse(node2.isCall());
714:       assertFalse(node2.isStringKey());
715:       assertEquals(8, node2.getLineno());
716:       assertFalse(node2.isBlock());
717:       assertFalse(node2.isSetterDef());
718:       assertFalse(node2.isWhile());
719:       assertFalse(node2.isDo());
720:       assertFalse(node2.isAdd());
721:       assertFalse(node2.isNew());
722:       assertFalse(node2.isContinue());
723:       assertFalse(node2.isLabel());
724:       assertEquals(0, node2.getChildCount());
725:       assertFalse(node2.isFunction());
726:       assertFalse(node2.isParamList());
727:       assertFalse(node2.isLabelName());
728:       assertFalse(node2.isArrayLit());
729:       assertFalse(node2.isAssign());
730:       assertFalse(node2.isDebugger());
731:       assertFalse(node2.hasChildren());
732:       assertFalse(node2.isDec());
733:       assertFalse(node2.isDefaultCase());
734:       assertFalse(node2.isAssignAdd());
735:       assertFalse(node2.isEmpty());
736:       assertFalse(node2.isOr());
737:       assertFalse(node2.isReturn());
738:       assertEquals(47, node2.getCharno());
739:       assertFalse(node2.isComma());
740:       assertFalse(node2.isNull());
741:       assertFalse(node2.isTrue());
742:       assertFalse(node2.isExprResult());
743:       assertFalse(node2.isTypeOf());
744:       assertFalse(node2.isName());
745:       assertFalse(node2.isGetElem());
746:       assertFalse(node2.isVoid());
747:       assertFalse(node2.isBreak());
748:       assertFalse(node2.isDelProp());
749:       assertFalse(node2.isHook());
750:       assertFalse(node2.isThrow());
751:       assertFalse(node2.isFalse());
752:       assertFalse(node2.isInc());
753:       assertFalse(node2.isThis());
754:       assertFalse(node2.isString());
755:       assertEquals((-4823), node2.getType());
756:       assertFalse(node2.isGetProp());
757:       assertFalse(node2.isCase());
758:       assertFalse(node2.isAnd());
759:       assertFalse(node2.isNot());
760:       assertFalse(node2.isObjectLit());
761:       assertFalse(node2.isSwitch());
762:       assertFalse(node2.isCast());
763:       assertFalse(node2.isFor());
764:       assertFalse(node2.isGetterDef());
765:       assertFalse(node2.isScript());
766:       assertFalse(node2.isNumber());
767:       assertFalse(node2.isTry());
768:       assertFalse(node2.hasOneChild());
769:       assertFalse(node2.hasMoreThanOneChild());
770:       assertFalse(node2.isIn());
771:       assertFalse(node2.isCatch());
772:       assertFalse(node2.isInstanceOf());
773:       assertFalse(node2.isWith());
774:       assertEquals(32815, node2.getSourcePosition());
775:       assertFalse(node2.isNE());
776:       assertFalse(node2.isRegExp());
777:       assertFalse(node2.isIf());
778:       assertFalse(node0.equals((Object)node1));
779:       assertFalse(node1.equals((Object)node0));
780:       assertFalse(node2.equals((Object)node1));
781:       assertNotSame(node0, node1);
782:       assertSame(node0, node2);
783:       assertNotSame(node1, node2);
784:       assertNotSame(node1, node0);
785:       assertNotSame(node2, node1);
786:       assertSame(node2, node0);
787:       
788:       boolean boolean5 = node1.isReturn();
789:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(36, Node.QUOTED_PROP);
792:       assertEquals(55, Node.INFERRED_FUNCTION);
793:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
794:       assertEquals(53, Node.INPUT_ID);
795:       assertEquals(39, Node.EMPTY_BLOCK);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
799:       assertEquals(2, Node.POST_FLAG);
800:       assertEquals(50, Node.FREE_CALL);
801:       assertEquals(46, Node.IS_NAMESPACE);
802:       assertEquals(40, Node.ORIGINALNAME_PROP);
803:       assertEquals(15, Node.NO_SIDE_EFFECTS);
804:       assertEquals(57, Node.LAST_PROP);
805:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
806:       assertEquals(54, Node.SLASH_V);
807:       assertEquals(30, Node.VAR_ARGS_NAME);
808:       assertEquals(51, Node.STATIC_SOURCE_FILE);
809:       assertEquals(12, Node.COLUMN_BITS);
810:       assertEquals(32, Node.INCRDECR_PROP);
811:       assertEquals(52, Node.LENGTH);
812:       assertEquals(1, Node.DECR_FLAG);
813:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
814:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
815:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
816:       assertEquals(29, Node.JSDOC_INFO_PROP);
817:       assertEquals(8, Node.FLAG_NO_THROWS);
818:       assertEquals(56, Node.CHANGE_TIME);
819:       assertEquals(57, Node.REFLECTED_OBJECT);
820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
821:       assertEquals(4095, Node.COLUMN_MASK);
822:       assertEquals(48, Node.DIRECTIVES);
823:       assertEquals(49, Node.DIRECT_EVAL);
824:       assertEquals(37, Node.OPT_ARG_NAME);
825:       assertFalse(node1.isDebugger());
826:       assertFalse(node1.isTrue());
827:       assertFalse(node1.isFunction());
828:       assertFalse(node1.isRegExp());
829:       assertEquals(40, node1.getType());
830:       assertFalse(node1.isEmpty());
831:       assertFalse(node1.isFor());
832:       assertFalse(node1.isDefaultCase());
833:       assertFalse(node1.isTry());
834:       assertFalse(node1.isParamList());
835:       assertEquals(8, node1.getLineno());
836:       assertEquals(0, node1.getChildCount());
837:       assertFalse(node1.isGetterDef());
838:       assertFalse(node1.isArrayLit());
839:       assertFalse(node1.isStringKey());
840:       assertFalse(node1.isSwitch());
841:       assertFalse(node1.isBlock());
842:       assertFalse(node1.isInc());
843:       assertFalse(node1.isHook());
844:       assertFalse(node1.isThrow());
845:       assertFalse(node1.isCase());
846:       assertTrue(node1.isString());
847:       assertFalse(node1.isSetterDef());
848:       assertFalse(node1.isNE());
849:       assertFalse(node1.isThis());
850:       assertEquals(32815, node1.getSourcePosition());
851:       assertFalse(node1.isIn());
852:       assertFalse(node1.hasMoreThanOneChild());
853:       assertFalse(node1.isCatch());
854:       assertFalse(node1.isInstanceOf());
855:       assertFalse(node1.isIf());
856:       assertFalse(node1.isExprResult());
857:       assertFalse(node1.isScript());
858:       assertFalse(node1.isNot());
859:       assertFalse(node1.isWith());
860:       assertFalse(node1.isObjectLit());
861:       assertFalse(node1.hasOneChild());
862:       assertFalse(node1.isGetProp());
863:       assertFalse(node1.isLabel());
864:       assertFalse(node1.isFalse());
865:       assertFalse(node1.isNumber());
866:       assertFalse(node1.isCast());
867:       assertFalse(node1.isContinue());
868:       assertFalse(node1.isAnd());
869:       assertFalse(node1.isLabelName());
870:       assertFalse(node1.isAdd());
871:       assertFalse(node1.isVar());
872:       assertFalse(node1.isDo());
873:       assertFalse(node1.isAssignAdd());
874:       assertFalse(node1.isWhile());
875:       assertFalse(node1.isNew());
876:       assertFalse(node1.isComma());
877:       assertEquals(47, node1.getCharno());
878:       assertFalse(node1.hasChildren());
879:       assertFalse(node1.isNull());
880:       assertFalse(node1.isReturn());
881:       assertFalse(node1.isOr());
882:       assertFalse(node1.isAssign());
883:       assertFalse(node1.isDec());
884:       assertFalse(node1.isTypeOf());
885:       assertFalse(node1.isGetElem());
886:       assertFalse(node1.isCall());
887:       assertFalse(node1.isBreak());
888:       assertFalse(node1.isName());
889:       assertFalse(node1.isVoid());
890:       assertFalse(node1.isDelProp());
891:       assertFalse(boolean5);
892:       assertFalse(node1.equals((Object)node2));
893:       assertFalse(node1.equals((Object)node0));
894:       assertFalse(boolean5 == boolean2);
895:       assertTrue(boolean5 == boolean4);
896:       assertFalse(boolean5 == boolean0);
897:       assertTrue(boolean5 == boolean1);
898:       assertTrue(boolean5 == boolean3);
899:       assertNotSame(node1, node2);
900:       assertNotSame(node1, node0);
901:       
902:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
903:       assertNotNull(node_SideEffectFlags0);
904:       assertEquals(0, node_SideEffectFlags0.valueOf());
905:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
906:       
907:       Iterable<Node> iterable0 = node2.children();
908:       assertNotNull(iterable0);
909:       assertEquals(53, Node.INPUT_ID);
910:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
914:       assertEquals(47, Node.IS_DISPATCHER);
915:       assertEquals(32, Node.INCRDECR_PROP);
916:       assertEquals(46, Node.IS_NAMESPACE);
917:       assertEquals(51, Node.STATIC_SOURCE_FILE);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(54, Node.SLASH_V);
920:       assertEquals(43, Node.IS_CONSTANT_NAME);
921:       assertEquals(57, Node.REFLECTED_OBJECT);
922:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
923:       assertEquals(40, Node.ORIGINALNAME_PROP);
924:       assertEquals(50, Node.FREE_CALL);
925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
926:       assertEquals(52, Node.LENGTH);
927:       assertEquals(30, Node.VAR_ARGS_NAME);
928:       assertEquals(15, Node.NO_SIDE_EFFECTS);
929:       assertEquals(39, Node.EMPTY_BLOCK);
930:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
931:       assertEquals(1, Node.DECR_FLAG);
932:       assertEquals(57, Node.LAST_PROP);
933:       assertEquals(12, Node.COLUMN_BITS);
934:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
935:       assertEquals(55, Node.INFERRED_FUNCTION);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(8, Node.FLAG_NO_THROWS);
938:       assertEquals(56, Node.CHANGE_TIME);
939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
940:       assertEquals(49, Node.DIRECT_EVAL);
941:       assertEquals(36, Node.QUOTED_PROP);
942:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
943:       assertEquals(37, Node.OPT_ARG_NAME);
944:       assertEquals(48, Node.DIRECTIVES);
945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
946:       assertEquals(43, Node.IS_CONSTANT_NAME);
947:       assertEquals(36, Node.QUOTED_PROP);
948:       assertEquals(55, Node.INFERRED_FUNCTION);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(53, Node.INPUT_ID);
951:       assertEquals(39, Node.EMPTY_BLOCK);
952:       assertEquals(47, Node.IS_DISPATCHER);
953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
954:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
955:       assertEquals(2, Node.POST_FLAG);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(46, Node.IS_NAMESPACE);
958:       assertEquals(40, Node.ORIGINALNAME_PROP);
959:       assertEquals(15, Node.NO_SIDE_EFFECTS);
960:       assertEquals(57, Node.LAST_PROP);
961:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
962:       assertEquals(54, Node.SLASH_V);
963:       assertEquals(30, Node.VAR_ARGS_NAME);
964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(32, Node.INCRDECR_PROP);
967:       assertEquals(52, Node.LENGTH);
968:       assertEquals(1, Node.DECR_FLAG);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
971:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
972:       assertEquals(29, Node.JSDOC_INFO_PROP);
973:       assertEquals(8, Node.FLAG_NO_THROWS);
974:       assertEquals(56, Node.CHANGE_TIME);
975:       assertEquals(57, Node.REFLECTED_OBJECT);
976:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
977:       assertEquals(4095, Node.COLUMN_MASK);
978:       assertEquals(48, Node.DIRECTIVES);
979:       assertEquals(49, Node.DIRECT_EVAL);
980:       assertEquals(37, Node.OPT_ARG_NAME);
981:       assertEquals(52, Node.LENGTH);
982:       assertEquals(54, Node.SLASH_V);
983:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
984:       assertEquals(57, Node.REFLECTED_OBJECT);
985:       assertEquals(57, Node.LAST_PROP);
986:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
987:       assertEquals(50, Node.FREE_CALL);
988:       assertEquals(8, Node.FLAG_NO_THROWS);
989:       assertEquals(1, Node.DECR_FLAG);
990:       assertEquals(15, Node.NO_SIDE_EFFECTS);
991:       assertEquals(39, Node.EMPTY_BLOCK);
992:       assertEquals(46, Node.IS_NAMESPACE);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
995:       assertEquals(47, Node.IS_DISPATCHER);
996:       assertEquals(43, Node.IS_CONSTANT_NAME);
997:       assertEquals(30, Node.VAR_ARGS_NAME);
998:       assertEquals(2, Node.POST_FLAG);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(36, Node.QUOTED_PROP);
1003:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1004:       assertEquals(55, Node.INFERRED_FUNCTION);
1005:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1006:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1007:       assertEquals(29, Node.JSDOC_INFO_PROP);
1008:       assertEquals(53, Node.INPUT_ID);
1009:       assertEquals(32, Node.INCRDECR_PROP);
1010:       assertEquals(4095, Node.COLUMN_MASK);
1011:       assertEquals(12, Node.COLUMN_BITS);
1012:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1013:       assertEquals(56, Node.CHANGE_TIME);
1014:       assertEquals(49, Node.DIRECT_EVAL);
1015:       assertEquals(37, Node.OPT_ARG_NAME);
1016:       assertEquals(48, Node.DIRECTIVES);
1017:       assertFalse(iterable0.contains(node2));
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isEmpty());
1020:       assertFalse(node0.isRegExp());
1021:       assertFalse(node0.isDefaultCase());
1022:       assertFalse(node0.isFunction());
1023:       assertFalse(node0.isFor());
1024:       assertFalse(node0.isTry());
1025:       assertEquals(0, node0.getChildCount());
1026:       assertFalse(node0.isCase());
1027:       assertFalse(node0.isString());
1028:       assertFalse(node0.isSwitch());
1029:       assertFalse(node0.isDebugger());
1030:       assertFalse(node0.isGetterDef());
1031:       assertFalse(node0.isParamList());
1032:       assertFalse(node0.isStringKey());
1033:       assertFalse(node0.isHook());
1034:       assertFalse(node0.isFalse());
1035:       assertFalse(node0.isSetterDef());
1036:       assertFalse(node0.isInc());
1037:       assertFalse(node0.isThis());
1038:       assertFalse(node0.isBlock());
1039:       assertEquals(8, node0.getLineno());
1040:       assertFalse(node0.isThrow());
1041:       assertFalse(node0.hasMoreThanOneChild());
1042:       assertFalse(node0.isIn());
1043:       assertFalse(node0.isWith());
1044:       assertFalse(node0.isCatch());
1045:       assertFalse(node0.isInstanceOf());
1046:       assertEquals(32815, node0.getSourcePosition());
1047:       assertFalse(node0.isIf());
1048:       assertFalse(node0.isNE());
1049:       assertFalse(node0.hasOneChild());
1050:       assertFalse(node0.isGetElem());
1051:       assertFalse(node0.isExprResult());
1052:       assertFalse(node0.isCast());
1053:       assertFalse(node0.isTypeOf());
1054:       assertFalse(node0.isScript());
1055:       assertFalse(node0.hasChildren());
1056:       assertFalse(node0.isAssign());
1057:       assertFalse(node0.isDec());
1058:       assertFalse(node0.isLabel());
1059:       assertFalse(node0.isReturn());
1060:       assertFalse(node0.isAssignAdd());
1061:       assertFalse(node0.isObjectLit());
1062:       assertFalse(node0.isGetProp());
1063:       assertFalse(node0.isContinue());
1064:       assertFalse(node0.isNumber());
1065:       assertFalse(node0.isNot());
1066:       assertFalse(node0.isLabelName());
1067:       assertFalse(node0.isAnd());
1068:       assertFalse(node0.isVar());
1069:       assertFalse(node0.isNew());
1070:       assertFalse(node0.isAdd());
1071:       assertFalse(node0.isCall());
1072:       assertEquals(47, node0.getCharno());
1073:       assertFalse(node0.isDo());
1074:       assertFalse(node0.isComma());
1075:       assertEquals((-4823), node0.getType());
1076:       assertFalse(node0.isWhile());
1077:       assertFalse(node0.isOr());
1078:       assertFalse(node0.isNull());
1079:       assertFalse(node0.isVoid());
1080:       assertFalse(node0.isBreak());
1081:       assertFalse(node0.isDelProp());
1082:       assertFalse(node0.isName());
1083:       assertFalse(node0.isTrue());
1084:       assertFalse(node1.isDebugger());
1085:       assertFalse(node1.isTrue());
1086:       assertFalse(node1.isFunction());
1087:       assertFalse(node1.isRegExp());
1088:       assertEquals(40, node1.getType());
1089:       assertFalse(node1.isEmpty());
1090:       assertFalse(node1.isFor());
1091:       assertFalse(node1.isDefaultCase());
1092:       assertFalse(node1.isTry());
1093:       assertFalse(node1.isParamList());
1094:       assertEquals(8, node1.getLineno());
1095:       assertEquals(0, node1.getChildCount());
1096:       assertFalse(node1.isGetterDef());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isStringKey());
1099:       assertFalse(node1.isSwitch());
1100:       assertFalse(node1.isBlock());
1101:       assertFalse(node1.isInc());
1102:       assertFalse(node1.isHook());
1103:       assertFalse(node1.isThrow());
1104:       assertFalse(node1.isCase());
1105:       assertTrue(node1.isString());
1106:       assertFalse(node1.isSetterDef());
1107:       assertFalse(node1.isNE());
1108:       assertFalse(node1.isThis());
1109:       assertEquals(32815, node1.getSourcePosition());
1110:       assertFalse(node1.isIn());
1111:       assertFalse(node1.hasMoreThanOneChild());
1112:       assertFalse(node1.isCatch());
1113:       assertFalse(node1.isInstanceOf());
1114:       assertFalse(node1.isIf());
1115:       assertFalse(node1.isExprResult());
1116:       assertFalse(node1.isScript());
1117:       assertFalse(node1.isNot());
1118:       assertFalse(node1.isWith());
1119:       assertFalse(node1.isObjectLit());
1120:       assertFalse(node1.hasOneChild());
1121:       assertFalse(node1.isGetProp());
1122:       assertFalse(node1.isLabel());
1123:       assertFalse(node1.isFalse());
1124:       assertFalse(node1.isNumber());
1125:       assertFalse(node1.isCast());
1126:       assertFalse(node1.isContinue());
1127:       assertFalse(node1.isAnd());
1128:       assertFalse(node1.isLabelName());
1129:       assertFalse(node1.isAdd());
1130:       assertFalse(node1.isVar());
1131:       assertFalse(node1.isDo());
1132:       assertFalse(node1.isAssignAdd());
1133:       assertFalse(node1.isWhile());
1134:       assertFalse(node1.isNew());
1135:       assertFalse(node1.isComma());
1136:       assertEquals(47, node1.getCharno());
1137:       assertFalse(node1.hasChildren());
1138:       assertFalse(node1.isNull());
1139:       assertFalse(node1.isReturn());
1140:       assertFalse(node1.isOr());
1141:       assertFalse(node1.isAssign());
1142:       assertFalse(node1.isDec());
1143:       assertFalse(node1.isTypeOf());
1144:       assertFalse(node1.isGetElem());
1145:       assertFalse(node1.isCall());
1146:       assertFalse(node1.isBreak());
1147:       assertFalse(node1.isName());
1148:       assertFalse(node1.isVoid());
1149:       assertFalse(node1.isDelProp());
1150:       assertFalse(node2.isVar());
1151:       assertFalse(node2.isCall());
1152:       assertFalse(node2.isStringKey());
1153:       assertEquals(8, node2.getLineno());
1154:       assertFalse(node2.isBlock());
1155:       assertFalse(node2.isSetterDef());
1156:       assertFalse(node2.isWhile());
1157:       assertFalse(node2.isDo());
1158:       assertFalse(node2.isAdd());
1159:       assertFalse(node2.isNew());
1160:       assertFalse(node2.isContinue());
1161:       assertFalse(node2.isLabel());
1162:       assertEquals(0, node2.getChildCount());
1163:       assertFalse(node2.isFunction());
1164:       assertFalse(node2.isParamList());
1165:       assertFalse(node2.isLabelName());
1166:       assertFalse(node2.isArrayLit());
1167:       assertFalse(node2.isAssign());
1168:       assertFalse(node2.isDebugger());
1169:       assertFalse(node2.hasChildren());
1170:       assertFalse(node2.isDec());
1171:       assertFalse(node2.isDefaultCase());
1172:       assertFalse(node2.isAssignAdd());
1173:       assertFalse(node2.isEmpty());
1174:       assertFalse(node2.isOr());
1175:       assertFalse(node2.isReturn());
1176:       assertEquals(47, node2.getCharno());
1177:       assertFalse(node2.isComma());
1178:       assertFalse(node2.isNull());
1179:       assertFalse(node2.isTrue());
1180:       assertFalse(node2.isExprResult());
1181:       assertFalse(node2.isTypeOf());
1182:       assertFalse(node2.isName());
1183:       assertFalse(node2.isGetElem());
1184:       assertFalse(node2.isVoid());
1185:       assertFalse(node2.isBreak());
1186:       assertFalse(node2.isDelProp());
1187:       assertFalse(node2.isHook());
1188:       assertFalse(node2.isThrow());
1189:       assertFalse(node2.isFalse());
1190:       assertFalse(node2.isInc());
1191:       assertFalse(node2.isThis());
1192:       assertFalse(node2.isString());
1193:       assertEquals((-4823), node2.getType());
1194:       assertFalse(node2.isGetProp());
1195:       assertFalse(node2.isCase());
1196:       assertFalse(node2.isAnd());
1197:       assertFalse(node2.isNot());
1198:       assertFalse(node2.isObjectLit());
1199:       assertFalse(node2.isSwitch());
1200:       assertFalse(node2.isCast());
1201:       assertFalse(node2.isFor());
1202:       assertFalse(node2.isGetterDef());
1203:       assertFalse(node2.isScript());
1204:       assertFalse(node2.isNumber());
1205:       assertFalse(node2.isTry());
1206:       assertFalse(node2.hasOneChild());
1207:       assertFalse(node2.hasMoreThanOneChild());
1208:       assertFalse(node2.isIn());
1209:       assertFalse(node2.isCatch());
1210:       assertFalse(node2.isInstanceOf());
1211:       assertFalse(node2.isWith());
1212:       assertEquals(32815, node2.getSourcePosition());
1213:       assertFalse(node2.isNE());
1214:       assertFalse(node2.isRegExp());
1215:       assertFalse(node2.isIf());
1216:       assertFalse(node0.equals((Object)node1));
1217:       assertFalse(node1.equals((Object)node2));
1218:       assertFalse(node1.equals((Object)node0));
1219:       assertFalse(node2.equals((Object)node1));
1220:       assertNotSame(node0, node1);
1221:       assertSame(node0, node2);
1222:       assertNotSame(node1, node2);
1223:       assertNotSame(node1, node0);
1224:       assertNotSame(node2, node1);
1225:       assertSame(node2, node0);
1226:       
1227:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
1228:       assertNotNull(node_SideEffectFlags1);
1229:       assertEquals(0, node_SideEffectFlags0.valueOf());
1230:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1231:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1232:       assertEquals(0, node_SideEffectFlags1.valueOf());
1233:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1234:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1235:       
1236:       String string0 = node1.toString(true, false, false);
1237:       assertNotNull(string0);
1238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1239:       assertEquals(43, Node.IS_CONSTANT_NAME);
1240:       assertEquals(36, Node.QUOTED_PROP);
1241:       assertEquals(55, Node.INFERRED_FUNCTION);
1242:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1243:       assertEquals(53, Node.INPUT_ID);
1244:       assertEquals(39, Node.EMPTY_BLOCK);
1245:       assertEquals(47, Node.IS_DISPATCHER);
1246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1248:       assertEquals(2, Node.POST_FLAG);
1249:       assertEquals(50, Node.FREE_CALL);
1250:       assertEquals(46, Node.IS_NAMESPACE);
1251:       assertEquals(40, Node.ORIGINALNAME_PROP);
1252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1253:       assertEquals(57, Node.LAST_PROP);
1254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1255:       assertEquals(54, Node.SLASH_V);
1256:       assertEquals(30, Node.VAR_ARGS_NAME);
1257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1258:       assertEquals(12, Node.COLUMN_BITS);
1259:       assertEquals(32, Node.INCRDECR_PROP);
1260:       assertEquals(52, Node.LENGTH);
1261:       assertEquals(1, Node.DECR_FLAG);
1262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1265:       assertEquals(29, Node.JSDOC_INFO_PROP);
1266:       assertEquals(8, Node.FLAG_NO_THROWS);
1267:       assertEquals(56, Node.CHANGE_TIME);
1268:       assertEquals(57, Node.REFLECTED_OBJECT);
1269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1270:       assertEquals(4095, Node.COLUMN_MASK);
1271:       assertEquals(48, Node.DIRECTIVES);
1272:       assertEquals(49, Node.DIRECT_EVAL);
1273:       assertEquals(37, Node.OPT_ARG_NAME);
1274:       assertFalse(node1.isDebugger());
1275:       assertFalse(node1.isTrue());
1276:       assertFalse(node1.isFunction());
1277:       assertFalse(node1.isRegExp());
1278:       assertEquals(40, node1.getType());
1279:       assertFalse(node1.isEmpty());
1280:       assertFalse(node1.isFor());
1281:       assertFalse(node1.isDefaultCase());
1282:       assertFalse(node1.isTry());
1283:       assertFalse(node1.isParamList());
1284:       assertEquals(8, node1.getLineno());
1285:       assertEquals(0, node1.getChildCount());
1286:       assertFalse(node1.isGetterDef());
1287:       assertFalse(node1.isArrayLit());
1288:       assertFalse(node1.isStringKey());
1289:       assertFalse(node1.isSwitch());
1290:       assertFalse(node1.isBlock());
1291:       assertFalse(node1.isInc());
1292:       assertFalse(node1.isHook());
1293:       assertFalse(node1.isThrow());
1294:       assertFalse(node1.isCase());
1295:       assertTrue(node1.isString());
1296:       assertFalse(node1.isSetterDef());
1297:       assertFalse(node1.isNE());
1298:       assertFalse(node1.isThis());
1299:       assertEquals(32815, node1.getSourcePosition());
1300:       assertFalse(node1.isIn());
1301:       assertFalse(node1.hasMoreThanOneChild());
1302:       assertFalse(node1.isCatch());
1303:       assertFalse(node1.isInstanceOf());
1304:       assertFalse(node1.isIf());
1305:       assertFalse(node1.isExprResult());
1306:       assertFalse(node1.isScript());
1307:       assertFalse(node1.isNot());
1308:       assertFalse(node1.isWith());
1309:       assertFalse(node1.isObjectLit());
1310:       assertFalse(node1.hasOneChild());
1311:       assertFalse(node1.isGetProp());
1312:       assertFalse(node1.isLabel());
1313:       assertFalse(node1.isFalse());
1314:       assertFalse(node1.isNumber());
1315:       assertFalse(node1.isCast());
1316:       assertFalse(node1.isContinue());
1317:       assertFalse(node1.isAnd());
1318:       assertFalse(node1.isLabelName());
1319:       assertFalse(node1.isAdd());
1320:       assertFalse(node1.isVar());
1321:       assertFalse(node1.isDo());
1322:       assertFalse(node1.isAssignAdd());
1323:       assertFalse(node1.isWhile());
1324:       assertFalse(node1.isNew());
1325:       assertFalse(node1.isComma());
1326:       assertEquals(47, node1.getCharno());
1327:       assertFalse(node1.hasChildren());
1328:       assertFalse(node1.isNull());
1329:       assertFalse(node1.isReturn());
1330:       assertFalse(node1.isOr());
1331:       assertFalse(node1.isAssign());
1332:       assertFalse(node1.isDec());
1333:       assertFalse(node1.isTypeOf());
1334:       assertFalse(node1.isGetElem());
1335:       assertFalse(node1.isCall());
1336:       assertFalse(node1.isBreak());
1337:       assertFalse(node1.isName());
1338:       assertFalse(node1.isVoid());
1339:       assertFalse(node1.isDelProp());
1340:       assertEquals("STRING GV4*%Phq6VY 8", string0);
1341:       assertFalse(node1.equals((Object)node2));
1342:       assertFalse(node1.equals((Object)node0));
1343:       assertNotSame(node1, node2);
1344:       assertNotSame(node1, node0);
1345:       
1346:       // Undeclared exception!
1347:       try { 
1348:         node0.addChildrenAfter(node1, node1);
1349:         fail("Expecting exception: IllegalArgumentException");
1350:       
1351:       } catch(IllegalArgumentException e) {
1352:          //
1353:          // no message in exception (getMessage() returned null)
1354:          //
1355:          verifyException("com.google.common.base.Preconditions", e);
1356:       }
1357:   }
1358: }
RegularFileObject[/tmp/EvoSuite_120_1628157523008/com/google/javascript/rhino/Node_120_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_120_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_120_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.base.Joiner$MapJoiner",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_120_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Objects",
270:       "com.google.javascript.rhino.SimpleErrorReporter",
271:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
272:       "com.google.common.base.Joiner",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSDocInfo",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
370:       "com.google.common.collect.Sets$ImprovedAbstractSet",
371:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
372:       "com.google.common.collect.Hashing",
373:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 09:58:43.322 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

Node node0 = Node.newString((-4823), "LrB ]VIYQ r,b");
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertEquals((-4823), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTrue());

boolean boolean2 = node0.mayMutateGlobalStateOrThrow();
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertEquals((-4823), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertTrue(boolean2);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean3 = node0.isSyntheticBlock();
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertEquals((-4823), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(boolean3);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

byte[] byteArray0 = new byte[0];
boolean boolean4 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertArrayEquals(new byte[] {}, byteArray0);
assertEquals(0, byteArray0.length);
assertFalse(boolean4);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4 == boolean0);

Node node1 = Node.newString("GV4*%Phq6VY", 8, 47);
assertNotNull(node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(40, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertEquals(8, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(32815, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

Node node2 = node0.copyInformationFromForTree(node1);
assertNotNull(node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(8, node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(32815, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertEquals((-4823), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(40, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertEquals(8, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(32815, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertEquals(8, node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals(47, node2.getCharno());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isThis());
assertFalse(node2.isString());
assertEquals((-4823), node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(32815, node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertSame(node2, node0);

boolean boolean5 = node1.isReturn();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(40, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertEquals(8, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(32815, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(boolean5);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Iterable<Node> iterable0 = node2.children();
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(iterable0.contains(node2));
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(8, node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(32815, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertEquals((-4823), node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(40, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertEquals(8, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(32815, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertEquals(8, node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals(47, node2.getCharno());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isThis());
assertFalse(node2.isString());
assertEquals((-4823), node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(32815, node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertSame(node2, node0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertNotNull(node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

String string0 = node1.toString(true, false, false);
assertNotNull(string0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(40, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertEquals(8, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(32815, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals("STRING GV4*%Phq6VY 8", string0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node1, node0);

node0.addChildrenAfter(node1, node1);

[MASTER] 09:59:05.708 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_260_1628157545587/com/google/javascript/rhino/Node_260_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_260_1628157545587/com/google/javascript/rhino/Node_260_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:05.708 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:05.708 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:05.709 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 585
[MASTER] 09:59:05.711 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_260_1628157545587/com/google/javascript/rhino/Node_260_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_260_tmp__ESTest extends Node_260_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("com.google.common.base.Predicates$InPredicate");
21:       assertNotNull(node0);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(29, Node.JSDOC_INFO_PROP);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(51, Node.STATIC_SOURCE_FILE);
28:       assertEquals(12, Node.COLUMN_BITS);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(43, Node.IS_CONSTANT_NAME);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
36:       assertEquals(50, Node.FREE_CALL);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(8, Node.FLAG_NO_THROWS);
53:       assertEquals(39, Node.EMPTY_BLOCK);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(56, Node.CHANGE_TIME);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(52, Node.LENGTH);
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.isGetElem());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isLabelName());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.hasChildren());
66:       assertFalse(node0.isAssign());
67:       assertFalse(node0.isDec());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isContinue());
72:       assertFalse(node0.isAnd());
73:       assertFalse(node0.isObjectLit());
74:       assertFalse(node0.isWhile());
75:       assertEquals((-1), node0.getSourcePosition());
76:       assertFalse(node0.isScript());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isNumber());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isHook());
82:       assertTrue(node0.isString());
83:       assertFalse(node0.isBlock());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isInstanceOf());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isCatch());
88:       assertEquals(40, node0.getType());
89:       assertEquals((-1), node0.getLineno());
90:       assertFalse(node0.isNE());
91:       assertFalse(node0.isSetterDef());
92:       assertFalse(node0.isInc());
93:       assertFalse(node0.isIn());
94:       assertFalse(node0.isEmpty());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.isFor());
97:       assertFalse(node0.isDelProp());
98:       assertFalse(node0.isTry());
99:       assertFalse(node0.isIf());
100:       assertFalse(node0.isVoid());
101:       assertFalse(node0.isRegExp());
102:       assertFalse(node0.isFunction());
103:       assertFalse(node0.isCase());
104:       assertFalse(node0.isSwitch());
105:       assertFalse(node0.isDebugger());
106:       assertEquals((-1), node0.getCharno());
107:       assertFalse(node0.isParamList());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isCall());
110:       assertFalse(node0.isStringKey());
111:       assertFalse(node0.isVar());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isName());
114:       assertFalse(node0.isComma());
115:       assertEquals(0, node0.getChildCount());
116:       assertFalse(node0.isDo());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isTrue());
120:       assertFalse(node0.isNull());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isAdd());
123:       assertFalse(node0.isOr());
124:       
125:       node0.setSourceEncodedPosition(42);
126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
127:       assertEquals(29, Node.JSDOC_INFO_PROP);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(47, Node.IS_DISPATCHER);
130:       assertEquals(2, Node.POST_FLAG);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(43, Node.IS_CONSTANT_NAME);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
140:       assertEquals(50, Node.FREE_CALL);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(40, Node.ORIGINALNAME_PROP);
143:       assertEquals(57, Node.LAST_PROP);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(8, Node.FLAG_NO_THROWS);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
161:       assertEquals(52, Node.LENGTH);
162:       assertFalse(node0.isCast());
163:       assertFalse(node0.isGetElem());
164:       assertFalse(node0.hasOneChild());
165:       assertFalse(node0.isLabelName());
166:       assertFalse(node0.isExprResult());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isReturn());
169:       assertFalse(node0.hasChildren());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isDec());
172:       assertEquals(42, node0.getCharno());
173:       assertFalse(node0.isTypeOf());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isContinue());
177:       assertFalse(node0.isAnd());
178:       assertFalse(node0.isObjectLit());
179:       assertFalse(node0.isWhile());
180:       assertFalse(node0.isScript());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isNot());
183:       assertFalse(node0.isNumber());
184:       assertFalse(node0.isThrow());
185:       assertFalse(node0.isHook());
186:       assertTrue(node0.isString());
187:       assertFalse(node0.isBlock());
188:       assertEquals(0, node0.getLineno());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isInstanceOf());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isCatch());
193:       assertEquals(40, node0.getType());
194:       assertFalse(node0.isNE());
195:       assertFalse(node0.isSetterDef());
196:       assertFalse(node0.isInc());
197:       assertFalse(node0.isIn());
198:       assertFalse(node0.isEmpty());
199:       assertFalse(node0.isArrayLit());
200:       assertFalse(node0.isFor());
201:       assertFalse(node0.isDelProp());
202:       assertFalse(node0.isTry());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isVoid());
205:       assertEquals(42, node0.getSourcePosition());
206:       assertFalse(node0.isRegExp());
207:       assertFalse(node0.isFunction());
208:       assertFalse(node0.isCase());
209:       assertFalse(node0.isSwitch());
210:       assertFalse(node0.isDebugger());
211:       assertFalse(node0.isParamList());
212:       assertFalse(node0.isGetterDef());
213:       assertFalse(node0.isCall());
214:       assertFalse(node0.isStringKey());
215:       assertFalse(node0.isVar());
216:       assertFalse(node0.isBreak());
217:       assertFalse(node0.isName());
218:       assertFalse(node0.isComma());
219:       assertEquals(0, node0.getChildCount());
220:       assertFalse(node0.isDo());
221:       assertFalse(node0.isAssignAdd());
222:       assertFalse(node0.isDefaultCase());
223:       assertFalse(node0.isTrue());
224:       assertFalse(node0.isNull());
225:       assertFalse(node0.isNew());
226:       assertFalse(node0.isAdd());
227:       assertFalse(node0.isOr());
228:       
229:       boolean boolean0 = node0.isCase();
230:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
231:       assertEquals(29, Node.JSDOC_INFO_PROP);
232:       assertEquals(53, Node.INPUT_ID);
233:       assertEquals(47, Node.IS_DISPATCHER);
234:       assertEquals(2, Node.POST_FLAG);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(12, Node.COLUMN_BITS);
237:       assertEquals(46, Node.IS_NAMESPACE);
238:       assertEquals(32, Node.INCRDECR_PROP);
239:       assertEquals(1, Node.DECR_FLAG);
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(57, Node.REFLECTED_OBJECT);
246:       assertEquals(40, Node.ORIGINALNAME_PROP);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(30, Node.VAR_ARGS_NAME);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(49, Node.DIRECT_EVAL);
256:       assertEquals(37, Node.OPT_ARG_NAME);
257:       assertEquals(48, Node.DIRECTIVES);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(39, Node.EMPTY_BLOCK);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
265:       assertEquals(52, Node.LENGTH);
266:       assertFalse(node0.isCast());
267:       assertFalse(node0.isGetElem());
268:       assertFalse(node0.hasOneChild());
269:       assertFalse(node0.isLabelName());
270:       assertFalse(node0.isExprResult());
271:       assertFalse(node0.isLabel());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.hasChildren());
274:       assertFalse(node0.isAssign());
275:       assertFalse(node0.isDec());
276:       assertEquals(42, node0.getCharno());
277:       assertFalse(node0.isTypeOf());
278:       assertFalse(node0.hasMoreThanOneChild());
279:       assertFalse(node0.isWith());
280:       assertFalse(node0.isContinue());
281:       assertFalse(node0.isAnd());
282:       assertFalse(node0.isObjectLit());
283:       assertFalse(node0.isWhile());
284:       assertFalse(node0.isScript());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isNot());
287:       assertFalse(node0.isNumber());
288:       assertFalse(node0.isThrow());
289:       assertFalse(node0.isHook());
290:       assertTrue(node0.isString());
291:       assertFalse(node0.isBlock());
292:       assertEquals(0, node0.getLineno());
293:       assertFalse(node0.isThis());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.isFalse());
296:       assertFalse(node0.isCatch());
297:       assertEquals(40, node0.getType());
298:       assertFalse(node0.isNE());
299:       assertFalse(node0.isSetterDef());
300:       assertFalse(node0.isInc());
301:       assertFalse(node0.isIn());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.isArrayLit());
304:       assertFalse(node0.isFor());
305:       assertFalse(node0.isDelProp());
306:       assertFalse(node0.isTry());
307:       assertFalse(node0.isIf());
308:       assertFalse(node0.isVoid());
309:       assertEquals(42, node0.getSourcePosition());
310:       assertFalse(node0.isRegExp());
311:       assertFalse(node0.isFunction());
312:       assertFalse(node0.isCase());
313:       assertFalse(node0.isSwitch());
314:       assertFalse(node0.isDebugger());
315:       assertFalse(node0.isParamList());
316:       assertFalse(node0.isGetterDef());
317:       assertFalse(node0.isCall());
318:       assertFalse(node0.isStringKey());
319:       assertFalse(node0.isVar());
320:       assertFalse(node0.isBreak());
321:       assertFalse(node0.isName());
322:       assertFalse(node0.isComma());
323:       assertEquals(0, node0.getChildCount());
324:       assertFalse(node0.isDo());
325:       assertFalse(node0.isAssignAdd());
326:       assertFalse(node0.isDefaultCase());
327:       assertFalse(node0.isTrue());
328:       assertFalse(node0.isNull());
329:       assertFalse(node0.isNew());
330:       assertFalse(node0.isAdd());
331:       assertFalse(node0.isOr());
332:       assertFalse(boolean0);
333:       
334:       boolean boolean1 = node0.isFalse();
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(29, Node.JSDOC_INFO_PROP);
337:       assertEquals(53, Node.INPUT_ID);
338:       assertEquals(47, Node.IS_DISPATCHER);
339:       assertEquals(2, Node.POST_FLAG);
340:       assertEquals(51, Node.STATIC_SOURCE_FILE);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(46, Node.IS_NAMESPACE);
343:       assertEquals(32, Node.INCRDECR_PROP);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(43, Node.IS_CONSTANT_NAME);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(57, Node.REFLECTED_OBJECT);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
356:       assertEquals(30, Node.VAR_ARGS_NAME);
357:       assertEquals(4095, Node.COLUMN_MASK);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(49, Node.DIRECT_EVAL);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
365:       assertEquals(8, Node.FLAG_NO_THROWS);
366:       assertEquals(39, Node.EMPTY_BLOCK);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
370:       assertEquals(52, Node.LENGTH);
371:       assertFalse(node0.isCast());
372:       assertFalse(node0.isGetElem());
373:       assertFalse(node0.hasOneChild());
374:       assertFalse(node0.isLabelName());
375:       assertFalse(node0.isExprResult());
376:       assertFalse(node0.isLabel());
377:       assertFalse(node0.isReturn());
378:       assertFalse(node0.hasChildren());
379:       assertFalse(node0.isAssign());
380:       assertFalse(node0.isDec());
381:       assertEquals(42, node0.getCharno());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.hasMoreThanOneChild());
384:       assertFalse(node0.isWith());
385:       assertFalse(node0.isContinue());
386:       assertFalse(node0.isAnd());
387:       assertFalse(node0.isObjectLit());
388:       assertFalse(node0.isWhile());
389:       assertFalse(node0.isScript());
390:       assertFalse(node0.isGetProp());
391:       assertFalse(node0.isNot());
392:       assertFalse(node0.isNumber());
393:       assertFalse(node0.isThrow());
394:       assertFalse(node0.isHook());
395:       assertTrue(node0.isString());
396:       assertFalse(node0.isBlock());
397:       assertEquals(0, node0.getLineno());
398:       assertFalse(node0.isThis());
399:       assertFalse(node0.isInstanceOf());
400:       assertFalse(node0.isFalse());
401:       assertFalse(node0.isCatch());
402:       assertEquals(40, node0.getType());
403:       assertFalse(node0.isNE());
404:       assertFalse(node0.isSetterDef());
405:       assertFalse(node0.isInc());
406:       assertFalse(node0.isIn());
407:       assertFalse(node0.isEmpty());
408:       assertFalse(node0.isArrayLit());
409:       assertFalse(node0.isFor());
410:       assertFalse(node0.isDelProp());
411:       assertFalse(node0.isTry());
412:       assertFalse(node0.isIf());
413:       assertFalse(node0.isVoid());
414:       assertEquals(42, node0.getSourcePosition());
415:       assertFalse(node0.isRegExp());
416:       assertFalse(node0.isFunction());
417:       assertFalse(node0.isCase());
418:       assertFalse(node0.isSwitch());
419:       assertFalse(node0.isDebugger());
420:       assertFalse(node0.isParamList());
421:       assertFalse(node0.isGetterDef());
422:       assertFalse(node0.isCall());
423:       assertFalse(node0.isStringKey());
424:       assertFalse(node0.isVar());
425:       assertFalse(node0.isBreak());
426:       assertFalse(node0.isName());
427:       assertFalse(node0.isComma());
428:       assertEquals(0, node0.getChildCount());
429:       assertFalse(node0.isDo());
430:       assertFalse(node0.isAssignAdd());
431:       assertFalse(node0.isDefaultCase());
432:       assertFalse(node0.isTrue());
433:       assertFalse(node0.isNull());
434:       assertFalse(node0.isNew());
435:       assertFalse(node0.isAdd());
436:       assertFalse(node0.isOr());
437:       assertFalse(boolean1);
438:       assertTrue(boolean1 == boolean0);
439:       
440:       boolean boolean2 = node0.isLocalResultCall();
441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(53, Node.INPUT_ID);
444:       assertEquals(47, Node.IS_DISPATCHER);
445:       assertEquals(2, Node.POST_FLAG);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(12, Node.COLUMN_BITS);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(43, Node.IS_CONSTANT_NAME);
452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(57, Node.REFLECTED_OBJECT);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(57, Node.LAST_PROP);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(30, Node.VAR_ARGS_NAME);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
465:       assertEquals(55, Node.INFERRED_FUNCTION);
466:       assertEquals(49, Node.DIRECT_EVAL);
467:       assertEquals(37, Node.OPT_ARG_NAME);
468:       assertEquals(48, Node.DIRECTIVES);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(8, Node.FLAG_NO_THROWS);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
474:       assertEquals(56, Node.CHANGE_TIME);
475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
476:       assertEquals(52, Node.LENGTH);
477:       assertFalse(node0.isCast());
478:       assertFalse(node0.isGetElem());
479:       assertFalse(node0.hasOneChild());
480:       assertFalse(node0.isLabelName());
481:       assertFalse(node0.isExprResult());
482:       assertFalse(node0.isLabel());
483:       assertFalse(node0.isReturn());
484:       assertFalse(node0.hasChildren());
485:       assertFalse(node0.isAssign());
486:       assertFalse(node0.isDec());
487:       assertEquals(42, node0.getCharno());
488:       assertFalse(node0.isTypeOf());
489:       assertFalse(node0.hasMoreThanOneChild());
490:       assertFalse(node0.isWith());
491:       assertFalse(node0.isContinue());
492:       assertFalse(node0.isAnd());
493:       assertFalse(node0.isObjectLit());
494:       assertFalse(node0.isWhile());
495:       assertFalse(node0.isScript());
496:       assertFalse(node0.isGetProp());
497:       assertFalse(node0.isNot());
498:       assertFalse(node0.isNumber());
499:       assertFalse(node0.isThrow());
500:       assertFalse(node0.isHook());
501:       assertTrue(node0.isString());
502:       assertFalse(node0.isBlock());
503:       assertEquals(0, node0.getLineno());
504:       assertFalse(node0.isThis());
505:       assertFalse(node0.isInstanceOf());
506:       assertFalse(node0.isFalse());
507:       assertFalse(node0.isCatch());
508:       assertEquals(40, node0.getType());
509:       assertFalse(node0.isNE());
510:       assertFalse(node0.isSetterDef());
511:       assertFalse(node0.isInc());
512:       assertFalse(node0.isIn());
513:       assertFalse(node0.isEmpty());
514:       assertFalse(node0.isArrayLit());
515:       assertFalse(node0.isFor());
516:       assertFalse(node0.isDelProp());
517:       assertFalse(node0.isTry());
518:       assertFalse(node0.isIf());
519:       assertFalse(node0.isVoid());
520:       assertEquals(42, node0.getSourcePosition());
521:       assertFalse(node0.isRegExp());
522:       assertFalse(node0.isFunction());
523:       assertFalse(node0.isCase());
524:       assertFalse(node0.isSwitch());
525:       assertFalse(node0.isDebugger());
526:       assertFalse(node0.isParamList());
527:       assertFalse(node0.isGetterDef());
528:       assertFalse(node0.isCall());
529:       assertFalse(node0.isStringKey());
530:       assertFalse(node0.isVar());
531:       assertFalse(node0.isBreak());
532:       assertFalse(node0.isName());
533:       assertFalse(node0.isComma());
534:       assertEquals(0, node0.getChildCount());
535:       assertFalse(node0.isDo());
536:       assertFalse(node0.isAssignAdd());
537:       assertFalse(node0.isDefaultCase());
538:       assertFalse(node0.isTrue());
539:       assertFalse(node0.isNull());
540:       assertFalse(node0.isNew());
541:       assertFalse(node0.isAdd());
542:       assertFalse(node0.isOr());
543:       assertFalse(boolean2);
544:       assertTrue(boolean2 == boolean1);
545:       assertTrue(boolean2 == boolean0);
546:       
547:       Iterable<Node> iterable0 = node0.children();
548:       assertNotNull(iterable0);
549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
550:       assertEquals(29, Node.JSDOC_INFO_PROP);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(12, Node.COLUMN_BITS);
556:       assertEquals(46, Node.IS_NAMESPACE);
557:       assertEquals(32, Node.INCRDECR_PROP);
558:       assertEquals(1, Node.DECR_FLAG);
559:       assertEquals(43, Node.IS_CONSTANT_NAME);
560:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
563:       assertEquals(50, Node.FREE_CALL);
564:       assertEquals(57, Node.REFLECTED_OBJECT);
565:       assertEquals(40, Node.ORIGINALNAME_PROP);
566:       assertEquals(57, Node.LAST_PROP);
567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
570:       assertEquals(30, Node.VAR_ARGS_NAME);
571:       assertEquals(4095, Node.COLUMN_MASK);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(55, Node.INFERRED_FUNCTION);
574:       assertEquals(49, Node.DIRECT_EVAL);
575:       assertEquals(37, Node.OPT_ARG_NAME);
576:       assertEquals(48, Node.DIRECTIVES);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(15, Node.NO_SIDE_EFFECTS);
579:       assertEquals(8, Node.FLAG_NO_THROWS);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
584:       assertEquals(52, Node.LENGTH);
585:       assertFalse(iterable0.contains(node0));
586:       assertFalse(node0.isCast());
587:       assertFalse(node0.isGetElem());
588:       assertFalse(node0.hasOneChild());
589:       assertFalse(node0.isLabelName());
590:       assertFalse(node0.isExprResult());
591:       assertFalse(node0.isLabel());
592:       assertFalse(node0.isReturn());
593:       assertFalse(node0.hasChildren());
594:       assertFalse(node0.isAssign());
595:       assertFalse(node0.isDec());
596:       assertEquals(42, node0.getCharno());
597:       assertFalse(node0.isTypeOf());
598:       assertFalse(node0.hasMoreThanOneChild());
599:       assertFalse(node0.isWith());
600:       assertFalse(node0.isContinue());
601:       assertFalse(node0.isAnd());
602:       assertFalse(node0.isObjectLit());
603:       assertFalse(node0.isWhile());
604:       assertFalse(node0.isScript());
605:       assertFalse(node0.isGetProp());
606:       assertFalse(node0.isNot());
607:       assertFalse(node0.isNumber());
608:       assertFalse(node0.isThrow());
609:       assertFalse(node0.isHook());
610:       assertTrue(node0.isString());
611:       assertFalse(node0.isBlock());
612:       assertEquals(0, node0.getLineno());
613:       assertFalse(node0.isThis());
614:       assertFalse(node0.isInstanceOf());
615:       assertFalse(node0.isFalse());
616:       assertFalse(node0.isCatch());
617:       assertEquals(40, node0.getType());
618:       assertFalse(node0.isNE());
619:       assertFalse(node0.isSetterDef());
620:       assertFalse(node0.isInc());
621:       assertFalse(node0.isIn());
622:       assertFalse(node0.isEmpty());
623:       assertFalse(node0.isArrayLit());
624:       assertFalse(node0.isFor());
625:       assertFalse(node0.isDelProp());
626:       assertFalse(node0.isTry());
627:       assertFalse(node0.isIf());
628:       assertFalse(node0.isVoid());
629:       assertEquals(42, node0.getSourcePosition());
630:       assertFalse(node0.isRegExp());
631:       assertFalse(node0.isFunction());
632:       assertFalse(node0.isCase());
633:       assertFalse(node0.isSwitch());
634:       assertFalse(node0.isDebugger());
635:       assertFalse(node0.isParamList());
636:       assertFalse(node0.isGetterDef());
637:       assertFalse(node0.isCall());
638:       assertFalse(node0.isStringKey());
639:       assertFalse(node0.isVar());
640:       assertFalse(node0.isBreak());
641:       assertFalse(node0.isName());
642:       assertFalse(node0.isComma());
643:       assertEquals(0, node0.getChildCount());
644:       assertFalse(node0.isDo());
645:       assertFalse(node0.isAssignAdd());
646:       assertFalse(node0.isDefaultCase());
647:       assertFalse(node0.isTrue());
648:       assertFalse(node0.isNull());
649:       assertFalse(node0.isNew());
650:       assertFalse(node0.isAdd());
651:       assertFalse(node0.isOr());
652:       
653:       node0.putBooleanProp(48, true);
654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
655:       assertEquals(29, Node.JSDOC_INFO_PROP);
656:       assertEquals(53, Node.INPUT_ID);
657:       assertEquals(47, Node.IS_DISPATCHER);
658:       assertEquals(2, Node.POST_FLAG);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(12, Node.COLUMN_BITS);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(32, Node.INCRDECR_PROP);
663:       assertEquals(1, Node.DECR_FLAG);
664:       assertEquals(43, Node.IS_CONSTANT_NAME);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(54, Node.SLASH_V);
667:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
668:       assertEquals(50, Node.FREE_CALL);
669:       assertEquals(57, Node.REFLECTED_OBJECT);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(57, Node.LAST_PROP);
672:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
673:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(4095, Node.COLUMN_MASK);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(37, Node.OPT_ARG_NAME);
681:       assertEquals(48, Node.DIRECTIVES);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(8, Node.FLAG_NO_THROWS);
685:       assertEquals(39, Node.EMPTY_BLOCK);
686:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
687:       assertEquals(56, Node.CHANGE_TIME);
688:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
689:       assertEquals(52, Node.LENGTH);
690:       assertFalse(node0.isCast());
691:       assertFalse(node0.isGetElem());
692:       assertFalse(node0.hasOneChild());
693:       assertFalse(node0.isLabelName());
694:       assertFalse(node0.isExprResult());
695:       assertFalse(node0.isLabel());
696:       assertFalse(node0.isReturn());
697:       assertFalse(node0.hasChildren());
698:       assertFalse(node0.isAssign());
699:       assertFalse(node0.isDec());
700:       assertEquals(42, node0.getCharno());
701:       assertFalse(node0.isTypeOf());
702:       assertFalse(node0.hasMoreThanOneChild());
703:       assertFalse(node0.isWith());
704:       assertFalse(node0.isContinue());
705:       assertFalse(node0.isAnd());
706:       assertFalse(node0.isObjectLit());
707:       assertFalse(node0.isWhile());
708:       assertFalse(node0.isScript());
709:       assertFalse(node0.isGetProp());
710:       assertFalse(node0.isNot());
711:       assertFalse(node0.isNumber());
712:       assertFalse(node0.isThrow());
713:       assertFalse(node0.isHook());
714:       assertTrue(node0.isString());
715:       assertFalse(node0.isBlock());
716:       assertEquals(0, node0.getLineno());
717:       assertFalse(node0.isThis());
718:       assertFalse(node0.isInstanceOf());
719:       assertFalse(node0.isFalse());
720:       assertFalse(node0.isCatch());
721:       assertEquals(40, node0.getType());
722:       assertFalse(node0.isNE());
723:       assertFalse(node0.isSetterDef());
724:       assertFalse(node0.isInc());
725:       assertFalse(node0.isIn());
726:       assertFalse(node0.isEmpty());
727:       assertFalse(node0.isArrayLit());
728:       assertFalse(node0.isFor());
729:       assertFalse(node0.isDelProp());
730:       assertFalse(node0.isTry());
731:       assertFalse(node0.isIf());
732:       assertFalse(node0.isVoid());
733:       assertEquals(42, node0.getSourcePosition());
734:       assertFalse(node0.isRegExp());
735:       assertFalse(node0.isFunction());
736:       assertFalse(node0.isCase());
737:       assertFalse(node0.isSwitch());
738:       assertFalse(node0.isDebugger());
739:       assertFalse(node0.isParamList());
740:       assertFalse(node0.isGetterDef());
741:       assertFalse(node0.isCall());
742:       assertFalse(node0.isStringKey());
743:       assertFalse(node0.isVar());
744:       assertFalse(node0.isBreak());
745:       assertFalse(node0.isName());
746:       assertFalse(node0.isComma());
747:       assertEquals(0, node0.getChildCount());
748:       assertFalse(node0.isDo());
749:       assertFalse(node0.isAssignAdd());
750:       assertFalse(node0.isDefaultCase());
751:       assertFalse(node0.isTrue());
752:       assertFalse(node0.isNull());
753:       assertFalse(node0.isNew());
754:       assertFalse(node0.isAdd());
755:       assertFalse(node0.isOr());
756:       
757:       String string0 = node0.toString();
758:       assertNotNull(string0);
759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
760:       assertEquals(29, Node.JSDOC_INFO_PROP);
761:       assertEquals(53, Node.INPUT_ID);
762:       assertEquals(47, Node.IS_DISPATCHER);
763:       assertEquals(2, Node.POST_FLAG);
764:       assertEquals(51, Node.STATIC_SOURCE_FILE);
765:       assertEquals(12, Node.COLUMN_BITS);
766:       assertEquals(46, Node.IS_NAMESPACE);
767:       assertEquals(32, Node.INCRDECR_PROP);
768:       assertEquals(1, Node.DECR_FLAG);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
773:       assertEquals(50, Node.FREE_CALL);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(57, Node.LAST_PROP);
777:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
778:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
780:       assertEquals(30, Node.VAR_ARGS_NAME);
781:       assertEquals(4095, Node.COLUMN_MASK);
782:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
783:       assertEquals(55, Node.INFERRED_FUNCTION);
784:       assertEquals(49, Node.DIRECT_EVAL);
785:       assertEquals(37, Node.OPT_ARG_NAME);
786:       assertEquals(48, Node.DIRECTIVES);
787:       assertEquals(36, Node.QUOTED_PROP);
788:       assertEquals(15, Node.NO_SIDE_EFFECTS);
789:       assertEquals(8, Node.FLAG_NO_THROWS);
790:       assertEquals(39, Node.EMPTY_BLOCK);
791:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
792:       assertEquals(56, Node.CHANGE_TIME);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(52, Node.LENGTH);
795:       assertFalse(node0.isCast());
796:       assertFalse(node0.isGetElem());
797:       assertFalse(node0.hasOneChild());
798:       assertFalse(node0.isLabelName());
799:       assertFalse(node0.isExprResult());
800:       assertFalse(node0.isLabel());
801:       assertFalse(node0.isReturn());
802:       assertFalse(node0.hasChildren());
803:       assertFalse(node0.isAssign());
804:       assertFalse(node0.isDec());
805:       assertEquals(42, node0.getCharno());
806:       assertFalse(node0.isTypeOf());
807:       assertFalse(node0.hasMoreThanOneChild());
808:       assertFalse(node0.isWith());
809:       assertFalse(node0.isContinue());
810:       assertFalse(node0.isAnd());
811:       assertFalse(node0.isObjectLit());
812:       assertFalse(node0.isWhile());
813:       assertFalse(node0.isScript());
814:       assertFalse(node0.isGetProp());
815:       assertFalse(node0.isNot());
816:       assertFalse(node0.isNumber());
817:       assertFalse(node0.isThrow());
818:       assertFalse(node0.isHook());
819:       assertTrue(node0.isString());
820:       assertFalse(node0.isBlock());
821:       assertEquals(0, node0.getLineno());
822:       assertFalse(node0.isThis());
823:       assertFalse(node0.isInstanceOf());
824:       assertFalse(node0.isFalse());
825:       assertFalse(node0.isCatch());
826:       assertEquals(40, node0.getType());
827:       assertFalse(node0.isNE());
828:       assertFalse(node0.isSetterDef());
829:       assertFalse(node0.isInc());
830:       assertFalse(node0.isIn());
831:       assertFalse(node0.isEmpty());
832:       assertFalse(node0.isArrayLit());
833:       assertFalse(node0.isFor());
834:       assertFalse(node0.isDelProp());
835:       assertFalse(node0.isTry());
836:       assertFalse(node0.isIf());
837:       assertFalse(node0.isVoid());
838:       assertEquals(42, node0.getSourcePosition());
839:       assertFalse(node0.isRegExp());
840:       assertFalse(node0.isFunction());
841:       assertFalse(node0.isCase());
842:       assertFalse(node0.isSwitch());
843:       assertFalse(node0.isDebugger());
844:       assertFalse(node0.isParamList());
845:       assertFalse(node0.isGetterDef());
846:       assertFalse(node0.isCall());
847:       assertFalse(node0.isStringKey());
848:       assertFalse(node0.isVar());
849:       assertFalse(node0.isBreak());
850:       assertFalse(node0.isName());
851:       assertFalse(node0.isComma());
852:       assertEquals(0, node0.getChildCount());
853:       assertFalse(node0.isDo());
854:       assertFalse(node0.isAssignAdd());
855:       assertFalse(node0.isDefaultCase());
856:       assertFalse(node0.isTrue());
857:       assertFalse(node0.isNull());
858:       assertFalse(node0.isNew());
859:       assertFalse(node0.isAdd());
860:       assertFalse(node0.isOr());
861:       
862:       boolean boolean3 = node0.isEmpty();
863:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
864:       assertEquals(29, Node.JSDOC_INFO_PROP);
865:       assertEquals(53, Node.INPUT_ID);
866:       assertEquals(47, Node.IS_DISPATCHER);
867:       assertEquals(2, Node.POST_FLAG);
868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
869:       assertEquals(12, Node.COLUMN_BITS);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(32, Node.INCRDECR_PROP);
872:       assertEquals(1, Node.DECR_FLAG);
873:       assertEquals(43, Node.IS_CONSTANT_NAME);
874:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
875:       assertEquals(54, Node.SLASH_V);
876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
877:       assertEquals(50, Node.FREE_CALL);
878:       assertEquals(57, Node.REFLECTED_OBJECT);
879:       assertEquals(40, Node.ORIGINALNAME_PROP);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
883:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(4095, Node.COLUMN_MASK);
886:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(49, Node.DIRECT_EVAL);
889:       assertEquals(37, Node.OPT_ARG_NAME);
890:       assertEquals(48, Node.DIRECTIVES);
891:       assertEquals(36, Node.QUOTED_PROP);
892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
893:       assertEquals(8, Node.FLAG_NO_THROWS);
894:       assertEquals(39, Node.EMPTY_BLOCK);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(56, Node.CHANGE_TIME);
897:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
898:       assertEquals(52, Node.LENGTH);
899:       assertFalse(node0.isCast());
900:       assertFalse(node0.isGetElem());
901:       assertFalse(node0.hasOneChild());
902:       assertFalse(node0.isLabelName());
903:       assertFalse(node0.isExprResult());
904:       assertFalse(node0.isLabel());
905:       assertFalse(node0.isReturn());
906:       assertFalse(node0.hasChildren());
907:       assertFalse(node0.isAssign());
908:       assertFalse(node0.isDec());
909:       assertEquals(42, node0.getCharno());
910:       assertFalse(node0.isTypeOf());
911:       assertFalse(node0.hasMoreThanOneChild());
912:       assertFalse(node0.isWith());
913:       assertFalse(node0.isContinue());
914:       assertFalse(node0.isAnd());
915:       assertFalse(node0.isObjectLit());
916:       assertFalse(node0.isWhile());
917:       assertFalse(node0.isScript());
918:       assertFalse(node0.isGetProp());
919:       assertFalse(node0.isNot());
920:       assertFalse(node0.isNumber());
921:       assertFalse(node0.isThrow());
922:       assertFalse(node0.isHook());
923:       assertTrue(node0.isString());
924:       assertFalse(node0.isBlock());
925:       assertEquals(0, node0.getLineno());
926:       assertFalse(node0.isThis());
927:       assertFalse(node0.isInstanceOf());
928:       assertFalse(node0.isFalse());
929:       assertFalse(node0.isCatch());
930:       assertEquals(40, node0.getType());
931:       assertFalse(node0.isNE());
932:       assertFalse(node0.isSetterDef());
933:       assertFalse(node0.isInc());
934:       assertFalse(node0.isIn());
935:       assertFalse(node0.isEmpty());
936:       assertFalse(node0.isArrayLit());
937:       assertFalse(node0.isFor());
938:       assertFalse(node0.isDelProp());
939:       assertFalse(node0.isTry());
940:       assertFalse(node0.isIf());
941:       assertFalse(node0.isVoid());
942:       assertEquals(42, node0.getSourcePosition());
943:       assertFalse(node0.isRegExp());
944:       assertFalse(node0.isFunction());
945:       assertFalse(node0.isCase());
946:       assertFalse(node0.isSwitch());
947:       assertFalse(node0.isDebugger());
948:       assertFalse(node0.isParamList());
949:       assertFalse(node0.isGetterDef());
950:       assertFalse(node0.isCall());
951:       assertFalse(node0.isStringKey());
952:       assertFalse(node0.isVar());
953:       assertFalse(node0.isBreak());
954:       assertFalse(node0.isName());
955:       assertFalse(node0.isComma());
956:       assertEquals(0, node0.getChildCount());
957:       assertFalse(node0.isDo());
958:       assertFalse(node0.isAssignAdd());
959:       assertFalse(node0.isDefaultCase());
960:       assertFalse(node0.isTrue());
961:       assertFalse(node0.isNull());
962:       assertFalse(node0.isNew());
963:       assertFalse(node0.isAdd());
964:       assertFalse(node0.isOr());
965:       assertFalse(boolean3);
966:       assertTrue(boolean3 == boolean2);
967:       assertTrue(boolean3 == boolean1);
968:       assertTrue(boolean3 == boolean0);
969:       
970:       boolean boolean4 = node0.isThrow();
971:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
972:       assertEquals(29, Node.JSDOC_INFO_PROP);
973:       assertEquals(53, Node.INPUT_ID);
974:       assertEquals(47, Node.IS_DISPATCHER);
975:       assertEquals(2, Node.POST_FLAG);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(12, Node.COLUMN_BITS);
978:       assertEquals(46, Node.IS_NAMESPACE);
979:       assertEquals(32, Node.INCRDECR_PROP);
980:       assertEquals(1, Node.DECR_FLAG);
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
983:       assertEquals(54, Node.SLASH_V);
984:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
985:       assertEquals(50, Node.FREE_CALL);
986:       assertEquals(57, Node.REFLECTED_OBJECT);
987:       assertEquals(40, Node.ORIGINALNAME_PROP);
988:       assertEquals(57, Node.LAST_PROP);
989:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
992:       assertEquals(30, Node.VAR_ARGS_NAME);
993:       assertEquals(4095, Node.COLUMN_MASK);
994:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
995:       assertEquals(55, Node.INFERRED_FUNCTION);
996:       assertEquals(49, Node.DIRECT_EVAL);
997:       assertEquals(37, Node.OPT_ARG_NAME);
998:       assertEquals(48, Node.DIRECTIVES);
999:       assertEquals(36, Node.QUOTED_PROP);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(8, Node.FLAG_NO_THROWS);
1002:       assertEquals(39, Node.EMPTY_BLOCK);
1003:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1004:       assertEquals(56, Node.CHANGE_TIME);
1005:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1006:       assertEquals(52, Node.LENGTH);
1007:       assertFalse(node0.isCast());
1008:       assertFalse(node0.isGetElem());
1009:       assertFalse(node0.hasOneChild());
1010:       assertFalse(node0.isLabelName());
1011:       assertFalse(node0.isExprResult());
1012:       assertFalse(node0.isLabel());
1013:       assertFalse(node0.isReturn());
1014:       assertFalse(node0.hasChildren());
1015:       assertFalse(node0.isAssign());
1016:       assertFalse(node0.isDec());
1017:       assertEquals(42, node0.getCharno());
1018:       assertFalse(node0.isTypeOf());
1019:       assertFalse(node0.hasMoreThanOneChild());
1020:       assertFalse(node0.isWith());
1021:       assertFalse(node0.isContinue());
1022:       assertFalse(node0.isAnd());
1023:       assertFalse(node0.isObjectLit());
1024:       assertFalse(node0.isWhile());
1025:       assertFalse(node0.isScript());
1026:       assertFalse(node0.isGetProp());
1027:       assertFalse(node0.isNot());
1028:       assertFalse(node0.isNumber());
1029:       assertFalse(node0.isThrow());
1030:       assertFalse(node0.isHook());
1031:       assertTrue(node0.isString());
1032:       assertFalse(node0.isBlock());
1033:       assertEquals(0, node0.getLineno());
1034:       assertFalse(node0.isThis());
1035:       assertFalse(node0.isInstanceOf());
1036:       assertFalse(node0.isFalse());
1037:       assertFalse(node0.isCatch());
1038:       assertEquals(40, node0.getType());
1039:       assertFalse(node0.isNE());
1040:       assertFalse(node0.isSetterDef());
1041:       assertFalse(node0.isInc());
1042:       assertFalse(node0.isIn());
1043:       assertFalse(node0.isEmpty());
1044:       assertFalse(node0.isArrayLit());
1045:       assertFalse(node0.isFor());
1046:       assertFalse(node0.isDelProp());
1047:       assertFalse(node0.isTry());
1048:       assertFalse(node0.isIf());
1049:       assertFalse(node0.isVoid());
1050:       assertEquals(42, node0.getSourcePosition());
1051:       assertFalse(node0.isRegExp());
1052:       assertFalse(node0.isFunction());
1053:       assertFalse(node0.isCase());
1054:       assertFalse(node0.isSwitch());
1055:       assertFalse(node0.isDebugger());
1056:       assertFalse(node0.isParamList());
1057:       assertFalse(node0.isGetterDef());
1058:       assertFalse(node0.isCall());
1059:       assertFalse(node0.isStringKey());
1060:       assertFalse(node0.isVar());
1061:       assertFalse(node0.isBreak());
1062:       assertFalse(node0.isName());
1063:       assertFalse(node0.isComma());
1064:       assertEquals(0, node0.getChildCount());
1065:       assertFalse(node0.isDo());
1066:       assertFalse(node0.isAssignAdd());
1067:       assertFalse(node0.isDefaultCase());
1068:       assertFalse(node0.isTrue());
1069:       assertFalse(node0.isNull());
1070:       assertFalse(node0.isNew());
1071:       assertFalse(node0.isAdd());
1072:       assertFalse(node0.isOr());
1073:       assertFalse(boolean4);
1074:       assertTrue(boolean4 == boolean0);
1075:       assertTrue(boolean4 == boolean3);
1076:       assertTrue(boolean4 == boolean1);
1077:       assertTrue(boolean4 == boolean2);
1078:       
1079:       boolean boolean5 = node0.isRegExp();
1080:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1081:       assertEquals(29, Node.JSDOC_INFO_PROP);
1082:       assertEquals(53, Node.INPUT_ID);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       assertEquals(2, Node.POST_FLAG);
1085:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1086:       assertEquals(12, Node.COLUMN_BITS);
1087:       assertEquals(46, Node.IS_NAMESPACE);
1088:       assertEquals(32, Node.INCRDECR_PROP);
1089:       assertEquals(1, Node.DECR_FLAG);
1090:       assertEquals(43, Node.IS_CONSTANT_NAME);
1091:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1092:       assertEquals(54, Node.SLASH_V);
1093:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1094:       assertEquals(50, Node.FREE_CALL);
1095:       assertEquals(57, Node.REFLECTED_OBJECT);
1096:       assertEquals(40, Node.ORIGINALNAME_PROP);
1097:       assertEquals(57, Node.LAST_PROP);
1098:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1099:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1101:       assertEquals(30, Node.VAR_ARGS_NAME);
1102:       assertEquals(4095, Node.COLUMN_MASK);
1103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1104:       assertEquals(55, Node.INFERRED_FUNCTION);
1105:       assertEquals(49, Node.DIRECT_EVAL);
1106:       assertEquals(37, Node.OPT_ARG_NAME);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(36, Node.QUOTED_PROP);
1109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1110:       assertEquals(8, Node.FLAG_NO_THROWS);
1111:       assertEquals(39, Node.EMPTY_BLOCK);
1112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1113:       assertEquals(56, Node.CHANGE_TIME);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(52, Node.LENGTH);
1116:       assertFalse(node0.isCast());
1117:       assertFalse(node0.isGetElem());
1118:       assertFalse(node0.hasOneChild());
1119:       assertFalse(node0.isLabelName());
1120:       assertFalse(node0.isExprResult());
1121:       assertFalse(node0.isLabel());
1122:       assertFalse(node0.isReturn());
1123:       assertFalse(node0.hasChildren());
1124:       assertFalse(node0.isAssign());
1125:       assertFalse(node0.isDec());
1126:       assertEquals(42, node0.getCharno());
1127:       assertFalse(node0.isTypeOf());
1128:       assertFalse(node0.hasMoreThanOneChild());
1129:       assertFalse(node0.isWith());
1130:       assertFalse(node0.isContinue());
1131:       assertFalse(node0.isAnd());
1132:       assertFalse(node0.isObjectLit());
1133:       assertFalse(node0.isWhile());
1134:       assertFalse(node0.isScript());
1135:       assertFalse(node0.isGetProp());
1136:       assertFalse(node0.isNot());
1137:       assertFalse(node0.isNumber());
1138:       assertFalse(node0.isThrow());
1139:       assertFalse(node0.isHook());
1140:       assertTrue(node0.isString());
1141:       assertFalse(node0.isBlock());
1142:       assertEquals(0, node0.getLineno());
1143:       assertFalse(node0.isThis());
1144:       assertFalse(node0.isInstanceOf());
1145:       assertFalse(node0.isFalse());
1146:       assertFalse(node0.isCatch());
1147:       assertEquals(40, node0.getType());
1148:       assertFalse(node0.isNE());
1149:       assertFalse(node0.isSetterDef());
1150:       assertFalse(node0.isInc());
1151:       assertFalse(node0.isIn());
1152:       assertFalse(node0.isEmpty());
1153:       assertFalse(node0.isArrayLit());
1154:       assertFalse(node0.isFor());
1155:       assertFalse(node0.isDelProp());
1156:       assertFalse(node0.isTry());
1157:       assertFalse(node0.isIf());
1158:       assertFalse(node0.isVoid());
1159:       assertEquals(42, node0.getSourcePosition());
1160:       assertFalse(node0.isRegExp());
1161:       assertFalse(node0.isFunction());
1162:       assertFalse(node0.isCase());
1163:       assertFalse(node0.isSwitch());
1164:       assertFalse(node0.isDebugger());
1165:       assertFalse(node0.isParamList());
1166:       assertFalse(node0.isGetterDef());
1167:       assertFalse(node0.isCall());
1168:       assertFalse(node0.isStringKey());
1169:       assertFalse(node0.isVar());
1170:       assertFalse(node0.isBreak());
1171:       assertFalse(node0.isName());
1172:       assertFalse(node0.isComma());
1173:       assertEquals(0, node0.getChildCount());
1174:       assertFalse(node0.isDo());
1175:       assertFalse(node0.isAssignAdd());
1176:       assertFalse(node0.isDefaultCase());
1177:       assertFalse(node0.isTrue());
1178:       assertFalse(node0.isNull());
1179:       assertFalse(node0.isNew());
1180:       assertFalse(node0.isAdd());
1181:       assertFalse(node0.isOr());
1182:       assertFalse(boolean5);
1183:       assertTrue(boolean5 == boolean2);
1184:       assertTrue(boolean5 == boolean0);
1185:       assertTrue(boolean5 == boolean4);
1186:       assertTrue(boolean5 == boolean3);
1187:       assertTrue(boolean5 == boolean1);
1188:       
1189:       boolean boolean6 = node0.isSyntheticBlock();
1190:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1191:       assertEquals(29, Node.JSDOC_INFO_PROP);
1192:       assertEquals(53, Node.INPUT_ID);
1193:       assertEquals(47, Node.IS_DISPATCHER);
1194:       assertEquals(2, Node.POST_FLAG);
1195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1196:       assertEquals(12, Node.COLUMN_BITS);
1197:       assertEquals(46, Node.IS_NAMESPACE);
1198:       assertEquals(32, Node.INCRDECR_PROP);
1199:       assertEquals(1, Node.DECR_FLAG);
1200:       assertEquals(43, Node.IS_CONSTANT_NAME);
1201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1202:       assertEquals(54, Node.SLASH_V);
1203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1204:       assertEquals(50, Node.FREE_CALL);
1205:       assertEquals(57, Node.REFLECTED_OBJECT);
1206:       assertEquals(40, Node.ORIGINALNAME_PROP);
1207:       assertEquals(57, Node.LAST_PROP);
1208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1211:       assertEquals(30, Node.VAR_ARGS_NAME);
1212:       assertEquals(4095, Node.COLUMN_MASK);
1213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1214:       assertEquals(55, Node.INFERRED_FUNCTION);
1215:       assertEquals(49, Node.DIRECT_EVAL);
1216:       assertEquals(37, Node.OPT_ARG_NAME);
1217:       assertEquals(48, Node.DIRECTIVES);
1218:       assertEquals(36, Node.QUOTED_PROP);
1219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1220:       assertEquals(8, Node.FLAG_NO_THROWS);
1221:       assertEquals(39, Node.EMPTY_BLOCK);
1222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1223:       assertEquals(56, Node.CHANGE_TIME);
1224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1225:       assertEquals(52, Node.LENGTH);
1226:       assertFalse(node0.isCast());
1227:       assertFalse(node0.isGetElem());
1228:       assertFalse(node0.hasOneChild());
1229:       assertFalse(node0.isLabelName());
1230:       assertFalse(node0.isExprResult());
1231:       assertFalse(node0.isLabel());
1232:       assertFalse(node0.isReturn());
1233:       assertFalse(node0.hasChildren());
1234:       assertFalse(node0.isAssign());
1235:       assertFalse(node0.isDec());
1236:       assertEquals(42, node0.getCharno());
1237:       assertFalse(node0.isTypeOf());
1238:       assertFalse(node0.hasMoreThanOneChild());
1239:       assertFalse(node0.isWith());
1240:       assertFalse(node0.isContinue());
1241:       assertFalse(node0.isAnd());
1242:       assertFalse(node0.isObjectLit());
1243:       assertFalse(node0.isWhile());
1244:       assertFalse(node0.isScript());
1245:       assertFalse(node0.isGetProp());
1246:       assertFalse(node0.isNot());
1247:       assertFalse(node0.isNumber());
1248:       assertFalse(node0.isThrow());
1249:       assertFalse(node0.isHook());
1250:       assertTrue(node0.isString());
1251:       assertFalse(node0.isBlock());
1252:       assertEquals(0, node0.getLineno());
1253:       assertFalse(node0.isThis());
1254:       assertFalse(node0.isInstanceOf());
1255:       assertFalse(node0.isFalse());
1256:       assertFalse(node0.isCatch());
1257:       assertEquals(40, node0.getType());
1258:       assertFalse(node0.isNE());
1259:       assertFalse(node0.isSetterDef());
1260:       assertFalse(node0.isInc());
1261:       assertFalse(node0.isIn());
1262:       assertFalse(node0.isEmpty());
1263:       assertFalse(node0.isArrayLit());
1264:       assertFalse(node0.isFor());
1265:       assertFalse(node0.isDelProp());
1266:       assertFalse(node0.isTry());
1267:       assertFalse(node0.isIf());
1268:       assertFalse(node0.isVoid());
1269:       assertEquals(42, node0.getSourcePosition());
1270:       assertFalse(node0.isRegExp());
1271:       assertFalse(node0.isFunction());
1272:       assertFalse(node0.isCase());
1273:       assertFalse(node0.isSwitch());
1274:       assertFalse(node0.isDebugger());
1275:       assertFalse(node0.isParamList());
1276:       assertFalse(node0.isGetterDef());
1277:       assertFalse(node0.isCall());
1278:       assertFalse(node0.isStringKey());
1279:       assertFalse(node0.isVar());
1280:       assertFalse(node0.isBreak());
1281:       assertFalse(node0.isName());
1282:       assertFalse(node0.isComma());
1283:       assertEquals(0, node0.getChildCount());
1284:       assertFalse(node0.isDo());
1285:       assertFalse(node0.isAssignAdd());
1286:       assertFalse(node0.isDefaultCase());
1287:       assertFalse(node0.isTrue());
1288:       assertFalse(node0.isNull());
1289:       assertFalse(node0.isNew());
1290:       assertFalse(node0.isAdd());
1291:       assertFalse(node0.isOr());
1292:       assertFalse(boolean6);
1293:       assertTrue(boolean6 == boolean2);
1294:       assertTrue(boolean6 == boolean3);
1295:       assertTrue(boolean6 == boolean1);
1296:       assertTrue(boolean6 == boolean4);
1297:       assertTrue(boolean6 == boolean5);
1298:       assertTrue(boolean6 == boolean0);
1299:   }
1300: }
RegularFileObject[/tmp/EvoSuite_260_1628157545587/com/google/javascript/rhino/Node_260_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_260_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_260_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.JSType$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.base.Joiner$MapJoiner",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_260_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Objects",
270:       "com.google.javascript.rhino.SimpleErrorReporter",
271:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
272:       "com.google.common.base.Joiner",
273:       "com.google.common.base.Joiner$1",
274:       "com.google.common.collect.Collections2",
275:       "com.google.common.base.Joiner$MapJoiner",
276:       "com.google.common.collect.Maps",
277:       "com.google.common.collect.AbstractMultimap",
278:       "com.google.common.collect.AbstractMapBasedMultimap",
279:       "com.google.common.collect.AbstractSetMultimap",
280:       "com.google.common.collect.LinkedHashMultimap",
281:       "com.google.common.collect.AbstractMapEntry",
282:       "com.google.common.collect.ImmutableEntry",
283:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
284:       "com.google.common.collect.AbstractListMultimap",
285:       "com.google.common.collect.ArrayListMultimap",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
287:       "com.google.common.collect.ImmutableCollection",
288:       "com.google.common.collect.RegularImmutableList",
289:       "com.google.common.collect.ObjectArrays",
290:       "com.google.common.collect.ImmutableList",
291:       "com.google.javascript.rhino.jstype.ModificationVisitor",
292:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
293:       "com.google.common.collect.ImmutableCollection$Builder",
294:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
295:       "com.google.common.collect.ImmutableList$Builder",
296:       "com.google.common.collect.UnmodifiableIterator",
297:       "com.google.common.collect.UnmodifiableListIterator",
298:       "com.google.common.collect.Iterators$1",
299:       "com.google.common.collect.Iterators$2",
300:       "com.google.common.collect.Iterators",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Platform",
347:       "com.google.javascript.rhino.JSDocInfo",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
351:       "com.google.common.collect.Sets",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.common.collect.Iterables",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
370:       "com.google.common.collect.Sets$ImprovedAbstractSet",
371:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
372:       "com.google.common.collect.Hashing",
373:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 09:59:05.743 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.common.base.Predicates$InPredicate");
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

node0.setSourceEncodedPosition(42);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

boolean boolean0 = node0.isCase();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean0);

boolean boolean1 = node0.isFalse();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isLocalResultCall();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

node0.putBooleanProp(48, true);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

String string0 = node0.toString();
assertNotNull(string0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

boolean boolean3 = node0.isEmpty();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

boolean boolean4 = node0.isThrow();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean4);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);

boolean boolean5 = node0.isRegExp();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean5);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);

boolean boolean6 = node0.isSyntheticBlock();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals(42, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertEquals(42, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean6);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);


[MASTER] 09:59:26.146 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:26.414 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:26.679 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:26.998 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:27.245 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:27.469 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:27.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:27.903 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:28.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:28.117 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<45> but was:<44>
[MASTER] 09:59:28.117 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newNumber(4813.0, 505, 1205);
URI uRI0 = MockURI.aFileURI;
MockFile mockFile0 = new MockFile(uRI0);
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
Object object0 = new Object();
mockPrintStream0.println(object0);
PrintStream printStream0 = mockPrintStream0.append('~');
node0.appendStringTree(printStream0);
assertEquals(45L, mockFile0.length());

node0.getDirectives();
node0.isContinue();
node0.getDirectives();
node0.isScript();
assertEquals(505, node0.getLineno());


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/5
* Done!

* Computation finished
