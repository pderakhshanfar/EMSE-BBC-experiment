* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14418
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2085678232
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:41:02.358 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:41:25.773 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:41:30.887 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 622 generations, 247421 statements, best individual has fitness: 2713.0
* Minimizing test suite
[MASTER] 17:52:31.760 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 803
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 639
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 475
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2295
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 594
* Generated 842 tests with total length 10244
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:53:56.434 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6982833333333334% of time used, but only 34/842 tests minimized), falling back to using all assertions
[MASTER] 17:54:14.545 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 17:54:28.882 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 17:54:41.396 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_82_1629222881315/com/google/javascript/rhino/Node_82_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_82_1629222881315/com/google/javascript/rhino/Node_82_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:41.396 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.396 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.400 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 918
[MASTER] 17:54:41.404 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_82_1629222881315/com/google/javascript/rhino/Node_82_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_82_tmp__ESTest extends Node_82_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
22:       assertNotNull(simpleErrorReporter0);
23:       
24:       Node node0 = new Node(2716);
25:       assertNotNull(node0);
26:       assertEquals(53, Node.INPUT_ID);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(37, Node.OPT_ARG_NAME);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(4095, Node.COLUMN_MASK);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(51, Node.STATIC_SOURCE_FILE);
38:       assertEquals(50, Node.FREE_CALL);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
41:       assertEquals(1, Node.DECR_FLAG);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(30, Node.VAR_ARGS_NAME);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
49:       assertEquals(40, Node.ORIGINALNAME_PROP);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
53:       assertEquals(8, Node.FLAG_NO_THROWS);
54:       assertEquals(47, Node.IS_DISPATCHER);
55:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
56:       assertEquals(29, Node.JSDOC_INFO_PROP);
57:       assertEquals(57, Node.LAST_PROP);
58:       assertEquals(55, Node.INFERRED_FUNCTION);
59:       assertEquals(39, Node.EMPTY_BLOCK);
60:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
61:       assertEquals(15, Node.NO_SIDE_EFFECTS);
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isDec());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.hasChildren());
66:       assertFalse(node0.isLabelName());
67:       assertFalse(node0.isAssignAdd());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.hasOneChild());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isNumber());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isAnd());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isNull());
80:       assertFalse(node0.isComma());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isNot());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isTrue());
89:       assertFalse(node0.isWhile());
90:       assertFalse(node0.isVoid());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isGetElem());
94:       assertFalse(node0.isAssign());
95:       assertFalse(node0.isNE());
96:       assertFalse(node0.isFor());
97:       assertFalse(node0.isIf());
98:       assertFalse(node0.isDelProp());
99:       assertFalse(node0.isEmpty());
100:       assertFalse(node0.isIn());
101:       assertFalse(node0.isString());
102:       assertFalse(node0.isGetterDef());
103:       assertFalse(node0.isDebugger());
104:       assertEquals((-1), node0.getCharno());
105:       assertFalse(node0.isInc());
106:       assertEquals(2716, node0.getType());
107:       assertFalse(node0.isSwitch());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isArrayLit());
110:       assertEquals(0, node0.getChildCount());
111:       assertFalse(node0.isFunction());
112:       assertFalse(node0.isFalse());
113:       assertFalse(node0.isParamList());
114:       assertFalse(node0.isSetterDef());
115:       assertFalse(node0.isThis());
116:       assertFalse(node0.isStringKey());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isRegExp());
119:       assertFalse(node0.isScript());
120:       assertFalse(node0.isBlock());
121:       assertFalse(node0.isCase());
122:       assertFalse(node0.isTry());
123:       assertFalse(node0.isCatch());
124:       assertFalse(node0.isInstanceOf());
125:       assertFalse(node0.isHook());
126:       assertFalse(node0.hasMoreThanOneChild());
127:       assertFalse(node0.isWith());
128:       
129:       Node node1 = node0.cloneTree();
130:       assertNotSame(node0, node1);
131:       assertNotSame(node1, node0);
132:       assertNotNull(node1);
133:       assertEquals(53, Node.INPUT_ID);
134:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
135:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
136:       assertEquals(36, Node.QUOTED_PROP);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(37, Node.OPT_ARG_NAME);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(4095, Node.COLUMN_MASK);
143:       assertEquals(12, Node.COLUMN_BITS);
144:       assertEquals(51, Node.STATIC_SOURCE_FILE);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(52, Node.LENGTH);
150:       assertEquals(54, Node.SLASH_V);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(30, Node.VAR_ARGS_NAME);
154:       assertEquals(49, Node.DIRECT_EVAL);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(40, Node.ORIGINALNAME_PROP);
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(2, Node.POST_FLAG);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(8, Node.FLAG_NO_THROWS);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
163:       assertEquals(29, Node.JSDOC_INFO_PROP);
164:       assertEquals(57, Node.LAST_PROP);
165:       assertEquals(55, Node.INFERRED_FUNCTION);
166:       assertEquals(39, Node.EMPTY_BLOCK);
167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
169:       assertEquals(29, Node.JSDOC_INFO_PROP);
170:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
171:       assertEquals(47, Node.IS_DISPATCHER);
172:       assertEquals(2, Node.POST_FLAG);
173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
174:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
175:       assertEquals(46, Node.IS_NAMESPACE);
176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
178:       assertEquals(37, Node.OPT_ARG_NAME);
179:       assertEquals(43, Node.IS_CONSTANT_NAME);
180:       assertEquals(56, Node.CHANGE_TIME);
181:       assertEquals(30, Node.VAR_ARGS_NAME);
182:       assertEquals(36, Node.QUOTED_PROP);
183:       assertEquals(15, Node.NO_SIDE_EFFECTS);
184:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
185:       assertEquals(55, Node.INFERRED_FUNCTION);
186:       assertEquals(52, Node.LENGTH);
187:       assertEquals(53, Node.INPUT_ID);
188:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
189:       assertEquals(57, Node.LAST_PROP);
190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
191:       assertEquals(50, Node.FREE_CALL);
192:       assertEquals(39, Node.EMPTY_BLOCK);
193:       assertEquals(40, Node.ORIGINALNAME_PROP);
194:       assertEquals(8, Node.FLAG_NO_THROWS);
195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
196:       assertEquals(57, Node.REFLECTED_OBJECT);
197:       assertEquals(48, Node.DIRECTIVES);
198:       assertEquals(54, Node.SLASH_V);
199:       assertEquals(49, Node.DIRECT_EVAL);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(12, Node.COLUMN_BITS);
203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertFalse(node0.isTypeOf());
206:       assertFalse(node0.isDec());
207:       assertEquals((-1), node0.getSourcePosition());
208:       assertFalse(node0.hasChildren());
209:       assertFalse(node0.isLabelName());
210:       assertFalse(node0.isAssignAdd());
211:       assertEquals((-1), node0.getLineno());
212:       assertFalse(node0.hasOneChild());
213:       assertFalse(node0.isOr());
214:       assertFalse(node0.isNumber());
215:       assertFalse(node0.isDo());
216:       assertFalse(node0.isNew());
217:       assertFalse(node0.isAnd());
218:       assertFalse(node0.isVar());
219:       assertFalse(node0.isCast());
220:       assertFalse(node0.isLabel());
221:       assertFalse(node0.isContinue());
222:       assertFalse(node0.isNull());
223:       assertFalse(node0.isComma());
224:       assertFalse(node0.isBreak());
225:       assertFalse(node0.isGetProp());
226:       assertFalse(node0.isName());
227:       assertFalse(node0.isAdd());
228:       assertFalse(node0.isNot());
229:       assertFalse(node0.isObjectLit());
230:       assertFalse(node0.isExprResult());
231:       assertFalse(node0.isTrue());
232:       assertFalse(node0.isWhile());
233:       assertFalse(node0.isVoid());
234:       assertFalse(node0.isCall());
235:       assertFalse(node0.isReturn());
236:       assertFalse(node0.isGetElem());
237:       assertFalse(node0.isAssign());
238:       assertFalse(node0.isNE());
239:       assertFalse(node0.isFor());
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isDelProp());
242:       assertFalse(node0.isEmpty());
243:       assertFalse(node0.isIn());
244:       assertFalse(node0.isString());
245:       assertFalse(node0.isGetterDef());
246:       assertFalse(node0.isDebugger());
247:       assertEquals((-1), node0.getCharno());
248:       assertFalse(node0.isInc());
249:       assertEquals(2716, node0.getType());
250:       assertFalse(node0.isSwitch());
251:       assertFalse(node0.isDefaultCase());
252:       assertFalse(node0.isArrayLit());
253:       assertEquals(0, node0.getChildCount());
254:       assertFalse(node0.isFunction());
255:       assertFalse(node0.isFalse());
256:       assertFalse(node0.isParamList());
257:       assertFalse(node0.isSetterDef());
258:       assertFalse(node0.isThis());
259:       assertFalse(node0.isStringKey());
260:       assertFalse(node0.isThrow());
261:       assertFalse(node0.isRegExp());
262:       assertFalse(node0.isScript());
263:       assertFalse(node0.isBlock());
264:       assertFalse(node0.isCase());
265:       assertFalse(node0.isTry());
266:       assertFalse(node0.isCatch());
267:       assertFalse(node0.isInstanceOf());
268:       assertFalse(node0.isHook());
269:       assertFalse(node0.hasMoreThanOneChild());
270:       assertFalse(node0.isWith());
271:       assertFalse(node1.isIn());
272:       assertFalse(node1.isInc());
273:       assertEquals((-1), node1.getCharno());
274:       assertFalse(node1.isGetterDef());
275:       assertFalse(node1.isString());
276:       assertFalse(node1.isCase());
277:       assertFalse(node1.isEmpty());
278:       assertFalse(node1.isHook());
279:       assertFalse(node1.isFor());
280:       assertFalse(node1.isTrue());
281:       assertFalse(node1.isNE());
282:       assertFalse(node1.isComma());
283:       assertFalse(node1.isThis());
284:       assertFalse(node1.isIf());
285:       assertFalse(node1.isRegExp());
286:       assertFalse(node1.isDelProp());
287:       assertFalse(node1.isVoid());
288:       assertFalse(node1.isBreak());
289:       assertFalse(node1.isInstanceOf());
290:       assertFalse(node1.isAnd());
291:       assertFalse(node1.isObjectLit());
292:       assertFalse(node1.isNot());
293:       assertFalse(node1.isSetterDef());
294:       assertFalse(node1.isDebugger());
295:       assertFalse(node1.isGetProp());
296:       assertFalse(node1.isCast());
297:       assertFalse(node1.isFalse());
298:       assertEquals(2716, node1.getType());
299:       assertFalse(node1.isThrow());
300:       assertFalse(node1.isFunction());
301:       assertFalse(node1.hasMoreThanOneChild());
302:       assertFalse(node1.isContinue());
303:       assertFalse(node1.isReturn());
304:       assertFalse(node1.isOr());
305:       assertFalse(node1.isAssignAdd());
306:       assertFalse(node1.isWhile());
307:       assertFalse(node1.isLabel());
308:       assertEquals((-1), node1.getSourcePosition());
309:       assertFalse(node1.isNumber());
310:       assertFalse(node1.isDo());
311:       assertFalse(node1.isNew());
312:       assertFalse(node1.isAdd());
313:       assertFalse(node1.hasOneChild());
314:       assertFalse(node1.isName());
315:       assertFalse(node1.isAssign());
316:       assertFalse(node1.hasChildren());
317:       assertFalse(node1.isNull());
318:       assertFalse(node1.isBlock());
319:       assertFalse(node1.isDec());
320:       assertFalse(node1.isTypeOf());
321:       assertFalse(node1.isWith());
322:       assertEquals((-1), node1.getLineno());
323:       assertFalse(node1.isGetElem());
324:       assertFalse(node1.isCall());
325:       assertFalse(node1.isExprResult());
326:       assertFalse(node1.isCatch());
327:       assertEquals(0, node1.getChildCount());
328:       assertFalse(node1.isDefaultCase());
329:       assertFalse(node1.isTry());
330:       assertFalse(node1.isScript());
331:       assertFalse(node1.isArrayLit());
332:       assertFalse(node1.isStringKey());
333:       assertFalse(node1.isVar());
334:       assertFalse(node1.isSwitch());
335:       assertFalse(node1.isParamList());
336:       assertFalse(node1.isLabelName());
337:       assertFalse(node1.equals((Object)node0));
338:       
339:       node0.setSourceEncodedPositionForTree(57);
340:       assertNotSame(node0, node1);
341:       assertEquals(53, Node.INPUT_ID);
342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
344:       assertEquals(36, Node.QUOTED_PROP);
345:       assertEquals(56, Node.CHANGE_TIME);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(46, Node.IS_NAMESPACE);
350:       assertEquals(4095, Node.COLUMN_MASK);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(50, Node.FREE_CALL);
354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
355:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
356:       assertEquals(1, Node.DECR_FLAG);
357:       assertEquals(52, Node.LENGTH);
358:       assertEquals(54, Node.SLASH_V);
359:       assertEquals(57, Node.REFLECTED_OBJECT);
360:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(48, Node.DIRECTIVES);
366:       assertEquals(2, Node.POST_FLAG);
367:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
368:       assertEquals(8, Node.FLAG_NO_THROWS);
369:       assertEquals(47, Node.IS_DISPATCHER);
370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
371:       assertEquals(29, Node.JSDOC_INFO_PROP);
372:       assertEquals(57, Node.LAST_PROP);
373:       assertEquals(55, Node.INFERRED_FUNCTION);
374:       assertEquals(39, Node.EMPTY_BLOCK);
375:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
377:       assertFalse(node0.isTypeOf());
378:       assertFalse(node0.isDec());
379:       assertFalse(node0.hasChildren());
380:       assertFalse(node0.isLabelName());
381:       assertFalse(node0.isAssignAdd());
382:       assertFalse(node0.hasOneChild());
383:       assertEquals(57, node0.getSourcePosition());
384:       assertFalse(node0.isOr());
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isDo());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isAnd());
389:       assertFalse(node0.isVar());
390:       assertFalse(node0.isCast());
391:       assertFalse(node0.isLabel());
392:       assertFalse(node0.isContinue());
393:       assertFalse(node0.isNull());
394:       assertFalse(node0.isComma());
395:       assertFalse(node0.isBreak());
396:       assertFalse(node0.isGetProp());
397:       assertFalse(node0.isName());
398:       assertEquals(0, node0.getLineno());
399:       assertFalse(node0.isAdd());
400:       assertFalse(node0.isNot());
401:       assertFalse(node0.isObjectLit());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isTrue());
404:       assertFalse(node0.isWhile());
405:       assertFalse(node0.isVoid());
406:       assertFalse(node0.isCall());
407:       assertFalse(node0.isReturn());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isAssign());
410:       assertFalse(node0.isNE());
411:       assertFalse(node0.isFor());
412:       assertFalse(node0.isIf());
413:       assertFalse(node0.isDelProp());
414:       assertFalse(node0.isEmpty());
415:       assertFalse(node0.isIn());
416:       assertFalse(node0.isString());
417:       assertFalse(node0.isGetterDef());
418:       assertFalse(node0.isDebugger());
419:       assertFalse(node0.isInc());
420:       assertEquals(2716, node0.getType());
421:       assertFalse(node0.isSwitch());
422:       assertFalse(node0.isDefaultCase());
423:       assertFalse(node0.isArrayLit());
424:       assertEquals(0, node0.getChildCount());
425:       assertFalse(node0.isFunction());
426:       assertFalse(node0.isFalse());
427:       assertFalse(node0.isParamList());
428:       assertFalse(node0.isSetterDef());
429:       assertFalse(node0.isThis());
430:       assertFalse(node0.isStringKey());
431:       assertFalse(node0.isThrow());
432:       assertEquals(57, node0.getCharno());
433:       assertFalse(node0.isRegExp());
434:       assertFalse(node0.isScript());
435:       assertFalse(node0.isBlock());
436:       assertFalse(node0.isCase());
437:       assertFalse(node0.isTry());
438:       assertFalse(node0.isCatch());
439:       assertFalse(node0.isInstanceOf());
440:       assertFalse(node0.isHook());
441:       assertFalse(node0.hasMoreThanOneChild());
442:       assertFalse(node0.isWith());
443:       assertFalse(node0.equals((Object)node1));
444:       
445:       boolean boolean0 = node1.isCatch();
446:       assertFalse(boolean0);
447:       assertNotSame(node0, node1);
448:       assertNotSame(node1, node0);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(37, Node.OPT_ARG_NAME);
456:       assertEquals(32, Node.INCRDECR_PROP);
457:       assertEquals(46, Node.IS_NAMESPACE);
458:       assertEquals(4095, Node.COLUMN_MASK);
459:       assertEquals(12, Node.COLUMN_BITS);
460:       assertEquals(51, Node.STATIC_SOURCE_FILE);
461:       assertEquals(50, Node.FREE_CALL);
462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
463:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
464:       assertEquals(1, Node.DECR_FLAG);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(54, Node.SLASH_V);
467:       assertEquals(57, Node.REFLECTED_OBJECT);
468:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
469:       assertEquals(30, Node.VAR_ARGS_NAME);
470:       assertEquals(49, Node.DIRECT_EVAL);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(40, Node.ORIGINALNAME_PROP);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(2, Node.POST_FLAG);
475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
476:       assertEquals(8, Node.FLAG_NO_THROWS);
477:       assertEquals(47, Node.IS_DISPATCHER);
478:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
479:       assertEquals(29, Node.JSDOC_INFO_PROP);
480:       assertEquals(57, Node.LAST_PROP);
481:       assertEquals(55, Node.INFERRED_FUNCTION);
482:       assertEquals(39, Node.EMPTY_BLOCK);
483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
485:       assertEquals(29, Node.JSDOC_INFO_PROP);
486:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
487:       assertEquals(47, Node.IS_DISPATCHER);
488:       assertEquals(2, Node.POST_FLAG);
489:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
491:       assertEquals(46, Node.IS_NAMESPACE);
492:       assertEquals(51, Node.STATIC_SOURCE_FILE);
493:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
494:       assertEquals(37, Node.OPT_ARG_NAME);
495:       assertEquals(43, Node.IS_CONSTANT_NAME);
496:       assertEquals(56, Node.CHANGE_TIME);
497:       assertEquals(30, Node.VAR_ARGS_NAME);
498:       assertEquals(36, Node.QUOTED_PROP);
499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
500:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
501:       assertEquals(55, Node.INFERRED_FUNCTION);
502:       assertEquals(52, Node.LENGTH);
503:       assertEquals(53, Node.INPUT_ID);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(57, Node.LAST_PROP);
506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
507:       assertEquals(50, Node.FREE_CALL);
508:       assertEquals(39, Node.EMPTY_BLOCK);
509:       assertEquals(40, Node.ORIGINALNAME_PROP);
510:       assertEquals(8, Node.FLAG_NO_THROWS);
511:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
512:       assertEquals(57, Node.REFLECTED_OBJECT);
513:       assertEquals(48, Node.DIRECTIVES);
514:       assertEquals(54, Node.SLASH_V);
515:       assertEquals(49, Node.DIRECT_EVAL);
516:       assertEquals(4095, Node.COLUMN_MASK);
517:       assertEquals(32, Node.INCRDECR_PROP);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(1, Node.DECR_FLAG);
521:       assertFalse(node0.isTypeOf());
522:       assertFalse(node0.isDec());
523:       assertFalse(node0.hasChildren());
524:       assertFalse(node0.isLabelName());
525:       assertFalse(node0.isAssignAdd());
526:       assertFalse(node0.hasOneChild());
527:       assertEquals(57, node0.getSourcePosition());
528:       assertFalse(node0.isOr());
529:       assertFalse(node0.isNumber());
530:       assertFalse(node0.isDo());
531:       assertFalse(node0.isNew());
532:       assertFalse(node0.isAnd());
533:       assertFalse(node0.isVar());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isLabel());
536:       assertFalse(node0.isContinue());
537:       assertFalse(node0.isNull());
538:       assertFalse(node0.isComma());
539:       assertFalse(node0.isBreak());
540:       assertFalse(node0.isGetProp());
541:       assertFalse(node0.isName());
542:       assertEquals(0, node0.getLineno());
543:       assertFalse(node0.isAdd());
544:       assertFalse(node0.isNot());
545:       assertFalse(node0.isObjectLit());
546:       assertFalse(node0.isExprResult());
547:       assertFalse(node0.isTrue());
548:       assertFalse(node0.isWhile());
549:       assertFalse(node0.isVoid());
550:       assertFalse(node0.isCall());
551:       assertFalse(node0.isReturn());
552:       assertFalse(node0.isGetElem());
553:       assertFalse(node0.isAssign());
554:       assertFalse(node0.isNE());
555:       assertFalse(node0.isFor());
556:       assertFalse(node0.isIf());
557:       assertFalse(node0.isDelProp());
558:       assertFalse(node0.isEmpty());
559:       assertFalse(node0.isIn());
560:       assertFalse(node0.isString());
561:       assertFalse(node0.isGetterDef());
562:       assertFalse(node0.isDebugger());
563:       assertFalse(node0.isInc());
564:       assertEquals(2716, node0.getType());
565:       assertFalse(node0.isSwitch());
566:       assertFalse(node0.isDefaultCase());
567:       assertFalse(node0.isArrayLit());
568:       assertEquals(0, node0.getChildCount());
569:       assertFalse(node0.isFunction());
570:       assertFalse(node0.isFalse());
571:       assertFalse(node0.isParamList());
572:       assertFalse(node0.isSetterDef());
573:       assertFalse(node0.isThis());
574:       assertFalse(node0.isStringKey());
575:       assertFalse(node0.isThrow());
576:       assertEquals(57, node0.getCharno());
577:       assertFalse(node0.isRegExp());
578:       assertFalse(node0.isScript());
579:       assertFalse(node0.isBlock());
580:       assertFalse(node0.isCase());
581:       assertFalse(node0.isTry());
582:       assertFalse(node0.isCatch());
583:       assertFalse(node0.isInstanceOf());
584:       assertFalse(node0.isHook());
585:       assertFalse(node0.hasMoreThanOneChild());
586:       assertFalse(node0.isWith());
587:       assertFalse(node1.isIn());
588:       assertFalse(node1.isInc());
589:       assertEquals((-1), node1.getCharno());
590:       assertFalse(node1.isGetterDef());
591:       assertFalse(node1.isString());
592:       assertFalse(node1.isCase());
593:       assertFalse(node1.isEmpty());
594:       assertFalse(node1.isHook());
595:       assertFalse(node1.isFor());
596:       assertFalse(node1.isTrue());
597:       assertFalse(node1.isNE());
598:       assertFalse(node1.isComma());
599:       assertFalse(node1.isThis());
600:       assertFalse(node1.isIf());
601:       assertFalse(node1.isRegExp());
602:       assertFalse(node1.isDelProp());
603:       assertFalse(node1.isVoid());
604:       assertFalse(node1.isBreak());
605:       assertFalse(node1.isInstanceOf());
606:       assertFalse(node1.isAnd());
607:       assertFalse(node1.isObjectLit());
608:       assertFalse(node1.isNot());
609:       assertFalse(node1.isSetterDef());
610:       assertFalse(node1.isDebugger());
611:       assertFalse(node1.isGetProp());
612:       assertFalse(node1.isCast());
613:       assertFalse(node1.isFalse());
614:       assertEquals(2716, node1.getType());
615:       assertFalse(node1.isThrow());
616:       assertFalse(node1.isFunction());
617:       assertFalse(node1.hasMoreThanOneChild());
618:       assertFalse(node1.isContinue());
619:       assertFalse(node1.isReturn());
620:       assertFalse(node1.isOr());
621:       assertFalse(node1.isAssignAdd());
622:       assertFalse(node1.isWhile());
623:       assertFalse(node1.isLabel());
624:       assertEquals((-1), node1.getSourcePosition());
625:       assertFalse(node1.isNumber());
626:       assertFalse(node1.isDo());
627:       assertFalse(node1.isNew());
628:       assertFalse(node1.isAdd());
629:       assertFalse(node1.hasOneChild());
630:       assertFalse(node1.isName());
631:       assertFalse(node1.isAssign());
632:       assertFalse(node1.hasChildren());
633:       assertFalse(node1.isNull());
634:       assertFalse(node1.isBlock());
635:       assertFalse(node1.isDec());
636:       assertFalse(node1.isTypeOf());
637:       assertFalse(node1.isWith());
638:       assertEquals((-1), node1.getLineno());
639:       assertFalse(node1.isGetElem());
640:       assertFalse(node1.isCall());
641:       assertFalse(node1.isExprResult());
642:       assertFalse(node1.isCatch());
643:       assertEquals(0, node1.getChildCount());
644:       assertFalse(node1.isDefaultCase());
645:       assertFalse(node1.isTry());
646:       assertFalse(node1.isScript());
647:       assertFalse(node1.isArrayLit());
648:       assertFalse(node1.isStringKey());
649:       assertFalse(node1.isVar());
650:       assertFalse(node1.isSwitch());
651:       assertFalse(node1.isParamList());
652:       assertFalse(node1.isLabelName());
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node1.equals((Object)node0));
655:       
656:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
657:       assertNotNull(node_SideEffectFlags0);
658:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
659:       assertEquals(0, node_SideEffectFlags0.valueOf());
660:       
661:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
662:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
663:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
664:       assertNotNull(node_SideEffectFlags1);
665:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
666:       assertEquals(0, node_SideEffectFlags0.valueOf());
667:       assertEquals(0, node_SideEffectFlags1.valueOf());
668:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
669:       
670:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
671:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
672:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
673:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
674:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
675:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
676:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
677:       assertNotNull(node_SideEffectFlags2);
678:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
679:       assertEquals(0, node_SideEffectFlags0.valueOf());
680:       assertEquals(0, node_SideEffectFlags1.valueOf());
681:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
682:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
683:       assertEquals(0, node_SideEffectFlags2.valueOf());
684:       
685:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
686:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
687:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
688:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
689:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
690:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
691:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
692:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
693:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
694:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
695:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
696:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
697:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
698:       assertNotNull(node_SideEffectFlags3);
699:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
700:       assertEquals(0, node_SideEffectFlags0.valueOf());
701:       assertEquals(0, node_SideEffectFlags1.valueOf());
702:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
703:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
704:       assertEquals(0, node_SideEffectFlags2.valueOf());
705:       assertEquals(0, node_SideEffectFlags3.valueOf());
706:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
707:       
708:       Iterable<Node> iterable0 = node1.children();
709:       assertNotSame(node0, node1);
710:       assertNotSame(node1, node0);
711:       assertNotNull(iterable0);
712:       assertEquals(53, Node.INPUT_ID);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
715:       assertEquals(36, Node.QUOTED_PROP);
716:       assertEquals(56, Node.CHANGE_TIME);
717:       assertEquals(43, Node.IS_CONSTANT_NAME);
718:       assertEquals(37, Node.OPT_ARG_NAME);
719:       assertEquals(32, Node.INCRDECR_PROP);
720:       assertEquals(46, Node.IS_NAMESPACE);
721:       assertEquals(4095, Node.COLUMN_MASK);
722:       assertEquals(12, Node.COLUMN_BITS);
723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
724:       assertEquals(50, Node.FREE_CALL);
725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
727:       assertEquals(1, Node.DECR_FLAG);
728:       assertEquals(52, Node.LENGTH);
729:       assertEquals(54, Node.SLASH_V);
730:       assertEquals(57, Node.REFLECTED_OBJECT);
731:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
732:       assertEquals(30, Node.VAR_ARGS_NAME);
733:       assertEquals(49, Node.DIRECT_EVAL);
734:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
735:       assertEquals(40, Node.ORIGINALNAME_PROP);
736:       assertEquals(48, Node.DIRECTIVES);
737:       assertEquals(2, Node.POST_FLAG);
738:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
739:       assertEquals(8, Node.FLAG_NO_THROWS);
740:       assertEquals(47, Node.IS_DISPATCHER);
741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
742:       assertEquals(29, Node.JSDOC_INFO_PROP);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(55, Node.INFERRED_FUNCTION);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(29, Node.JSDOC_INFO_PROP);
749:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
750:       assertEquals(47, Node.IS_DISPATCHER);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
753:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
754:       assertEquals(46, Node.IS_NAMESPACE);
755:       assertEquals(51, Node.STATIC_SOURCE_FILE);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(37, Node.OPT_ARG_NAME);
758:       assertEquals(43, Node.IS_CONSTANT_NAME);
759:       assertEquals(56, Node.CHANGE_TIME);
760:       assertEquals(30, Node.VAR_ARGS_NAME);
761:       assertEquals(36, Node.QUOTED_PROP);
762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
764:       assertEquals(55, Node.INFERRED_FUNCTION);
765:       assertEquals(52, Node.LENGTH);
766:       assertEquals(53, Node.INPUT_ID);
767:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
768:       assertEquals(57, Node.LAST_PROP);
769:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(39, Node.EMPTY_BLOCK);
772:       assertEquals(40, Node.ORIGINALNAME_PROP);
773:       assertEquals(8, Node.FLAG_NO_THROWS);
774:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
775:       assertEquals(57, Node.REFLECTED_OBJECT);
776:       assertEquals(48, Node.DIRECTIVES);
777:       assertEquals(54, Node.SLASH_V);
778:       assertEquals(49, Node.DIRECT_EVAL);
779:       assertEquals(4095, Node.COLUMN_MASK);
780:       assertEquals(32, Node.INCRDECR_PROP);
781:       assertEquals(12, Node.COLUMN_BITS);
782:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertFalse(node0.isTypeOf());
785:       assertFalse(node0.isDec());
786:       assertFalse(node0.hasChildren());
787:       assertFalse(node0.isLabelName());
788:       assertFalse(node0.isAssignAdd());
789:       assertFalse(node0.hasOneChild());
790:       assertEquals(57, node0.getSourcePosition());
791:       assertFalse(node0.isOr());
792:       assertFalse(node0.isNumber());
793:       assertFalse(node0.isDo());
794:       assertFalse(node0.isNew());
795:       assertFalse(node0.isAnd());
796:       assertFalse(node0.isVar());
797:       assertFalse(node0.isCast());
798:       assertFalse(node0.isLabel());
799:       assertFalse(node0.isContinue());
800:       assertFalse(node0.isNull());
801:       assertFalse(node0.isComma());
802:       assertFalse(node0.isBreak());
803:       assertFalse(node0.isGetProp());
804:       assertFalse(node0.isName());
805:       assertEquals(0, node0.getLineno());
806:       assertFalse(node0.isAdd());
807:       assertFalse(node0.isNot());
808:       assertFalse(node0.isObjectLit());
809:       assertFalse(node0.isExprResult());
810:       assertFalse(node0.isTrue());
811:       assertFalse(node0.isWhile());
812:       assertFalse(node0.isVoid());
813:       assertFalse(node0.isCall());
814:       assertFalse(node0.isReturn());
815:       assertFalse(node0.isGetElem());
816:       assertFalse(node0.isAssign());
817:       assertFalse(node0.isNE());
818:       assertFalse(node0.isFor());
819:       assertFalse(node0.isIf());
820:       assertFalse(node0.isDelProp());
821:       assertFalse(node0.isEmpty());
822:       assertFalse(node0.isIn());
823:       assertFalse(node0.isString());
824:       assertFalse(node0.isGetterDef());
825:       assertFalse(node0.isDebugger());
826:       assertFalse(node0.isInc());
827:       assertEquals(2716, node0.getType());
828:       assertFalse(node0.isSwitch());
829:       assertFalse(node0.isDefaultCase());
830:       assertFalse(node0.isArrayLit());
831:       assertEquals(0, node0.getChildCount());
832:       assertFalse(node0.isFunction());
833:       assertFalse(node0.isFalse());
834:       assertFalse(node0.isParamList());
835:       assertFalse(node0.isSetterDef());
836:       assertFalse(node0.isThis());
837:       assertFalse(node0.isStringKey());
838:       assertFalse(node0.isThrow());
839:       assertEquals(57, node0.getCharno());
840:       assertFalse(node0.isRegExp());
841:       assertFalse(node0.isScript());
842:       assertFalse(node0.isBlock());
843:       assertFalse(node0.isCase());
844:       assertFalse(node0.isTry());
845:       assertFalse(node0.isCatch());
846:       assertFalse(node0.isInstanceOf());
847:       assertFalse(node0.isHook());
848:       assertFalse(node0.hasMoreThanOneChild());
849:       assertFalse(node0.isWith());
850:       assertFalse(node1.isIn());
851:       assertFalse(node1.isInc());
852:       assertEquals((-1), node1.getCharno());
853:       assertFalse(node1.isGetterDef());
854:       assertFalse(node1.isString());
855:       assertFalse(node1.isCase());
856:       assertFalse(node1.isEmpty());
857:       assertFalse(node1.isHook());
858:       assertFalse(node1.isFor());
859:       assertFalse(node1.isTrue());
860:       assertFalse(node1.isNE());
861:       assertFalse(node1.isComma());
862:       assertFalse(node1.isThis());
863:       assertFalse(node1.isIf());
864:       assertFalse(node1.isRegExp());
865:       assertFalse(node1.isDelProp());
866:       assertFalse(node1.isVoid());
867:       assertFalse(node1.isBreak());
868:       assertFalse(node1.isInstanceOf());
869:       assertFalse(node1.isAnd());
870:       assertFalse(node1.isObjectLit());
871:       assertFalse(node1.isNot());
872:       assertFalse(node1.isSetterDef());
873:       assertFalse(node1.isDebugger());
874:       assertFalse(node1.isGetProp());
875:       assertFalse(node1.isCast());
876:       assertFalse(node1.isFalse());
877:       assertEquals(2716, node1.getType());
878:       assertFalse(node1.isThrow());
879:       assertFalse(node1.isFunction());
880:       assertFalse(node1.hasMoreThanOneChild());
881:       assertFalse(node1.isContinue());
882:       assertFalse(node1.isReturn());
883:       assertFalse(node1.isOr());
884:       assertFalse(node1.isAssignAdd());
885:       assertFalse(node1.isWhile());
886:       assertFalse(node1.isLabel());
887:       assertEquals((-1), node1.getSourcePosition());
888:       assertFalse(node1.isNumber());
889:       assertFalse(node1.isDo());
890:       assertFalse(node1.isNew());
891:       assertFalse(node1.isAdd());
892:       assertFalse(node1.hasOneChild());
893:       assertFalse(node1.isName());
894:       assertFalse(node1.isAssign());
895:       assertFalse(node1.hasChildren());
896:       assertFalse(node1.isNull());
897:       assertFalse(node1.isBlock());
898:       assertFalse(node1.isDec());
899:       assertFalse(node1.isTypeOf());
900:       assertFalse(node1.isWith());
901:       assertEquals((-1), node1.getLineno());
902:       assertFalse(node1.isGetElem());
903:       assertFalse(node1.isCall());
904:       assertFalse(node1.isExprResult());
905:       assertFalse(node1.isCatch());
906:       assertEquals(0, node1.getChildCount());
907:       assertFalse(node1.isDefaultCase());
908:       assertFalse(node1.isTry());
909:       assertFalse(node1.isScript());
910:       assertFalse(node1.isArrayLit());
911:       assertFalse(node1.isStringKey());
912:       assertFalse(node1.isVar());
913:       assertFalse(node1.isSwitch());
914:       assertFalse(node1.isParamList());
915:       assertFalse(node1.isLabelName());
916:       assertFalse(node0.equals((Object)node1));
917:       assertFalse(node1.equals((Object)node0));
918:       assertFalse(iterable0.contains(node1));
919:   }
920: }
RegularFileObject[/tmp/EvoSuite_82_1629222881315/com/google/javascript/rhino/Node_82_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_82_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_82_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_82_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Objects",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
301:       "com.google.javascript.rhino.jstype.JSType$1",
302:       "com.google.javascript.rhino.jstype.JSType",
303:       "com.google.javascript.rhino.jstype.ObjectType",
304:       "com.google.javascript.rhino.jstype.ProxyObjectType",
305:       "com.google.javascript.rhino.jstype.TemplateType",
306:       "com.google.javascript.rhino.jstype.ValueType",
307:       "com.google.javascript.rhino.jstype.BooleanType",
308:       "com.google.javascript.rhino.jstype.NullType",
309:       "com.google.javascript.rhino.jstype.NumberType",
310:       "com.google.javascript.rhino.jstype.StringType",
311:       "com.google.javascript.rhino.jstype.UnknownType",
312:       "com.google.javascript.rhino.jstype.VoidType",
313:       "com.google.javascript.rhino.jstype.AllType",
314:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
315:       "com.google.common.collect.ImmutableMap",
316:       "com.google.common.collect.ImmutableBiMap",
317:       "com.google.common.collect.EmptyImmutableBiMap",
318:       "com.google.javascript.rhino.jstype.PropertyMap$1",
319:       "com.google.javascript.rhino.jstype.PropertyMap",
320:       "com.google.javascript.rhino.jstype.FunctionType",
321:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.common.collect.Platform",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.common.collect.Iterables",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.common.collect.Sets$ImprovedAbstractSet",
371:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
372:       "com.google.common.collect.Hashing",
373:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
374:       "com.google.javascript.rhino.jstype.JSType$2",
375:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
376:     );
377:   }
378: }

[MASTER] 17:54:41.493 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

Node node0 = new Node(2716);
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertEquals(2716, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());

Node node1 = node0.cloneTree();
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertEquals(2716, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(2716, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.equals((Object)node0));

node0.setSourceEncodedPositionForTree(57);
assertNotSame(node0, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertEquals(57, node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(2716, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals(57, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.equals((Object)node1));

boolean boolean0 = node1.isCatch();
assertFalse(boolean0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertEquals(57, node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(2716, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals(57, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(2716, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Iterable<Node> iterable0 = node1.children();
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertEquals(57, node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(2716, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals(57, node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(2716, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node1));


[MASTER] 17:55:25.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:55:26.244 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/5
* Done!

* Computation finished
