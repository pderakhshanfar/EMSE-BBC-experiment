* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 9427
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2121682777
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:44:47.669 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:44:50.027 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.setSideEffectFlags(I)V
[MASTER] 17:44:50.034 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:50.042 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:50.077 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:50.100 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:50.114 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:50.117 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:50.166 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:44:52.252 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:45:00.610 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 604s and 450 generations, 231194 statements, best individual has fitness: 2816.0
* Minimizing test suite
[MASTER] 17:56:18.464 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 799
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 615
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 467
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2255
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 571
* Generated 751 tests with total length 11546
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:57:33.779 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7539% of time used, but only 30/751 tests minimized), falling back to using all assertions
[MASTER] 17:57:48.716 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 17:57:59.190 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 17:58:02.190 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1629223081927/com/google/javascript/rhino/Node_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1629223081927/com/google/javascript/rhino/Node_35_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:02.190 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:02.190 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:02.196 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1102
[MASTER] 17:58:02.198 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1629223081927/com/google/javascript/rhino/Node_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_35_tmp__ESTest extends Node_35_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("qrvsqkX5OB");
21:       assertNotNull(node0);
22:       assertFalse(node0.isVar());
23:       assertFalse(node0.isCall());
24:       assertFalse(node0.isAdd());
25:       assertFalse(node0.isNull());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isStringKey());
29:       assertEquals(0, node0.getChildCount());
30:       assertFalse(node0.isOr());
31:       assertFalse(node0.isContinue());
32:       assertFalse(node0.isSetterDef());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isNew());
35:       assertFalse(node0.isLabel());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isDo());
38:       assertEquals(40, node0.getType());
39:       assertFalse(node0.isDefaultCase());
40:       assertFalse(node0.isArrayLit());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isNE());
43:       assertFalse(node0.isNumber());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isLabelName());
46:       assertFalse(node0.isIf());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isCase());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isInstanceOf());
52:       assertFalse(node0.isCatch());
53:       assertFalse(node0.isScript());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isThis());
56:       assertFalse(node0.isTry());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isBlock());
59:       assertTrue(node0.isString());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isFalse());
62:       assertFalse(node0.isSwitch());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isIn());
66:       assertFalse(node0.isInc());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isTrue());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isDebugger());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.isVoid());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isTypeOf());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.hasChildren());
84:       assertFalse(node0.isDec());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isWhile());
88:       assertEquals(43, Node.IS_CONSTANT_NAME);
89:       assertEquals(36, Node.QUOTED_PROP);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
96:       assertEquals(39, Node.EMPTY_BLOCK);
97:       assertEquals(56, Node.CHANGE_TIME);
98:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
99:       assertEquals(8, Node.FLAG_NO_THROWS);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(54, Node.SLASH_V);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(1, Node.DECR_FLAG);
116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       
125:       Node node1 = node0.cloneTree();
126:       assertNotNull(node1);
127:       assertFalse(node0.isVar());
128:       assertFalse(node0.isCall());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isName());
132:       assertFalse(node0.isParamList());
133:       assertFalse(node0.isStringKey());
134:       assertEquals(0, node0.getChildCount());
135:       assertFalse(node0.isOr());
136:       assertFalse(node0.isContinue());
137:       assertFalse(node0.isSetterDef());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isNew());
140:       assertFalse(node0.isLabel());
141:       assertFalse(node0.isAssignAdd());
142:       assertFalse(node0.isDo());
143:       assertEquals(40, node0.getType());
144:       assertFalse(node0.isDefaultCase());
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.hasOneChild());
147:       assertFalse(node0.isNE());
148:       assertFalse(node0.isNumber());
149:       assertFalse(node0.isGetterDef());
150:       assertFalse(node0.isLabelName());
151:       assertFalse(node0.isIf());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertEquals((-1), node0.getLineno());
154:       assertFalse(node0.isCase());
155:       assertFalse(node0.isWith());
156:       assertFalse(node0.isInstanceOf());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isScript());
159:       assertFalse(node0.isRegExp());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isTry());
162:       assertFalse(node0.isFor());
163:       assertFalse(node0.isBlock());
164:       assertTrue(node0.isString());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isFalse());
167:       assertFalse(node0.isSwitch());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isBreak());
170:       assertFalse(node0.isIn());
171:       assertFalse(node0.isInc());
172:       assertFalse(node0.isThrow());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isAssign());
176:       assertFalse(node0.isGetElem());
177:       assertFalse(node0.isTrue());
178:       assertFalse(node0.isExprResult());
179:       assertFalse(node0.isDebugger());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isVoid());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isAnd());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isTypeOf());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.hasChildren());
189:       assertFalse(node0.isDec());
190:       assertFalse(node0.isComma());
191:       assertFalse(node0.isReturn());
192:       assertFalse(node0.isWhile());
193:       assertFalse(node1.isObjectLit());
194:       assertFalse(node1.isAnd());
195:       assertFalse(node1.isInstanceOf());
196:       assertFalse(node1.isGetProp());
197:       assertFalse(node1.isScript());
198:       assertFalse(node1.isNot());
199:       assertFalse(node1.isHook());
200:       assertFalse(node1.isGetElem());
201:       assertFalse(node1.isBreak());
202:       assertFalse(node1.hasOneChild());
203:       assertFalse(node1.isThis());
204:       assertFalse(node1.isComma());
205:       assertFalse(node1.isExprResult());
206:       assertFalse(node1.isReturn());
207:       assertFalse(node1.isWith());
208:       assertFalse(node1.hasChildren());
209:       assertFalse(node1.isTypeOf());
210:       assertFalse(node1.isDec());
211:       assertFalse(node1.isAssign());
212:       assertFalse(node1.isContinue());
213:       assertFalse(node1.hasMoreThanOneChild());
214:       assertEquals((-1), node1.getLineno());
215:       assertFalse(node1.isWhile());
216:       assertFalse(node1.isInc());
217:       assertFalse(node1.isNE());
218:       assertFalse(node1.isIn());
219:       assertEquals((-1), node1.getSourcePosition());
220:       assertFalse(node1.isFalse());
221:       assertFalse(node1.isCast());
222:       assertFalse(node1.isThrow());
223:       assertFalse(node1.isFunction());
224:       assertEquals(40, node1.getType());
225:       assertFalse(node1.isCatch());
226:       assertFalse(node1.isDefaultCase());
227:       assertFalse(node1.isTrue());
228:       assertFalse(node1.isDebugger());
229:       assertFalse(node1.isParamList());
230:       assertFalse(node1.isSetterDef());
231:       assertFalse(node1.isNull());
232:       assertFalse(node1.isCall());
233:       assertFalse(node1.isFor());
234:       assertFalse(node1.isDelProp());
235:       assertFalse(node1.isIf());
236:       assertTrue(node1.isString());
237:       assertFalse(node1.isName());
238:       assertFalse(node1.isTry());
239:       assertFalse(node1.isVoid());
240:       assertFalse(node1.isBlock());
241:       assertFalse(node1.isRegExp());
242:       assertFalse(node1.isAssignAdd());
243:       assertFalse(node1.isCase());
244:       assertFalse(node1.isDo());
245:       assertEquals((-1), node1.getCharno());
246:       assertFalse(node1.isSwitch());
247:       assertFalse(node1.isAdd());
248:       assertFalse(node1.isGetterDef());
249:       assertFalse(node1.isNumber());
250:       assertFalse(node1.isOr());
251:       assertFalse(node1.isEmpty());
252:       assertFalse(node1.isStringKey());
253:       assertFalse(node1.isVar());
254:       assertFalse(node1.isArrayLit());
255:       assertFalse(node1.isNew());
256:       assertFalse(node1.isLabelName());
257:       assertFalse(node1.isLabel());
258:       assertEquals(0, node1.getChildCount());
259:       assertFalse(node1.equals((Object)node0));
260:       assertEquals(43, Node.IS_CONSTANT_NAME);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(29, Node.JSDOC_INFO_PROP);
267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
268:       assertEquals(39, Node.EMPTY_BLOCK);
269:       assertEquals(56, Node.CHANGE_TIME);
270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
271:       assertEquals(8, Node.FLAG_NO_THROWS);
272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
273:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
274:       assertEquals(57, Node.REFLECTED_OBJECT);
275:       assertEquals(4095, Node.COLUMN_MASK);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(49, Node.DIRECT_EVAL);
278:       assertEquals(37, Node.OPT_ARG_NAME);
279:       assertEquals(57, Node.LAST_PROP);
280:       assertEquals(30, Node.VAR_ARGS_NAME);
281:       assertEquals(54, Node.SLASH_V);
282:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
284:       assertEquals(12, Node.COLUMN_BITS);
285:       assertEquals(32, Node.INCRDECR_PROP);
286:       assertEquals(52, Node.LENGTH);
287:       assertEquals(1, Node.DECR_FLAG);
288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
289:       assertEquals(15, Node.NO_SIDE_EFFECTS);
290:       assertEquals(2, Node.POST_FLAG);
291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
292:       assertEquals(50, Node.FREE_CALL);
293:       assertEquals(47, Node.IS_DISPATCHER);
294:       assertEquals(46, Node.IS_NAMESPACE);
295:       assertEquals(40, Node.ORIGINALNAME_PROP);
296:       assertEquals(2, Node.POST_FLAG);
297:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(37, Node.OPT_ARG_NAME);
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
302:       assertEquals(12, Node.COLUMN_BITS);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(32, Node.INCRDECR_PROP);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(40, Node.ORIGINALNAME_PROP);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(54, Node.SLASH_V);
311:       assertEquals(43, Node.IS_CONSTANT_NAME);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(8, Node.FLAG_NO_THROWS);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(50, Node.FREE_CALL);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(36, Node.QUOTED_PROP);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(57, Node.REFLECTED_OBJECT);
329:       assertEquals(49, Node.DIRECT_EVAL);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(56, Node.CHANGE_TIME);
332:       assertNotSame(node0, node1);
333:       assertNotSame(node1, node0);
334:       
335:       node1.type = 0;
336:       assertFalse(node0.isVar());
337:       assertFalse(node0.isCall());
338:       assertFalse(node0.isAdd());
339:       assertFalse(node0.isNull());
340:       assertFalse(node0.isName());
341:       assertFalse(node0.isParamList());
342:       assertFalse(node0.isStringKey());
343:       assertEquals(0, node0.getChildCount());
344:       assertFalse(node0.isOr());
345:       assertFalse(node0.isContinue());
346:       assertFalse(node0.isSetterDef());
347:       assertFalse(node0.isFunction());
348:       assertFalse(node0.isNew());
349:       assertFalse(node0.isLabel());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isDo());
352:       assertEquals(40, node0.getType());
353:       assertFalse(node0.isDefaultCase());
354:       assertFalse(node0.isArrayLit());
355:       assertFalse(node0.hasOneChild());
356:       assertFalse(node0.isNE());
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isGetterDef());
359:       assertFalse(node0.isLabelName());
360:       assertFalse(node0.isIf());
361:       assertFalse(node0.hasMoreThanOneChild());
362:       assertEquals((-1), node0.getLineno());
363:       assertFalse(node0.isCase());
364:       assertFalse(node0.isWith());
365:       assertFalse(node0.isInstanceOf());
366:       assertFalse(node0.isCatch());
367:       assertFalse(node0.isScript());
368:       assertFalse(node0.isRegExp());
369:       assertFalse(node0.isThis());
370:       assertFalse(node0.isTry());
371:       assertFalse(node0.isFor());
372:       assertFalse(node0.isBlock());
373:       assertTrue(node0.isString());
374:       assertFalse(node0.isHook());
375:       assertFalse(node0.isFalse());
376:       assertFalse(node0.isSwitch());
377:       assertEquals((-1), node0.getCharno());
378:       assertFalse(node0.isBreak());
379:       assertFalse(node0.isIn());
380:       assertFalse(node0.isInc());
381:       assertFalse(node0.isThrow());
382:       assertFalse(node0.isCast());
383:       assertFalse(node0.isEmpty());
384:       assertFalse(node0.isAssign());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isTrue());
387:       assertFalse(node0.isExprResult());
388:       assertFalse(node0.isDebugger());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isVoid());
391:       assertEquals((-1), node0.getSourcePosition());
392:       assertFalse(node0.isAnd());
393:       assertFalse(node0.isObjectLit());
394:       assertFalse(node0.isNot());
395:       assertFalse(node0.isTypeOf());
396:       assertFalse(node0.isGetProp());
397:       assertFalse(node0.hasChildren());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.isComma());
400:       assertFalse(node0.isReturn());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node1.isObjectLit());
403:       assertFalse(node1.isAnd());
404:       assertFalse(node1.isInstanceOf());
405:       assertFalse(node1.isGetProp());
406:       assertFalse(node1.isScript());
407:       assertFalse(node1.isNot());
408:       assertFalse(node1.isHook());
409:       assertFalse(node1.isGetElem());
410:       assertFalse(node1.isBreak());
411:       assertFalse(node1.hasOneChild());
412:       assertFalse(node1.isThis());
413:       assertFalse(node1.isComma());
414:       assertFalse(node1.isExprResult());
415:       assertEquals(0, node1.getType());
416:       assertFalse(node1.isReturn());
417:       assertFalse(node1.isWith());
418:       assertFalse(node1.hasChildren());
419:       assertFalse(node1.isTypeOf());
420:       assertFalse(node1.isDec());
421:       assertFalse(node1.isAssign());
422:       assertFalse(node1.isContinue());
423:       assertFalse(node1.hasMoreThanOneChild());
424:       assertEquals((-1), node1.getLineno());
425:       assertFalse(node1.isWhile());
426:       assertFalse(node1.isInc());
427:       assertFalse(node1.isNE());
428:       assertFalse(node1.isString());
429:       assertFalse(node1.isIn());
430:       assertEquals((-1), node1.getSourcePosition());
431:       assertFalse(node1.isFalse());
432:       assertFalse(node1.isCast());
433:       assertFalse(node1.isThrow());
434:       assertFalse(node1.isFunction());
435:       assertFalse(node1.isCatch());
436:       assertFalse(node1.isDefaultCase());
437:       assertFalse(node1.isTrue());
438:       assertFalse(node1.isDebugger());
439:       assertFalse(node1.isParamList());
440:       assertFalse(node1.isSetterDef());
441:       assertFalse(node1.isNull());
442:       assertFalse(node1.isCall());
443:       assertFalse(node1.isFor());
444:       assertFalse(node1.isDelProp());
445:       assertFalse(node1.isIf());
446:       assertFalse(node1.isName());
447:       assertFalse(node1.isTry());
448:       assertFalse(node1.isVoid());
449:       assertFalse(node1.isBlock());
450:       assertFalse(node1.isRegExp());
451:       assertFalse(node1.isAssignAdd());
452:       assertFalse(node1.isCase());
453:       assertFalse(node1.isDo());
454:       assertEquals((-1), node1.getCharno());
455:       assertFalse(node1.isSwitch());
456:       assertFalse(node1.isAdd());
457:       assertFalse(node1.isGetterDef());
458:       assertFalse(node1.isNumber());
459:       assertFalse(node1.isOr());
460:       assertFalse(node1.isEmpty());
461:       assertFalse(node1.isStringKey());
462:       assertFalse(node1.isVar());
463:       assertFalse(node1.isArrayLit());
464:       assertFalse(node1.isNew());
465:       assertFalse(node1.isLabelName());
466:       assertFalse(node1.isLabel());
467:       assertEquals(0, node1.getChildCount());
468:       
469:       node0.setQuotedString();
470:       assertFalse(node0.isVar());
471:       assertFalse(node0.isCall());
472:       assertFalse(node0.isAdd());
473:       assertFalse(node0.isNull());
474:       assertFalse(node0.isName());
475:       assertFalse(node0.isParamList());
476:       assertFalse(node0.isStringKey());
477:       assertEquals(0, node0.getChildCount());
478:       assertFalse(node0.isOr());
479:       assertFalse(node0.isContinue());
480:       assertFalse(node0.isSetterDef());
481:       assertFalse(node0.isFunction());
482:       assertFalse(node0.isNew());
483:       assertFalse(node0.isLabel());
484:       assertFalse(node0.isAssignAdd());
485:       assertFalse(node0.isDo());
486:       assertEquals(40, node0.getType());
487:       assertFalse(node0.isDefaultCase());
488:       assertFalse(node0.isArrayLit());
489:       assertFalse(node0.hasOneChild());
490:       assertFalse(node0.isNE());
491:       assertFalse(node0.isNumber());
492:       assertFalse(node0.isGetterDef());
493:       assertFalse(node0.isLabelName());
494:       assertFalse(node0.isIf());
495:       assertFalse(node0.hasMoreThanOneChild());
496:       assertEquals((-1), node0.getLineno());
497:       assertFalse(node0.isCase());
498:       assertFalse(node0.isWith());
499:       assertFalse(node0.isInstanceOf());
500:       assertFalse(node0.isCatch());
501:       assertFalse(node0.isScript());
502:       assertFalse(node0.isRegExp());
503:       assertFalse(node0.isThis());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.isBlock());
507:       assertTrue(node0.isString());
508:       assertFalse(node0.isHook());
509:       assertFalse(node0.isFalse());
510:       assertFalse(node0.isSwitch());
511:       assertEquals((-1), node0.getCharno());
512:       assertFalse(node0.isBreak());
513:       assertFalse(node0.isIn());
514:       assertFalse(node0.isInc());
515:       assertFalse(node0.isThrow());
516:       assertFalse(node0.isCast());
517:       assertFalse(node0.isEmpty());
518:       assertFalse(node0.isAssign());
519:       assertFalse(node0.isGetElem());
520:       assertFalse(node0.isTrue());
521:       assertFalse(node0.isExprResult());
522:       assertFalse(node0.isDebugger());
523:       assertFalse(node0.isDelProp());
524:       assertFalse(node0.isVoid());
525:       assertEquals((-1), node0.getSourcePosition());
526:       assertFalse(node0.isAnd());
527:       assertFalse(node0.isObjectLit());
528:       assertFalse(node0.isNot());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isGetProp());
531:       assertFalse(node0.hasChildren());
532:       assertFalse(node0.isDec());
533:       assertFalse(node0.isComma());
534:       assertFalse(node0.isReturn());
535:       assertFalse(node0.isWhile());
536:       assertFalse(node0.equals((Object)node1));
537:       assertEquals(43, Node.IS_CONSTANT_NAME);
538:       assertEquals(36, Node.QUOTED_PROP);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(55, Node.INFERRED_FUNCTION);
541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
542:       assertEquals(53, Node.INPUT_ID);
543:       assertEquals(29, Node.JSDOC_INFO_PROP);
544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
545:       assertEquals(39, Node.EMPTY_BLOCK);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(8, Node.FLAG_NO_THROWS);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(4095, Node.COLUMN_MASK);
553:       assertEquals(48, Node.DIRECTIVES);
554:       assertEquals(49, Node.DIRECT_EVAL);
555:       assertEquals(37, Node.OPT_ARG_NAME);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
560:       assertEquals(51, Node.STATIC_SOURCE_FILE);
561:       assertEquals(12, Node.COLUMN_BITS);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertEquals(52, Node.LENGTH);
564:       assertEquals(1, Node.DECR_FLAG);
565:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(2, Node.POST_FLAG);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(47, Node.IS_DISPATCHER);
571:       assertEquals(46, Node.IS_NAMESPACE);
572:       assertEquals(40, Node.ORIGINALNAME_PROP);
573:       assertNotSame(node0, node1);
574:       
575:       Node node2 = node0.copyInformationFrom(node1);
576:       assertNotNull(node2);
577:       assertFalse(node0.isVar());
578:       assertFalse(node0.isCall());
579:       assertFalse(node0.isAdd());
580:       assertFalse(node0.isNull());
581:       assertFalse(node0.isName());
582:       assertFalse(node0.isParamList());
583:       assertFalse(node0.isStringKey());
584:       assertEquals(0, node0.getChildCount());
585:       assertFalse(node0.isOr());
586:       assertFalse(node0.isContinue());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isFunction());
589:       assertFalse(node0.isNew());
590:       assertFalse(node0.isLabel());
591:       assertFalse(node0.isAssignAdd());
592:       assertFalse(node0.isDo());
593:       assertEquals(40, node0.getType());
594:       assertFalse(node0.isDefaultCase());
595:       assertFalse(node0.isArrayLit());
596:       assertFalse(node0.hasOneChild());
597:       assertFalse(node0.isNE());
598:       assertFalse(node0.isNumber());
599:       assertFalse(node0.isGetterDef());
600:       assertFalse(node0.isLabelName());
601:       assertFalse(node0.isIf());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertEquals((-1), node0.getLineno());
604:       assertFalse(node0.isCase());
605:       assertFalse(node0.isWith());
606:       assertFalse(node0.isInstanceOf());
607:       assertFalse(node0.isCatch());
608:       assertFalse(node0.isScript());
609:       assertFalse(node0.isRegExp());
610:       assertFalse(node0.isThis());
611:       assertFalse(node0.isTry());
612:       assertFalse(node0.isFor());
613:       assertFalse(node0.isBlock());
614:       assertTrue(node0.isString());
615:       assertFalse(node0.isHook());
616:       assertFalse(node0.isFalse());
617:       assertFalse(node0.isSwitch());
618:       assertEquals((-1), node0.getCharno());
619:       assertFalse(node0.isBreak());
620:       assertFalse(node0.isIn());
621:       assertFalse(node0.isInc());
622:       assertFalse(node0.isThrow());
623:       assertFalse(node0.isCast());
624:       assertFalse(node0.isEmpty());
625:       assertFalse(node0.isAssign());
626:       assertFalse(node0.isGetElem());
627:       assertFalse(node0.isTrue());
628:       assertFalse(node0.isExprResult());
629:       assertFalse(node0.isDebugger());
630:       assertFalse(node0.isDelProp());
631:       assertFalse(node0.isVoid());
632:       assertEquals((-1), node0.getSourcePosition());
633:       assertFalse(node0.isAnd());
634:       assertFalse(node0.isObjectLit());
635:       assertFalse(node0.isNot());
636:       assertFalse(node0.isTypeOf());
637:       assertFalse(node0.isGetProp());
638:       assertFalse(node0.hasChildren());
639:       assertFalse(node0.isDec());
640:       assertFalse(node0.isComma());
641:       assertFalse(node0.isReturn());
642:       assertFalse(node0.isWhile());
643:       assertFalse(node1.isObjectLit());
644:       assertFalse(node1.isAnd());
645:       assertFalse(node1.isInstanceOf());
646:       assertFalse(node1.isGetProp());
647:       assertFalse(node1.isScript());
648:       assertFalse(node1.isNot());
649:       assertFalse(node1.isHook());
650:       assertFalse(node1.isGetElem());
651:       assertFalse(node1.isBreak());
652:       assertFalse(node1.hasOneChild());
653:       assertFalse(node1.isThis());
654:       assertFalse(node1.isComma());
655:       assertFalse(node1.isExprResult());
656:       assertEquals(0, node1.getType());
657:       assertFalse(node1.isReturn());
658:       assertFalse(node1.isWith());
659:       assertFalse(node1.hasChildren());
660:       assertFalse(node1.isTypeOf());
661:       assertFalse(node1.isDec());
662:       assertFalse(node1.isAssign());
663:       assertFalse(node1.isContinue());
664:       assertFalse(node1.hasMoreThanOneChild());
665:       assertEquals((-1), node1.getLineno());
666:       assertFalse(node1.isWhile());
667:       assertFalse(node1.isInc());
668:       assertFalse(node1.isNE());
669:       assertFalse(node1.isString());
670:       assertFalse(node1.isIn());
671:       assertEquals((-1), node1.getSourcePosition());
672:       assertFalse(node1.isFalse());
673:       assertFalse(node1.isCast());
674:       assertFalse(node1.isThrow());
675:       assertFalse(node1.isFunction());
676:       assertFalse(node1.isCatch());
677:       assertFalse(node1.isDefaultCase());
678:       assertFalse(node1.isTrue());
679:       assertFalse(node1.isDebugger());
680:       assertFalse(node1.isParamList());
681:       assertFalse(node1.isSetterDef());
682:       assertFalse(node1.isNull());
683:       assertFalse(node1.isCall());
684:       assertFalse(node1.isFor());
685:       assertFalse(node1.isDelProp());
686:       assertFalse(node1.isIf());
687:       assertFalse(node1.isName());
688:       assertFalse(node1.isTry());
689:       assertFalse(node1.isVoid());
690:       assertFalse(node1.isBlock());
691:       assertFalse(node1.isRegExp());
692:       assertFalse(node1.isAssignAdd());
693:       assertFalse(node1.isCase());
694:       assertFalse(node1.isDo());
695:       assertEquals((-1), node1.getCharno());
696:       assertFalse(node1.isSwitch());
697:       assertFalse(node1.isAdd());
698:       assertFalse(node1.isGetterDef());
699:       assertFalse(node1.isNumber());
700:       assertFalse(node1.isOr());
701:       assertFalse(node1.isEmpty());
702:       assertFalse(node1.isStringKey());
703:       assertFalse(node1.isVar());
704:       assertFalse(node1.isArrayLit());
705:       assertFalse(node1.isNew());
706:       assertFalse(node1.isLabelName());
707:       assertFalse(node1.isLabel());
708:       assertEquals(0, node1.getChildCount());
709:       assertFalse(node2.isBreak());
710:       assertFalse(node2.isFalse());
711:       assertFalse(node2.isThis());
712:       assertFalse(node2.isComma());
713:       assertFalse(node2.isHook());
714:       assertFalse(node2.isThrow());
715:       assertFalse(node2.isInc());
716:       assertFalse(node2.isGetProp());
717:       assertFalse(node2.isNot());
718:       assertFalse(node2.isObjectLit());
719:       assertFalse(node2.isSwitch());
720:       assertFalse(node2.isAnd());
721:       assertEquals((-1), node2.getCharno());
722:       assertFalse(node2.isCast());
723:       assertFalse(node2.isLabelName());
724:       assertFalse(node2.isNumber());
725:       assertFalse(node2.isIf());
726:       assertFalse(node2.isGetterDef());
727:       assertFalse(node2.isNE());
728:       assertFalse(node2.isFor());
729:       assertFalse(node2.hasOneChild());
730:       assertFalse(node2.isIn());
731:       assertFalse(node2.isTry());
732:       assertFalse(node2.isScript());
733:       assertFalse(node2.isWith());
734:       assertFalse(node2.isCase());
735:       assertFalse(node2.isRegExp());
736:       assertFalse(node2.isBlock());
737:       assertEquals((-1), node2.getLineno());
738:       assertFalse(node2.hasMoreThanOneChild());
739:       assertFalse(node2.isCatch());
740:       assertFalse(node2.isInstanceOf());
741:       assertFalse(node2.isName());
742:       assertFalse(node2.isParamList());
743:       assertFalse(node2.isStringKey());
744:       assertFalse(node2.isVar());
745:       assertFalse(node2.isNull());
746:       assertFalse(node2.isNew());
747:       assertTrue(node2.isString());
748:       assertFalse(node2.isSetterDef());
749:       assertFalse(node2.isAdd());
750:       assertFalse(node2.isDo());
751:       assertFalse(node2.isDefaultCase());
752:       assertFalse(node2.isDebugger());
753:       assertEquals(40, node2.getType());
754:       assertFalse(node2.isLabel());
755:       assertEquals(0, node2.getChildCount());
756:       assertFalse(node2.isFunction());
757:       assertFalse(node2.isContinue());
758:       assertFalse(node2.isArrayLit());
759:       assertFalse(node2.isAssign());
760:       assertFalse(node2.isDec());
761:       assertFalse(node2.isTypeOf());
762:       assertFalse(node2.isDelProp());
763:       assertEquals((-1), node2.getSourcePosition());
764:       assertFalse(node2.hasChildren());
765:       assertFalse(node2.isAssignAdd());
766:       assertFalse(node2.isOr());
767:       assertFalse(node2.isEmpty());
768:       assertFalse(node2.isWhile());
769:       assertFalse(node2.isTrue());
770:       assertFalse(node2.isReturn());
771:       assertFalse(node2.isVoid());
772:       assertFalse(node2.isGetElem());
773:       assertFalse(node2.isCall());
774:       assertFalse(node2.isExprResult());
775:       assertFalse(node0.equals((Object)node1));
776:       assertFalse(node1.equals((Object)node0));
777:       assertFalse(node2.equals((Object)node1));
778:       assertEquals(43, Node.IS_CONSTANT_NAME);
779:       assertEquals(36, Node.QUOTED_PROP);
780:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
781:       assertEquals(55, Node.INFERRED_FUNCTION);
782:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
783:       assertEquals(53, Node.INPUT_ID);
784:       assertEquals(29, Node.JSDOC_INFO_PROP);
785:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
786:       assertEquals(39, Node.EMPTY_BLOCK);
787:       assertEquals(56, Node.CHANGE_TIME);
788:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
789:       assertEquals(8, Node.FLAG_NO_THROWS);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
792:       assertEquals(57, Node.REFLECTED_OBJECT);
793:       assertEquals(4095, Node.COLUMN_MASK);
794:       assertEquals(48, Node.DIRECTIVES);
795:       assertEquals(49, Node.DIRECT_EVAL);
796:       assertEquals(37, Node.OPT_ARG_NAME);
797:       assertEquals(57, Node.LAST_PROP);
798:       assertEquals(30, Node.VAR_ARGS_NAME);
799:       assertEquals(54, Node.SLASH_V);
800:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
801:       assertEquals(51, Node.STATIC_SOURCE_FILE);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(32, Node.INCRDECR_PROP);
804:       assertEquals(52, Node.LENGTH);
805:       assertEquals(1, Node.DECR_FLAG);
806:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
807:       assertEquals(15, Node.NO_SIDE_EFFECTS);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
810:       assertEquals(50, Node.FREE_CALL);
811:       assertEquals(47, Node.IS_DISPATCHER);
812:       assertEquals(46, Node.IS_NAMESPACE);
813:       assertEquals(40, Node.ORIGINALNAME_PROP);
814:       assertEquals(2, Node.POST_FLAG);
815:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
816:       assertEquals(47, Node.IS_DISPATCHER);
817:       assertEquals(37, Node.OPT_ARG_NAME);
818:       assertEquals(29, Node.JSDOC_INFO_PROP);
819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
820:       assertEquals(12, Node.COLUMN_BITS);
821:       assertEquals(1, Node.DECR_FLAG);
822:       assertEquals(32, Node.INCRDECR_PROP);
823:       assertEquals(57, Node.LAST_PROP);
824:       assertEquals(30, Node.VAR_ARGS_NAME);
825:       assertEquals(40, Node.ORIGINALNAME_PROP);
826:       assertEquals(51, Node.STATIC_SOURCE_FILE);
827:       assertEquals(46, Node.IS_NAMESPACE);
828:       assertEquals(54, Node.SLASH_V);
829:       assertEquals(43, Node.IS_CONSTANT_NAME);
830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
831:       assertEquals(8, Node.FLAG_NO_THROWS);
832:       assertEquals(39, Node.EMPTY_BLOCK);
833:       assertEquals(48, Node.DIRECTIVES);
834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:       assertEquals(50, Node.FREE_CALL);
836:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertEquals(55, Node.INFERRED_FUNCTION);
839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
842:       assertEquals(36, Node.QUOTED_PROP);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(53, Node.INPUT_ID);
845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
846:       assertEquals(57, Node.REFLECTED_OBJECT);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
849:       assertEquals(56, Node.CHANGE_TIME);
850:       assertEquals(53, Node.INPUT_ID);
851:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
852:       assertEquals(2, Node.POST_FLAG);
853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
854:       assertEquals(4095, Node.COLUMN_MASK);
855:       assertEquals(47, Node.IS_DISPATCHER);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(39, Node.EMPTY_BLOCK);
858:       assertEquals(37, Node.OPT_ARG_NAME);
859:       assertEquals(48, Node.DIRECTIVES);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(29, Node.JSDOC_INFO_PROP);
862:       assertEquals(49, Node.DIRECT_EVAL);
863:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
864:       assertEquals(55, Node.INFERRED_FUNCTION);
865:       assertEquals(56, Node.CHANGE_TIME);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(8, Node.FLAG_NO_THROWS);
868:       assertEquals(57, Node.REFLECTED_OBJECT);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
873:       assertEquals(57, Node.LAST_PROP);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
876:       assertEquals(12, Node.COLUMN_BITS);
877:       assertEquals(30, Node.VAR_ARGS_NAME);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
880:       assertEquals(32, Node.INCRDECR_PROP);
881:       assertEquals(1, Node.DECR_FLAG);
882:       assertEquals(50, Node.FREE_CALL);
883:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
884:       assertEquals(43, Node.IS_CONSTANT_NAME);
885:       assertEquals(51, Node.STATIC_SOURCE_FILE);
886:       assertNotSame(node0, node1);
887:       assertSame(node0, node2);
888:       assertNotSame(node1, node2);
889:       assertNotSame(node1, node0);
890:       assertSame(node2, node0);
891:       assertNotSame(node2, node1);
892:       
893:       Iterable<Node> iterable0 = node1.children();
894:       assertNotNull(iterable0);
895:       assertFalse(node0.isVar());
896:       assertFalse(node0.isCall());
897:       assertFalse(node0.isAdd());
898:       assertFalse(node0.isNull());
899:       assertFalse(node0.isName());
900:       assertFalse(node0.isParamList());
901:       assertFalse(node0.isStringKey());
902:       assertEquals(0, node0.getChildCount());
903:       assertFalse(node0.isOr());
904:       assertFalse(node0.isContinue());
905:       assertFalse(node0.isSetterDef());
906:       assertFalse(node0.isFunction());
907:       assertFalse(node0.isNew());
908:       assertFalse(node0.isLabel());
909:       assertFalse(node0.isAssignAdd());
910:       assertFalse(node0.isDo());
911:       assertEquals(40, node0.getType());
912:       assertFalse(node0.isDefaultCase());
913:       assertFalse(node0.isArrayLit());
914:       assertFalse(node0.hasOneChild());
915:       assertFalse(node0.isNE());
916:       assertFalse(node0.isNumber());
917:       assertFalse(node0.isGetterDef());
918:       assertFalse(node0.isLabelName());
919:       assertFalse(node0.isIf());
920:       assertFalse(node0.hasMoreThanOneChild());
921:       assertEquals((-1), node0.getLineno());
922:       assertFalse(node0.isCase());
923:       assertFalse(node0.isWith());
924:       assertFalse(node0.isInstanceOf());
925:       assertFalse(node0.isCatch());
926:       assertFalse(node0.isScript());
927:       assertFalse(node0.isRegExp());
928:       assertFalse(node0.isThis());
929:       assertFalse(node0.isTry());
930:       assertFalse(node0.isFor());
931:       assertFalse(node0.isBlock());
932:       assertTrue(node0.isString());
933:       assertFalse(node0.isHook());
934:       assertFalse(node0.isFalse());
935:       assertFalse(node0.isSwitch());
936:       assertEquals((-1), node0.getCharno());
937:       assertFalse(node0.isBreak());
938:       assertFalse(node0.isIn());
939:       assertFalse(node0.isInc());
940:       assertFalse(node0.isThrow());
941:       assertFalse(node0.isCast());
942:       assertFalse(node0.isEmpty());
943:       assertFalse(node0.isAssign());
944:       assertFalse(node0.isGetElem());
945:       assertFalse(node0.isTrue());
946:       assertFalse(node0.isExprResult());
947:       assertFalse(node0.isDebugger());
948:       assertFalse(node0.isDelProp());
949:       assertFalse(node0.isVoid());
950:       assertEquals((-1), node0.getSourcePosition());
951:       assertFalse(node0.isAnd());
952:       assertFalse(node0.isObjectLit());
953:       assertFalse(node0.isNot());
954:       assertFalse(node0.isTypeOf());
955:       assertFalse(node0.isGetProp());
956:       assertFalse(node0.hasChildren());
957:       assertFalse(node0.isDec());
958:       assertFalse(node0.isComma());
959:       assertFalse(node0.isReturn());
960:       assertFalse(node0.isWhile());
961:       assertFalse(node1.isObjectLit());
962:       assertFalse(node1.isAnd());
963:       assertFalse(node1.isInstanceOf());
964:       assertFalse(node1.isGetProp());
965:       assertFalse(node1.isScript());
966:       assertFalse(node1.isNot());
967:       assertFalse(node1.isHook());
968:       assertFalse(node1.isGetElem());
969:       assertFalse(node1.isBreak());
970:       assertFalse(node1.hasOneChild());
971:       assertFalse(node1.isThis());
972:       assertFalse(node1.isComma());
973:       assertFalse(node1.isExprResult());
974:       assertEquals(0, node1.getType());
975:       assertFalse(node1.isReturn());
976:       assertFalse(node1.isWith());
977:       assertFalse(node1.hasChildren());
978:       assertFalse(node1.isTypeOf());
979:       assertFalse(node1.isDec());
980:       assertFalse(node1.isAssign());
981:       assertFalse(node1.isContinue());
982:       assertFalse(node1.hasMoreThanOneChild());
983:       assertEquals((-1), node1.getLineno());
984:       assertFalse(node1.isWhile());
985:       assertFalse(node1.isInc());
986:       assertFalse(node1.isNE());
987:       assertFalse(node1.isString());
988:       assertFalse(node1.isIn());
989:       assertEquals((-1), node1.getSourcePosition());
990:       assertFalse(node1.isFalse());
991:       assertFalse(node1.isCast());
992:       assertFalse(node1.isThrow());
993:       assertFalse(node1.isFunction());
994:       assertFalse(node1.isCatch());
995:       assertFalse(node1.isDefaultCase());
996:       assertFalse(node1.isTrue());
997:       assertFalse(node1.isDebugger());
998:       assertFalse(node1.isParamList());
999:       assertFalse(node1.isSetterDef());
1000:       assertFalse(node1.isNull());
1001:       assertFalse(node1.isCall());
1002:       assertFalse(node1.isFor());
1003:       assertFalse(node1.isDelProp());
1004:       assertFalse(node1.isIf());
1005:       assertFalse(node1.isName());
1006:       assertFalse(node1.isTry());
1007:       assertFalse(node1.isVoid());
1008:       assertFalse(node1.isBlock());
1009:       assertFalse(node1.isRegExp());
1010:       assertFalse(node1.isAssignAdd());
1011:       assertFalse(node1.isCase());
1012:       assertFalse(node1.isDo());
1013:       assertEquals((-1), node1.getCharno());
1014:       assertFalse(node1.isSwitch());
1015:       assertFalse(node1.isAdd());
1016:       assertFalse(node1.isGetterDef());
1017:       assertFalse(node1.isNumber());
1018:       assertFalse(node1.isOr());
1019:       assertFalse(node1.isEmpty());
1020:       assertFalse(node1.isStringKey());
1021:       assertFalse(node1.isVar());
1022:       assertFalse(node1.isArrayLit());
1023:       assertFalse(node1.isNew());
1024:       assertFalse(node1.isLabelName());
1025:       assertFalse(node1.isLabel());
1026:       assertEquals(0, node1.getChildCount());
1027:       assertFalse(node0.equals((Object)node1));
1028:       assertFalse(node1.equals((Object)node2));
1029:       assertFalse(node1.equals((Object)node0));
1030:       assertEquals(43, Node.IS_CONSTANT_NAME);
1031:       assertEquals(36, Node.QUOTED_PROP);
1032:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1033:       assertEquals(55, Node.INFERRED_FUNCTION);
1034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1035:       assertEquals(53, Node.INPUT_ID);
1036:       assertEquals(29, Node.JSDOC_INFO_PROP);
1037:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1038:       assertEquals(39, Node.EMPTY_BLOCK);
1039:       assertEquals(56, Node.CHANGE_TIME);
1040:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1041:       assertEquals(8, Node.FLAG_NO_THROWS);
1042:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1043:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1044:       assertEquals(57, Node.REFLECTED_OBJECT);
1045:       assertEquals(4095, Node.COLUMN_MASK);
1046:       assertEquals(48, Node.DIRECTIVES);
1047:       assertEquals(49, Node.DIRECT_EVAL);
1048:       assertEquals(37, Node.OPT_ARG_NAME);
1049:       assertEquals(57, Node.LAST_PROP);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(54, Node.SLASH_V);
1052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1053:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(32, Node.INCRDECR_PROP);
1056:       assertEquals(52, Node.LENGTH);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1060:       assertEquals(2, Node.POST_FLAG);
1061:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1062:       assertEquals(50, Node.FREE_CALL);
1063:       assertEquals(47, Node.IS_DISPATCHER);
1064:       assertEquals(46, Node.IS_NAMESPACE);
1065:       assertEquals(40, Node.ORIGINALNAME_PROP);
1066:       assertEquals(2, Node.POST_FLAG);
1067:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1068:       assertEquals(47, Node.IS_DISPATCHER);
1069:       assertEquals(37, Node.OPT_ARG_NAME);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1072:       assertEquals(12, Node.COLUMN_BITS);
1073:       assertEquals(1, Node.DECR_FLAG);
1074:       assertEquals(32, Node.INCRDECR_PROP);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(40, Node.ORIGINALNAME_PROP);
1078:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1079:       assertEquals(46, Node.IS_NAMESPACE);
1080:       assertEquals(54, Node.SLASH_V);
1081:       assertEquals(43, Node.IS_CONSTANT_NAME);
1082:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1083:       assertEquals(8, Node.FLAG_NO_THROWS);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(55, Node.INFERRED_FUNCTION);
1091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1092:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1094:       assertEquals(36, Node.QUOTED_PROP);
1095:       assertEquals(52, Node.LENGTH);
1096:       assertEquals(53, Node.INPUT_ID);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(57, Node.REFLECTED_OBJECT);
1099:       assertEquals(49, Node.DIRECT_EVAL);
1100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1101:       assertEquals(56, Node.CHANGE_TIME);
1102:       assertFalse(iterable0.contains(node1));
1103:       assertNotSame(node0, node1);
1104:       assertSame(node0, node2);
1105:       assertNotSame(node1, node2);
1106:       assertNotSame(node1, node0);
1107:       
1108:       node1.detachChildren();
1109:       assertFalse(node0.isVar());
1110:       assertFalse(node0.isCall());
1111:       assertFalse(node0.isAdd());
1112:       assertFalse(node0.isNull());
1113:       assertFalse(node0.isName());
1114:       assertFalse(node0.isParamList());
1115:       assertFalse(node0.isStringKey());
1116:       assertEquals(0, node0.getChildCount());
1117:       assertFalse(node0.isOr());
1118:       assertFalse(node0.isContinue());
1119:       assertFalse(node0.isSetterDef());
1120:       assertFalse(node0.isFunction());
1121:       assertFalse(node0.isNew());
1122:       assertFalse(node0.isLabel());
1123:       assertFalse(node0.isAssignAdd());
1124:       assertFalse(node0.isDo());
1125:       assertEquals(40, node0.getType());
1126:       assertFalse(node0.isDefaultCase());
1127:       assertFalse(node0.isArrayLit());
1128:       assertFalse(node0.hasOneChild());
1129:       assertFalse(node0.isNE());
1130:       assertFalse(node0.isNumber());
1131:       assertFalse(node0.isGetterDef());
1132:       assertFalse(node0.isLabelName());
1133:       assertFalse(node0.isIf());
1134:       assertFalse(node0.hasMoreThanOneChild());
1135:       assertEquals((-1), node0.getLineno());
1136:       assertFalse(node0.isCase());
1137:       assertFalse(node0.isWith());
1138:       assertFalse(node0.isInstanceOf());
1139:       assertFalse(node0.isCatch());
1140:       assertFalse(node0.isScript());
1141:       assertFalse(node0.isRegExp());
1142:       assertFalse(node0.isThis());
1143:       assertFalse(node0.isTry());
1144:       assertFalse(node0.isFor());
1145:       assertFalse(node0.isBlock());
1146:       assertTrue(node0.isString());
1147:       assertFalse(node0.isHook());
1148:       assertFalse(node0.isFalse());
1149:       assertFalse(node0.isSwitch());
1150:       assertEquals((-1), node0.getCharno());
1151:       assertFalse(node0.isBreak());
1152:       assertFalse(node0.isIn());
1153:       assertFalse(node0.isInc());
1154:       assertFalse(node0.isThrow());
1155:       assertFalse(node0.isCast());
1156:       assertFalse(node0.isEmpty());
1157:       assertFalse(node0.isAssign());
1158:       assertFalse(node0.isGetElem());
1159:       assertFalse(node0.isTrue());
1160:       assertFalse(node0.isExprResult());
1161:       assertFalse(node0.isDebugger());
1162:       assertFalse(node0.isDelProp());
1163:       assertFalse(node0.isVoid());
1164:       assertEquals((-1), node0.getSourcePosition());
1165:       assertFalse(node0.isAnd());
1166:       assertFalse(node0.isObjectLit());
1167:       assertFalse(node0.isNot());
1168:       assertFalse(node0.isTypeOf());
1169:       assertFalse(node0.isGetProp());
1170:       assertFalse(node0.hasChildren());
1171:       assertFalse(node0.isDec());
1172:       assertFalse(node0.isComma());
1173:       assertFalse(node0.isReturn());
1174:       assertFalse(node0.isWhile());
1175:       assertFalse(node1.isObjectLit());
1176:       assertFalse(node1.isAnd());
1177:       assertFalse(node1.isInstanceOf());
1178:       assertFalse(node1.isGetProp());
1179:       assertFalse(node1.isScript());
1180:       assertFalse(node1.isNot());
1181:       assertFalse(node1.isHook());
1182:       assertFalse(node1.isGetElem());
1183:       assertFalse(node1.isBreak());
1184:       assertFalse(node1.hasOneChild());
1185:       assertFalse(node1.isThis());
1186:       assertFalse(node1.isComma());
1187:       assertFalse(node1.isExprResult());
1188:       assertEquals(0, node1.getType());
1189:       assertFalse(node1.isReturn());
1190:       assertFalse(node1.isWith());
1191:       assertFalse(node1.hasChildren());
1192:       assertFalse(node1.isTypeOf());
1193:       assertFalse(node1.isDec());
1194:       assertFalse(node1.isAssign());
1195:       assertFalse(node1.isContinue());
1196:       assertFalse(node1.hasMoreThanOneChild());
1197:       assertEquals((-1), node1.getLineno());
1198:       assertFalse(node1.isWhile());
1199:       assertFalse(node1.isInc());
1200:       assertFalse(node1.isNE());
1201:       assertFalse(node1.isString());
1202:       assertFalse(node1.isIn());
1203:       assertEquals((-1), node1.getSourcePosition());
1204:       assertFalse(node1.isFalse());
1205:       assertFalse(node1.isCast());
1206:       assertFalse(node1.isThrow());
1207:       assertFalse(node1.isFunction());
1208:       assertFalse(node1.isCatch());
1209:       assertFalse(node1.isDefaultCase());
1210:       assertFalse(node1.isTrue());
1211:       assertFalse(node1.isDebugger());
1212:       assertFalse(node1.isParamList());
1213:       assertFalse(node1.isSetterDef());
1214:       assertFalse(node1.isNull());
1215:       assertFalse(node1.isCall());
1216:       assertFalse(node1.isFor());
1217:       assertFalse(node1.isDelProp());
1218:       assertFalse(node1.isIf());
1219:       assertFalse(node1.isName());
1220:       assertFalse(node1.isTry());
1221:       assertFalse(node1.isVoid());
1222:       assertFalse(node1.isBlock());
1223:       assertFalse(node1.isRegExp());
1224:       assertFalse(node1.isAssignAdd());
1225:       assertFalse(node1.isCase());
1226:       assertFalse(node1.isDo());
1227:       assertEquals((-1), node1.getCharno());
1228:       assertFalse(node1.isSwitch());
1229:       assertFalse(node1.isAdd());
1230:       assertFalse(node1.isGetterDef());
1231:       assertFalse(node1.isNumber());
1232:       assertFalse(node1.isOr());
1233:       assertFalse(node1.isEmpty());
1234:       assertFalse(node1.isStringKey());
1235:       assertFalse(node1.isVar());
1236:       assertFalse(node1.isArrayLit());
1237:       assertFalse(node1.isNew());
1238:       assertFalse(node1.isLabelName());
1239:       assertFalse(node1.isLabel());
1240:       assertEquals(0, node1.getChildCount());
1241:       assertFalse(node0.equals((Object)node1));
1242:       assertFalse(node1.equals((Object)node2));
1243:       assertFalse(node1.equals((Object)node0));
1244:       assertEquals(43, Node.IS_CONSTANT_NAME);
1245:       assertEquals(36, Node.QUOTED_PROP);
1246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1247:       assertEquals(55, Node.INFERRED_FUNCTION);
1248:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1249:       assertEquals(53, Node.INPUT_ID);
1250:       assertEquals(29, Node.JSDOC_INFO_PROP);
1251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1252:       assertEquals(39, Node.EMPTY_BLOCK);
1253:       assertEquals(56, Node.CHANGE_TIME);
1254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1255:       assertEquals(8, Node.FLAG_NO_THROWS);
1256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1257:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(4095, Node.COLUMN_MASK);
1260:       assertEquals(48, Node.DIRECTIVES);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(37, Node.OPT_ARG_NAME);
1263:       assertEquals(57, Node.LAST_PROP);
1264:       assertEquals(30, Node.VAR_ARGS_NAME);
1265:       assertEquals(54, Node.SLASH_V);
1266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1268:       assertEquals(12, Node.COLUMN_BITS);
1269:       assertEquals(32, Node.INCRDECR_PROP);
1270:       assertEquals(52, Node.LENGTH);
1271:       assertEquals(1, Node.DECR_FLAG);
1272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(2, Node.POST_FLAG);
1275:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1276:       assertEquals(50, Node.FREE_CALL);
1277:       assertEquals(47, Node.IS_DISPATCHER);
1278:       assertEquals(46, Node.IS_NAMESPACE);
1279:       assertEquals(40, Node.ORIGINALNAME_PROP);
1280:       assertEquals(2, Node.POST_FLAG);
1281:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1282:       assertEquals(47, Node.IS_DISPATCHER);
1283:       assertEquals(37, Node.OPT_ARG_NAME);
1284:       assertEquals(29, Node.JSDOC_INFO_PROP);
1285:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1286:       assertEquals(12, Node.COLUMN_BITS);
1287:       assertEquals(1, Node.DECR_FLAG);
1288:       assertEquals(32, Node.INCRDECR_PROP);
1289:       assertEquals(57, Node.LAST_PROP);
1290:       assertEquals(30, Node.VAR_ARGS_NAME);
1291:       assertEquals(40, Node.ORIGINALNAME_PROP);
1292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1293:       assertEquals(46, Node.IS_NAMESPACE);
1294:       assertEquals(54, Node.SLASH_V);
1295:       assertEquals(43, Node.IS_CONSTANT_NAME);
1296:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1297:       assertEquals(8, Node.FLAG_NO_THROWS);
1298:       assertEquals(39, Node.EMPTY_BLOCK);
1299:       assertEquals(48, Node.DIRECTIVES);
1300:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1301:       assertEquals(50, Node.FREE_CALL);
1302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1303:       assertEquals(4095, Node.COLUMN_MASK);
1304:       assertEquals(55, Node.INFERRED_FUNCTION);
1305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1306:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1308:       assertEquals(36, Node.QUOTED_PROP);
1309:       assertEquals(52, Node.LENGTH);
1310:       assertEquals(53, Node.INPUT_ID);
1311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1312:       assertEquals(57, Node.REFLECTED_OBJECT);
1313:       assertEquals(49, Node.DIRECT_EVAL);
1314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1315:       assertEquals(56, Node.CHANGE_TIME);
1316:       assertNotSame(node0, node1);
1317:       assertSame(node0, node2);
1318:       assertNotSame(node1, node2);
1319:       assertNotSame(node1, node0);
1320:   }
1321: }
RegularFileObject[/tmp/EvoSuite_35_1629223081927/com/google/javascript/rhino/Node_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_35_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.InputId",
261:       "com.google.javascript.rhino.Token",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterators$12",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Sets$ImprovedAbstractSet",
347:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
348:       "com.google.common.collect.Hashing",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.ImmutableSet",
364:       "com.google.common.collect.EmptyImmutableSet",
365:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
366:       "com.google.common.collect.Platform",
367:       "com.google.common.collect.ImmutableList$1"
368:     );
369:   }
370: }

[MASTER] 17:58:02.256 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("qrvsqkX5OB");
assertNotNull(node0);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = node0.cloneTree();
assertNotNull(node1);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(40, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertTrue(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

node1.type = 0;
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());

node0.setQuotedString();
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.equals((Object)node1));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);

Node node2 = node0.copyInformationFrom(node1);
assertNotNull(node2);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node0);
assertNotSame(node2, node1);

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(iterable0.contains(node1));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

node1.detachChildren();
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);


[MASTER] 17:58:27.755 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1629223107555/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1629223107555/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:27.755 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:27.755 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:27.757 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1181
[MASTER] 17:58:27.761 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1629223107555/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:27 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("qrvsqkX5OB");
23:       assertNotNull(node0);
24:       assertFalse(node0.hasMoreThanOneChild());
25:       assertFalse(node0.isReturn());
26:       assertFalse(node0.isAssignAdd());
27:       assertFalse(node0.isDo());
28:       assertEquals((-1), node0.getLineno());
29:       assertFalse(node0.isWhile());
30:       assertEquals((-1), node0.getSourcePosition());
31:       assertFalse(node0.isAdd());
32:       assertFalse(node0.isOr());
33:       assertFalse(node0.isNumber());
34:       assertFalse(node0.hasOneChild());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isCall());
37:       assertTrue(node0.isString());
38:       assertFalse(node0.isName());
39:       assertFalse(node0.hasChildren());
40:       assertFalse(node0.isBlock());
41:       assertFalse(node0.isExprResult());
42:       assertFalse(node0.isWith());
43:       assertFalse(node0.isAssign());
44:       assertFalse(node0.isDec());
45:       assertFalse(node0.isTypeOf());
46:       assertFalse(node0.isDefaultCase());
47:       assertFalse(node0.isParamList());
48:       assertFalse(node0.isScript());
49:       assertFalse(node0.isTrue());
50:       assertFalse(node0.isNull());
51:       assertFalse(node0.isVar());
52:       assertFalse(node0.isArrayLit());
53:       assertFalse(node0.isStringKey());
54:       assertFalse(node0.isLabelName());
55:       assertFalse(node0.isNew());
56:       assertFalse(node0.isLabel());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isNE());
60:       assertFalse(node0.isSwitch());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isComma());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isCatch());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isInstanceOf());
79:       assertEquals(40, node0.getType());
80:       assertFalse(node0.isSetterDef());
81:       assertFalse(node0.isDebugger());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isObjectLit());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isThrow());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isContinue());
89:       assertFalse(node0.isFunction());
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(39, Node.EMPTY_BLOCK);
92:       assertEquals(48, Node.DIRECTIVES);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(4095, Node.COLUMN_MASK);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(12, Node.COLUMN_BITS);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(1, Node.DECR_FLAG);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(52, Node.LENGTH);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(55, Node.INFERRED_FUNCTION);
124:       assertEquals(57, Node.REFLECTED_OBJECT);
125:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
126:       
127:       Node node1 = node0.cloneTree();
128:       assertNotNull(node1);
129:       assertFalse(node0.hasMoreThanOneChild());
130:       assertFalse(node0.isReturn());
131:       assertFalse(node0.isAssignAdd());
132:       assertFalse(node0.isDo());
133:       assertEquals((-1), node0.getLineno());
134:       assertFalse(node0.isWhile());
135:       assertEquals((-1), node0.getSourcePosition());
136:       assertFalse(node0.isAdd());
137:       assertFalse(node0.isOr());
138:       assertFalse(node0.isNumber());
139:       assertFalse(node0.hasOneChild());
140:       assertFalse(node0.isGetElem());
141:       assertFalse(node0.isCall());
142:       assertTrue(node0.isString());
143:       assertFalse(node0.isName());
144:       assertFalse(node0.hasChildren());
145:       assertFalse(node0.isBlock());
146:       assertFalse(node0.isExprResult());
147:       assertFalse(node0.isWith());
148:       assertFalse(node0.isAssign());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isTypeOf());
151:       assertFalse(node0.isDefaultCase());
152:       assertFalse(node0.isParamList());
153:       assertFalse(node0.isScript());
154:       assertFalse(node0.isTrue());
155:       assertFalse(node0.isNull());
156:       assertFalse(node0.isVar());
157:       assertFalse(node0.isArrayLit());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isLabelName());
160:       assertFalse(node0.isNew());
161:       assertFalse(node0.isLabel());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isCase());
164:       assertFalse(node0.isNE());
165:       assertFalse(node0.isSwitch());
166:       assertEquals((-1), node0.getCharno());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isEmpty());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isIf());
175:       assertFalse(node0.isVoid());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isComma());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isCatch());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isInstanceOf());
184:       assertEquals(40, node0.getType());
185:       assertFalse(node0.isSetterDef());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isCast());
191:       assertFalse(node0.isThrow());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isContinue());
194:       assertFalse(node0.isFunction());
195:       assertFalse(node1.isNE());
196:       assertFalse(node1.isIf());
197:       assertFalse(node1.isEmpty());
198:       assertFalse(node1.isGetterDef());
199:       assertFalse(node1.isCase());
200:       assertFalse(node1.isInc());
201:       assertFalse(node1.isIn());
202:       assertFalse(node1.isTry());
203:       assertFalse(node1.isVoid());
204:       assertFalse(node1.isHook());
205:       assertFalse(node1.isTrue());
206:       assertFalse(node1.isFor());
207:       assertFalse(node1.isDelProp());
208:       assertFalse(node1.isBreak());
209:       assertFalse(node1.isRegExp());
210:       assertFalse(node1.isCatch());
211:       assertEquals(0, node1.getChildCount());
212:       assertFalse(node1.isThis());
213:       assertFalse(node1.isNull());
214:       assertFalse(node1.isParamList());
215:       assertFalse(node1.isScript());
216:       assertFalse(node1.isAdd());
217:       assertEquals((-1), node1.getCharno());
218:       assertFalse(node1.isNew());
219:       assertFalse(node1.isSwitch());
220:       assertFalse(node1.isVar());
221:       assertFalse(node1.isDefaultCase());
222:       assertFalse(node1.isStringKey());
223:       assertFalse(node1.isLabelName());
224:       assertFalse(node1.isArrayLit());
225:       assertFalse(node1.isLabel());
226:       assertFalse(node1.isAssignAdd());
227:       assertFalse(node1.isOr());
228:       assertFalse(node1.isReturn());
229:       assertEquals((-1), node1.getLineno());
230:       assertFalse(node1.isDo());
231:       assertEquals((-1), node1.getSourcePosition());
232:       assertFalse(node1.isNumber());
233:       assertFalse(node1.isBlock());
234:       assertTrue(node1.isString());
235:       assertFalse(node1.hasOneChild());
236:       assertFalse(node1.isWhile());
237:       assertFalse(node1.isAssign());
238:       assertFalse(node1.isWith());
239:       assertFalse(node1.isGetElem());
240:       assertFalse(node1.isName());
241:       assertFalse(node1.hasChildren());
242:       assertFalse(node1.isDec());
243:       assertFalse(node1.hasMoreThanOneChild());
244:       assertFalse(node1.isTypeOf());
245:       assertFalse(node1.isCall());
246:       assertFalse(node1.isExprResult());
247:       assertFalse(node1.isInstanceOf());
248:       assertFalse(node1.isGetProp());
249:       assertFalse(node1.isComma());
250:       assertFalse(node1.isAnd());
251:       assertFalse(node1.isNot());
252:       assertFalse(node1.isObjectLit());
253:       assertFalse(node1.isSetterDef());
254:       assertFalse(node1.isDebugger());
255:       assertFalse(node1.isThrow());
256:       assertFalse(node1.isFalse());
257:       assertEquals(40, node1.getType());
258:       assertFalse(node1.isCast());
259:       assertFalse(node1.isFunction());
260:       assertFalse(node1.isContinue());
261:       assertFalse(node1.equals((Object)node0));
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(48, Node.DIRECTIVES);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(40, Node.ORIGINALNAME_PROP);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertEquals(4095, Node.COLUMN_MASK);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
272:       assertEquals(43, Node.IS_CONSTANT_NAME);
273:       assertEquals(30, Node.VAR_ARGS_NAME);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(54, Node.SLASH_V);
277:       assertEquals(56, Node.CHANGE_TIME);
278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
279:       assertEquals(47, Node.IS_DISPATCHER);
280:       assertEquals(37, Node.OPT_ARG_NAME);
281:       assertEquals(2, Node.POST_FLAG);
282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
283:       assertEquals(29, Node.JSDOC_INFO_PROP);
284:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
285:       assertEquals(12, Node.COLUMN_BITS);
286:       assertEquals(32, Node.INCRDECR_PROP);
287:       assertEquals(1, Node.DECR_FLAG);
288:       assertEquals(36, Node.QUOTED_PROP);
289:       assertEquals(15, Node.NO_SIDE_EFFECTS);
290:       assertEquals(57, Node.LAST_PROP);
291:       assertEquals(49, Node.DIRECT_EVAL);
292:       assertEquals(53, Node.INPUT_ID);
293:       assertEquals(52, Node.LENGTH);
294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
295:       assertEquals(55, Node.INFERRED_FUNCTION);
296:       assertEquals(57, Node.REFLECTED_OBJECT);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(50, Node.FREE_CALL);
299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(1, Node.DECR_FLAG);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
315:       assertEquals(37, Node.OPT_ARG_NAME);
316:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(12, Node.COLUMN_BITS);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(56, Node.CHANGE_TIME);
332:       assertEquals(36, Node.QUOTED_PROP);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertNotSame(node0, node1);
335:       assertNotSame(node1, node0);
336:       
337:       boolean boolean0 = node1.isLocalResultCall();
338:       assertFalse(boolean0);
339:       assertFalse(node0.hasMoreThanOneChild());
340:       assertFalse(node0.isReturn());
341:       assertFalse(node0.isAssignAdd());
342:       assertFalse(node0.isDo());
343:       assertEquals((-1), node0.getLineno());
344:       assertFalse(node0.isWhile());
345:       assertEquals((-1), node0.getSourcePosition());
346:       assertFalse(node0.isAdd());
347:       assertFalse(node0.isOr());
348:       assertFalse(node0.isNumber());
349:       assertFalse(node0.hasOneChild());
350:       assertFalse(node0.isGetElem());
351:       assertFalse(node0.isCall());
352:       assertTrue(node0.isString());
353:       assertFalse(node0.isName());
354:       assertFalse(node0.hasChildren());
355:       assertFalse(node0.isBlock());
356:       assertFalse(node0.isExprResult());
357:       assertFalse(node0.isWith());
358:       assertFalse(node0.isAssign());
359:       assertFalse(node0.isDec());
360:       assertFalse(node0.isTypeOf());
361:       assertFalse(node0.isDefaultCase());
362:       assertFalse(node0.isParamList());
363:       assertFalse(node0.isScript());
364:       assertFalse(node0.isTrue());
365:       assertFalse(node0.isNull());
366:       assertFalse(node0.isVar());
367:       assertFalse(node0.isArrayLit());
368:       assertFalse(node0.isStringKey());
369:       assertFalse(node0.isLabelName());
370:       assertFalse(node0.isNew());
371:       assertFalse(node0.isLabel());
372:       assertEquals(0, node0.getChildCount());
373:       assertFalse(node0.isCase());
374:       assertFalse(node0.isNE());
375:       assertFalse(node0.isSwitch());
376:       assertEquals((-1), node0.getCharno());
377:       assertFalse(node0.isInc());
378:       assertFalse(node0.isEmpty());
379:       assertFalse(node0.isIn());
380:       assertFalse(node0.isGetterDef());
381:       assertFalse(node0.isHook());
382:       assertFalse(node0.isFor());
383:       assertFalse(node0.isTry());
384:       assertFalse(node0.isIf());
385:       assertFalse(node0.isVoid());
386:       assertFalse(node0.isDelProp());
387:       assertFalse(node0.isComma());
388:       assertFalse(node0.isBreak());
389:       assertFalse(node0.isThis());
390:       assertFalse(node0.isRegExp());
391:       assertFalse(node0.isCatch());
392:       assertFalse(node0.isAnd());
393:       assertFalse(node0.isInstanceOf());
394:       assertEquals(40, node0.getType());
395:       assertFalse(node0.isSetterDef());
396:       assertFalse(node0.isDebugger());
397:       assertFalse(node0.isGetProp());
398:       assertFalse(node0.isNot());
399:       assertFalse(node0.isObjectLit());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isThrow());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isContinue());
404:       assertFalse(node0.isFunction());
405:       assertFalse(node1.isNE());
406:       assertFalse(node1.isIf());
407:       assertFalse(node1.isEmpty());
408:       assertFalse(node1.isGetterDef());
409:       assertFalse(node1.isCase());
410:       assertFalse(node1.isInc());
411:       assertFalse(node1.isIn());
412:       assertFalse(node1.isTry());
413:       assertFalse(node1.isVoid());
414:       assertFalse(node1.isHook());
415:       assertFalse(node1.isTrue());
416:       assertFalse(node1.isFor());
417:       assertFalse(node1.isDelProp());
418:       assertFalse(node1.isBreak());
419:       assertFalse(node1.isRegExp());
420:       assertFalse(node1.isCatch());
421:       assertEquals(0, node1.getChildCount());
422:       assertFalse(node1.isThis());
423:       assertFalse(node1.isNull());
424:       assertFalse(node1.isParamList());
425:       assertFalse(node1.isScript());
426:       assertFalse(node1.isAdd());
427:       assertEquals((-1), node1.getCharno());
428:       assertFalse(node1.isNew());
429:       assertFalse(node1.isSwitch());
430:       assertFalse(node1.isVar());
431:       assertFalse(node1.isDefaultCase());
432:       assertFalse(node1.isStringKey());
433:       assertFalse(node1.isLabelName());
434:       assertFalse(node1.isArrayLit());
435:       assertFalse(node1.isLabel());
436:       assertFalse(node1.isAssignAdd());
437:       assertFalse(node1.isOr());
438:       assertFalse(node1.isReturn());
439:       assertEquals((-1), node1.getLineno());
440:       assertFalse(node1.isDo());
441:       assertEquals((-1), node1.getSourcePosition());
442:       assertFalse(node1.isNumber());
443:       assertFalse(node1.isBlock());
444:       assertTrue(node1.isString());
445:       assertFalse(node1.hasOneChild());
446:       assertFalse(node1.isWhile());
447:       assertFalse(node1.isAssign());
448:       assertFalse(node1.isWith());
449:       assertFalse(node1.isGetElem());
450:       assertFalse(node1.isName());
451:       assertFalse(node1.hasChildren());
452:       assertFalse(node1.isDec());
453:       assertFalse(node1.hasMoreThanOneChild());
454:       assertFalse(node1.isTypeOf());
455:       assertFalse(node1.isCall());
456:       assertFalse(node1.isExprResult());
457:       assertFalse(node1.isInstanceOf());
458:       assertFalse(node1.isGetProp());
459:       assertFalse(node1.isComma());
460:       assertFalse(node1.isAnd());
461:       assertFalse(node1.isNot());
462:       assertFalse(node1.isObjectLit());
463:       assertFalse(node1.isSetterDef());
464:       assertFalse(node1.isDebugger());
465:       assertFalse(node1.isThrow());
466:       assertFalse(node1.isFalse());
467:       assertEquals(40, node1.getType());
468:       assertFalse(node1.isCast());
469:       assertFalse(node1.isFunction());
470:       assertFalse(node1.isContinue());
471:       assertFalse(node0.equals((Object)node1));
472:       assertFalse(node1.equals((Object)node0));
473:       assertEquals(8, Node.FLAG_NO_THROWS);
474:       assertEquals(39, Node.EMPTY_BLOCK);
475:       assertEquals(48, Node.DIRECTIVES);
476:       assertEquals(50, Node.FREE_CALL);
477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
478:       assertEquals(40, Node.ORIGINALNAME_PROP);
479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
480:       assertEquals(4095, Node.COLUMN_MASK);
481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
482:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
483:       assertEquals(43, Node.IS_CONSTANT_NAME);
484:       assertEquals(30, Node.VAR_ARGS_NAME);
485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
486:       assertEquals(46, Node.IS_NAMESPACE);
487:       assertEquals(54, Node.SLASH_V);
488:       assertEquals(56, Node.CHANGE_TIME);
489:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
490:       assertEquals(47, Node.IS_DISPATCHER);
491:       assertEquals(37, Node.OPT_ARG_NAME);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
494:       assertEquals(29, Node.JSDOC_INFO_PROP);
495:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
496:       assertEquals(12, Node.COLUMN_BITS);
497:       assertEquals(32, Node.INCRDECR_PROP);
498:       assertEquals(1, Node.DECR_FLAG);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
501:       assertEquals(57, Node.LAST_PROP);
502:       assertEquals(49, Node.DIRECT_EVAL);
503:       assertEquals(53, Node.INPUT_ID);
504:       assertEquals(52, Node.LENGTH);
505:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
506:       assertEquals(55, Node.INFERRED_FUNCTION);
507:       assertEquals(57, Node.REFLECTED_OBJECT);
508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
509:       assertEquals(50, Node.FREE_CALL);
510:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
511:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertEquals(39, Node.EMPTY_BLOCK);
514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
516:       assertEquals(1, Node.DECR_FLAG);
517:       assertEquals(30, Node.VAR_ARGS_NAME);
518:       assertEquals(32, Node.INCRDECR_PROP);
519:       assertEquals(54, Node.SLASH_V);
520:       assertEquals(43, Node.IS_CONSTANT_NAME);
521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
524:       assertEquals(29, Node.JSDOC_INFO_PROP);
525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(12, Node.COLUMN_BITS);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
532:       assertEquals(49, Node.DIRECT_EVAL);
533:       assertEquals(55, Node.INFERRED_FUNCTION);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(4095, Node.COLUMN_MASK);
536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(52, Node.LENGTH);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       assertEquals(36, Node.QUOTED_PROP);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertNotSame(node0, node1);
546:       assertNotSame(node1, node0);
547:       
548:       node0.setQuotedString();
549:       assertFalse(node0.hasMoreThanOneChild());
550:       assertFalse(node0.isReturn());
551:       assertFalse(node0.isAssignAdd());
552:       assertFalse(node0.isDo());
553:       assertEquals((-1), node0.getLineno());
554:       assertFalse(node0.isWhile());
555:       assertEquals((-1), node0.getSourcePosition());
556:       assertFalse(node0.isAdd());
557:       assertFalse(node0.isOr());
558:       assertFalse(node0.isNumber());
559:       assertFalse(node0.hasOneChild());
560:       assertFalse(node0.isGetElem());
561:       assertFalse(node0.isCall());
562:       assertTrue(node0.isString());
563:       assertFalse(node0.isName());
564:       assertFalse(node0.hasChildren());
565:       assertFalse(node0.isBlock());
566:       assertFalse(node0.isExprResult());
567:       assertFalse(node0.isWith());
568:       assertFalse(node0.isAssign());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.isTypeOf());
571:       assertFalse(node0.isDefaultCase());
572:       assertFalse(node0.isParamList());
573:       assertFalse(node0.isScript());
574:       assertFalse(node0.isTrue());
575:       assertFalse(node0.isNull());
576:       assertFalse(node0.isVar());
577:       assertFalse(node0.isArrayLit());
578:       assertFalse(node0.isStringKey());
579:       assertFalse(node0.isLabelName());
580:       assertFalse(node0.isNew());
581:       assertFalse(node0.isLabel());
582:       assertEquals(0, node0.getChildCount());
583:       assertFalse(node0.isCase());
584:       assertFalse(node0.isNE());
585:       assertFalse(node0.isSwitch());
586:       assertEquals((-1), node0.getCharno());
587:       assertFalse(node0.isInc());
588:       assertFalse(node0.isEmpty());
589:       assertFalse(node0.isIn());
590:       assertFalse(node0.isGetterDef());
591:       assertFalse(node0.isHook());
592:       assertFalse(node0.isFor());
593:       assertFalse(node0.isTry());
594:       assertFalse(node0.isIf());
595:       assertFalse(node0.isVoid());
596:       assertFalse(node0.isDelProp());
597:       assertFalse(node0.isComma());
598:       assertFalse(node0.isBreak());
599:       assertFalse(node0.isThis());
600:       assertFalse(node0.isRegExp());
601:       assertFalse(node0.isCatch());
602:       assertFalse(node0.isAnd());
603:       assertFalse(node0.isInstanceOf());
604:       assertEquals(40, node0.getType());
605:       assertFalse(node0.isSetterDef());
606:       assertFalse(node0.isDebugger());
607:       assertFalse(node0.isGetProp());
608:       assertFalse(node0.isNot());
609:       assertFalse(node0.isObjectLit());
610:       assertFalse(node0.isCast());
611:       assertFalse(node0.isThrow());
612:       assertFalse(node0.isFalse());
613:       assertFalse(node0.isContinue());
614:       assertFalse(node0.isFunction());
615:       assertFalse(node0.equals((Object)node1));
616:       assertEquals(8, Node.FLAG_NO_THROWS);
617:       assertEquals(39, Node.EMPTY_BLOCK);
618:       assertEquals(48, Node.DIRECTIVES);
619:       assertEquals(50, Node.FREE_CALL);
620:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
621:       assertEquals(40, Node.ORIGINALNAME_PROP);
622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
623:       assertEquals(4095, Node.COLUMN_MASK);
624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(43, Node.IS_CONSTANT_NAME);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(51, Node.STATIC_SOURCE_FILE);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(54, Node.SLASH_V);
631:       assertEquals(56, Node.CHANGE_TIME);
632:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
633:       assertEquals(47, Node.IS_DISPATCHER);
634:       assertEquals(37, Node.OPT_ARG_NAME);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(12, Node.COLUMN_BITS);
640:       assertEquals(32, Node.INCRDECR_PROP);
641:       assertEquals(1, Node.DECR_FLAG);
642:       assertEquals(36, Node.QUOTED_PROP);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(53, Node.INPUT_ID);
647:       assertEquals(52, Node.LENGTH);
648:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(57, Node.REFLECTED_OBJECT);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertNotSame(node0, node1);
653:       
654:       Node node2 = node0.copyInformationFrom(node1);
655:       assertNotNull(node2);
656:       assertFalse(node0.hasMoreThanOneChild());
657:       assertFalse(node0.isReturn());
658:       assertFalse(node0.isAssignAdd());
659:       assertFalse(node0.isDo());
660:       assertEquals((-1), node0.getLineno());
661:       assertFalse(node0.isWhile());
662:       assertEquals((-1), node0.getSourcePosition());
663:       assertFalse(node0.isAdd());
664:       assertFalse(node0.isOr());
665:       assertFalse(node0.isNumber());
666:       assertFalse(node0.hasOneChild());
667:       assertFalse(node0.isGetElem());
668:       assertFalse(node0.isCall());
669:       assertTrue(node0.isString());
670:       assertFalse(node0.isName());
671:       assertFalse(node0.hasChildren());
672:       assertFalse(node0.isBlock());
673:       assertFalse(node0.isExprResult());
674:       assertFalse(node0.isWith());
675:       assertFalse(node0.isAssign());
676:       assertFalse(node0.isDec());
677:       assertFalse(node0.isTypeOf());
678:       assertFalse(node0.isDefaultCase());
679:       assertFalse(node0.isParamList());
680:       assertFalse(node0.isScript());
681:       assertFalse(node0.isTrue());
682:       assertFalse(node0.isNull());
683:       assertFalse(node0.isVar());
684:       assertFalse(node0.isArrayLit());
685:       assertFalse(node0.isStringKey());
686:       assertFalse(node0.isLabelName());
687:       assertFalse(node0.isNew());
688:       assertFalse(node0.isLabel());
689:       assertEquals(0, node0.getChildCount());
690:       assertFalse(node0.isCase());
691:       assertFalse(node0.isNE());
692:       assertFalse(node0.isSwitch());
693:       assertEquals((-1), node0.getCharno());
694:       assertFalse(node0.isInc());
695:       assertFalse(node0.isEmpty());
696:       assertFalse(node0.isIn());
697:       assertFalse(node0.isGetterDef());
698:       assertFalse(node0.isHook());
699:       assertFalse(node0.isFor());
700:       assertFalse(node0.isTry());
701:       assertFalse(node0.isIf());
702:       assertFalse(node0.isVoid());
703:       assertFalse(node0.isDelProp());
704:       assertFalse(node0.isComma());
705:       assertFalse(node0.isBreak());
706:       assertFalse(node0.isThis());
707:       assertFalse(node0.isRegExp());
708:       assertFalse(node0.isCatch());
709:       assertFalse(node0.isAnd());
710:       assertFalse(node0.isInstanceOf());
711:       assertEquals(40, node0.getType());
712:       assertFalse(node0.isSetterDef());
713:       assertFalse(node0.isDebugger());
714:       assertFalse(node0.isGetProp());
715:       assertFalse(node0.isNot());
716:       assertFalse(node0.isObjectLit());
717:       assertFalse(node0.isCast());
718:       assertFalse(node0.isThrow());
719:       assertFalse(node0.isFalse());
720:       assertFalse(node0.isContinue());
721:       assertFalse(node0.isFunction());
722:       assertFalse(node1.isNE());
723:       assertFalse(node1.isIf());
724:       assertFalse(node1.isEmpty());
725:       assertFalse(node1.isGetterDef());
726:       assertFalse(node1.isCase());
727:       assertFalse(node1.isInc());
728:       assertFalse(node1.isIn());
729:       assertFalse(node1.isTry());
730:       assertFalse(node1.isVoid());
731:       assertFalse(node1.isHook());
732:       assertFalse(node1.isTrue());
733:       assertFalse(node1.isFor());
734:       assertFalse(node1.isDelProp());
735:       assertFalse(node1.isBreak());
736:       assertFalse(node1.isRegExp());
737:       assertFalse(node1.isCatch());
738:       assertEquals(0, node1.getChildCount());
739:       assertFalse(node1.isThis());
740:       assertFalse(node1.isNull());
741:       assertFalse(node1.isParamList());
742:       assertFalse(node1.isScript());
743:       assertFalse(node1.isAdd());
744:       assertEquals((-1), node1.getCharno());
745:       assertFalse(node1.isNew());
746:       assertFalse(node1.isSwitch());
747:       assertFalse(node1.isVar());
748:       assertFalse(node1.isDefaultCase());
749:       assertFalse(node1.isStringKey());
750:       assertFalse(node1.isLabelName());
751:       assertFalse(node1.isArrayLit());
752:       assertFalse(node1.isLabel());
753:       assertFalse(node1.isAssignAdd());
754:       assertFalse(node1.isOr());
755:       assertFalse(node1.isReturn());
756:       assertEquals((-1), node1.getLineno());
757:       assertFalse(node1.isDo());
758:       assertEquals((-1), node1.getSourcePosition());
759:       assertFalse(node1.isNumber());
760:       assertFalse(node1.isBlock());
761:       assertTrue(node1.isString());
762:       assertFalse(node1.hasOneChild());
763:       assertFalse(node1.isWhile());
764:       assertFalse(node1.isAssign());
765:       assertFalse(node1.isWith());
766:       assertFalse(node1.isGetElem());
767:       assertFalse(node1.isName());
768:       assertFalse(node1.hasChildren());
769:       assertFalse(node1.isDec());
770:       assertFalse(node1.hasMoreThanOneChild());
771:       assertFalse(node1.isTypeOf());
772:       assertFalse(node1.isCall());
773:       assertFalse(node1.isExprResult());
774:       assertFalse(node1.isInstanceOf());
775:       assertFalse(node1.isGetProp());
776:       assertFalse(node1.isComma());
777:       assertFalse(node1.isAnd());
778:       assertFalse(node1.isNot());
779:       assertFalse(node1.isObjectLit());
780:       assertFalse(node1.isSetterDef());
781:       assertFalse(node1.isDebugger());
782:       assertFalse(node1.isThrow());
783:       assertFalse(node1.isFalse());
784:       assertEquals(40, node1.getType());
785:       assertFalse(node1.isCast());
786:       assertFalse(node1.isFunction());
787:       assertFalse(node1.isContinue());
788:       assertFalse(node2.isBlock());
789:       assertTrue(node2.isString());
790:       assertFalse(node2.isAdd());
791:       assertFalse(node2.isVar());
792:       assertFalse(node2.isWhile());
793:       assertFalse(node2.isDo());
794:       assertFalse(node2.isNew());
795:       assertFalse(node2.isAssignAdd());
796:       assertFalse(node2.isParamList());
797:       assertEquals(0, node2.getChildCount());
798:       assertFalse(node2.isNumber());
799:       assertFalse(node2.isLabel());
800:       assertEquals((-1), node2.getSourcePosition());
801:       assertFalse(node2.isContinue());
802:       assertFalse(node2.isCast());
803:       assertFalse(node2.isStringKey());
804:       assertFalse(node2.isLabelName());
805:       assertFalse(node2.isVoid());
806:       assertFalse(node2.isTrue());
807:       assertFalse(node2.isExprResult());
808:       assertFalse(node2.isNot());
809:       assertFalse(node2.isDebugger());
810:       assertFalse(node2.isObjectLit());
811:       assertFalse(node2.isEmpty());
812:       assertFalse(node2.isDefaultCase());
813:       assertFalse(node2.hasChildren());
814:       assertFalse(node2.isReturn());
815:       assertFalse(node2.isTypeOf());
816:       assertFalse(node2.isNull());
817:       assertFalse(node2.isOr());
818:       assertFalse(node2.isAssign());
819:       assertFalse(node2.isDec());
820:       assertFalse(node2.isComma());
821:       assertFalse(node2.isGetElem());
822:       assertFalse(node2.isName());
823:       assertFalse(node2.isCall());
824:       assertFalse(node2.isDelProp());
825:       assertFalse(node2.isBreak());
826:       assertEquals((-1), node2.getCharno());
827:       assertFalse(node2.isInc());
828:       assertFalse(node2.isSwitch());
829:       assertFalse(node2.isHook());
830:       assertFalse(node2.isThrow());
831:       assertFalse(node2.isCase());
832:       assertFalse(node2.isGetProp());
833:       assertFalse(node2.isGetterDef());
834:       assertFalse(node2.isAnd());
835:       assertFalse(node2.isFalse());
836:       assertFalse(node2.isArrayLit());
837:       assertFalse(node2.isFunction());
838:       assertFalse(node2.isScript());
839:       assertFalse(node2.isRegExp());
840:       assertEquals(40, node2.getType());
841:       assertFalse(node2.isFor());
842:       assertFalse(node2.isTry());
843:       assertFalse(node2.hasOneChild());
844:       assertFalse(node2.isSetterDef());
845:       assertFalse(node2.isThis());
846:       assertFalse(node2.isNE());
847:       assertFalse(node2.isIn());
848:       assertFalse(node2.hasMoreThanOneChild());
849:       assertFalse(node2.isWith());
850:       assertFalse(node2.isCatch());
851:       assertFalse(node2.isInstanceOf());
852:       assertFalse(node2.isIf());
853:       assertEquals((-1), node2.getLineno());
854:       assertFalse(node0.equals((Object)node1));
855:       assertFalse(node1.equals((Object)node0));
856:       assertFalse(node2.equals((Object)node1));
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(39, Node.EMPTY_BLOCK);
859:       assertEquals(48, Node.DIRECTIVES);
860:       assertEquals(50, Node.FREE_CALL);
861:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
862:       assertEquals(40, Node.ORIGINALNAME_PROP);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(4095, Node.COLUMN_MASK);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(30, Node.VAR_ARGS_NAME);
869:       assertEquals(51, Node.STATIC_SOURCE_FILE);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
874:       assertEquals(47, Node.IS_DISPATCHER);
875:       assertEquals(37, Node.OPT_ARG_NAME);
876:       assertEquals(2, Node.POST_FLAG);
877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
880:       assertEquals(12, Node.COLUMN_BITS);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(1, Node.DECR_FLAG);
883:       assertEquals(36, Node.QUOTED_PROP);
884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
885:       assertEquals(57, Node.LAST_PROP);
886:       assertEquals(49, Node.DIRECT_EVAL);
887:       assertEquals(53, Node.INPUT_ID);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
890:       assertEquals(55, Node.INFERRED_FUNCTION);
891:       assertEquals(57, Node.REFLECTED_OBJECT);
892:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
893:       assertEquals(50, Node.FREE_CALL);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(40, Node.ORIGINALNAME_PROP);
897:       assertEquals(39, Node.EMPTY_BLOCK);
898:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
899:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(30, Node.VAR_ARGS_NAME);
902:       assertEquals(32, Node.INCRDECR_PROP);
903:       assertEquals(54, Node.SLASH_V);
904:       assertEquals(43, Node.IS_CONSTANT_NAME);
905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
906:       assertEquals(46, Node.IS_NAMESPACE);
907:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
908:       assertEquals(29, Node.JSDOC_INFO_PROP);
909:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
912:       assertEquals(2, Node.POST_FLAG);
913:       assertEquals(12, Node.COLUMN_BITS);
914:       assertEquals(47, Node.IS_DISPATCHER);
915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
916:       assertEquals(49, Node.DIRECT_EVAL);
917:       assertEquals(55, Node.INFERRED_FUNCTION);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(4095, Node.COLUMN_MASK);
920:       assertEquals(15, Node.NO_SIDE_EFFECTS);
921:       assertEquals(53, Node.INPUT_ID);
922:       assertEquals(48, Node.DIRECTIVES);
923:       assertEquals(52, Node.LENGTH);
924:       assertEquals(8, Node.FLAG_NO_THROWS);
925:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
926:       assertEquals(56, Node.CHANGE_TIME);
927:       assertEquals(36, Node.QUOTED_PROP);
928:       assertEquals(57, Node.REFLECTED_OBJECT);
929:       assertEquals(55, Node.INFERRED_FUNCTION);
930:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
931:       assertEquals(43, Node.IS_CONSTANT_NAME);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(57, Node.REFLECTED_OBJECT);
938:       assertEquals(56, Node.CHANGE_TIME);
939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
940:       assertEquals(8, Node.FLAG_NO_THROWS);
941:       assertEquals(39, Node.EMPTY_BLOCK);
942:       assertEquals(36, Node.QUOTED_PROP);
943:       assertEquals(53, Node.INPUT_ID);
944:       assertEquals(15, Node.NO_SIDE_EFFECTS);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(1, Node.DECR_FLAG);
949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
950:       assertEquals(12, Node.COLUMN_BITS);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(49, Node.DIRECT_EVAL);
953:       assertEquals(46, Node.IS_NAMESPACE);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(2, Node.POST_FLAG);
957:       assertEquals(47, Node.IS_DISPATCHER);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(30, Node.VAR_ARGS_NAME);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
963:       assertEquals(50, Node.FREE_CALL);
964:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
965:       assertNotSame(node0, node1);
966:       assertSame(node0, node2);
967:       assertNotSame(node1, node2);
968:       assertNotSame(node1, node0);
969:       assertSame(node2, node0);
970:       assertNotSame(node2, node1);
971:       
972:       Iterable<Node> iterable0 = node1.children();
973:       assertNotNull(iterable0);
974:       assertFalse(node0.hasMoreThanOneChild());
975:       assertFalse(node0.isReturn());
976:       assertFalse(node0.isAssignAdd());
977:       assertFalse(node0.isDo());
978:       assertEquals((-1), node0.getLineno());
979:       assertFalse(node0.isWhile());
980:       assertEquals((-1), node0.getSourcePosition());
981:       assertFalse(node0.isAdd());
982:       assertFalse(node0.isOr());
983:       assertFalse(node0.isNumber());
984:       assertFalse(node0.hasOneChild());
985:       assertFalse(node0.isGetElem());
986:       assertFalse(node0.isCall());
987:       assertTrue(node0.isString());
988:       assertFalse(node0.isName());
989:       assertFalse(node0.hasChildren());
990:       assertFalse(node0.isBlock());
991:       assertFalse(node0.isExprResult());
992:       assertFalse(node0.isWith());
993:       assertFalse(node0.isAssign());
994:       assertFalse(node0.isDec());
995:       assertFalse(node0.isTypeOf());
996:       assertFalse(node0.isDefaultCase());
997:       assertFalse(node0.isParamList());
998:       assertFalse(node0.isScript());
999:       assertFalse(node0.isTrue());
1000:       assertFalse(node0.isNull());
1001:       assertFalse(node0.isVar());
1002:       assertFalse(node0.isArrayLit());
1003:       assertFalse(node0.isStringKey());
1004:       assertFalse(node0.isLabelName());
1005:       assertFalse(node0.isNew());
1006:       assertFalse(node0.isLabel());
1007:       assertEquals(0, node0.getChildCount());
1008:       assertFalse(node0.isCase());
1009:       assertFalse(node0.isNE());
1010:       assertFalse(node0.isSwitch());
1011:       assertEquals((-1), node0.getCharno());
1012:       assertFalse(node0.isInc());
1013:       assertFalse(node0.isEmpty());
1014:       assertFalse(node0.isIn());
1015:       assertFalse(node0.isGetterDef());
1016:       assertFalse(node0.isHook());
1017:       assertFalse(node0.isFor());
1018:       assertFalse(node0.isTry());
1019:       assertFalse(node0.isIf());
1020:       assertFalse(node0.isVoid());
1021:       assertFalse(node0.isDelProp());
1022:       assertFalse(node0.isComma());
1023:       assertFalse(node0.isBreak());
1024:       assertFalse(node0.isThis());
1025:       assertFalse(node0.isRegExp());
1026:       assertFalse(node0.isCatch());
1027:       assertFalse(node0.isAnd());
1028:       assertFalse(node0.isInstanceOf());
1029:       assertEquals(40, node0.getType());
1030:       assertFalse(node0.isSetterDef());
1031:       assertFalse(node0.isDebugger());
1032:       assertFalse(node0.isGetProp());
1033:       assertFalse(node0.isNot());
1034:       assertFalse(node0.isObjectLit());
1035:       assertFalse(node0.isCast());
1036:       assertFalse(node0.isThrow());
1037:       assertFalse(node0.isFalse());
1038:       assertFalse(node0.isContinue());
1039:       assertFalse(node0.isFunction());
1040:       assertFalse(node1.isNE());
1041:       assertFalse(node1.isIf());
1042:       assertFalse(node1.isEmpty());
1043:       assertFalse(node1.isGetterDef());
1044:       assertFalse(node1.isCase());
1045:       assertFalse(node1.isInc());
1046:       assertFalse(node1.isIn());
1047:       assertFalse(node1.isTry());
1048:       assertFalse(node1.isVoid());
1049:       assertFalse(node1.isHook());
1050:       assertFalse(node1.isTrue());
1051:       assertFalse(node1.isFor());
1052:       assertFalse(node1.isDelProp());
1053:       assertFalse(node1.isBreak());
1054:       assertFalse(node1.isRegExp());
1055:       assertFalse(node1.isCatch());
1056:       assertEquals(0, node1.getChildCount());
1057:       assertFalse(node1.isThis());
1058:       assertFalse(node1.isNull());
1059:       assertFalse(node1.isParamList());
1060:       assertFalse(node1.isScript());
1061:       assertFalse(node1.isAdd());
1062:       assertEquals((-1), node1.getCharno());
1063:       assertFalse(node1.isNew());
1064:       assertFalse(node1.isSwitch());
1065:       assertFalse(node1.isVar());
1066:       assertFalse(node1.isDefaultCase());
1067:       assertFalse(node1.isStringKey());
1068:       assertFalse(node1.isLabelName());
1069:       assertFalse(node1.isArrayLit());
1070:       assertFalse(node1.isLabel());
1071:       assertFalse(node1.isAssignAdd());
1072:       assertFalse(node1.isOr());
1073:       assertFalse(node1.isReturn());
1074:       assertEquals((-1), node1.getLineno());
1075:       assertFalse(node1.isDo());
1076:       assertEquals((-1), node1.getSourcePosition());
1077:       assertFalse(node1.isNumber());
1078:       assertFalse(node1.isBlock());
1079:       assertTrue(node1.isString());
1080:       assertFalse(node1.hasOneChild());
1081:       assertFalse(node1.isWhile());
1082:       assertFalse(node1.isAssign());
1083:       assertFalse(node1.isWith());
1084:       assertFalse(node1.isGetElem());
1085:       assertFalse(node1.isName());
1086:       assertFalse(node1.hasChildren());
1087:       assertFalse(node1.isDec());
1088:       assertFalse(node1.hasMoreThanOneChild());
1089:       assertFalse(node1.isTypeOf());
1090:       assertFalse(node1.isCall());
1091:       assertFalse(node1.isExprResult());
1092:       assertFalse(node1.isInstanceOf());
1093:       assertFalse(node1.isGetProp());
1094:       assertFalse(node1.isComma());
1095:       assertFalse(node1.isAnd());
1096:       assertFalse(node1.isNot());
1097:       assertFalse(node1.isObjectLit());
1098:       assertFalse(node1.isSetterDef());
1099:       assertFalse(node1.isDebugger());
1100:       assertFalse(node1.isThrow());
1101:       assertFalse(node1.isFalse());
1102:       assertEquals(40, node1.getType());
1103:       assertFalse(node1.isCast());
1104:       assertFalse(node1.isFunction());
1105:       assertFalse(node1.isContinue());
1106:       assertFalse(node0.equals((Object)node1));
1107:       assertFalse(node1.equals((Object)node2));
1108:       assertFalse(node1.equals((Object)node0));
1109:       assertEquals(8, Node.FLAG_NO_THROWS);
1110:       assertEquals(39, Node.EMPTY_BLOCK);
1111:       assertEquals(48, Node.DIRECTIVES);
1112:       assertEquals(50, Node.FREE_CALL);
1113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1114:       assertEquals(40, Node.ORIGINALNAME_PROP);
1115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1116:       assertEquals(4095, Node.COLUMN_MASK);
1117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1119:       assertEquals(43, Node.IS_CONSTANT_NAME);
1120:       assertEquals(30, Node.VAR_ARGS_NAME);
1121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1122:       assertEquals(46, Node.IS_NAMESPACE);
1123:       assertEquals(54, Node.SLASH_V);
1124:       assertEquals(56, Node.CHANGE_TIME);
1125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(37, Node.OPT_ARG_NAME);
1128:       assertEquals(2, Node.POST_FLAG);
1129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1130:       assertEquals(29, Node.JSDOC_INFO_PROP);
1131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1132:       assertEquals(12, Node.COLUMN_BITS);
1133:       assertEquals(32, Node.INCRDECR_PROP);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(36, Node.QUOTED_PROP);
1136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1137:       assertEquals(57, Node.LAST_PROP);
1138:       assertEquals(49, Node.DIRECT_EVAL);
1139:       assertEquals(53, Node.INPUT_ID);
1140:       assertEquals(52, Node.LENGTH);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1145:       assertEquals(50, Node.FREE_CALL);
1146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1148:       assertEquals(40, Node.ORIGINALNAME_PROP);
1149:       assertEquals(39, Node.EMPTY_BLOCK);
1150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1152:       assertEquals(1, Node.DECR_FLAG);
1153:       assertEquals(30, Node.VAR_ARGS_NAME);
1154:       assertEquals(32, Node.INCRDECR_PROP);
1155:       assertEquals(54, Node.SLASH_V);
1156:       assertEquals(43, Node.IS_CONSTANT_NAME);
1157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1158:       assertEquals(46, Node.IS_NAMESPACE);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(29, Node.JSDOC_INFO_PROP);
1161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1164:       assertEquals(2, Node.POST_FLAG);
1165:       assertEquals(12, Node.COLUMN_BITS);
1166:       assertEquals(47, Node.IS_DISPATCHER);
1167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1168:       assertEquals(49, Node.DIRECT_EVAL);
1169:       assertEquals(55, Node.INFERRED_FUNCTION);
1170:       assertEquals(57, Node.LAST_PROP);
1171:       assertEquals(4095, Node.COLUMN_MASK);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(48, Node.DIRECTIVES);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(8, Node.FLAG_NO_THROWS);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(56, Node.CHANGE_TIME);
1179:       assertEquals(36, Node.QUOTED_PROP);
1180:       assertEquals(57, Node.REFLECTED_OBJECT);
1181:       assertFalse(iterable0.contains(node1));
1182:       assertNotSame(node0, node1);
1183:       assertSame(node0, node2);
1184:       assertNotSame(node1, node2);
1185:       assertNotSame(node1, node0);
1186:       
1187:       node0.detachChildren();
1188:       assertFalse(node0.hasMoreThanOneChild());
1189:       assertFalse(node0.isReturn());
1190:       assertFalse(node0.isAssignAdd());
1191:       assertFalse(node0.isDo());
1192:       assertEquals((-1), node0.getLineno());
1193:       assertFalse(node0.isWhile());
1194:       assertEquals((-1), node0.getSourcePosition());
1195:       assertFalse(node0.isAdd());
1196:       assertFalse(node0.isOr());
1197:       assertFalse(node0.isNumber());
1198:       assertFalse(node0.hasOneChild());
1199:       assertFalse(node0.isGetElem());
1200:       assertFalse(node0.isCall());
1201:       assertTrue(node0.isString());
1202:       assertFalse(node0.isName());
1203:       assertFalse(node0.hasChildren());
1204:       assertFalse(node0.isBlock());
1205:       assertFalse(node0.isExprResult());
1206:       assertFalse(node0.isWith());
1207:       assertFalse(node0.isAssign());
1208:       assertFalse(node0.isDec());
1209:       assertFalse(node0.isTypeOf());
1210:       assertFalse(node0.isDefaultCase());
1211:       assertFalse(node0.isParamList());
1212:       assertFalse(node0.isScript());
1213:       assertFalse(node0.isTrue());
1214:       assertFalse(node0.isNull());
1215:       assertFalse(node0.isVar());
1216:       assertFalse(node0.isArrayLit());
1217:       assertFalse(node0.isStringKey());
1218:       assertFalse(node0.isLabelName());
1219:       assertFalse(node0.isNew());
1220:       assertFalse(node0.isLabel());
1221:       assertEquals(0, node0.getChildCount());
1222:       assertFalse(node0.isCase());
1223:       assertFalse(node0.isNE());
1224:       assertFalse(node0.isSwitch());
1225:       assertEquals((-1), node0.getCharno());
1226:       assertFalse(node0.isInc());
1227:       assertFalse(node0.isEmpty());
1228:       assertFalse(node0.isIn());
1229:       assertFalse(node0.isGetterDef());
1230:       assertFalse(node0.isHook());
1231:       assertFalse(node0.isFor());
1232:       assertFalse(node0.isTry());
1233:       assertFalse(node0.isIf());
1234:       assertFalse(node0.isVoid());
1235:       assertFalse(node0.isDelProp());
1236:       assertFalse(node0.isComma());
1237:       assertFalse(node0.isBreak());
1238:       assertFalse(node0.isThis());
1239:       assertFalse(node0.isRegExp());
1240:       assertFalse(node0.isCatch());
1241:       assertFalse(node0.isAnd());
1242:       assertFalse(node0.isInstanceOf());
1243:       assertEquals(40, node0.getType());
1244:       assertFalse(node0.isSetterDef());
1245:       assertFalse(node0.isDebugger());
1246:       assertFalse(node0.isGetProp());
1247:       assertFalse(node0.isNot());
1248:       assertFalse(node0.isObjectLit());
1249:       assertFalse(node0.isCast());
1250:       assertFalse(node0.isThrow());
1251:       assertFalse(node0.isFalse());
1252:       assertFalse(node0.isContinue());
1253:       assertFalse(node0.isFunction());
1254:       assertFalse(node0.equals((Object)node1));
1255:       assertEquals(8, Node.FLAG_NO_THROWS);
1256:       assertEquals(39, Node.EMPTY_BLOCK);
1257:       assertEquals(48, Node.DIRECTIVES);
1258:       assertEquals(50, Node.FREE_CALL);
1259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1260:       assertEquals(40, Node.ORIGINALNAME_PROP);
1261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1262:       assertEquals(4095, Node.COLUMN_MASK);
1263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1265:       assertEquals(43, Node.IS_CONSTANT_NAME);
1266:       assertEquals(30, Node.VAR_ARGS_NAME);
1267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1268:       assertEquals(46, Node.IS_NAMESPACE);
1269:       assertEquals(54, Node.SLASH_V);
1270:       assertEquals(56, Node.CHANGE_TIME);
1271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1272:       assertEquals(47, Node.IS_DISPATCHER);
1273:       assertEquals(37, Node.OPT_ARG_NAME);
1274:       assertEquals(2, Node.POST_FLAG);
1275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1276:       assertEquals(29, Node.JSDOC_INFO_PROP);
1277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1278:       assertEquals(12, Node.COLUMN_BITS);
1279:       assertEquals(32, Node.INCRDECR_PROP);
1280:       assertEquals(1, Node.DECR_FLAG);
1281:       assertEquals(36, Node.QUOTED_PROP);
1282:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1283:       assertEquals(57, Node.LAST_PROP);
1284:       assertEquals(49, Node.DIRECT_EVAL);
1285:       assertEquals(53, Node.INPUT_ID);
1286:       assertEquals(52, Node.LENGTH);
1287:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1288:       assertEquals(55, Node.INFERRED_FUNCTION);
1289:       assertEquals(57, Node.REFLECTED_OBJECT);
1290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1291:       assertNotSame(node0, node1);
1292:       assertSame(node0, node2);
1293:       
1294:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
1295:       assertNull(staticSourceFile0);
1296:       assertFalse(node0.hasMoreThanOneChild());
1297:       assertFalse(node0.isReturn());
1298:       assertFalse(node0.isAssignAdd());
1299:       assertFalse(node0.isDo());
1300:       assertEquals((-1), node0.getLineno());
1301:       assertFalse(node0.isWhile());
1302:       assertEquals((-1), node0.getSourcePosition());
1303:       assertFalse(node0.isAdd());
1304:       assertFalse(node0.isOr());
1305:       assertFalse(node0.isNumber());
1306:       assertFalse(node0.hasOneChild());
1307:       assertFalse(node0.isGetElem());
1308:       assertFalse(node0.isCall());
1309:       assertTrue(node0.isString());
1310:       assertFalse(node0.isName());
1311:       assertFalse(node0.hasChildren());
1312:       assertFalse(node0.isBlock());
1313:       assertFalse(node0.isExprResult());
1314:       assertFalse(node0.isWith());
1315:       assertFalse(node0.isAssign());
1316:       assertFalse(node0.isDec());
1317:       assertFalse(node0.isTypeOf());
1318:       assertFalse(node0.isDefaultCase());
1319:       assertFalse(node0.isParamList());
1320:       assertFalse(node0.isScript());
1321:       assertFalse(node0.isTrue());
1322:       assertFalse(node0.isNull());
1323:       assertFalse(node0.isVar());
1324:       assertFalse(node0.isArrayLit());
1325:       assertFalse(node0.isStringKey());
1326:       assertFalse(node0.isLabelName());
1327:       assertFalse(node0.isNew());
1328:       assertFalse(node0.isLabel());
1329:       assertEquals(0, node0.getChildCount());
1330:       assertFalse(node0.isCase());
1331:       assertFalse(node0.isNE());
1332:       assertFalse(node0.isSwitch());
1333:       assertEquals((-1), node0.getCharno());
1334:       assertFalse(node0.isInc());
1335:       assertFalse(node0.isEmpty());
1336:       assertFalse(node0.isIn());
1337:       assertFalse(node0.isGetterDef());
1338:       assertFalse(node0.isHook());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isTry());
1341:       assertFalse(node0.isIf());
1342:       assertFalse(node0.isVoid());
1343:       assertFalse(node0.isDelProp());
1344:       assertFalse(node0.isComma());
1345:       assertFalse(node0.isBreak());
1346:       assertFalse(node0.isThis());
1347:       assertFalse(node0.isRegExp());
1348:       assertFalse(node0.isCatch());
1349:       assertFalse(node0.isAnd());
1350:       assertFalse(node0.isInstanceOf());
1351:       assertEquals(40, node0.getType());
1352:       assertFalse(node0.isSetterDef());
1353:       assertFalse(node0.isDebugger());
1354:       assertFalse(node0.isGetProp());
1355:       assertFalse(node0.isNot());
1356:       assertFalse(node0.isObjectLit());
1357:       assertFalse(node0.isCast());
1358:       assertFalse(node0.isThrow());
1359:       assertFalse(node0.isFalse());
1360:       assertFalse(node0.isContinue());
1361:       assertFalse(node0.isFunction());
1362:       assertFalse(node1.isNE());
1363:       assertFalse(node1.isIf());
1364:       assertFalse(node1.isEmpty());
1365:       assertFalse(node1.isGetterDef());
1366:       assertFalse(node1.isCase());
1367:       assertFalse(node1.isInc());
1368:       assertFalse(node1.isIn());
1369:       assertFalse(node1.isTry());
1370:       assertFalse(node1.isVoid());
1371:       assertFalse(node1.isHook());
1372:       assertFalse(node1.isTrue());
1373:       assertFalse(node1.isFor());
1374:       assertFalse(node1.isDelProp());
1375:       assertFalse(node1.isBreak());
1376:       assertFalse(node1.isRegExp());
1377:       assertFalse(node1.isCatch());
1378:       assertEquals(0, node1.getChildCount());
1379:       assertFalse(node1.isThis());
1380:       assertFalse(node1.isNull());
1381:       assertFalse(node1.isParamList());
1382:       assertFalse(node1.isScript());
1383:       assertFalse(node1.isAdd());
1384:       assertEquals((-1), node1.getCharno());
1385:       assertFalse(node1.isNew());
1386:       assertFalse(node1.isSwitch());
1387:       assertFalse(node1.isVar());
1388:       assertFalse(node1.isDefaultCase());
1389:       assertFalse(node1.isStringKey());
1390:       assertFalse(node1.isLabelName());
1391:       assertFalse(node1.isArrayLit());
1392:       assertFalse(node1.isLabel());
1393:       assertFalse(node1.isAssignAdd());
1394:       assertFalse(node1.isOr());
1395:       assertFalse(node1.isReturn());
1396:       assertEquals((-1), node1.getLineno());
1397:       assertFalse(node1.isDo());
1398:       assertEquals((-1), node1.getSourcePosition());
1399:       assertFalse(node1.isNumber());
1400:       assertFalse(node1.isBlock());
1401:       assertTrue(node1.isString());
1402:       assertFalse(node1.hasOneChild());
1403:       assertFalse(node1.isWhile());
1404:       assertFalse(node1.isAssign());
1405:       assertFalse(node1.isWith());
1406:       assertFalse(node1.isGetElem());
1407:       assertFalse(node1.isName());
1408:       assertFalse(node1.hasChildren());
1409:       assertFalse(node1.isDec());
1410:       assertFalse(node1.hasMoreThanOneChild());
1411:       assertFalse(node1.isTypeOf());
1412:       assertFalse(node1.isCall());
1413:       assertFalse(node1.isExprResult());
1414:       assertFalse(node1.isInstanceOf());
1415:       assertFalse(node1.isGetProp());
1416:       assertFalse(node1.isComma());
1417:       assertFalse(node1.isAnd());
1418:       assertFalse(node1.isNot());
1419:       assertFalse(node1.isObjectLit());
1420:       assertFalse(node1.isSetterDef());
1421:       assertFalse(node1.isDebugger());
1422:       assertFalse(node1.isThrow());
1423:       assertFalse(node1.isFalse());
1424:       assertEquals(40, node1.getType());
1425:       assertFalse(node1.isCast());
1426:       assertFalse(node1.isFunction());
1427:       assertFalse(node1.isContinue());
1428:       assertFalse(node0.equals((Object)node1));
1429:       assertFalse(node1.equals((Object)node2));
1430:       assertFalse(node1.equals((Object)node0));
1431:       assertEquals(8, Node.FLAG_NO_THROWS);
1432:       assertEquals(39, Node.EMPTY_BLOCK);
1433:       assertEquals(48, Node.DIRECTIVES);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1436:       assertEquals(40, Node.ORIGINALNAME_PROP);
1437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1438:       assertEquals(4095, Node.COLUMN_MASK);
1439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1440:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1441:       assertEquals(43, Node.IS_CONSTANT_NAME);
1442:       assertEquals(30, Node.VAR_ARGS_NAME);
1443:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1444:       assertEquals(46, Node.IS_NAMESPACE);
1445:       assertEquals(54, Node.SLASH_V);
1446:       assertEquals(56, Node.CHANGE_TIME);
1447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1448:       assertEquals(47, Node.IS_DISPATCHER);
1449:       assertEquals(37, Node.OPT_ARG_NAME);
1450:       assertEquals(2, Node.POST_FLAG);
1451:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1452:       assertEquals(29, Node.JSDOC_INFO_PROP);
1453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1454:       assertEquals(12, Node.COLUMN_BITS);
1455:       assertEquals(32, Node.INCRDECR_PROP);
1456:       assertEquals(1, Node.DECR_FLAG);
1457:       assertEquals(36, Node.QUOTED_PROP);
1458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1459:       assertEquals(57, Node.LAST_PROP);
1460:       assertEquals(49, Node.DIRECT_EVAL);
1461:       assertEquals(53, Node.INPUT_ID);
1462:       assertEquals(52, Node.LENGTH);
1463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1464:       assertEquals(55, Node.INFERRED_FUNCTION);
1465:       assertEquals(57, Node.REFLECTED_OBJECT);
1466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1467:       assertEquals(50, Node.FREE_CALL);
1468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(39, Node.EMPTY_BLOCK);
1472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1474:       assertEquals(1, Node.DECR_FLAG);
1475:       assertEquals(30, Node.VAR_ARGS_NAME);
1476:       assertEquals(32, Node.INCRDECR_PROP);
1477:       assertEquals(54, Node.SLASH_V);
1478:       assertEquals(43, Node.IS_CONSTANT_NAME);
1479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1480:       assertEquals(46, Node.IS_NAMESPACE);
1481:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1482:       assertEquals(29, Node.JSDOC_INFO_PROP);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(37, Node.OPT_ARG_NAME);
1485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1486:       assertEquals(2, Node.POST_FLAG);
1487:       assertEquals(12, Node.COLUMN_BITS);
1488:       assertEquals(47, Node.IS_DISPATCHER);
1489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1490:       assertEquals(49, Node.DIRECT_EVAL);
1491:       assertEquals(55, Node.INFERRED_FUNCTION);
1492:       assertEquals(57, Node.LAST_PROP);
1493:       assertEquals(4095, Node.COLUMN_MASK);
1494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1495:       assertEquals(53, Node.INPUT_ID);
1496:       assertEquals(48, Node.DIRECTIVES);
1497:       assertEquals(52, Node.LENGTH);
1498:       assertEquals(8, Node.FLAG_NO_THROWS);
1499:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1500:       assertEquals(56, Node.CHANGE_TIME);
1501:       assertEquals(36, Node.QUOTED_PROP);
1502:       assertEquals(57, Node.REFLECTED_OBJECT);
1503:       assertNotSame(node0, node1);
1504:       assertSame(node0, node2);
1505:       assertNotSame(node1, node2);
1506:       assertNotSame(node1, node0);
1507:       
1508:       try { 
1509:         node2.getDouble();
1510:         fail("Expecting exception: UnsupportedOperationException");
1511:       
1512:       } catch(UnsupportedOperationException e) {
1513:          //
1514:          // STRING qrvsqkX5OB [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
1515:          //
1516:          verifyException("com.google.javascript.rhino.Node", e);
1517:       }
1518:   }
1519: }
RegularFileObject[/tmp/EvoSuite_144_1629223107555/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.ImmutableList$SerializedForm",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.InputId",
261:       "com.google.javascript.rhino.Token",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.common.collect.Sets",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterators$12",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.AbstractIndexedListIterator",
345:       "com.google.common.collect.Iterators$11",
346:       "com.google.common.collect.Sets$ImprovedAbstractSet",
347:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
348:       "com.google.common.collect.Hashing",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.ImmutableSet",
364:       "com.google.common.collect.EmptyImmutableSet",
365:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
366:       "com.google.common.collect.Platform",
367:       "com.google.common.collect.ImmutableList$1"
368:     );
369:   }
370: }

[MASTER] 17:58:27.830 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("qrvsqkX5OB");
assertNotNull(node0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node1 = node0.cloneTree();
assertNotNull(node1);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isHook());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

boolean boolean0 = node1.isLocalResultCall();
assertFalse(boolean0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isHook());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

node0.setQuotedString();
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotSame(node0, node1);

Node node2 = node0.copyInformationFrom(node1);
assertNotNull(node2);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isHook());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertEquals(40, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node0);
assertNotSame(node2, node1);

Iterable<Node> iterable0 = node1.children();
assertNotNull(iterable0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isHook());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(iterable0.contains(node1));
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

node0.detachChildren();
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotSame(node0, node1);
assertSame(node0, node2);

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertNull(staticSourceFile0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isHook());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

node2.getDouble();

[MASTER] 17:58:49.372 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:49.846 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:50.113 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:50.372 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:50.601 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:50.837 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:52.285 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:52.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:52.890 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:53.166 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:53.484 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:53.738 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:53.966 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:54.226 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:54.508 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:54.774 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:55.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:55.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:55.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:56.007 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:56.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/11
* Done!

* Computation finished
