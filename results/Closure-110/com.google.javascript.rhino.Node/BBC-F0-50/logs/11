* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 9427
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2121682777
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:06:02.287 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:06:04.142 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.setSideEffectFlags(I)V
[MASTER] 10:06:04.149 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:04.155 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:04.184 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:04.200 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:04.211 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:04.213 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:04.266 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true in context: com.google.javascript.rhino.Node:addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:06:06.232 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:10:51.720 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 6857
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1323
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1624
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 118
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 538
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 2479
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 1791
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 46
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 3221
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 2207
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 46
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 101
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 23442
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 5457
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2969
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 319
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 161
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3975
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 20283
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 229
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1483
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 199
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 11919
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 5824
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3341
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1777: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1776: 46
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 531
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1779: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 501
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 137
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1778: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 200
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 117
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 21326
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2062
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 17151
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1821
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 5525
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1513
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 10767
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 7596
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 2865
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5364
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 89550
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 3207
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 2409
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1074
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 2198
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 136
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 2668
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 9152
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 10004
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 113
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 513
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 23688
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 136
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 136
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 232
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 531
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 136
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 23991
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 12016
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 232
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 136
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 6392
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 2533
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 13015
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 1870
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 2643
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 89550
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 319
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2093
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1353
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2022
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 23
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1992
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 2728
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 7789
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 319
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 302
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 7888
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 3597
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 46
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 871
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 20448
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 2058
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 3858
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1542
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 652
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 374
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 5007
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 813
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 118
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 8196
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 380
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 136
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 7586
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 3207
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 243
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 13403
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 2211
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 2865
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 13212
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 229
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 652
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 652
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1025
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 652
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 34751
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 3207
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 13808
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 23991
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 32757
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 910
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 14928
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 319
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 99
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 1649
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 30232
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 5138
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 232
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 232
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 23798
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 136
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 2058
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 2865
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 89550
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2483
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 263
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 233
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 10163
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 2058
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 2865
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 63
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2483
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 80
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4766
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1411
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 53882
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 5824
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 2373
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 188
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1183
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 13212
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 20259
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 136
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 910
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 26609
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 8965
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 11605
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 254
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 2533
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 13770
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 136
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 12993
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 452
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 2916
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1090
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 1611
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 175
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 2140
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 2533
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 5525
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 117
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 142
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 6222
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 6418
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 2134
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 713
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 6697
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3428
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 2141
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 8498
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 13266
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 136
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 784
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 2533
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 337
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 380
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 2808
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 229
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 301
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 63
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 63
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 12169
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 1075
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 319
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 875
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 136
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5784
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 1991
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 2865
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 5905
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 63
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 229
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 63
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 5905
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 5905
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 4211
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 5905
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 14482
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1560
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 5525
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 2699
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 13678
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 2411
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1323
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 531
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 16005
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 4956
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 15316
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 14839
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 881
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 421
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 2865
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 765
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 784
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 229
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 421
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 229
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 531
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 3187
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 652
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2651
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 421
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 17440
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 910
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 319
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 635
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 20133
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 1755
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 15512
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 5572
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 166
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 2797
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 437: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 438: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 435: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 436: 8
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 319
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 3764
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 439: 8
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 15560
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 440: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 429: 8
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 437
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 319
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 430: 8
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 427: 8
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 808
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 428: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 433: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 434: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 16744
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 431: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 432: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 22122
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 6519
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 319
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 2314
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 99
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 53
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 8764
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 784
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 9323
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 15202
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1436
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 20553
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3691
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 2882
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 70
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2969
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 3166
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 421: 8
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 422: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 420: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 425: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 421
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 426: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 423: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 424: 8
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 4956
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 7485
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 319
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 804
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2387
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 23811
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 162
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 2373
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 2058
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 9293
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 9293
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 18114
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1436
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2348
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 652
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3466
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 538
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 5442
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 1755
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2793
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 17873
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 2699
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 30
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 910
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 1472
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 23808
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1194
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 319
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2533
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 477
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 2066
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 2719
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1567
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 12152
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 12302
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 229
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 634
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1436
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 146
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 3187
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 20333
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 20432
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 713
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 910
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 374
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 3425
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 29951
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 23048
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 22264
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 89
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 46
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 895
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 3861
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 18671
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 16913
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 421
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 575
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 229
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 5824
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 11679
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 13202
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 784
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1459: 113
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 14148
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 29655
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 229
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1565
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 50
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 2258
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 913
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 22689
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1384
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3215
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 229
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 229
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 9704
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 229
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1317
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 439
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 229
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 23808
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1697
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 2699
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 10220
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 311
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 45853
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 617
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 45853
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 37797
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 5824
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 68
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 12815
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 12815
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 24698
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 24849
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 902
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 791
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 31757
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1323
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 319
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 319
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 12750
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 652
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 11932
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 71
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 14965
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 24989
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 15584
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1332
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 1611
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 652
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 5905
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 1057
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 229
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 7476
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 3207
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 7094
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 3786
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 313
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2559
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 136
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1933
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 33
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 229
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 22368
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1323
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 580
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 6280
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 531
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 229
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 136
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 13068
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 5905
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 421
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 13662
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 13125
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 652
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 33428
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 231
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 8
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 11932
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 12415
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1245
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 63
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 63
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 765
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 19303
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 12169
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 136
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 136
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 136
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 136
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 21643
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 531
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1509
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 5285
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 2699
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 19188
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 89
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 5778
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 89550
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 12265
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2533
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 910
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 910
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 319
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 319
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 9396
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4548
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 407
Number of times BBC is called in total: 5266857
* Search finished after 604s and 571 generations, 227859 statements, best individual has fitness: 2737.0
* Minimizing test suite
[MASTER] 10:17:29.800 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 797
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 631
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 477
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2292
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 591
* Generated 858 tests with total length 10601
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:18:44.315 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6726% of time used, but only 25/858 tests minimized), falling back to using all assertions
[MASTER] 10:19:03.961 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 10:19:15.827 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 10:19:20.124 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1628158759948/com/google/javascript/rhino/Node_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1628158759948/com/google/javascript/rhino/Node_35_tmp__ESTest_scaffolding.java]]
[MASTER] 10:19:20.124 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:20.124 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:20.130 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1102
[MASTER] 10:19:20.132 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1628158759948/com/google/javascript/rhino/Node_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:19:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_35_tmp__ESTest extends Node_35_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("qrvsqkX5OB");
21:       assertFalse(node0.isThis());
22:       assertFalse(node0.isGetProp());
23:       assertFalse(node0.isBreak());
24:       assertFalse(node0.isComma());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isHook());
28:       assertFalse(node0.isThrow());
29:       assertFalse(node0.isExprResult());
30:       assertFalse(node0.isInc());
31:       assertFalse(node0.isWith());
32:       assertFalse(node0.isNumber());
33:       assertFalse(node0.isGetterDef());
34:       assertFalse(node0.isOr());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.hasMoreThanOneChild());
37:       assertFalse(node0.hasOneChild());
38:       assertFalse(node0.isCase());
39:       assertFalse(node0.isTry());
40:       assertFalse(node0.isFor());
41:       assertFalse(node0.isLabel());
42:       assertFalse(node0.isAssignAdd());
43:       assertFalse(node0.isDo());
44:       assertFalse(node0.isScript());
45:       assertFalse(node0.isSwitch());
46:       assertEquals((-1), node0.getCharno());
47:       assertFalse(node0.isArrayLit());
48:       assertFalse(node0.isLabelName());
49:       assertFalse(node0.isParamList());
50:       assertFalse(node0.isStringKey());
51:       assertFalse(node0.isSetterDef());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isVar());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isBlock());
56:       assertEquals(40, node0.getType());
57:       assertTrue(node0.isString());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isNew());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isCall());
66:       assertEquals((-1), node0.getLineno());
67:       assertFalse(node0.isName());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.hasChildren());
72:       assertFalse(node0.isDelProp());
73:       assertFalse(node0.isDec());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isGetElem());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isDebugger());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isAnd());
87:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
88:       assertEquals(29, Node.JSDOC_INFO_PROP);
89:       assertEquals(47, Node.IS_DISPATCHER);
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(2, Node.POST_FLAG);
92:       assertEquals(53, Node.INPUT_ID);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(30, Node.VAR_ARGS_NAME);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(50, Node.FREE_CALL);
108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertNotNull(node0);
124:       
125:       Node node1 = node0.cloneTree();
126:       assertFalse(node0.isThis());
127:       assertFalse(node0.isGetProp());
128:       assertFalse(node0.isBreak());
129:       assertFalse(node0.isComma());
130:       assertFalse(node0.isFalse());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.isHook());
133:       assertFalse(node0.isThrow());
134:       assertFalse(node0.isExprResult());
135:       assertFalse(node0.isInc());
136:       assertFalse(node0.isWith());
137:       assertFalse(node0.isNumber());
138:       assertFalse(node0.isGetterDef());
139:       assertFalse(node0.isOr());
140:       assertFalse(node0.isEmpty());
141:       assertFalse(node0.hasMoreThanOneChild());
142:       assertFalse(node0.hasOneChild());
143:       assertFalse(node0.isCase());
144:       assertFalse(node0.isTry());
145:       assertFalse(node0.isFor());
146:       assertFalse(node0.isLabel());
147:       assertFalse(node0.isAssignAdd());
148:       assertFalse(node0.isDo());
149:       assertFalse(node0.isScript());
150:       assertFalse(node0.isSwitch());
151:       assertEquals((-1), node0.getCharno());
152:       assertFalse(node0.isArrayLit());
153:       assertFalse(node0.isLabelName());
154:       assertFalse(node0.isParamList());
155:       assertFalse(node0.isStringKey());
156:       assertFalse(node0.isSetterDef());
157:       assertFalse(node0.isNull());
158:       assertFalse(node0.isVar());
159:       assertEquals(0, node0.getChildCount());
160:       assertFalse(node0.isBlock());
161:       assertEquals(40, node0.getType());
162:       assertTrue(node0.isString());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isRegExp());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isNew());
168:       assertFalse(node0.isAdd());
169:       assertFalse(node0.isCatch());
170:       assertFalse(node0.isCall());
171:       assertEquals((-1), node0.getLineno());
172:       assertFalse(node0.isName());
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isNE());
175:       assertFalse(node0.isTypeOf());
176:       assertFalse(node0.hasChildren());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isDec());
179:       assertEquals((-1), node0.getSourcePosition());
180:       assertFalse(node0.isAssign());
181:       assertFalse(node0.isGetElem());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.isReturn());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isNot());
188:       assertFalse(node0.isContinue());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isObjectLit());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node1.isWith());
193:       assertFalse(node1.isNot());
194:       assertFalse(node1.isExprResult());
195:       assertFalse(node1.isScript());
196:       assertFalse(node1.isInstanceOf());
197:       assertFalse(node1.hasOneChild());
198:       assertFalse(node1.isThis());
199:       assertFalse(node1.isDec());
200:       assertFalse(node1.hasChildren());
201:       assertFalse(node1.isBreak());
202:       assertFalse(node1.isComma());
203:       assertFalse(node1.isAssign());
204:       assertFalse(node1.isTypeOf());
205:       assertFalse(node1.isGetElem());
206:       assertEquals((-1), node1.getLineno());
207:       assertFalse(node1.isOr());
208:       assertFalse(node1.isSwitch());
209:       assertFalse(node1.isDo());
210:       assertFalse(node1.isNew());
211:       assertFalse(node1.isCase());
212:       assertFalse(node1.isAdd());
213:       assertFalse(node1.isHook());
214:       assertFalse(node1.hasMoreThanOneChild());
215:       assertTrue(node1.isString());
216:       assertFalse(node1.isBlock());
217:       assertFalse(node1.isLabel());
218:       assertFalse(node1.isAssignAdd());
219:       assertFalse(node1.isVar());
220:       assertFalse(node1.isNumber());
221:       assertFalse(node1.isLabelName());
222:       assertFalse(node1.isGetterDef());
223:       assertFalse(node1.isArrayLit());
224:       assertFalse(node1.isStringKey());
225:       assertEquals((-1), node1.getCharno());
226:       assertFalse(node1.isParamList());
227:       assertFalse(node1.isDefaultCase());
228:       assertFalse(node1.isFunction());
229:       assertFalse(node1.isRegExp());
230:       assertFalse(node1.isVoid());
231:       assertFalse(node1.isCatch());
232:       assertEquals(0, node1.getChildCount());
233:       assertFalse(node1.isTry());
234:       assertEquals(40, node1.getType());
235:       assertFalse(node1.isFor());
236:       assertFalse(node1.isIf());
237:       assertFalse(node1.isName());
238:       assertFalse(node1.isDelProp());
239:       assertFalse(node1.isSetterDef());
240:       assertFalse(node1.isCall());
241:       assertFalse(node1.isEmpty());
242:       assertFalse(node1.isIn());
243:       assertFalse(node1.isNE());
244:       assertFalse(node1.isTrue());
245:       assertFalse(node1.isNull());
246:       assertFalse(node1.isContinue());
247:       assertFalse(node1.isInc());
248:       assertFalse(node1.isThrow());
249:       assertFalse(node1.isReturn());
250:       assertFalse(node1.isWhile());
251:       assertEquals((-1), node1.getSourcePosition());
252:       assertFalse(node1.isGetProp());
253:       assertFalse(node1.isFalse());
254:       assertFalse(node1.isCast());
255:       assertFalse(node1.isObjectLit());
256:       assertFalse(node1.isAnd());
257:       assertFalse(node1.isDebugger());
258:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(47, Node.IS_DISPATCHER);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(2, Node.POST_FLAG);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(32, Node.INCRDECR_PROP);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(46, Node.IS_NAMESPACE);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(43, Node.IS_CONSTANT_NAME);
272:       assertEquals(40, Node.ORIGINALNAME_PROP);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(57, Node.REFLECTED_OBJECT);
275:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
276:       assertEquals(52, Node.LENGTH);
277:       assertEquals(8, Node.FLAG_NO_THROWS);
278:       assertEquals(50, Node.FREE_CALL);
279:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
281:       assertEquals(39, Node.EMPTY_BLOCK);
282:       assertEquals(15, Node.NO_SIDE_EFFECTS);
283:       assertEquals(57, Node.LAST_PROP);
284:       assertEquals(55, Node.INFERRED_FUNCTION);
285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
286:       assertEquals(12, Node.COLUMN_BITS);
287:       assertEquals(36, Node.QUOTED_PROP);
288:       assertEquals(4095, Node.COLUMN_MASK);
289:       assertEquals(48, Node.DIRECTIVES);
290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
291:       assertEquals(37, Node.OPT_ARG_NAME);
292:       assertEquals(56, Node.CHANGE_TIME);
293:       assertEquals(49, Node.DIRECT_EVAL);
294:       assertEquals(1, Node.DECR_FLAG);
295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
296:       assertEquals(12, Node.COLUMN_BITS);
297:       assertEquals(30, Node.VAR_ARGS_NAME);
298:       assertEquals(2, Node.POST_FLAG);
299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
300:       assertEquals(15, Node.NO_SIDE_EFFECTS);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(57, Node.LAST_PROP);
305:       assertEquals(40, Node.ORIGINALNAME_PROP);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(43, Node.IS_CONSTANT_NAME);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(55, Node.INFERRED_FUNCTION);
313:       assertEquals(4095, Node.COLUMN_MASK);
314:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
315:       assertEquals(53, Node.INPUT_ID);
316:       assertEquals(39, Node.EMPTY_BLOCK);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(48, Node.DIRECTIVES);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertNotSame(node0, node1);
331:       assertNotSame(node1, node0);
332:       assertNotNull(node1);
333:       assertFalse(node1.equals((Object)node0));
334:       
335:       node1.type = 0;
336:       assertFalse(node0.isThis());
337:       assertFalse(node0.isGetProp());
338:       assertFalse(node0.isBreak());
339:       assertFalse(node0.isComma());
340:       assertFalse(node0.isFalse());
341:       assertFalse(node0.isInstanceOf());
342:       assertFalse(node0.isHook());
343:       assertFalse(node0.isThrow());
344:       assertFalse(node0.isExprResult());
345:       assertFalse(node0.isInc());
346:       assertFalse(node0.isWith());
347:       assertFalse(node0.isNumber());
348:       assertFalse(node0.isGetterDef());
349:       assertFalse(node0.isOr());
350:       assertFalse(node0.isEmpty());
351:       assertFalse(node0.hasMoreThanOneChild());
352:       assertFalse(node0.hasOneChild());
353:       assertFalse(node0.isCase());
354:       assertFalse(node0.isTry());
355:       assertFalse(node0.isFor());
356:       assertFalse(node0.isLabel());
357:       assertFalse(node0.isAssignAdd());
358:       assertFalse(node0.isDo());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isSwitch());
361:       assertEquals((-1), node0.getCharno());
362:       assertFalse(node0.isArrayLit());
363:       assertFalse(node0.isLabelName());
364:       assertFalse(node0.isParamList());
365:       assertFalse(node0.isStringKey());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isNull());
368:       assertFalse(node0.isVar());
369:       assertEquals(0, node0.getChildCount());
370:       assertFalse(node0.isBlock());
371:       assertEquals(40, node0.getType());
372:       assertTrue(node0.isString());
373:       assertFalse(node0.isDefaultCase());
374:       assertFalse(node0.isRegExp());
375:       assertFalse(node0.isTrue());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isNew());
378:       assertFalse(node0.isAdd());
379:       assertFalse(node0.isCatch());
380:       assertFalse(node0.isCall());
381:       assertEquals((-1), node0.getLineno());
382:       assertFalse(node0.isName());
383:       assertFalse(node0.isIf());
384:       assertFalse(node0.isNE());
385:       assertFalse(node0.isTypeOf());
386:       assertFalse(node0.hasChildren());
387:       assertFalse(node0.isDelProp());
388:       assertFalse(node0.isDec());
389:       assertEquals((-1), node0.getSourcePosition());
390:       assertFalse(node0.isAssign());
391:       assertFalse(node0.isGetElem());
392:       assertFalse(node0.isIn());
393:       assertFalse(node0.isReturn());
394:       assertFalse(node0.isWhile());
395:       assertFalse(node0.isFunction());
396:       assertFalse(node0.isDebugger());
397:       assertFalse(node0.isNot());
398:       assertFalse(node0.isContinue());
399:       assertFalse(node0.isCast());
400:       assertFalse(node0.isObjectLit());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node1.isWith());
403:       assertFalse(node1.isNot());
404:       assertFalse(node1.isExprResult());
405:       assertFalse(node1.isScript());
406:       assertFalse(node1.isInstanceOf());
407:       assertFalse(node1.hasOneChild());
408:       assertFalse(node1.isThis());
409:       assertFalse(node1.isDec());
410:       assertFalse(node1.hasChildren());
411:       assertFalse(node1.isBreak());
412:       assertFalse(node1.isComma());
413:       assertFalse(node1.isAssign());
414:       assertFalse(node1.isTypeOf());
415:       assertFalse(node1.isGetElem());
416:       assertEquals((-1), node1.getLineno());
417:       assertFalse(node1.isOr());
418:       assertFalse(node1.isSwitch());
419:       assertFalse(node1.isDo());
420:       assertFalse(node1.isNew());
421:       assertFalse(node1.isCase());
422:       assertFalse(node1.isAdd());
423:       assertFalse(node1.isHook());
424:       assertFalse(node1.hasMoreThanOneChild());
425:       assertFalse(node1.isBlock());
426:       assertFalse(node1.isLabel());
427:       assertFalse(node1.isAssignAdd());
428:       assertFalse(node1.isVar());
429:       assertFalse(node1.isNumber());
430:       assertFalse(node1.isLabelName());
431:       assertFalse(node1.isGetterDef());
432:       assertFalse(node1.isArrayLit());
433:       assertFalse(node1.isStringKey());
434:       assertEquals((-1), node1.getCharno());
435:       assertFalse(node1.isParamList());
436:       assertFalse(node1.isDefaultCase());
437:       assertFalse(node1.isFunction());
438:       assertFalse(node1.isRegExp());
439:       assertFalse(node1.isVoid());
440:       assertFalse(node1.isCatch());
441:       assertEquals(0, node1.getChildCount());
442:       assertFalse(node1.isTry());
443:       assertFalse(node1.isFor());
444:       assertFalse(node1.isIf());
445:       assertFalse(node1.isName());
446:       assertFalse(node1.isDelProp());
447:       assertFalse(node1.isSetterDef());
448:       assertFalse(node1.isCall());
449:       assertFalse(node1.isEmpty());
450:       assertFalse(node1.isIn());
451:       assertFalse(node1.isNE());
452:       assertFalse(node1.isTrue());
453:       assertFalse(node1.isNull());
454:       assertFalse(node1.isString());
455:       assertFalse(node1.isContinue());
456:       assertFalse(node1.isInc());
457:       assertEquals(0, node1.getType());
458:       assertFalse(node1.isThrow());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.isWhile());
461:       assertEquals((-1), node1.getSourcePosition());
462:       assertFalse(node1.isGetProp());
463:       assertFalse(node1.isFalse());
464:       assertFalse(node1.isCast());
465:       assertFalse(node1.isObjectLit());
466:       assertFalse(node1.isAnd());
467:       assertFalse(node1.isDebugger());
468:       
469:       node0.setQuotedString();
470:       assertFalse(node0.isThis());
471:       assertFalse(node0.isGetProp());
472:       assertFalse(node0.isBreak());
473:       assertFalse(node0.isComma());
474:       assertFalse(node0.isFalse());
475:       assertFalse(node0.isInstanceOf());
476:       assertFalse(node0.isHook());
477:       assertFalse(node0.isThrow());
478:       assertFalse(node0.isExprResult());
479:       assertFalse(node0.isInc());
480:       assertFalse(node0.isWith());
481:       assertFalse(node0.isNumber());
482:       assertFalse(node0.isGetterDef());
483:       assertFalse(node0.isOr());
484:       assertFalse(node0.isEmpty());
485:       assertFalse(node0.hasMoreThanOneChild());
486:       assertFalse(node0.hasOneChild());
487:       assertFalse(node0.isCase());
488:       assertFalse(node0.isTry());
489:       assertFalse(node0.isFor());
490:       assertFalse(node0.isLabel());
491:       assertFalse(node0.isAssignAdd());
492:       assertFalse(node0.isDo());
493:       assertFalse(node0.isScript());
494:       assertFalse(node0.isSwitch());
495:       assertEquals((-1), node0.getCharno());
496:       assertFalse(node0.isArrayLit());
497:       assertFalse(node0.isLabelName());
498:       assertFalse(node0.isParamList());
499:       assertFalse(node0.isStringKey());
500:       assertFalse(node0.isSetterDef());
501:       assertFalse(node0.isNull());
502:       assertFalse(node0.isVar());
503:       assertEquals(0, node0.getChildCount());
504:       assertFalse(node0.isBlock());
505:       assertEquals(40, node0.getType());
506:       assertTrue(node0.isString());
507:       assertFalse(node0.isDefaultCase());
508:       assertFalse(node0.isRegExp());
509:       assertFalse(node0.isTrue());
510:       assertFalse(node0.isVoid());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isAdd());
513:       assertFalse(node0.isCatch());
514:       assertFalse(node0.isCall());
515:       assertEquals((-1), node0.getLineno());
516:       assertFalse(node0.isName());
517:       assertFalse(node0.isIf());
518:       assertFalse(node0.isNE());
519:       assertFalse(node0.isTypeOf());
520:       assertFalse(node0.hasChildren());
521:       assertFalse(node0.isDelProp());
522:       assertFalse(node0.isDec());
523:       assertEquals((-1), node0.getSourcePosition());
524:       assertFalse(node0.isAssign());
525:       assertFalse(node0.isGetElem());
526:       assertFalse(node0.isIn());
527:       assertFalse(node0.isReturn());
528:       assertFalse(node0.isWhile());
529:       assertFalse(node0.isFunction());
530:       assertFalse(node0.isDebugger());
531:       assertFalse(node0.isNot());
532:       assertFalse(node0.isContinue());
533:       assertFalse(node0.isCast());
534:       assertFalse(node0.isObjectLit());
535:       assertFalse(node0.isAnd());
536:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
537:       assertEquals(29, Node.JSDOC_INFO_PROP);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(53, Node.INPUT_ID);
542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(1, Node.DECR_FLAG);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(54, Node.SLASH_V);
549:       assertEquals(43, Node.IS_CONSTANT_NAME);
550:       assertEquals(40, Node.ORIGINALNAME_PROP);
551:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
552:       assertEquals(57, Node.REFLECTED_OBJECT);
553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
554:       assertEquals(52, Node.LENGTH);
555:       assertEquals(8, Node.FLAG_NO_THROWS);
556:       assertEquals(50, Node.FREE_CALL);
557:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
558:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(55, Node.INFERRED_FUNCTION);
563:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
564:       assertEquals(12, Node.COLUMN_BITS);
565:       assertEquals(36, Node.QUOTED_PROP);
566:       assertEquals(4095, Node.COLUMN_MASK);
567:       assertEquals(48, Node.DIRECTIVES);
568:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
569:       assertEquals(37, Node.OPT_ARG_NAME);
570:       assertEquals(56, Node.CHANGE_TIME);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertNotSame(node0, node1);
573:       assertFalse(node0.equals((Object)node1));
574:       
575:       Node node2 = node0.copyInformationFrom(node1);
576:       assertFalse(node0.isThis());
577:       assertFalse(node0.isGetProp());
578:       assertFalse(node0.isBreak());
579:       assertFalse(node0.isComma());
580:       assertFalse(node0.isFalse());
581:       assertFalse(node0.isInstanceOf());
582:       assertFalse(node0.isHook());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isExprResult());
585:       assertFalse(node0.isInc());
586:       assertFalse(node0.isWith());
587:       assertFalse(node0.isNumber());
588:       assertFalse(node0.isGetterDef());
589:       assertFalse(node0.isOr());
590:       assertFalse(node0.isEmpty());
591:       assertFalse(node0.hasMoreThanOneChild());
592:       assertFalse(node0.hasOneChild());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.isTry());
595:       assertFalse(node0.isFor());
596:       assertFalse(node0.isLabel());
597:       assertFalse(node0.isAssignAdd());
598:       assertFalse(node0.isDo());
599:       assertFalse(node0.isScript());
600:       assertFalse(node0.isSwitch());
601:       assertEquals((-1), node0.getCharno());
602:       assertFalse(node0.isArrayLit());
603:       assertFalse(node0.isLabelName());
604:       assertFalse(node0.isParamList());
605:       assertFalse(node0.isStringKey());
606:       assertFalse(node0.isSetterDef());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isVar());
609:       assertEquals(0, node0.getChildCount());
610:       assertFalse(node0.isBlock());
611:       assertEquals(40, node0.getType());
612:       assertTrue(node0.isString());
613:       assertFalse(node0.isDefaultCase());
614:       assertFalse(node0.isRegExp());
615:       assertFalse(node0.isTrue());
616:       assertFalse(node0.isVoid());
617:       assertFalse(node0.isNew());
618:       assertFalse(node0.isAdd());
619:       assertFalse(node0.isCatch());
620:       assertFalse(node0.isCall());
621:       assertEquals((-1), node0.getLineno());
622:       assertFalse(node0.isName());
623:       assertFalse(node0.isIf());
624:       assertFalse(node0.isNE());
625:       assertFalse(node0.isTypeOf());
626:       assertFalse(node0.hasChildren());
627:       assertFalse(node0.isDelProp());
628:       assertFalse(node0.isDec());
629:       assertEquals((-1), node0.getSourcePosition());
630:       assertFalse(node0.isAssign());
631:       assertFalse(node0.isGetElem());
632:       assertFalse(node0.isIn());
633:       assertFalse(node0.isReturn());
634:       assertFalse(node0.isWhile());
635:       assertFalse(node0.isFunction());
636:       assertFalse(node0.isDebugger());
637:       assertFalse(node0.isNot());
638:       assertFalse(node0.isContinue());
639:       assertFalse(node0.isCast());
640:       assertFalse(node0.isObjectLit());
641:       assertFalse(node0.isAnd());
642:       assertFalse(node1.isWith());
643:       assertFalse(node1.isNot());
644:       assertFalse(node1.isExprResult());
645:       assertFalse(node1.isScript());
646:       assertFalse(node1.isInstanceOf());
647:       assertFalse(node1.hasOneChild());
648:       assertFalse(node1.isThis());
649:       assertFalse(node1.isDec());
650:       assertFalse(node1.hasChildren());
651:       assertFalse(node1.isBreak());
652:       assertFalse(node1.isComma());
653:       assertFalse(node1.isAssign());
654:       assertFalse(node1.isTypeOf());
655:       assertFalse(node1.isGetElem());
656:       assertEquals((-1), node1.getLineno());
657:       assertFalse(node1.isOr());
658:       assertFalse(node1.isSwitch());
659:       assertFalse(node1.isDo());
660:       assertFalse(node1.isNew());
661:       assertFalse(node1.isCase());
662:       assertFalse(node1.isAdd());
663:       assertFalse(node1.isHook());
664:       assertFalse(node1.hasMoreThanOneChild());
665:       assertFalse(node1.isBlock());
666:       assertFalse(node1.isLabel());
667:       assertFalse(node1.isAssignAdd());
668:       assertFalse(node1.isVar());
669:       assertFalse(node1.isNumber());
670:       assertFalse(node1.isLabelName());
671:       assertFalse(node1.isGetterDef());
672:       assertFalse(node1.isArrayLit());
673:       assertFalse(node1.isStringKey());
674:       assertEquals((-1), node1.getCharno());
675:       assertFalse(node1.isParamList());
676:       assertFalse(node1.isDefaultCase());
677:       assertFalse(node1.isFunction());
678:       assertFalse(node1.isRegExp());
679:       assertFalse(node1.isVoid());
680:       assertFalse(node1.isCatch());
681:       assertEquals(0, node1.getChildCount());
682:       assertFalse(node1.isTry());
683:       assertFalse(node1.isFor());
684:       assertFalse(node1.isIf());
685:       assertFalse(node1.isName());
686:       assertFalse(node1.isDelProp());
687:       assertFalse(node1.isSetterDef());
688:       assertFalse(node1.isCall());
689:       assertFalse(node1.isEmpty());
690:       assertFalse(node1.isIn());
691:       assertFalse(node1.isNE());
692:       assertFalse(node1.isTrue());
693:       assertFalse(node1.isNull());
694:       assertFalse(node1.isString());
695:       assertFalse(node1.isContinue());
696:       assertFalse(node1.isInc());
697:       assertEquals(0, node1.getType());
698:       assertFalse(node1.isThrow());
699:       assertFalse(node1.isReturn());
700:       assertFalse(node1.isWhile());
701:       assertEquals((-1), node1.getSourcePosition());
702:       assertFalse(node1.isGetProp());
703:       assertFalse(node1.isFalse());
704:       assertFalse(node1.isCast());
705:       assertFalse(node1.isObjectLit());
706:       assertFalse(node1.isAnd());
707:       assertFalse(node1.isDebugger());
708:       assertFalse(node2.isWhile());
709:       assertFalse(node2.isNew());
710:       assertTrue(node2.isString());
711:       assertFalse(node2.isDo());
712:       assertFalse(node2.isAdd());
713:       assertFalse(node2.isStringKey());
714:       assertFalse(node2.isOr());
715:       assertFalse(node2.isParamList());
716:       assertFalse(node2.isLabelName());
717:       assertFalse(node2.isSetterDef());
718:       assertEquals(0, node2.getChildCount());
719:       assertFalse(node2.isVar());
720:       assertFalse(node2.isCast());
721:       assertFalse(node2.isContinue());
722:       assertFalse(node2.isAssignAdd());
723:       assertEquals(40, node2.getType());
724:       assertFalse(node2.isLabel());
725:       assertFalse(node2.isDefaultCase());
726:       assertFalse(node2.isFunction());
727:       assertFalse(node2.isExprResult());
728:       assertFalse(node2.isVoid());
729:       assertFalse(node2.isAnd());
730:       assertFalse(node2.isNot());
731:       assertFalse(node2.isObjectLit());
732:       assertFalse(node2.isTrue());
733:       assertFalse(node2.isDebugger());
734:       assertFalse(node2.isDec());
735:       assertEquals((-1), node2.getSourcePosition());
736:       assertFalse(node2.isTypeOf());
737:       assertFalse(node2.isDelProp());
738:       assertFalse(node2.isNull());
739:       assertFalse(node2.isGetElem());
740:       assertFalse(node2.isGetProp());
741:       assertFalse(node2.isCall());
742:       assertFalse(node2.isName());
743:       assertFalse(node2.isBreak());
744:       assertFalse(node2.isAssign());
745:       assertFalse(node2.isComma());
746:       assertFalse(node2.isReturn());
747:       assertFalse(node2.hasChildren());
748:       assertFalse(node2.isSwitch());
749:       assertFalse(node2.isInc());
750:       assertFalse(node2.isCase());
751:       assertFalse(node2.isIn());
752:       assertEquals((-1), node2.getCharno());
753:       assertFalse(node2.isEmpty());
754:       assertFalse(node2.isArrayLit());
755:       assertFalse(node2.isFalse());
756:       assertFalse(node2.isThrow());
757:       assertFalse(node2.isScript());
758:       assertFalse(node2.isRegExp());
759:       assertFalse(node2.isWith());
760:       assertFalse(node2.isTry());
761:       assertFalse(node2.isNumber());
762:       assertFalse(node2.isNE());
763:       assertFalse(node2.isGetterDef());
764:       assertFalse(node2.isIf());
765:       assertEquals((-1), node2.getLineno());
766:       assertFalse(node2.isInstanceOf());
767:       assertFalse(node2.hasOneChild());
768:       assertFalse(node2.isHook());
769:       assertFalse(node2.hasMoreThanOneChild());
770:       assertFalse(node2.isCatch());
771:       assertFalse(node2.isBlock());
772:       assertFalse(node2.isFor());
773:       assertFalse(node2.isThis());
774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
775:       assertEquals(29, Node.JSDOC_INFO_PROP);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(53, Node.INPUT_ID);
780:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
781:       assertEquals(32, Node.INCRDECR_PROP);
782:       assertEquals(1, Node.DECR_FLAG);
783:       assertEquals(51, Node.STATIC_SOURCE_FILE);
784:       assertEquals(30, Node.VAR_ARGS_NAME);
785:       assertEquals(46, Node.IS_NAMESPACE);
786:       assertEquals(54, Node.SLASH_V);
787:       assertEquals(43, Node.IS_CONSTANT_NAME);
788:       assertEquals(40, Node.ORIGINALNAME_PROP);
789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
790:       assertEquals(57, Node.REFLECTED_OBJECT);
791:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(8, Node.FLAG_NO_THROWS);
794:       assertEquals(50, Node.FREE_CALL);
795:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
796:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
797:       assertEquals(39, Node.EMPTY_BLOCK);
798:       assertEquals(15, Node.NO_SIDE_EFFECTS);
799:       assertEquals(57, Node.LAST_PROP);
800:       assertEquals(55, Node.INFERRED_FUNCTION);
801:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(36, Node.QUOTED_PROP);
804:       assertEquals(4095, Node.COLUMN_MASK);
805:       assertEquals(48, Node.DIRECTIVES);
806:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
807:       assertEquals(37, Node.OPT_ARG_NAME);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertEquals(49, Node.DIRECT_EVAL);
810:       assertEquals(1, Node.DECR_FLAG);
811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
812:       assertEquals(12, Node.COLUMN_BITS);
813:       assertEquals(30, Node.VAR_ARGS_NAME);
814:       assertEquals(2, Node.POST_FLAG);
815:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
817:       assertEquals(47, Node.IS_DISPATCHER);
818:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
819:       assertEquals(32, Node.INCRDECR_PROP);
820:       assertEquals(57, Node.LAST_PROP);
821:       assertEquals(40, Node.ORIGINALNAME_PROP);
822:       assertEquals(50, Node.FREE_CALL);
823:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
824:       assertEquals(54, Node.SLASH_V);
825:       assertEquals(46, Node.IS_NAMESPACE);
826:       assertEquals(43, Node.IS_CONSTANT_NAME);
827:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
828:       assertEquals(55, Node.INFERRED_FUNCTION);
829:       assertEquals(4095, Node.COLUMN_MASK);
830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
831:       assertEquals(53, Node.INPUT_ID);
832:       assertEquals(39, Node.EMPTY_BLOCK);
833:       assertEquals(57, Node.REFLECTED_OBJECT);
834:       assertEquals(29, Node.JSDOC_INFO_PROP);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(52, Node.LENGTH);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
841:       assertEquals(37, Node.OPT_ARG_NAME);
842:       assertEquals(48, Node.DIRECTIVES);
843:       assertEquals(36, Node.QUOTED_PROP);
844:       assertEquals(49, Node.DIRECT_EVAL);
845:       assertEquals(56, Node.CHANGE_TIME);
846:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(55, Node.INFERRED_FUNCTION);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(8, Node.FLAG_NO_THROWS);
851:       assertEquals(36, Node.QUOTED_PROP);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(43, Node.IS_CONSTANT_NAME);
854:       assertEquals(50, Node.FREE_CALL);
855:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
856:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
857:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
860:       assertEquals(32, Node.INCRDECR_PROP);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(51, Node.STATIC_SOURCE_FILE);
863:       assertEquals(30, Node.VAR_ARGS_NAME);
864:       assertEquals(49, Node.DIRECT_EVAL);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(15, Node.NO_SIDE_EFFECTS);
867:       assertEquals(37, Node.OPT_ARG_NAME);
868:       assertEquals(56, Node.CHANGE_TIME);
869:       assertEquals(57, Node.REFLECTED_OBJECT);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(40, Node.ORIGINALNAME_PROP);
873:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
874:       assertEquals(52, Node.LENGTH);
875:       assertEquals(53, Node.INPUT_ID);
876:       assertEquals(29, Node.JSDOC_INFO_PROP);
877:       assertEquals(39, Node.EMPTY_BLOCK);
878:       assertEquals(2, Node.POST_FLAG);
879:       assertEquals(57, Node.LAST_PROP);
880:       assertEquals(47, Node.IS_DISPATCHER);
881:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
882:       assertSame(node0, node2);
883:       assertNotSame(node0, node1);
884:       assertNotSame(node1, node0);
885:       assertNotSame(node1, node2);
886:       assertSame(node2, node0);
887:       assertNotSame(node2, node1);
888:       assertNotNull(node2);
889:       assertFalse(node0.equals((Object)node1));
890:       assertFalse(node1.equals((Object)node0));
891:       assertFalse(node2.equals((Object)node1));
892:       
893:       Iterable<Node> iterable0 = node1.children();
894:       assertFalse(node0.isThis());
895:       assertFalse(node0.isGetProp());
896:       assertFalse(node0.isBreak());
897:       assertFalse(node0.isComma());
898:       assertFalse(node0.isFalse());
899:       assertFalse(node0.isInstanceOf());
900:       assertFalse(node0.isHook());
901:       assertFalse(node0.isThrow());
902:       assertFalse(node0.isExprResult());
903:       assertFalse(node0.isInc());
904:       assertFalse(node0.isWith());
905:       assertFalse(node0.isNumber());
906:       assertFalse(node0.isGetterDef());
907:       assertFalse(node0.isOr());
908:       assertFalse(node0.isEmpty());
909:       assertFalse(node0.hasMoreThanOneChild());
910:       assertFalse(node0.hasOneChild());
911:       assertFalse(node0.isCase());
912:       assertFalse(node0.isTry());
913:       assertFalse(node0.isFor());
914:       assertFalse(node0.isLabel());
915:       assertFalse(node0.isAssignAdd());
916:       assertFalse(node0.isDo());
917:       assertFalse(node0.isScript());
918:       assertFalse(node0.isSwitch());
919:       assertEquals((-1), node0.getCharno());
920:       assertFalse(node0.isArrayLit());
921:       assertFalse(node0.isLabelName());
922:       assertFalse(node0.isParamList());
923:       assertFalse(node0.isStringKey());
924:       assertFalse(node0.isSetterDef());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isVar());
927:       assertEquals(0, node0.getChildCount());
928:       assertFalse(node0.isBlock());
929:       assertEquals(40, node0.getType());
930:       assertTrue(node0.isString());
931:       assertFalse(node0.isDefaultCase());
932:       assertFalse(node0.isRegExp());
933:       assertFalse(node0.isTrue());
934:       assertFalse(node0.isVoid());
935:       assertFalse(node0.isNew());
936:       assertFalse(node0.isAdd());
937:       assertFalse(node0.isCatch());
938:       assertFalse(node0.isCall());
939:       assertEquals((-1), node0.getLineno());
940:       assertFalse(node0.isName());
941:       assertFalse(node0.isIf());
942:       assertFalse(node0.isNE());
943:       assertFalse(node0.isTypeOf());
944:       assertFalse(node0.hasChildren());
945:       assertFalse(node0.isDelProp());
946:       assertFalse(node0.isDec());
947:       assertEquals((-1), node0.getSourcePosition());
948:       assertFalse(node0.isAssign());
949:       assertFalse(node0.isGetElem());
950:       assertFalse(node0.isIn());
951:       assertFalse(node0.isReturn());
952:       assertFalse(node0.isWhile());
953:       assertFalse(node0.isFunction());
954:       assertFalse(node0.isDebugger());
955:       assertFalse(node0.isNot());
956:       assertFalse(node0.isContinue());
957:       assertFalse(node0.isCast());
958:       assertFalse(node0.isObjectLit());
959:       assertFalse(node0.isAnd());
960:       assertFalse(node1.isWith());
961:       assertFalse(node1.isNot());
962:       assertFalse(node1.isExprResult());
963:       assertFalse(node1.isScript());
964:       assertFalse(node1.isInstanceOf());
965:       assertFalse(node1.hasOneChild());
966:       assertFalse(node1.isThis());
967:       assertFalse(node1.isDec());
968:       assertFalse(node1.hasChildren());
969:       assertFalse(node1.isBreak());
970:       assertFalse(node1.isComma());
971:       assertFalse(node1.isAssign());
972:       assertFalse(node1.isTypeOf());
973:       assertFalse(node1.isGetElem());
974:       assertEquals((-1), node1.getLineno());
975:       assertFalse(node1.isOr());
976:       assertFalse(node1.isSwitch());
977:       assertFalse(node1.isDo());
978:       assertFalse(node1.isNew());
979:       assertFalse(node1.isCase());
980:       assertFalse(node1.isAdd());
981:       assertFalse(node1.isHook());
982:       assertFalse(node1.hasMoreThanOneChild());
983:       assertFalse(node1.isBlock());
984:       assertFalse(node1.isLabel());
985:       assertFalse(node1.isAssignAdd());
986:       assertFalse(node1.isVar());
987:       assertFalse(node1.isNumber());
988:       assertFalse(node1.isLabelName());
989:       assertFalse(node1.isGetterDef());
990:       assertFalse(node1.isArrayLit());
991:       assertFalse(node1.isStringKey());
992:       assertEquals((-1), node1.getCharno());
993:       assertFalse(node1.isParamList());
994:       assertFalse(node1.isDefaultCase());
995:       assertFalse(node1.isFunction());
996:       assertFalse(node1.isRegExp());
997:       assertFalse(node1.isVoid());
998:       assertFalse(node1.isCatch());
999:       assertEquals(0, node1.getChildCount());
1000:       assertFalse(node1.isTry());
1001:       assertFalse(node1.isFor());
1002:       assertFalse(node1.isIf());
1003:       assertFalse(node1.isName());
1004:       assertFalse(node1.isDelProp());
1005:       assertFalse(node1.isSetterDef());
1006:       assertFalse(node1.isCall());
1007:       assertFalse(node1.isEmpty());
1008:       assertFalse(node1.isIn());
1009:       assertFalse(node1.isNE());
1010:       assertFalse(node1.isTrue());
1011:       assertFalse(node1.isNull());
1012:       assertFalse(node1.isString());
1013:       assertFalse(node1.isContinue());
1014:       assertFalse(node1.isInc());
1015:       assertEquals(0, node1.getType());
1016:       assertFalse(node1.isThrow());
1017:       assertFalse(node1.isReturn());
1018:       assertFalse(node1.isWhile());
1019:       assertEquals((-1), node1.getSourcePosition());
1020:       assertFalse(node1.isGetProp());
1021:       assertFalse(node1.isFalse());
1022:       assertFalse(node1.isCast());
1023:       assertFalse(node1.isObjectLit());
1024:       assertFalse(node1.isAnd());
1025:       assertFalse(node1.isDebugger());
1026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1027:       assertEquals(29, Node.JSDOC_INFO_PROP);
1028:       assertEquals(47, Node.IS_DISPATCHER);
1029:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1030:       assertEquals(2, Node.POST_FLAG);
1031:       assertEquals(53, Node.INPUT_ID);
1032:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1033:       assertEquals(32, Node.INCRDECR_PROP);
1034:       assertEquals(1, Node.DECR_FLAG);
1035:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1036:       assertEquals(30, Node.VAR_ARGS_NAME);
1037:       assertEquals(46, Node.IS_NAMESPACE);
1038:       assertEquals(54, Node.SLASH_V);
1039:       assertEquals(43, Node.IS_CONSTANT_NAME);
1040:       assertEquals(40, Node.ORIGINALNAME_PROP);
1041:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1042:       assertEquals(57, Node.REFLECTED_OBJECT);
1043:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1044:       assertEquals(52, Node.LENGTH);
1045:       assertEquals(8, Node.FLAG_NO_THROWS);
1046:       assertEquals(50, Node.FREE_CALL);
1047:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1048:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1049:       assertEquals(39, Node.EMPTY_BLOCK);
1050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1051:       assertEquals(57, Node.LAST_PROP);
1052:       assertEquals(55, Node.INFERRED_FUNCTION);
1053:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(36, Node.QUOTED_PROP);
1056:       assertEquals(4095, Node.COLUMN_MASK);
1057:       assertEquals(48, Node.DIRECTIVES);
1058:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(56, Node.CHANGE_TIME);
1061:       assertEquals(49, Node.DIRECT_EVAL);
1062:       assertEquals(1, Node.DECR_FLAG);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(12, Node.COLUMN_BITS);
1065:       assertEquals(30, Node.VAR_ARGS_NAME);
1066:       assertEquals(2, Node.POST_FLAG);
1067:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1071:       assertEquals(32, Node.INCRDECR_PROP);
1072:       assertEquals(57, Node.LAST_PROP);
1073:       assertEquals(40, Node.ORIGINALNAME_PROP);
1074:       assertEquals(50, Node.FREE_CALL);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(54, Node.SLASH_V);
1077:       assertEquals(46, Node.IS_NAMESPACE);
1078:       assertEquals(43, Node.IS_CONSTANT_NAME);
1079:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1080:       assertEquals(55, Node.INFERRED_FUNCTION);
1081:       assertEquals(4095, Node.COLUMN_MASK);
1082:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1083:       assertEquals(53, Node.INPUT_ID);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1089:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1090:       assertEquals(52, Node.LENGTH);
1091:       assertEquals(8, Node.FLAG_NO_THROWS);
1092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1093:       assertEquals(37, Node.OPT_ARG_NAME);
1094:       assertEquals(48, Node.DIRECTIVES);
1095:       assertEquals(36, Node.QUOTED_PROP);
1096:       assertEquals(49, Node.DIRECT_EVAL);
1097:       assertEquals(56, Node.CHANGE_TIME);
1098:       assertSame(node0, node2);
1099:       assertNotSame(node0, node1);
1100:       assertNotSame(node1, node0);
1101:       assertNotSame(node1, node2);
1102:       assertFalse(iterable0.contains(node0));
1103:       assertNotNull(iterable0);
1104:       assertFalse(node0.equals((Object)node1));
1105:       assertFalse(node1.equals((Object)node0));
1106:       assertFalse(node1.equals((Object)node2));
1107:       
1108:       node1.detachChildren();
1109:       assertFalse(node0.isThis());
1110:       assertFalse(node0.isGetProp());
1111:       assertFalse(node0.isBreak());
1112:       assertFalse(node0.isComma());
1113:       assertFalse(node0.isFalse());
1114:       assertFalse(node0.isInstanceOf());
1115:       assertFalse(node0.isHook());
1116:       assertFalse(node0.isThrow());
1117:       assertFalse(node0.isExprResult());
1118:       assertFalse(node0.isInc());
1119:       assertFalse(node0.isWith());
1120:       assertFalse(node0.isNumber());
1121:       assertFalse(node0.isGetterDef());
1122:       assertFalse(node0.isOr());
1123:       assertFalse(node0.isEmpty());
1124:       assertFalse(node0.hasMoreThanOneChild());
1125:       assertFalse(node0.hasOneChild());
1126:       assertFalse(node0.isCase());
1127:       assertFalse(node0.isTry());
1128:       assertFalse(node0.isFor());
1129:       assertFalse(node0.isLabel());
1130:       assertFalse(node0.isAssignAdd());
1131:       assertFalse(node0.isDo());
1132:       assertFalse(node0.isScript());
1133:       assertFalse(node0.isSwitch());
1134:       assertEquals((-1), node0.getCharno());
1135:       assertFalse(node0.isArrayLit());
1136:       assertFalse(node0.isLabelName());
1137:       assertFalse(node0.isParamList());
1138:       assertFalse(node0.isStringKey());
1139:       assertFalse(node0.isSetterDef());
1140:       assertFalse(node0.isNull());
1141:       assertFalse(node0.isVar());
1142:       assertEquals(0, node0.getChildCount());
1143:       assertFalse(node0.isBlock());
1144:       assertEquals(40, node0.getType());
1145:       assertTrue(node0.isString());
1146:       assertFalse(node0.isDefaultCase());
1147:       assertFalse(node0.isRegExp());
1148:       assertFalse(node0.isTrue());
1149:       assertFalse(node0.isVoid());
1150:       assertFalse(node0.isNew());
1151:       assertFalse(node0.isAdd());
1152:       assertFalse(node0.isCatch());
1153:       assertFalse(node0.isCall());
1154:       assertEquals((-1), node0.getLineno());
1155:       assertFalse(node0.isName());
1156:       assertFalse(node0.isIf());
1157:       assertFalse(node0.isNE());
1158:       assertFalse(node0.isTypeOf());
1159:       assertFalse(node0.hasChildren());
1160:       assertFalse(node0.isDelProp());
1161:       assertFalse(node0.isDec());
1162:       assertEquals((-1), node0.getSourcePosition());
1163:       assertFalse(node0.isAssign());
1164:       assertFalse(node0.isGetElem());
1165:       assertFalse(node0.isIn());
1166:       assertFalse(node0.isReturn());
1167:       assertFalse(node0.isWhile());
1168:       assertFalse(node0.isFunction());
1169:       assertFalse(node0.isDebugger());
1170:       assertFalse(node0.isNot());
1171:       assertFalse(node0.isContinue());
1172:       assertFalse(node0.isCast());
1173:       assertFalse(node0.isObjectLit());
1174:       assertFalse(node0.isAnd());
1175:       assertFalse(node1.isWith());
1176:       assertFalse(node1.isNot());
1177:       assertFalse(node1.isExprResult());
1178:       assertFalse(node1.isScript());
1179:       assertFalse(node1.isInstanceOf());
1180:       assertFalse(node1.hasOneChild());
1181:       assertFalse(node1.isThis());
1182:       assertFalse(node1.isDec());
1183:       assertFalse(node1.hasChildren());
1184:       assertFalse(node1.isBreak());
1185:       assertFalse(node1.isComma());
1186:       assertFalse(node1.isAssign());
1187:       assertFalse(node1.isTypeOf());
1188:       assertFalse(node1.isGetElem());
1189:       assertEquals((-1), node1.getLineno());
1190:       assertFalse(node1.isOr());
1191:       assertFalse(node1.isSwitch());
1192:       assertFalse(node1.isDo());
1193:       assertFalse(node1.isNew());
1194:       assertFalse(node1.isCase());
1195:       assertFalse(node1.isAdd());
1196:       assertFalse(node1.isHook());
1197:       assertFalse(node1.hasMoreThanOneChild());
1198:       assertFalse(node1.isBlock());
1199:       assertFalse(node1.isLabel());
1200:       assertFalse(node1.isAssignAdd());
1201:       assertFalse(node1.isVar());
1202:       assertFalse(node1.isNumber());
1203:       assertFalse(node1.isLabelName());
1204:       assertFalse(node1.isGetterDef());
1205:       assertFalse(node1.isArrayLit());
1206:       assertFalse(node1.isStringKey());
1207:       assertEquals((-1), node1.getCharno());
1208:       assertFalse(node1.isParamList());
1209:       assertFalse(node1.isDefaultCase());
1210:       assertFalse(node1.isFunction());
1211:       assertFalse(node1.isRegExp());
1212:       assertFalse(node1.isVoid());
1213:       assertFalse(node1.isCatch());
1214:       assertEquals(0, node1.getChildCount());
1215:       assertFalse(node1.isTry());
1216:       assertFalse(node1.isFor());
1217:       assertFalse(node1.isIf());
1218:       assertFalse(node1.isName());
1219:       assertFalse(node1.isDelProp());
1220:       assertFalse(node1.isSetterDef());
1221:       assertFalse(node1.isCall());
1222:       assertFalse(node1.isEmpty());
1223:       assertFalse(node1.isIn());
1224:       assertFalse(node1.isNE());
1225:       assertFalse(node1.isTrue());
1226:       assertFalse(node1.isNull());
1227:       assertFalse(node1.isString());
1228:       assertFalse(node1.isContinue());
1229:       assertFalse(node1.isInc());
1230:       assertEquals(0, node1.getType());
1231:       assertFalse(node1.isThrow());
1232:       assertFalse(node1.isReturn());
1233:       assertFalse(node1.isWhile());
1234:       assertEquals((-1), node1.getSourcePosition());
1235:       assertFalse(node1.isGetProp());
1236:       assertFalse(node1.isFalse());
1237:       assertFalse(node1.isCast());
1238:       assertFalse(node1.isObjectLit());
1239:       assertFalse(node1.isAnd());
1240:       assertFalse(node1.isDebugger());
1241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1242:       assertEquals(29, Node.JSDOC_INFO_PROP);
1243:       assertEquals(47, Node.IS_DISPATCHER);
1244:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1245:       assertEquals(2, Node.POST_FLAG);
1246:       assertEquals(53, Node.INPUT_ID);
1247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1248:       assertEquals(32, Node.INCRDECR_PROP);
1249:       assertEquals(1, Node.DECR_FLAG);
1250:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1251:       assertEquals(30, Node.VAR_ARGS_NAME);
1252:       assertEquals(46, Node.IS_NAMESPACE);
1253:       assertEquals(54, Node.SLASH_V);
1254:       assertEquals(43, Node.IS_CONSTANT_NAME);
1255:       assertEquals(40, Node.ORIGINALNAME_PROP);
1256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1259:       assertEquals(52, Node.LENGTH);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(50, Node.FREE_CALL);
1262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1264:       assertEquals(39, Node.EMPTY_BLOCK);
1265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1266:       assertEquals(57, Node.LAST_PROP);
1267:       assertEquals(55, Node.INFERRED_FUNCTION);
1268:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1269:       assertEquals(12, Node.COLUMN_BITS);
1270:       assertEquals(36, Node.QUOTED_PROP);
1271:       assertEquals(4095, Node.COLUMN_MASK);
1272:       assertEquals(48, Node.DIRECTIVES);
1273:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1274:       assertEquals(37, Node.OPT_ARG_NAME);
1275:       assertEquals(56, Node.CHANGE_TIME);
1276:       assertEquals(49, Node.DIRECT_EVAL);
1277:       assertEquals(1, Node.DECR_FLAG);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(12, Node.COLUMN_BITS);
1280:       assertEquals(30, Node.VAR_ARGS_NAME);
1281:       assertEquals(2, Node.POST_FLAG);
1282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1283:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1284:       assertEquals(47, Node.IS_DISPATCHER);
1285:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1286:       assertEquals(32, Node.INCRDECR_PROP);
1287:       assertEquals(57, Node.LAST_PROP);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(50, Node.FREE_CALL);
1290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1291:       assertEquals(54, Node.SLASH_V);
1292:       assertEquals(46, Node.IS_NAMESPACE);
1293:       assertEquals(43, Node.IS_CONSTANT_NAME);
1294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1295:       assertEquals(55, Node.INFERRED_FUNCTION);
1296:       assertEquals(4095, Node.COLUMN_MASK);
1297:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1298:       assertEquals(53, Node.INPUT_ID);
1299:       assertEquals(39, Node.EMPTY_BLOCK);
1300:       assertEquals(57, Node.REFLECTED_OBJECT);
1301:       assertEquals(29, Node.JSDOC_INFO_PROP);
1302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1305:       assertEquals(52, Node.LENGTH);
1306:       assertEquals(8, Node.FLAG_NO_THROWS);
1307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1308:       assertEquals(37, Node.OPT_ARG_NAME);
1309:       assertEquals(48, Node.DIRECTIVES);
1310:       assertEquals(36, Node.QUOTED_PROP);
1311:       assertEquals(49, Node.DIRECT_EVAL);
1312:       assertEquals(56, Node.CHANGE_TIME);
1313:       assertSame(node0, node2);
1314:       assertNotSame(node0, node1);
1315:       assertNotSame(node1, node0);
1316:       assertNotSame(node1, node2);
1317:       assertFalse(node0.equals((Object)node1));
1318:       assertFalse(node1.equals((Object)node0));
1319:       assertFalse(node1.equals((Object)node2));
1320:   }
1321: }
RegularFileObject[/tmp/EvoSuite_35_1628158759948/com/google/javascript/rhino/Node_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:19:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_35_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.common.collect.Iterators$12",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.ImmutableList$1"
374:     );
375:   }
376: }

[MASTER] 10:19:20.179 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("qrvsqkX5OB");
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);

Node node1 = node0.cloneTree();
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertEquals(40, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

node1.type = 0;
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());

node0.setQuotedString();
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Iterable<Node> iterable0 = node1.children();
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

node1.detachChildren();
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isWith());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertEquals(40, node0.getType());
assertTrue(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));


[MASTER] 10:19:43.302 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1628158783017/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1628158783017/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 10:19:43.302 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:43.302 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:43.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1181
[MASTER] 10:19:43.314 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1628158783017/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:19:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("qrvsqkX5OB");
23:       assertFalse(node0.isExprResult());
24:       assertFalse(node0.hasOneChild());
25:       assertFalse(node0.isNot());
26:       assertFalse(node0.isScript());
27:       assertEquals((-1), node0.getSourcePosition());
28:       assertFalse(node0.isNumber());
29:       assertFalse(node0.isObjectLit());
30:       assertFalse(node0.isOr());
31:       assertEquals((-1), node0.getLineno());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isGetProp());
34:       assertFalse(node0.isThis());
35:       assertFalse(node0.isReturn());
36:       assertFalse(node0.isAssign());
37:       assertFalse(node0.isWith());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.hasChildren());
40:       assertFalse(node0.isBreak());
41:       assertFalse(node0.isGetElem());
42:       assertFalse(node0.hasMoreThanOneChild());
43:       assertFalse(node0.isComma());
44:       assertFalse(node0.isDec());
45:       assertFalse(node0.isTypeOf());
46:       assertFalse(node0.isInc());
47:       assertFalse(node0.isIn());
48:       assertFalse(node0.isSetterDef());
49:       assertFalse(node0.isAnd());
50:       assertFalse(node0.isThrow());
51:       assertEquals(40, node0.getType());
52:       assertFalse(node0.isCast());
53:       assertFalse(node0.isContinue());
54:       assertFalse(node0.isFalse());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isTry());
57:       assertFalse(node0.isTrue());
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isDefaultCase());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isDebugger());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isRegExp());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isHook());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isBlock());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isSwitch());
77:       assertFalse(node0.isVar());
78:       assertTrue(node0.isString());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isStringKey());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isLabelName());
88:       assertEquals(0, node0.getChildCount());
89:       assertEquals(15, Node.NO_SIDE_EFFECTS);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
102:       assertEquals(8, Node.FLAG_NO_THROWS);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(29, Node.JSDOC_INFO_PROP);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(43, Node.IS_CONSTANT_NAME);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(48, Node.DIRECTIVES);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(37, Node.OPT_ARG_NAME);
120:       assertEquals(12, Node.COLUMN_BITS);
121:       assertEquals(32, Node.INCRDECR_PROP);
122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
123:       assertEquals(4095, Node.COLUMN_MASK);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertNotNull(node0);
126:       
127:       Node node1 = node0.cloneTree();
128:       assertFalse(node0.isExprResult());
129:       assertFalse(node0.hasOneChild());
130:       assertFalse(node0.isNot());
131:       assertFalse(node0.isScript());
132:       assertEquals((-1), node0.getSourcePosition());
133:       assertFalse(node0.isNumber());
134:       assertFalse(node0.isObjectLit());
135:       assertFalse(node0.isOr());
136:       assertEquals((-1), node0.getLineno());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isGetProp());
139:       assertFalse(node0.isThis());
140:       assertFalse(node0.isReturn());
141:       assertFalse(node0.isAssign());
142:       assertFalse(node0.isWith());
143:       assertFalse(node0.isWhile());
144:       assertFalse(node0.hasChildren());
145:       assertFalse(node0.isBreak());
146:       assertFalse(node0.isGetElem());
147:       assertFalse(node0.hasMoreThanOneChild());
148:       assertFalse(node0.isComma());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isTypeOf());
151:       assertFalse(node0.isInc());
152:       assertFalse(node0.isIn());
153:       assertFalse(node0.isSetterDef());
154:       assertFalse(node0.isAnd());
155:       assertFalse(node0.isThrow());
156:       assertEquals(40, node0.getType());
157:       assertFalse(node0.isCast());
158:       assertFalse(node0.isContinue());
159:       assertFalse(node0.isFalse());
160:       assertFalse(node0.isFunction());
161:       assertFalse(node0.isTry());
162:       assertFalse(node0.isTrue());
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isDefaultCase());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isDebugger());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isNE());
170:       assertFalse(node0.isIf());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isCall());
174:       assertFalse(node0.isCatch());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isHook());
178:       assertEquals((-1), node0.getCharno());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isSwitch());
182:       assertFalse(node0.isVar());
183:       assertTrue(node0.isString());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isDo());
186:       assertFalse(node0.isCase());
187:       assertFalse(node0.isStringKey());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isLabel());
190:       assertFalse(node0.isAssignAdd());
191:       assertFalse(node0.isParamList());
192:       assertFalse(node0.isLabelName());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node1.isArrayLit());
195:       assertFalse(node1.isFor());
196:       assertFalse(node1.isEmpty());
197:       assertFalse(node1.isGetterDef());
198:       assertFalse(node1.isTrue());
199:       assertFalse(node1.isDebugger());
200:       assertFalse(node1.isVoid());
201:       assertFalse(node1.isNE());
202:       assertFalse(node1.isDelProp());
203:       assertFalse(node1.isIf());
204:       assertEquals(40, node1.getType());
205:       assertEquals(0, node1.getChildCount());
206:       assertFalse(node1.isIn());
207:       assertFalse(node1.isFunction());
208:       assertFalse(node1.isInc());
209:       assertFalse(node1.isSetterDef());
210:       assertFalse(node1.isDefaultCase());
211:       assertFalse(node1.isStringKey());
212:       assertFalse(node1.isVar());
213:       assertFalse(node1.isHook());
214:       assertFalse(node1.isParamList());
215:       assertEquals((-1), node1.getCharno());
216:       assertFalse(node1.isSwitch());
217:       assertFalse(node1.isCatch());
218:       assertFalse(node1.isCase());
219:       assertFalse(node1.isInstanceOf());
220:       assertFalse(node1.isRegExp());
221:       assertFalse(node1.isWith());
222:       assertFalse(node1.hasMoreThanOneChild());
223:       assertFalse(node1.isScript());
224:       assertFalse(node1.isBlock());
225:       assertFalse(node1.isThis());
226:       assertFalse(node1.hasOneChild());
227:       assertFalse(node1.isTry());
228:       assertTrue(node1.isString());
229:       assertFalse(node1.isCast());
230:       assertFalse(node1.isGetElem());
231:       assertFalse(node1.hasChildren());
232:       assertFalse(node1.isAssign());
233:       assertFalse(node1.isDec());
234:       assertFalse(node1.isTypeOf());
235:       assertFalse(node1.isNumber());
236:       assertFalse(node1.isExprResult());
237:       assertEquals((-1), node1.getSourcePosition());
238:       assertEquals((-1), node1.getLineno());
239:       assertFalse(node1.isLabelName());
240:       assertFalse(node1.isContinue());
241:       assertFalse(node1.isOr());
242:       assertFalse(node1.isNew());
243:       assertFalse(node1.isLabel());
244:       assertFalse(node1.isAdd());
245:       assertFalse(node1.isDo());
246:       assertFalse(node1.isAssignAdd());
247:       assertFalse(node1.isCall());
248:       assertFalse(node1.isThrow());
249:       assertFalse(node1.isFalse());
250:       assertFalse(node1.isNull());
251:       assertFalse(node1.isBreak());
252:       assertFalse(node1.isName());
253:       assertFalse(node1.isAnd());
254:       assertFalse(node1.isObjectLit());
255:       assertFalse(node1.isNot());
256:       assertFalse(node1.isComma());
257:       assertFalse(node1.isGetProp());
258:       assertFalse(node1.isReturn());
259:       assertFalse(node1.isWhile());
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(57, Node.LAST_PROP);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(49, Node.DIRECT_EVAL);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(57, Node.REFLECTED_OBJECT);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(54, Node.SLASH_V);
270:       assertEquals(47, Node.IS_DISPATCHER);
271:       assertEquals(2, Node.POST_FLAG);
272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
273:       assertEquals(8, Node.FLAG_NO_THROWS);
274:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
275:       assertEquals(29, Node.JSDOC_INFO_PROP);
276:       assertEquals(40, Node.ORIGINALNAME_PROP);
277:       assertEquals(39, Node.EMPTY_BLOCK);
278:       assertEquals(30, Node.VAR_ARGS_NAME);
279:       assertEquals(43, Node.IS_CONSTANT_NAME);
280:       assertEquals(36, Node.QUOTED_PROP);
281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
282:       assertEquals(53, Node.INPUT_ID);
283:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
284:       assertEquals(55, Node.INFERRED_FUNCTION);
285:       assertEquals(56, Node.CHANGE_TIME);
286:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
287:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
288:       assertEquals(48, Node.DIRECTIVES);
289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
290:       assertEquals(37, Node.OPT_ARG_NAME);
291:       assertEquals(12, Node.COLUMN_BITS);
292:       assertEquals(32, Node.INCRDECR_PROP);
293:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
294:       assertEquals(4095, Node.COLUMN_MASK);
295:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
296:       assertEquals(52, Node.LENGTH);
297:       assertEquals(54, Node.SLASH_V);
298:       assertEquals(57, Node.REFLECTED_OBJECT);
299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
300:       assertEquals(30, Node.VAR_ARGS_NAME);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(40, Node.ORIGINALNAME_PROP);
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(46, Node.IS_NAMESPACE);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(1, Node.DECR_FLAG);
314:       assertEquals(53, Node.INPUT_ID);
315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
317:       assertEquals(36, Node.QUOTED_PROP);
318:       assertEquals(43, Node.IS_CONSTANT_NAME);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(37, Node.OPT_ARG_NAME);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(57, Node.LAST_PROP);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
332:       assertNotSame(node0, node1);
333:       assertNotSame(node1, node0);
334:       assertNotNull(node1);
335:       assertFalse(node1.equals((Object)node0));
336:       
337:       boolean boolean0 = node1.isLocalResultCall();
338:       assertFalse(boolean0);
339:       assertFalse(node0.isExprResult());
340:       assertFalse(node0.hasOneChild());
341:       assertFalse(node0.isNot());
342:       assertFalse(node0.isScript());
343:       assertEquals((-1), node0.getSourcePosition());
344:       assertFalse(node0.isNumber());
345:       assertFalse(node0.isObjectLit());
346:       assertFalse(node0.isOr());
347:       assertEquals((-1), node0.getLineno());
348:       assertFalse(node0.isInstanceOf());
349:       assertFalse(node0.isGetProp());
350:       assertFalse(node0.isThis());
351:       assertFalse(node0.isReturn());
352:       assertFalse(node0.isAssign());
353:       assertFalse(node0.isWith());
354:       assertFalse(node0.isWhile());
355:       assertFalse(node0.hasChildren());
356:       assertFalse(node0.isBreak());
357:       assertFalse(node0.isGetElem());
358:       assertFalse(node0.hasMoreThanOneChild());
359:       assertFalse(node0.isComma());
360:       assertFalse(node0.isDec());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.isInc());
363:       assertFalse(node0.isIn());
364:       assertFalse(node0.isSetterDef());
365:       assertFalse(node0.isAnd());
366:       assertFalse(node0.isThrow());
367:       assertEquals(40, node0.getType());
368:       assertFalse(node0.isCast());
369:       assertFalse(node0.isContinue());
370:       assertFalse(node0.isFalse());
371:       assertFalse(node0.isFunction());
372:       assertFalse(node0.isTry());
373:       assertFalse(node0.isTrue());
374:       assertFalse(node0.isArrayLit());
375:       assertFalse(node0.isDefaultCase());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isEmpty());
378:       assertFalse(node0.isDebugger());
379:       assertFalse(node0.isGetterDef());
380:       assertFalse(node0.isNE());
381:       assertFalse(node0.isIf());
382:       assertFalse(node0.isDelProp());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isCall());
385:       assertFalse(node0.isCatch());
386:       assertFalse(node0.isRegExp());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isHook());
389:       assertEquals((-1), node0.getCharno());
390:       assertFalse(node0.isBlock());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isVar());
394:       assertTrue(node0.isString());
395:       assertFalse(node0.isName());
396:       assertFalse(node0.isDo());
397:       assertFalse(node0.isCase());
398:       assertFalse(node0.isStringKey());
399:       assertFalse(node0.isNull());
400:       assertFalse(node0.isLabel());
401:       assertFalse(node0.isAssignAdd());
402:       assertFalse(node0.isParamList());
403:       assertFalse(node0.isLabelName());
404:       assertEquals(0, node0.getChildCount());
405:       assertFalse(node1.isArrayLit());
406:       assertFalse(node1.isFor());
407:       assertFalse(node1.isEmpty());
408:       assertFalse(node1.isGetterDef());
409:       assertFalse(node1.isTrue());
410:       assertFalse(node1.isDebugger());
411:       assertFalse(node1.isVoid());
412:       assertFalse(node1.isNE());
413:       assertFalse(node1.isDelProp());
414:       assertFalse(node1.isIf());
415:       assertEquals(40, node1.getType());
416:       assertEquals(0, node1.getChildCount());
417:       assertFalse(node1.isIn());
418:       assertFalse(node1.isFunction());
419:       assertFalse(node1.isInc());
420:       assertFalse(node1.isSetterDef());
421:       assertFalse(node1.isDefaultCase());
422:       assertFalse(node1.isStringKey());
423:       assertFalse(node1.isVar());
424:       assertFalse(node1.isHook());
425:       assertFalse(node1.isParamList());
426:       assertEquals((-1), node1.getCharno());
427:       assertFalse(node1.isSwitch());
428:       assertFalse(node1.isCatch());
429:       assertFalse(node1.isCase());
430:       assertFalse(node1.isInstanceOf());
431:       assertFalse(node1.isRegExp());
432:       assertFalse(node1.isWith());
433:       assertFalse(node1.hasMoreThanOneChild());
434:       assertFalse(node1.isScript());
435:       assertFalse(node1.isBlock());
436:       assertFalse(node1.isThis());
437:       assertFalse(node1.hasOneChild());
438:       assertFalse(node1.isTry());
439:       assertTrue(node1.isString());
440:       assertFalse(node1.isCast());
441:       assertFalse(node1.isGetElem());
442:       assertFalse(node1.hasChildren());
443:       assertFalse(node1.isAssign());
444:       assertFalse(node1.isDec());
445:       assertFalse(node1.isTypeOf());
446:       assertFalse(node1.isNumber());
447:       assertFalse(node1.isExprResult());
448:       assertEquals((-1), node1.getSourcePosition());
449:       assertEquals((-1), node1.getLineno());
450:       assertFalse(node1.isLabelName());
451:       assertFalse(node1.isContinue());
452:       assertFalse(node1.isOr());
453:       assertFalse(node1.isNew());
454:       assertFalse(node1.isLabel());
455:       assertFalse(node1.isAdd());
456:       assertFalse(node1.isDo());
457:       assertFalse(node1.isAssignAdd());
458:       assertFalse(node1.isCall());
459:       assertFalse(node1.isThrow());
460:       assertFalse(node1.isFalse());
461:       assertFalse(node1.isNull());
462:       assertFalse(node1.isBreak());
463:       assertFalse(node1.isName());
464:       assertFalse(node1.isAnd());
465:       assertFalse(node1.isObjectLit());
466:       assertFalse(node1.isNot());
467:       assertFalse(node1.isComma());
468:       assertFalse(node1.isGetProp());
469:       assertFalse(node1.isReturn());
470:       assertFalse(node1.isWhile());
471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
472:       assertEquals(57, Node.LAST_PROP);
473:       assertEquals(1, Node.DECR_FLAG);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(57, Node.REFLECTED_OBJECT);
477:       assertEquals(46, Node.IS_NAMESPACE);
478:       assertEquals(52, Node.LENGTH);
479:       assertEquals(50, Node.FREE_CALL);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(47, Node.IS_DISPATCHER);
482:       assertEquals(2, Node.POST_FLAG);
483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
486:       assertEquals(29, Node.JSDOC_INFO_PROP);
487:       assertEquals(40, Node.ORIGINALNAME_PROP);
488:       assertEquals(39, Node.EMPTY_BLOCK);
489:       assertEquals(30, Node.VAR_ARGS_NAME);
490:       assertEquals(43, Node.IS_CONSTANT_NAME);
491:       assertEquals(36, Node.QUOTED_PROP);
492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
493:       assertEquals(53, Node.INPUT_ID);
494:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
495:       assertEquals(55, Node.INFERRED_FUNCTION);
496:       assertEquals(56, Node.CHANGE_TIME);
497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
498:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
499:       assertEquals(48, Node.DIRECTIVES);
500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
501:       assertEquals(37, Node.OPT_ARG_NAME);
502:       assertEquals(12, Node.COLUMN_BITS);
503:       assertEquals(32, Node.INCRDECR_PROP);
504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
505:       assertEquals(4095, Node.COLUMN_MASK);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(52, Node.LENGTH);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(57, Node.REFLECTED_OBJECT);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(30, Node.VAR_ARGS_NAME);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
514:       assertEquals(40, Node.ORIGINALNAME_PROP);
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(46, Node.IS_NAMESPACE);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(12, Node.COLUMN_BITS);
520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(1, Node.DECR_FLAG);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(43, Node.IS_CONSTANT_NAME);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(37, Node.OPT_ARG_NAME);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
534:       assertEquals(8, Node.FLAG_NO_THROWS);
535:       assertEquals(47, Node.IS_DISPATCHER);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(29, Node.JSDOC_INFO_PROP);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
541:       assertEquals(39, Node.EMPTY_BLOCK);
542:       assertEquals(15, Node.NO_SIDE_EFFECTS);
543:       assertNotSame(node0, node1);
544:       assertNotSame(node1, node0);
545:       assertFalse(node0.equals((Object)node1));
546:       assertFalse(node1.equals((Object)node0));
547:       
548:       node0.setQuotedString();
549:       assertFalse(node0.isExprResult());
550:       assertFalse(node0.hasOneChild());
551:       assertFalse(node0.isNot());
552:       assertFalse(node0.isScript());
553:       assertEquals((-1), node0.getSourcePosition());
554:       assertFalse(node0.isNumber());
555:       assertFalse(node0.isObjectLit());
556:       assertFalse(node0.isOr());
557:       assertEquals((-1), node0.getLineno());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isGetProp());
560:       assertFalse(node0.isThis());
561:       assertFalse(node0.isReturn());
562:       assertFalse(node0.isAssign());
563:       assertFalse(node0.isWith());
564:       assertFalse(node0.isWhile());
565:       assertFalse(node0.hasChildren());
566:       assertFalse(node0.isBreak());
567:       assertFalse(node0.isGetElem());
568:       assertFalse(node0.hasMoreThanOneChild());
569:       assertFalse(node0.isComma());
570:       assertFalse(node0.isDec());
571:       assertFalse(node0.isTypeOf());
572:       assertFalse(node0.isInc());
573:       assertFalse(node0.isIn());
574:       assertFalse(node0.isSetterDef());
575:       assertFalse(node0.isAnd());
576:       assertFalse(node0.isThrow());
577:       assertEquals(40, node0.getType());
578:       assertFalse(node0.isCast());
579:       assertFalse(node0.isContinue());
580:       assertFalse(node0.isFalse());
581:       assertFalse(node0.isFunction());
582:       assertFalse(node0.isTry());
583:       assertFalse(node0.isTrue());
584:       assertFalse(node0.isArrayLit());
585:       assertFalse(node0.isDefaultCase());
586:       assertFalse(node0.isVoid());
587:       assertFalse(node0.isEmpty());
588:       assertFalse(node0.isDebugger());
589:       assertFalse(node0.isGetterDef());
590:       assertFalse(node0.isNE());
591:       assertFalse(node0.isIf());
592:       assertFalse(node0.isDelProp());
593:       assertFalse(node0.isFor());
594:       assertFalse(node0.isCall());
595:       assertFalse(node0.isCatch());
596:       assertFalse(node0.isRegExp());
597:       assertFalse(node0.isNew());
598:       assertFalse(node0.isHook());
599:       assertEquals((-1), node0.getCharno());
600:       assertFalse(node0.isBlock());
601:       assertFalse(node0.isAdd());
602:       assertFalse(node0.isSwitch());
603:       assertFalse(node0.isVar());
604:       assertTrue(node0.isString());
605:       assertFalse(node0.isName());
606:       assertFalse(node0.isDo());
607:       assertFalse(node0.isCase());
608:       assertFalse(node0.isStringKey());
609:       assertFalse(node0.isNull());
610:       assertFalse(node0.isLabel());
611:       assertFalse(node0.isAssignAdd());
612:       assertFalse(node0.isParamList());
613:       assertFalse(node0.isLabelName());
614:       assertEquals(0, node0.getChildCount());
615:       assertEquals(15, Node.NO_SIDE_EFFECTS);
616:       assertEquals(57, Node.LAST_PROP);
617:       assertEquals(1, Node.DECR_FLAG);
618:       assertEquals(49, Node.DIRECT_EVAL);
619:       assertEquals(51, Node.STATIC_SOURCE_FILE);
620:       assertEquals(57, Node.REFLECTED_OBJECT);
621:       assertEquals(46, Node.IS_NAMESPACE);
622:       assertEquals(52, Node.LENGTH);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(54, Node.SLASH_V);
625:       assertEquals(47, Node.IS_DISPATCHER);
626:       assertEquals(2, Node.POST_FLAG);
627:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
628:       assertEquals(8, Node.FLAG_NO_THROWS);
629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
630:       assertEquals(29, Node.JSDOC_INFO_PROP);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(39, Node.EMPTY_BLOCK);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(43, Node.IS_CONSTANT_NAME);
635:       assertEquals(36, Node.QUOTED_PROP);
636:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
637:       assertEquals(53, Node.INPUT_ID);
638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
639:       assertEquals(55, Node.INFERRED_FUNCTION);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
643:       assertEquals(48, Node.DIRECTIVES);
644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(12, Node.COLUMN_BITS);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
649:       assertEquals(4095, Node.COLUMN_MASK);
650:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
651:       assertNotSame(node0, node1);
652:       assertFalse(node0.equals((Object)node1));
653:       
654:       Node node2 = node0.copyInformationFrom(node1);
655:       assertFalse(node0.isExprResult());
656:       assertFalse(node0.hasOneChild());
657:       assertFalse(node0.isNot());
658:       assertFalse(node0.isScript());
659:       assertEquals((-1), node0.getSourcePosition());
660:       assertFalse(node0.isNumber());
661:       assertFalse(node0.isObjectLit());
662:       assertFalse(node0.isOr());
663:       assertEquals((-1), node0.getLineno());
664:       assertFalse(node0.isInstanceOf());
665:       assertFalse(node0.isGetProp());
666:       assertFalse(node0.isThis());
667:       assertFalse(node0.isReturn());
668:       assertFalse(node0.isAssign());
669:       assertFalse(node0.isWith());
670:       assertFalse(node0.isWhile());
671:       assertFalse(node0.hasChildren());
672:       assertFalse(node0.isBreak());
673:       assertFalse(node0.isGetElem());
674:       assertFalse(node0.hasMoreThanOneChild());
675:       assertFalse(node0.isComma());
676:       assertFalse(node0.isDec());
677:       assertFalse(node0.isTypeOf());
678:       assertFalse(node0.isInc());
679:       assertFalse(node0.isIn());
680:       assertFalse(node0.isSetterDef());
681:       assertFalse(node0.isAnd());
682:       assertFalse(node0.isThrow());
683:       assertEquals(40, node0.getType());
684:       assertFalse(node0.isCast());
685:       assertFalse(node0.isContinue());
686:       assertFalse(node0.isFalse());
687:       assertFalse(node0.isFunction());
688:       assertFalse(node0.isTry());
689:       assertFalse(node0.isTrue());
690:       assertFalse(node0.isArrayLit());
691:       assertFalse(node0.isDefaultCase());
692:       assertFalse(node0.isVoid());
693:       assertFalse(node0.isEmpty());
694:       assertFalse(node0.isDebugger());
695:       assertFalse(node0.isGetterDef());
696:       assertFalse(node0.isNE());
697:       assertFalse(node0.isIf());
698:       assertFalse(node0.isDelProp());
699:       assertFalse(node0.isFor());
700:       assertFalse(node0.isCall());
701:       assertFalse(node0.isCatch());
702:       assertFalse(node0.isRegExp());
703:       assertFalse(node0.isNew());
704:       assertFalse(node0.isHook());
705:       assertEquals((-1), node0.getCharno());
706:       assertFalse(node0.isBlock());
707:       assertFalse(node0.isAdd());
708:       assertFalse(node0.isSwitch());
709:       assertFalse(node0.isVar());
710:       assertTrue(node0.isString());
711:       assertFalse(node0.isName());
712:       assertFalse(node0.isDo());
713:       assertFalse(node0.isCase());
714:       assertFalse(node0.isStringKey());
715:       assertFalse(node0.isNull());
716:       assertFalse(node0.isLabel());
717:       assertFalse(node0.isAssignAdd());
718:       assertFalse(node0.isParamList());
719:       assertFalse(node0.isLabelName());
720:       assertEquals(0, node0.getChildCount());
721:       assertFalse(node1.isArrayLit());
722:       assertFalse(node1.isFor());
723:       assertFalse(node1.isEmpty());
724:       assertFalse(node1.isGetterDef());
725:       assertFalse(node1.isTrue());
726:       assertFalse(node1.isDebugger());
727:       assertFalse(node1.isVoid());
728:       assertFalse(node1.isNE());
729:       assertFalse(node1.isDelProp());
730:       assertFalse(node1.isIf());
731:       assertEquals(40, node1.getType());
732:       assertEquals(0, node1.getChildCount());
733:       assertFalse(node1.isIn());
734:       assertFalse(node1.isFunction());
735:       assertFalse(node1.isInc());
736:       assertFalse(node1.isSetterDef());
737:       assertFalse(node1.isDefaultCase());
738:       assertFalse(node1.isStringKey());
739:       assertFalse(node1.isVar());
740:       assertFalse(node1.isHook());
741:       assertFalse(node1.isParamList());
742:       assertEquals((-1), node1.getCharno());
743:       assertFalse(node1.isSwitch());
744:       assertFalse(node1.isCatch());
745:       assertFalse(node1.isCase());
746:       assertFalse(node1.isInstanceOf());
747:       assertFalse(node1.isRegExp());
748:       assertFalse(node1.isWith());
749:       assertFalse(node1.hasMoreThanOneChild());
750:       assertFalse(node1.isScript());
751:       assertFalse(node1.isBlock());
752:       assertFalse(node1.isThis());
753:       assertFalse(node1.hasOneChild());
754:       assertFalse(node1.isTry());
755:       assertTrue(node1.isString());
756:       assertFalse(node1.isCast());
757:       assertFalse(node1.isGetElem());
758:       assertFalse(node1.hasChildren());
759:       assertFalse(node1.isAssign());
760:       assertFalse(node1.isDec());
761:       assertFalse(node1.isTypeOf());
762:       assertFalse(node1.isNumber());
763:       assertFalse(node1.isExprResult());
764:       assertEquals((-1), node1.getSourcePosition());
765:       assertEquals((-1), node1.getLineno());
766:       assertFalse(node1.isLabelName());
767:       assertFalse(node1.isContinue());
768:       assertFalse(node1.isOr());
769:       assertFalse(node1.isNew());
770:       assertFalse(node1.isLabel());
771:       assertFalse(node1.isAdd());
772:       assertFalse(node1.isDo());
773:       assertFalse(node1.isAssignAdd());
774:       assertFalse(node1.isCall());
775:       assertFalse(node1.isThrow());
776:       assertFalse(node1.isFalse());
777:       assertFalse(node1.isNull());
778:       assertFalse(node1.isBreak());
779:       assertFalse(node1.isName());
780:       assertFalse(node1.isAnd());
781:       assertFalse(node1.isObjectLit());
782:       assertFalse(node1.isNot());
783:       assertFalse(node1.isComma());
784:       assertFalse(node1.isGetProp());
785:       assertFalse(node1.isReturn());
786:       assertFalse(node1.isWhile());
787:       assertFalse(node2.isInc());
788:       assertFalse(node2.isSwitch());
789:       assertEquals((-1), node2.getCharno());
790:       assertFalse(node2.isBreak());
791:       assertFalse(node2.isNE());
792:       assertFalse(node2.isIf());
793:       assertFalse(node2.isFalse());
794:       assertFalse(node2.isIn());
795:       assertFalse(node2.isThrow());
796:       assertFalse(node2.isEmpty());
797:       assertFalse(node2.isScript());
798:       assertFalse(node2.isRegExp());
799:       assertFalse(node2.isDefaultCase());
800:       assertFalse(node2.isWith());
801:       assertFalse(node2.isArrayLit());
802:       assertFalse(node2.isInstanceOf());
803:       assertFalse(node2.isCatch());
804:       assertFalse(node2.isLabelName());
805:       assertFalse(node2.isThis());
806:       assertFalse(node2.isNumber());
807:       assertFalse(node2.isParamList());
808:       assertFalse(node2.isFor());
809:       assertFalse(node2.isGetterDef());
810:       assertFalse(node2.isHook());
811:       assertFalse(node2.isTry());
812:       assertFalse(node2.isCase());
813:       assertTrue(node2.isString());
814:       assertFalse(node2.hasOneChild());
815:       assertFalse(node2.isWhile());
816:       assertFalse(node2.isBlock());
817:       assertFalse(node2.hasMoreThanOneChild());
818:       assertFalse(node2.isContinue());
819:       assertFalse(node2.isCall());
820:       assertFalse(node2.isStringKey());
821:       assertFalse(node2.isName());
822:       assertEquals((-1), node2.getLineno());
823:       assertFalse(node2.isNull());
824:       assertFalse(node2.isSetterDef());
825:       assertFalse(node2.isOr());
826:       assertFalse(node2.isLabel());
827:       assertEquals(0, node2.getChildCount());
828:       assertFalse(node2.isVar());
829:       assertFalse(node2.isAssignAdd());
830:       assertFalse(node2.isDo());
831:       assertFalse(node2.isAdd());
832:       assertFalse(node2.isNew());
833:       assertFalse(node2.isFunction());
834:       assertFalse(node2.isExprResult());
835:       assertFalse(node2.isTrue());
836:       assertFalse(node2.isNot());
837:       assertEquals(40, node2.getType());
838:       assertFalse(node2.isObjectLit());
839:       assertFalse(node2.isDebugger());
840:       assertFalse(node2.isAnd());
841:       assertFalse(node2.isCast());
842:       assertFalse(node2.isGetElem());
843:       assertFalse(node2.isVoid());
844:       assertFalse(node2.isDelProp());
845:       assertFalse(node2.isTypeOf());
846:       assertFalse(node2.isAssign());
847:       assertFalse(node2.isReturn());
848:       assertFalse(node2.hasChildren());
849:       assertFalse(node2.isComma());
850:       assertFalse(node2.isDec());
851:       assertEquals((-1), node2.getSourcePosition());
852:       assertFalse(node2.isGetProp());
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(57, Node.LAST_PROP);
855:       assertEquals(1, Node.DECR_FLAG);
856:       assertEquals(49, Node.DIRECT_EVAL);
857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
858:       assertEquals(57, Node.REFLECTED_OBJECT);
859:       assertEquals(46, Node.IS_NAMESPACE);
860:       assertEquals(52, Node.LENGTH);
861:       assertEquals(50, Node.FREE_CALL);
862:       assertEquals(54, Node.SLASH_V);
863:       assertEquals(47, Node.IS_DISPATCHER);
864:       assertEquals(2, Node.POST_FLAG);
865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
866:       assertEquals(8, Node.FLAG_NO_THROWS);
867:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(39, Node.EMPTY_BLOCK);
871:       assertEquals(30, Node.VAR_ARGS_NAME);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(36, Node.QUOTED_PROP);
874:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
875:       assertEquals(53, Node.INPUT_ID);
876:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(56, Node.CHANGE_TIME);
879:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
880:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
881:       assertEquals(48, Node.DIRECTIVES);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(37, Node.OPT_ARG_NAME);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(32, Node.INCRDECR_PROP);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
889:       assertEquals(52, Node.LENGTH);
890:       assertEquals(54, Node.SLASH_V);
891:       assertEquals(57, Node.REFLECTED_OBJECT);
892:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
893:       assertEquals(30, Node.VAR_ARGS_NAME);
894:       assertEquals(49, Node.DIRECT_EVAL);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(40, Node.ORIGINALNAME_PROP);
897:       assertEquals(48, Node.DIRECTIVES);
898:       assertEquals(32, Node.INCRDECR_PROP);
899:       assertEquals(46, Node.IS_NAMESPACE);
900:       assertEquals(4095, Node.COLUMN_MASK);
901:       assertEquals(12, Node.COLUMN_BITS);
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
906:       assertEquals(1, Node.DECR_FLAG);
907:       assertEquals(53, Node.INPUT_ID);
908:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
909:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
910:       assertEquals(36, Node.QUOTED_PROP);
911:       assertEquals(43, Node.IS_CONSTANT_NAME);
912:       assertEquals(56, Node.CHANGE_TIME);
913:       assertEquals(37, Node.OPT_ARG_NAME);
914:       assertEquals(2, Node.POST_FLAG);
915:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
916:       assertEquals(8, Node.FLAG_NO_THROWS);
917:       assertEquals(47, Node.IS_DISPATCHER);
918:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
919:       assertEquals(29, Node.JSDOC_INFO_PROP);
920:       assertEquals(57, Node.LAST_PROP);
921:       assertEquals(55, Node.INFERRED_FUNCTION);
922:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
923:       assertEquals(39, Node.EMPTY_BLOCK);
924:       assertEquals(15, Node.NO_SIDE_EFFECTS);
925:       assertEquals(43, Node.IS_CONSTANT_NAME);
926:       assertEquals(36, Node.QUOTED_PROP);
927:       assertEquals(48, Node.DIRECTIVES);
928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
929:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
931:       assertEquals(4095, Node.COLUMN_MASK);
932:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
933:       assertEquals(50, Node.FREE_CALL);
934:       assertEquals(32, Node.INCRDECR_PROP);
935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
936:       assertEquals(1, Node.DECR_FLAG);
937:       assertEquals(30, Node.VAR_ARGS_NAME);
938:       assertEquals(49, Node.DIRECT_EVAL);
939:       assertEquals(57, Node.LAST_PROP);
940:       assertEquals(46, Node.IS_NAMESPACE);
941:       assertEquals(51, Node.STATIC_SOURCE_FILE);
942:       assertEquals(12, Node.COLUMN_BITS);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(54, Node.SLASH_V);
945:       assertEquals(37, Node.OPT_ARG_NAME);
946:       assertEquals(2, Node.POST_FLAG);
947:       assertEquals(40, Node.ORIGINALNAME_PROP);
948:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
949:       assertEquals(47, Node.IS_DISPATCHER);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(57, Node.REFLECTED_OBJECT);
953:       assertEquals(52, Node.LENGTH);
954:       assertEquals(8, Node.FLAG_NO_THROWS);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(55, Node.INFERRED_FUNCTION);
957:       assertEquals(29, Node.JSDOC_INFO_PROP);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
960:       assertEquals(53, Node.INPUT_ID);
961:       assertNotSame(node0, node1);
962:       assertSame(node0, node2);
963:       assertNotSame(node1, node0);
964:       assertNotSame(node1, node2);
965:       assertSame(node2, node0);
966:       assertNotSame(node2, node1);
967:       assertNotNull(node2);
968:       assertFalse(node0.equals((Object)node1));
969:       assertFalse(node1.equals((Object)node0));
970:       assertFalse(node2.equals((Object)node1));
971:       
972:       Iterable<Node> iterable0 = node1.children();
973:       assertFalse(node0.isExprResult());
974:       assertFalse(node0.hasOneChild());
975:       assertFalse(node0.isNot());
976:       assertFalse(node0.isScript());
977:       assertEquals((-1), node0.getSourcePosition());
978:       assertFalse(node0.isNumber());
979:       assertFalse(node0.isObjectLit());
980:       assertFalse(node0.isOr());
981:       assertEquals((-1), node0.getLineno());
982:       assertFalse(node0.isInstanceOf());
983:       assertFalse(node0.isGetProp());
984:       assertFalse(node0.isThis());
985:       assertFalse(node0.isReturn());
986:       assertFalse(node0.isAssign());
987:       assertFalse(node0.isWith());
988:       assertFalse(node0.isWhile());
989:       assertFalse(node0.hasChildren());
990:       assertFalse(node0.isBreak());
991:       assertFalse(node0.isGetElem());
992:       assertFalse(node0.hasMoreThanOneChild());
993:       assertFalse(node0.isComma());
994:       assertFalse(node0.isDec());
995:       assertFalse(node0.isTypeOf());
996:       assertFalse(node0.isInc());
997:       assertFalse(node0.isIn());
998:       assertFalse(node0.isSetterDef());
999:       assertFalse(node0.isAnd());
1000:       assertFalse(node0.isThrow());
1001:       assertEquals(40, node0.getType());
1002:       assertFalse(node0.isCast());
1003:       assertFalse(node0.isContinue());
1004:       assertFalse(node0.isFalse());
1005:       assertFalse(node0.isFunction());
1006:       assertFalse(node0.isTry());
1007:       assertFalse(node0.isTrue());
1008:       assertFalse(node0.isArrayLit());
1009:       assertFalse(node0.isDefaultCase());
1010:       assertFalse(node0.isVoid());
1011:       assertFalse(node0.isEmpty());
1012:       assertFalse(node0.isDebugger());
1013:       assertFalse(node0.isGetterDef());
1014:       assertFalse(node0.isNE());
1015:       assertFalse(node0.isIf());
1016:       assertFalse(node0.isDelProp());
1017:       assertFalse(node0.isFor());
1018:       assertFalse(node0.isCall());
1019:       assertFalse(node0.isCatch());
1020:       assertFalse(node0.isRegExp());
1021:       assertFalse(node0.isNew());
1022:       assertFalse(node0.isHook());
1023:       assertEquals((-1), node0.getCharno());
1024:       assertFalse(node0.isBlock());
1025:       assertFalse(node0.isAdd());
1026:       assertFalse(node0.isSwitch());
1027:       assertFalse(node0.isVar());
1028:       assertTrue(node0.isString());
1029:       assertFalse(node0.isName());
1030:       assertFalse(node0.isDo());
1031:       assertFalse(node0.isCase());
1032:       assertFalse(node0.isStringKey());
1033:       assertFalse(node0.isNull());
1034:       assertFalse(node0.isLabel());
1035:       assertFalse(node0.isAssignAdd());
1036:       assertFalse(node0.isParamList());
1037:       assertFalse(node0.isLabelName());
1038:       assertEquals(0, node0.getChildCount());
1039:       assertFalse(node1.isArrayLit());
1040:       assertFalse(node1.isFor());
1041:       assertFalse(node1.isEmpty());
1042:       assertFalse(node1.isGetterDef());
1043:       assertFalse(node1.isTrue());
1044:       assertFalse(node1.isDebugger());
1045:       assertFalse(node1.isVoid());
1046:       assertFalse(node1.isNE());
1047:       assertFalse(node1.isDelProp());
1048:       assertFalse(node1.isIf());
1049:       assertEquals(40, node1.getType());
1050:       assertEquals(0, node1.getChildCount());
1051:       assertFalse(node1.isIn());
1052:       assertFalse(node1.isFunction());
1053:       assertFalse(node1.isInc());
1054:       assertFalse(node1.isSetterDef());
1055:       assertFalse(node1.isDefaultCase());
1056:       assertFalse(node1.isStringKey());
1057:       assertFalse(node1.isVar());
1058:       assertFalse(node1.isHook());
1059:       assertFalse(node1.isParamList());
1060:       assertEquals((-1), node1.getCharno());
1061:       assertFalse(node1.isSwitch());
1062:       assertFalse(node1.isCatch());
1063:       assertFalse(node1.isCase());
1064:       assertFalse(node1.isInstanceOf());
1065:       assertFalse(node1.isRegExp());
1066:       assertFalse(node1.isWith());
1067:       assertFalse(node1.hasMoreThanOneChild());
1068:       assertFalse(node1.isScript());
1069:       assertFalse(node1.isBlock());
1070:       assertFalse(node1.isThis());
1071:       assertFalse(node1.hasOneChild());
1072:       assertFalse(node1.isTry());
1073:       assertTrue(node1.isString());
1074:       assertFalse(node1.isCast());
1075:       assertFalse(node1.isGetElem());
1076:       assertFalse(node1.hasChildren());
1077:       assertFalse(node1.isAssign());
1078:       assertFalse(node1.isDec());
1079:       assertFalse(node1.isTypeOf());
1080:       assertFalse(node1.isNumber());
1081:       assertFalse(node1.isExprResult());
1082:       assertEquals((-1), node1.getSourcePosition());
1083:       assertEquals((-1), node1.getLineno());
1084:       assertFalse(node1.isLabelName());
1085:       assertFalse(node1.isContinue());
1086:       assertFalse(node1.isOr());
1087:       assertFalse(node1.isNew());
1088:       assertFalse(node1.isLabel());
1089:       assertFalse(node1.isAdd());
1090:       assertFalse(node1.isDo());
1091:       assertFalse(node1.isAssignAdd());
1092:       assertFalse(node1.isCall());
1093:       assertFalse(node1.isThrow());
1094:       assertFalse(node1.isFalse());
1095:       assertFalse(node1.isNull());
1096:       assertFalse(node1.isBreak());
1097:       assertFalse(node1.isName());
1098:       assertFalse(node1.isAnd());
1099:       assertFalse(node1.isObjectLit());
1100:       assertFalse(node1.isNot());
1101:       assertFalse(node1.isComma());
1102:       assertFalse(node1.isGetProp());
1103:       assertFalse(node1.isReturn());
1104:       assertFalse(node1.isWhile());
1105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1106:       assertEquals(57, Node.LAST_PROP);
1107:       assertEquals(1, Node.DECR_FLAG);
1108:       assertEquals(49, Node.DIRECT_EVAL);
1109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1110:       assertEquals(57, Node.REFLECTED_OBJECT);
1111:       assertEquals(46, Node.IS_NAMESPACE);
1112:       assertEquals(52, Node.LENGTH);
1113:       assertEquals(50, Node.FREE_CALL);
1114:       assertEquals(54, Node.SLASH_V);
1115:       assertEquals(47, Node.IS_DISPATCHER);
1116:       assertEquals(2, Node.POST_FLAG);
1117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(40, Node.ORIGINALNAME_PROP);
1122:       assertEquals(39, Node.EMPTY_BLOCK);
1123:       assertEquals(30, Node.VAR_ARGS_NAME);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       assertEquals(36, Node.QUOTED_PROP);
1126:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1127:       assertEquals(53, Node.INPUT_ID);
1128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1129:       assertEquals(55, Node.INFERRED_FUNCTION);
1130:       assertEquals(56, Node.CHANGE_TIME);
1131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1133:       assertEquals(48, Node.DIRECTIVES);
1134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1135:       assertEquals(37, Node.OPT_ARG_NAME);
1136:       assertEquals(12, Node.COLUMN_BITS);
1137:       assertEquals(32, Node.INCRDECR_PROP);
1138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1139:       assertEquals(4095, Node.COLUMN_MASK);
1140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1141:       assertEquals(52, Node.LENGTH);
1142:       assertEquals(54, Node.SLASH_V);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1145:       assertEquals(30, Node.VAR_ARGS_NAME);
1146:       assertEquals(49, Node.DIRECT_EVAL);
1147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1148:       assertEquals(40, Node.ORIGINALNAME_PROP);
1149:       assertEquals(48, Node.DIRECTIVES);
1150:       assertEquals(32, Node.INCRDECR_PROP);
1151:       assertEquals(46, Node.IS_NAMESPACE);
1152:       assertEquals(4095, Node.COLUMN_MASK);
1153:       assertEquals(12, Node.COLUMN_BITS);
1154:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1155:       assertEquals(50, Node.FREE_CALL);
1156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(53, Node.INPUT_ID);
1160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1162:       assertEquals(36, Node.QUOTED_PROP);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(37, Node.OPT_ARG_NAME);
1166:       assertEquals(2, Node.POST_FLAG);
1167:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1168:       assertEquals(8, Node.FLAG_NO_THROWS);
1169:       assertEquals(47, Node.IS_DISPATCHER);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(29, Node.JSDOC_INFO_PROP);
1172:       assertEquals(57, Node.LAST_PROP);
1173:       assertEquals(55, Node.INFERRED_FUNCTION);
1174:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1175:       assertEquals(39, Node.EMPTY_BLOCK);
1176:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1177:       assertNotSame(node0, node1);
1178:       assertSame(node0, node2);
1179:       assertNotSame(node1, node0);
1180:       assertNotSame(node1, node2);
1181:       assertFalse(iterable0.contains(node0));
1182:       assertNotNull(iterable0);
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertFalse(node1.equals((Object)node0));
1185:       assertFalse(node1.equals((Object)node2));
1186:       
1187:       node0.detachChildren();
1188:       assertFalse(node0.isExprResult());
1189:       assertFalse(node0.hasOneChild());
1190:       assertFalse(node0.isNot());
1191:       assertFalse(node0.isScript());
1192:       assertEquals((-1), node0.getSourcePosition());
1193:       assertFalse(node0.isNumber());
1194:       assertFalse(node0.isObjectLit());
1195:       assertFalse(node0.isOr());
1196:       assertEquals((-1), node0.getLineno());
1197:       assertFalse(node0.isInstanceOf());
1198:       assertFalse(node0.isGetProp());
1199:       assertFalse(node0.isThis());
1200:       assertFalse(node0.isReturn());
1201:       assertFalse(node0.isAssign());
1202:       assertFalse(node0.isWith());
1203:       assertFalse(node0.isWhile());
1204:       assertFalse(node0.hasChildren());
1205:       assertFalse(node0.isBreak());
1206:       assertFalse(node0.isGetElem());
1207:       assertFalse(node0.hasMoreThanOneChild());
1208:       assertFalse(node0.isComma());
1209:       assertFalse(node0.isDec());
1210:       assertFalse(node0.isTypeOf());
1211:       assertFalse(node0.isInc());
1212:       assertFalse(node0.isIn());
1213:       assertFalse(node0.isSetterDef());
1214:       assertFalse(node0.isAnd());
1215:       assertFalse(node0.isThrow());
1216:       assertEquals(40, node0.getType());
1217:       assertFalse(node0.isCast());
1218:       assertFalse(node0.isContinue());
1219:       assertFalse(node0.isFalse());
1220:       assertFalse(node0.isFunction());
1221:       assertFalse(node0.isTry());
1222:       assertFalse(node0.isTrue());
1223:       assertFalse(node0.isArrayLit());
1224:       assertFalse(node0.isDefaultCase());
1225:       assertFalse(node0.isVoid());
1226:       assertFalse(node0.isEmpty());
1227:       assertFalse(node0.isDebugger());
1228:       assertFalse(node0.isGetterDef());
1229:       assertFalse(node0.isNE());
1230:       assertFalse(node0.isIf());
1231:       assertFalse(node0.isDelProp());
1232:       assertFalse(node0.isFor());
1233:       assertFalse(node0.isCall());
1234:       assertFalse(node0.isCatch());
1235:       assertFalse(node0.isRegExp());
1236:       assertFalse(node0.isNew());
1237:       assertFalse(node0.isHook());
1238:       assertEquals((-1), node0.getCharno());
1239:       assertFalse(node0.isBlock());
1240:       assertFalse(node0.isAdd());
1241:       assertFalse(node0.isSwitch());
1242:       assertFalse(node0.isVar());
1243:       assertTrue(node0.isString());
1244:       assertFalse(node0.isName());
1245:       assertFalse(node0.isDo());
1246:       assertFalse(node0.isCase());
1247:       assertFalse(node0.isStringKey());
1248:       assertFalse(node0.isNull());
1249:       assertFalse(node0.isLabel());
1250:       assertFalse(node0.isAssignAdd());
1251:       assertFalse(node0.isParamList());
1252:       assertFalse(node0.isLabelName());
1253:       assertEquals(0, node0.getChildCount());
1254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1255:       assertEquals(57, Node.LAST_PROP);
1256:       assertEquals(1, Node.DECR_FLAG);
1257:       assertEquals(49, Node.DIRECT_EVAL);
1258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1259:       assertEquals(57, Node.REFLECTED_OBJECT);
1260:       assertEquals(46, Node.IS_NAMESPACE);
1261:       assertEquals(52, Node.LENGTH);
1262:       assertEquals(50, Node.FREE_CALL);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(47, Node.IS_DISPATCHER);
1265:       assertEquals(2, Node.POST_FLAG);
1266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1267:       assertEquals(8, Node.FLAG_NO_THROWS);
1268:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1269:       assertEquals(29, Node.JSDOC_INFO_PROP);
1270:       assertEquals(40, Node.ORIGINALNAME_PROP);
1271:       assertEquals(39, Node.EMPTY_BLOCK);
1272:       assertEquals(30, Node.VAR_ARGS_NAME);
1273:       assertEquals(43, Node.IS_CONSTANT_NAME);
1274:       assertEquals(36, Node.QUOTED_PROP);
1275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1276:       assertEquals(53, Node.INPUT_ID);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(55, Node.INFERRED_FUNCTION);
1279:       assertEquals(56, Node.CHANGE_TIME);
1280:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1281:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1282:       assertEquals(48, Node.DIRECTIVES);
1283:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1284:       assertEquals(37, Node.OPT_ARG_NAME);
1285:       assertEquals(12, Node.COLUMN_BITS);
1286:       assertEquals(32, Node.INCRDECR_PROP);
1287:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1288:       assertEquals(4095, Node.COLUMN_MASK);
1289:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1290:       assertNotSame(node0, node1);
1291:       assertSame(node0, node2);
1292:       assertFalse(node0.equals((Object)node1));
1293:       
1294:       StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
1295:       assertFalse(node0.isExprResult());
1296:       assertFalse(node0.hasOneChild());
1297:       assertFalse(node0.isNot());
1298:       assertFalse(node0.isScript());
1299:       assertEquals((-1), node0.getSourcePosition());
1300:       assertFalse(node0.isNumber());
1301:       assertFalse(node0.isObjectLit());
1302:       assertFalse(node0.isOr());
1303:       assertEquals((-1), node0.getLineno());
1304:       assertFalse(node0.isInstanceOf());
1305:       assertFalse(node0.isGetProp());
1306:       assertFalse(node0.isThis());
1307:       assertFalse(node0.isReturn());
1308:       assertFalse(node0.isAssign());
1309:       assertFalse(node0.isWith());
1310:       assertFalse(node0.isWhile());
1311:       assertFalse(node0.hasChildren());
1312:       assertFalse(node0.isBreak());
1313:       assertFalse(node0.isGetElem());
1314:       assertFalse(node0.hasMoreThanOneChild());
1315:       assertFalse(node0.isComma());
1316:       assertFalse(node0.isDec());
1317:       assertFalse(node0.isTypeOf());
1318:       assertFalse(node0.isInc());
1319:       assertFalse(node0.isIn());
1320:       assertFalse(node0.isSetterDef());
1321:       assertFalse(node0.isAnd());
1322:       assertFalse(node0.isThrow());
1323:       assertEquals(40, node0.getType());
1324:       assertFalse(node0.isCast());
1325:       assertFalse(node0.isContinue());
1326:       assertFalse(node0.isFalse());
1327:       assertFalse(node0.isFunction());
1328:       assertFalse(node0.isTry());
1329:       assertFalse(node0.isTrue());
1330:       assertFalse(node0.isArrayLit());
1331:       assertFalse(node0.isDefaultCase());
1332:       assertFalse(node0.isVoid());
1333:       assertFalse(node0.isEmpty());
1334:       assertFalse(node0.isDebugger());
1335:       assertFalse(node0.isGetterDef());
1336:       assertFalse(node0.isNE());
1337:       assertFalse(node0.isIf());
1338:       assertFalse(node0.isDelProp());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isCall());
1341:       assertFalse(node0.isCatch());
1342:       assertFalse(node0.isRegExp());
1343:       assertFalse(node0.isNew());
1344:       assertFalse(node0.isHook());
1345:       assertEquals((-1), node0.getCharno());
1346:       assertFalse(node0.isBlock());
1347:       assertFalse(node0.isAdd());
1348:       assertFalse(node0.isSwitch());
1349:       assertFalse(node0.isVar());
1350:       assertTrue(node0.isString());
1351:       assertFalse(node0.isName());
1352:       assertFalse(node0.isDo());
1353:       assertFalse(node0.isCase());
1354:       assertFalse(node0.isStringKey());
1355:       assertFalse(node0.isNull());
1356:       assertFalse(node0.isLabel());
1357:       assertFalse(node0.isAssignAdd());
1358:       assertFalse(node0.isParamList());
1359:       assertFalse(node0.isLabelName());
1360:       assertEquals(0, node0.getChildCount());
1361:       assertFalse(node1.isArrayLit());
1362:       assertFalse(node1.isFor());
1363:       assertFalse(node1.isEmpty());
1364:       assertFalse(node1.isGetterDef());
1365:       assertFalse(node1.isTrue());
1366:       assertFalse(node1.isDebugger());
1367:       assertFalse(node1.isVoid());
1368:       assertFalse(node1.isNE());
1369:       assertFalse(node1.isDelProp());
1370:       assertFalse(node1.isIf());
1371:       assertEquals(40, node1.getType());
1372:       assertEquals(0, node1.getChildCount());
1373:       assertFalse(node1.isIn());
1374:       assertFalse(node1.isFunction());
1375:       assertFalse(node1.isInc());
1376:       assertFalse(node1.isSetterDef());
1377:       assertFalse(node1.isDefaultCase());
1378:       assertFalse(node1.isStringKey());
1379:       assertFalse(node1.isVar());
1380:       assertFalse(node1.isHook());
1381:       assertFalse(node1.isParamList());
1382:       assertEquals((-1), node1.getCharno());
1383:       assertFalse(node1.isSwitch());
1384:       assertFalse(node1.isCatch());
1385:       assertFalse(node1.isCase());
1386:       assertFalse(node1.isInstanceOf());
1387:       assertFalse(node1.isRegExp());
1388:       assertFalse(node1.isWith());
1389:       assertFalse(node1.hasMoreThanOneChild());
1390:       assertFalse(node1.isScript());
1391:       assertFalse(node1.isBlock());
1392:       assertFalse(node1.isThis());
1393:       assertFalse(node1.hasOneChild());
1394:       assertFalse(node1.isTry());
1395:       assertTrue(node1.isString());
1396:       assertFalse(node1.isCast());
1397:       assertFalse(node1.isGetElem());
1398:       assertFalse(node1.hasChildren());
1399:       assertFalse(node1.isAssign());
1400:       assertFalse(node1.isDec());
1401:       assertFalse(node1.isTypeOf());
1402:       assertFalse(node1.isNumber());
1403:       assertFalse(node1.isExprResult());
1404:       assertEquals((-1), node1.getSourcePosition());
1405:       assertEquals((-1), node1.getLineno());
1406:       assertFalse(node1.isLabelName());
1407:       assertFalse(node1.isContinue());
1408:       assertFalse(node1.isOr());
1409:       assertFalse(node1.isNew());
1410:       assertFalse(node1.isLabel());
1411:       assertFalse(node1.isAdd());
1412:       assertFalse(node1.isDo());
1413:       assertFalse(node1.isAssignAdd());
1414:       assertFalse(node1.isCall());
1415:       assertFalse(node1.isThrow());
1416:       assertFalse(node1.isFalse());
1417:       assertFalse(node1.isNull());
1418:       assertFalse(node1.isBreak());
1419:       assertFalse(node1.isName());
1420:       assertFalse(node1.isAnd());
1421:       assertFalse(node1.isObjectLit());
1422:       assertFalse(node1.isNot());
1423:       assertFalse(node1.isComma());
1424:       assertFalse(node1.isGetProp());
1425:       assertFalse(node1.isReturn());
1426:       assertFalse(node1.isWhile());
1427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1428:       assertEquals(57, Node.LAST_PROP);
1429:       assertEquals(1, Node.DECR_FLAG);
1430:       assertEquals(49, Node.DIRECT_EVAL);
1431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1432:       assertEquals(57, Node.REFLECTED_OBJECT);
1433:       assertEquals(46, Node.IS_NAMESPACE);
1434:       assertEquals(52, Node.LENGTH);
1435:       assertEquals(50, Node.FREE_CALL);
1436:       assertEquals(54, Node.SLASH_V);
1437:       assertEquals(47, Node.IS_DISPATCHER);
1438:       assertEquals(2, Node.POST_FLAG);
1439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1440:       assertEquals(8, Node.FLAG_NO_THROWS);
1441:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1442:       assertEquals(29, Node.JSDOC_INFO_PROP);
1443:       assertEquals(40, Node.ORIGINALNAME_PROP);
1444:       assertEquals(39, Node.EMPTY_BLOCK);
1445:       assertEquals(30, Node.VAR_ARGS_NAME);
1446:       assertEquals(43, Node.IS_CONSTANT_NAME);
1447:       assertEquals(36, Node.QUOTED_PROP);
1448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1449:       assertEquals(53, Node.INPUT_ID);
1450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1451:       assertEquals(55, Node.INFERRED_FUNCTION);
1452:       assertEquals(56, Node.CHANGE_TIME);
1453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1455:       assertEquals(48, Node.DIRECTIVES);
1456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1457:       assertEquals(37, Node.OPT_ARG_NAME);
1458:       assertEquals(12, Node.COLUMN_BITS);
1459:       assertEquals(32, Node.INCRDECR_PROP);
1460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1461:       assertEquals(4095, Node.COLUMN_MASK);
1462:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1463:       assertEquals(52, Node.LENGTH);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(57, Node.REFLECTED_OBJECT);
1466:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1467:       assertEquals(30, Node.VAR_ARGS_NAME);
1468:       assertEquals(49, Node.DIRECT_EVAL);
1469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(48, Node.DIRECTIVES);
1472:       assertEquals(32, Node.INCRDECR_PROP);
1473:       assertEquals(46, Node.IS_NAMESPACE);
1474:       assertEquals(4095, Node.COLUMN_MASK);
1475:       assertEquals(12, Node.COLUMN_BITS);
1476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1477:       assertEquals(50, Node.FREE_CALL);
1478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1480:       assertEquals(1, Node.DECR_FLAG);
1481:       assertEquals(53, Node.INPUT_ID);
1482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(43, Node.IS_CONSTANT_NAME);
1486:       assertEquals(56, Node.CHANGE_TIME);
1487:       assertEquals(37, Node.OPT_ARG_NAME);
1488:       assertEquals(2, Node.POST_FLAG);
1489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1490:       assertEquals(8, Node.FLAG_NO_THROWS);
1491:       assertEquals(47, Node.IS_DISPATCHER);
1492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1493:       assertEquals(29, Node.JSDOC_INFO_PROP);
1494:       assertEquals(57, Node.LAST_PROP);
1495:       assertEquals(55, Node.INFERRED_FUNCTION);
1496:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1497:       assertEquals(39, Node.EMPTY_BLOCK);
1498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1499:       assertNotSame(node0, node1);
1500:       assertSame(node0, node2);
1501:       assertNotSame(node1, node0);
1502:       assertNotSame(node1, node2);
1503:       assertNull(staticSourceFile0);
1504:       assertFalse(node0.equals((Object)node1));
1505:       assertFalse(node1.equals((Object)node0));
1506:       assertFalse(node1.equals((Object)node2));
1507:       
1508:       try { 
1509:         node2.getDouble();
1510:         fail("Expecting exception: UnsupportedOperationException");
1511:       
1512:       } catch(UnsupportedOperationException e) {
1513:          //
1514:          // STRING qrvsqkX5OB [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
1515:          //
1516:          verifyException("com.google.javascript.rhino.Node", e);
1517:       }
1518:   }
1519: }
RegularFileObject[/tmp/EvoSuite_144_1628158783017/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:19:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.common.collect.Iterators$12",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.ImmutableList$1"
374:     );
375:   }
376: }

[MASTER] 10:19:43.422 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("qrvsqkX5OB");
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);

Node node1 = node0.cloneTree();
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node1.isLocalResultCall();
assertFalse(boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node0.setQuotedString();
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isWith());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isLabelName());
assertFalse(node2.isThis());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Iterable<Node> iterable0 = node1.children();
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

node0.detachChildren();
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));

StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNull(staticSourceFile0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

node2.getDouble();

[MASTER] 10:19:49.430 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_171_1628158789037/com/google/javascript/rhino/Node_171_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_171_1628158789037/com/google/javascript/rhino/Node_171_tmp__ESTest_scaffolding.java]]
[MASTER] 10:19:49.430 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:49.430 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:49.432 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1501
[MASTER] 10:19:49.433 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_171_1628158789037/com/google/javascript/rhino/Node_171_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:19:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_171_tmp__ESTest extends Node_171_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("qrvsqkX5OB");
24:       assertFalse(node0.isGetProp());
25:       assertFalse(node0.isComma());
26:       assertFalse(node0.isThis());
27:       assertFalse(node0.isFalse());
28:       assertFalse(node0.isAnd());
29:       assertFalse(node0.isWith());
30:       assertFalse(node0.isInstanceOf());
31:       assertFalse(node0.isBreak());
32:       assertFalse(node0.isExprResult());
33:       assertFalse(node0.isThrow());
34:       assertFalse(node0.isIn());
35:       assertFalse(node0.isInc());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isDec());
38:       assertEquals((-1), node0.getSourcePosition());
39:       assertFalse(node0.hasChildren());
40:       assertFalse(node0.isReturn());
41:       assertFalse(node0.isGetElem());
42:       assertFalse(node0.isContinue());
43:       assertFalse(node0.isDelProp());
44:       assertFalse(node0.isAssign());
45:       assertFalse(node0.isTypeOf());
46:       assertFalse(node0.isCast());
47:       assertFalse(node0.isDebugger());
48:       assertFalse(node0.isWhile());
49:       assertFalse(node0.isObjectLit());
50:       assertFalse(node0.isNot());
51:       assertEquals(0, node0.getChildCount());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isParamList());
54:       assertEquals(40, node0.getType());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isName());
57:       assertFalse(node0.isRegExp());
58:       assertFalse(node0.isCall());
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isAdd());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isVoid());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isTrue());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isAssignAdd());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isBlock());
80:       assertTrue(node0.isString());
81:       assertEquals((-1), node0.getCharno());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isHook());
84:       assertFalse(node0.isSwitch());
85:       assertFalse(node0.isCase());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.hasOneChild());
89:       assertFalse(node0.isScript());
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(57, Node.REFLECTED_OBJECT);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(55, Node.INFERRED_FUNCTION);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(52, Node.LENGTH);
125:       assertEquals(8, Node.FLAG_NO_THROWS);
126:       assertNotNull(node0);
127:       
128:       Node node1 = node0.cloneTree();
129:       assertFalse(node0.isGetProp());
130:       assertFalse(node0.isComma());
131:       assertFalse(node0.isThis());
132:       assertFalse(node0.isFalse());
133:       assertFalse(node0.isAnd());
134:       assertFalse(node0.isWith());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isBreak());
137:       assertFalse(node0.isExprResult());
138:       assertFalse(node0.isThrow());
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isInc());
141:       assertFalse(node0.isOr());
142:       assertFalse(node0.isDec());
143:       assertEquals((-1), node0.getSourcePosition());
144:       assertFalse(node0.hasChildren());
145:       assertFalse(node0.isReturn());
146:       assertFalse(node0.isGetElem());
147:       assertFalse(node0.isContinue());
148:       assertFalse(node0.isDelProp());
149:       assertFalse(node0.isAssign());
150:       assertFalse(node0.isTypeOf());
151:       assertFalse(node0.isCast());
152:       assertFalse(node0.isDebugger());
153:       assertFalse(node0.isWhile());
154:       assertFalse(node0.isObjectLit());
155:       assertFalse(node0.isNot());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isNull());
158:       assertFalse(node0.isParamList());
159:       assertEquals(40, node0.getType());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isName());
162:       assertFalse(node0.isRegExp());
163:       assertFalse(node0.isCall());
164:       assertFalse(node0.isCatch());
165:       assertFalse(node0.isNew());
166:       assertFalse(node0.isAdd());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isVoid());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isTrue());
171:       assertFalse(node0.isVar());
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isAssignAdd());
177:       assertEquals((-1), node0.getLineno());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isNE());
180:       assertFalse(node0.isFor());
181:       assertFalse(node0.isLabelName());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isBlock());
185:       assertTrue(node0.isString());
186:       assertEquals((-1), node0.getCharno());
187:       assertFalse(node0.isTry());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isSwitch());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.isGetterDef());
192:       assertFalse(node0.isNumber());
193:       assertFalse(node0.hasOneChild());
194:       assertFalse(node0.isScript());
195:       assertFalse(node1.isCatch());
196:       assertEquals(40, node1.getType());
197:       assertFalse(node1.isDefaultCase());
198:       assertEquals(0, node1.getChildCount());
199:       assertFalse(node1.isFunction());
200:       assertFalse(node1.isRegExp());
201:       assertFalse(node1.isArrayLit());
202:       assertFalse(node1.isStringKey());
203:       assertFalse(node1.isFor());
204:       assertFalse(node1.isTry());
205:       assertTrue(node1.isString());
206:       assertFalse(node1.isDebugger());
207:       assertFalse(node1.isParamList());
208:       assertFalse(node1.isGetterDef());
209:       assertFalse(node1.hasMoreThanOneChild());
210:       assertFalse(node1.isContinue());
211:       assertEquals((-1), node1.getLineno());
212:       assertFalse(node1.isCase());
213:       assertFalse(node1.isBlock());
214:       assertFalse(node1.isThrow());
215:       assertFalse(node1.isIf());
216:       assertFalse(node1.isSetterDef());
217:       assertFalse(node1.isNE());
218:       assertFalse(node1.isInc());
219:       assertFalse(node1.isIn());
220:       assertFalse(node1.isAnd());
221:       assertFalse(node1.isInstanceOf());
222:       assertFalse(node1.isComma());
223:       assertFalse(node1.isBreak());
224:       assertFalse(node1.isExprResult());
225:       assertFalse(node1.isThis());
226:       assertFalse(node1.isWith());
227:       assertFalse(node1.isFalse());
228:       assertFalse(node1.isCast());
229:       assertFalse(node1.hasOneChild());
230:       assertFalse(node1.isHook());
231:       assertFalse(node1.isLabelName());
232:       assertFalse(node1.isSwitch());
233:       assertEquals((-1), node1.getSourcePosition());
234:       assertFalse(node1.isGetProp());
235:       assertEquals((-1), node1.getCharno());
236:       assertFalse(node1.isScript());
237:       assertFalse(node1.isNot());
238:       assertFalse(node1.isNumber());
239:       assertFalse(node1.isObjectLit());
240:       assertFalse(node1.isReturn());
241:       assertFalse(node1.isAssignAdd());
242:       assertFalse(node1.isDo());
243:       assertFalse(node1.isWhile());
244:       assertFalse(node1.hasChildren());
245:       assertFalse(node1.isAssign());
246:       assertFalse(node1.isLabel());
247:       assertFalse(node1.isDec());
248:       assertFalse(node1.isTypeOf());
249:       assertFalse(node1.isVar());
250:       assertFalse(node1.isGetElem());
251:       assertFalse(node1.isCall());
252:       assertFalse(node1.isNew());
253:       assertFalse(node1.isVoid());
254:       assertFalse(node1.isName());
255:       assertFalse(node1.isDelProp());
256:       assertFalse(node1.isTrue());
257:       assertFalse(node1.isNull());
258:       assertFalse(node1.isAdd());
259:       assertFalse(node1.isOr());
260:       assertFalse(node1.isEmpty());
261:       assertEquals(56, Node.CHANGE_TIME);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(47, Node.IS_DISPATCHER);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
269:       assertEquals(43, Node.IS_CONSTANT_NAME);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(1, Node.DECR_FLAG);
272:       assertEquals(32, Node.INCRDECR_PROP);
273:       assertEquals(46, Node.IS_NAMESPACE);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
276:       assertEquals(50, Node.FREE_CALL);
277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
278:       assertEquals(39, Node.EMPTY_BLOCK);
279:       assertEquals(48, Node.DIRECTIVES);
280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
282:       assertEquals(40, Node.ORIGINALNAME_PROP);
283:       assertEquals(4095, Node.COLUMN_MASK);
284:       assertEquals(30, Node.VAR_ARGS_NAME);
285:       assertEquals(36, Node.QUOTED_PROP);
286:       assertEquals(15, Node.NO_SIDE_EFFECTS);
287:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
288:       assertEquals(49, Node.DIRECT_EVAL);
289:       assertEquals(57, Node.LAST_PROP);
290:       assertEquals(53, Node.INPUT_ID);
291:       assertEquals(57, Node.REFLECTED_OBJECT);
292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
293:       assertEquals(55, Node.INFERRED_FUNCTION);
294:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
295:       assertEquals(52, Node.LENGTH);
296:       assertEquals(8, Node.FLAG_NO_THROWS);
297:       assertEquals(32, Node.INCRDECR_PROP);
298:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
299:       assertEquals(37, Node.OPT_ARG_NAME);
300:       assertEquals(1, Node.DECR_FLAG);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(53, Node.INPUT_ID);
308:       assertEquals(52, Node.LENGTH);
309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
313:       assertEquals(49, Node.DIRECT_EVAL);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(56, Node.CHANGE_TIME);
317:       assertEquals(36, Node.QUOTED_PROP);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(48, Node.DIRECTIVES);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(8, Node.FLAG_NO_THROWS);
322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
326:       assertEquals(54, Node.SLASH_V);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertNotSame(node0, node1);
334:       assertNotSame(node1, node0);
335:       assertNotNull(node1);
336:       assertFalse(node1.equals((Object)node0));
337:       
338:       boolean boolean0 = node1.isLocalResultCall();
339:       assertFalse(boolean0);
340:       assertFalse(node0.isGetProp());
341:       assertFalse(node0.isComma());
342:       assertFalse(node0.isThis());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isAnd());
345:       assertFalse(node0.isWith());
346:       assertFalse(node0.isInstanceOf());
347:       assertFalse(node0.isBreak());
348:       assertFalse(node0.isExprResult());
349:       assertFalse(node0.isThrow());
350:       assertFalse(node0.isIn());
351:       assertFalse(node0.isInc());
352:       assertFalse(node0.isOr());
353:       assertFalse(node0.isDec());
354:       assertEquals((-1), node0.getSourcePosition());
355:       assertFalse(node0.hasChildren());
356:       assertFalse(node0.isReturn());
357:       assertFalse(node0.isGetElem());
358:       assertFalse(node0.isContinue());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isAssign());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.isCast());
363:       assertFalse(node0.isDebugger());
364:       assertFalse(node0.isWhile());
365:       assertFalse(node0.isObjectLit());
366:       assertFalse(node0.isNot());
367:       assertEquals(0, node0.getChildCount());
368:       assertFalse(node0.isNull());
369:       assertFalse(node0.isParamList());
370:       assertEquals(40, node0.getType());
371:       assertFalse(node0.isStringKey());
372:       assertFalse(node0.isName());
373:       assertFalse(node0.isRegExp());
374:       assertFalse(node0.isCall());
375:       assertFalse(node0.isCatch());
376:       assertFalse(node0.isNew());
377:       assertFalse(node0.isAdd());
378:       assertFalse(node0.isFunction());
379:       assertFalse(node0.isVoid());
380:       assertFalse(node0.isDefaultCase());
381:       assertFalse(node0.isTrue());
382:       assertFalse(node0.isVar());
383:       assertFalse(node0.isDo());
384:       assertFalse(node0.isSetterDef());
385:       assertFalse(node0.isEmpty());
386:       assertFalse(node0.isLabel());
387:       assertFalse(node0.isAssignAdd());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isIf());
390:       assertFalse(node0.isNE());
391:       assertFalse(node0.isFor());
392:       assertFalse(node0.isLabelName());
393:       assertFalse(node0.isArrayLit());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isBlock());
396:       assertTrue(node0.isString());
397:       assertEquals((-1), node0.getCharno());
398:       assertFalse(node0.isTry());
399:       assertFalse(node0.isHook());
400:       assertFalse(node0.isSwitch());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.isGetterDef());
403:       assertFalse(node0.isNumber());
404:       assertFalse(node0.hasOneChild());
405:       assertFalse(node0.isScript());
406:       assertFalse(node1.isCatch());
407:       assertEquals(40, node1.getType());
408:       assertFalse(node1.isDefaultCase());
409:       assertEquals(0, node1.getChildCount());
410:       assertFalse(node1.isFunction());
411:       assertFalse(node1.isRegExp());
412:       assertFalse(node1.isArrayLit());
413:       assertFalse(node1.isStringKey());
414:       assertFalse(node1.isFor());
415:       assertFalse(node1.isTry());
416:       assertTrue(node1.isString());
417:       assertFalse(node1.isDebugger());
418:       assertFalse(node1.isParamList());
419:       assertFalse(node1.isGetterDef());
420:       assertFalse(node1.hasMoreThanOneChild());
421:       assertFalse(node1.isContinue());
422:       assertEquals((-1), node1.getLineno());
423:       assertFalse(node1.isCase());
424:       assertFalse(node1.isBlock());
425:       assertFalse(node1.isThrow());
426:       assertFalse(node1.isIf());
427:       assertFalse(node1.isSetterDef());
428:       assertFalse(node1.isNE());
429:       assertFalse(node1.isInc());
430:       assertFalse(node1.isIn());
431:       assertFalse(node1.isAnd());
432:       assertFalse(node1.isInstanceOf());
433:       assertFalse(node1.isComma());
434:       assertFalse(node1.isBreak());
435:       assertFalse(node1.isExprResult());
436:       assertFalse(node1.isThis());
437:       assertFalse(node1.isWith());
438:       assertFalse(node1.isFalse());
439:       assertFalse(node1.isCast());
440:       assertFalse(node1.hasOneChild());
441:       assertFalse(node1.isHook());
442:       assertFalse(node1.isLabelName());
443:       assertFalse(node1.isSwitch());
444:       assertEquals((-1), node1.getSourcePosition());
445:       assertFalse(node1.isGetProp());
446:       assertEquals((-1), node1.getCharno());
447:       assertFalse(node1.isScript());
448:       assertFalse(node1.isNot());
449:       assertFalse(node1.isNumber());
450:       assertFalse(node1.isObjectLit());
451:       assertFalse(node1.isReturn());
452:       assertFalse(node1.isAssignAdd());
453:       assertFalse(node1.isDo());
454:       assertFalse(node1.isWhile());
455:       assertFalse(node1.hasChildren());
456:       assertFalse(node1.isAssign());
457:       assertFalse(node1.isLabel());
458:       assertFalse(node1.isDec());
459:       assertFalse(node1.isTypeOf());
460:       assertFalse(node1.isVar());
461:       assertFalse(node1.isGetElem());
462:       assertFalse(node1.isCall());
463:       assertFalse(node1.isNew());
464:       assertFalse(node1.isVoid());
465:       assertFalse(node1.isName());
466:       assertFalse(node1.isDelProp());
467:       assertFalse(node1.isTrue());
468:       assertFalse(node1.isNull());
469:       assertFalse(node1.isAdd());
470:       assertFalse(node1.isOr());
471:       assertFalse(node1.isEmpty());
472:       assertEquals(56, Node.CHANGE_TIME);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(29, Node.JSDOC_INFO_PROP);
475:       assertEquals(47, Node.IS_DISPATCHER);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       assertEquals(2, Node.POST_FLAG);
479:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
480:       assertEquals(43, Node.IS_CONSTANT_NAME);
481:       assertEquals(54, Node.SLASH_V);
482:       assertEquals(1, Node.DECR_FLAG);
483:       assertEquals(32, Node.INCRDECR_PROP);
484:       assertEquals(46, Node.IS_NAMESPACE);
485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
489:       assertEquals(39, Node.EMPTY_BLOCK);
490:       assertEquals(48, Node.DIRECTIVES);
491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
493:       assertEquals(40, Node.ORIGINALNAME_PROP);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(30, Node.VAR_ARGS_NAME);
496:       assertEquals(36, Node.QUOTED_PROP);
497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(49, Node.DIRECT_EVAL);
500:       assertEquals(57, Node.LAST_PROP);
501:       assertEquals(53, Node.INPUT_ID);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
504:       assertEquals(55, Node.INFERRED_FUNCTION);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(52, Node.LENGTH);
507:       assertEquals(8, Node.FLAG_NO_THROWS);
508:       assertEquals(32, Node.INCRDECR_PROP);
509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
510:       assertEquals(37, Node.OPT_ARG_NAME);
511:       assertEquals(1, Node.DECR_FLAG);
512:       assertEquals(30, Node.VAR_ARGS_NAME);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(57, Node.LAST_PROP);
515:       assertEquals(47, Node.IS_DISPATCHER);
516:       assertEquals(2, Node.POST_FLAG);
517:       assertEquals(12, Node.COLUMN_BITS);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(52, Node.LENGTH);
520:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(29, Node.JSDOC_INFO_PROP);
523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(55, Node.INFERRED_FUNCTION);
526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
527:       assertEquals(56, Node.CHANGE_TIME);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(57, Node.REFLECTED_OBJECT);
530:       assertEquals(48, Node.DIRECTIVES);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
534:       assertEquals(39, Node.EMPTY_BLOCK);
535:       assertEquals(4095, Node.COLUMN_MASK);
536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(40, Node.ORIGINALNAME_PROP);
539:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
540:       assertEquals(50, Node.FREE_CALL);
541:       assertEquals(43, Node.IS_CONSTANT_NAME);
542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       assertNotSame(node0, node1);
545:       assertNotSame(node1, node0);
546:       assertFalse(node0.equals((Object)node1));
547:       assertFalse(node1.equals((Object)node0));
548:       
549:       node0.setQuotedString();
550:       assertFalse(node0.isGetProp());
551:       assertFalse(node0.isComma());
552:       assertFalse(node0.isThis());
553:       assertFalse(node0.isFalse());
554:       assertFalse(node0.isAnd());
555:       assertFalse(node0.isWith());
556:       assertFalse(node0.isInstanceOf());
557:       assertFalse(node0.isBreak());
558:       assertFalse(node0.isExprResult());
559:       assertFalse(node0.isThrow());
560:       assertFalse(node0.isIn());
561:       assertFalse(node0.isInc());
562:       assertFalse(node0.isOr());
563:       assertFalse(node0.isDec());
564:       assertEquals((-1), node0.getSourcePosition());
565:       assertFalse(node0.hasChildren());
566:       assertFalse(node0.isReturn());
567:       assertFalse(node0.isGetElem());
568:       assertFalse(node0.isContinue());
569:       assertFalse(node0.isDelProp());
570:       assertFalse(node0.isAssign());
571:       assertFalse(node0.isTypeOf());
572:       assertFalse(node0.isCast());
573:       assertFalse(node0.isDebugger());
574:       assertFalse(node0.isWhile());
575:       assertFalse(node0.isObjectLit());
576:       assertFalse(node0.isNot());
577:       assertEquals(0, node0.getChildCount());
578:       assertFalse(node0.isNull());
579:       assertFalse(node0.isParamList());
580:       assertEquals(40, node0.getType());
581:       assertFalse(node0.isStringKey());
582:       assertFalse(node0.isName());
583:       assertFalse(node0.isRegExp());
584:       assertFalse(node0.isCall());
585:       assertFalse(node0.isCatch());
586:       assertFalse(node0.isNew());
587:       assertFalse(node0.isAdd());
588:       assertFalse(node0.isFunction());
589:       assertFalse(node0.isVoid());
590:       assertFalse(node0.isDefaultCase());
591:       assertFalse(node0.isTrue());
592:       assertFalse(node0.isVar());
593:       assertFalse(node0.isDo());
594:       assertFalse(node0.isSetterDef());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isLabel());
597:       assertFalse(node0.isAssignAdd());
598:       assertEquals((-1), node0.getLineno());
599:       assertFalse(node0.isIf());
600:       assertFalse(node0.isNE());
601:       assertFalse(node0.isFor());
602:       assertFalse(node0.isLabelName());
603:       assertFalse(node0.isArrayLit());
604:       assertFalse(node0.hasMoreThanOneChild());
605:       assertFalse(node0.isBlock());
606:       assertTrue(node0.isString());
607:       assertEquals((-1), node0.getCharno());
608:       assertFalse(node0.isTry());
609:       assertFalse(node0.isHook());
610:       assertFalse(node0.isSwitch());
611:       assertFalse(node0.isCase());
612:       assertFalse(node0.isGetterDef());
613:       assertFalse(node0.isNumber());
614:       assertFalse(node0.hasOneChild());
615:       assertFalse(node0.isScript());
616:       assertEquals(56, Node.CHANGE_TIME);
617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
618:       assertEquals(29, Node.JSDOC_INFO_PROP);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(37, Node.OPT_ARG_NAME);
621:       assertEquals(12, Node.COLUMN_BITS);
622:       assertEquals(2, Node.POST_FLAG);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(43, Node.IS_CONSTANT_NAME);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(1, Node.DECR_FLAG);
627:       assertEquals(32, Node.INCRDECR_PROP);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
633:       assertEquals(39, Node.EMPTY_BLOCK);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
637:       assertEquals(40, Node.ORIGINALNAME_PROP);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(53, Node.INPUT_ID);
646:       assertEquals(57, Node.REFLECTED_OBJECT);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(55, Node.INFERRED_FUNCTION);
649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(8, Node.FLAG_NO_THROWS);
652:       assertNotSame(node0, node1);
653:       assertFalse(node0.equals((Object)node1));
654:       
655:       Node node2 = node0.copyInformationFrom(node1);
656:       assertFalse(node0.isGetProp());
657:       assertFalse(node0.isComma());
658:       assertFalse(node0.isThis());
659:       assertFalse(node0.isFalse());
660:       assertFalse(node0.isAnd());
661:       assertFalse(node0.isWith());
662:       assertFalse(node0.isInstanceOf());
663:       assertFalse(node0.isBreak());
664:       assertFalse(node0.isExprResult());
665:       assertFalse(node0.isThrow());
666:       assertFalse(node0.isIn());
667:       assertFalse(node0.isInc());
668:       assertFalse(node0.isOr());
669:       assertFalse(node0.isDec());
670:       assertEquals((-1), node0.getSourcePosition());
671:       assertFalse(node0.hasChildren());
672:       assertFalse(node0.isReturn());
673:       assertFalse(node0.isGetElem());
674:       assertFalse(node0.isContinue());
675:       assertFalse(node0.isDelProp());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isTypeOf());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isDebugger());
680:       assertFalse(node0.isWhile());
681:       assertFalse(node0.isObjectLit());
682:       assertFalse(node0.isNot());
683:       assertEquals(0, node0.getChildCount());
684:       assertFalse(node0.isNull());
685:       assertFalse(node0.isParamList());
686:       assertEquals(40, node0.getType());
687:       assertFalse(node0.isStringKey());
688:       assertFalse(node0.isName());
689:       assertFalse(node0.isRegExp());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isCatch());
692:       assertFalse(node0.isNew());
693:       assertFalse(node0.isAdd());
694:       assertFalse(node0.isFunction());
695:       assertFalse(node0.isVoid());
696:       assertFalse(node0.isDefaultCase());
697:       assertFalse(node0.isTrue());
698:       assertFalse(node0.isVar());
699:       assertFalse(node0.isDo());
700:       assertFalse(node0.isSetterDef());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isLabel());
703:       assertFalse(node0.isAssignAdd());
704:       assertEquals((-1), node0.getLineno());
705:       assertFalse(node0.isIf());
706:       assertFalse(node0.isNE());
707:       assertFalse(node0.isFor());
708:       assertFalse(node0.isLabelName());
709:       assertFalse(node0.isArrayLit());
710:       assertFalse(node0.hasMoreThanOneChild());
711:       assertFalse(node0.isBlock());
712:       assertTrue(node0.isString());
713:       assertEquals((-1), node0.getCharno());
714:       assertFalse(node0.isTry());
715:       assertFalse(node0.isHook());
716:       assertFalse(node0.isSwitch());
717:       assertFalse(node0.isCase());
718:       assertFalse(node0.isGetterDef());
719:       assertFalse(node0.isNumber());
720:       assertFalse(node0.hasOneChild());
721:       assertFalse(node0.isScript());
722:       assertFalse(node1.isCatch());
723:       assertEquals(40, node1.getType());
724:       assertFalse(node1.isDefaultCase());
725:       assertEquals(0, node1.getChildCount());
726:       assertFalse(node1.isFunction());
727:       assertFalse(node1.isRegExp());
728:       assertFalse(node1.isArrayLit());
729:       assertFalse(node1.isStringKey());
730:       assertFalse(node1.isFor());
731:       assertFalse(node1.isTry());
732:       assertTrue(node1.isString());
733:       assertFalse(node1.isDebugger());
734:       assertFalse(node1.isParamList());
735:       assertFalse(node1.isGetterDef());
736:       assertFalse(node1.hasMoreThanOneChild());
737:       assertFalse(node1.isContinue());
738:       assertEquals((-1), node1.getLineno());
739:       assertFalse(node1.isCase());
740:       assertFalse(node1.isBlock());
741:       assertFalse(node1.isThrow());
742:       assertFalse(node1.isIf());
743:       assertFalse(node1.isSetterDef());
744:       assertFalse(node1.isNE());
745:       assertFalse(node1.isInc());
746:       assertFalse(node1.isIn());
747:       assertFalse(node1.isAnd());
748:       assertFalse(node1.isInstanceOf());
749:       assertFalse(node1.isComma());
750:       assertFalse(node1.isBreak());
751:       assertFalse(node1.isExprResult());
752:       assertFalse(node1.isThis());
753:       assertFalse(node1.isWith());
754:       assertFalse(node1.isFalse());
755:       assertFalse(node1.isCast());
756:       assertFalse(node1.hasOneChild());
757:       assertFalse(node1.isHook());
758:       assertFalse(node1.isLabelName());
759:       assertFalse(node1.isSwitch());
760:       assertEquals((-1), node1.getSourcePosition());
761:       assertFalse(node1.isGetProp());
762:       assertEquals((-1), node1.getCharno());
763:       assertFalse(node1.isScript());
764:       assertFalse(node1.isNot());
765:       assertFalse(node1.isNumber());
766:       assertFalse(node1.isObjectLit());
767:       assertFalse(node1.isReturn());
768:       assertFalse(node1.isAssignAdd());
769:       assertFalse(node1.isDo());
770:       assertFalse(node1.isWhile());
771:       assertFalse(node1.hasChildren());
772:       assertFalse(node1.isAssign());
773:       assertFalse(node1.isLabel());
774:       assertFalse(node1.isDec());
775:       assertFalse(node1.isTypeOf());
776:       assertFalse(node1.isVar());
777:       assertFalse(node1.isGetElem());
778:       assertFalse(node1.isCall());
779:       assertFalse(node1.isNew());
780:       assertFalse(node1.isVoid());
781:       assertFalse(node1.isName());
782:       assertFalse(node1.isDelProp());
783:       assertFalse(node1.isTrue());
784:       assertFalse(node1.isNull());
785:       assertFalse(node1.isAdd());
786:       assertFalse(node1.isOr());
787:       assertFalse(node1.isEmpty());
788:       assertFalse(node2.isNE());
789:       assertFalse(node2.isIn());
790:       assertFalse(node2.isGetterDef());
791:       assertFalse(node2.isArrayLit());
792:       assertFalse(node2.isIf());
793:       assertFalse(node2.isDelProp());
794:       assertFalse(node2.isSwitch());
795:       assertFalse(node2.isInc());
796:       assertFalse(node2.isTrue());
797:       assertFalse(node2.isFunction());
798:       assertFalse(node2.isThrow());
799:       assertFalse(node2.isEmpty());
800:       assertEquals(40, node2.getType());
801:       assertFalse(node2.isDefaultCase());
802:       assertFalse(node2.isParamList());
803:       assertFalse(node2.isThis());
804:       assertFalse(node2.isSetterDef());
805:       assertEquals(0, node2.getChildCount());
806:       assertFalse(node2.isInstanceOf());
807:       assertFalse(node2.isCatch());
808:       assertFalse(node2.isStringKey());
809:       assertEquals((-1), node2.getCharno());
810:       assertFalse(node2.isScript());
811:       assertFalse(node2.isBlock());
812:       assertFalse(node2.isRegExp());
813:       assertFalse(node2.isWith());
814:       assertFalse(node2.isCase());
815:       assertFalse(node2.isFor());
816:       assertFalse(node2.isHook());
817:       assertFalse(node2.hasOneChild());
818:       assertFalse(node2.isTry());
819:       assertTrue(node2.isString());
820:       assertFalse(node2.isLabel());
821:       assertFalse(node2.isReturn());
822:       assertFalse(node2.hasChildren());
823:       assertFalse(node2.isDec());
824:       assertEquals((-1), node2.getSourcePosition());
825:       assertFalse(node2.isAssign());
826:       assertFalse(node2.isTypeOf());
827:       assertFalse(node2.isOr());
828:       assertFalse(node2.isNumber());
829:       assertFalse(node2.hasMoreThanOneChild());
830:       assertFalse(node2.isContinue());
831:       assertFalse(node2.isCast());
832:       assertFalse(node2.isGetElem());
833:       assertEquals((-1), node2.getLineno());
834:       assertFalse(node2.isLabelName());
835:       assertFalse(node2.isNew());
836:       assertFalse(node2.isAdd());
837:       assertFalse(node2.isVar());
838:       assertFalse(node2.isAssignAdd());
839:       assertFalse(node2.isDo());
840:       assertFalse(node2.isGetProp());
841:       assertFalse(node2.isComma());
842:       assertFalse(node2.isNull());
843:       assertFalse(node2.isFalse());
844:       assertFalse(node2.isAnd());
845:       assertFalse(node2.isObjectLit());
846:       assertFalse(node2.isCall());
847:       assertFalse(node2.isBreak());
848:       assertFalse(node2.isName());
849:       assertFalse(node2.isDebugger());
850:       assertFalse(node2.isVoid());
851:       assertFalse(node2.isExprResult());
852:       assertFalse(node2.isNot());
853:       assertFalse(node2.isWhile());
854:       assertEquals(56, Node.CHANGE_TIME);
855:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
856:       assertEquals(29, Node.JSDOC_INFO_PROP);
857:       assertEquals(47, Node.IS_DISPATCHER);
858:       assertEquals(37, Node.OPT_ARG_NAME);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(2, Node.POST_FLAG);
861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
862:       assertEquals(43, Node.IS_CONSTANT_NAME);
863:       assertEquals(54, Node.SLASH_V);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       assertEquals(46, Node.IS_NAMESPACE);
867:       assertEquals(51, Node.STATIC_SOURCE_FILE);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(50, Node.FREE_CALL);
870:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
874:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
875:       assertEquals(40, Node.ORIGINALNAME_PROP);
876:       assertEquals(4095, Node.COLUMN_MASK);
877:       assertEquals(30, Node.VAR_ARGS_NAME);
878:       assertEquals(36, Node.QUOTED_PROP);
879:       assertEquals(15, Node.NO_SIDE_EFFECTS);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(49, Node.DIRECT_EVAL);
882:       assertEquals(57, Node.LAST_PROP);
883:       assertEquals(53, Node.INPUT_ID);
884:       assertEquals(57, Node.REFLECTED_OBJECT);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(55, Node.INFERRED_FUNCTION);
887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(8, Node.FLAG_NO_THROWS);
890:       assertEquals(32, Node.INCRDECR_PROP);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(37, Node.OPT_ARG_NAME);
893:       assertEquals(1, Node.DECR_FLAG);
894:       assertEquals(30, Node.VAR_ARGS_NAME);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(57, Node.LAST_PROP);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertEquals(53, Node.INPUT_ID);
901:       assertEquals(52, Node.LENGTH);
902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
903:       assertEquals(15, Node.NO_SIDE_EFFECTS);
904:       assertEquals(29, Node.JSDOC_INFO_PROP);
905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
906:       assertEquals(49, Node.DIRECT_EVAL);
907:       assertEquals(55, Node.INFERRED_FUNCTION);
908:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
909:       assertEquals(56, Node.CHANGE_TIME);
910:       assertEquals(36, Node.QUOTED_PROP);
911:       assertEquals(57, Node.REFLECTED_OBJECT);
912:       assertEquals(48, Node.DIRECTIVES);
913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
914:       assertEquals(8, Node.FLAG_NO_THROWS);
915:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(4095, Node.COLUMN_MASK);
918:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
919:       assertEquals(54, Node.SLASH_V);
920:       assertEquals(40, Node.ORIGINALNAME_PROP);
921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
922:       assertEquals(50, Node.FREE_CALL);
923:       assertEquals(43, Node.IS_CONSTANT_NAME);
924:       assertEquals(51, Node.STATIC_SOURCE_FILE);
925:       assertEquals(46, Node.IS_NAMESPACE);
926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
929:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
930:       assertEquals(8, Node.FLAG_NO_THROWS);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(40, Node.ORIGINALNAME_PROP);
934:       assertEquals(48, Node.DIRECTIVES);
935:       assertEquals(43, Node.IS_CONSTANT_NAME);
936:       assertEquals(12, Node.COLUMN_BITS);
937:       assertEquals(54, Node.SLASH_V);
938:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
939:       assertEquals(51, Node.STATIC_SOURCE_FILE);
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
942:       assertEquals(1, Node.DECR_FLAG);
943:       assertEquals(29, Node.JSDOC_INFO_PROP);
944:       assertEquals(56, Node.CHANGE_TIME);
945:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
946:       assertEquals(2, Node.POST_FLAG);
947:       assertEquals(47, Node.IS_DISPATCHER);
948:       assertEquals(46, Node.IS_NAMESPACE);
949:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
951:       assertEquals(37, Node.OPT_ARG_NAME);
952:       assertEquals(30, Node.VAR_ARGS_NAME);
953:       assertEquals(49, Node.DIRECT_EVAL);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(36, Node.QUOTED_PROP);
956:       assertEquals(52, Node.LENGTH);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(39, Node.EMPTY_BLOCK);
960:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
961:       assertEquals(15, Node.NO_SIDE_EFFECTS);
962:       assertNotSame(node0, node1);
963:       assertSame(node0, node2);
964:       assertNotSame(node1, node0);
965:       assertNotSame(node1, node2);
966:       assertSame(node2, node0);
967:       assertNotSame(node2, node1);
968:       assertNotNull(node2);
969:       assertFalse(node0.equals((Object)node1));
970:       assertFalse(node1.equals((Object)node0));
971:       assertFalse(node2.equals((Object)node1));
972:       
973:       int int0 = node2.getChangeTime();
974:       assertEquals(0, int0);
975:       assertFalse(node0.isGetProp());
976:       assertFalse(node0.isComma());
977:       assertFalse(node0.isThis());
978:       assertFalse(node0.isFalse());
979:       assertFalse(node0.isAnd());
980:       assertFalse(node0.isWith());
981:       assertFalse(node0.isInstanceOf());
982:       assertFalse(node0.isBreak());
983:       assertFalse(node0.isExprResult());
984:       assertFalse(node0.isThrow());
985:       assertFalse(node0.isIn());
986:       assertFalse(node0.isInc());
987:       assertFalse(node0.isOr());
988:       assertFalse(node0.isDec());
989:       assertEquals((-1), node0.getSourcePosition());
990:       assertFalse(node0.hasChildren());
991:       assertFalse(node0.isReturn());
992:       assertFalse(node0.isGetElem());
993:       assertFalse(node0.isContinue());
994:       assertFalse(node0.isDelProp());
995:       assertFalse(node0.isAssign());
996:       assertFalse(node0.isTypeOf());
997:       assertFalse(node0.isCast());
998:       assertFalse(node0.isDebugger());
999:       assertFalse(node0.isWhile());
1000:       assertFalse(node0.isObjectLit());
1001:       assertFalse(node0.isNot());
1002:       assertEquals(0, node0.getChildCount());
1003:       assertFalse(node0.isNull());
1004:       assertFalse(node0.isParamList());
1005:       assertEquals(40, node0.getType());
1006:       assertFalse(node0.isStringKey());
1007:       assertFalse(node0.isName());
1008:       assertFalse(node0.isRegExp());
1009:       assertFalse(node0.isCall());
1010:       assertFalse(node0.isCatch());
1011:       assertFalse(node0.isNew());
1012:       assertFalse(node0.isAdd());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isVoid());
1015:       assertFalse(node0.isDefaultCase());
1016:       assertFalse(node0.isTrue());
1017:       assertFalse(node0.isVar());
1018:       assertFalse(node0.isDo());
1019:       assertFalse(node0.isSetterDef());
1020:       assertFalse(node0.isEmpty());
1021:       assertFalse(node0.isLabel());
1022:       assertFalse(node0.isAssignAdd());
1023:       assertEquals((-1), node0.getLineno());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isNE());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isLabelName());
1028:       assertFalse(node0.isArrayLit());
1029:       assertFalse(node0.hasMoreThanOneChild());
1030:       assertFalse(node0.isBlock());
1031:       assertTrue(node0.isString());
1032:       assertEquals((-1), node0.getCharno());
1033:       assertFalse(node0.isTry());
1034:       assertFalse(node0.isHook());
1035:       assertFalse(node0.isSwitch());
1036:       assertFalse(node0.isCase());
1037:       assertFalse(node0.isGetterDef());
1038:       assertFalse(node0.isNumber());
1039:       assertFalse(node0.hasOneChild());
1040:       assertFalse(node0.isScript());
1041:       assertFalse(node1.isCatch());
1042:       assertEquals(40, node1.getType());
1043:       assertFalse(node1.isDefaultCase());
1044:       assertEquals(0, node1.getChildCount());
1045:       assertFalse(node1.isFunction());
1046:       assertFalse(node1.isRegExp());
1047:       assertFalse(node1.isArrayLit());
1048:       assertFalse(node1.isStringKey());
1049:       assertFalse(node1.isFor());
1050:       assertFalse(node1.isTry());
1051:       assertTrue(node1.isString());
1052:       assertFalse(node1.isDebugger());
1053:       assertFalse(node1.isParamList());
1054:       assertFalse(node1.isGetterDef());
1055:       assertFalse(node1.hasMoreThanOneChild());
1056:       assertFalse(node1.isContinue());
1057:       assertEquals((-1), node1.getLineno());
1058:       assertFalse(node1.isCase());
1059:       assertFalse(node1.isBlock());
1060:       assertFalse(node1.isThrow());
1061:       assertFalse(node1.isIf());
1062:       assertFalse(node1.isSetterDef());
1063:       assertFalse(node1.isNE());
1064:       assertFalse(node1.isInc());
1065:       assertFalse(node1.isIn());
1066:       assertFalse(node1.isAnd());
1067:       assertFalse(node1.isInstanceOf());
1068:       assertFalse(node1.isComma());
1069:       assertFalse(node1.isBreak());
1070:       assertFalse(node1.isExprResult());
1071:       assertFalse(node1.isThis());
1072:       assertFalse(node1.isWith());
1073:       assertFalse(node1.isFalse());
1074:       assertFalse(node1.isCast());
1075:       assertFalse(node1.hasOneChild());
1076:       assertFalse(node1.isHook());
1077:       assertFalse(node1.isLabelName());
1078:       assertFalse(node1.isSwitch());
1079:       assertEquals((-1), node1.getSourcePosition());
1080:       assertFalse(node1.isGetProp());
1081:       assertEquals((-1), node1.getCharno());
1082:       assertFalse(node1.isScript());
1083:       assertFalse(node1.isNot());
1084:       assertFalse(node1.isNumber());
1085:       assertFalse(node1.isObjectLit());
1086:       assertFalse(node1.isReturn());
1087:       assertFalse(node1.isAssignAdd());
1088:       assertFalse(node1.isDo());
1089:       assertFalse(node1.isWhile());
1090:       assertFalse(node1.hasChildren());
1091:       assertFalse(node1.isAssign());
1092:       assertFalse(node1.isLabel());
1093:       assertFalse(node1.isDec());
1094:       assertFalse(node1.isTypeOf());
1095:       assertFalse(node1.isVar());
1096:       assertFalse(node1.isGetElem());
1097:       assertFalse(node1.isCall());
1098:       assertFalse(node1.isNew());
1099:       assertFalse(node1.isVoid());
1100:       assertFalse(node1.isName());
1101:       assertFalse(node1.isDelProp());
1102:       assertFalse(node1.isTrue());
1103:       assertFalse(node1.isNull());
1104:       assertFalse(node1.isAdd());
1105:       assertFalse(node1.isOr());
1106:       assertFalse(node1.isEmpty());
1107:       assertFalse(node2.isNE());
1108:       assertFalse(node2.isIn());
1109:       assertFalse(node2.isGetterDef());
1110:       assertFalse(node2.isArrayLit());
1111:       assertFalse(node2.isIf());
1112:       assertFalse(node2.isDelProp());
1113:       assertFalse(node2.isSwitch());
1114:       assertFalse(node2.isInc());
1115:       assertFalse(node2.isTrue());
1116:       assertFalse(node2.isFunction());
1117:       assertFalse(node2.isThrow());
1118:       assertFalse(node2.isEmpty());
1119:       assertEquals(40, node2.getType());
1120:       assertFalse(node2.isDefaultCase());
1121:       assertFalse(node2.isParamList());
1122:       assertFalse(node2.isThis());
1123:       assertFalse(node2.isSetterDef());
1124:       assertEquals(0, node2.getChildCount());
1125:       assertFalse(node2.isInstanceOf());
1126:       assertFalse(node2.isCatch());
1127:       assertFalse(node2.isStringKey());
1128:       assertEquals((-1), node2.getCharno());
1129:       assertFalse(node2.isScript());
1130:       assertFalse(node2.isBlock());
1131:       assertFalse(node2.isRegExp());
1132:       assertFalse(node2.isWith());
1133:       assertFalse(node2.isCase());
1134:       assertFalse(node2.isFor());
1135:       assertFalse(node2.isHook());
1136:       assertFalse(node2.hasOneChild());
1137:       assertFalse(node2.isTry());
1138:       assertTrue(node2.isString());
1139:       assertFalse(node2.isLabel());
1140:       assertFalse(node2.isReturn());
1141:       assertFalse(node2.hasChildren());
1142:       assertFalse(node2.isDec());
1143:       assertEquals((-1), node2.getSourcePosition());
1144:       assertFalse(node2.isAssign());
1145:       assertFalse(node2.isTypeOf());
1146:       assertFalse(node2.isOr());
1147:       assertFalse(node2.isNumber());
1148:       assertFalse(node2.hasMoreThanOneChild());
1149:       assertFalse(node2.isContinue());
1150:       assertFalse(node2.isCast());
1151:       assertFalse(node2.isGetElem());
1152:       assertEquals((-1), node2.getLineno());
1153:       assertFalse(node2.isLabelName());
1154:       assertFalse(node2.isNew());
1155:       assertFalse(node2.isAdd());
1156:       assertFalse(node2.isVar());
1157:       assertFalse(node2.isAssignAdd());
1158:       assertFalse(node2.isDo());
1159:       assertFalse(node2.isGetProp());
1160:       assertFalse(node2.isComma());
1161:       assertFalse(node2.isNull());
1162:       assertFalse(node2.isFalse());
1163:       assertFalse(node2.isAnd());
1164:       assertFalse(node2.isObjectLit());
1165:       assertFalse(node2.isCall());
1166:       assertFalse(node2.isBreak());
1167:       assertFalse(node2.isName());
1168:       assertFalse(node2.isDebugger());
1169:       assertFalse(node2.isVoid());
1170:       assertFalse(node2.isExprResult());
1171:       assertFalse(node2.isNot());
1172:       assertFalse(node2.isWhile());
1173:       assertEquals(56, Node.CHANGE_TIME);
1174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1175:       assertEquals(29, Node.JSDOC_INFO_PROP);
1176:       assertEquals(47, Node.IS_DISPATCHER);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(12, Node.COLUMN_BITS);
1179:       assertEquals(2, Node.POST_FLAG);
1180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1181:       assertEquals(43, Node.IS_CONSTANT_NAME);
1182:       assertEquals(54, Node.SLASH_V);
1183:       assertEquals(1, Node.DECR_FLAG);
1184:       assertEquals(32, Node.INCRDECR_PROP);
1185:       assertEquals(46, Node.IS_NAMESPACE);
1186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1188:       assertEquals(50, Node.FREE_CALL);
1189:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1190:       assertEquals(39, Node.EMPTY_BLOCK);
1191:       assertEquals(48, Node.DIRECTIVES);
1192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1194:       assertEquals(40, Node.ORIGINALNAME_PROP);
1195:       assertEquals(4095, Node.COLUMN_MASK);
1196:       assertEquals(30, Node.VAR_ARGS_NAME);
1197:       assertEquals(36, Node.QUOTED_PROP);
1198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1199:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1200:       assertEquals(49, Node.DIRECT_EVAL);
1201:       assertEquals(57, Node.LAST_PROP);
1202:       assertEquals(53, Node.INPUT_ID);
1203:       assertEquals(57, Node.REFLECTED_OBJECT);
1204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1205:       assertEquals(55, Node.INFERRED_FUNCTION);
1206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1207:       assertEquals(52, Node.LENGTH);
1208:       assertEquals(8, Node.FLAG_NO_THROWS);
1209:       assertEquals(32, Node.INCRDECR_PROP);
1210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1211:       assertEquals(37, Node.OPT_ARG_NAME);
1212:       assertEquals(1, Node.DECR_FLAG);
1213:       assertEquals(30, Node.VAR_ARGS_NAME);
1214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1215:       assertEquals(57, Node.LAST_PROP);
1216:       assertEquals(47, Node.IS_DISPATCHER);
1217:       assertEquals(2, Node.POST_FLAG);
1218:       assertEquals(12, Node.COLUMN_BITS);
1219:       assertEquals(53, Node.INPUT_ID);
1220:       assertEquals(52, Node.LENGTH);
1221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1223:       assertEquals(29, Node.JSDOC_INFO_PROP);
1224:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1225:       assertEquals(49, Node.DIRECT_EVAL);
1226:       assertEquals(55, Node.INFERRED_FUNCTION);
1227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1228:       assertEquals(56, Node.CHANGE_TIME);
1229:       assertEquals(36, Node.QUOTED_PROP);
1230:       assertEquals(57, Node.REFLECTED_OBJECT);
1231:       assertEquals(48, Node.DIRECTIVES);
1232:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1233:       assertEquals(8, Node.FLAG_NO_THROWS);
1234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1235:       assertEquals(39, Node.EMPTY_BLOCK);
1236:       assertEquals(4095, Node.COLUMN_MASK);
1237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1238:       assertEquals(54, Node.SLASH_V);
1239:       assertEquals(40, Node.ORIGINALNAME_PROP);
1240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1241:       assertEquals(50, Node.FREE_CALL);
1242:       assertEquals(43, Node.IS_CONSTANT_NAME);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(46, Node.IS_NAMESPACE);
1245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1246:       assertEquals(50, Node.FREE_CALL);
1247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1249:       assertEquals(8, Node.FLAG_NO_THROWS);
1250:       assertEquals(57, Node.REFLECTED_OBJECT);
1251:       assertEquals(4095, Node.COLUMN_MASK);
1252:       assertEquals(40, Node.ORIGINALNAME_PROP);
1253:       assertEquals(48, Node.DIRECTIVES);
1254:       assertEquals(43, Node.IS_CONSTANT_NAME);
1255:       assertEquals(12, Node.COLUMN_BITS);
1256:       assertEquals(54, Node.SLASH_V);
1257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1259:       assertEquals(32, Node.INCRDECR_PROP);
1260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1261:       assertEquals(1, Node.DECR_FLAG);
1262:       assertEquals(29, Node.JSDOC_INFO_PROP);
1263:       assertEquals(56, Node.CHANGE_TIME);
1264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1265:       assertEquals(2, Node.POST_FLAG);
1266:       assertEquals(47, Node.IS_DISPATCHER);
1267:       assertEquals(46, Node.IS_NAMESPACE);
1268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1270:       assertEquals(37, Node.OPT_ARG_NAME);
1271:       assertEquals(30, Node.VAR_ARGS_NAME);
1272:       assertEquals(49, Node.DIRECT_EVAL);
1273:       assertEquals(57, Node.LAST_PROP);
1274:       assertEquals(36, Node.QUOTED_PROP);
1275:       assertEquals(52, Node.LENGTH);
1276:       assertEquals(53, Node.INPUT_ID);
1277:       assertEquals(55, Node.INFERRED_FUNCTION);
1278:       assertEquals(39, Node.EMPTY_BLOCK);
1279:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1281:       assertNotSame(node0, node1);
1282:       assertSame(node0, node2);
1283:       assertNotSame(node1, node0);
1284:       assertNotSame(node1, node2);
1285:       assertSame(node2, node0);
1286:       assertNotSame(node2, node1);
1287:       assertFalse(node0.equals((Object)node1));
1288:       assertFalse(node1.equals((Object)node0));
1289:       assertFalse(node1.equals((Object)node2));
1290:       assertFalse(node2.equals((Object)node1));
1291:       
1292:       Iterable<Node> iterable0 = node1.children();
1293:       assertFalse(node0.isGetProp());
1294:       assertFalse(node0.isComma());
1295:       assertFalse(node0.isThis());
1296:       assertFalse(node0.isFalse());
1297:       assertFalse(node0.isAnd());
1298:       assertFalse(node0.isWith());
1299:       assertFalse(node0.isInstanceOf());
1300:       assertFalse(node0.isBreak());
1301:       assertFalse(node0.isExprResult());
1302:       assertFalse(node0.isThrow());
1303:       assertFalse(node0.isIn());
1304:       assertFalse(node0.isInc());
1305:       assertFalse(node0.isOr());
1306:       assertFalse(node0.isDec());
1307:       assertEquals((-1), node0.getSourcePosition());
1308:       assertFalse(node0.hasChildren());
1309:       assertFalse(node0.isReturn());
1310:       assertFalse(node0.isGetElem());
1311:       assertFalse(node0.isContinue());
1312:       assertFalse(node0.isDelProp());
1313:       assertFalse(node0.isAssign());
1314:       assertFalse(node0.isTypeOf());
1315:       assertFalse(node0.isCast());
1316:       assertFalse(node0.isDebugger());
1317:       assertFalse(node0.isWhile());
1318:       assertFalse(node0.isObjectLit());
1319:       assertFalse(node0.isNot());
1320:       assertEquals(0, node0.getChildCount());
1321:       assertFalse(node0.isNull());
1322:       assertFalse(node0.isParamList());
1323:       assertEquals(40, node0.getType());
1324:       assertFalse(node0.isStringKey());
1325:       assertFalse(node0.isName());
1326:       assertFalse(node0.isRegExp());
1327:       assertFalse(node0.isCall());
1328:       assertFalse(node0.isCatch());
1329:       assertFalse(node0.isNew());
1330:       assertFalse(node0.isAdd());
1331:       assertFalse(node0.isFunction());
1332:       assertFalse(node0.isVoid());
1333:       assertFalse(node0.isDefaultCase());
1334:       assertFalse(node0.isTrue());
1335:       assertFalse(node0.isVar());
1336:       assertFalse(node0.isDo());
1337:       assertFalse(node0.isSetterDef());
1338:       assertFalse(node0.isEmpty());
1339:       assertFalse(node0.isLabel());
1340:       assertFalse(node0.isAssignAdd());
1341:       assertEquals((-1), node0.getLineno());
1342:       assertFalse(node0.isIf());
1343:       assertFalse(node0.isNE());
1344:       assertFalse(node0.isFor());
1345:       assertFalse(node0.isLabelName());
1346:       assertFalse(node0.isArrayLit());
1347:       assertFalse(node0.hasMoreThanOneChild());
1348:       assertFalse(node0.isBlock());
1349:       assertTrue(node0.isString());
1350:       assertEquals((-1), node0.getCharno());
1351:       assertFalse(node0.isTry());
1352:       assertFalse(node0.isHook());
1353:       assertFalse(node0.isSwitch());
1354:       assertFalse(node0.isCase());
1355:       assertFalse(node0.isGetterDef());
1356:       assertFalse(node0.isNumber());
1357:       assertFalse(node0.hasOneChild());
1358:       assertFalse(node0.isScript());
1359:       assertFalse(node1.isCatch());
1360:       assertEquals(40, node1.getType());
1361:       assertFalse(node1.isDefaultCase());
1362:       assertEquals(0, node1.getChildCount());
1363:       assertFalse(node1.isFunction());
1364:       assertFalse(node1.isRegExp());
1365:       assertFalse(node1.isArrayLit());
1366:       assertFalse(node1.isStringKey());
1367:       assertFalse(node1.isFor());
1368:       assertFalse(node1.isTry());
1369:       assertTrue(node1.isString());
1370:       assertFalse(node1.isDebugger());
1371:       assertFalse(node1.isParamList());
1372:       assertFalse(node1.isGetterDef());
1373:       assertFalse(node1.hasMoreThanOneChild());
1374:       assertFalse(node1.isContinue());
1375:       assertEquals((-1), node1.getLineno());
1376:       assertFalse(node1.isCase());
1377:       assertFalse(node1.isBlock());
1378:       assertFalse(node1.isThrow());
1379:       assertFalse(node1.isIf());
1380:       assertFalse(node1.isSetterDef());
1381:       assertFalse(node1.isNE());
1382:       assertFalse(node1.isInc());
1383:       assertFalse(node1.isIn());
1384:       assertFalse(node1.isAnd());
1385:       assertFalse(node1.isInstanceOf());
1386:       assertFalse(node1.isComma());
1387:       assertFalse(node1.isBreak());
1388:       assertFalse(node1.isExprResult());
1389:       assertFalse(node1.isThis());
1390:       assertFalse(node1.isWith());
1391:       assertFalse(node1.isFalse());
1392:       assertFalse(node1.isCast());
1393:       assertFalse(node1.hasOneChild());
1394:       assertFalse(node1.isHook());
1395:       assertFalse(node1.isLabelName());
1396:       assertFalse(node1.isSwitch());
1397:       assertEquals((-1), node1.getSourcePosition());
1398:       assertFalse(node1.isGetProp());
1399:       assertEquals((-1), node1.getCharno());
1400:       assertFalse(node1.isScript());
1401:       assertFalse(node1.isNot());
1402:       assertFalse(node1.isNumber());
1403:       assertFalse(node1.isObjectLit());
1404:       assertFalse(node1.isReturn());
1405:       assertFalse(node1.isAssignAdd());
1406:       assertFalse(node1.isDo());
1407:       assertFalse(node1.isWhile());
1408:       assertFalse(node1.hasChildren());
1409:       assertFalse(node1.isAssign());
1410:       assertFalse(node1.isLabel());
1411:       assertFalse(node1.isDec());
1412:       assertFalse(node1.isTypeOf());
1413:       assertFalse(node1.isVar());
1414:       assertFalse(node1.isGetElem());
1415:       assertFalse(node1.isCall());
1416:       assertFalse(node1.isNew());
1417:       assertFalse(node1.isVoid());
1418:       assertFalse(node1.isName());
1419:       assertFalse(node1.isDelProp());
1420:       assertFalse(node1.isTrue());
1421:       assertFalse(node1.isNull());
1422:       assertFalse(node1.isAdd());
1423:       assertFalse(node1.isOr());
1424:       assertFalse(node1.isEmpty());
1425:       assertEquals(56, Node.CHANGE_TIME);
1426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1427:       assertEquals(29, Node.JSDOC_INFO_PROP);
1428:       assertEquals(47, Node.IS_DISPATCHER);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(12, Node.COLUMN_BITS);
1431:       assertEquals(2, Node.POST_FLAG);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(43, Node.IS_CONSTANT_NAME);
1434:       assertEquals(54, Node.SLASH_V);
1435:       assertEquals(1, Node.DECR_FLAG);
1436:       assertEquals(32, Node.INCRDECR_PROP);
1437:       assertEquals(46, Node.IS_NAMESPACE);
1438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1440:       assertEquals(50, Node.FREE_CALL);
1441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1442:       assertEquals(39, Node.EMPTY_BLOCK);
1443:       assertEquals(48, Node.DIRECTIVES);
1444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1446:       assertEquals(40, Node.ORIGINALNAME_PROP);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(30, Node.VAR_ARGS_NAME);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1451:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1452:       assertEquals(49, Node.DIRECT_EVAL);
1453:       assertEquals(57, Node.LAST_PROP);
1454:       assertEquals(53, Node.INPUT_ID);
1455:       assertEquals(57, Node.REFLECTED_OBJECT);
1456:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1457:       assertEquals(55, Node.INFERRED_FUNCTION);
1458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1459:       assertEquals(52, Node.LENGTH);
1460:       assertEquals(8, Node.FLAG_NO_THROWS);
1461:       assertEquals(32, Node.INCRDECR_PROP);
1462:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1463:       assertEquals(37, Node.OPT_ARG_NAME);
1464:       assertEquals(1, Node.DECR_FLAG);
1465:       assertEquals(30, Node.VAR_ARGS_NAME);
1466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1467:       assertEquals(57, Node.LAST_PROP);
1468:       assertEquals(47, Node.IS_DISPATCHER);
1469:       assertEquals(2, Node.POST_FLAG);
1470:       assertEquals(12, Node.COLUMN_BITS);
1471:       assertEquals(53, Node.INPUT_ID);
1472:       assertEquals(52, Node.LENGTH);
1473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1474:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1475:       assertEquals(29, Node.JSDOC_INFO_PROP);
1476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1477:       assertEquals(49, Node.DIRECT_EVAL);
1478:       assertEquals(55, Node.INFERRED_FUNCTION);
1479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1480:       assertEquals(56, Node.CHANGE_TIME);
1481:       assertEquals(36, Node.QUOTED_PROP);
1482:       assertEquals(57, Node.REFLECTED_OBJECT);
1483:       assertEquals(48, Node.DIRECTIVES);
1484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1485:       assertEquals(8, Node.FLAG_NO_THROWS);
1486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1487:       assertEquals(39, Node.EMPTY_BLOCK);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1490:       assertEquals(54, Node.SLASH_V);
1491:       assertEquals(40, Node.ORIGINALNAME_PROP);
1492:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1493:       assertEquals(50, Node.FREE_CALL);
1494:       assertEquals(43, Node.IS_CONSTANT_NAME);
1495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1496:       assertEquals(46, Node.IS_NAMESPACE);
1497:       assertNotSame(node0, node1);
1498:       assertSame(node0, node2);
1499:       assertNotSame(node1, node0);
1500:       assertNotSame(node1, node2);
1501:       assertFalse(iterable0.contains(node0));
1502:       assertNotNull(iterable0);
1503:       assertFalse(node0.equals((Object)node1));
1504:       assertFalse(node1.equals((Object)node0));
1505:       assertFalse(node1.equals((Object)node2));
1506:       
1507:       node0.detachChildren();
1508:       assertFalse(node0.isGetProp());
1509:       assertFalse(node0.isComma());
1510:       assertFalse(node0.isThis());
1511:       assertFalse(node0.isFalse());
1512:       assertFalse(node0.isAnd());
1513:       assertFalse(node0.isWith());
1514:       assertFalse(node0.isInstanceOf());
1515:       assertFalse(node0.isBreak());
1516:       assertFalse(node0.isExprResult());
1517:       assertFalse(node0.isThrow());
1518:       assertFalse(node0.isIn());
1519:       assertFalse(node0.isInc());
1520:       assertFalse(node0.isOr());
1521:       assertFalse(node0.isDec());
1522:       assertEquals((-1), node0.getSourcePosition());
1523:       assertFalse(node0.hasChildren());
1524:       assertFalse(node0.isReturn());
1525:       assertFalse(node0.isGetElem());
1526:       assertFalse(node0.isContinue());
1527:       assertFalse(node0.isDelProp());
1528:       assertFalse(node0.isAssign());
1529:       assertFalse(node0.isTypeOf());
1530:       assertFalse(node0.isCast());
1531:       assertFalse(node0.isDebugger());
1532:       assertFalse(node0.isWhile());
1533:       assertFalse(node0.isObjectLit());
1534:       assertFalse(node0.isNot());
1535:       assertEquals(0, node0.getChildCount());
1536:       assertFalse(node0.isNull());
1537:       assertFalse(node0.isParamList());
1538:       assertEquals(40, node0.getType());
1539:       assertFalse(node0.isStringKey());
1540:       assertFalse(node0.isName());
1541:       assertFalse(node0.isRegExp());
1542:       assertFalse(node0.isCall());
1543:       assertFalse(node0.isCatch());
1544:       assertFalse(node0.isNew());
1545:       assertFalse(node0.isAdd());
1546:       assertFalse(node0.isFunction());
1547:       assertFalse(node0.isVoid());
1548:       assertFalse(node0.isDefaultCase());
1549:       assertFalse(node0.isTrue());
1550:       assertFalse(node0.isVar());
1551:       assertFalse(node0.isDo());
1552:       assertFalse(node0.isSetterDef());
1553:       assertFalse(node0.isEmpty());
1554:       assertFalse(node0.isLabel());
1555:       assertFalse(node0.isAssignAdd());
1556:       assertEquals((-1), node0.getLineno());
1557:       assertFalse(node0.isIf());
1558:       assertFalse(node0.isNE());
1559:       assertFalse(node0.isFor());
1560:       assertFalse(node0.isLabelName());
1561:       assertFalse(node0.isArrayLit());
1562:       assertFalse(node0.hasMoreThanOneChild());
1563:       assertFalse(node0.isBlock());
1564:       assertTrue(node0.isString());
1565:       assertEquals((-1), node0.getCharno());
1566:       assertFalse(node0.isTry());
1567:       assertFalse(node0.isHook());
1568:       assertFalse(node0.isSwitch());
1569:       assertFalse(node0.isCase());
1570:       assertFalse(node0.isGetterDef());
1571:       assertFalse(node0.isNumber());
1572:       assertFalse(node0.hasOneChild());
1573:       assertFalse(node0.isScript());
1574:       assertEquals(56, Node.CHANGE_TIME);
1575:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1576:       assertEquals(29, Node.JSDOC_INFO_PROP);
1577:       assertEquals(47, Node.IS_DISPATCHER);
1578:       assertEquals(37, Node.OPT_ARG_NAME);
1579:       assertEquals(12, Node.COLUMN_BITS);
1580:       assertEquals(2, Node.POST_FLAG);
1581:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1582:       assertEquals(43, Node.IS_CONSTANT_NAME);
1583:       assertEquals(54, Node.SLASH_V);
1584:       assertEquals(1, Node.DECR_FLAG);
1585:       assertEquals(32, Node.INCRDECR_PROP);
1586:       assertEquals(46, Node.IS_NAMESPACE);
1587:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1588:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1589:       assertEquals(50, Node.FREE_CALL);
1590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1591:       assertEquals(39, Node.EMPTY_BLOCK);
1592:       assertEquals(48, Node.DIRECTIVES);
1593:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1594:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1595:       assertEquals(40, Node.ORIGINALNAME_PROP);
1596:       assertEquals(4095, Node.COLUMN_MASK);
1597:       assertEquals(30, Node.VAR_ARGS_NAME);
1598:       assertEquals(36, Node.QUOTED_PROP);
1599:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1601:       assertEquals(49, Node.DIRECT_EVAL);
1602:       assertEquals(57, Node.LAST_PROP);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(57, Node.REFLECTED_OBJECT);
1605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1606:       assertEquals(55, Node.INFERRED_FUNCTION);
1607:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1608:       assertEquals(52, Node.LENGTH);
1609:       assertEquals(8, Node.FLAG_NO_THROWS);
1610:       assertNotSame(node0, node1);
1611:       assertSame(node0, node2);
1612:       assertFalse(node0.equals((Object)node1));
1613:       
1614:       boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qrvsqkX5OB");
1615:       assertFalse(boolean1);
1616:       assertTrue(boolean1 == boolean0);
1617:       
1618:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
1619:       assertFalse(node0.isGetProp());
1620:       assertFalse(node0.isComma());
1621:       assertFalse(node0.isThis());
1622:       assertFalse(node0.isFalse());
1623:       assertFalse(node0.isAnd());
1624:       assertFalse(node0.isWith());
1625:       assertFalse(node0.isInstanceOf());
1626:       assertFalse(node0.isBreak());
1627:       assertFalse(node0.isExprResult());
1628:       assertFalse(node0.isThrow());
1629:       assertFalse(node0.isIn());
1630:       assertFalse(node0.isInc());
1631:       assertFalse(node0.isOr());
1632:       assertFalse(node0.isDec());
1633:       assertEquals((-1), node0.getSourcePosition());
1634:       assertFalse(node0.hasChildren());
1635:       assertFalse(node0.isReturn());
1636:       assertFalse(node0.isGetElem());
1637:       assertFalse(node0.isContinue());
1638:       assertFalse(node0.isDelProp());
1639:       assertFalse(node0.isAssign());
1640:       assertFalse(node0.isTypeOf());
1641:       assertFalse(node0.isCast());
1642:       assertFalse(node0.isDebugger());
1643:       assertFalse(node0.isWhile());
1644:       assertFalse(node0.isObjectLit());
1645:       assertFalse(node0.isNot());
1646:       assertEquals(0, node0.getChildCount());
1647:       assertFalse(node0.isNull());
1648:       assertFalse(node0.isParamList());
1649:       assertEquals(40, node0.getType());
1650:       assertFalse(node0.isStringKey());
1651:       assertFalse(node0.isName());
1652:       assertFalse(node0.isRegExp());
1653:       assertFalse(node0.isCall());
1654:       assertFalse(node0.isCatch());
1655:       assertFalse(node0.isNew());
1656:       assertFalse(node0.isAdd());
1657:       assertFalse(node0.isFunction());
1658:       assertFalse(node0.isVoid());
1659:       assertFalse(node0.isDefaultCase());
1660:       assertFalse(node0.isTrue());
1661:       assertFalse(node0.isVar());
1662:       assertFalse(node0.isDo());
1663:       assertFalse(node0.isSetterDef());
1664:       assertFalse(node0.isEmpty());
1665:       assertFalse(node0.isLabel());
1666:       assertFalse(node0.isAssignAdd());
1667:       assertEquals((-1), node0.getLineno());
1668:       assertFalse(node0.isIf());
1669:       assertFalse(node0.isNE());
1670:       assertFalse(node0.isFor());
1671:       assertFalse(node0.isLabelName());
1672:       assertFalse(node0.isArrayLit());
1673:       assertFalse(node0.hasMoreThanOneChild());
1674:       assertFalse(node0.isBlock());
1675:       assertTrue(node0.isString());
1676:       assertEquals((-1), node0.getCharno());
1677:       assertFalse(node0.isTry());
1678:       assertFalse(node0.isHook());
1679:       assertFalse(node0.isSwitch());
1680:       assertFalse(node0.isCase());
1681:       assertFalse(node0.isGetterDef());
1682:       assertFalse(node0.isNumber());
1683:       assertFalse(node0.hasOneChild());
1684:       assertFalse(node0.isScript());
1685:       assertEquals(56, Node.CHANGE_TIME);
1686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1687:       assertEquals(29, Node.JSDOC_INFO_PROP);
1688:       assertEquals(47, Node.IS_DISPATCHER);
1689:       assertEquals(37, Node.OPT_ARG_NAME);
1690:       assertEquals(12, Node.COLUMN_BITS);
1691:       assertEquals(2, Node.POST_FLAG);
1692:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1693:       assertEquals(43, Node.IS_CONSTANT_NAME);
1694:       assertEquals(54, Node.SLASH_V);
1695:       assertEquals(1, Node.DECR_FLAG);
1696:       assertEquals(32, Node.INCRDECR_PROP);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1699:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1700:       assertEquals(50, Node.FREE_CALL);
1701:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1702:       assertEquals(39, Node.EMPTY_BLOCK);
1703:       assertEquals(48, Node.DIRECTIVES);
1704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1705:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1706:       assertEquals(40, Node.ORIGINALNAME_PROP);
1707:       assertEquals(4095, Node.COLUMN_MASK);
1708:       assertEquals(30, Node.VAR_ARGS_NAME);
1709:       assertEquals(36, Node.QUOTED_PROP);
1710:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1711:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1712:       assertEquals(49, Node.DIRECT_EVAL);
1713:       assertEquals(57, Node.LAST_PROP);
1714:       assertEquals(53, Node.INPUT_ID);
1715:       assertEquals(57, Node.REFLECTED_OBJECT);
1716:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1717:       assertEquals(55, Node.INFERRED_FUNCTION);
1718:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1719:       assertEquals(52, Node.LENGTH);
1720:       assertEquals(8, Node.FLAG_NO_THROWS);
1721:       assertNotNull(node_FileLevelJsDocBuilder0);
1722:       assertFalse(node0.equals((Object)node1));
1723:       
1724:       node_FileLevelJsDocBuilder0.append("qrvsqkX5OB");
1725:       assertFalse(node0.isGetProp());
1726:       assertFalse(node0.isComma());
1727:       assertFalse(node0.isThis());
1728:       assertFalse(node0.isFalse());
1729:       assertFalse(node0.isAnd());
1730:       assertFalse(node0.isWith());
1731:       assertFalse(node0.isInstanceOf());
1732:       assertFalse(node0.isBreak());
1733:       assertFalse(node0.isExprResult());
1734:       assertFalse(node0.isThrow());
1735:       assertFalse(node0.isIn());
1736:       assertFalse(node0.isInc());
1737:       assertFalse(node0.isOr());
1738:       assertFalse(node0.isDec());
1739:       assertEquals((-1), node0.getSourcePosition());
1740:       assertFalse(node0.hasChildren());
1741:       assertFalse(node0.isReturn());
1742:       assertFalse(node0.isGetElem());
1743:       assertFalse(node0.isContinue());
1744:       assertFalse(node0.isDelProp());
1745:       assertFalse(node0.isAssign());
1746:       assertFalse(node0.isTypeOf());
1747:       assertFalse(node0.isCast());
1748:       assertFalse(node0.isDebugger());
1749:       assertFalse(node0.isWhile());
1750:       assertFalse(node0.isObjectLit());
1751:       assertFalse(node0.isNot());
1752:       assertEquals(0, node0.getChildCount());
1753:       assertFalse(node0.isNull());
1754:       assertFalse(node0.isParamList());
1755:       assertEquals(40, node0.getType());
1756:       assertFalse(node0.isStringKey());
1757:       assertFalse(node0.isName());
1758:       assertFalse(node0.isRegExp());
1759:       assertFalse(node0.isCall());
1760:       assertFalse(node0.isCatch());
1761:       assertFalse(node0.isNew());
1762:       assertFalse(node0.isAdd());
1763:       assertFalse(node0.isFunction());
1764:       assertFalse(node0.isVoid());
1765:       assertFalse(node0.isDefaultCase());
1766:       assertFalse(node0.isTrue());
1767:       assertFalse(node0.isVar());
1768:       assertFalse(node0.isDo());
1769:       assertFalse(node0.isSetterDef());
1770:       assertFalse(node0.isEmpty());
1771:       assertFalse(node0.isLabel());
1772:       assertFalse(node0.isAssignAdd());
1773:       assertEquals((-1), node0.getLineno());
1774:       assertFalse(node0.isIf());
1775:       assertFalse(node0.isNE());
1776:       assertFalse(node0.isFor());
1777:       assertFalse(node0.isLabelName());
1778:       assertFalse(node0.isArrayLit());
1779:       assertFalse(node0.hasMoreThanOneChild());
1780:       assertFalse(node0.isBlock());
1781:       assertTrue(node0.isString());
1782:       assertEquals((-1), node0.getCharno());
1783:       assertFalse(node0.isTry());
1784:       assertFalse(node0.isHook());
1785:       assertFalse(node0.isSwitch());
1786:       assertFalse(node0.isCase());
1787:       assertFalse(node0.isGetterDef());
1788:       assertFalse(node0.isNumber());
1789:       assertFalse(node0.hasOneChild());
1790:       assertFalse(node0.isScript());
1791:       assertEquals(56, Node.CHANGE_TIME);
1792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1793:       assertEquals(29, Node.JSDOC_INFO_PROP);
1794:       assertEquals(47, Node.IS_DISPATCHER);
1795:       assertEquals(37, Node.OPT_ARG_NAME);
1796:       assertEquals(12, Node.COLUMN_BITS);
1797:       assertEquals(2, Node.POST_FLAG);
1798:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1799:       assertEquals(43, Node.IS_CONSTANT_NAME);
1800:       assertEquals(54, Node.SLASH_V);
1801:       assertEquals(1, Node.DECR_FLAG);
1802:       assertEquals(32, Node.INCRDECR_PROP);
1803:       assertEquals(46, Node.IS_NAMESPACE);
1804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1805:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1806:       assertEquals(50, Node.FREE_CALL);
1807:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1808:       assertEquals(39, Node.EMPTY_BLOCK);
1809:       assertEquals(48, Node.DIRECTIVES);
1810:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1811:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1812:       assertEquals(40, Node.ORIGINALNAME_PROP);
1813:       assertEquals(4095, Node.COLUMN_MASK);
1814:       assertEquals(30, Node.VAR_ARGS_NAME);
1815:       assertEquals(36, Node.QUOTED_PROP);
1816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1818:       assertEquals(49, Node.DIRECT_EVAL);
1819:       assertEquals(57, Node.LAST_PROP);
1820:       assertEquals(53, Node.INPUT_ID);
1821:       assertEquals(57, Node.REFLECTED_OBJECT);
1822:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1823:       assertEquals(55, Node.INFERRED_FUNCTION);
1824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1825:       assertEquals(52, Node.LENGTH);
1826:       assertEquals(8, Node.FLAG_NO_THROWS);
1827:       assertNotSame(node0, node1);
1828:       assertSame(node0, node2);
1829:       assertFalse(node0.equals((Object)node1));
1830:       
1831:       boolean boolean2 = node0.isCatch();
1832:       assertFalse(boolean2);
1833:       assertFalse(node0.isGetProp());
1834:       assertFalse(node0.isComma());
1835:       assertFalse(node0.isThis());
1836:       assertFalse(node0.isFalse());
1837:       assertFalse(node0.isAnd());
1838:       assertFalse(node0.isWith());
1839:       assertFalse(node0.isInstanceOf());
1840:       assertFalse(node0.isBreak());
1841:       assertFalse(node0.isExprResult());
1842:       assertFalse(node0.isThrow());
1843:       assertFalse(node0.isIn());
1844:       assertFalse(node0.isInc());
1845:       assertFalse(node0.isOr());
1846:       assertFalse(node0.isDec());
1847:       assertEquals((-1), node0.getSourcePosition());
1848:       assertFalse(node0.hasChildren());
1849:       assertFalse(node0.isReturn());
1850:       assertFalse(node0.isGetElem());
1851:       assertFalse(node0.isContinue());
1852:       assertFalse(node0.isDelProp());
1853:       assertFalse(node0.isAssign());
1854:       assertFalse(node0.isTypeOf());
1855:       assertFalse(node0.isCast());
1856:       assertFalse(node0.isDebugger());
1857:       assertFalse(node0.isWhile());
1858:       assertFalse(node0.isObjectLit());
1859:       assertFalse(node0.isNot());
1860:       assertEquals(0, node0.getChildCount());
1861:       assertFalse(node0.isNull());
1862:       assertFalse(node0.isParamList());
1863:       assertEquals(40, node0.getType());
1864:       assertFalse(node0.isStringKey());
1865:       assertFalse(node0.isName());
1866:       assertFalse(node0.isRegExp());
1867:       assertFalse(node0.isCall());
1868:       assertFalse(node0.isCatch());
1869:       assertFalse(node0.isNew());
1870:       assertFalse(node0.isAdd());
1871:       assertFalse(node0.isFunction());
1872:       assertFalse(node0.isVoid());
1873:       assertFalse(node0.isDefaultCase());
1874:       assertFalse(node0.isTrue());
1875:       assertFalse(node0.isVar());
1876:       assertFalse(node0.isDo());
1877:       assertFalse(node0.isSetterDef());
1878:       assertFalse(node0.isEmpty());
1879:       assertFalse(node0.isLabel());
1880:       assertFalse(node0.isAssignAdd());
1881:       assertEquals((-1), node0.getLineno());
1882:       assertFalse(node0.isIf());
1883:       assertFalse(node0.isNE());
1884:       assertFalse(node0.isFor());
1885:       assertFalse(node0.isLabelName());
1886:       assertFalse(node0.isArrayLit());
1887:       assertFalse(node0.hasMoreThanOneChild());
1888:       assertFalse(node0.isBlock());
1889:       assertTrue(node0.isString());
1890:       assertEquals((-1), node0.getCharno());
1891:       assertFalse(node0.isTry());
1892:       assertFalse(node0.isHook());
1893:       assertFalse(node0.isSwitch());
1894:       assertFalse(node0.isCase());
1895:       assertFalse(node0.isGetterDef());
1896:       assertFalse(node0.isNumber());
1897:       assertFalse(node0.hasOneChild());
1898:       assertFalse(node0.isScript());
1899:       assertEquals(56, Node.CHANGE_TIME);
1900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1901:       assertEquals(29, Node.JSDOC_INFO_PROP);
1902:       assertEquals(47, Node.IS_DISPATCHER);
1903:       assertEquals(37, Node.OPT_ARG_NAME);
1904:       assertEquals(12, Node.COLUMN_BITS);
1905:       assertEquals(2, Node.POST_FLAG);
1906:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1907:       assertEquals(43, Node.IS_CONSTANT_NAME);
1908:       assertEquals(54, Node.SLASH_V);
1909:       assertEquals(1, Node.DECR_FLAG);
1910:       assertEquals(32, Node.INCRDECR_PROP);
1911:       assertEquals(46, Node.IS_NAMESPACE);
1912:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1916:       assertEquals(39, Node.EMPTY_BLOCK);
1917:       assertEquals(48, Node.DIRECTIVES);
1918:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1919:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1920:       assertEquals(40, Node.ORIGINALNAME_PROP);
1921:       assertEquals(4095, Node.COLUMN_MASK);
1922:       assertEquals(30, Node.VAR_ARGS_NAME);
1923:       assertEquals(36, Node.QUOTED_PROP);
1924:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1925:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1926:       assertEquals(49, Node.DIRECT_EVAL);
1927:       assertEquals(57, Node.LAST_PROP);
1928:       assertEquals(53, Node.INPUT_ID);
1929:       assertEquals(57, Node.REFLECTED_OBJECT);
1930:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1931:       assertEquals(55, Node.INFERRED_FUNCTION);
1932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1933:       assertEquals(52, Node.LENGTH);
1934:       assertEquals(8, Node.FLAG_NO_THROWS);
1935:       assertNotSame(node0, node1);
1936:       assertSame(node0, node2);
1937:       assertFalse(node0.equals((Object)node1));
1938:       assertTrue(boolean2 == boolean0);
1939:       assertTrue(boolean2 == boolean1);
1940:       
1941:       JSDocInfo jSDocInfo0 = node2.getJSDocInfo();
1942:       assertFalse(node0.isGetProp());
1943:       assertFalse(node0.isComma());
1944:       assertFalse(node0.isThis());
1945:       assertFalse(node0.isFalse());
1946:       assertFalse(node0.isAnd());
1947:       assertFalse(node0.isWith());
1948:       assertFalse(node0.isInstanceOf());
1949:       assertFalse(node0.isBreak());
1950:       assertFalse(node0.isExprResult());
1951:       assertFalse(node0.isThrow());
1952:       assertFalse(node0.isIn());
1953:       assertFalse(node0.isInc());
1954:       assertFalse(node0.isOr());
1955:       assertFalse(node0.isDec());
1956:       assertEquals((-1), node0.getSourcePosition());
1957:       assertFalse(node0.hasChildren());
1958:       assertFalse(node0.isReturn());
1959:       assertFalse(node0.isGetElem());
1960:       assertFalse(node0.isContinue());
1961:       assertFalse(node0.isDelProp());
1962:       assertFalse(node0.isAssign());
1963:       assertFalse(node0.isTypeOf());
1964:       assertFalse(node0.isCast());
1965:       assertFalse(node0.isDebugger());
1966:       assertFalse(node0.isWhile());
1967:       assertFalse(node0.isObjectLit());
1968:       assertFalse(node0.isNot());
1969:       assertEquals(0, node0.getChildCount());
1970:       assertFalse(node0.isNull());
1971:       assertFalse(node0.isParamList());
1972:       assertEquals(40, node0.getType());
1973:       assertFalse(node0.isStringKey());
1974:       assertFalse(node0.isName());
1975:       assertFalse(node0.isRegExp());
1976:       assertFalse(node0.isCall());
1977:       assertFalse(node0.isCatch());
1978:       assertFalse(node0.isNew());
1979:       assertFalse(node0.isAdd());
1980:       assertFalse(node0.isFunction());
1981:       assertFalse(node0.isVoid());
1982:       assertFalse(node0.isDefaultCase());
1983:       assertFalse(node0.isTrue());
1984:       assertFalse(node0.isVar());
1985:       assertFalse(node0.isDo());
1986:       assertFalse(node0.isSetterDef());
1987:       assertFalse(node0.isEmpty());
1988:       assertFalse(node0.isLabel());
1989:       assertFalse(node0.isAssignAdd());
1990:       assertEquals((-1), node0.getLineno());
1991:       assertFalse(node0.isIf());
1992:       assertFalse(node0.isNE());
1993:       assertFalse(node0.isFor());
1994:       assertFalse(node0.isLabelName());
1995:       assertFalse(node0.isArrayLit());
1996:       assertFalse(node0.hasMoreThanOneChild());
1997:       assertFalse(node0.isBlock());
1998:       assertTrue(node0.isString());
1999:       assertEquals((-1), node0.getCharno());
2000:       assertFalse(node0.isTry());
2001:       assertFalse(node0.isHook());
2002:       assertFalse(node0.isSwitch());
2003:       assertFalse(node0.isCase());
2004:       assertFalse(node0.isGetterDef());
2005:       assertFalse(node0.isNumber());
2006:       assertFalse(node0.hasOneChild());
2007:       assertFalse(node0.isScript());
2008:       assertFalse(node1.isCatch());
2009:       assertEquals(40, node1.getType());
2010:       assertFalse(node1.isDefaultCase());
2011:       assertEquals(0, node1.getChildCount());
2012:       assertFalse(node1.isFunction());
2013:       assertFalse(node1.isRegExp());
2014:       assertFalse(node1.isArrayLit());
2015:       assertFalse(node1.isStringKey());
2016:       assertFalse(node1.isFor());
2017:       assertFalse(node1.isTry());
2018:       assertTrue(node1.isString());
2019:       assertFalse(node1.isDebugger());
2020:       assertFalse(node1.isParamList());
2021:       assertFalse(node1.isGetterDef());
2022:       assertFalse(node1.hasMoreThanOneChild());
2023:       assertFalse(node1.isContinue());
2024:       assertEquals((-1), node1.getLineno());
2025:       assertFalse(node1.isCase());
2026:       assertFalse(node1.isBlock());
2027:       assertFalse(node1.isThrow());
2028:       assertFalse(node1.isIf());
2029:       assertFalse(node1.isSetterDef());
2030:       assertFalse(node1.isNE());
2031:       assertFalse(node1.isInc());
2032:       assertFalse(node1.isIn());
2033:       assertFalse(node1.isAnd());
2034:       assertFalse(node1.isInstanceOf());
2035:       assertFalse(node1.isComma());
2036:       assertFalse(node1.isBreak());
2037:       assertFalse(node1.isExprResult());
2038:       assertFalse(node1.isThis());
2039:       assertFalse(node1.isWith());
2040:       assertFalse(node1.isFalse());
2041:       assertFalse(node1.isCast());
2042:       assertFalse(node1.hasOneChild());
2043:       assertFalse(node1.isHook());
2044:       assertFalse(node1.isLabelName());
2045:       assertFalse(node1.isSwitch());
2046:       assertEquals((-1), node1.getSourcePosition());
2047:       assertFalse(node1.isGetProp());
2048:       assertEquals((-1), node1.getCharno());
2049:       assertFalse(node1.isScript());
2050:       assertFalse(node1.isNot());
2051:       assertFalse(node1.isNumber());
2052:       assertFalse(node1.isObjectLit());
2053:       assertFalse(node1.isReturn());
2054:       assertFalse(node1.isAssignAdd());
2055:       assertFalse(node1.isDo());
2056:       assertFalse(node1.isWhile());
2057:       assertFalse(node1.hasChildren());
2058:       assertFalse(node1.isAssign());
2059:       assertFalse(node1.isLabel());
2060:       assertFalse(node1.isDec());
2061:       assertFalse(node1.isTypeOf());
2062:       assertFalse(node1.isVar());
2063:       assertFalse(node1.isGetElem());
2064:       assertFalse(node1.isCall());
2065:       assertFalse(node1.isNew());
2066:       assertFalse(node1.isVoid());
2067:       assertFalse(node1.isName());
2068:       assertFalse(node1.isDelProp());
2069:       assertFalse(node1.isTrue());
2070:       assertFalse(node1.isNull());
2071:       assertFalse(node1.isAdd());
2072:       assertFalse(node1.isOr());
2073:       assertFalse(node1.isEmpty());
2074:       assertFalse(node2.isNE());
2075:       assertFalse(node2.isIn());
2076:       assertFalse(node2.isGetterDef());
2077:       assertFalse(node2.isArrayLit());
2078:       assertFalse(node2.isIf());
2079:       assertFalse(node2.isDelProp());
2080:       assertFalse(node2.isSwitch());
2081:       assertFalse(node2.isInc());
2082:       assertFalse(node2.isTrue());
2083:       assertFalse(node2.isFunction());
2084:       assertFalse(node2.isThrow());
2085:       assertFalse(node2.isEmpty());
2086:       assertEquals(40, node2.getType());
2087:       assertFalse(node2.isDefaultCase());
2088:       assertFalse(node2.isParamList());
2089:       assertFalse(node2.isThis());
2090:       assertFalse(node2.isSetterDef());
2091:       assertEquals(0, node2.getChildCount());
2092:       assertFalse(node2.isInstanceOf());
2093:       assertFalse(node2.isCatch());
2094:       assertFalse(node2.isStringKey());
2095:       assertEquals((-1), node2.getCharno());
2096:       assertFalse(node2.isScript());
2097:       assertFalse(node2.isBlock());
2098:       assertFalse(node2.isRegExp());
2099:       assertFalse(node2.isWith());
2100:       assertFalse(node2.isCase());
2101:       assertFalse(node2.isFor());
2102:       assertFalse(node2.isHook());
2103:       assertFalse(node2.hasOneChild());
2104:       assertFalse(node2.isTry());
2105:       assertTrue(node2.isString());
2106:       assertFalse(node2.isLabel());
2107:       assertFalse(node2.isReturn());
2108:       assertFalse(node2.hasChildren());
2109:       assertFalse(node2.isDec());
2110:       assertEquals((-1), node2.getSourcePosition());
2111:       assertFalse(node2.isAssign());
2112:       assertFalse(node2.isTypeOf());
2113:       assertFalse(node2.isOr());
2114:       assertFalse(node2.isNumber());
2115:       assertFalse(node2.hasMoreThanOneChild());
2116:       assertFalse(node2.isContinue());
2117:       assertFalse(node2.isCast());
2118:       assertFalse(node2.isGetElem());
2119:       assertEquals((-1), node2.getLineno());
2120:       assertFalse(node2.isLabelName());
2121:       assertFalse(node2.isNew());
2122:       assertFalse(node2.isAdd());
2123:       assertFalse(node2.isVar());
2124:       assertFalse(node2.isAssignAdd());
2125:       assertFalse(node2.isDo());
2126:       assertFalse(node2.isGetProp());
2127:       assertFalse(node2.isComma());
2128:       assertFalse(node2.isNull());
2129:       assertFalse(node2.isFalse());
2130:       assertFalse(node2.isAnd());
2131:       assertFalse(node2.isObjectLit());
2132:       assertFalse(node2.isCall());
2133:       assertFalse(node2.isBreak());
2134:       assertFalse(node2.isName());
2135:       assertFalse(node2.isDebugger());
2136:       assertFalse(node2.isVoid());
2137:       assertFalse(node2.isExprResult());
2138:       assertFalse(node2.isNot());
2139:       assertFalse(node2.isWhile());
2140:       assertNull(jSDocInfo0.getBlockDescription());
2141:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
2142:       assertFalse(jSDocInfo0.isNgInject());
2143:       assertFalse(jSDocInfo0.isExterns());
2144:       assertFalse(jSDocInfo0.isIdGenerator());
2145:       assertFalse(jSDocInfo0.isInterface());
2146:       assertEquals("JSDocInfo", jSDocInfo0.toString());
2147:       assertFalse(jSDocInfo0.isWizaction());
2148:       assertFalse(jSDocInfo0.isOverride());
2149:       assertNull(jSDocInfo0.getVersion());
2150:       assertNull(jSDocInfo0.getLendsName());
2151:       assertFalse(jSDocInfo0.makesDicts());
2152:       assertNull(jSDocInfo0.getDeprecationReason());
2153:       assertFalse(jSDocInfo0.isHidden());
2154:       assertFalse(jSDocInfo0.isExpose());
2155:       assertFalse(jSDocInfo0.isMappedIdGenerator());
2156:       assertFalse(jSDocInfo0.isDeprecated());
2157:       assertFalse(jSDocInfo0.isNoShadow());
2158:       assertFalse(jSDocInfo0.hasThisType());
2159:       assertEquals("qrvsqkX5OB", jSDocInfo0.getLicense());
2160:       assertNull(jSDocInfo0.getVisibility());
2161:       assertFalse(jSDocInfo0.isConstructor());
2162:       assertNull(jSDocInfo0.getFileOverview());
2163:       assertNull(jSDocInfo0.getMeaning());
2164:       assertFalse(jSDocInfo0.isNoSideEffects());
2165:       assertFalse(jSDocInfo0.isNoCompile());
2166:       assertFalse(jSDocInfo0.hasEnumParameterType());
2167:       assertFalse(jSDocInfo0.hasReturnType());
2168:       assertFalse(jSDocInfo0.isNoAlias());
2169:       assertFalse(jSDocInfo0.shouldPreserveTry());
2170:       assertNull(jSDocInfo0.getDescription());
2171:       assertFalse(jSDocInfo0.makesStructs());
2172:       assertFalse(jSDocInfo0.hasBaseType());
2173:       assertEquals(0, jSDocInfo0.getParameterCount());
2174:       assertFalse(jSDocInfo0.isDefine());
2175:       assertFalse(jSDocInfo0.isExport());
2176:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
2177:       assertFalse(jSDocInfo0.containsDeclaration());
2178:       assertFalse(jSDocInfo0.isImplicitCast());
2179:       assertFalse(jSDocInfo0.isJaggerInject());
2180:       assertFalse(jSDocInfo0.hasFileOverview());
2181:       assertFalse(jSDocInfo0.isConstant());
2182:       assertFalse(jSDocInfo0.hasType());
2183:       assertFalse(jSDocInfo0.hasModifies());
2184:       assertNull(jSDocInfo0.getOriginalCommentString());
2185:       assertFalse(jSDocInfo0.isJavaDispatch());
2186:       assertFalse(jSDocInfo0.isJaggerModule());
2187:       assertFalse(jSDocInfo0.isDisposes());
2188:       assertFalse(jSDocInfo0.hasTypedefType());
2189:       assertFalse(jSDocInfo0.isNoTypeCheck());
2190:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
2191:       assertNull(jSDocInfo0.getReturnDescription());
2192:       assertFalse(jSDocInfo0.isJaggerProvide());
2193:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
2194:       assertFalse(jSDocInfo0.isStableIdGenerator());
2195:       assertEquals(56, Node.CHANGE_TIME);
2196:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2197:       assertEquals(29, Node.JSDOC_INFO_PROP);
2198:       assertEquals(47, Node.IS_DISPATCHER);
2199:       assertEquals(37, Node.OPT_ARG_NAME);
2200:       assertEquals(12, Node.COLUMN_BITS);
2201:       assertEquals(2, Node.POST_FLAG);
2202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2203:       assertEquals(43, Node.IS_CONSTANT_NAME);
2204:       assertEquals(54, Node.SLASH_V);
2205:       assertEquals(1, Node.DECR_FLAG);
2206:       assertEquals(32, Node.INCRDECR_PROP);
2207:       assertEquals(46, Node.IS_NAMESPACE);
2208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2210:       assertEquals(50, Node.FREE_CALL);
2211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2212:       assertEquals(39, Node.EMPTY_BLOCK);
2213:       assertEquals(48, Node.DIRECTIVES);
2214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2216:       assertEquals(40, Node.ORIGINALNAME_PROP);
2217:       assertEquals(4095, Node.COLUMN_MASK);
2218:       assertEquals(30, Node.VAR_ARGS_NAME);
2219:       assertEquals(36, Node.QUOTED_PROP);
2220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2222:       assertEquals(49, Node.DIRECT_EVAL);
2223:       assertEquals(57, Node.LAST_PROP);
2224:       assertEquals(53, Node.INPUT_ID);
2225:       assertEquals(57, Node.REFLECTED_OBJECT);
2226:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2227:       assertEquals(55, Node.INFERRED_FUNCTION);
2228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2229:       assertEquals(52, Node.LENGTH);
2230:       assertEquals(8, Node.FLAG_NO_THROWS);
2231:       assertEquals(32, Node.INCRDECR_PROP);
2232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2233:       assertEquals(37, Node.OPT_ARG_NAME);
2234:       assertEquals(1, Node.DECR_FLAG);
2235:       assertEquals(30, Node.VAR_ARGS_NAME);
2236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2237:       assertEquals(57, Node.LAST_PROP);
2238:       assertEquals(47, Node.IS_DISPATCHER);
2239:       assertEquals(2, Node.POST_FLAG);
2240:       assertEquals(12, Node.COLUMN_BITS);
2241:       assertEquals(53, Node.INPUT_ID);
2242:       assertEquals(52, Node.LENGTH);
2243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2245:       assertEquals(29, Node.JSDOC_INFO_PROP);
2246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2247:       assertEquals(49, Node.DIRECT_EVAL);
2248:       assertEquals(55, Node.INFERRED_FUNCTION);
2249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2250:       assertEquals(56, Node.CHANGE_TIME);
2251:       assertEquals(36, Node.QUOTED_PROP);
2252:       assertEquals(57, Node.REFLECTED_OBJECT);
2253:       assertEquals(48, Node.DIRECTIVES);
2254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2255:       assertEquals(8, Node.FLAG_NO_THROWS);
2256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2257:       assertEquals(39, Node.EMPTY_BLOCK);
2258:       assertEquals(4095, Node.COLUMN_MASK);
2259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2260:       assertEquals(54, Node.SLASH_V);
2261:       assertEquals(40, Node.ORIGINALNAME_PROP);
2262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2263:       assertEquals(50, Node.FREE_CALL);
2264:       assertEquals(43, Node.IS_CONSTANT_NAME);
2265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2266:       assertEquals(46, Node.IS_NAMESPACE);
2267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2268:       assertEquals(50, Node.FREE_CALL);
2269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2270:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2271:       assertEquals(8, Node.FLAG_NO_THROWS);
2272:       assertEquals(57, Node.REFLECTED_OBJECT);
2273:       assertEquals(4095, Node.COLUMN_MASK);
2274:       assertEquals(40, Node.ORIGINALNAME_PROP);
2275:       assertEquals(48, Node.DIRECTIVES);
2276:       assertEquals(43, Node.IS_CONSTANT_NAME);
2277:       assertEquals(12, Node.COLUMN_BITS);
2278:       assertEquals(54, Node.SLASH_V);
2279:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2280:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2281:       assertEquals(32, Node.INCRDECR_PROP);
2282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2283:       assertEquals(1, Node.DECR_FLAG);
2284:       assertEquals(29, Node.JSDOC_INFO_PROP);
2285:       assertEquals(56, Node.CHANGE_TIME);
2286:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2287:       assertEquals(2, Node.POST_FLAG);
2288:       assertEquals(47, Node.IS_DISPATCHER);
2289:       assertEquals(46, Node.IS_NAMESPACE);
2290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2291:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2292:       assertEquals(37, Node.OPT_ARG_NAME);
2293:       assertEquals(30, Node.VAR_ARGS_NAME);
2294:       assertEquals(49, Node.DIRECT_EVAL);
2295:       assertEquals(57, Node.LAST_PROP);
2296:       assertEquals(36, Node.QUOTED_PROP);
2297:       assertEquals(52, Node.LENGTH);
2298:       assertEquals(53, Node.INPUT_ID);
2299:       assertEquals(55, Node.INFERRED_FUNCTION);
2300:       assertEquals(39, Node.EMPTY_BLOCK);
2301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2303:       assertNotSame(node0, node1);
2304:       assertSame(node0, node2);
2305:       assertNotSame(node1, node0);
2306:       assertNotSame(node1, node2);
2307:       assertSame(node2, node0);
2308:       assertNotSame(node2, node1);
2309:       assertNotNull(jSDocInfo0);
2310:       assertFalse(node0.equals((Object)node1));
2311:       assertFalse(node1.equals((Object)node0));
2312:       assertFalse(node1.equals((Object)node2));
2313:       assertFalse(node2.equals((Object)node1));
2314:   }
2315: }
RegularFileObject[/tmp/EvoSuite_171_1628158789037/com/google/javascript/rhino/Node_171_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:19:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_171_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_171_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_171_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.common.collect.Iterators$12",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.ImmutableList$1"
374:     );
375:   }
376: }

[MASTER] 10:19:49.694 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("qrvsqkX5OB");
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node0);

Node node1 = node0.cloneTree();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node1.isLocalResultCall();
assertFalse(boolean0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node0.setQuotedString();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

int int0 = node2.getChangeTime();
assertEquals(0, int0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));

Iterable<Node> iterable0 = node1.children();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

node0.detachChildren();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));

boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qrvsqkX5OB");
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.equals((Object)node1));

node_FileLevelJsDocBuilder0.append("qrvsqkX5OB");
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));

boolean boolean2 = node0.isCatch();
assertFalse(boolean2);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

JSDocInfo jSDocInfo0 = node2.getJSDocInfo();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertNull(jSDocInfo0.getBlockDescription());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isOverride());
assertNull(jSDocInfo0.getVersion());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.makesDicts());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.hasThisType());
assertEquals("qrvsqkX5OB", jSDocInfo0.getLicense());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.isConstructor());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isExport());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.containsDeclaration());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.hasModifies());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(jSDocInfo0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));


[MASTER] 10:19:51.622 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_178_1628158791231/com/google/javascript/rhino/Node_178_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_178_1628158791231/com/google/javascript/rhino/Node_178_tmp__ESTest_scaffolding.java]]
[MASTER] 10:19:51.622 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:51.622 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:19:51.623 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2209
[MASTER] 10:19:51.625 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_178_1628158791231/com/google/javascript/rhino/Node_178_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:19:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_178_tmp__ESTest extends Node_178_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(0);
21:       assertFalse(node0.isGetProp());
22:       assertFalse(node0.isComma());
23:       assertFalse(node0.isThis());
24:       assertFalse(node0.isFalse());
25:       assertFalse(node0.isAnd());
26:       assertFalse(node0.isWith());
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isBreak());
29:       assertFalse(node0.isExprResult());
30:       assertEquals((-1), node0.getCharno());
31:       assertFalse(node0.isHook());
32:       assertFalse(node0.isSwitch());
33:       assertFalse(node0.isCase());
34:       assertFalse(node0.isObjectLit());
35:       assertFalse(node0.isNot());
36:       assertFalse(node0.isNumber());
37:       assertFalse(node0.hasOneChild());
38:       assertFalse(node0.isString());
39:       assertFalse(node0.isScript());
40:       assertFalse(node0.isLabel());
41:       assertFalse(node0.isAssignAdd());
42:       assertFalse(node0.isOr());
43:       assertFalse(node0.isDec());
44:       assertFalse(node0.hasChildren());
45:       assertFalse(node0.isReturn());
46:       assertFalse(node0.isGetElem());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.isLabelName());
49:       assertFalse(node0.isDelProp());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.isArrayLit());
52:       assertEquals(0, node0.getType());
53:       assertFalse(node0.isNew());
54:       assertFalse(node0.isVoid());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isTrue());
57:       assertFalse(node0.isVar());
58:       assertFalse(node0.isDo());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isEmpty());
61:       assertEquals(0, node0.getChildCount());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isParamList());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isCatch());
67:       assertFalse(node0.isCall());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isRegExp());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isWhile());
73:       assertFalse(node0.isGetterDef());
74:       assertEquals((-1), node0.getLineno());
75:       assertEquals((-1), node0.getSourcePosition());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isContinue());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.isCast());
82:       assertFalse(node0.isFunction());
83:       assertFalse(node0.isThrow());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isSetterDef());
87:       assertEquals(56, Node.CHANGE_TIME);
88:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
89:       assertEquals(29, Node.JSDOC_INFO_PROP);
90:       assertEquals(47, Node.IS_DISPATCHER);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(12, Node.COLUMN_BITS);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(36, Node.QUOTED_PROP);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(57, Node.LAST_PROP);
101:       assertEquals(53, Node.INPUT_ID);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
109:       assertEquals(39, Node.EMPTY_BLOCK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(40, Node.ORIGINALNAME_PROP);
114:       assertEquals(4095, Node.COLUMN_MASK);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertNotNull(node0);
124:       
125:       Node node1 = node0.srcref(node0);
126:       assertFalse(node0.isGetProp());
127:       assertFalse(node0.isComma());
128:       assertFalse(node0.isThis());
129:       assertFalse(node0.isFalse());
130:       assertFalse(node0.isAnd());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isInstanceOf());
133:       assertFalse(node0.isBreak());
134:       assertFalse(node0.isExprResult());
135:       assertEquals((-1), node0.getCharno());
136:       assertFalse(node0.isHook());
137:       assertFalse(node0.isSwitch());
138:       assertFalse(node0.isCase());
139:       assertFalse(node0.isObjectLit());
140:       assertFalse(node0.isNot());
141:       assertFalse(node0.isNumber());
142:       assertFalse(node0.hasOneChild());
143:       assertFalse(node0.isString());
144:       assertFalse(node0.isScript());
145:       assertFalse(node0.isLabel());
146:       assertFalse(node0.isAssignAdd());
147:       assertFalse(node0.isOr());
148:       assertFalse(node0.isDec());
149:       assertFalse(node0.hasChildren());
150:       assertFalse(node0.isReturn());
151:       assertFalse(node0.isGetElem());
152:       assertFalse(node0.isAssign());
153:       assertFalse(node0.isLabelName());
154:       assertFalse(node0.isDelProp());
155:       assertFalse(node0.isTypeOf());
156:       assertFalse(node0.isArrayLit());
157:       assertEquals(0, node0.getType());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isVoid());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isTrue());
162:       assertFalse(node0.isVar());
163:       assertFalse(node0.isDo());
164:       assertFalse(node0.isAdd());
165:       assertFalse(node0.isEmpty());
166:       assertEquals(0, node0.getChildCount());
167:       assertFalse(node0.isNull());
168:       assertFalse(node0.isParamList());
169:       assertFalse(node0.isStringKey());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isCatch());
172:       assertFalse(node0.isCall());
173:       assertFalse(node0.isBlock());
174:       assertFalse(node0.isDebugger());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isGetterDef());
179:       assertEquals((-1), node0.getLineno());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.isIf());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isCast());
187:       assertFalse(node0.isFunction());
188:       assertFalse(node0.isThrow());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isSetterDef());
192:       assertFalse(node1.isBlock());
193:       assertFalse(node1.isAdd());
194:       assertFalse(node1.isVar());
195:       assertFalse(node1.isWhile());
196:       assertFalse(node1.isAssignAdd());
197:       assertFalse(node1.isNew());
198:       assertFalse(node1.isDo());
199:       assertFalse(node1.isSetterDef());
200:       assertFalse(node1.isNull());
201:       assertFalse(node1.isReturn());
202:       assertFalse(node1.hasChildren());
203:       assertFalse(node1.isDec());
204:       assertFalse(node1.isTypeOf());
205:       assertFalse(node1.isAssign());
206:       assertFalse(node1.isOr());
207:       assertFalse(node1.isCall());
208:       assertFalse(node1.hasMoreThanOneChild());
209:       assertFalse(node1.isGetElem());
210:       assertFalse(node1.isCatch());
211:       assertEquals((-1), node1.getLineno());
212:       assertFalse(node1.isName());
213:       assertFalse(node1.isTrue());
214:       assertFalse(node1.isScript());
215:       assertFalse(node1.isWith());
216:       assertFalse(node1.isRegExp());
217:       assertFalse(node1.isFor());
218:       assertFalse(node1.isEmpty());
219:       assertFalse(node1.isDefaultCase());
220:       assertFalse(node1.hasOneChild());
221:       assertFalse(node1.isTry());
222:       assertFalse(node1.isParamList());
223:       assertFalse(node1.isLabel());
224:       assertFalse(node1.isNumber());
225:       assertEquals(0, node1.getChildCount());
226:       assertFalse(node1.isGetterDef());
227:       assertFalse(node1.isStringKey());
228:       assertFalse(node1.isArrayLit());
229:       assertFalse(node1.isLabelName());
230:       assertFalse(node1.isInc());
231:       assertFalse(node1.isSwitch());
232:       assertEquals((-1), node1.getCharno());
233:       assertEquals(0, node1.getType());
234:       assertFalse(node1.isString());
235:       assertFalse(node1.isHook());
236:       assertFalse(node1.isThrow());
237:       assertFalse(node1.isCase());
238:       assertFalse(node1.isComma());
239:       assertFalse(node1.isThis());
240:       assertFalse(node1.isNE());
241:       assertFalse(node1.isIn());
242:       assertFalse(node1.isInstanceOf());
243:       assertFalse(node1.isIf());
244:       assertFalse(node1.isBreak());
245:       assertFalse(node1.isVoid());
246:       assertFalse(node1.isDelProp());
247:       assertFalse(node1.isExprResult());
248:       assertFalse(node1.isFunction());
249:       assertFalse(node1.isDebugger());
250:       assertFalse(node1.isNot());
251:       assertFalse(node1.isObjectLit());
252:       assertFalse(node1.isGetProp());
253:       assertFalse(node1.isFalse());
254:       assertEquals((-1), node1.getSourcePosition());
255:       assertFalse(node1.isAnd());
256:       assertFalse(node1.isContinue());
257:       assertFalse(node1.isCast());
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(47, Node.IS_DISPATCHER);
262:       assertEquals(37, Node.OPT_ARG_NAME);
263:       assertEquals(12, Node.COLUMN_BITS);
264:       assertEquals(2, Node.POST_FLAG);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(30, Node.VAR_ARGS_NAME);
267:       assertEquals(36, Node.QUOTED_PROP);
268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(57, Node.LAST_PROP);
272:       assertEquals(53, Node.INPUT_ID);
273:       assertEquals(57, Node.REFLECTED_OBJECT);
274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
275:       assertEquals(55, Node.INFERRED_FUNCTION);
276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
277:       assertEquals(52, Node.LENGTH);
278:       assertEquals(8, Node.FLAG_NO_THROWS);
279:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
280:       assertEquals(39, Node.EMPTY_BLOCK);
281:       assertEquals(48, Node.DIRECTIVES);
282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
284:       assertEquals(40, Node.ORIGINALNAME_PROP);
285:       assertEquals(4095, Node.COLUMN_MASK);
286:       assertEquals(43, Node.IS_CONSTANT_NAME);
287:       assertEquals(54, Node.SLASH_V);
288:       assertEquals(1, Node.DECR_FLAG);
289:       assertEquals(32, Node.INCRDECR_PROP);
290:       assertEquals(46, Node.IS_NAMESPACE);
291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
292:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
293:       assertEquals(50, Node.FREE_CALL);
294:       assertEquals(36, Node.QUOTED_PROP);
295:       assertEquals(43, Node.IS_CONSTANT_NAME);
296:       assertEquals(53, Node.INPUT_ID);
297:       assertEquals(8, Node.FLAG_NO_THROWS);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
300:       assertEquals(39, Node.EMPTY_BLOCK);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(2, Node.POST_FLAG);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(30, Node.VAR_ARGS_NAME);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(54, Node.SLASH_V);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(32, Node.INCRDECR_PROP);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(37, Node.OPT_ARG_NAME);
329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
330:       assertSame(node0, node1);
331:       assertSame(node1, node0);
332:       assertNotNull(node1);
333:       
334:       boolean boolean0 = node0.isWhile();
335:       assertFalse(boolean0);
336:       assertFalse(node0.isGetProp());
337:       assertFalse(node0.isComma());
338:       assertFalse(node0.isThis());
339:       assertFalse(node0.isFalse());
340:       assertFalse(node0.isAnd());
341:       assertFalse(node0.isWith());
342:       assertFalse(node0.isInstanceOf());
343:       assertFalse(node0.isBreak());
344:       assertFalse(node0.isExprResult());
345:       assertEquals((-1), node0.getCharno());
346:       assertFalse(node0.isHook());
347:       assertFalse(node0.isSwitch());
348:       assertFalse(node0.isCase());
349:       assertFalse(node0.isObjectLit());
350:       assertFalse(node0.isNot());
351:       assertFalse(node0.isNumber());
352:       assertFalse(node0.hasOneChild());
353:       assertFalse(node0.isString());
354:       assertFalse(node0.isScript());
355:       assertFalse(node0.isLabel());
356:       assertFalse(node0.isAssignAdd());
357:       assertFalse(node0.isOr());
358:       assertFalse(node0.isDec());
359:       assertFalse(node0.hasChildren());
360:       assertFalse(node0.isReturn());
361:       assertFalse(node0.isGetElem());
362:       assertFalse(node0.isAssign());
363:       assertFalse(node0.isLabelName());
364:       assertFalse(node0.isDelProp());
365:       assertFalse(node0.isTypeOf());
366:       assertFalse(node0.isArrayLit());
367:       assertEquals(0, node0.getType());
368:       assertFalse(node0.isNew());
369:       assertFalse(node0.isVoid());
370:       assertFalse(node0.isDefaultCase());
371:       assertFalse(node0.isTrue());
372:       assertFalse(node0.isVar());
373:       assertFalse(node0.isDo());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node0.isEmpty());
376:       assertEquals(0, node0.getChildCount());
377:       assertFalse(node0.isNull());
378:       assertFalse(node0.isParamList());
379:       assertFalse(node0.isStringKey());
380:       assertFalse(node0.isName());
381:       assertFalse(node0.isCatch());
382:       assertFalse(node0.isCall());
383:       assertFalse(node0.isBlock());
384:       assertFalse(node0.isDebugger());
385:       assertFalse(node0.isRegExp());
386:       assertFalse(node0.isTry());
387:       assertFalse(node0.isWhile());
388:       assertFalse(node0.isGetterDef());
389:       assertEquals((-1), node0.getLineno());
390:       assertEquals((-1), node0.getSourcePosition());
391:       assertFalse(node0.isIf());
392:       assertFalse(node0.isNE());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isContinue());
395:       assertFalse(node0.hasMoreThanOneChild());
396:       assertFalse(node0.isCast());
397:       assertFalse(node0.isFunction());
398:       assertFalse(node0.isThrow());
399:       assertFalse(node0.isIn());
400:       assertFalse(node0.isInc());
401:       assertFalse(node0.isSetterDef());
402:       assertEquals(56, Node.CHANGE_TIME);
403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
404:       assertEquals(29, Node.JSDOC_INFO_PROP);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(37, Node.OPT_ARG_NAME);
407:       assertEquals(12, Node.COLUMN_BITS);
408:       assertEquals(2, Node.POST_FLAG);
409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
410:       assertEquals(30, Node.VAR_ARGS_NAME);
411:       assertEquals(36, Node.QUOTED_PROP);
412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(53, Node.INPUT_ID);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(52, Node.LENGTH);
422:       assertEquals(8, Node.FLAG_NO_THROWS);
423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(48, Node.DIRECTIVES);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(40, Node.ORIGINALNAME_PROP);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(1, Node.DECR_FLAG);
433:       assertEquals(32, Node.INCRDECR_PROP);
434:       assertEquals(46, Node.IS_NAMESPACE);
435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(50, Node.FREE_CALL);
438:       assertSame(node0, node1);
439:       
440:       boolean boolean1 = node0.isFunction();
441:       assertFalse(boolean1);
442:       assertFalse(node0.isGetProp());
443:       assertFalse(node0.isComma());
444:       assertFalse(node0.isThis());
445:       assertFalse(node0.isFalse());
446:       assertFalse(node0.isAnd());
447:       assertFalse(node0.isWith());
448:       assertFalse(node0.isInstanceOf());
449:       assertFalse(node0.isBreak());
450:       assertFalse(node0.isExprResult());
451:       assertEquals((-1), node0.getCharno());
452:       assertFalse(node0.isHook());
453:       assertFalse(node0.isSwitch());
454:       assertFalse(node0.isCase());
455:       assertFalse(node0.isObjectLit());
456:       assertFalse(node0.isNot());
457:       assertFalse(node0.isNumber());
458:       assertFalse(node0.hasOneChild());
459:       assertFalse(node0.isString());
460:       assertFalse(node0.isScript());
461:       assertFalse(node0.isLabel());
462:       assertFalse(node0.isAssignAdd());
463:       assertFalse(node0.isOr());
464:       assertFalse(node0.isDec());
465:       assertFalse(node0.hasChildren());
466:       assertFalse(node0.isReturn());
467:       assertFalse(node0.isGetElem());
468:       assertFalse(node0.isAssign());
469:       assertFalse(node0.isLabelName());
470:       assertFalse(node0.isDelProp());
471:       assertFalse(node0.isTypeOf());
472:       assertFalse(node0.isArrayLit());
473:       assertEquals(0, node0.getType());
474:       assertFalse(node0.isNew());
475:       assertFalse(node0.isVoid());
476:       assertFalse(node0.isDefaultCase());
477:       assertFalse(node0.isTrue());
478:       assertFalse(node0.isVar());
479:       assertFalse(node0.isDo());
480:       assertFalse(node0.isAdd());
481:       assertFalse(node0.isEmpty());
482:       assertEquals(0, node0.getChildCount());
483:       assertFalse(node0.isNull());
484:       assertFalse(node0.isParamList());
485:       assertFalse(node0.isStringKey());
486:       assertFalse(node0.isName());
487:       assertFalse(node0.isCatch());
488:       assertFalse(node0.isCall());
489:       assertFalse(node0.isBlock());
490:       assertFalse(node0.isDebugger());
491:       assertFalse(node0.isRegExp());
492:       assertFalse(node0.isTry());
493:       assertFalse(node0.isWhile());
494:       assertFalse(node0.isGetterDef());
495:       assertEquals((-1), node0.getLineno());
496:       assertEquals((-1), node0.getSourcePosition());
497:       assertFalse(node0.isIf());
498:       assertFalse(node0.isNE());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.isContinue());
501:       assertFalse(node0.hasMoreThanOneChild());
502:       assertFalse(node0.isCast());
503:       assertFalse(node0.isFunction());
504:       assertFalse(node0.isThrow());
505:       assertFalse(node0.isIn());
506:       assertFalse(node0.isInc());
507:       assertFalse(node0.isSetterDef());
508:       assertEquals(56, Node.CHANGE_TIME);
509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
510:       assertEquals(29, Node.JSDOC_INFO_PROP);
511:       assertEquals(47, Node.IS_DISPATCHER);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(12, Node.COLUMN_BITS);
514:       assertEquals(2, Node.POST_FLAG);
515:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
516:       assertEquals(30, Node.VAR_ARGS_NAME);
517:       assertEquals(36, Node.QUOTED_PROP);
518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
520:       assertEquals(49, Node.DIRECT_EVAL);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(53, Node.INPUT_ID);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
525:       assertEquals(55, Node.INFERRED_FUNCTION);
526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
527:       assertEquals(52, Node.LENGTH);
528:       assertEquals(8, Node.FLAG_NO_THROWS);
529:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(48, Node.DIRECTIVES);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(40, Node.ORIGINALNAME_PROP);
535:       assertEquals(4095, Node.COLUMN_MASK);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(50, Node.FREE_CALL);
544:       assertSame(node0, node1);
545:       assertTrue(boolean1 == boolean0);
546:       
547:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
548:       assertEquals(0, node_SideEffectFlags0.valueOf());
549:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
550:       assertNotNull(node_SideEffectFlags0);
551:       
552:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
553:       assertEquals(0, node_SideEffectFlags0.valueOf());
554:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
555:       assertEquals(0, node_SideEffectFlags1.valueOf());
556:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
557:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
558:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
559:       assertNotNull(node_SideEffectFlags1);
560:       
561:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
562:       assertEquals(0, node_SideEffectFlags0.valueOf());
563:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
564:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
565:       assertEquals(0, node_SideEffectFlags2.valueOf());
566:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
567:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
568:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
569:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
570:       assertNotNull(node_SideEffectFlags2);
571:       
572:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
573:       assertEquals(0, node_SideEffectFlags0.valueOf());
574:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
575:       assertEquals(0, node_SideEffectFlags1.valueOf());
576:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
577:       assertEquals(0, node_SideEffectFlags3.valueOf());
578:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
579:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
580:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
581:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
582:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
583:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
584:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
585:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
586:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
587:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
588:       assertNotNull(node_SideEffectFlags3);
589:       
590:       String string0 = node0.checkTreeEquals(node1);
591:       assertFalse(node0.isGetProp());
592:       assertFalse(node0.isComma());
593:       assertFalse(node0.isThis());
594:       assertFalse(node0.isFalse());
595:       assertFalse(node0.isAnd());
596:       assertFalse(node0.isWith());
597:       assertFalse(node0.isInstanceOf());
598:       assertFalse(node0.isBreak());
599:       assertFalse(node0.isExprResult());
600:       assertEquals((-1), node0.getCharno());
601:       assertFalse(node0.isHook());
602:       assertFalse(node0.isSwitch());
603:       assertFalse(node0.isCase());
604:       assertFalse(node0.isObjectLit());
605:       assertFalse(node0.isNot());
606:       assertFalse(node0.isNumber());
607:       assertFalse(node0.hasOneChild());
608:       assertFalse(node0.isString());
609:       assertFalse(node0.isScript());
610:       assertFalse(node0.isLabel());
611:       assertFalse(node0.isAssignAdd());
612:       assertFalse(node0.isOr());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.hasChildren());
615:       assertFalse(node0.isReturn());
616:       assertFalse(node0.isGetElem());
617:       assertFalse(node0.isAssign());
618:       assertFalse(node0.isLabelName());
619:       assertFalse(node0.isDelProp());
620:       assertFalse(node0.isTypeOf());
621:       assertFalse(node0.isArrayLit());
622:       assertEquals(0, node0.getType());
623:       assertFalse(node0.isNew());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isDefaultCase());
626:       assertFalse(node0.isTrue());
627:       assertFalse(node0.isVar());
628:       assertFalse(node0.isDo());
629:       assertFalse(node0.isAdd());
630:       assertFalse(node0.isEmpty());
631:       assertEquals(0, node0.getChildCount());
632:       assertFalse(node0.isNull());
633:       assertFalse(node0.isParamList());
634:       assertFalse(node0.isStringKey());
635:       assertFalse(node0.isName());
636:       assertFalse(node0.isCatch());
637:       assertFalse(node0.isCall());
638:       assertFalse(node0.isBlock());
639:       assertFalse(node0.isDebugger());
640:       assertFalse(node0.isRegExp());
641:       assertFalse(node0.isTry());
642:       assertFalse(node0.isWhile());
643:       assertFalse(node0.isGetterDef());
644:       assertEquals((-1), node0.getLineno());
645:       assertEquals((-1), node0.getSourcePosition());
646:       assertFalse(node0.isIf());
647:       assertFalse(node0.isNE());
648:       assertFalse(node0.isFor());
649:       assertFalse(node0.isContinue());
650:       assertFalse(node0.hasMoreThanOneChild());
651:       assertFalse(node0.isCast());
652:       assertFalse(node0.isFunction());
653:       assertFalse(node0.isThrow());
654:       assertFalse(node0.isIn());
655:       assertFalse(node0.isInc());
656:       assertFalse(node0.isSetterDef());
657:       assertFalse(node1.isBlock());
658:       assertFalse(node1.isAdd());
659:       assertFalse(node1.isVar());
660:       assertFalse(node1.isWhile());
661:       assertFalse(node1.isAssignAdd());
662:       assertFalse(node1.isNew());
663:       assertFalse(node1.isDo());
664:       assertFalse(node1.isSetterDef());
665:       assertFalse(node1.isNull());
666:       assertFalse(node1.isReturn());
667:       assertFalse(node1.hasChildren());
668:       assertFalse(node1.isDec());
669:       assertFalse(node1.isTypeOf());
670:       assertFalse(node1.isAssign());
671:       assertFalse(node1.isOr());
672:       assertFalse(node1.isCall());
673:       assertFalse(node1.hasMoreThanOneChild());
674:       assertFalse(node1.isGetElem());
675:       assertFalse(node1.isCatch());
676:       assertEquals((-1), node1.getLineno());
677:       assertFalse(node1.isName());
678:       assertFalse(node1.isTrue());
679:       assertFalse(node1.isScript());
680:       assertFalse(node1.isWith());
681:       assertFalse(node1.isRegExp());
682:       assertFalse(node1.isFor());
683:       assertFalse(node1.isEmpty());
684:       assertFalse(node1.isDefaultCase());
685:       assertFalse(node1.hasOneChild());
686:       assertFalse(node1.isTry());
687:       assertFalse(node1.isParamList());
688:       assertFalse(node1.isLabel());
689:       assertFalse(node1.isNumber());
690:       assertEquals(0, node1.getChildCount());
691:       assertFalse(node1.isGetterDef());
692:       assertFalse(node1.isStringKey());
693:       assertFalse(node1.isArrayLit());
694:       assertFalse(node1.isLabelName());
695:       assertFalse(node1.isInc());
696:       assertFalse(node1.isSwitch());
697:       assertEquals((-1), node1.getCharno());
698:       assertEquals(0, node1.getType());
699:       assertFalse(node1.isString());
700:       assertFalse(node1.isHook());
701:       assertFalse(node1.isThrow());
702:       assertFalse(node1.isCase());
703:       assertFalse(node1.isComma());
704:       assertFalse(node1.isThis());
705:       assertFalse(node1.isNE());
706:       assertFalse(node1.isIn());
707:       assertFalse(node1.isInstanceOf());
708:       assertFalse(node1.isIf());
709:       assertFalse(node1.isBreak());
710:       assertFalse(node1.isVoid());
711:       assertFalse(node1.isDelProp());
712:       assertFalse(node1.isExprResult());
713:       assertFalse(node1.isFunction());
714:       assertFalse(node1.isDebugger());
715:       assertFalse(node1.isNot());
716:       assertFalse(node1.isObjectLit());
717:       assertFalse(node1.isGetProp());
718:       assertFalse(node1.isFalse());
719:       assertEquals((-1), node1.getSourcePosition());
720:       assertFalse(node1.isAnd());
721:       assertFalse(node1.isContinue());
722:       assertFalse(node1.isCast());
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
725:       assertEquals(29, Node.JSDOC_INFO_PROP);
726:       assertEquals(47, Node.IS_DISPATCHER);
727:       assertEquals(37, Node.OPT_ARG_NAME);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(2, Node.POST_FLAG);
730:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
731:       assertEquals(30, Node.VAR_ARGS_NAME);
732:       assertEquals(36, Node.QUOTED_PROP);
733:       assertEquals(15, Node.NO_SIDE_EFFECTS);
734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
735:       assertEquals(49, Node.DIRECT_EVAL);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(53, Node.INPUT_ID);
738:       assertEquals(57, Node.REFLECTED_OBJECT);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(55, Node.INFERRED_FUNCTION);
741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
742:       assertEquals(52, Node.LENGTH);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(48, Node.DIRECTIVES);
747:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(40, Node.ORIGINALNAME_PROP);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertEquals(43, Node.IS_CONSTANT_NAME);
752:       assertEquals(54, Node.SLASH_V);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(32, Node.INCRDECR_PROP);
755:       assertEquals(46, Node.IS_NAMESPACE);
756:       assertEquals(51, Node.STATIC_SOURCE_FILE);
757:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
758:       assertEquals(50, Node.FREE_CALL);
759:       assertEquals(36, Node.QUOTED_PROP);
760:       assertEquals(43, Node.IS_CONSTANT_NAME);
761:       assertEquals(53, Node.INPUT_ID);
762:       assertEquals(8, Node.FLAG_NO_THROWS);
763:       assertEquals(55, Node.INFERRED_FUNCTION);
764:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
765:       assertEquals(39, Node.EMPTY_BLOCK);
766:       assertEquals(50, Node.FREE_CALL);
767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
768:       assertEquals(2, Node.POST_FLAG);
769:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
770:       assertEquals(47, Node.IS_DISPATCHER);
771:       assertEquals(40, Node.ORIGINALNAME_PROP);
772:       assertEquals(49, Node.DIRECT_EVAL);
773:       assertEquals(30, Node.VAR_ARGS_NAME);
774:       assertEquals(1, Node.DECR_FLAG);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(12, Node.COLUMN_BITS);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(46, Node.IS_NAMESPACE);
779:       assertEquals(54, Node.SLASH_V);
780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
781:       assertEquals(32, Node.INCRDECR_PROP);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
786:       assertEquals(29, Node.JSDOC_INFO_PROP);
787:       assertEquals(56, Node.CHANGE_TIME);
788:       assertEquals(57, Node.REFLECTED_OBJECT);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
792:       assertEquals(4095, Node.COLUMN_MASK);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertSame(node0, node1);
796:       assertSame(node1, node0);
797:       assertNull(string0);
798:       
799:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
800:       assertEquals(0, node_SideEffectFlags0.valueOf());
801:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
802:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
803:       assertEquals(0, node_SideEffectFlags2.valueOf());
804:       assertEquals(0, node_SideEffectFlags4.valueOf());
805:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
806:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
807:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
808:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
809:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
810:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
811:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
812:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
813:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
814:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
815:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
816:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
817:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
818:       assertNotNull(node_SideEffectFlags4);
819:       
820:       Node node2 = node1.cloneTree();
821:       assertFalse(node0.isGetProp());
822:       assertFalse(node0.isComma());
823:       assertFalse(node0.isThis());
824:       assertFalse(node0.isFalse());
825:       assertFalse(node0.isAnd());
826:       assertFalse(node0.isWith());
827:       assertFalse(node0.isInstanceOf());
828:       assertFalse(node0.isBreak());
829:       assertFalse(node0.isExprResult());
830:       assertEquals((-1), node0.getCharno());
831:       assertFalse(node0.isHook());
832:       assertFalse(node0.isSwitch());
833:       assertFalse(node0.isCase());
834:       assertFalse(node0.isObjectLit());
835:       assertFalse(node0.isNot());
836:       assertFalse(node0.isNumber());
837:       assertFalse(node0.hasOneChild());
838:       assertFalse(node0.isString());
839:       assertFalse(node0.isScript());
840:       assertFalse(node0.isLabel());
841:       assertFalse(node0.isAssignAdd());
842:       assertFalse(node0.isOr());
843:       assertFalse(node0.isDec());
844:       assertFalse(node0.hasChildren());
845:       assertFalse(node0.isReturn());
846:       assertFalse(node0.isGetElem());
847:       assertFalse(node0.isAssign());
848:       assertFalse(node0.isLabelName());
849:       assertFalse(node0.isDelProp());
850:       assertFalse(node0.isTypeOf());
851:       assertFalse(node0.isArrayLit());
852:       assertEquals(0, node0.getType());
853:       assertFalse(node0.isNew());
854:       assertFalse(node0.isVoid());
855:       assertFalse(node0.isDefaultCase());
856:       assertFalse(node0.isTrue());
857:       assertFalse(node0.isVar());
858:       assertFalse(node0.isDo());
859:       assertFalse(node0.isAdd());
860:       assertFalse(node0.isEmpty());
861:       assertEquals(0, node0.getChildCount());
862:       assertFalse(node0.isNull());
863:       assertFalse(node0.isParamList());
864:       assertFalse(node0.isStringKey());
865:       assertFalse(node0.isName());
866:       assertFalse(node0.isCatch());
867:       assertFalse(node0.isCall());
868:       assertFalse(node0.isBlock());
869:       assertFalse(node0.isDebugger());
870:       assertFalse(node0.isRegExp());
871:       assertFalse(node0.isTry());
872:       assertFalse(node0.isWhile());
873:       assertFalse(node0.isGetterDef());
874:       assertEquals((-1), node0.getLineno());
875:       assertEquals((-1), node0.getSourcePosition());
876:       assertFalse(node0.isIf());
877:       assertFalse(node0.isNE());
878:       assertFalse(node0.isFor());
879:       assertFalse(node0.isContinue());
880:       assertFalse(node0.hasMoreThanOneChild());
881:       assertFalse(node0.isCast());
882:       assertFalse(node0.isFunction());
883:       assertFalse(node0.isThrow());
884:       assertFalse(node0.isIn());
885:       assertFalse(node0.isInc());
886:       assertFalse(node0.isSetterDef());
887:       assertFalse(node1.isBlock());
888:       assertFalse(node1.isAdd());
889:       assertFalse(node1.isVar());
890:       assertFalse(node1.isWhile());
891:       assertFalse(node1.isAssignAdd());
892:       assertFalse(node1.isNew());
893:       assertFalse(node1.isDo());
894:       assertFalse(node1.isSetterDef());
895:       assertFalse(node1.isNull());
896:       assertFalse(node1.isReturn());
897:       assertFalse(node1.hasChildren());
898:       assertFalse(node1.isDec());
899:       assertFalse(node1.isTypeOf());
900:       assertFalse(node1.isAssign());
901:       assertFalse(node1.isOr());
902:       assertFalse(node1.isCall());
903:       assertFalse(node1.hasMoreThanOneChild());
904:       assertFalse(node1.isGetElem());
905:       assertFalse(node1.isCatch());
906:       assertEquals((-1), node1.getLineno());
907:       assertFalse(node1.isName());
908:       assertFalse(node1.isTrue());
909:       assertFalse(node1.isScript());
910:       assertFalse(node1.isWith());
911:       assertFalse(node1.isRegExp());
912:       assertFalse(node1.isFor());
913:       assertFalse(node1.isEmpty());
914:       assertFalse(node1.isDefaultCase());
915:       assertFalse(node1.hasOneChild());
916:       assertFalse(node1.isTry());
917:       assertFalse(node1.isParamList());
918:       assertFalse(node1.isLabel());
919:       assertFalse(node1.isNumber());
920:       assertEquals(0, node1.getChildCount());
921:       assertFalse(node1.isGetterDef());
922:       assertFalse(node1.isStringKey());
923:       assertFalse(node1.isArrayLit());
924:       assertFalse(node1.isLabelName());
925:       assertFalse(node1.isInc());
926:       assertFalse(node1.isSwitch());
927:       assertEquals((-1), node1.getCharno());
928:       assertEquals(0, node1.getType());
929:       assertFalse(node1.isString());
930:       assertFalse(node1.isHook());
931:       assertFalse(node1.isThrow());
932:       assertFalse(node1.isCase());
933:       assertFalse(node1.isComma());
934:       assertFalse(node1.isThis());
935:       assertFalse(node1.isNE());
936:       assertFalse(node1.isIn());
937:       assertFalse(node1.isInstanceOf());
938:       assertFalse(node1.isIf());
939:       assertFalse(node1.isBreak());
940:       assertFalse(node1.isVoid());
941:       assertFalse(node1.isDelProp());
942:       assertFalse(node1.isExprResult());
943:       assertFalse(node1.isFunction());
944:       assertFalse(node1.isDebugger());
945:       assertFalse(node1.isNot());
946:       assertFalse(node1.isObjectLit());
947:       assertFalse(node1.isGetProp());
948:       assertFalse(node1.isFalse());
949:       assertEquals((-1), node1.getSourcePosition());
950:       assertFalse(node1.isAnd());
951:       assertFalse(node1.isContinue());
952:       assertFalse(node1.isCast());
953:       assertFalse(node2.isGetElem());
954:       assertFalse(node2.isAssign());
955:       assertFalse(node2.isLabelName());
956:       assertFalse(node2.isDec());
957:       assertFalse(node2.isNumber());
958:       assertFalse(node2.isTypeOf());
959:       assertEquals((-1), node2.getSourcePosition());
960:       assertFalse(node2.hasChildren());
961:       assertFalse(node2.isCast());
962:       assertEquals((-1), node2.getLineno());
963:       assertFalse(node2.isExprResult());
964:       assertFalse(node2.isNot());
965:       assertFalse(node2.isObjectLit());
966:       assertFalse(node2.isWith());
967:       assertFalse(node2.hasMoreThanOneChild());
968:       assertFalse(node2.isWhile());
969:       assertFalse(node2.isAnd());
970:       assertFalse(node2.isReturn());
971:       assertFalse(node2.isBlock());
972:       assertFalse(node2.hasOneChild());
973:       assertFalse(node2.isScript());
974:       assertFalse(node2.isGetProp());
975:       assertFalse(node2.isStringKey());
976:       assertFalse(node2.isName());
977:       assertFalse(node2.isNull());
978:       assertFalse(node2.isVar());
979:       assertFalse(node2.isComma());
980:       assertEquals(0, node2.getType());
981:       assertFalse(node2.isParamList());
982:       assertFalse(node2.isSwitch());
983:       assertFalse(node2.isCall());
984:       assertFalse(node2.isBreak());
985:       assertFalse(node2.isDo());
986:       assertFalse(node2.isDefaultCase());
987:       assertEquals(0, node2.getChildCount());
988:       assertFalse(node2.isTrue());
989:       assertFalse(node2.isLabel());
990:       assertFalse(node2.isNew());
991:       assertFalse(node2.isOr());
992:       assertFalse(node2.isAdd());
993:       assertFalse(node2.isAssignAdd());
994:       assertFalse(node2.isFor());
995:       assertFalse(node2.isEmpty());
996:       assertFalse(node2.isIf());
997:       assertFalse(node2.isNE());
998:       assertFalse(node2.isGetterDef());
999:       assertFalse(node2.isVoid());
1000:       assertFalse(node2.isFunction());
1001:       assertFalse(node2.isDelProp());
1002:       assertFalse(node2.isArrayLit());
1003:       assertFalse(node2.isCase());
1004:       assertFalse(node2.isCatch());
1005:       assertFalse(node2.isString());
1006:       assertFalse(node2.isRegExp());
1007:       assertFalse(node2.isDebugger());
1008:       assertEquals((-1), node2.getCharno());
1009:       assertFalse(node2.isTry());
1010:       assertFalse(node2.isFalse());
1011:       assertFalse(node2.isThrow());
1012:       assertFalse(node2.isHook());
1013:       assertFalse(node2.isThis());
1014:       assertFalse(node2.isInstanceOf());
1015:       assertFalse(node2.isContinue());
1016:       assertFalse(node2.isIn());
1017:       assertFalse(node2.isInc());
1018:       assertFalse(node2.isSetterDef());
1019:       assertEquals(56, Node.CHANGE_TIME);
1020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1021:       assertEquals(29, Node.JSDOC_INFO_PROP);
1022:       assertEquals(47, Node.IS_DISPATCHER);
1023:       assertEquals(37, Node.OPT_ARG_NAME);
1024:       assertEquals(12, Node.COLUMN_BITS);
1025:       assertEquals(2, Node.POST_FLAG);
1026:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1027:       assertEquals(30, Node.VAR_ARGS_NAME);
1028:       assertEquals(36, Node.QUOTED_PROP);
1029:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1030:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1031:       assertEquals(49, Node.DIRECT_EVAL);
1032:       assertEquals(57, Node.LAST_PROP);
1033:       assertEquals(53, Node.INPUT_ID);
1034:       assertEquals(57, Node.REFLECTED_OBJECT);
1035:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1036:       assertEquals(55, Node.INFERRED_FUNCTION);
1037:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1038:       assertEquals(52, Node.LENGTH);
1039:       assertEquals(8, Node.FLAG_NO_THROWS);
1040:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1041:       assertEquals(39, Node.EMPTY_BLOCK);
1042:       assertEquals(48, Node.DIRECTIVES);
1043:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1044:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1045:       assertEquals(40, Node.ORIGINALNAME_PROP);
1046:       assertEquals(4095, Node.COLUMN_MASK);
1047:       assertEquals(43, Node.IS_CONSTANT_NAME);
1048:       assertEquals(54, Node.SLASH_V);
1049:       assertEquals(1, Node.DECR_FLAG);
1050:       assertEquals(32, Node.INCRDECR_PROP);
1051:       assertEquals(46, Node.IS_NAMESPACE);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(36, Node.QUOTED_PROP);
1056:       assertEquals(43, Node.IS_CONSTANT_NAME);
1057:       assertEquals(53, Node.INPUT_ID);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(55, Node.INFERRED_FUNCTION);
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(39, Node.EMPTY_BLOCK);
1062:       assertEquals(50, Node.FREE_CALL);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1066:       assertEquals(47, Node.IS_DISPATCHER);
1067:       assertEquals(40, Node.ORIGINALNAME_PROP);
1068:       assertEquals(49, Node.DIRECT_EVAL);
1069:       assertEquals(30, Node.VAR_ARGS_NAME);
1070:       assertEquals(1, Node.DECR_FLAG);
1071:       assertEquals(57, Node.LAST_PROP);
1072:       assertEquals(12, Node.COLUMN_BITS);
1073:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1074:       assertEquals(46, Node.IS_NAMESPACE);
1075:       assertEquals(54, Node.SLASH_V);
1076:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1077:       assertEquals(32, Node.INCRDECR_PROP);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1080:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1081:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1082:       assertEquals(29, Node.JSDOC_INFO_PROP);
1083:       assertEquals(56, Node.CHANGE_TIME);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1087:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(37, Node.OPT_ARG_NAME);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(57, Node.REFLECTED_OBJECT);
1093:       assertEquals(54, Node.SLASH_V);
1094:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1095:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1096:       assertEquals(49, Node.DIRECT_EVAL);
1097:       assertEquals(30, Node.VAR_ARGS_NAME);
1098:       assertEquals(40, Node.ORIGINALNAME_PROP);
1099:       assertEquals(48, Node.DIRECTIVES);
1100:       assertEquals(56, Node.CHANGE_TIME);
1101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1104:       assertEquals(57, Node.LAST_PROP);
1105:       assertEquals(36, Node.QUOTED_PROP);
1106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1107:       assertEquals(8, Node.FLAG_NO_THROWS);
1108:       assertEquals(39, Node.EMPTY_BLOCK);
1109:       assertEquals(29, Node.JSDOC_INFO_PROP);
1110:       assertEquals(53, Node.INPUT_ID);
1111:       assertEquals(55, Node.INFERRED_FUNCTION);
1112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1113:       assertEquals(43, Node.IS_CONSTANT_NAME);
1114:       assertEquals(47, Node.IS_DISPATCHER);
1115:       assertEquals(2, Node.POST_FLAG);
1116:       assertEquals(37, Node.OPT_ARG_NAME);
1117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1118:       assertEquals(4095, Node.COLUMN_MASK);
1119:       assertEquals(32, Node.INCRDECR_PROP);
1120:       assertEquals(46, Node.IS_NAMESPACE);
1121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1122:       assertEquals(12, Node.COLUMN_BITS);
1123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1124:       assertEquals(50, Node.FREE_CALL);
1125:       assertEquals(1, Node.DECR_FLAG);
1126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1127:       assertNotSame(node0, node2);
1128:       assertSame(node0, node1);
1129:       assertNotSame(node1, node2);
1130:       assertSame(node1, node0);
1131:       assertNotSame(node2, node0);
1132:       assertNotSame(node2, node1);
1133:       assertNotNull(node2);
1134:       assertFalse(node2.equals((Object)node0));
1135:       assertFalse(node2.equals((Object)node1));
1136:       
1137:       Node node3 = node1.copyInformationFrom(node0);
1138:       assertFalse(node0.isGetProp());
1139:       assertFalse(node0.isComma());
1140:       assertFalse(node0.isThis());
1141:       assertFalse(node0.isFalse());
1142:       assertFalse(node0.isAnd());
1143:       assertFalse(node0.isWith());
1144:       assertFalse(node0.isInstanceOf());
1145:       assertFalse(node0.isBreak());
1146:       assertFalse(node0.isExprResult());
1147:       assertEquals((-1), node0.getCharno());
1148:       assertFalse(node0.isHook());
1149:       assertFalse(node0.isSwitch());
1150:       assertFalse(node0.isCase());
1151:       assertFalse(node0.isObjectLit());
1152:       assertFalse(node0.isNot());
1153:       assertFalse(node0.isNumber());
1154:       assertFalse(node0.hasOneChild());
1155:       assertFalse(node0.isString());
1156:       assertFalse(node0.isScript());
1157:       assertFalse(node0.isLabel());
1158:       assertFalse(node0.isAssignAdd());
1159:       assertFalse(node0.isOr());
1160:       assertFalse(node0.isDec());
1161:       assertFalse(node0.hasChildren());
1162:       assertFalse(node0.isReturn());
1163:       assertFalse(node0.isGetElem());
1164:       assertFalse(node0.isAssign());
1165:       assertFalse(node0.isLabelName());
1166:       assertFalse(node0.isDelProp());
1167:       assertFalse(node0.isTypeOf());
1168:       assertFalse(node0.isArrayLit());
1169:       assertEquals(0, node0.getType());
1170:       assertFalse(node0.isNew());
1171:       assertFalse(node0.isVoid());
1172:       assertFalse(node0.isDefaultCase());
1173:       assertFalse(node0.isTrue());
1174:       assertFalse(node0.isVar());
1175:       assertFalse(node0.isDo());
1176:       assertFalse(node0.isAdd());
1177:       assertFalse(node0.isEmpty());
1178:       assertEquals(0, node0.getChildCount());
1179:       assertFalse(node0.isNull());
1180:       assertFalse(node0.isParamList());
1181:       assertFalse(node0.isStringKey());
1182:       assertFalse(node0.isName());
1183:       assertFalse(node0.isCatch());
1184:       assertFalse(node0.isCall());
1185:       assertFalse(node0.isBlock());
1186:       assertFalse(node0.isDebugger());
1187:       assertFalse(node0.isRegExp());
1188:       assertFalse(node0.isTry());
1189:       assertFalse(node0.isWhile());
1190:       assertFalse(node0.isGetterDef());
1191:       assertEquals((-1), node0.getLineno());
1192:       assertEquals((-1), node0.getSourcePosition());
1193:       assertFalse(node0.isIf());
1194:       assertFalse(node0.isNE());
1195:       assertFalse(node0.isFor());
1196:       assertFalse(node0.isContinue());
1197:       assertFalse(node0.hasMoreThanOneChild());
1198:       assertFalse(node0.isCast());
1199:       assertFalse(node0.isFunction());
1200:       assertFalse(node0.isThrow());
1201:       assertFalse(node0.isIn());
1202:       assertFalse(node0.isInc());
1203:       assertFalse(node0.isSetterDef());
1204:       assertFalse(node1.isBlock());
1205:       assertFalse(node1.isAdd());
1206:       assertFalse(node1.isVar());
1207:       assertFalse(node1.isWhile());
1208:       assertFalse(node1.isAssignAdd());
1209:       assertFalse(node1.isNew());
1210:       assertFalse(node1.isDo());
1211:       assertFalse(node1.isSetterDef());
1212:       assertFalse(node1.isNull());
1213:       assertFalse(node1.isReturn());
1214:       assertFalse(node1.hasChildren());
1215:       assertFalse(node1.isDec());
1216:       assertFalse(node1.isTypeOf());
1217:       assertFalse(node1.isAssign());
1218:       assertFalse(node1.isOr());
1219:       assertFalse(node1.isCall());
1220:       assertFalse(node1.hasMoreThanOneChild());
1221:       assertFalse(node1.isGetElem());
1222:       assertFalse(node1.isCatch());
1223:       assertEquals((-1), node1.getLineno());
1224:       assertFalse(node1.isName());
1225:       assertFalse(node1.isTrue());
1226:       assertFalse(node1.isScript());
1227:       assertFalse(node1.isWith());
1228:       assertFalse(node1.isRegExp());
1229:       assertFalse(node1.isFor());
1230:       assertFalse(node1.isEmpty());
1231:       assertFalse(node1.isDefaultCase());
1232:       assertFalse(node1.hasOneChild());
1233:       assertFalse(node1.isTry());
1234:       assertFalse(node1.isParamList());
1235:       assertFalse(node1.isLabel());
1236:       assertFalse(node1.isNumber());
1237:       assertEquals(0, node1.getChildCount());
1238:       assertFalse(node1.isGetterDef());
1239:       assertFalse(node1.isStringKey());
1240:       assertFalse(node1.isArrayLit());
1241:       assertFalse(node1.isLabelName());
1242:       assertFalse(node1.isInc());
1243:       assertFalse(node1.isSwitch());
1244:       assertEquals((-1), node1.getCharno());
1245:       assertEquals(0, node1.getType());
1246:       assertFalse(node1.isString());
1247:       assertFalse(node1.isHook());
1248:       assertFalse(node1.isThrow());
1249:       assertFalse(node1.isCase());
1250:       assertFalse(node1.isComma());
1251:       assertFalse(node1.isThis());
1252:       assertFalse(node1.isNE());
1253:       assertFalse(node1.isIn());
1254:       assertFalse(node1.isInstanceOf());
1255:       assertFalse(node1.isIf());
1256:       assertFalse(node1.isBreak());
1257:       assertFalse(node1.isVoid());
1258:       assertFalse(node1.isDelProp());
1259:       assertFalse(node1.isExprResult());
1260:       assertFalse(node1.isFunction());
1261:       assertFalse(node1.isDebugger());
1262:       assertFalse(node1.isNot());
1263:       assertFalse(node1.isObjectLit());
1264:       assertFalse(node1.isGetProp());
1265:       assertFalse(node1.isFalse());
1266:       assertEquals((-1), node1.getSourcePosition());
1267:       assertFalse(node1.isAnd());
1268:       assertFalse(node1.isContinue());
1269:       assertFalse(node1.isCast());
1270:       assertFalse(node3.isArrayLit());
1271:       assertFalse(node3.isFor());
1272:       assertFalse(node3.isTrue());
1273:       assertFalse(node3.isDebugger());
1274:       assertFalse(node3.isGetterDef());
1275:       assertFalse(node3.isDefaultCase());
1276:       assertFalse(node3.isTry());
1277:       assertFalse(node3.isEmpty());
1278:       assertFalse(node3.isCatch());
1279:       assertFalse(node3.isIn());
1280:       assertFalse(node3.isRegExp());
1281:       assertFalse(node3.isNull());
1282:       assertFalse(node3.isNE());
1283:       assertFalse(node3.isVoid());
1284:       assertFalse(node3.isDelProp());
1285:       assertFalse(node3.isIf());
1286:       assertEquals(0, node3.getType());
1287:       assertFalse(node3.isName());
1288:       assertFalse(node3.isCall());
1289:       assertFalse(node3.isFalse());
1290:       assertFalse(node3.isThrow());
1291:       assertFalse(node3.isString());
1292:       assertFalse(node3.isWhile());
1293:       assertFalse(node3.isGetProp());
1294:       assertFalse(node3.isInc());
1295:       assertFalse(node3.isSetterDef());
1296:       assertFalse(node3.isAnd());
1297:       assertFalse(node3.isObjectLit());
1298:       assertFalse(node3.isContinue());
1299:       assertFalse(node3.isNot());
1300:       assertFalse(node3.isFunction());
1301:       assertFalse(node3.isCast());
1302:       assertFalse(node3.hasOneChild());
1303:       assertFalse(node3.isAssign());
1304:       assertFalse(node3.hasChildren());
1305:       assertFalse(node3.isScript());
1306:       assertEquals((-1), node3.getSourcePosition());
1307:       assertFalse(node3.isNumber());
1308:       assertFalse(node3.isInstanceOf());
1309:       assertFalse(node3.hasMoreThanOneChild());
1310:       assertFalse(node3.isOr());
1311:       assertFalse(node3.isThis());
1312:       assertFalse(node3.isReturn());
1313:       assertFalse(node3.isTypeOf());
1314:       assertFalse(node3.isComma());
1315:       assertFalse(node3.isDec());
1316:       assertFalse(node3.isWith());
1317:       assertEquals((-1), node3.getLineno());
1318:       assertFalse(node3.isExprResult());
1319:       assertFalse(node3.isBreak());
1320:       assertFalse(node3.isGetElem());
1321:       assertFalse(node3.isVar());
1322:       assertFalse(node3.isBlock());
1323:       assertFalse(node3.isStringKey());
1324:       assertEquals((-1), node3.getCharno());
1325:       assertFalse(node3.isHook());
1326:       assertFalse(node3.isCase());
1327:       assertFalse(node3.isAdd());
1328:       assertFalse(node3.isNew());
1329:       assertFalse(node3.isDo());
1330:       assertEquals(0, node3.getChildCount());
1331:       assertFalse(node3.isLabel());
1332:       assertFalse(node3.isAssignAdd());
1333:       assertFalse(node3.isParamList());
1334:       assertFalse(node3.isSwitch());
1335:       assertFalse(node3.isLabelName());
1336:       assertEquals(56, Node.CHANGE_TIME);
1337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1338:       assertEquals(29, Node.JSDOC_INFO_PROP);
1339:       assertEquals(47, Node.IS_DISPATCHER);
1340:       assertEquals(37, Node.OPT_ARG_NAME);
1341:       assertEquals(12, Node.COLUMN_BITS);
1342:       assertEquals(2, Node.POST_FLAG);
1343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1344:       assertEquals(30, Node.VAR_ARGS_NAME);
1345:       assertEquals(36, Node.QUOTED_PROP);
1346:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1347:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1348:       assertEquals(49, Node.DIRECT_EVAL);
1349:       assertEquals(57, Node.LAST_PROP);
1350:       assertEquals(53, Node.INPUT_ID);
1351:       assertEquals(57, Node.REFLECTED_OBJECT);
1352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1353:       assertEquals(55, Node.INFERRED_FUNCTION);
1354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1355:       assertEquals(52, Node.LENGTH);
1356:       assertEquals(8, Node.FLAG_NO_THROWS);
1357:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1358:       assertEquals(39, Node.EMPTY_BLOCK);
1359:       assertEquals(48, Node.DIRECTIVES);
1360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1362:       assertEquals(40, Node.ORIGINALNAME_PROP);
1363:       assertEquals(4095, Node.COLUMN_MASK);
1364:       assertEquals(43, Node.IS_CONSTANT_NAME);
1365:       assertEquals(54, Node.SLASH_V);
1366:       assertEquals(1, Node.DECR_FLAG);
1367:       assertEquals(32, Node.INCRDECR_PROP);
1368:       assertEquals(46, Node.IS_NAMESPACE);
1369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1371:       assertEquals(50, Node.FREE_CALL);
1372:       assertEquals(36, Node.QUOTED_PROP);
1373:       assertEquals(43, Node.IS_CONSTANT_NAME);
1374:       assertEquals(53, Node.INPUT_ID);
1375:       assertEquals(8, Node.FLAG_NO_THROWS);
1376:       assertEquals(55, Node.INFERRED_FUNCTION);
1377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1378:       assertEquals(39, Node.EMPTY_BLOCK);
1379:       assertEquals(50, Node.FREE_CALL);
1380:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1381:       assertEquals(2, Node.POST_FLAG);
1382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1383:       assertEquals(47, Node.IS_DISPATCHER);
1384:       assertEquals(40, Node.ORIGINALNAME_PROP);
1385:       assertEquals(49, Node.DIRECT_EVAL);
1386:       assertEquals(30, Node.VAR_ARGS_NAME);
1387:       assertEquals(1, Node.DECR_FLAG);
1388:       assertEquals(57, Node.LAST_PROP);
1389:       assertEquals(12, Node.COLUMN_BITS);
1390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1391:       assertEquals(46, Node.IS_NAMESPACE);
1392:       assertEquals(54, Node.SLASH_V);
1393:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1394:       assertEquals(32, Node.INCRDECR_PROP);
1395:       assertEquals(52, Node.LENGTH);
1396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1398:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1399:       assertEquals(29, Node.JSDOC_INFO_PROP);
1400:       assertEquals(56, Node.CHANGE_TIME);
1401:       assertEquals(57, Node.REFLECTED_OBJECT);
1402:       assertEquals(48, Node.DIRECTIVES);
1403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1405:       assertEquals(4095, Node.COLUMN_MASK);
1406:       assertEquals(37, Node.OPT_ARG_NAME);
1407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1409:       assertEquals(54, Node.SLASH_V);
1410:       assertEquals(57, Node.LAST_PROP);
1411:       assertEquals(57, Node.REFLECTED_OBJECT);
1412:       assertEquals(1, Node.DECR_FLAG);
1413:       assertEquals(50, Node.FREE_CALL);
1414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1417:       assertEquals(52, Node.LENGTH);
1418:       assertEquals(39, Node.EMPTY_BLOCK);
1419:       assertEquals(2, Node.POST_FLAG);
1420:       assertEquals(46, Node.IS_NAMESPACE);
1421:       assertEquals(47, Node.IS_DISPATCHER);
1422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1423:       assertEquals(40, Node.ORIGINALNAME_PROP);
1424:       assertEquals(30, Node.VAR_ARGS_NAME);
1425:       assertEquals(53, Node.INPUT_ID);
1426:       assertEquals(36, Node.QUOTED_PROP);
1427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1428:       assertEquals(43, Node.IS_CONSTANT_NAME);
1429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1430:       assertEquals(55, Node.INFERRED_FUNCTION);
1431:       assertEquals(29, Node.JSDOC_INFO_PROP);
1432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1433:       assertEquals(48, Node.DIRECTIVES);
1434:       assertEquals(8, Node.FLAG_NO_THROWS);
1435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1436:       assertEquals(37, Node.OPT_ARG_NAME);
1437:       assertEquals(12, Node.COLUMN_BITS);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(56, Node.CHANGE_TIME);
1440:       assertEquals(49, Node.DIRECT_EVAL);
1441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1442:       assertEquals(4095, Node.COLUMN_MASK);
1443:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1444:       assertSame(node0, node3);
1445:       assertNotSame(node0, node2);
1446:       assertSame(node0, node1);
1447:       assertSame(node1, node3);
1448:       assertNotSame(node1, node2);
1449:       assertSame(node1, node0);
1450:       assertSame(node3, node0);
1451:       assertSame(node3, node1);
1452:       assertNotSame(node3, node2);
1453:       assertNotNull(node3);
1454:       assertFalse(node0.equals((Object)node2));
1455:       assertFalse(node1.equals((Object)node2));
1456:       assertFalse(node3.equals((Object)node2));
1457:       
1458:       Node node4 = Node.newString(8, "r77or7S]X8=8p%&7", (-601), 2);
1459:       assertFalse(node4.isNull());
1460:       assertFalse(node4.isStringKey());
1461:       assertFalse(node4.isCatch());
1462:       assertFalse(node4.isParamList());
1463:       assertFalse(node4.isCall());
1464:       assertFalse(node4.isName());
1465:       assertFalse(node4.isDefaultCase());
1466:       assertFalse(node4.isContinue());
1467:       assertFalse(node4.isFunction());
1468:       assertFalse(node4.isTrue());
1469:       assertEquals(0, node4.getChildCount());
1470:       assertFalse(node4.isLabel());
1471:       assertFalse(node4.isAssignAdd());
1472:       assertFalse(node4.isAdd());
1473:       assertFalse(node4.isVar());
1474:       assertFalse(node4.isSetterDef());
1475:       assertFalse(node4.isNew());
1476:       assertFalse(node4.isDo());
1477:       assertFalse(node4.isGetterDef());
1478:       assertFalse(node4.isNumber());
1479:       assertFalse(node4.isIf());
1480:       assertFalse(node4.isFor());
1481:       assertFalse(node4.isNE());
1482:       assertEquals((-1), node4.getLineno());
1483:       assertFalse(node4.isArrayLit());
1484:       assertFalse(node4.isLabelName());
1485:       assertFalse(node4.isWith());
1486:       assertFalse(node4.isScript());
1487:       assertEquals((-1), node4.getCharno());
1488:       assertFalse(node4.hasMoreThanOneChild());
1489:       assertFalse(node4.isRegExp());
1490:       assertFalse(node4.isHook());
1491:       assertFalse(node4.isBlock());
1492:       assertFalse(node4.hasOneChild());
1493:       assertFalse(node4.isCase());
1494:       assertFalse(node4.isTry());
1495:       assertFalse(node4.isBreak());
1496:       assertFalse(node4.isThrow());
1497:       assertFalse(node4.isComma());
1498:       assertFalse(node4.isThis());
1499:       assertFalse(node4.isFalse());
1500:       assertFalse(node4.isInstanceOf());
1501:       assertFalse(node4.isAnd());
1502:       assertFalse(node4.isSwitch());
1503:       assertFalse(node4.isIn());
1504:       assertFalse(node4.isInc());
1505:       assertFalse(node4.isDelProp());
1506:       assertFalse(node4.hasChildren());
1507:       assertFalse(node4.isGetElem());
1508:       assertFalse(node4.isEmpty());
1509:       assertFalse(node4.isTypeOf());
1510:       assertEquals((-1), node4.getSourcePosition());
1511:       assertFalse(node4.isAssign());
1512:       assertFalse(node4.isDec());
1513:       assertFalse(node4.isOr());
1514:       assertFalse(node4.isCast());
1515:       assertFalse(node4.isExprResult());
1516:       assertFalse(node4.isVoid());
1517:       assertFalse(node4.isString());
1518:       assertFalse(node4.isWhile());
1519:       assertEquals(8, node4.getType());
1520:       assertFalse(node4.isObjectLit());
1521:       assertFalse(node4.isDebugger());
1522:       assertFalse(node4.isNot());
1523:       assertFalse(node4.isReturn());
1524:       assertFalse(node4.isGetProp());
1525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1526:       assertEquals(47, Node.IS_DISPATCHER);
1527:       assertEquals(2, Node.POST_FLAG);
1528:       assertEquals(37, Node.OPT_ARG_NAME);
1529:       assertEquals(43, Node.IS_CONSTANT_NAME);
1530:       assertEquals(56, Node.CHANGE_TIME);
1531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1532:       assertEquals(12, Node.COLUMN_BITS);
1533:       assertEquals(4095, Node.COLUMN_MASK);
1534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1535:       assertEquals(32, Node.INCRDECR_PROP);
1536:       assertEquals(46, Node.IS_NAMESPACE);
1537:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1538:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1539:       assertEquals(1, Node.DECR_FLAG);
1540:       assertEquals(52, Node.LENGTH);
1541:       assertEquals(50, Node.FREE_CALL);
1542:       assertEquals(54, Node.SLASH_V);
1543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1544:       assertEquals(57, Node.REFLECTED_OBJECT);
1545:       assertEquals(48, Node.DIRECTIVES);
1546:       assertEquals(49, Node.DIRECT_EVAL);
1547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1548:       assertEquals(40, Node.ORIGINALNAME_PROP);
1549:       assertEquals(55, Node.INFERRED_FUNCTION);
1550:       assertEquals(30, Node.VAR_ARGS_NAME);
1551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1552:       assertEquals(36, Node.QUOTED_PROP);
1553:       assertEquals(57, Node.LAST_PROP);
1554:       assertEquals(8, Node.FLAG_NO_THROWS);
1555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1556:       assertEquals(29, Node.JSDOC_INFO_PROP);
1557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1559:       assertEquals(39, Node.EMPTY_BLOCK);
1560:       assertEquals(53, Node.INPUT_ID);
1561:       assertNotNull(node4);
1562:       assertFalse(node4.equals((Object)node2));
1563:       assertFalse(node4.equals((Object)node0));
1564:       assertFalse(node4.equals((Object)node1));
1565:       assertFalse(node4.equals((Object)node3));
1566:       
1567:       node4.addChildrenToFront(node2);
1568:       assertFalse(node0.isGetProp());
1569:       assertFalse(node0.isComma());
1570:       assertFalse(node0.isThis());
1571:       assertFalse(node0.isFalse());
1572:       assertFalse(node0.isAnd());
1573:       assertFalse(node0.isWith());
1574:       assertFalse(node0.isInstanceOf());
1575:       assertFalse(node0.isBreak());
1576:       assertFalse(node0.isExprResult());
1577:       assertEquals((-1), node0.getCharno());
1578:       assertFalse(node0.isHook());
1579:       assertFalse(node0.isSwitch());
1580:       assertFalse(node0.isCase());
1581:       assertFalse(node0.isObjectLit());
1582:       assertFalse(node0.isNot());
1583:       assertFalse(node0.isNumber());
1584:       assertFalse(node0.hasOneChild());
1585:       assertFalse(node0.isString());
1586:       assertFalse(node0.isScript());
1587:       assertFalse(node0.isLabel());
1588:       assertFalse(node0.isAssignAdd());
1589:       assertFalse(node0.isOr());
1590:       assertFalse(node0.isDec());
1591:       assertFalse(node0.hasChildren());
1592:       assertFalse(node0.isReturn());
1593:       assertFalse(node0.isGetElem());
1594:       assertFalse(node0.isAssign());
1595:       assertFalse(node0.isLabelName());
1596:       assertFalse(node0.isDelProp());
1597:       assertFalse(node0.isTypeOf());
1598:       assertFalse(node0.isArrayLit());
1599:       assertEquals(0, node0.getType());
1600:       assertFalse(node0.isNew());
1601:       assertFalse(node0.isVoid());
1602:       assertFalse(node0.isDefaultCase());
1603:       assertFalse(node0.isTrue());
1604:       assertFalse(node0.isVar());
1605:       assertFalse(node0.isDo());
1606:       assertFalse(node0.isAdd());
1607:       assertFalse(node0.isEmpty());
1608:       assertEquals(0, node0.getChildCount());
1609:       assertFalse(node0.isNull());
1610:       assertFalse(node0.isParamList());
1611:       assertFalse(node0.isStringKey());
1612:       assertFalse(node0.isName());
1613:       assertFalse(node0.isCatch());
1614:       assertFalse(node0.isCall());
1615:       assertFalse(node0.isBlock());
1616:       assertFalse(node0.isDebugger());
1617:       assertFalse(node0.isRegExp());
1618:       assertFalse(node0.isTry());
1619:       assertFalse(node0.isWhile());
1620:       assertFalse(node0.isGetterDef());
1621:       assertEquals((-1), node0.getLineno());
1622:       assertEquals((-1), node0.getSourcePosition());
1623:       assertFalse(node0.isIf());
1624:       assertFalse(node0.isNE());
1625:       assertFalse(node0.isFor());
1626:       assertFalse(node0.isContinue());
1627:       assertFalse(node0.hasMoreThanOneChild());
1628:       assertFalse(node0.isCast());
1629:       assertFalse(node0.isFunction());
1630:       assertFalse(node0.isThrow());
1631:       assertFalse(node0.isIn());
1632:       assertFalse(node0.isInc());
1633:       assertFalse(node0.isSetterDef());
1634:       assertFalse(node1.isBlock());
1635:       assertFalse(node1.isAdd());
1636:       assertFalse(node1.isVar());
1637:       assertFalse(node1.isWhile());
1638:       assertFalse(node1.isAssignAdd());
1639:       assertFalse(node1.isNew());
1640:       assertFalse(node1.isDo());
1641:       assertFalse(node1.isSetterDef());
1642:       assertFalse(node1.isNull());
1643:       assertFalse(node1.isReturn());
1644:       assertFalse(node1.hasChildren());
1645:       assertFalse(node1.isDec());
1646:       assertFalse(node1.isTypeOf());
1647:       assertFalse(node1.isAssign());
1648:       assertFalse(node1.isOr());
1649:       assertFalse(node1.isCall());
1650:       assertFalse(node1.hasMoreThanOneChild());
1651:       assertFalse(node1.isGetElem());
1652:       assertFalse(node1.isCatch());
1653:       assertEquals((-1), node1.getLineno());
1654:       assertFalse(node1.isName());
1655:       assertFalse(node1.isTrue());
1656:       assertFalse(node1.isScript());
1657:       assertFalse(node1.isWith());
1658:       assertFalse(node1.isRegExp());
1659:       assertFalse(node1.isFor());
1660:       assertFalse(node1.isEmpty());
1661:       assertFalse(node1.isDefaultCase());
1662:       assertFalse(node1.hasOneChild());
1663:       assertFalse(node1.isTry());
1664:       assertFalse(node1.isParamList());
1665:       assertFalse(node1.isLabel());
1666:       assertFalse(node1.isNumber());
1667:       assertEquals(0, node1.getChildCount());
1668:       assertFalse(node1.isGetterDef());
1669:       assertFalse(node1.isStringKey());
1670:       assertFalse(node1.isArrayLit());
1671:       assertFalse(node1.isLabelName());
1672:       assertFalse(node1.isInc());
1673:       assertFalse(node1.isSwitch());
1674:       assertEquals((-1), node1.getCharno());
1675:       assertEquals(0, node1.getType());
1676:       assertFalse(node1.isString());
1677:       assertFalse(node1.isHook());
1678:       assertFalse(node1.isThrow());
1679:       assertFalse(node1.isCase());
1680:       assertFalse(node1.isComma());
1681:       assertFalse(node1.isThis());
1682:       assertFalse(node1.isNE());
1683:       assertFalse(node1.isIn());
1684:       assertFalse(node1.isInstanceOf());
1685:       assertFalse(node1.isIf());
1686:       assertFalse(node1.isBreak());
1687:       assertFalse(node1.isVoid());
1688:       assertFalse(node1.isDelProp());
1689:       assertFalse(node1.isExprResult());
1690:       assertFalse(node1.isFunction());
1691:       assertFalse(node1.isDebugger());
1692:       assertFalse(node1.isNot());
1693:       assertFalse(node1.isObjectLit());
1694:       assertFalse(node1.isGetProp());
1695:       assertFalse(node1.isFalse());
1696:       assertEquals((-1), node1.getSourcePosition());
1697:       assertFalse(node1.isAnd());
1698:       assertFalse(node1.isContinue());
1699:       assertFalse(node1.isCast());
1700:       assertFalse(node2.isGetElem());
1701:       assertFalse(node2.isAssign());
1702:       assertFalse(node2.isLabelName());
1703:       assertFalse(node2.isDec());
1704:       assertFalse(node2.isNumber());
1705:       assertFalse(node2.isTypeOf());
1706:       assertEquals((-1), node2.getSourcePosition());
1707:       assertFalse(node2.hasChildren());
1708:       assertFalse(node2.isCast());
1709:       assertEquals((-1), node2.getLineno());
1710:       assertFalse(node2.isExprResult());
1711:       assertFalse(node2.isNot());
1712:       assertFalse(node2.isObjectLit());
1713:       assertFalse(node2.isWith());
1714:       assertFalse(node2.hasMoreThanOneChild());
1715:       assertFalse(node2.isWhile());
1716:       assertFalse(node2.isAnd());
1717:       assertFalse(node2.isReturn());
1718:       assertFalse(node2.isBlock());
1719:       assertFalse(node2.hasOneChild());
1720:       assertFalse(node2.isScript());
1721:       assertFalse(node2.isGetProp());
1722:       assertFalse(node2.isStringKey());
1723:       assertFalse(node2.isName());
1724:       assertFalse(node2.isNull());
1725:       assertFalse(node2.isVar());
1726:       assertFalse(node2.isComma());
1727:       assertEquals(0, node2.getType());
1728:       assertFalse(node2.isParamList());
1729:       assertFalse(node2.isSwitch());
1730:       assertFalse(node2.isCall());
1731:       assertFalse(node2.isBreak());
1732:       assertFalse(node2.isDo());
1733:       assertFalse(node2.isDefaultCase());
1734:       assertEquals(0, node2.getChildCount());
1735:       assertFalse(node2.isTrue());
1736:       assertFalse(node2.isLabel());
1737:       assertFalse(node2.isNew());
1738:       assertFalse(node2.isOr());
1739:       assertFalse(node2.isAdd());
1740:       assertFalse(node2.isAssignAdd());
1741:       assertFalse(node2.isFor());
1742:       assertFalse(node2.isEmpty());
1743:       assertFalse(node2.isIf());
1744:       assertFalse(node2.isNE());
1745:       assertFalse(node2.isGetterDef());
1746:       assertFalse(node2.isVoid());
1747:       assertFalse(node2.isFunction());
1748:       assertFalse(node2.isDelProp());
1749:       assertFalse(node2.isArrayLit());
1750:       assertFalse(node2.isCase());
1751:       assertFalse(node2.isCatch());
1752:       assertFalse(node2.isString());
1753:       assertFalse(node2.isRegExp());
1754:       assertFalse(node2.isDebugger());
1755:       assertEquals((-1), node2.getCharno());
1756:       assertFalse(node2.isTry());
1757:       assertFalse(node2.isFalse());
1758:       assertFalse(node2.isThrow());
1759:       assertFalse(node2.isHook());
1760:       assertFalse(node2.isThis());
1761:       assertFalse(node2.isInstanceOf());
1762:       assertFalse(node2.isContinue());
1763:       assertFalse(node2.isIn());
1764:       assertFalse(node2.isInc());
1765:       assertFalse(node2.isSetterDef());
1766:       assertFalse(node4.isNull());
1767:       assertFalse(node4.isStringKey());
1768:       assertFalse(node4.isCatch());
1769:       assertFalse(node4.isParamList());
1770:       assertFalse(node4.isCall());
1771:       assertFalse(node4.isName());
1772:       assertFalse(node4.isDefaultCase());
1773:       assertFalse(node4.isContinue());
1774:       assertFalse(node4.isFunction());
1775:       assertFalse(node4.isTrue());
1776:       assertFalse(node4.isLabel());
1777:       assertFalse(node4.isAssignAdd());
1778:       assertFalse(node4.isAdd());
1779:       assertFalse(node4.isVar());
1780:       assertFalse(node4.isSetterDef());
1781:       assertFalse(node4.isNew());
1782:       assertFalse(node4.isDo());
1783:       assertFalse(node4.isGetterDef());
1784:       assertFalse(node4.isNumber());
1785:       assertFalse(node4.isIf());
1786:       assertFalse(node4.isFor());
1787:       assertFalse(node4.isNE());
1788:       assertEquals((-1), node4.getLineno());
1789:       assertTrue(node4.hasChildren());
1790:       assertFalse(node4.isArrayLit());
1791:       assertFalse(node4.isLabelName());
1792:       assertFalse(node4.isWith());
1793:       assertFalse(node4.isScript());
1794:       assertEquals((-1), node4.getCharno());
1795:       assertFalse(node4.hasMoreThanOneChild());
1796:       assertFalse(node4.isRegExp());
1797:       assertEquals(1, node4.getChildCount());
1798:       assertFalse(node4.isHook());
1799:       assertFalse(node4.isBlock());
1800:       assertFalse(node4.isCase());
1801:       assertFalse(node4.isTry());
1802:       assertFalse(node4.isBreak());
1803:       assertFalse(node4.isThrow());
1804:       assertFalse(node4.isComma());
1805:       assertFalse(node4.isThis());
1806:       assertFalse(node4.isFalse());
1807:       assertFalse(node4.isInstanceOf());
1808:       assertFalse(node4.isAnd());
1809:       assertFalse(node4.isSwitch());
1810:       assertFalse(node4.isIn());
1811:       assertFalse(node4.isInc());
1812:       assertTrue(node4.hasOneChild());
1813:       assertFalse(node4.isDelProp());
1814:       assertFalse(node4.isGetElem());
1815:       assertFalse(node4.isEmpty());
1816:       assertFalse(node4.isTypeOf());
1817:       assertEquals((-1), node4.getSourcePosition());
1818:       assertFalse(node4.isAssign());
1819:       assertFalse(node4.isDec());
1820:       assertFalse(node4.isOr());
1821:       assertFalse(node4.isCast());
1822:       assertFalse(node4.isExprResult());
1823:       assertFalse(node4.isVoid());
1824:       assertFalse(node4.isString());
1825:       assertFalse(node4.isWhile());
1826:       assertEquals(8, node4.getType());
1827:       assertFalse(node4.isObjectLit());
1828:       assertFalse(node4.isDebugger());
1829:       assertFalse(node4.isNot());
1830:       assertFalse(node4.isReturn());
1831:       assertFalse(node4.isGetProp());
1832:       assertEquals(56, Node.CHANGE_TIME);
1833:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1834:       assertEquals(29, Node.JSDOC_INFO_PROP);
1835:       assertEquals(47, Node.IS_DISPATCHER);
1836:       assertEquals(37, Node.OPT_ARG_NAME);
1837:       assertEquals(12, Node.COLUMN_BITS);
1838:       assertEquals(2, Node.POST_FLAG);
1839:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1840:       assertEquals(30, Node.VAR_ARGS_NAME);
1841:       assertEquals(36, Node.QUOTED_PROP);
1842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1843:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1844:       assertEquals(49, Node.DIRECT_EVAL);
1845:       assertEquals(57, Node.LAST_PROP);
1846:       assertEquals(53, Node.INPUT_ID);
1847:       assertEquals(57, Node.REFLECTED_OBJECT);
1848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1849:       assertEquals(55, Node.INFERRED_FUNCTION);
1850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1851:       assertEquals(52, Node.LENGTH);
1852:       assertEquals(8, Node.FLAG_NO_THROWS);
1853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1854:       assertEquals(39, Node.EMPTY_BLOCK);
1855:       assertEquals(48, Node.DIRECTIVES);
1856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1857:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1858:       assertEquals(40, Node.ORIGINALNAME_PROP);
1859:       assertEquals(4095, Node.COLUMN_MASK);
1860:       assertEquals(43, Node.IS_CONSTANT_NAME);
1861:       assertEquals(54, Node.SLASH_V);
1862:       assertEquals(1, Node.DECR_FLAG);
1863:       assertEquals(32, Node.INCRDECR_PROP);
1864:       assertEquals(46, Node.IS_NAMESPACE);
1865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1867:       assertEquals(50, Node.FREE_CALL);
1868:       assertEquals(36, Node.QUOTED_PROP);
1869:       assertEquals(43, Node.IS_CONSTANT_NAME);
1870:       assertEquals(53, Node.INPUT_ID);
1871:       assertEquals(8, Node.FLAG_NO_THROWS);
1872:       assertEquals(55, Node.INFERRED_FUNCTION);
1873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1874:       assertEquals(39, Node.EMPTY_BLOCK);
1875:       assertEquals(50, Node.FREE_CALL);
1876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1877:       assertEquals(2, Node.POST_FLAG);
1878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1879:       assertEquals(47, Node.IS_DISPATCHER);
1880:       assertEquals(40, Node.ORIGINALNAME_PROP);
1881:       assertEquals(49, Node.DIRECT_EVAL);
1882:       assertEquals(30, Node.VAR_ARGS_NAME);
1883:       assertEquals(1, Node.DECR_FLAG);
1884:       assertEquals(57, Node.LAST_PROP);
1885:       assertEquals(12, Node.COLUMN_BITS);
1886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1887:       assertEquals(46, Node.IS_NAMESPACE);
1888:       assertEquals(54, Node.SLASH_V);
1889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1890:       assertEquals(32, Node.INCRDECR_PROP);
1891:       assertEquals(52, Node.LENGTH);
1892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1895:       assertEquals(29, Node.JSDOC_INFO_PROP);
1896:       assertEquals(56, Node.CHANGE_TIME);
1897:       assertEquals(57, Node.REFLECTED_OBJECT);
1898:       assertEquals(48, Node.DIRECTIVES);
1899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1900:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1901:       assertEquals(4095, Node.COLUMN_MASK);
1902:       assertEquals(37, Node.OPT_ARG_NAME);
1903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1904:       assertEquals(52, Node.LENGTH);
1905:       assertEquals(57, Node.REFLECTED_OBJECT);
1906:       assertEquals(54, Node.SLASH_V);
1907:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1909:       assertEquals(49, Node.DIRECT_EVAL);
1910:       assertEquals(30, Node.VAR_ARGS_NAME);
1911:       assertEquals(40, Node.ORIGINALNAME_PROP);
1912:       assertEquals(48, Node.DIRECTIVES);
1913:       assertEquals(56, Node.CHANGE_TIME);
1914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1917:       assertEquals(57, Node.LAST_PROP);
1918:       assertEquals(36, Node.QUOTED_PROP);
1919:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1920:       assertEquals(8, Node.FLAG_NO_THROWS);
1921:       assertEquals(39, Node.EMPTY_BLOCK);
1922:       assertEquals(29, Node.JSDOC_INFO_PROP);
1923:       assertEquals(53, Node.INPUT_ID);
1924:       assertEquals(55, Node.INFERRED_FUNCTION);
1925:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1926:       assertEquals(43, Node.IS_CONSTANT_NAME);
1927:       assertEquals(47, Node.IS_DISPATCHER);
1928:       assertEquals(2, Node.POST_FLAG);
1929:       assertEquals(37, Node.OPT_ARG_NAME);
1930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1931:       assertEquals(4095, Node.COLUMN_MASK);
1932:       assertEquals(32, Node.INCRDECR_PROP);
1933:       assertEquals(46, Node.IS_NAMESPACE);
1934:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1935:       assertEquals(12, Node.COLUMN_BITS);
1936:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1937:       assertEquals(50, Node.FREE_CALL);
1938:       assertEquals(1, Node.DECR_FLAG);
1939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1940:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1941:       assertEquals(47, Node.IS_DISPATCHER);
1942:       assertEquals(2, Node.POST_FLAG);
1943:       assertEquals(37, Node.OPT_ARG_NAME);
1944:       assertEquals(43, Node.IS_CONSTANT_NAME);
1945:       assertEquals(56, Node.CHANGE_TIME);
1946:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1947:       assertEquals(12, Node.COLUMN_BITS);
1948:       assertEquals(4095, Node.COLUMN_MASK);
1949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1950:       assertEquals(32, Node.INCRDECR_PROP);
1951:       assertEquals(46, Node.IS_NAMESPACE);
1952:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1954:       assertEquals(1, Node.DECR_FLAG);
1955:       assertEquals(52, Node.LENGTH);
1956:       assertEquals(50, Node.FREE_CALL);
1957:       assertEquals(54, Node.SLASH_V);
1958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1959:       assertEquals(57, Node.REFLECTED_OBJECT);
1960:       assertEquals(48, Node.DIRECTIVES);
1961:       assertEquals(49, Node.DIRECT_EVAL);
1962:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1963:       assertEquals(40, Node.ORIGINALNAME_PROP);
1964:       assertEquals(55, Node.INFERRED_FUNCTION);
1965:       assertEquals(30, Node.VAR_ARGS_NAME);
1966:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1967:       assertEquals(36, Node.QUOTED_PROP);
1968:       assertEquals(57, Node.LAST_PROP);
1969:       assertEquals(8, Node.FLAG_NO_THROWS);
1970:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1971:       assertEquals(29, Node.JSDOC_INFO_PROP);
1972:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1973:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1974:       assertEquals(39, Node.EMPTY_BLOCK);
1975:       assertEquals(53, Node.INPUT_ID);
1976:       assertSame(node0, node3);
1977:       assertNotSame(node0, node2);
1978:       assertSame(node0, node1);
1979:       assertSame(node1, node3);
1980:       assertNotSame(node1, node2);
1981:       assertSame(node1, node0);
1982:       assertNotSame(node2, node0);
1983:       assertNotSame(node2, node3);
1984:       assertNotSame(node2, node1);
1985:       assertFalse(node0.equals((Object)node4));
1986:       assertFalse(node0.equals((Object)node2));
1987:       assertFalse(node1.equals((Object)node4));
1988:       assertFalse(node1.equals((Object)node2));
1989:       assertFalse(node2.equals((Object)node4));
1990:       assertFalse(node2.equals((Object)node0));
1991:       assertFalse(node2.equals((Object)node3));
1992:       assertFalse(node2.equals((Object)node1));
1993:       assertFalse(node4.equals((Object)node2));
1994:       assertFalse(node4.equals((Object)node0));
1995:       assertFalse(node4.equals((Object)node1));
1996:       assertFalse(node4.equals((Object)node3));
1997:       
1998:       Iterable<Node> iterable0 = node1.children();
1999:       assertFalse(node0.isGetProp());
2000:       assertFalse(node0.isComma());
2001:       assertFalse(node0.isThis());
2002:       assertFalse(node0.isFalse());
2003:       assertFalse(node0.isAnd());
2004:       assertFalse(node0.isWith());
2005:       assertFalse(node0.isInstanceOf());
2006:       assertFalse(node0.isBreak());
2007:       assertFalse(node0.isExprResult());
2008:       assertEquals((-1), node0.getCharno());
2009:       assertFalse(node0.isHook());
2010:       assertFalse(node0.isSwitch());
2011:       assertFalse(node0.isCase());
2012:       assertFalse(node0.isObjectLit());
2013:       assertFalse(node0.isNot());
2014:       assertFalse(node0.isNumber());
2015:       assertFalse(node0.hasOneChild());
2016:       assertFalse(node0.isString());
2017:       assertFalse(node0.isScript());
2018:       assertFalse(node0.isLabel());
2019:       assertFalse(node0.isAssignAdd());
2020:       assertFalse(node0.isOr());
2021:       assertFalse(node0.isDec());
2022:       assertFalse(node0.hasChildren());
2023:       assertFalse(node0.isReturn());
2024:       assertFalse(node0.isGetElem());
2025:       assertFalse(node0.isAssign());
2026:       assertFalse(node0.isLabelName());
2027:       assertFalse(node0.isDelProp());
2028:       assertFalse(node0.isTypeOf());
2029:       assertFalse(node0.isArrayLit());
2030:       assertEquals(0, node0.getType());
2031:       assertFalse(node0.isNew());
2032:       assertFalse(node0.isVoid());
2033:       assertFalse(node0.isDefaultCase());
2034:       assertFalse(node0.isTrue());
2035:       assertFalse(node0.isVar());
2036:       assertFalse(node0.isDo());
2037:       assertFalse(node0.isAdd());
2038:       assertFalse(node0.isEmpty());
2039:       assertEquals(0, node0.getChildCount());
2040:       assertFalse(node0.isNull());
2041:       assertFalse(node0.isParamList());
2042:       assertFalse(node0.isStringKey());
2043:       assertFalse(node0.isName());
2044:       assertFalse(node0.isCatch());
2045:       assertFalse(node0.isCall());
2046:       assertFalse(node0.isBlock());
2047:       assertFalse(node0.isDebugger());
2048:       assertFalse(node0.isRegExp());
2049:       assertFalse(node0.isTry());
2050:       assertFalse(node0.isWhile());
2051:       assertFalse(node0.isGetterDef());
2052:       assertEquals((-1), node0.getLineno());
2053:       assertEquals((-1), node0.getSourcePosition());
2054:       assertFalse(node0.isIf());
2055:       assertFalse(node0.isNE());
2056:       assertFalse(node0.isFor());
2057:       assertFalse(node0.isContinue());
2058:       assertFalse(node0.hasMoreThanOneChild());
2059:       assertFalse(node0.isCast());
2060:       assertFalse(node0.isFunction());
2061:       assertFalse(node0.isThrow());
2062:       assertFalse(node0.isIn());
2063:       assertFalse(node0.isInc());
2064:       assertFalse(node0.isSetterDef());
2065:       assertFalse(node1.isBlock());
2066:       assertFalse(node1.isAdd());
2067:       assertFalse(node1.isVar());
2068:       assertFalse(node1.isWhile());
2069:       assertFalse(node1.isAssignAdd());
2070:       assertFalse(node1.isNew());
2071:       assertFalse(node1.isDo());
2072:       assertFalse(node1.isSetterDef());
2073:       assertFalse(node1.isNull());
2074:       assertFalse(node1.isReturn());
2075:       assertFalse(node1.hasChildren());
2076:       assertFalse(node1.isDec());
2077:       assertFalse(node1.isTypeOf());
2078:       assertFalse(node1.isAssign());
2079:       assertFalse(node1.isOr());
2080:       assertFalse(node1.isCall());
2081:       assertFalse(node1.hasMoreThanOneChild());
2082:       assertFalse(node1.isGetElem());
2083:       assertFalse(node1.isCatch());
2084:       assertEquals((-1), node1.getLineno());
2085:       assertFalse(node1.isName());
2086:       assertFalse(node1.isTrue());
2087:       assertFalse(node1.isScript());
2088:       assertFalse(node1.isWith());
2089:       assertFalse(node1.isRegExp());
2090:       assertFalse(node1.isFor());
2091:       assertFalse(node1.isEmpty());
2092:       assertFalse(node1.isDefaultCase());
2093:       assertFalse(node1.hasOneChild());
2094:       assertFalse(node1.isTry());
2095:       assertFalse(node1.isParamList());
2096:       assertFalse(node1.isLabel());
2097:       assertFalse(node1.isNumber());
2098:       assertEquals(0, node1.getChildCount());
2099:       assertFalse(node1.isGetterDef());
2100:       assertFalse(node1.isStringKey());
2101:       assertFalse(node1.isArrayLit());
2102:       assertFalse(node1.isLabelName());
2103:       assertFalse(node1.isInc());
2104:       assertFalse(node1.isSwitch());
2105:       assertEquals((-1), node1.getCharno());
2106:       assertEquals(0, node1.getType());
2107:       assertFalse(node1.isString());
2108:       assertFalse(node1.isHook());
2109:       assertFalse(node1.isThrow());
2110:       assertFalse(node1.isCase());
2111:       assertFalse(node1.isComma());
2112:       assertFalse(node1.isThis());
2113:       assertFalse(node1.isNE());
2114:       assertFalse(node1.isIn());
2115:       assertFalse(node1.isInstanceOf());
2116:       assertFalse(node1.isIf());
2117:       assertFalse(node1.isBreak());
2118:       assertFalse(node1.isVoid());
2119:       assertFalse(node1.isDelProp());
2120:       assertFalse(node1.isExprResult());
2121:       assertFalse(node1.isFunction());
2122:       assertFalse(node1.isDebugger());
2123:       assertFalse(node1.isNot());
2124:       assertFalse(node1.isObjectLit());
2125:       assertFalse(node1.isGetProp());
2126:       assertFalse(node1.isFalse());
2127:       assertEquals((-1), node1.getSourcePosition());
2128:       assertFalse(node1.isAnd());
2129:       assertFalse(node1.isContinue());
2130:       assertFalse(node1.isCast());
2131:       assertEquals(56, Node.CHANGE_TIME);
2132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2133:       assertEquals(29, Node.JSDOC_INFO_PROP);
2134:       assertEquals(47, Node.IS_DISPATCHER);
2135:       assertEquals(37, Node.OPT_ARG_NAME);
2136:       assertEquals(12, Node.COLUMN_BITS);
2137:       assertEquals(2, Node.POST_FLAG);
2138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2139:       assertEquals(30, Node.VAR_ARGS_NAME);
2140:       assertEquals(36, Node.QUOTED_PROP);
2141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2143:       assertEquals(49, Node.DIRECT_EVAL);
2144:       assertEquals(57, Node.LAST_PROP);
2145:       assertEquals(53, Node.INPUT_ID);
2146:       assertEquals(57, Node.REFLECTED_OBJECT);
2147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2148:       assertEquals(55, Node.INFERRED_FUNCTION);
2149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2150:       assertEquals(52, Node.LENGTH);
2151:       assertEquals(8, Node.FLAG_NO_THROWS);
2152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2153:       assertEquals(39, Node.EMPTY_BLOCK);
2154:       assertEquals(48, Node.DIRECTIVES);
2155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2156:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2157:       assertEquals(40, Node.ORIGINALNAME_PROP);
2158:       assertEquals(4095, Node.COLUMN_MASK);
2159:       assertEquals(43, Node.IS_CONSTANT_NAME);
2160:       assertEquals(54, Node.SLASH_V);
2161:       assertEquals(1, Node.DECR_FLAG);
2162:       assertEquals(32, Node.INCRDECR_PROP);
2163:       assertEquals(46, Node.IS_NAMESPACE);
2164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2166:       assertEquals(50, Node.FREE_CALL);
2167:       assertEquals(36, Node.QUOTED_PROP);
2168:       assertEquals(43, Node.IS_CONSTANT_NAME);
2169:       assertEquals(53, Node.INPUT_ID);
2170:       assertEquals(8, Node.FLAG_NO_THROWS);
2171:       assertEquals(55, Node.INFERRED_FUNCTION);
2172:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2173:       assertEquals(39, Node.EMPTY_BLOCK);
2174:       assertEquals(50, Node.FREE_CALL);
2175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2176:       assertEquals(2, Node.POST_FLAG);
2177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2178:       assertEquals(47, Node.IS_DISPATCHER);
2179:       assertEquals(40, Node.ORIGINALNAME_PROP);
2180:       assertEquals(49, Node.DIRECT_EVAL);
2181:       assertEquals(30, Node.VAR_ARGS_NAME);
2182:       assertEquals(1, Node.DECR_FLAG);
2183:       assertEquals(57, Node.LAST_PROP);
2184:       assertEquals(12, Node.COLUMN_BITS);
2185:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2186:       assertEquals(46, Node.IS_NAMESPACE);
2187:       assertEquals(54, Node.SLASH_V);
2188:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2189:       assertEquals(32, Node.INCRDECR_PROP);
2190:       assertEquals(52, Node.LENGTH);
2191:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2193:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2194:       assertEquals(29, Node.JSDOC_INFO_PROP);
2195:       assertEquals(56, Node.CHANGE_TIME);
2196:       assertEquals(57, Node.REFLECTED_OBJECT);
2197:       assertEquals(48, Node.DIRECTIVES);
2198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2200:       assertEquals(4095, Node.COLUMN_MASK);
2201:       assertEquals(37, Node.OPT_ARG_NAME);
2202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2203:       assertSame(node0, node3);
2204:       assertNotSame(node0, node2);
2205:       assertSame(node0, node1);
2206:       assertSame(node1, node3);
2207:       assertNotSame(node1, node2);
2208:       assertSame(node1, node0);
2209:       assertFalse(iterable0.contains(node0));
2210:       assertNotNull(iterable0);
2211:       assertFalse(node0.equals((Object)node4));
2212:       assertFalse(node0.equals((Object)node2));
2213:       assertFalse(node1.equals((Object)node4));
2214:       assertFalse(node1.equals((Object)node2));
2215:       
2216:       node2.detachChildren();
2217:       assertFalse(node0.isGetProp());
2218:       assertFalse(node0.isComma());
2219:       assertFalse(node0.isThis());
2220:       assertFalse(node0.isFalse());
2221:       assertFalse(node0.isAnd());
2222:       assertFalse(node0.isWith());
2223:       assertFalse(node0.isInstanceOf());
2224:       assertFalse(node0.isBreak());
2225:       assertFalse(node0.isExprResult());
2226:       assertEquals((-1), node0.getCharno());
2227:       assertFalse(node0.isHook());
2228:       assertFalse(node0.isSwitch());
2229:       assertFalse(node0.isCase());
2230:       assertFalse(node0.isObjectLit());
2231:       assertFalse(node0.isNot());
2232:       assertFalse(node0.isNumber());
2233:       assertFalse(node0.hasOneChild());
2234:       assertFalse(node0.isString());
2235:       assertFalse(node0.isScript());
2236:       assertFalse(node0.isLabel());
2237:       assertFalse(node0.isAssignAdd());
2238:       assertFalse(node0.isOr());
2239:       assertFalse(node0.isDec());
2240:       assertFalse(node0.hasChildren());
2241:       assertFalse(node0.isReturn());
2242:       assertFalse(node0.isGetElem());
2243:       assertFalse(node0.isAssign());
2244:       assertFalse(node0.isLabelName());
2245:       assertFalse(node0.isDelProp());
2246:       assertFalse(node0.isTypeOf());
2247:       assertFalse(node0.isArrayLit());
2248:       assertEquals(0, node0.getType());
2249:       assertFalse(node0.isNew());
2250:       assertFalse(node0.isVoid());
2251:       assertFalse(node0.isDefaultCase());
2252:       assertFalse(node0.isTrue());
2253:       assertFalse(node0.isVar());
2254:       assertFalse(node0.isDo());
2255:       assertFalse(node0.isAdd());
2256:       assertFalse(node0.isEmpty());
2257:       assertEquals(0, node0.getChildCount());
2258:       assertFalse(node0.isNull());
2259:       assertFalse(node0.isParamList());
2260:       assertFalse(node0.isStringKey());
2261:       assertFalse(node0.isName());
2262:       assertFalse(node0.isCatch());
2263:       assertFalse(node0.isCall());
2264:       assertFalse(node0.isBlock());
2265:       assertFalse(node0.isDebugger());
2266:       assertFalse(node0.isRegExp());
2267:       assertFalse(node0.isTry());
2268:       assertFalse(node0.isWhile());
2269:       assertFalse(node0.isGetterDef());
2270:       assertEquals((-1), node0.getLineno());
2271:       assertEquals((-1), node0.getSourcePosition());
2272:       assertFalse(node0.isIf());
2273:       assertFalse(node0.isNE());
2274:       assertFalse(node0.isFor());
2275:       assertFalse(node0.isContinue());
2276:       assertFalse(node0.hasMoreThanOneChild());
2277:       assertFalse(node0.isCast());
2278:       assertFalse(node0.isFunction());
2279:       assertFalse(node0.isThrow());
2280:       assertFalse(node0.isIn());
2281:       assertFalse(node0.isInc());
2282:       assertFalse(node0.isSetterDef());
2283:       assertFalse(node1.isBlock());
2284:       assertFalse(node1.isAdd());
2285:       assertFalse(node1.isVar());
2286:       assertFalse(node1.isWhile());
2287:       assertFalse(node1.isAssignAdd());
2288:       assertFalse(node1.isNew());
2289:       assertFalse(node1.isDo());
2290:       assertFalse(node1.isSetterDef());
2291:       assertFalse(node1.isNull());
2292:       assertFalse(node1.isReturn());
2293:       assertFalse(node1.hasChildren());
2294:       assertFalse(node1.isDec());
2295:       assertFalse(node1.isTypeOf());
2296:       assertFalse(node1.isAssign());
2297:       assertFalse(node1.isOr());
2298:       assertFalse(node1.isCall());
2299:       assertFalse(node1.hasMoreThanOneChild());
2300:       assertFalse(node1.isGetElem());
2301:       assertFalse(node1.isCatch());
2302:       assertEquals((-1), node1.getLineno());
2303:       assertFalse(node1.isName());
2304:       assertFalse(node1.isTrue());
2305:       assertFalse(node1.isScript());
2306:       assertFalse(node1.isWith());
2307:       assertFalse(node1.isRegExp());
2308:       assertFalse(node1.isFor());
2309:       assertFalse(node1.isEmpty());
2310:       assertFalse(node1.isDefaultCase());
2311:       assertFalse(node1.hasOneChild());
2312:       assertFalse(node1.isTry());
2313:       assertFalse(node1.isParamList());
2314:       assertFalse(node1.isLabel());
2315:       assertFalse(node1.isNumber());
2316:       assertEquals(0, node1.getChildCount());
2317:       assertFalse(node1.isGetterDef());
2318:       assertFalse(node1.isStringKey());
2319:       assertFalse(node1.isArrayLit());
2320:       assertFalse(node1.isLabelName());
2321:       assertFalse(node1.isInc());
2322:       assertFalse(node1.isSwitch());
2323:       assertEquals((-1), node1.getCharno());
2324:       assertEquals(0, node1.getType());
2325:       assertFalse(node1.isString());
2326:       assertFalse(node1.isHook());
2327:       assertFalse(node1.isThrow());
2328:       assertFalse(node1.isCase());
2329:       assertFalse(node1.isComma());
2330:       assertFalse(node1.isThis());
2331:       assertFalse(node1.isNE());
2332:       assertFalse(node1.isIn());
2333:       assertFalse(node1.isInstanceOf());
2334:       assertFalse(node1.isIf());
2335:       assertFalse(node1.isBreak());
2336:       assertFalse(node1.isVoid());
2337:       assertFalse(node1.isDelProp());
2338:       assertFalse(node1.isExprResult());
2339:       assertFalse(node1.isFunction());
2340:       assertFalse(node1.isDebugger());
2341:       assertFalse(node1.isNot());
2342:       assertFalse(node1.isObjectLit());
2343:       assertFalse(node1.isGetProp());
2344:       assertFalse(node1.isFalse());
2345:       assertEquals((-1), node1.getSourcePosition());
2346:       assertFalse(node1.isAnd());
2347:       assertFalse(node1.isContinue());
2348:       assertFalse(node1.isCast());
2349:       assertFalse(node2.isGetElem());
2350:       assertFalse(node2.isAssign());
2351:       assertFalse(node2.isLabelName());
2352:       assertFalse(node2.isDec());
2353:       assertFalse(node2.isNumber());
2354:       assertFalse(node2.isTypeOf());
2355:       assertEquals((-1), node2.getSourcePosition());
2356:       assertFalse(node2.hasChildren());
2357:       assertFalse(node2.isCast());
2358:       assertEquals((-1), node2.getLineno());
2359:       assertFalse(node2.isExprResult());
2360:       assertFalse(node2.isNot());
2361:       assertFalse(node2.isObjectLit());
2362:       assertFalse(node2.isWith());
2363:       assertFalse(node2.hasMoreThanOneChild());
2364:       assertFalse(node2.isWhile());
2365:       assertFalse(node2.isAnd());
2366:       assertFalse(node2.isReturn());
2367:       assertFalse(node2.isBlock());
2368:       assertFalse(node2.hasOneChild());
2369:       assertFalse(node2.isScript());
2370:       assertFalse(node2.isGetProp());
2371:       assertFalse(node2.isStringKey());
2372:       assertFalse(node2.isName());
2373:       assertFalse(node2.isNull());
2374:       assertFalse(node2.isVar());
2375:       assertFalse(node2.isComma());
2376:       assertEquals(0, node2.getType());
2377:       assertFalse(node2.isParamList());
2378:       assertFalse(node2.isSwitch());
2379:       assertFalse(node2.isCall());
2380:       assertFalse(node2.isBreak());
2381:       assertFalse(node2.isDo());
2382:       assertFalse(node2.isDefaultCase());
2383:       assertEquals(0, node2.getChildCount());
2384:       assertFalse(node2.isTrue());
2385:       assertFalse(node2.isLabel());
2386:       assertFalse(node2.isNew());
2387:       assertFalse(node2.isOr());
2388:       assertFalse(node2.isAdd());
2389:       assertFalse(node2.isAssignAdd());
2390:       assertFalse(node2.isFor());
2391:       assertFalse(node2.isEmpty());
2392:       assertFalse(node2.isIf());
2393:       assertFalse(node2.isNE());
2394:       assertFalse(node2.isGetterDef());
2395:       assertFalse(node2.isVoid());
2396:       assertFalse(node2.isFunction());
2397:       assertFalse(node2.isDelProp());
2398:       assertFalse(node2.isArrayLit());
2399:       assertFalse(node2.isCase());
2400:       assertFalse(node2.isCatch());
2401:       assertFalse(node2.isString());
2402:       assertFalse(node2.isRegExp());
2403:       assertFalse(node2.isDebugger());
2404:       assertEquals((-1), node2.getCharno());
2405:       assertFalse(node2.isTry());
2406:       assertFalse(node2.isFalse());
2407:       assertFalse(node2.isThrow());
2408:       assertFalse(node2.isHook());
2409:       assertFalse(node2.isThis());
2410:       assertFalse(node2.isInstanceOf());
2411:       assertFalse(node2.isContinue());
2412:       assertFalse(node2.isIn());
2413:       assertFalse(node2.isInc());
2414:       assertFalse(node2.isSetterDef());
2415:       assertEquals(56, Node.CHANGE_TIME);
2416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2417:       assertEquals(29, Node.JSDOC_INFO_PROP);
2418:       assertEquals(47, Node.IS_DISPATCHER);
2419:       assertEquals(37, Node.OPT_ARG_NAME);
2420:       assertEquals(12, Node.COLUMN_BITS);
2421:       assertEquals(2, Node.POST_FLAG);
2422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2423:       assertEquals(30, Node.VAR_ARGS_NAME);
2424:       assertEquals(36, Node.QUOTED_PROP);
2425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2426:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2427:       assertEquals(49, Node.DIRECT_EVAL);
2428:       assertEquals(57, Node.LAST_PROP);
2429:       assertEquals(53, Node.INPUT_ID);
2430:       assertEquals(57, Node.REFLECTED_OBJECT);
2431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2432:       assertEquals(55, Node.INFERRED_FUNCTION);
2433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2434:       assertEquals(52, Node.LENGTH);
2435:       assertEquals(8, Node.FLAG_NO_THROWS);
2436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2437:       assertEquals(39, Node.EMPTY_BLOCK);
2438:       assertEquals(48, Node.DIRECTIVES);
2439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2441:       assertEquals(40, Node.ORIGINALNAME_PROP);
2442:       assertEquals(4095, Node.COLUMN_MASK);
2443:       assertEquals(43, Node.IS_CONSTANT_NAME);
2444:       assertEquals(54, Node.SLASH_V);
2445:       assertEquals(1, Node.DECR_FLAG);
2446:       assertEquals(32, Node.INCRDECR_PROP);
2447:       assertEquals(46, Node.IS_NAMESPACE);
2448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2450:       assertEquals(50, Node.FREE_CALL);
2451:       assertEquals(36, Node.QUOTED_PROP);
2452:       assertEquals(43, Node.IS_CONSTANT_NAME);
2453:       assertEquals(53, Node.INPUT_ID);
2454:       assertEquals(8, Node.FLAG_NO_THROWS);
2455:       assertEquals(55, Node.INFERRED_FUNCTION);
2456:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2457:       assertEquals(39, Node.EMPTY_BLOCK);
2458:       assertEquals(50, Node.FREE_CALL);
2459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2460:       assertEquals(2, Node.POST_FLAG);
2461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2462:       assertEquals(47, Node.IS_DISPATCHER);
2463:       assertEquals(40, Node.ORIGINALNAME_PROP);
2464:       assertEquals(49, Node.DIRECT_EVAL);
2465:       assertEquals(30, Node.VAR_ARGS_NAME);
2466:       assertEquals(1, Node.DECR_FLAG);
2467:       assertEquals(57, Node.LAST_PROP);
2468:       assertEquals(12, Node.COLUMN_BITS);
2469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2470:       assertEquals(46, Node.IS_NAMESPACE);
2471:       assertEquals(54, Node.SLASH_V);
2472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2473:       assertEquals(32, Node.INCRDECR_PROP);
2474:       assertEquals(52, Node.LENGTH);
2475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2478:       assertEquals(29, Node.JSDOC_INFO_PROP);
2479:       assertEquals(56, Node.CHANGE_TIME);
2480:       assertEquals(57, Node.REFLECTED_OBJECT);
2481:       assertEquals(48, Node.DIRECTIVES);
2482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2484:       assertEquals(4095, Node.COLUMN_MASK);
2485:       assertEquals(37, Node.OPT_ARG_NAME);
2486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2487:       assertEquals(52, Node.LENGTH);
2488:       assertEquals(57, Node.REFLECTED_OBJECT);
2489:       assertEquals(54, Node.SLASH_V);
2490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2491:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2492:       assertEquals(49, Node.DIRECT_EVAL);
2493:       assertEquals(30, Node.VAR_ARGS_NAME);
2494:       assertEquals(40, Node.ORIGINALNAME_PROP);
2495:       assertEquals(48, Node.DIRECTIVES);
2496:       assertEquals(56, Node.CHANGE_TIME);
2497:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2498:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2500:       assertEquals(57, Node.LAST_PROP);
2501:       assertEquals(36, Node.QUOTED_PROP);
2502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2503:       assertEquals(8, Node.FLAG_NO_THROWS);
2504:       assertEquals(39, Node.EMPTY_BLOCK);
2505:       assertEquals(29, Node.JSDOC_INFO_PROP);
2506:       assertEquals(53, Node.INPUT_ID);
2507:       assertEquals(55, Node.INFERRED_FUNCTION);
2508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2509:       assertEquals(43, Node.IS_CONSTANT_NAME);
2510:       assertEquals(47, Node.IS_DISPATCHER);
2511:       assertEquals(2, Node.POST_FLAG);
2512:       assertEquals(37, Node.OPT_ARG_NAME);
2513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2514:       assertEquals(4095, Node.COLUMN_MASK);
2515:       assertEquals(32, Node.INCRDECR_PROP);
2516:       assertEquals(46, Node.IS_NAMESPACE);
2517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2518:       assertEquals(12, Node.COLUMN_BITS);
2519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2520:       assertEquals(50, Node.FREE_CALL);
2521:       assertEquals(1, Node.DECR_FLAG);
2522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2523:       assertSame(node0, node3);
2524:       assertNotSame(node0, node2);
2525:       assertSame(node0, node1);
2526:       assertSame(node1, node3);
2527:       assertNotSame(node1, node2);
2528:       assertSame(node1, node0);
2529:       assertNotSame(node2, node0);
2530:       assertNotSame(node2, node3);
2531:       assertNotSame(node2, node1);
2532:       assertFalse(node0.equals((Object)node4));
2533:       assertFalse(node0.equals((Object)node2));
2534:       assertFalse(node1.equals((Object)node4));
2535:   }
2536: }
RegularFileObject[/tmp/EvoSuite_178_1628158791231/com/google/javascript/rhino/Node_178_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:19:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_178_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_178_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.common.collect.ImmutableList$SerializedForm",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_178_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.InputId",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.common.collect.Iterators$12",
343:       "com.google.javascript.rhino.JSTypeExpression",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
354:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.common.collect.ImmutableSet",
362:       "com.google.common.collect.EmptyImmutableSet",
363:       "com.google.common.collect.Platform",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.ImmutableList$1"
374:     );
375:   }
376: }

[MASTER] 10:19:51.855 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);

Node node1 = node0.srcref(node0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertSame(node0, node1);

boolean boolean1 = node0.isFunction();
assertFalse(boolean1);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertSame(node0, node1);
assertTrue(boolean1 == boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags3);

String string0 = node0.checkTreeEquals(node1);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertSame(node0, node1);
assertSame(node1, node0);
assertNull(string0);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags4);

Node node2 = node1.cloneTree();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node0, node2);
assertSame(node0, node1);
assertNotSame(node1, node2);
assertSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node1.copyInformationFrom(node0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isEmpty());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isRegExp());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertEquals(0, node3.getType());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isScript());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isWith());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node0, node1);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node1, node0);
assertSame(node3, node0);
assertSame(node3, node1);
assertNotSame(node3, node2);
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));

Node node4 = Node.newString(8, "r77or7S]X8=8p%&7", (-601), 2);
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isCatch());
assertFalse(node4.isParamList());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isWith());
assertFalse(node4.isScript());
assertEquals((-1), node4.getCharno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isTry());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isFalse());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.isDelProp());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isTypeOf());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertFalse(node4.isString());
assertFalse(node4.isWhile());
assertEquals(8, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node4);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));

node4.addChildrenToFront(node2);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isCatch());
assertFalse(node4.isParamList());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertTrue(node4.hasChildren());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isWith());
assertFalse(node4.isScript());
assertEquals((-1), node4.getCharno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isCase());
assertFalse(node4.isTry());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isFalse());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertTrue(node4.hasOneChild());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isTypeOf());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertFalse(node4.isString());
assertFalse(node4.isWhile());
assertEquals(8, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node0, node1);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));

Iterable<Node> iterable0 = node1.children();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node0, node1);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node1, node0);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));

node2.detachChildren();
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node0, node1);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node4));


[MASTER] 10:20:12.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:20:12.968 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/11
* Done!

* Computation finished
