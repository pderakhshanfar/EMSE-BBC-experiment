* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 10874
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2435877679
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:58:13.800 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:58:53.000 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:59:18.011 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 1590
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 20435
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 1590
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 1590
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 391
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1139
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 1732
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 1029
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 4376
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 4143
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 331
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 2808
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 11263
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 1590
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 7730
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 3068
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 9787
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 13005
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 399
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 2545
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 21062
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 1732
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 978
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 1732
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 4199
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1647
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3691
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 223
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 264
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 10926
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 170
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2067
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 562
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 281
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 24410
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 2951
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 109
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 135
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1427
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 12645
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2195: 223
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 892
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 1925
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 892
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 9640
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2197: 223
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 351
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2196: 223
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 419
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 509
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2068
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 318
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 892
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 13806
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 892
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 13327
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 1541
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 5824
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 318
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1590
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2198: 223
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 81
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 5304
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2809
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 405
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 135
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 135
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 223
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 3576
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 31434
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 163
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 111
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearAllFlags()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesThis()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2101: 419
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesThis()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2102: 419
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 4909
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 28627
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 135
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 1046
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 135
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1857
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 1051
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 318
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 8281
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 12087
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1857
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 25341
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 223
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 4857
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 25494
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 15854
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 3843
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 81387
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 1016
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 318
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 3959
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2677
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 489: 36
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 6
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 437
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 4017
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 1269
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 946
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 4047
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 318
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 243
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 150
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 19771
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 2782
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 318
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 18352
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 135
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 3667
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 7838
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 3172
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 684
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4331
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 1838
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 331
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 5865
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 43094
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - false: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 3280
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 25341
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 33093
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1590
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 521
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 102
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 5815
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 91
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 3843
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 250
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 134
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 808
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 1293
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 1293
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 41075
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 419
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4500
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 8281
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 819
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 318
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 4199
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1549
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 7666
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 40516
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 5169
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 33032
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1857
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1857
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 25341
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 8203
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 223
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 44
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 43094
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 81387
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 25341
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1656
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 15938
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 14977
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 3667
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 3843
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1656
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 65
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1733
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 7871
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 892
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 4053
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 46335
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 615
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 318
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 55
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 5824
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 112
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 318
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 10864
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 318
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 15515
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 5581
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 4561
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 170
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 423
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 1125
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1732
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3024
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 135
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 36
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4636
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 200
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 642
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 5455
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 2208
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 97
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 38
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 417
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 3056
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 521
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 3149
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 14572
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 3085
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 1520
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 3149
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3280
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 36
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 55
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 3567
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 2021
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 223
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 135
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 1732
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 468
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 3280
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 318
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 892
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 36
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 218
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1139
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 1439
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 36252
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 5410
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 1291
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 1570
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 419
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 4825
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 4864
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1764
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 892
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1764
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 37133
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1764
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 298
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1764
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 9853
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 4331
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 509
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 3746
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 7630
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 158
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 4376
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 13612
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 21266
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 12251
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 3088
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 768
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 93
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 135
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 44
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1676
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1570
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1679
Number of times BBC is called for com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 25341
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 2190
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1739
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 44
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 1809
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 30307
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 419
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 3925
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 14746
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1811
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 336
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 753
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 50
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 223
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 35
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 223
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 3946
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 708
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 318
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 173
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 892
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1582
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearAllFlags()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2071: 44
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearAllFlags()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2072: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 9535
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 419
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 17825
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 33593
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 363
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 54
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 3843
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 624
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 4970
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 223
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 11
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 6261
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 806
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 11062
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 77
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 733
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3844
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 2110
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 967
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 1420
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 1051
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 768
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 6
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2878
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 2237
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 14422
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 24700
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 14422
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 3334
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 336
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 86
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 8718
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 8718
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 38
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 318
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 19280
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 65
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 135
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 806
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 13909
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 37133
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 5248
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 768
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 3312
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 223
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesThis()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 419
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1783
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 419
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 2696
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3312
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 5304
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 521
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 239
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 3334
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 4864
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 642
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3831
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 344
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 752
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 18929
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 3831
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 175
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 93
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 17568
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 93
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 1732
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 806
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1795
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 135
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1676
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 50
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 10978
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 7677
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 10273
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 3334
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 695
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2547
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 3149
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 2547
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 3688
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 852
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 26024
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 197
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4468
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4501
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 25938
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 9565
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2679
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 4183
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 23100
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1459: 163
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 5274
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 4004
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 253
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 1412
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 318
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 3812
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 223
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 3181
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1855
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 13936
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1767
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 2911
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 13936
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 2100
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 1154
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 615
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 11
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 164
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2746
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 1419
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 83
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 36087
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 1809
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 36087
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 23162
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 419
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 351
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 3992
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 10755
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 10755
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19189
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 25341
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19291
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 521
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 7494
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 17021
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 521
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 21368
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 521
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 2034
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 9667
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 1016
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 521
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 1153
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 2632
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 14380
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 21973
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 18601
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 388
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 892
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 3334
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 892
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 2458
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 15678
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 419
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 223
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 111
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 135
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 367
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 14936
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 720
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 12484
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 8101
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 2034
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 1293
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 23714
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 450: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 449: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 26554
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 23102
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1764
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 2190
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 4914
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 135
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 451: 26
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 23102
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 19317
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 4909
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 2632
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 318
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 8329
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 3819
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 318
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 1655
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 5274
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 642
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 24394
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 36252
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 5274
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 318
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 17899
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 135
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2561
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 521
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 24394
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1759
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 81387
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 5211
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 642
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 318
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 135
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: root-Branch: 223
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 2135
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 7842
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 321
Number of times BBC is called in total: 4089233
* Search finished after 604s and 471 generations, 216798 statements, best individual has fitness: 2974.0
* Minimizing test suite
[MASTER] 11:09:47.731 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 791
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 461
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2112
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 572
* Generated 753 tests with total length 10558
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:10:52.361 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6795166666666667% of time used, but only 43/753 tests minimized), falling back to using all assertions
[MASTER] 11:11:11.650 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 11:11:20.579 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 11:11:33.021 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1628161892908/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1628161892908/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 11:11:33.021 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:11:33.021 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:11:33.024 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 11:11:33.025 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1628161892908/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:11:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(254, "(|");
22:       assertFalse(node0.isNot());
23:       assertFalse(node0.isScript());
24:       assertFalse(node0.isObjectLit());
25:       assertFalse(node0.isExprResult());
26:       assertFalse(node0.isWith());
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isAnd());
29:       assertFalse(node0.isLabelName());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isFalse());
32:       assertFalse(node0.isLabel());
33:       assertFalse(node0.isThrow());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.isCase());
36:       assertFalse(node0.isInc());
37:       assertFalse(node0.hasMoreThanOneChild());
38:       assertFalse(node0.isIn());
39:       assertEquals(254, node0.getType());
40:       assertEquals((-1), node0.getLineno());
41:       assertEquals((-1), node0.getCharno());
42:       assertFalse(node0.isStringKey());
43:       assertFalse(node0.isNE());
44:       assertFalse(node0.isIf());
45:       assertFalse(node0.isSwitch());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isFor());
48:       assertFalse(node0.isNumber());
49:       assertFalse(node0.isTry());
50:       assertFalse(node0.isBlock());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.isDebugger());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isCatch());
57:       assertFalse(node0.isRegExp());
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isSetterDef());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isNew());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isWhile());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isGetElem());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isGetProp());
88:       assertEquals(48, Node.DIRECTIVES);
89:       assertEquals(39, Node.EMPTY_BLOCK);
90:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(43, Node.IS_CONSTANT_NAME);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(29, Node.JSDOC_INFO_PROP);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(1, Node.DECR_FLAG);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(57, Node.REFLECTED_OBJECT);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(56, Node.CHANGE_TIME);
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(node0.isNot());
128:       assertFalse(node0.isScript());
129:       assertFalse(node0.isObjectLit());
130:       assertFalse(node0.isExprResult());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isInstanceOf());
133:       assertFalse(node0.isAnd());
134:       assertFalse(node0.isLabelName());
135:       assertFalse(node0.isCast());
136:       assertFalse(node0.isFalse());
137:       assertFalse(node0.isLabel());
138:       assertFalse(node0.isThrow());
139:       assertFalse(node0.isAssignAdd());
140:       assertFalse(node0.isCase());
141:       assertFalse(node0.isInc());
142:       assertFalse(node0.hasMoreThanOneChild());
143:       assertFalse(node0.isIn());
144:       assertEquals(254, node0.getType());
145:       assertEquals((-1), node0.getLineno());
146:       assertEquals((-1), node0.getCharno());
147:       assertFalse(node0.isStringKey());
148:       assertFalse(node0.isNE());
149:       assertFalse(node0.isIf());
150:       assertFalse(node0.isSwitch());
151:       assertFalse(node0.isGetterDef());
152:       assertFalse(node0.isFor());
153:       assertFalse(node0.isNumber());
154:       assertFalse(node0.isTry());
155:       assertFalse(node0.isBlock());
156:       assertFalse(node0.hasOneChild());
157:       assertFalse(node0.isHook());
158:       assertFalse(node0.isThis());
159:       assertFalse(node0.isDebugger());
160:       assertFalse(node0.isFunction());
161:       assertFalse(node0.isCatch());
162:       assertFalse(node0.isRegExp());
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isTrue());
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isEmpty());
168:       assertFalse(node0.isNull());
169:       assertFalse(node0.isSetterDef());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isNew());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isDefaultCase());
175:       assertFalse(node0.isWhile());
176:       assertFalse(node0.isString());
177:       assertFalse(node0.isDo());
178:       assertFalse(node0.isContinue());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isDelProp());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isGetElem());
185:       assertEquals((-1), node0.getSourcePosition());
186:       assertFalse(node0.hasChildren());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.isCall());
189:       assertFalse(node0.isComma());
190:       assertFalse(node0.isTypeOf());
191:       assertFalse(node0.isReturn());
192:       assertFalse(node0.isGetProp());
193:       assertEquals(48, Node.DIRECTIVES);
194:       assertEquals(39, Node.EMPTY_BLOCK);
195:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(40, Node.ORIGINALNAME_PROP);
204:       assertEquals(50, Node.FREE_CALL);
205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(29, Node.JSDOC_INFO_PROP);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(1, Node.DECR_FLAG);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(57, Node.LAST_PROP);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(57, Node.REFLECTED_OBJECT);
227:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertFalse(iterable0.contains(node0));
230:       assertNotNull(iterable0);
231:       
232:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
233:       assertFalse(node0.isNot());
234:       assertFalse(node0.isScript());
235:       assertFalse(node0.isObjectLit());
236:       assertFalse(node0.isExprResult());
237:       assertFalse(node0.isWith());
238:       assertFalse(node0.isInstanceOf());
239:       assertFalse(node0.isAnd());
240:       assertFalse(node0.isLabelName());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isFalse());
243:       assertFalse(node0.isLabel());
244:       assertFalse(node0.isThrow());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.isCase());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.hasMoreThanOneChild());
249:       assertFalse(node0.isIn());
250:       assertEquals(254, node0.getType());
251:       assertEquals((-1), node0.getLineno());
252:       assertEquals((-1), node0.getCharno());
253:       assertFalse(node0.isStringKey());
254:       assertFalse(node0.isNE());
255:       assertFalse(node0.isIf());
256:       assertFalse(node0.isSwitch());
257:       assertFalse(node0.isGetterDef());
258:       assertFalse(node0.isFor());
259:       assertFalse(node0.isNumber());
260:       assertFalse(node0.isTry());
261:       assertFalse(node0.isBlock());
262:       assertFalse(node0.hasOneChild());
263:       assertFalse(node0.isHook());
264:       assertFalse(node0.isThis());
265:       assertFalse(node0.isDebugger());
266:       assertFalse(node0.isFunction());
267:       assertFalse(node0.isCatch());
268:       assertFalse(node0.isRegExp());
269:       assertFalse(node0.isArrayLit());
270:       assertFalse(node0.isTrue());
271:       assertFalse(node0.isParamList());
272:       assertFalse(node0.isVoid());
273:       assertFalse(node0.isEmpty());
274:       assertFalse(node0.isNull());
275:       assertFalse(node0.isSetterDef());
276:       assertEquals(0, node0.getChildCount());
277:       assertFalse(node0.isAdd());
278:       assertFalse(node0.isNew());
279:       assertFalse(node0.isVar());
280:       assertFalse(node0.isDefaultCase());
281:       assertFalse(node0.isWhile());
282:       assertFalse(node0.isString());
283:       assertFalse(node0.isDo());
284:       assertFalse(node0.isContinue());
285:       assertFalse(node0.isOr());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isDelProp());
288:       assertFalse(node0.isDec());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isGetElem());
291:       assertEquals((-1), node0.getSourcePosition());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isCall());
295:       assertFalse(node0.isComma());
296:       assertFalse(node0.isTypeOf());
297:       assertFalse(node0.isReturn());
298:       assertFalse(node0.isGetProp());
299:       assertFalse(node1.isExprResult());
300:       assertFalse(node1.isScript());
301:       assertFalse(node1.isWith());
302:       assertFalse(node1.isNot());
303:       assertFalse(node1.isGetElem());
304:       assertFalse(node1.isAnd());
305:       assertFalse(node1.isCast());
306:       assertFalse(node1.isLabelName());
307:       assertFalse(node1.isAssignAdd());
308:       assertFalse(node1.isLabel());
309:       assertFalse(node1.isOr());
310:       assertFalse(node1.isThrow());
311:       assertFalse(node1.isDo());
312:       assertFalse(node1.isNew());
313:       assertFalse(node1.isAdd());
314:       assertFalse(node1.isName());
315:       assertFalse(node1.isFalse());
316:       assertFalse(node1.isContinue());
317:       assertFalse(node1.isCall());
318:       assertFalse(node1.isBreak());
319:       assertFalse(node1.isGetProp());
320:       assertFalse(node1.isReturn());
321:       assertFalse(node1.isDec());
322:       assertFalse(node1.isTypeOf());
323:       assertFalse(node1.isComma());
324:       assertFalse(node1.isAssign());
325:       assertFalse(node1.isObjectLit());
326:       assertFalse(node1.isWhile());
327:       assertFalse(node1.isString());
328:       assertTrue(node1.hasOneChild());
329:       assertFalse(node1.isDebugger());
330:       assertFalse(node1.isTrue());
331:       assertFalse(node1.isFunction());
332:       assertFalse(node1.isRegExp());
333:       assertFalse(node1.isCatch());
334:       assertFalse(node1.isIf());
335:       assertFalse(node1.isArrayLit());
336:       assertFalse(node1.isVoid());
337:       assertFalse(node1.isDelProp());
338:       assertFalse(node1.isSetterDef());
339:       assertFalse(node1.isNE());
340:       assertFalse(node1.isNull());
341:       assertEquals(37, node1.getLineno());
342:       assertFalse(node1.isIn());
343:       assertFalse(node1.isVar());
344:       assertFalse(node1.isEmpty());
345:       assertFalse(node1.isDefaultCase());
346:       assertFalse(node1.isBlock());
347:       assertEquals((-2145), node1.getType());
348:       assertFalse(node1.isInc());
349:       assertFalse(node1.isHook());
350:       assertEquals(4095, node1.getCharno());
351:       assertFalse(node1.isStringKey());
352:       assertFalse(node1.isSwitch());
353:       assertFalse(node1.isThis());
354:       assertFalse(node1.isParamList());
355:       assertTrue(node1.hasChildren());
356:       assertFalse(node1.isInstanceOf());
357:       assertFalse(node1.isNumber());
358:       assertFalse(node1.hasMoreThanOneChild());
359:       assertEquals(1, node1.getChildCount());
360:       assertFalse(node1.isGetterDef());
361:       assertFalse(node1.isCase());
362:       assertFalse(node1.isFor());
363:       assertEquals(155647, node1.getSourcePosition());
364:       assertFalse(node1.isTry());
365:       assertFalse(node1.equals((Object)node0));
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
371:       assertEquals(8, Node.FLAG_NO_THROWS);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
375:       assertEquals(54, Node.SLASH_V);
376:       assertEquals(40, Node.ORIGINALNAME_PROP);
377:       assertEquals(50, Node.FREE_CALL);
378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
379:       assertEquals(46, Node.IS_NAMESPACE);
380:       assertEquals(43, Node.IS_CONSTANT_NAME);
381:       assertEquals(2, Node.POST_FLAG);
382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
383:       assertEquals(37, Node.OPT_ARG_NAME);
384:       assertEquals(29, Node.JSDOC_INFO_PROP);
385:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
386:       assertEquals(1, Node.DECR_FLAG);
387:       assertEquals(30, Node.VAR_ARGS_NAME);
388:       assertEquals(57, Node.LAST_PROP);
389:       assertEquals(47, Node.IS_DISPATCHER);
390:       assertEquals(12, Node.COLUMN_BITS);
391:       assertEquals(32, Node.INCRDECR_PROP);
392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
393:       assertEquals(53, Node.INPUT_ID);
394:       assertEquals(36, Node.QUOTED_PROP);
395:       assertEquals(15, Node.NO_SIDE_EFFECTS);
396:       assertEquals(52, Node.LENGTH);
397:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
398:       assertEquals(49, Node.DIRECT_EVAL);
399:       assertEquals(57, Node.REFLECTED_OBJECT);
400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
401:       assertEquals(56, Node.CHANGE_TIME);
402:       assertEquals(4095, Node.COLUMN_MASK);
403:       assertEquals(55, Node.INFERRED_FUNCTION);
404:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
405:       assertEquals(8, Node.FLAG_NO_THROWS);
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(53, Node.INPUT_ID);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(50, Node.FREE_CALL);
411:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(30, Node.VAR_ARGS_NAME);
418:       assertEquals(2, Node.POST_FLAG);
419:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(56, Node.CHANGE_TIME);
432:       assertEquals(36, Node.QUOTED_PROP);
433:       assertEquals(37, Node.OPT_ARG_NAME);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertNotNull(node1);
439:       
440:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
441:       assertFalse(node2.isNew());
442:       assertFalse(node2.isCall());
443:       assertFalse(node2.isAdd());
444:       assertFalse(node2.isNull());
445:       assertFalse(node2.isName());
446:       assertFalse(node2.isStringKey());
447:       assertFalse(node2.isParamList());
448:       assertEquals(0, node2.getChildCount());
449:       assertFalse(node2.isOr());
450:       assertFalse(node2.isLabel());
451:       assertFalse(node2.isContinue());
452:       assertFalse(node2.isSetterDef());
453:       assertFalse(node2.isDefaultCase());
454:       assertFalse(node2.isDo());
455:       assertEquals(40, node2.getType());
456:       assertFalse(node2.isVar());
457:       assertFalse(node2.isAssignAdd());
458:       assertFalse(node2.isGetElem());
459:       assertFalse(node2.isFunction());
460:       assertFalse(node2.isExprResult());
461:       assertFalse(node2.isCast());
462:       assertFalse(node2.isEmpty());
463:       assertFalse(node2.isDelProp());
464:       assertFalse(node2.isNot());
465:       assertFalse(node2.isDebugger());
466:       assertEquals((-1), node2.getSourcePosition());
467:       assertFalse(node2.isAnd());
468:       assertFalse(node2.isVoid());
469:       assertFalse(node2.isTrue());
470:       assertFalse(node2.isReturn());
471:       assertFalse(node2.isGetProp());
472:       assertFalse(node2.isObjectLit());
473:       assertFalse(node2.hasChildren());
474:       assertFalse(node2.isTypeOf());
475:       assertFalse(node2.isAssign());
476:       assertFalse(node2.isDec());
477:       assertFalse(node2.isComma());
478:       assertFalse(node2.isWhile());
479:       assertFalse(node2.isHook());
480:       assertFalse(node2.isFalse());
481:       assertFalse(node2.isInc());
482:       assertFalse(node2.isBreak());
483:       assertEquals((-1), node2.getCharno());
484:       assertFalse(node2.isSwitch());
485:       assertFalse(node2.isIn());
486:       assertFalse(node2.isThrow());
487:       assertFalse(node2.isTry());
488:       assertFalse(node2.hasOneChild());
489:       assertFalse(node2.isArrayLit());
490:       assertFalse(node2.isScript());
491:       assertFalse(node2.isIf());
492:       assertFalse(node2.isGetterDef());
493:       assertFalse(node2.isNumber());
494:       assertFalse(node2.isLabelName());
495:       assertFalse(node2.isNE());
496:       assertEquals((-1), node2.getLineno());
497:       assertFalse(node2.isCatch());
498:       assertFalse(node2.hasMoreThanOneChild());
499:       assertFalse(node2.isWith());
500:       assertFalse(node2.isInstanceOf());
501:       assertFalse(node2.isRegExp());
502:       assertFalse(node2.isCase());
503:       assertFalse(node2.isBlock());
504:       assertTrue(node2.isString());
505:       assertFalse(node2.isThis());
506:       assertFalse(node2.isFor());
507:       assertNotSame(node2, node0);
508:       assertFalse(node2.equals((Object)node1));
509:       assertFalse(node2.equals((Object)node0));
510:       assertEquals(30, Node.VAR_ARGS_NAME);
511:       assertEquals(49, Node.DIRECT_EVAL);
512:       assertEquals(1, Node.DECR_FLAG);
513:       assertEquals(15, Node.NO_SIDE_EFFECTS);
514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
515:       assertEquals(2, Node.POST_FLAG);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(12, Node.COLUMN_BITS);
518:       assertEquals(57, Node.LAST_PROP);
519:       assertEquals(47, Node.IS_DISPATCHER);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
523:       assertEquals(40, Node.ORIGINALNAME_PROP);
524:       assertEquals(43, Node.IS_CONSTANT_NAME);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(46, Node.IS_NAMESPACE);
527:       assertEquals(54, Node.SLASH_V);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(53, Node.INPUT_ID);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
535:       assertEquals(39, Node.EMPTY_BLOCK);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(37, Node.OPT_ARG_NAME);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       assertEquals(36, Node.QUOTED_PROP);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
546:       assertNotNull(node2);
547:       
548:       String string0 = node2.toStringTree();
549:       assertFalse(node2.isNew());
550:       assertFalse(node2.isCall());
551:       assertFalse(node2.isAdd());
552:       assertFalse(node2.isNull());
553:       assertFalse(node2.isName());
554:       assertFalse(node2.isStringKey());
555:       assertFalse(node2.isParamList());
556:       assertEquals(0, node2.getChildCount());
557:       assertFalse(node2.isOr());
558:       assertFalse(node2.isLabel());
559:       assertFalse(node2.isContinue());
560:       assertFalse(node2.isSetterDef());
561:       assertFalse(node2.isDefaultCase());
562:       assertFalse(node2.isDo());
563:       assertEquals(40, node2.getType());
564:       assertFalse(node2.isVar());
565:       assertFalse(node2.isAssignAdd());
566:       assertFalse(node2.isGetElem());
567:       assertFalse(node2.isFunction());
568:       assertFalse(node2.isExprResult());
569:       assertFalse(node2.isCast());
570:       assertFalse(node2.isEmpty());
571:       assertFalse(node2.isDelProp());
572:       assertFalse(node2.isNot());
573:       assertFalse(node2.isDebugger());
574:       assertEquals((-1), node2.getSourcePosition());
575:       assertFalse(node2.isAnd());
576:       assertFalse(node2.isVoid());
577:       assertFalse(node2.isTrue());
578:       assertFalse(node2.isReturn());
579:       assertFalse(node2.isGetProp());
580:       assertFalse(node2.isObjectLit());
581:       assertFalse(node2.hasChildren());
582:       assertFalse(node2.isTypeOf());
583:       assertFalse(node2.isAssign());
584:       assertFalse(node2.isDec());
585:       assertFalse(node2.isComma());
586:       assertFalse(node2.isWhile());
587:       assertFalse(node2.isHook());
588:       assertFalse(node2.isFalse());
589:       assertFalse(node2.isInc());
590:       assertFalse(node2.isBreak());
591:       assertEquals((-1), node2.getCharno());
592:       assertFalse(node2.isSwitch());
593:       assertFalse(node2.isIn());
594:       assertFalse(node2.isThrow());
595:       assertFalse(node2.isTry());
596:       assertFalse(node2.hasOneChild());
597:       assertFalse(node2.isArrayLit());
598:       assertFalse(node2.isScript());
599:       assertFalse(node2.isIf());
600:       assertFalse(node2.isGetterDef());
601:       assertFalse(node2.isNumber());
602:       assertFalse(node2.isLabelName());
603:       assertFalse(node2.isNE());
604:       assertEquals((-1), node2.getLineno());
605:       assertFalse(node2.isCatch());
606:       assertFalse(node2.hasMoreThanOneChild());
607:       assertFalse(node2.isWith());
608:       assertFalse(node2.isInstanceOf());
609:       assertFalse(node2.isRegExp());
610:       assertFalse(node2.isCase());
611:       assertFalse(node2.isBlock());
612:       assertTrue(node2.isString());
613:       assertFalse(node2.isThis());
614:       assertFalse(node2.isFor());
615:       assertNotSame(node2, node0);
616:       assertFalse(node2.equals((Object)node1));
617:       assertFalse(node2.equals((Object)node0));
618:       assertEquals(30, Node.VAR_ARGS_NAME);
619:       assertEquals(49, Node.DIRECT_EVAL);
620:       assertEquals(1, Node.DECR_FLAG);
621:       assertEquals(15, Node.NO_SIDE_EFFECTS);
622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
623:       assertEquals(2, Node.POST_FLAG);
624:       assertEquals(32, Node.INCRDECR_PROP);
625:       assertEquals(12, Node.COLUMN_BITS);
626:       assertEquals(57, Node.LAST_PROP);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
629:       assertEquals(50, Node.FREE_CALL);
630:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(43, Node.IS_CONSTANT_NAME);
633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
634:       assertEquals(46, Node.IS_NAMESPACE);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(4095, Node.COLUMN_MASK);
637:       assertEquals(55, Node.INFERRED_FUNCTION);
638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
643:       assertEquals(39, Node.EMPTY_BLOCK);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
646:       assertEquals(52, Node.LENGTH);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(8, Node.FLAG_NO_THROWS);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(57, Node.REFLECTED_OBJECT);
653:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
654:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
655:       assertNotNull(string0);
656:       
657:       int int0 = node1.getIntProp(254);
658:       assertFalse(node0.isNot());
659:       assertFalse(node0.isScript());
660:       assertFalse(node0.isObjectLit());
661:       assertFalse(node0.isExprResult());
662:       assertFalse(node0.isWith());
663:       assertFalse(node0.isInstanceOf());
664:       assertFalse(node0.isAnd());
665:       assertFalse(node0.isLabelName());
666:       assertFalse(node0.isCast());
667:       assertFalse(node0.isFalse());
668:       assertFalse(node0.isLabel());
669:       assertFalse(node0.isThrow());
670:       assertFalse(node0.isAssignAdd());
671:       assertFalse(node0.isCase());
672:       assertFalse(node0.isInc());
673:       assertFalse(node0.hasMoreThanOneChild());
674:       assertFalse(node0.isIn());
675:       assertEquals(254, node0.getType());
676:       assertEquals((-1), node0.getLineno());
677:       assertEquals((-1), node0.getCharno());
678:       assertFalse(node0.isStringKey());
679:       assertFalse(node0.isNE());
680:       assertFalse(node0.isIf());
681:       assertFalse(node0.isSwitch());
682:       assertFalse(node0.isGetterDef());
683:       assertFalse(node0.isFor());
684:       assertFalse(node0.isNumber());
685:       assertFalse(node0.isTry());
686:       assertFalse(node0.isBlock());
687:       assertFalse(node0.hasOneChild());
688:       assertFalse(node0.isHook());
689:       assertFalse(node0.isThis());
690:       assertFalse(node0.isDebugger());
691:       assertFalse(node0.isFunction());
692:       assertFalse(node0.isCatch());
693:       assertFalse(node0.isRegExp());
694:       assertFalse(node0.isArrayLit());
695:       assertFalse(node0.isTrue());
696:       assertFalse(node0.isParamList());
697:       assertFalse(node0.isVoid());
698:       assertFalse(node0.isEmpty());
699:       assertFalse(node0.isNull());
700:       assertFalse(node0.isSetterDef());
701:       assertEquals(0, node0.getChildCount());
702:       assertFalse(node0.isAdd());
703:       assertFalse(node0.isNew());
704:       assertFalse(node0.isVar());
705:       assertFalse(node0.isDefaultCase());
706:       assertFalse(node0.isWhile());
707:       assertFalse(node0.isString());
708:       assertFalse(node0.isDo());
709:       assertFalse(node0.isContinue());
710:       assertFalse(node0.isOr());
711:       assertFalse(node0.isName());
712:       assertFalse(node0.isDelProp());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.isAssign());
715:       assertFalse(node0.isGetElem());
716:       assertEquals((-1), node0.getSourcePosition());
717:       assertFalse(node0.hasChildren());
718:       assertFalse(node0.isBreak());
719:       assertFalse(node0.isCall());
720:       assertFalse(node0.isComma());
721:       assertFalse(node0.isTypeOf());
722:       assertFalse(node0.isReturn());
723:       assertFalse(node0.isGetProp());
724:       assertFalse(node1.isExprResult());
725:       assertFalse(node1.isScript());
726:       assertFalse(node1.isWith());
727:       assertFalse(node1.isNot());
728:       assertFalse(node1.isGetElem());
729:       assertFalse(node1.isAnd());
730:       assertFalse(node1.isCast());
731:       assertFalse(node1.isLabelName());
732:       assertFalse(node1.isAssignAdd());
733:       assertFalse(node1.isLabel());
734:       assertFalse(node1.isOr());
735:       assertFalse(node1.isThrow());
736:       assertFalse(node1.isDo());
737:       assertFalse(node1.isNew());
738:       assertFalse(node1.isAdd());
739:       assertFalse(node1.isName());
740:       assertFalse(node1.isFalse());
741:       assertFalse(node1.isContinue());
742:       assertFalse(node1.isCall());
743:       assertFalse(node1.isBreak());
744:       assertFalse(node1.isGetProp());
745:       assertFalse(node1.isReturn());
746:       assertFalse(node1.isDec());
747:       assertFalse(node1.isTypeOf());
748:       assertFalse(node1.isComma());
749:       assertFalse(node1.isAssign());
750:       assertFalse(node1.isObjectLit());
751:       assertFalse(node1.isWhile());
752:       assertFalse(node1.isString());
753:       assertTrue(node1.hasOneChild());
754:       assertFalse(node1.isDebugger());
755:       assertFalse(node1.isTrue());
756:       assertFalse(node1.isFunction());
757:       assertFalse(node1.isRegExp());
758:       assertFalse(node1.isCatch());
759:       assertFalse(node1.isIf());
760:       assertFalse(node1.isArrayLit());
761:       assertFalse(node1.isVoid());
762:       assertFalse(node1.isDelProp());
763:       assertFalse(node1.isSetterDef());
764:       assertFalse(node1.isNE());
765:       assertFalse(node1.isNull());
766:       assertEquals(37, node1.getLineno());
767:       assertFalse(node1.isIn());
768:       assertFalse(node1.isVar());
769:       assertFalse(node1.isEmpty());
770:       assertFalse(node1.isDefaultCase());
771:       assertFalse(node1.isBlock());
772:       assertEquals((-2145), node1.getType());
773:       assertFalse(node1.isInc());
774:       assertFalse(node1.isHook());
775:       assertEquals(4095, node1.getCharno());
776:       assertFalse(node1.isStringKey());
777:       assertFalse(node1.isSwitch());
778:       assertFalse(node1.isThis());
779:       assertFalse(node1.isParamList());
780:       assertTrue(node1.hasChildren());
781:       assertFalse(node1.isInstanceOf());
782:       assertFalse(node1.isNumber());
783:       assertFalse(node1.hasMoreThanOneChild());
784:       assertEquals(1, node1.getChildCount());
785:       assertFalse(node1.isGetterDef());
786:       assertFalse(node1.isCase());
787:       assertFalse(node1.isFor());
788:       assertEquals(155647, node1.getSourcePosition());
789:       assertFalse(node1.isTry());
790:       assertNotSame(node0, node2);
791:       assertFalse(node0.equals((Object)node2));
792:       assertFalse(node0.equals((Object)node1));
793:       assertFalse(node1.equals((Object)node2));
794:       assertFalse(node1.equals((Object)node0));
795:       assertEquals(48, Node.DIRECTIVES);
796:       assertEquals(39, Node.EMPTY_BLOCK);
797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
798:       assertEquals(55, Node.INFERRED_FUNCTION);
799:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
800:       assertEquals(8, Node.FLAG_NO_THROWS);
801:       assertEquals(4095, Node.COLUMN_MASK);
802:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
803:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
804:       assertEquals(54, Node.SLASH_V);
805:       assertEquals(40, Node.ORIGINALNAME_PROP);
806:       assertEquals(50, Node.FREE_CALL);
807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
808:       assertEquals(46, Node.IS_NAMESPACE);
809:       assertEquals(43, Node.IS_CONSTANT_NAME);
810:       assertEquals(2, Node.POST_FLAG);
811:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
812:       assertEquals(37, Node.OPT_ARG_NAME);
813:       assertEquals(29, Node.JSDOC_INFO_PROP);
814:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
815:       assertEquals(1, Node.DECR_FLAG);
816:       assertEquals(30, Node.VAR_ARGS_NAME);
817:       assertEquals(57, Node.LAST_PROP);
818:       assertEquals(47, Node.IS_DISPATCHER);
819:       assertEquals(12, Node.COLUMN_BITS);
820:       assertEquals(32, Node.INCRDECR_PROP);
821:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
822:       assertEquals(53, Node.INPUT_ID);
823:       assertEquals(36, Node.QUOTED_PROP);
824:       assertEquals(15, Node.NO_SIDE_EFFECTS);
825:       assertEquals(52, Node.LENGTH);
826:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
827:       assertEquals(49, Node.DIRECT_EVAL);
828:       assertEquals(57, Node.REFLECTED_OBJECT);
829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
830:       assertEquals(56, Node.CHANGE_TIME);
831:       assertEquals(4095, Node.COLUMN_MASK);
832:       assertEquals(55, Node.INFERRED_FUNCTION);
833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
834:       assertEquals(8, Node.FLAG_NO_THROWS);
835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
836:       assertEquals(39, Node.EMPTY_BLOCK);
837:       assertEquals(53, Node.INPUT_ID);
838:       assertEquals(40, Node.ORIGINALNAME_PROP);
839:       assertEquals(50, Node.FREE_CALL);
840:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
841:       assertEquals(43, Node.IS_CONSTANT_NAME);
842:       assertEquals(54, Node.SLASH_V);
843:       assertEquals(12, Node.COLUMN_BITS);
844:       assertEquals(51, Node.STATIC_SOURCE_FILE);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(30, Node.VAR_ARGS_NAME);
847:       assertEquals(2, Node.POST_FLAG);
848:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
849:       assertEquals(15, Node.NO_SIDE_EFFECTS);
850:       assertEquals(47, Node.IS_DISPATCHER);
851:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
852:       assertEquals(1, Node.DECR_FLAG);
853:       assertEquals(57, Node.LAST_PROP);
854:       assertEquals(32, Node.INCRDECR_PROP);
855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
858:       assertEquals(29, Node.JSDOC_INFO_PROP);
859:       assertEquals(52, Node.LENGTH);
860:       assertEquals(56, Node.CHANGE_TIME);
861:       assertEquals(36, Node.QUOTED_PROP);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(49, Node.DIRECT_EVAL);
865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
866:       assertEquals(48, Node.DIRECTIVES);
867:       assertEquals(0, int0);
868:       
869:       boolean boolean0 = node1.isLocalResultCall();
870:       assertFalse(node0.isNot());
871:       assertFalse(node0.isScript());
872:       assertFalse(node0.isObjectLit());
873:       assertFalse(node0.isExprResult());
874:       assertFalse(node0.isWith());
875:       assertFalse(node0.isInstanceOf());
876:       assertFalse(node0.isAnd());
877:       assertFalse(node0.isLabelName());
878:       assertFalse(node0.isCast());
879:       assertFalse(node0.isFalse());
880:       assertFalse(node0.isLabel());
881:       assertFalse(node0.isThrow());
882:       assertFalse(node0.isAssignAdd());
883:       assertFalse(node0.isCase());
884:       assertFalse(node0.isInc());
885:       assertFalse(node0.hasMoreThanOneChild());
886:       assertFalse(node0.isIn());
887:       assertEquals(254, node0.getType());
888:       assertEquals((-1), node0.getLineno());
889:       assertEquals((-1), node0.getCharno());
890:       assertFalse(node0.isStringKey());
891:       assertFalse(node0.isNE());
892:       assertFalse(node0.isIf());
893:       assertFalse(node0.isSwitch());
894:       assertFalse(node0.isGetterDef());
895:       assertFalse(node0.isFor());
896:       assertFalse(node0.isNumber());
897:       assertFalse(node0.isTry());
898:       assertFalse(node0.isBlock());
899:       assertFalse(node0.hasOneChild());
900:       assertFalse(node0.isHook());
901:       assertFalse(node0.isThis());
902:       assertFalse(node0.isDebugger());
903:       assertFalse(node0.isFunction());
904:       assertFalse(node0.isCatch());
905:       assertFalse(node0.isRegExp());
906:       assertFalse(node0.isArrayLit());
907:       assertFalse(node0.isTrue());
908:       assertFalse(node0.isParamList());
909:       assertFalse(node0.isVoid());
910:       assertFalse(node0.isEmpty());
911:       assertFalse(node0.isNull());
912:       assertFalse(node0.isSetterDef());
913:       assertEquals(0, node0.getChildCount());
914:       assertFalse(node0.isAdd());
915:       assertFalse(node0.isNew());
916:       assertFalse(node0.isVar());
917:       assertFalse(node0.isDefaultCase());
918:       assertFalse(node0.isWhile());
919:       assertFalse(node0.isString());
920:       assertFalse(node0.isDo());
921:       assertFalse(node0.isContinue());
922:       assertFalse(node0.isOr());
923:       assertFalse(node0.isName());
924:       assertFalse(node0.isDelProp());
925:       assertFalse(node0.isDec());
926:       assertFalse(node0.isAssign());
927:       assertFalse(node0.isGetElem());
928:       assertEquals((-1), node0.getSourcePosition());
929:       assertFalse(node0.hasChildren());
930:       assertFalse(node0.isBreak());
931:       assertFalse(node0.isCall());
932:       assertFalse(node0.isComma());
933:       assertFalse(node0.isTypeOf());
934:       assertFalse(node0.isReturn());
935:       assertFalse(node0.isGetProp());
936:       assertFalse(node1.isExprResult());
937:       assertFalse(node1.isScript());
938:       assertFalse(node1.isWith());
939:       assertFalse(node1.isNot());
940:       assertFalse(node1.isGetElem());
941:       assertFalse(node1.isAnd());
942:       assertFalse(node1.isCast());
943:       assertFalse(node1.isLabelName());
944:       assertFalse(node1.isAssignAdd());
945:       assertFalse(node1.isLabel());
946:       assertFalse(node1.isOr());
947:       assertFalse(node1.isThrow());
948:       assertFalse(node1.isDo());
949:       assertFalse(node1.isNew());
950:       assertFalse(node1.isAdd());
951:       assertFalse(node1.isName());
952:       assertFalse(node1.isFalse());
953:       assertFalse(node1.isContinue());
954:       assertFalse(node1.isCall());
955:       assertFalse(node1.isBreak());
956:       assertFalse(node1.isGetProp());
957:       assertFalse(node1.isReturn());
958:       assertFalse(node1.isDec());
959:       assertFalse(node1.isTypeOf());
960:       assertFalse(node1.isComma());
961:       assertFalse(node1.isAssign());
962:       assertFalse(node1.isObjectLit());
963:       assertFalse(node1.isWhile());
964:       assertFalse(node1.isString());
965:       assertTrue(node1.hasOneChild());
966:       assertFalse(node1.isDebugger());
967:       assertFalse(node1.isTrue());
968:       assertFalse(node1.isFunction());
969:       assertFalse(node1.isRegExp());
970:       assertFalse(node1.isCatch());
971:       assertFalse(node1.isIf());
972:       assertFalse(node1.isArrayLit());
973:       assertFalse(node1.isVoid());
974:       assertFalse(node1.isDelProp());
975:       assertFalse(node1.isSetterDef());
976:       assertFalse(node1.isNE());
977:       assertFalse(node1.isNull());
978:       assertEquals(37, node1.getLineno());
979:       assertFalse(node1.isIn());
980:       assertFalse(node1.isVar());
981:       assertFalse(node1.isEmpty());
982:       assertFalse(node1.isDefaultCase());
983:       assertFalse(node1.isBlock());
984:       assertEquals((-2145), node1.getType());
985:       assertFalse(node1.isInc());
986:       assertFalse(node1.isHook());
987:       assertEquals(4095, node1.getCharno());
988:       assertFalse(node1.isStringKey());
989:       assertFalse(node1.isSwitch());
990:       assertFalse(node1.isThis());
991:       assertFalse(node1.isParamList());
992:       assertTrue(node1.hasChildren());
993:       assertFalse(node1.isInstanceOf());
994:       assertFalse(node1.isNumber());
995:       assertFalse(node1.hasMoreThanOneChild());
996:       assertEquals(1, node1.getChildCount());
997:       assertFalse(node1.isGetterDef());
998:       assertFalse(node1.isCase());
999:       assertFalse(node1.isFor());
1000:       assertEquals(155647, node1.getSourcePosition());
1001:       assertFalse(node1.isTry());
1002:       assertNotSame(node0, node2);
1003:       assertFalse(node0.equals((Object)node2));
1004:       assertFalse(node0.equals((Object)node1));
1005:       assertFalse(node1.equals((Object)node2));
1006:       assertFalse(node1.equals((Object)node0));
1007:       assertEquals(48, Node.DIRECTIVES);
1008:       assertEquals(39, Node.EMPTY_BLOCK);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(55, Node.INFERRED_FUNCTION);
1011:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1012:       assertEquals(8, Node.FLAG_NO_THROWS);
1013:       assertEquals(4095, Node.COLUMN_MASK);
1014:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1015:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1016:       assertEquals(54, Node.SLASH_V);
1017:       assertEquals(40, Node.ORIGINALNAME_PROP);
1018:       assertEquals(50, Node.FREE_CALL);
1019:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1020:       assertEquals(46, Node.IS_NAMESPACE);
1021:       assertEquals(43, Node.IS_CONSTANT_NAME);
1022:       assertEquals(2, Node.POST_FLAG);
1023:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1024:       assertEquals(37, Node.OPT_ARG_NAME);
1025:       assertEquals(29, Node.JSDOC_INFO_PROP);
1026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1027:       assertEquals(1, Node.DECR_FLAG);
1028:       assertEquals(30, Node.VAR_ARGS_NAME);
1029:       assertEquals(57, Node.LAST_PROP);
1030:       assertEquals(47, Node.IS_DISPATCHER);
1031:       assertEquals(12, Node.COLUMN_BITS);
1032:       assertEquals(32, Node.INCRDECR_PROP);
1033:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1034:       assertEquals(53, Node.INPUT_ID);
1035:       assertEquals(36, Node.QUOTED_PROP);
1036:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1037:       assertEquals(52, Node.LENGTH);
1038:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1039:       assertEquals(49, Node.DIRECT_EVAL);
1040:       assertEquals(57, Node.REFLECTED_OBJECT);
1041:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1042:       assertEquals(56, Node.CHANGE_TIME);
1043:       assertEquals(4095, Node.COLUMN_MASK);
1044:       assertEquals(55, Node.INFERRED_FUNCTION);
1045:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1046:       assertEquals(8, Node.FLAG_NO_THROWS);
1047:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1048:       assertEquals(39, Node.EMPTY_BLOCK);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertEquals(40, Node.ORIGINALNAME_PROP);
1051:       assertEquals(50, Node.FREE_CALL);
1052:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1053:       assertEquals(43, Node.IS_CONSTANT_NAME);
1054:       assertEquals(54, Node.SLASH_V);
1055:       assertEquals(12, Node.COLUMN_BITS);
1056:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1057:       assertEquals(46, Node.IS_NAMESPACE);
1058:       assertEquals(30, Node.VAR_ARGS_NAME);
1059:       assertEquals(2, Node.POST_FLAG);
1060:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1061:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1062:       assertEquals(47, Node.IS_DISPATCHER);
1063:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(57, Node.LAST_PROP);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(57, Node.REFLECTED_OBJECT);
1069:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(37, Node.OPT_ARG_NAME);
1075:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1076:       assertEquals(49, Node.DIRECT_EVAL);
1077:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1078:       assertEquals(48, Node.DIRECTIVES);
1079:       assertFalse(boolean0);
1080:       
1081:       boolean boolean1 = node2.isLocalResultCall();
1082:       assertFalse(node2.isNew());
1083:       assertFalse(node2.isCall());
1084:       assertFalse(node2.isAdd());
1085:       assertFalse(node2.isNull());
1086:       assertFalse(node2.isName());
1087:       assertFalse(node2.isStringKey());
1088:       assertFalse(node2.isParamList());
1089:       assertEquals(0, node2.getChildCount());
1090:       assertFalse(node2.isOr());
1091:       assertFalse(node2.isLabel());
1092:       assertFalse(node2.isContinue());
1093:       assertFalse(node2.isSetterDef());
1094:       assertFalse(node2.isDefaultCase());
1095:       assertFalse(node2.isDo());
1096:       assertEquals(40, node2.getType());
1097:       assertFalse(node2.isVar());
1098:       assertFalse(node2.isAssignAdd());
1099:       assertFalse(node2.isGetElem());
1100:       assertFalse(node2.isFunction());
1101:       assertFalse(node2.isExprResult());
1102:       assertFalse(node2.isCast());
1103:       assertFalse(node2.isEmpty());
1104:       assertFalse(node2.isDelProp());
1105:       assertFalse(node2.isNot());
1106:       assertFalse(node2.isDebugger());
1107:       assertEquals((-1), node2.getSourcePosition());
1108:       assertFalse(node2.isAnd());
1109:       assertFalse(node2.isVoid());
1110:       assertFalse(node2.isTrue());
1111:       assertFalse(node2.isReturn());
1112:       assertFalse(node2.isGetProp());
1113:       assertFalse(node2.isObjectLit());
1114:       assertFalse(node2.hasChildren());
1115:       assertFalse(node2.isTypeOf());
1116:       assertFalse(node2.isAssign());
1117:       assertFalse(node2.isDec());
1118:       assertFalse(node2.isComma());
1119:       assertFalse(node2.isWhile());
1120:       assertFalse(node2.isHook());
1121:       assertFalse(node2.isFalse());
1122:       assertFalse(node2.isInc());
1123:       assertFalse(node2.isBreak());
1124:       assertEquals((-1), node2.getCharno());
1125:       assertFalse(node2.isSwitch());
1126:       assertFalse(node2.isIn());
1127:       assertFalse(node2.isThrow());
1128:       assertFalse(node2.isTry());
1129:       assertFalse(node2.hasOneChild());
1130:       assertFalse(node2.isArrayLit());
1131:       assertFalse(node2.isScript());
1132:       assertFalse(node2.isIf());
1133:       assertFalse(node2.isGetterDef());
1134:       assertFalse(node2.isNumber());
1135:       assertFalse(node2.isLabelName());
1136:       assertFalse(node2.isNE());
1137:       assertEquals((-1), node2.getLineno());
1138:       assertFalse(node2.isCatch());
1139:       assertFalse(node2.hasMoreThanOneChild());
1140:       assertFalse(node2.isWith());
1141:       assertFalse(node2.isInstanceOf());
1142:       assertFalse(node2.isRegExp());
1143:       assertFalse(node2.isCase());
1144:       assertFalse(node2.isBlock());
1145:       assertTrue(node2.isString());
1146:       assertFalse(node2.isThis());
1147:       assertFalse(node2.isFor());
1148:       assertNotSame(node2, node0);
1149:       assertFalse(node2.equals((Object)node1));
1150:       assertFalse(node2.equals((Object)node0));
1151:       assertTrue(boolean1 == boolean0);
1152:       assertEquals(30, Node.VAR_ARGS_NAME);
1153:       assertEquals(49, Node.DIRECT_EVAL);
1154:       assertEquals(1, Node.DECR_FLAG);
1155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1156:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1157:       assertEquals(2, Node.POST_FLAG);
1158:       assertEquals(32, Node.INCRDECR_PROP);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(57, Node.LAST_PROP);
1161:       assertEquals(47, Node.IS_DISPATCHER);
1162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1163:       assertEquals(50, Node.FREE_CALL);
1164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1165:       assertEquals(40, Node.ORIGINALNAME_PROP);
1166:       assertEquals(43, Node.IS_CONSTANT_NAME);
1167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1168:       assertEquals(46, Node.IS_NAMESPACE);
1169:       assertEquals(54, Node.SLASH_V);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:       assertEquals(55, Node.INFERRED_FUNCTION);
1172:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1175:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1176:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(29, Node.JSDOC_INFO_PROP);
1179:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1180:       assertEquals(52, Node.LENGTH);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(8, Node.FLAG_NO_THROWS);
1183:       assertEquals(48, Node.DIRECTIVES);
1184:       assertEquals(56, Node.CHANGE_TIME);
1185:       assertEquals(36, Node.QUOTED_PROP);
1186:       assertEquals(57, Node.REFLECTED_OBJECT);
1187:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1188:       assertFalse(boolean1);
1189:       
1190:       // Undeclared exception!
1191:       try { 
1192:         node1.getString();
1193:         fail("Expecting exception: IllegalStateException");
1194:       
1195:       } catch(IllegalStateException e) {
1196:          //
1197:          // -2145
1198:          //
1199:          verifyException("com.google.javascript.rhino.Token", e);
1200:       }
1201:   }
1202: }
RegularFileObject[/tmp/EvoSuite_100_1628161892908/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:11:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.javascript.rhino.Node$AncestorIterable$1",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.JSType$2",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.NamespaceType",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 11:11:33.053 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(254, node0.getType());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(254, node0.getType());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(254, node0.getType());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertEquals(37, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node1);

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(node2);

String string0 = node2.toStringTree();
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotNull(string0);

int int0 = node1.getIntProp(254);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(254, node0.getType());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertEquals(37, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, int0);

boolean boolean0 = node1.isLocalResultCall();
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(254, node0.getType());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertEquals(37, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean0);

boolean boolean1 = node2.isLocalResultCall();
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(boolean1);

node1.getString();

[MASTER] 11:11:39.874 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1628161899483/com/google/javascript/rhino/Node_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1628161899483/com/google/javascript/rhino/Node_130_tmp__ESTest_scaffolding.java]]
[MASTER] 11:11:39.874 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:11:39.874 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:11:39.875 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable int1
  location: class com.google.javascript.rhino.Node_130_tmp__ESTest: 1322
[MASTER] 11:11:39.878 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1628161899483/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:11:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.SimpleSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_130_tmp__ESTest extends Node_130_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(254, "(|");
23:       assertFalse(node0.isNew());
24:       assertEquals(254, node0.getType());
25:       assertFalse(node0.isVar());
26:       assertFalse(node0.isBlock());
27:       assertFalse(node0.isStringKey());
28:       assertFalse(node0.isContinue());
29:       assertFalse(node0.isName());
30:       assertFalse(node0.hasMoreThanOneChild());
31:       assertFalse(node0.isCall());
32:       assertEquals((-1), node0.getSourcePosition());
33:       assertFalse(node0.isParamList());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isReturn());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isNumber());
38:       assertFalse(node0.hasOneChild());
39:       assertFalse(node0.isVoid());
40:       assertFalse(node0.isTrue());
41:       assertFalse(node0.isAssign());
42:       assertFalse(node0.isLabelName());
43:       assertFalse(node0.isDec());
44:       assertFalse(node0.isTypeOf());
45:       assertFalse(node0.isDelProp());
46:       assertFalse(node0.isArrayLit());
47:       assertFalse(node0.isGetElem());
48:       assertFalse(node0.isExprResult());
49:       assertFalse(node0.isOr());
50:       assertFalse(node0.isAssignAdd());
51:       assertFalse(node0.isLabel());
52:       assertEquals(0, node0.getChildCount());
53:       assertFalse(node0.isNull());
54:       assertFalse(node0.isEmpty());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isDefaultCase());
57:       assertFalse(node0.isAdd());
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isThrow());
60:       assertEquals((-1), node0.getCharno());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.isThis());
67:       assertFalse(node0.isNot());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isObjectLit());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isTry());
75:       assertFalse(node0.isFunction());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isWith());
79:       assertFalse(node0.isIf());
80:       assertFalse(node0.isRegExp());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isInstanceOf());
84:       assertEquals((-1), node0.getLineno());
85:       assertFalse(node0.isIn());
86:       assertFalse(node0.isNE());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isInc());
89:       assertEquals(1, Node.DECR_FLAG);
90:       assertEquals(30, Node.VAR_ARGS_NAME);
91:       assertEquals(46, Node.IS_NAMESPACE);
92:       assertEquals(51, Node.STATIC_SOURCE_FILE);
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(52, Node.LENGTH);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(43, Node.IS_CONSTANT_NAME);
125:       
126:       node0.children();
127:       assertFalse(node0.isNew());
128:       assertEquals(254, node0.getType());
129:       assertFalse(node0.isVar());
130:       assertFalse(node0.isBlock());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isContinue());
133:       assertFalse(node0.isName());
134:       assertFalse(node0.hasMoreThanOneChild());
135:       assertFalse(node0.isCall());
136:       assertEquals((-1), node0.getSourcePosition());
137:       assertFalse(node0.isParamList());
138:       assertFalse(node0.hasChildren());
139:       assertFalse(node0.isReturn());
140:       assertFalse(node0.isWhile());
141:       assertFalse(node0.isNumber());
142:       assertFalse(node0.hasOneChild());
143:       assertFalse(node0.isVoid());
144:       assertFalse(node0.isTrue());
145:       assertFalse(node0.isAssign());
146:       assertFalse(node0.isLabelName());
147:       assertFalse(node0.isDec());
148:       assertFalse(node0.isTypeOf());
149:       assertFalse(node0.isDelProp());
150:       assertFalse(node0.isArrayLit());
151:       assertFalse(node0.isGetElem());
152:       assertFalse(node0.isExprResult());
153:       assertFalse(node0.isOr());
154:       assertFalse(node0.isAssignAdd());
155:       assertFalse(node0.isLabel());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isNull());
158:       assertFalse(node0.isEmpty());
159:       assertFalse(node0.isDo());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isAdd());
162:       assertFalse(node0.isSwitch());
163:       assertFalse(node0.isThrow());
164:       assertEquals((-1), node0.getCharno());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isFalse());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isAnd());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isThis());
171:       assertFalse(node0.isNot());
172:       assertFalse(node0.isString());
173:       assertFalse(node0.isCase());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isObjectLit());
176:       assertFalse(node0.isScript());
177:       assertFalse(node0.isGetProp());
178:       assertFalse(node0.isTry());
179:       assertFalse(node0.isFunction());
180:       assertFalse(node0.isDebugger());
181:       assertFalse(node0.isFor());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isIf());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isCatch());
186:       assertFalse(node0.isCast());
187:       assertFalse(node0.isInstanceOf());
188:       assertEquals((-1), node0.getLineno());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isNE());
191:       assertFalse(node0.isSetterDef());
192:       assertFalse(node0.isInc());
193:       assertEquals(1, Node.DECR_FLAG);
194:       assertEquals(30, Node.VAR_ARGS_NAME);
195:       assertEquals(46, Node.IS_NAMESPACE);
196:       assertEquals(51, Node.STATIC_SOURCE_FILE);
197:       assertEquals(12, Node.COLUMN_BITS);
198:       assertEquals(52, Node.LENGTH);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
206:       assertEquals(57, Node.REFLECTED_OBJECT);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(56, Node.CHANGE_TIME);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(43, Node.IS_CONSTANT_NAME);
229:       
230:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
231:       assertFalse(node0.isNew());
232:       assertEquals(254, node0.getType());
233:       assertFalse(node0.isVar());
234:       assertFalse(node0.isBlock());
235:       assertFalse(node0.isStringKey());
236:       assertFalse(node0.isContinue());
237:       assertFalse(node0.isName());
238:       assertFalse(node0.hasMoreThanOneChild());
239:       assertFalse(node0.isCall());
240:       assertEquals((-1), node0.getSourcePosition());
241:       assertFalse(node0.isParamList());
242:       assertFalse(node0.hasChildren());
243:       assertFalse(node0.isReturn());
244:       assertFalse(node0.isWhile());
245:       assertFalse(node0.isNumber());
246:       assertFalse(node0.hasOneChild());
247:       assertFalse(node0.isVoid());
248:       assertFalse(node0.isTrue());
249:       assertFalse(node0.isAssign());
250:       assertFalse(node0.isLabelName());
251:       assertFalse(node0.isDec());
252:       assertFalse(node0.isTypeOf());
253:       assertFalse(node0.isDelProp());
254:       assertFalse(node0.isArrayLit());
255:       assertFalse(node0.isGetElem());
256:       assertFalse(node0.isExprResult());
257:       assertFalse(node0.isOr());
258:       assertFalse(node0.isAssignAdd());
259:       assertFalse(node0.isLabel());
260:       assertEquals(0, node0.getChildCount());
261:       assertFalse(node0.isNull());
262:       assertFalse(node0.isEmpty());
263:       assertFalse(node0.isDo());
264:       assertFalse(node0.isDefaultCase());
265:       assertFalse(node0.isAdd());
266:       assertFalse(node0.isSwitch());
267:       assertFalse(node0.isThrow());
268:       assertEquals((-1), node0.getCharno());
269:       assertFalse(node0.isHook());
270:       assertFalse(node0.isFalse());
271:       assertFalse(node0.isBreak());
272:       assertFalse(node0.isAnd());
273:       assertFalse(node0.isComma());
274:       assertFalse(node0.isThis());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isString());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isGetterDef());
279:       assertFalse(node0.isObjectLit());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isDebugger());
285:       assertFalse(node0.isFor());
286:       assertFalse(node0.isWith());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isCatch());
290:       assertFalse(node0.isCast());
291:       assertFalse(node0.isInstanceOf());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isIn());
294:       assertFalse(node0.isNE());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.isInc());
297:       assertFalse(node1.isThrow());
298:       assertFalse(node1.isBreak());
299:       assertFalse(node1.isGetProp());
300:       assertFalse(node1.isInc());
301:       assertEquals(4095, node1.getCharno());
302:       assertFalse(node1.isObjectLit());
303:       assertFalse(node1.isNot());
304:       assertFalse(node1.isSwitch());
305:       assertFalse(node1.isAnd());
306:       assertFalse(node1.isCast());
307:       assertFalse(node1.isFalse());
308:       assertFalse(node1.isFor());
309:       assertFalse(node1.isLabelName());
310:       assertFalse(node1.isNE());
311:       assertFalse(node1.isArrayLit());
312:       assertFalse(node1.isIf());
313:       assertEquals(155647, node1.getSourcePosition());
314:       assertFalse(node1.isTry());
315:       assertFalse(node1.isScript());
316:       assertFalse(node1.isIn());
317:       assertFalse(node1.isGetterDef());
318:       assertFalse(node1.isNumber());
319:       assertFalse(node1.isWith());
320:       assertFalse(node1.isCase());
321:       assertTrue(node1.hasChildren());
322:       assertEquals(1, node1.getChildCount());
323:       assertFalse(node1.isBlock());
324:       assertEquals((-2145), node1.getType());
325:       assertFalse(node1.isHook());
326:       assertFalse(node1.isThis());
327:       assertFalse(node1.isCatch());
328:       assertFalse(node1.hasMoreThanOneChild());
329:       assertFalse(node1.isInstanceOf());
330:       assertFalse(node1.isRegExp());
331:       assertFalse(node1.isStringKey());
332:       assertFalse(node1.isCall());
333:       assertFalse(node1.isNull());
334:       assertFalse(node1.isVar());
335:       assertFalse(node1.isParamList());
336:       assertFalse(node1.isName());
337:       assertFalse(node1.isNew());
338:       assertFalse(node1.isAdd());
339:       assertFalse(node1.isSetterDef());
340:       assertFalse(node1.isDo());
341:       assertFalse(node1.isDefaultCase());
342:       assertFalse(node1.isAssignAdd());
343:       assertFalse(node1.isLabel());
344:       assertFalse(node1.isContinue());
345:       assertFalse(node1.isFunction());
346:       assertEquals(37, node1.getLineno());
347:       assertFalse(node1.isAssign());
348:       assertFalse(node1.isEmpty());
349:       assertFalse(node1.isGetElem());
350:       assertTrue(node1.hasOneChild());
351:       assertFalse(node1.isDelProp());
352:       assertFalse(node1.isOr());
353:       assertFalse(node1.isTrue());
354:       assertFalse(node1.isDebugger());
355:       assertFalse(node1.isWhile());
356:       assertFalse(node1.isString());
357:       assertFalse(node1.isVoid());
358:       assertFalse(node1.isReturn());
359:       assertFalse(node1.isExprResult());
360:       assertFalse(node1.isDec());
361:       assertFalse(node1.isComma());
362:       assertFalse(node1.isTypeOf());
363:       assertFalse(node1.equals((Object)node0));
364:       assertEquals(1, Node.DECR_FLAG);
365:       assertEquals(30, Node.VAR_ARGS_NAME);
366:       assertEquals(46, Node.IS_NAMESPACE);
367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
368:       assertEquals(12, Node.COLUMN_BITS);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(57, Node.LAST_PROP);
371:       assertEquals(32, Node.INCRDECR_PROP);
372:       assertEquals(29, Node.JSDOC_INFO_PROP);
373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
375:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
377:       assertEquals(57, Node.REFLECTED_OBJECT);
378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
379:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
380:       assertEquals(37, Node.OPT_ARG_NAME);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(56, Node.CHANGE_TIME);
383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
384:       assertEquals(49, Node.DIRECT_EVAL);
385:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
386:       assertEquals(55, Node.INFERRED_FUNCTION);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(36, Node.QUOTED_PROP);
389:       assertEquals(8, Node.FLAG_NO_THROWS);
390:       assertEquals(39, Node.EMPTY_BLOCK);
391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
392:       assertEquals(53, Node.INPUT_ID);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
395:       assertEquals(50, Node.FREE_CALL);
396:       assertEquals(47, Node.IS_DISPATCHER);
397:       assertEquals(2, Node.POST_FLAG);
398:       assertEquals(54, Node.SLASH_V);
399:       assertEquals(43, Node.IS_CONSTANT_NAME);
400:       assertEquals(54, Node.SLASH_V);
401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
402:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
403:       assertEquals(49, Node.DIRECT_EVAL);
404:       assertEquals(57, Node.LAST_PROP);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(12, Node.COLUMN_BITS);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
410:       assertEquals(32, Node.INCRDECR_PROP);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(1, Node.DECR_FLAG);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
417:       assertEquals(36, Node.QUOTED_PROP);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(43, Node.IS_CONSTANT_NAME);
420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
421:       assertEquals(4095, Node.COLUMN_MASK);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(2, Node.POST_FLAG);
427:       assertEquals(48, Node.DIRECTIVES);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(56, Node.CHANGE_TIME);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
435:       assertEquals(52, Node.LENGTH);
436:       
437:       Node node2 = node0.copyInformationFrom(node1);
438:       assertFalse(node0.isNew());
439:       assertEquals(254, node0.getType());
440:       assertFalse(node0.isVar());
441:       assertFalse(node0.isBlock());
442:       assertFalse(node0.isStringKey());
443:       assertFalse(node0.isContinue());
444:       assertFalse(node0.isName());
445:       assertEquals(37, node0.getLineno());
446:       assertFalse(node0.hasMoreThanOneChild());
447:       assertFalse(node0.isCall());
448:       assertFalse(node0.isParamList());
449:       assertFalse(node0.hasChildren());
450:       assertFalse(node0.isReturn());
451:       assertFalse(node0.isWhile());
452:       assertFalse(node0.isNumber());
453:       assertFalse(node0.hasOneChild());
454:       assertFalse(node0.isVoid());
455:       assertFalse(node0.isTrue());
456:       assertFalse(node0.isAssign());
457:       assertFalse(node0.isLabelName());
458:       assertFalse(node0.isDec());
459:       assertFalse(node0.isTypeOf());
460:       assertFalse(node0.isDelProp());
461:       assertFalse(node0.isArrayLit());
462:       assertFalse(node0.isGetElem());
463:       assertFalse(node0.isExprResult());
464:       assertFalse(node0.isOr());
465:       assertFalse(node0.isAssignAdd());
466:       assertFalse(node0.isLabel());
467:       assertEquals(0, node0.getChildCount());
468:       assertFalse(node0.isNull());
469:       assertFalse(node0.isEmpty());
470:       assertFalse(node0.isDo());
471:       assertFalse(node0.isDefaultCase());
472:       assertFalse(node0.isAdd());
473:       assertFalse(node0.isSwitch());
474:       assertEquals(4095, node0.getCharno());
475:       assertFalse(node0.isThrow());
476:       assertFalse(node0.isHook());
477:       assertFalse(node0.isFalse());
478:       assertFalse(node0.isBreak());
479:       assertFalse(node0.isAnd());
480:       assertFalse(node0.isComma());
481:       assertFalse(node0.isThis());
482:       assertFalse(node0.isNot());
483:       assertFalse(node0.isString());
484:       assertFalse(node0.isCase());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isObjectLit());
487:       assertFalse(node0.isScript());
488:       assertFalse(node0.isGetProp());
489:       assertFalse(node0.isTry());
490:       assertEquals(155647, node0.getSourcePosition());
491:       assertFalse(node0.isFunction());
492:       assertFalse(node0.isDebugger());
493:       assertFalse(node0.isFor());
494:       assertFalse(node0.isWith());
495:       assertFalse(node0.isIf());
496:       assertFalse(node0.isRegExp());
497:       assertFalse(node0.isCatch());
498:       assertFalse(node0.isCast());
499:       assertFalse(node0.isInstanceOf());
500:       assertFalse(node0.isIn());
501:       assertFalse(node0.isNE());
502:       assertFalse(node0.isSetterDef());
503:       assertFalse(node0.isInc());
504:       assertFalse(node1.isThrow());
505:       assertFalse(node1.isBreak());
506:       assertFalse(node1.isGetProp());
507:       assertFalse(node1.isInc());
508:       assertEquals(4095, node1.getCharno());
509:       assertFalse(node1.isObjectLit());
510:       assertFalse(node1.isNot());
511:       assertFalse(node1.isSwitch());
512:       assertFalse(node1.isAnd());
513:       assertFalse(node1.isCast());
514:       assertFalse(node1.isFalse());
515:       assertFalse(node1.isFor());
516:       assertFalse(node1.isLabelName());
517:       assertFalse(node1.isNE());
518:       assertFalse(node1.isArrayLit());
519:       assertFalse(node1.isIf());
520:       assertEquals(155647, node1.getSourcePosition());
521:       assertFalse(node1.isTry());
522:       assertFalse(node1.isScript());
523:       assertFalse(node1.isIn());
524:       assertFalse(node1.isGetterDef());
525:       assertFalse(node1.isNumber());
526:       assertFalse(node1.isWith());
527:       assertFalse(node1.isCase());
528:       assertTrue(node1.hasChildren());
529:       assertEquals(1, node1.getChildCount());
530:       assertFalse(node1.isBlock());
531:       assertEquals((-2145), node1.getType());
532:       assertFalse(node1.isHook());
533:       assertFalse(node1.isThis());
534:       assertFalse(node1.isCatch());
535:       assertFalse(node1.hasMoreThanOneChild());
536:       assertFalse(node1.isInstanceOf());
537:       assertFalse(node1.isRegExp());
538:       assertFalse(node1.isStringKey());
539:       assertFalse(node1.isCall());
540:       assertFalse(node1.isNull());
541:       assertFalse(node1.isVar());
542:       assertFalse(node1.isParamList());
543:       assertFalse(node1.isName());
544:       assertFalse(node1.isNew());
545:       assertFalse(node1.isAdd());
546:       assertFalse(node1.isSetterDef());
547:       assertFalse(node1.isDo());
548:       assertFalse(node1.isDefaultCase());
549:       assertFalse(node1.isAssignAdd());
550:       assertFalse(node1.isLabel());
551:       assertFalse(node1.isContinue());
552:       assertFalse(node1.isFunction());
553:       assertEquals(37, node1.getLineno());
554:       assertFalse(node1.isAssign());
555:       assertFalse(node1.isEmpty());
556:       assertFalse(node1.isGetElem());
557:       assertTrue(node1.hasOneChild());
558:       assertFalse(node1.isDelProp());
559:       assertFalse(node1.isOr());
560:       assertFalse(node1.isTrue());
561:       assertFalse(node1.isDebugger());
562:       assertFalse(node1.isWhile());
563:       assertFalse(node1.isString());
564:       assertFalse(node1.isVoid());
565:       assertFalse(node1.isReturn());
566:       assertFalse(node1.isExprResult());
567:       assertFalse(node1.isDec());
568:       assertFalse(node1.isComma());
569:       assertFalse(node1.isTypeOf());
570:       assertFalse(node2.isInstanceOf());
571:       assertFalse(node2.isObjectLit());
572:       assertFalse(node2.isAnd());
573:       assertFalse(node2.isThis());
574:       assertFalse(node2.isComma());
575:       assertFalse(node2.isNot());
576:       assertFalse(node2.isScript());
577:       assertFalse(node2.isGetProp());
578:       assertFalse(node2.isThrow());
579:       assertEquals(4095, node2.getCharno());
580:       assertFalse(node2.isLabelName());
581:       assertFalse(node2.isFalse());
582:       assertFalse(node2.isSwitch());
583:       assertFalse(node2.isCast());
584:       assertFalse(node2.hasMoreThanOneChild());
585:       assertFalse(node2.isIn());
586:       assertFalse(node2.isNE());
587:       assertFalse(node2.isGetterDef());
588:       assertFalse(node2.isNumber());
589:       assertFalse(node2.isInc());
590:       assertFalse(node2.isCase());
591:       assertFalse(node2.hasOneChild());
592:       assertEquals(254, node2.getType());
593:       assertEquals(155647, node2.getSourcePosition());
594:       assertFalse(node2.isTry());
595:       assertFalse(node2.isBlock());
596:       assertFalse(node2.isHook());
597:       assertFalse(node2.isFor());
598:       assertFalse(node2.isRegExp());
599:       assertFalse(node2.isIf());
600:       assertFalse(node2.isWith());
601:       assertFalse(node2.isCatch());
602:       assertEquals(0, node2.getChildCount());
603:       assertFalse(node2.isParamList());
604:       assertFalse(node2.isNull());
605:       assertFalse(node2.isDefaultCase());
606:       assertFalse(node2.isSetterDef());
607:       assertFalse(node2.isDebugger());
608:       assertFalse(node2.isFunction());
609:       assertFalse(node2.isVar());
610:       assertFalse(node2.isStringKey());
611:       assertEquals(37, node2.getLineno());
612:       assertFalse(node2.isContinue());
613:       assertFalse(node2.isArrayLit());
614:       assertFalse(node2.isReturn());
615:       assertFalse(node2.isOr());
616:       assertFalse(node2.isAssignAdd());
617:       assertFalse(node2.hasChildren());
618:       assertFalse(node2.isLabel());
619:       assertFalse(node2.isWhile());
620:       assertFalse(node2.isString());
621:       assertFalse(node2.isEmpty());
622:       assertFalse(node2.isDo());
623:       assertFalse(node2.isAdd());
624:       assertFalse(node2.isNew());
625:       assertFalse(node2.isTrue());
626:       assertFalse(node2.isDelProp());
627:       assertFalse(node2.isDec());
628:       assertFalse(node2.isAssign());
629:       assertFalse(node2.isName());
630:       assertFalse(node2.isTypeOf());
631:       assertFalse(node2.isCall());
632:       assertFalse(node2.isExprResult());
633:       assertFalse(node2.isVoid());
634:       assertFalse(node2.isGetElem());
635:       assertFalse(node2.isBreak());
636:       assertSame(node0, node2);
637:       assertSame(node2, node0);
638:       assertFalse(node0.equals((Object)node1));
639:       assertFalse(node1.equals((Object)node0));
640:       assertFalse(node2.equals((Object)node1));
641:       assertEquals(1, Node.DECR_FLAG);
642:       assertEquals(30, Node.VAR_ARGS_NAME);
643:       assertEquals(46, Node.IS_NAMESPACE);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(12, Node.COLUMN_BITS);
646:       assertEquals(52, Node.LENGTH);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(29, Node.JSDOC_INFO_PROP);
650:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
654:       assertEquals(57, Node.REFLECTED_OBJECT);
655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
656:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
657:       assertEquals(37, Node.OPT_ARG_NAME);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(56, Node.CHANGE_TIME);
660:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
661:       assertEquals(49, Node.DIRECT_EVAL);
662:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(4095, Node.COLUMN_MASK);
665:       assertEquals(36, Node.QUOTED_PROP);
666:       assertEquals(8, Node.FLAG_NO_THROWS);
667:       assertEquals(39, Node.EMPTY_BLOCK);
668:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
672:       assertEquals(50, Node.FREE_CALL);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(54, Node.SLASH_V);
676:       assertEquals(43, Node.IS_CONSTANT_NAME);
677:       assertEquals(54, Node.SLASH_V);
678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
679:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(57, Node.LAST_PROP);
682:       assertEquals(40, Node.ORIGINALNAME_PROP);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(30, Node.VAR_ARGS_NAME);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(32, Node.INCRDECR_PROP);
688:       assertEquals(46, Node.IS_NAMESPACE);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(51, Node.STATIC_SOURCE_FILE);
691:       assertEquals(50, Node.FREE_CALL);
692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
693:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
694:       assertEquals(36, Node.QUOTED_PROP);
695:       assertEquals(53, Node.INPUT_ID);
696:       assertEquals(43, Node.IS_CONSTANT_NAME);
697:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
698:       assertEquals(4095, Node.COLUMN_MASK);
699:       assertEquals(37, Node.OPT_ARG_NAME);
700:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
701:       assertEquals(8, Node.FLAG_NO_THROWS);
702:       assertEquals(39, Node.EMPTY_BLOCK);
703:       assertEquals(2, Node.POST_FLAG);
704:       assertEquals(48, Node.DIRECTIVES);
705:       assertEquals(47, Node.IS_DISPATCHER);
706:       assertEquals(56, Node.CHANGE_TIME);
707:       assertEquals(55, Node.INFERRED_FUNCTION);
708:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
709:       assertEquals(57, Node.REFLECTED_OBJECT);
710:       assertEquals(29, Node.JSDOC_INFO_PROP);
711:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
712:       assertEquals(52, Node.LENGTH);
713:       assertEquals(40, Node.ORIGINALNAME_PROP);
714:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
715:       assertEquals(57, Node.REFLECTED_OBJECT);
716:       assertEquals(50, Node.FREE_CALL);
717:       assertEquals(48, Node.DIRECTIVES);
718:       assertEquals(54, Node.SLASH_V);
719:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
720:       assertEquals(49, Node.DIRECT_EVAL);
721:       assertEquals(1, Node.DECR_FLAG);
722:       assertEquals(4095, Node.COLUMN_MASK);
723:       assertEquals(46, Node.IS_NAMESPACE);
724:       assertEquals(12, Node.COLUMN_BITS);
725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
727:       assertEquals(32, Node.INCRDECR_PROP);
728:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
731:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(2, Node.POST_FLAG);
734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
735:       assertEquals(43, Node.IS_CONSTANT_NAME);
736:       assertEquals(56, Node.CHANGE_TIME);
737:       assertEquals(37, Node.OPT_ARG_NAME);
738:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
739:       assertEquals(55, Node.INFERRED_FUNCTION);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(36, Node.QUOTED_PROP);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
745:       assertEquals(8, Node.FLAG_NO_THROWS);
746:       assertEquals(15, Node.NO_SIDE_EFFECTS);
747:       assertEquals(57, Node.LAST_PROP);
748:       assertEquals(39, Node.EMPTY_BLOCK);
749:       
750:       node0.detachChildren();
751:       assertFalse(node0.isNew());
752:       assertEquals(254, node0.getType());
753:       assertFalse(node0.isVar());
754:       assertFalse(node0.isBlock());
755:       assertFalse(node0.isStringKey());
756:       assertFalse(node0.isContinue());
757:       assertFalse(node0.isName());
758:       assertEquals(37, node0.getLineno());
759:       assertFalse(node0.hasMoreThanOneChild());
760:       assertFalse(node0.isCall());
761:       assertFalse(node0.isParamList());
762:       assertFalse(node0.hasChildren());
763:       assertFalse(node0.isReturn());
764:       assertFalse(node0.isWhile());
765:       assertFalse(node0.isNumber());
766:       assertFalse(node0.hasOneChild());
767:       assertFalse(node0.isVoid());
768:       assertFalse(node0.isTrue());
769:       assertFalse(node0.isAssign());
770:       assertFalse(node0.isLabelName());
771:       assertFalse(node0.isDec());
772:       assertFalse(node0.isTypeOf());
773:       assertFalse(node0.isDelProp());
774:       assertFalse(node0.isArrayLit());
775:       assertFalse(node0.isGetElem());
776:       assertFalse(node0.isExprResult());
777:       assertFalse(node0.isOr());
778:       assertFalse(node0.isAssignAdd());
779:       assertFalse(node0.isLabel());
780:       assertEquals(0, node0.getChildCount());
781:       assertFalse(node0.isNull());
782:       assertFalse(node0.isEmpty());
783:       assertFalse(node0.isDo());
784:       assertFalse(node0.isDefaultCase());
785:       assertFalse(node0.isAdd());
786:       assertFalse(node0.isSwitch());
787:       assertEquals(4095, node0.getCharno());
788:       assertFalse(node0.isThrow());
789:       assertFalse(node0.isHook());
790:       assertFalse(node0.isFalse());
791:       assertFalse(node0.isBreak());
792:       assertFalse(node0.isAnd());
793:       assertFalse(node0.isComma());
794:       assertFalse(node0.isThis());
795:       assertFalse(node0.isNot());
796:       assertFalse(node0.isString());
797:       assertFalse(node0.isCase());
798:       assertFalse(node0.isGetterDef());
799:       assertFalse(node0.isObjectLit());
800:       assertFalse(node0.isScript());
801:       assertFalse(node0.isGetProp());
802:       assertFalse(node0.isTry());
803:       assertEquals(155647, node0.getSourcePosition());
804:       assertFalse(node0.isFunction());
805:       assertFalse(node0.isDebugger());
806:       assertFalse(node0.isFor());
807:       assertFalse(node0.isWith());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.isRegExp());
810:       assertFalse(node0.isCatch());
811:       assertFalse(node0.isCast());
812:       assertFalse(node0.isInstanceOf());
813:       assertFalse(node0.isIn());
814:       assertFalse(node0.isNE());
815:       assertFalse(node0.isSetterDef());
816:       assertFalse(node0.isInc());
817:       assertSame(node0, node2);
818:       assertFalse(node0.equals((Object)node1));
819:       assertEquals(1, Node.DECR_FLAG);
820:       assertEquals(30, Node.VAR_ARGS_NAME);
821:       assertEquals(46, Node.IS_NAMESPACE);
822:       assertEquals(51, Node.STATIC_SOURCE_FILE);
823:       
824:       node1.getLength();
825:       assertFalse(node0.isNew());
826:       assertEquals(254, node0.getType());
827:       assertFalse(node0.isVar());
828:       assertFalse(node0.isBlock());
829:       assertFalse(node0.isStringKey());
830:       assertFalse(node0.isContinue());
831:       assertFalse(node0.isName());
832:       assertEquals(37, node0.getLineno());
833:       assertFalse(node0.hasMoreThanOneChild());
834:       assertFalse(node0.isCall());
835:       assertFalse(node0.isParamList());
836:       assertFalse(node0.hasChildren());
837:       assertFalse(node0.isReturn());
838:       assertFalse(node0.isWhile());
839:       assertFalse(node0.isNumber());
840:       assertFalse(node0.hasOneChild());
841:       assertFalse(node0.isVoid());
842:       assertFalse(node0.isTrue());
843:       assertFalse(node0.isAssign());
844:       assertFalse(node0.isLabelName());
845:       assertFalse(node0.isDec());
846:       assertFalse(node0.isTypeOf());
847:       assertFalse(node0.isDelProp());
848:       assertFalse(node0.isArrayLit());
849:       assertFalse(node0.isGetElem());
850:       assertFalse(node0.isExprResult());
851:       assertFalse(node0.isOr());
852:       assertFalse(node0.isAssignAdd());
853:       assertFalse(node0.isLabel());
854:       assertEquals(0, node0.getChildCount());
855:       assertFalse(node0.isNull());
856:       assertFalse(node0.isEmpty());
857:       assertFalse(node0.isDo());
858:       assertFalse(node0.isDefaultCase());
859:       assertFalse(node0.isAdd());
860:       assertFalse(node0.isSwitch());
861:       assertEquals(4095, node0.getCharno());
862:       assertFalse(node0.isThrow());
863:       assertFalse(node0.isHook());
864:       assertFalse(node0.isFalse());
865:       assertFalse(node0.isBreak());
866:       assertFalse(node0.isAnd());
867:       assertFalse(node0.isComma());
868:       assertFalse(node0.isThis());
869:       assertFalse(node0.isNot());
870:       assertFalse(node0.isString());
871:       assertFalse(node0.isCase());
872:       assertFalse(node0.isGetterDef());
873:       assertFalse(node0.isObjectLit());
874:       assertFalse(node0.isScript());
875:       assertFalse(node0.isGetProp());
876:       assertFalse(node0.isTry());
877:       assertEquals(155647, node0.getSourcePosition());
878:       assertFalse(node0.isFunction());
879:       assertFalse(node0.isDebugger());
880:       assertFalse(node0.isFor());
881:       assertFalse(node0.isWith());
882:       assertFalse(node0.isIf());
883:       assertFalse(node0.isRegExp());
884:       assertFalse(node0.isCatch());
885:       assertFalse(node0.isCast());
886:       assertFalse(node0.isInstanceOf());
887:       assertFalse(node0.isIn());
888:       assertFalse(node0.isNE());
889:       assertFalse(node0.isSetterDef());
890:       assertFalse(node0.isInc());
891:       assertFalse(node1.isThrow());
892:       assertFalse(node1.isBreak());
893:       assertFalse(node1.isGetProp());
894:       assertFalse(node1.isInc());
895:       assertEquals(4095, node1.getCharno());
896:       assertFalse(node1.isObjectLit());
897:       assertFalse(node1.isNot());
898:       assertFalse(node1.isSwitch());
899:       assertFalse(node1.isAnd());
900:       assertFalse(node1.isCast());
901:       assertFalse(node1.isFalse());
902:       assertFalse(node1.isFor());
903:       assertFalse(node1.isLabelName());
904:       assertFalse(node1.isNE());
905:       assertFalse(node1.isArrayLit());
906:       assertFalse(node1.isIf());
907:       assertEquals(155647, node1.getSourcePosition());
908:       assertFalse(node1.isTry());
909:       assertFalse(node1.isScript());
910:       assertFalse(node1.isIn());
911:       assertFalse(node1.isGetterDef());
912:       assertFalse(node1.isNumber());
913:       assertFalse(node1.isWith());
914:       assertFalse(node1.isCase());
915:       assertTrue(node1.hasChildren());
916:       assertEquals(1, node1.getChildCount());
917:       assertFalse(node1.isBlock());
918:       assertEquals((-2145), node1.getType());
919:       assertFalse(node1.isHook());
920:       assertFalse(node1.isThis());
921:       assertFalse(node1.isCatch());
922:       assertFalse(node1.hasMoreThanOneChild());
923:       assertFalse(node1.isInstanceOf());
924:       assertFalse(node1.isRegExp());
925:       assertFalse(node1.isStringKey());
926:       assertFalse(node1.isCall());
927:       assertFalse(node1.isNull());
928:       assertFalse(node1.isVar());
929:       assertFalse(node1.isParamList());
930:       assertFalse(node1.isName());
931:       assertFalse(node1.isNew());
932:       assertFalse(node1.isAdd());
933:       assertFalse(node1.isSetterDef());
934:       assertFalse(node1.isDo());
935:       assertFalse(node1.isDefaultCase());
936:       assertFalse(node1.isAssignAdd());
937:       assertFalse(node1.isLabel());
938:       assertFalse(node1.isContinue());
939:       assertFalse(node1.isFunction());
940:       assertEquals(37, node1.getLineno());
941:       assertFalse(node1.isAssign());
942:       assertFalse(node1.isEmpty());
943:       assertFalse(node1.isGetElem());
944:       assertTrue(node1.hasOneChild());
945:       assertFalse(node1.isDelProp());
946:       assertFalse(node1.isOr());
947:       assertFalse(node1.isTrue());
948:       assertFalse(node1.isDebugger());
949:       assertFalse(node1.isWhile());
950:       assertFalse(node1.isString());
951:       assertFalse(node1.isVoid());
952:       assertFalse(node1.isReturn());
953:       assertFalse(node1.isExprResult());
954:       assertFalse(node1.isDec());
955:       assertFalse(node1.isComma());
956:       assertFalse(node1.isTypeOf());
957:       assertSame(node0, node2);
958:       assertFalse(node0.equals((Object)node1));
959:       assertFalse(node1.equals((Object)node2));
960:       assertFalse(node1.equals((Object)node0));
961:       
962:       boolean boolean0 = node2.getBooleanProp(9);
963:       assertFalse(node0.isNew());
964:       assertEquals(254, node0.getType());
965:       assertFalse(node0.isVar());
966:       assertFalse(node0.isBlock());
967:       assertFalse(node0.isStringKey());
968:       assertFalse(node0.isContinue());
969:       assertFalse(node0.isName());
970:       assertEquals(37, node0.getLineno());
971:       assertFalse(node0.hasMoreThanOneChild());
972:       assertFalse(node0.isCall());
973:       assertFalse(node0.isParamList());
974:       assertFalse(node0.hasChildren());
975:       assertFalse(node0.isReturn());
976:       assertFalse(node0.isWhile());
977:       assertFalse(node0.isNumber());
978:       assertFalse(node0.hasOneChild());
979:       assertFalse(node0.isVoid());
980:       assertFalse(node0.isTrue());
981:       assertFalse(node0.isAssign());
982:       assertFalse(node0.isLabelName());
983:       assertFalse(node0.isDec());
984:       assertFalse(node0.isTypeOf());
985:       assertFalse(node0.isDelProp());
986:       assertFalse(node0.isArrayLit());
987:       assertFalse(node0.isGetElem());
988:       assertFalse(node0.isExprResult());
989:       assertFalse(node0.isOr());
990:       assertFalse(node0.isAssignAdd());
991:       assertFalse(node0.isLabel());
992:       assertEquals(0, node0.getChildCount());
993:       assertFalse(node0.isNull());
994:       assertFalse(node0.isEmpty());
995:       assertFalse(node0.isDo());
996:       assertFalse(node0.isDefaultCase());
997:       assertFalse(node0.isAdd());
998:       assertFalse(node0.isSwitch());
999:       assertEquals(4095, node0.getCharno());
1000:       assertFalse(node0.isThrow());
1001:       assertFalse(node0.isHook());
1002:       assertFalse(node0.isFalse());
1003:       assertFalse(node0.isBreak());
1004:       assertFalse(node0.isAnd());
1005:       assertFalse(node0.isComma());
1006:       assertFalse(node0.isThis());
1007:       assertFalse(node0.isNot());
1008:       assertFalse(node0.isString());
1009:       assertFalse(node0.isCase());
1010:       assertFalse(node0.isGetterDef());
1011:       assertFalse(node0.isObjectLit());
1012:       assertFalse(node0.isScript());
1013:       assertFalse(node0.isGetProp());
1014:       assertFalse(node0.isTry());
1015:       assertEquals(155647, node0.getSourcePosition());
1016:       assertFalse(node0.isFunction());
1017:       assertFalse(node0.isDebugger());
1018:       assertFalse(node0.isFor());
1019:       assertFalse(node0.isWith());
1020:       assertFalse(node0.isIf());
1021:       assertFalse(node0.isRegExp());
1022:       assertFalse(node0.isCatch());
1023:       assertFalse(node0.isCast());
1024:       assertFalse(node0.isInstanceOf());
1025:       assertFalse(node0.isIn());
1026:       assertFalse(node0.isNE());
1027:       assertFalse(node0.isSetterDef());
1028:       assertFalse(node0.isInc());
1029:       assertFalse(node1.isThrow());
1030:       assertFalse(node1.isBreak());
1031:       assertFalse(node1.isGetProp());
1032:       assertFalse(node1.isInc());
1033:       assertEquals(4095, node1.getCharno());
1034:       assertFalse(node1.isObjectLit());
1035:       assertFalse(node1.isNot());
1036:       assertFalse(node1.isSwitch());
1037:       assertFalse(node1.isAnd());
1038:       assertFalse(node1.isCast());
1039:       assertFalse(node1.isFalse());
1040:       assertFalse(node1.isFor());
1041:       assertFalse(node1.isLabelName());
1042:       assertFalse(node1.isNE());
1043:       assertFalse(node1.isArrayLit());
1044:       assertFalse(node1.isIf());
1045:       assertEquals(155647, node1.getSourcePosition());
1046:       assertFalse(node1.isTry());
1047:       assertFalse(node1.isScript());
1048:       assertFalse(node1.isIn());
1049:       assertFalse(node1.isGetterDef());
1050:       assertFalse(node1.isNumber());
1051:       assertFalse(node1.isWith());
1052:       assertFalse(node1.isCase());
1053:       assertTrue(node1.hasChildren());
1054:       assertEquals(1, node1.getChildCount());
1055:       assertFalse(node1.isBlock());
1056:       assertEquals((-2145), node1.getType());
1057:       assertFalse(node1.isHook());
1058:       assertFalse(node1.isThis());
1059:       assertFalse(node1.isCatch());
1060:       assertFalse(node1.hasMoreThanOneChild());
1061:       assertFalse(node1.isInstanceOf());
1062:       assertFalse(node1.isRegExp());
1063:       assertFalse(node1.isStringKey());
1064:       assertFalse(node1.isCall());
1065:       assertFalse(node1.isNull());
1066:       assertFalse(node1.isVar());
1067:       assertFalse(node1.isParamList());
1068:       assertFalse(node1.isName());
1069:       assertFalse(node1.isNew());
1070:       assertFalse(node1.isAdd());
1071:       assertFalse(node1.isSetterDef());
1072:       assertFalse(node1.isDo());
1073:       assertFalse(node1.isDefaultCase());
1074:       assertFalse(node1.isAssignAdd());
1075:       assertFalse(node1.isLabel());
1076:       assertFalse(node1.isContinue());
1077:       assertFalse(node1.isFunction());
1078:       assertEquals(37, node1.getLineno());
1079:       assertFalse(node1.isAssign());
1080:       assertFalse(node1.isEmpty());
1081:       assertFalse(node1.isGetElem());
1082:       assertTrue(node1.hasOneChild());
1083:       assertFalse(node1.isDelProp());
1084:       assertFalse(node1.isOr());
1085:       assertFalse(node1.isTrue());
1086:       assertFalse(node1.isDebugger());
1087:       assertFalse(node1.isWhile());
1088:       assertFalse(node1.isString());
1089:       assertFalse(node1.isVoid());
1090:       assertFalse(node1.isReturn());
1091:       assertFalse(node1.isExprResult());
1092:       assertFalse(node1.isDec());
1093:       assertFalse(node1.isComma());
1094:       assertFalse(node1.isTypeOf());
1095:       assertFalse(node2.isInstanceOf());
1096:       assertFalse(node2.isObjectLit());
1097:       assertFalse(node2.isAnd());
1098:       assertFalse(node2.isThis());
1099:       assertFalse(node2.isComma());
1100:       assertFalse(node2.isNot());
1101:       assertFalse(node2.isScript());
1102:       assertFalse(node2.isGetProp());
1103:       assertFalse(node2.isThrow());
1104:       assertEquals(4095, node2.getCharno());
1105:       assertFalse(node2.isLabelName());
1106:       assertFalse(node2.isFalse());
1107:       assertFalse(node2.isSwitch());
1108:       assertFalse(node2.isCast());
1109:       assertFalse(node2.hasMoreThanOneChild());
1110:       assertFalse(node2.isIn());
1111:       assertFalse(node2.isNE());
1112:       assertFalse(node2.isGetterDef());
1113:       assertFalse(node2.isNumber());
1114:       assertFalse(node2.isInc());
1115:       assertFalse(node2.isCase());
1116:       assertFalse(node2.hasOneChild());
1117:       assertEquals(254, node2.getType());
1118:       assertEquals(155647, node2.getSourcePosition());
1119:       assertFalse(node2.isTry());
1120:       assertFalse(node2.isBlock());
1121:       assertFalse(node2.isHook());
1122:       assertFalse(node2.isFor());
1123:       assertFalse(node2.isRegExp());
1124:       assertFalse(node2.isIf());
1125:       assertFalse(node2.isWith());
1126:       assertFalse(node2.isCatch());
1127:       assertEquals(0, node2.getChildCount());
1128:       assertFalse(node2.isParamList());
1129:       assertFalse(node2.isNull());
1130:       assertFalse(node2.isDefaultCase());
1131:       assertFalse(node2.isSetterDef());
1132:       assertFalse(node2.isDebugger());
1133:       assertFalse(node2.isFunction());
1134:       assertFalse(node2.isVar());
1135:       assertFalse(node2.isStringKey());
1136:       assertEquals(37, node2.getLineno());
1137:       assertFalse(node2.isContinue());
1138:       assertFalse(node2.isArrayLit());
1139:       assertFalse(node2.isReturn());
1140:       assertFalse(node2.isOr());
1141:       assertFalse(node2.isAssignAdd());
1142:       assertFalse(node2.hasChildren());
1143:       assertFalse(node2.isLabel());
1144:       assertFalse(node2.isWhile());
1145:       assertFalse(node2.isString());
1146:       assertFalse(node2.isEmpty());
1147:       assertFalse(node2.isDo());
1148:       assertFalse(node2.isAdd());
1149:       assertFalse(node2.isNew());
1150:       assertFalse(node2.isTrue());
1151:       assertFalse(node2.isDelProp());
1152:       assertFalse(node2.isDec());
1153:       assertFalse(node2.isAssign());
1154:       assertFalse(node2.isName());
1155:       assertFalse(node2.isTypeOf());
1156:       assertFalse(node2.isCall());
1157:       assertFalse(node2.isExprResult());
1158:       assertFalse(node2.isVoid());
1159:       assertFalse(node2.isGetElem());
1160:       assertFalse(node2.isBreak());
1161:       assertSame(node0, node2);
1162:       assertSame(node2, node0);
1163:       assertFalse(node0.equals((Object)node1));
1164:       assertFalse(node1.equals((Object)node2));
1165:       assertFalse(node1.equals((Object)node0));
1166:       assertFalse(node2.equals((Object)node1));
1167:       
1168:       Node node3 = Node.newString("^T bi6mc\"24m1h|@{G");
1169:       assertEquals(0, node3.getChildCount());
1170:       assertFalse(node3.isParamList());
1171:       assertFalse(node3.isNull());
1172:       assertEquals(40, node3.getType());
1173:       assertFalse(node3.isDefaultCase());
1174:       assertFalse(node3.isSetterDef());
1175:       assertFalse(node3.isNew());
1176:       assertFalse(node3.isFunction());
1177:       assertFalse(node3.isVar());
1178:       assertFalse(node3.isDebugger());
1179:       assertFalse(node3.isStringKey());
1180:       assertFalse(node3.isContinue());
1181:       assertFalse(node3.isArrayLit());
1182:       assertEquals((-1), node3.getLineno());
1183:       assertFalse(node3.isIn());
1184:       assertFalse(node3.isNE());
1185:       assertFalse(node3.isFor());
1186:       assertFalse(node3.isCase());
1187:       assertFalse(node3.isGetterDef());
1188:       assertFalse(node3.isNumber());
1189:       assertFalse(node3.hasOneChild());
1190:       assertFalse(node3.isInc());
1191:       assertFalse(node3.isTry());
1192:       assertTrue(node3.isString());
1193:       assertFalse(node3.isRegExp());
1194:       assertFalse(node3.isBlock());
1195:       assertFalse(node3.isHook());
1196:       assertFalse(node3.isIf());
1197:       assertFalse(node3.hasMoreThanOneChild());
1198:       assertFalse(node3.isWith());
1199:       assertFalse(node3.isCatch());
1200:       assertFalse(node3.isInstanceOf());
1201:       assertFalse(node3.isComma());
1202:       assertFalse(node3.isThis());
1203:       assertFalse(node3.isNot());
1204:       assertFalse(node3.isObjectLit());
1205:       assertFalse(node3.isScript());
1206:       assertFalse(node3.isGetProp());
1207:       assertFalse(node3.isSwitch());
1208:       assertFalse(node3.isThrow());
1209:       assertEquals((-1), node3.getCharno());
1210:       assertFalse(node3.isLabelName());
1211:       assertFalse(node3.isAnd());
1212:       assertFalse(node3.isFalse());
1213:       assertFalse(node3.isCast());
1214:       assertFalse(node3.isOr());
1215:       assertFalse(node3.isAssignAdd());
1216:       assertFalse(node3.isLabel());
1217:       assertFalse(node3.isDec());
1218:       assertEquals((-1), node3.getSourcePosition());
1219:       assertFalse(node3.hasChildren());
1220:       assertFalse(node3.isReturn());
1221:       assertFalse(node3.isEmpty());
1222:       assertFalse(node3.isDo());
1223:       assertFalse(node3.isWhile());
1224:       assertFalse(node3.isAdd());
1225:       assertFalse(node3.isVoid());
1226:       assertFalse(node3.isTrue());
1227:       assertFalse(node3.isAssign());
1228:       assertFalse(node3.isDelProp());
1229:       assertFalse(node3.isName());
1230:       assertFalse(node3.isTypeOf());
1231:       assertFalse(node3.isBreak());
1232:       assertFalse(node3.isCall());
1233:       assertFalse(node3.isGetElem());
1234:       assertFalse(node3.isExprResult());
1235:       assertNotSame(node3, node0);
1236:       assertNotSame(node3, node2);
1237:       assertFalse(node3.equals((Object)node0));
1238:       assertFalse(node3.equals((Object)node2));
1239:       assertFalse(node3.equals((Object)node1));
1240:       
1241:       Node node4 = Node.newString(38, "^T bi6mc\"24m1h|@{G", 15, 1679);
1242:       assertFalse(node4.isWhile());
1243:       assertFalse(node4.isContinue());
1244:       assertFalse(node4.hasMoreThanOneChild());
1245:       assertFalse(node4.isOr());
1246:       assertFalse(node4.isCast());
1247:       assertFalse(node4.isVar());
1248:       assertFalse(node4.isNull());
1249:       assertFalse(node4.isAdd());
1250:       assertFalse(node4.isLabel());
1251:       assertFalse(node4.isAssignAdd());
1252:       assertFalse(node4.isSetterDef());
1253:       assertFalse(node4.isNew());
1254:       assertFalse(node4.isDo());
1255:       assertFalse(node4.isNot());
1256:       assertFalse(node4.isAnd());
1257:       assertFalse(node4.isFunction());
1258:       assertFalse(node4.isDebugger());
1259:       assertFalse(node4.isObjectLit());
1260:       assertFalse(node4.isExprResult());
1261:       assertFalse(node4.isTrue());
1262:       assertFalse(node4.isBreak());
1263:       assertFalse(node4.isVoid());
1264:       assertFalse(node4.isGetElem());
1265:       assertFalse(node4.isCall());
1266:       assertFalse(node4.isTypeOf());
1267:       assertFalse(node4.hasChildren());
1268:       assertFalse(node4.isDec());
1269:       assertFalse(node4.isAssign());
1270:       assertFalse(node4.isComma());
1271:       assertFalse(node4.isReturn());
1272:       assertFalse(node4.isGetProp());
1273:       assertEquals(63119, node4.getSourcePosition());
1274:       assertFalse(node4.isCase());
1275:       assertFalse(node4.isString());
1276:       assertFalse(node4.isIn());
1277:       assertFalse(node4.isNE());
1278:       assertFalse(node4.isIf());
1279:       assertFalse(node4.isSwitch());
1280:       assertFalse(node4.isDelProp());
1281:       assertFalse(node4.isEmpty());
1282:       assertFalse(node4.isFalse());
1283:       assertFalse(node4.isThrow());
1284:       assertTrue(node4.isName());
1285:       assertEquals(1679, node4.getCharno());
1286:       assertFalse(node4.isInc());
1287:       assertFalse(node4.isDefaultCase());
1288:       assertFalse(node4.isWith());
1289:       assertFalse(node4.isCatch());
1290:       assertFalse(node4.isRegExp());
1291:       assertEquals(38, node4.getType());
1292:       assertEquals(0, node4.getChildCount());
1293:       assertFalse(node4.isParamList());
1294:       assertFalse(node4.isInstanceOf());
1295:       assertFalse(node4.isArrayLit());
1296:       assertFalse(node4.isFor());
1297:       assertFalse(node4.isLabelName());
1298:       assertFalse(node4.isStringKey());
1299:       assertFalse(node4.isHook());
1300:       assertFalse(node4.isThis());
1301:       assertFalse(node4.isNumber());
1302:       assertFalse(node4.isGetterDef());
1303:       assertFalse(node4.isBlock());
1304:       assertFalse(node4.isTry());
1305:       assertFalse(node4.isScript());
1306:       assertFalse(node4.hasOneChild());
1307:       assertEquals(15, node4.getLineno());
1308:       assertNotSame(node4, node3);
1309:       assertNotSame(node4, node0);
1310:       assertNotSame(node4, node2);
1311:       assertFalse(node4.equals((Object)node3));
1312:       assertFalse(node4.equals((Object)node0));
1313:       assertFalse(node4.equals((Object)node2));
1314:       assertFalse(node4.equals((Object)node1));
1315:       
1316:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("?0JftnD;'", false);
1317:       assertFalse(simpleSourceFile0.isExtern());
1318:       assertEquals("?0JftnD;'", simpleSourceFile0.getName());
1319:       assertEquals("?0JftnD;'", simpleSourceFile0.toString());
1320:       
1321:       int int0 = Node.CHANGE_TIME;
1322:       assertFalse(int0 == int1);
1323:       
1324:       node2.setStaticSourceFile(simpleSourceFile0);
1325:       assertFalse(node0.isNew());
1326:       assertEquals(254, node0.getType());
1327:       assertFalse(node0.isVar());
1328:       assertFalse(node0.isBlock());
1329:       assertFalse(node0.isStringKey());
1330:       assertFalse(node0.isContinue());
1331:       assertFalse(node0.isName());
1332:       assertEquals(37, node0.getLineno());
1333:       assertFalse(node0.hasMoreThanOneChild());
1334:       assertFalse(node0.isCall());
1335:       assertFalse(node0.isParamList());
1336:       assertFalse(node0.hasChildren());
1337:       assertFalse(node0.isReturn());
1338:       assertFalse(node0.isWhile());
1339:       assertFalse(node0.isNumber());
1340:       assertFalse(node0.hasOneChild());
1341:       assertFalse(node0.isVoid());
1342:       assertFalse(node0.isTrue());
1343:       assertFalse(node0.isAssign());
1344:       assertFalse(node0.isLabelName());
1345:       assertFalse(node0.isDec());
1346:       assertFalse(node0.isTypeOf());
1347:       assertFalse(node0.isDelProp());
1348:       assertFalse(node0.isArrayLit());
1349:       assertFalse(node0.isGetElem());
1350:       assertFalse(node0.isExprResult());
1351:       assertFalse(node0.isOr());
1352:       assertFalse(node0.isAssignAdd());
1353:       assertFalse(node0.isLabel());
1354:       assertEquals(0, node0.getChildCount());
1355:       assertFalse(node0.isNull());
1356:       assertFalse(node0.isEmpty());
1357:       assertFalse(node0.isDo());
1358:       assertFalse(node0.isDefaultCase());
1359:       assertFalse(node0.isAdd());
1360:       assertFalse(node0.isSwitch());
1361:       assertEquals(4095, node0.getCharno());
1362:       assertFalse(node0.isThrow());
1363:       assertFalse(node0.isHook());
1364:       assertFalse(node0.isFalse());
1365:       assertFalse(node0.isBreak());
1366:       assertFalse(node0.isAnd());
1367:       assertFalse(node0.isComma());
1368:       assertFalse(node0.isThis());
1369:       assertFalse(node0.isNot());
1370:       assertFalse(node0.isString());
1371:       assertFalse(node0.isCase());
1372:       assertFalse(node0.isGetterDef());
1373:       assertFalse(node0.isObjectLit());
1374:       assertFalse(node0.isScript());
1375:       assertFalse(node0.isGetProp());
1376:       assertFalse(node0.isTry());
1377:       assertEquals(155647, node0.getSourcePosition());
1378:       assertFalse(node0.isFunction());
1379:       assertFalse(node0.isDebugger());
1380:       assertFalse(node0.isFor());
1381:       assertFalse(node0.isWith());
1382:       assertFalse(node0.isIf());
1383:       assertFalse(node0.isRegExp());
1384:       assertFalse(node0.isCatch());
1385:       assertFalse(node0.isCast());
1386:       assertFalse(node0.isInstanceOf());
1387:       assertFalse(node0.isIn());
1388:       assertFalse(node0.isNE());
1389:       assertFalse(node0.isSetterDef());
1390:       assertFalse(node0.isInc());
1391:       assertFalse(node1.isThrow());
1392:       assertFalse(node1.isBreak());
1393:       assertFalse(node1.isGetProp());
1394:       assertFalse(node1.isInc());
1395:       assertEquals(4095, node1.getCharno());
1396:       assertFalse(node1.isObjectLit());
1397:       assertFalse(node1.isNot());
1398:       assertFalse(node1.isSwitch());
1399:       assertFalse(node1.isAnd());
1400:       assertFalse(node1.isCast());
1401:       assertFalse(node1.isFalse());
1402:       assertFalse(node1.isFor());
1403:       assertFalse(node1.isLabelName());
1404:       assertFalse(node1.isNE());
1405:       assertFalse(node1.isArrayLit());
1406:       assertFalse(node1.isIf());
1407:       assertEquals(155647, node1.getSourcePosition());
1408:       assertFalse(node1.isTry());
1409:       assertFalse(node1.isScript());
1410:       assertFalse(node1.isIn());
1411:       assertFalse(node1.isGetterDef());
1412:       assertFalse(node1.isNumber());
1413:       assertFalse(node1.isWith());
1414:       assertFalse(node1.isCase());
1415:       assertTrue(node1.hasChildren());
1416:       assertEquals(1, node1.getChildCount());
1417:       assertFalse(node1.isBlock());
1418:       assertEquals((-2145), node1.getType());
1419:       assertFalse(node1.isHook());
1420:       assertFalse(node1.isThis());
1421:       assertFalse(node1.isCatch());
1422:       assertFalse(node1.hasMoreThanOneChild());
1423:       assertFalse(node1.isInstanceOf());
1424:       assertFalse(node1.isRegExp());
1425:       assertFalse(node1.isStringKey());
1426:       assertFalse(node1.isCall());
1427:       assertFalse(node1.isNull());
1428:       assertFalse(node1.isVar());
1429:       assertFalse(node1.isParamList());
1430:       assertFalse(node1.isName());
1431:       assertFalse(node1.isNew());
1432:       assertFalse(node1.isAdd());
1433:       assertFalse(node1.isSetterDef());
1434:       assertFalse(node1.isDo());
1435:       assertFalse(node1.isDefaultCase());
1436:       assertFalse(node1.isAssignAdd());
1437:       assertFalse(node1.isLabel());
1438:       assertFalse(node1.isContinue());
1439:       assertFalse(node1.isFunction());
1440:       assertEquals(37, node1.getLineno());
1441:       assertFalse(node1.isAssign());
1442:       assertFalse(node1.isEmpty());
1443:       assertFalse(node1.isGetElem());
1444:       assertTrue(node1.hasOneChild());
1445:       assertFalse(node1.isDelProp());
1446:       assertFalse(node1.isOr());
1447:       assertFalse(node1.isTrue());
1448:       assertFalse(node1.isDebugger());
1449:       assertFalse(node1.isWhile());
1450:       assertFalse(node1.isString());
1451:       assertFalse(node1.isVoid());
1452:       assertFalse(node1.isReturn());
1453:       assertFalse(node1.isExprResult());
1454:       assertFalse(node1.isDec());
1455:       assertFalse(node1.isComma());
1456:       assertFalse(node1.isTypeOf());
1457:       assertFalse(node2.isInstanceOf());
1458:       assertFalse(node2.isObjectLit());
1459:       assertFalse(node2.isAnd());
1460:       assertFalse(node2.isThis());
1461:       assertFalse(node2.isComma());
1462:       assertFalse(node2.isNot());
1463:       assertFalse(node2.isScript());
1464:       assertFalse(node2.isGetProp());
1465:       assertFalse(node2.isThrow());
1466:       assertEquals(4095, node2.getCharno());
1467:       assertFalse(node2.isLabelName());
1468:       assertFalse(node2.isFalse());
1469:       assertFalse(node2.isSwitch());
1470:       assertFalse(node2.isCast());
1471:       assertFalse(node2.hasMoreThanOneChild());
1472:       assertFalse(node2.isIn());
1473:       assertFalse(node2.isNE());
1474:       assertFalse(node2.isGetterDef());
1475:       assertFalse(node2.isNumber());
1476:       assertFalse(node2.isInc());
1477:       assertFalse(node2.isCase());
1478:       assertFalse(node2.hasOneChild());
1479:       assertEquals(254, node2.getType());
1480:       assertEquals(155647, node2.getSourcePosition());
1481:       assertFalse(node2.isTry());
1482:       assertFalse(node2.isBlock());
1483:       assertFalse(node2.isHook());
1484:       assertFalse(node2.isFor());
1485:       assertFalse(node2.isRegExp());
1486:       assertFalse(node2.isIf());
1487:       assertFalse(node2.isWith());
1488:       assertFalse(node2.isCatch());
1489:       assertEquals(0, node2.getChildCount());
1490:       assertFalse(node2.isParamList());
1491:       assertFalse(node2.isNull());
1492:       assertFalse(node2.isDefaultCase());
1493:       assertFalse(node2.isSetterDef());
1494:       assertFalse(node2.isDebugger());
1495:       assertFalse(node2.isFunction());
1496:       assertFalse(node2.isVar());
1497:       assertFalse(node2.isStringKey());
1498:       assertEquals(37, node2.getLineno());
1499:       assertFalse(node2.isContinue());
1500:       assertFalse(node2.isArrayLit());
1501:       assertFalse(node2.isReturn());
1502:       assertFalse(node2.isOr());
1503:       assertFalse(node2.isAssignAdd());
1504:       assertFalse(node2.hasChildren());
1505:       assertFalse(node2.isLabel());
1506:       assertFalse(node2.isWhile());
1507:       assertFalse(node2.isString());
1508:       assertFalse(node2.isEmpty());
1509:       assertFalse(node2.isDo());
1510:       assertFalse(node2.isAdd());
1511:       assertFalse(node2.isNew());
1512:       assertFalse(node2.isTrue());
1513:       assertFalse(node2.isDelProp());
1514:       assertFalse(node2.isDec());
1515:       assertFalse(node2.isAssign());
1516:       assertFalse(node2.isName());
1517:       assertFalse(node2.isTypeOf());
1518:       assertFalse(node2.isCall());
1519:       assertFalse(node2.isExprResult());
1520:       assertFalse(node2.isVoid());
1521:       assertFalse(node2.isGetElem());
1522:       assertFalse(node2.isBreak());
1523:       assertFalse(simpleSourceFile0.isExtern());
1524:       assertEquals("?0JftnD;'", simpleSourceFile0.getName());
1525:       assertEquals("?0JftnD;'", simpleSourceFile0.toString());
1526:       assertNotSame(node0, node4);
1527:       assertNotSame(node0, node3);
1528:       assertSame(node0, node2);
1529:       assertNotSame(node2, node4);
1530:       assertNotSame(node2, node3);
1531:       assertSame(node2, node0);
1532:       assertFalse(node0.equals((Object)node4));
1533:       assertFalse(node0.equals((Object)node1));
1534:       assertFalse(node0.equals((Object)node3));
1535:       assertFalse(node1.equals((Object)node2));
1536:       assertFalse(node1.equals((Object)node3));
1537:       assertFalse(node1.equals((Object)node0));
1538:       assertFalse(node1.equals((Object)node4));
1539:       assertFalse(node2.equals((Object)node4));
1540:       assertFalse(node2.equals((Object)node1));
1541:       assertFalse(node2.equals((Object)node3));
1542:       
1543:       Node node5 = Node.newString(16, "(|");
1544:       assertFalse(node5.isThrow());
1545:       assertFalse(node5.isFalse());
1546:       assertFalse(node5.isHook());
1547:       assertEquals((-1), node5.getCharno());
1548:       assertFalse(node5.isComma());
1549:       assertFalse(node5.isSwitch());
1550:       assertFalse(node5.isBreak());
1551:       assertFalse(node5.isObjectLit());
1552:       assertFalse(node5.isAnd());
1553:       assertFalse(node5.isInstanceOf());
1554:       assertFalse(node5.isWith());
1555:       assertFalse(node5.isNot());
1556:       assertFalse(node5.isThis());
1557:       assertFalse(node5.isScript());
1558:       assertFalse(node5.isString());
1559:       assertEquals(16, node5.getType());
1560:       assertFalse(node5.isCase());
1561:       assertFalse(node5.hasOneChild());
1562:       assertFalse(node5.isGetProp());
1563:       assertFalse(node5.isCast());
1564:       assertFalse(node5.isFor());
1565:       assertEquals((-1), node5.getSourcePosition());
1566:       assertFalse(node5.isFunction());
1567:       assertFalse(node5.isNE());
1568:       assertFalse(node5.isRegExp());
1569:       assertFalse(node5.isIf());
1570:       assertEquals((-1), node5.getLineno());
1571:       assertFalse(node5.isIn());
1572:       assertFalse(node5.isContinue());
1573:       assertFalse(node5.isSetterDef());
1574:       assertFalse(node5.isInc());
1575:       assertFalse(node5.isCall());
1576:       assertFalse(node5.isVar());
1577:       assertFalse(node5.isStringKey());
1578:       assertFalse(node5.isName());
1579:       assertFalse(node5.isBlock());
1580:       assertFalse(node5.isNull());
1581:       assertFalse(node5.isParamList());
1582:       assertFalse(node5.isCatch());
1583:       assertFalse(node5.hasMoreThanOneChild());
1584:       assertFalse(node5.isReturn());
1585:       assertFalse(node5.isWhile());
1586:       assertFalse(node5.isDebugger());
1587:       assertFalse(node5.isNumber());
1588:       assertFalse(node5.isTry());
1589:       assertFalse(node5.isAssign());
1590:       assertFalse(node5.isGetterDef());
1591:       assertFalse(node5.isDec());
1592:       assertFalse(node5.hasChildren());
1593:       assertFalse(node5.isExprResult());
1594:       assertFalse(node5.isTrue());
1595:       assertFalse(node5.isVoid());
1596:       assertFalse(node5.isTypeOf());
1597:       assertFalse(node5.isDelProp());
1598:       assertFalse(node5.isLabelName());
1599:       assertFalse(node5.isGetElem());
1600:       assertFalse(node5.isArrayLit());
1601:       assertEquals(0, node5.getChildCount());
1602:       assertFalse(node5.isOr());
1603:       assertFalse(node5.isLabel());
1604:       assertFalse(node5.isAssignAdd());
1605:       assertFalse(node5.isDefaultCase());
1606:       assertFalse(node5.isEmpty());
1607:       assertFalse(node5.isDo());
1608:       assertFalse(node5.isAdd());
1609:       assertFalse(node5.isNew());
1610:       assertNotSame(node5, node4);
1611:       assertNotSame(node5, node0);
1612:       assertNotSame(node5, node2);
1613:       assertNotSame(node5, node3);
1614:       assertFalse(node5.equals((Object)node4));
1615:       assertFalse(node5.equals((Object)node1));
1616:       assertFalse(node5.equals((Object)node0));
1617:       assertFalse(node5.equals((Object)node2));
1618:       assertFalse(node5.equals((Object)node3));
1619:       
1620:       Node node6 = node5.useSourceInfoFromForTree(node2);
1621:       assertFalse(node0.isNew());
1622:       assertEquals(254, node0.getType());
1623:       assertFalse(node0.isVar());
1624:       assertFalse(node0.isBlock());
1625:       assertFalse(node0.isStringKey());
1626:       assertFalse(node0.isContinue());
1627:       assertFalse(node0.isName());
1628:       assertEquals(37, node0.getLineno());
1629:       assertFalse(node0.hasMoreThanOneChild());
1630:       assertFalse(node0.isCall());
1631:       assertFalse(node0.isParamList());
1632:       assertFalse(node0.hasChildren());
1633:       assertFalse(node0.isReturn());
1634:       assertFalse(node0.isWhile());
1635:       assertFalse(node0.isNumber());
1636:       assertFalse(node0.hasOneChild());
1637:       assertFalse(node0.isVoid());
1638:       assertFalse(node0.isTrue());
1639:       assertFalse(node0.isAssign());
1640:       assertFalse(node0.isLabelName());
1641:       assertFalse(node0.isDec());
1642:       assertFalse(node0.isTypeOf());
1643:       assertFalse(node0.isDelProp());
1644:       assertFalse(node0.isArrayLit());
1645:       assertFalse(node0.isGetElem());
1646:       assertFalse(node0.isExprResult());
1647:       assertFalse(node0.isOr());
1648:       assertFalse(node0.isAssignAdd());
1649:       assertFalse(node0.isLabel());
1650:       assertEquals(0, node0.getChildCount());
1651:       assertFalse(node0.isNull());
1652:       assertFalse(node0.isEmpty());
1653:       assertFalse(node0.isDo());
1654:       assertFalse(node0.isDefaultCase());
1655:       assertFalse(node0.isAdd());
1656:       assertFalse(node0.isSwitch());
1657:       assertEquals(4095, node0.getCharno());
1658:       assertFalse(node0.isThrow());
1659:       assertFalse(node0.isHook());
1660:       assertFalse(node0.isFalse());
1661:       assertFalse(node0.isBreak());
1662:       assertFalse(node0.isAnd());
1663:       assertFalse(node0.isComma());
1664:       assertFalse(node0.isThis());
1665:       assertFalse(node0.isNot());
1666:       assertFalse(node0.isString());
1667:       assertFalse(node0.isCase());
1668:       assertFalse(node0.isGetterDef());
1669:       assertFalse(node0.isObjectLit());
1670:       assertFalse(node0.isScript());
1671:       assertFalse(node0.isGetProp());
1672:       assertFalse(node0.isTry());
1673:       assertEquals(155647, node0.getSourcePosition());
1674:       assertFalse(node0.isFunction());
1675:       assertFalse(node0.isDebugger());
1676:       assertFalse(node0.isFor());
1677:       assertFalse(node0.isWith());
1678:       assertFalse(node0.isIf());
1679:       assertFalse(node0.isRegExp());
1680:       assertFalse(node0.isCatch());
1681:       assertFalse(node0.isCast());
1682:       assertFalse(node0.isInstanceOf());
1683:       assertFalse(node0.isIn());
1684:       assertFalse(node0.isNE());
1685:       assertFalse(node0.isSetterDef());
1686:       assertFalse(node0.isInc());
1687:       assertFalse(node1.isThrow());
1688:       assertFalse(node1.isBreak());
1689:       assertFalse(node1.isGetProp());
1690:       assertFalse(node1.isInc());
1691:       assertEquals(4095, node1.getCharno());
1692:       assertFalse(node1.isObjectLit());
1693:       assertFalse(node1.isNot());
1694:       assertFalse(node1.isSwitch());
1695:       assertFalse(node1.isAnd());
1696:       assertFalse(node1.isCast());
1697:       assertFalse(node1.isFalse());
1698:       assertFalse(node1.isFor());
1699:       assertFalse(node1.isLabelName());
1700:       assertFalse(node1.isNE());
1701:       assertFalse(node1.isArrayLit());
1702:       assertFalse(node1.isIf());
1703:       assertEquals(155647, node1.getSourcePosition());
1704:       assertFalse(node1.isTry());
1705:       assertFalse(node1.isScript());
1706:       assertFalse(node1.isIn());
1707:       assertFalse(node1.isGetterDef());
1708:       assertFalse(node1.isNumber());
1709:       assertFalse(node1.isWith());
1710:       assertFalse(node1.isCase());
1711:       assertTrue(node1.hasChildren());
1712:       assertEquals(1, node1.getChildCount());
1713:       assertFalse(node1.isBlock());
1714:       assertEquals((-2145), node1.getType());
1715:       assertFalse(node1.isHook());
1716:       assertFalse(node1.isThis());
1717:       assertFalse(node1.isCatch());
1718:       assertFalse(node1.hasMoreThanOneChild());
1719:       assertFalse(node1.isInstanceOf());
1720:       assertFalse(node1.isRegExp());
1721:       assertFalse(node1.isStringKey());
1722:       assertFalse(node1.isCall());
1723:       assertFalse(node1.isNull());
1724:       assertFalse(node1.isVar());
1725:       assertFalse(node1.isParamList());
1726:       assertFalse(node1.isName());
1727:       assertFalse(node1.isNew());
1728:       assertFalse(node1.isAdd());
1729:       assertFalse(node1.isSetterDef());
1730:       assertFalse(node1.isDo());
1731:       assertFalse(node1.isDefaultCase());
1732:       assertFalse(node1.isAssignAdd());
1733:       assertFalse(node1.isLabel());
1734:       assertFalse(node1.isContinue());
1735:       assertFalse(node1.isFunction());
1736:       assertEquals(37, node1.getLineno());
1737:       assertFalse(node1.isAssign());
1738:       assertFalse(node1.isEmpty());
1739:       assertFalse(node1.isGetElem());
1740:       assertTrue(node1.hasOneChild());
1741:       assertFalse(node1.isDelProp());
1742:       assertFalse(node1.isOr());
1743:       assertFalse(node1.isTrue());
1744:       assertFalse(node1.isDebugger());
1745:       assertFalse(node1.isWhile());
1746:       assertFalse(node1.isString());
1747:       assertFalse(node1.isVoid());
1748:       assertFalse(node1.isReturn());
1749:       assertFalse(node1.isExprResult());
1750:       assertFalse(node1.isDec());
1751:       assertFalse(node1.isComma());
1752:       assertFalse(node1.isTypeOf());
1753:       assertFalse(node2.isInstanceOf());
1754:       assertFalse(node2.isObjectLit());
1755:       assertFalse(node2.isAnd());
1756:       assertFalse(node2.isThis());
1757:       assertFalse(node2.isComma());
1758:       assertFalse(node2.isNot());
1759:       assertFalse(node2.isScript());
1760:       assertFalse(node2.isGetProp());
1761:       assertFalse(node2.isThrow());
1762:       assertEquals(4095, node2.getCharno());
1763:       assertFalse(node2.isLabelName());
1764:       assertFalse(node2.isFalse());
1765:       assertFalse(node2.isSwitch());
1766:       assertFalse(node2.isCast());
1767:       assertFalse(node2.hasMoreThanOneChild());
1768:       assertFalse(node2.isIn());
1769:       assertFalse(node2.isNE());
1770:       assertFalse(node2.isGetterDef());
1771:       assertFalse(node2.isNumber());
1772:       assertFalse(node2.isInc());
1773:       assertFalse(node2.isCase());
1774:       assertFalse(node2.hasOneChild());
1775:       assertEquals(254, node2.getType());
1776:       assertEquals(155647, node2.getSourcePosition());
1777:       assertFalse(node2.isTry());
1778:       assertFalse(node2.isBlock());
1779:       assertFalse(node2.isHook());
1780:       assertFalse(node2.isFor());
1781:       assertFalse(node2.isRegExp());
1782:       assertFalse(node2.isIf());
1783:       assertFalse(node2.isWith());
1784:       assertFalse(node2.isCatch());
1785:       assertEquals(0, node2.getChildCount());
1786:       assertFalse(node2.isParamList());
1787:       assertFalse(node2.isNull());
1788:       assertFalse(node2.isDefaultCase());
1789:       assertFalse(node2.isSetterDef());
1790:       assertFalse(node2.isDebugger());
1791:       assertFalse(node2.isFunction());
1792:       assertFalse(node2.isVar());
1793:       assertFalse(node2.isStringKey());
1794:       assertEquals(37, node2.getLineno());
1795:       assertFalse(node2.isContinue());
1796:       assertFalse(node2.isArrayLit());
1797:       assertFalse(node2.isReturn());
1798:       assertFalse(node2.isOr());
1799:       assertFalse(node2.isAssignAdd());
1800:       assertFalse(node2.hasChildren());
1801:       assertFalse(node2.isLabel());
1802:       assertFalse(node2.isWhile());
1803:       assertFalse(node2.isString());
1804:       assertFalse(node2.isEmpty());
1805:       assertFalse(node2.isDo());
1806:       assertFalse(node2.isAdd());
1807:       assertFalse(node2.isNew());
1808:       assertFalse(node2.isTrue());
1809:       assertFalse(node2.isDelProp());
1810:       assertFalse(node2.isDec());
1811:       assertFalse(node2.isAssign());
1812:       assertFalse(node2.isName());
1813:       assertFalse(node2.isTypeOf());
1814:       assertFalse(node2.isCall());
1815:       assertFalse(node2.isExprResult());
1816:       assertFalse(node2.isVoid());
1817:       assertFalse(node2.isGetElem());
1818:       assertFalse(node2.isBreak());
1819:       assertFalse(node5.isThrow());
1820:       assertFalse(node5.isFalse());
1821:       assertFalse(node5.isHook());
1822:       assertFalse(node5.isComma());
1823:       assertFalse(node5.isSwitch());
1824:       assertFalse(node5.isBreak());
1825:       assertFalse(node5.isObjectLit());
1826:       assertFalse(node5.isAnd());
1827:       assertFalse(node5.isInstanceOf());
1828:       assertFalse(node5.isWith());
1829:       assertFalse(node5.isNot());
1830:       assertFalse(node5.isThis());
1831:       assertEquals(4095, node5.getCharno());
1832:       assertFalse(node5.isScript());
1833:       assertFalse(node5.isString());
1834:       assertEquals(16, node5.getType());
1835:       assertFalse(node5.isCase());
1836:       assertFalse(node5.hasOneChild());
1837:       assertFalse(node5.isGetProp());
1838:       assertFalse(node5.isCast());
1839:       assertFalse(node5.isFor());
1840:       assertFalse(node5.isFunction());
1841:       assertFalse(node5.isNE());
1842:       assertFalse(node5.isRegExp());
1843:       assertFalse(node5.isIf());
1844:       assertFalse(node5.isIn());
1845:       assertFalse(node5.isContinue());
1846:       assertFalse(node5.isSetterDef());
1847:       assertFalse(node5.isInc());
1848:       assertFalse(node5.isCall());
1849:       assertFalse(node5.isVar());
1850:       assertFalse(node5.isStringKey());
1851:       assertFalse(node5.isName());
1852:       assertFalse(node5.isBlock());
1853:       assertFalse(node5.isNull());
1854:       assertFalse(node5.isParamList());
1855:       assertEquals(37, node5.getLineno());
1856:       assertFalse(node5.isCatch());
1857:       assertFalse(node5.hasMoreThanOneChild());
1858:       assertFalse(node5.isReturn());
1859:       assertFalse(node5.isWhile());
1860:       assertFalse(node5.isDebugger());
1861:       assertFalse(node5.isNumber());
1862:       assertEquals(155647, node5.getSourcePosition());
1863:       assertFalse(node5.isTry());
1864:       assertFalse(node5.isAssign());
1865:       assertFalse(node5.isGetterDef());
1866:       assertFalse(node5.isDec());
1867:       assertFalse(node5.hasChildren());
1868:       assertFalse(node5.isExprResult());
1869:       assertFalse(node5.isTrue());
1870:       assertFalse(node5.isVoid());
1871:       assertFalse(node5.isTypeOf());
1872:       assertFalse(node5.isDelProp());
1873:       assertFalse(node5.isLabelName());
1874:       assertFalse(node5.isGetElem());
1875:       assertFalse(node5.isArrayLit());
1876:       assertEquals(0, node5.getChildCount());
1877:       assertFalse(node5.isOr());
1878:       assertFalse(node5.isLabel());
1879:       assertFalse(node5.isAssignAdd());
1880:       assertFalse(node5.isDefaultCase());
1881:       assertFalse(node5.isEmpty());
1882:       assertFalse(node5.isDo());
1883:       assertFalse(node5.isAdd());
1884:       assertFalse(node5.isNew());
1885:       assertFalse(node6.isCatch());
1886:       assertEquals(37, node6.getLineno());
1887:       assertEquals(0, node6.getChildCount());
1888:       assertFalse(node6.isDefaultCase());
1889:       assertFalse(node6.isSetterDef());
1890:       assertFalse(node6.isTry());
1891:       assertFalse(node6.isVar());
1892:       assertFalse(node6.isDebugger());
1893:       assertFalse(node6.isFunction());
1894:       assertFalse(node6.isStringKey());
1895:       assertFalse(node6.isParamList());
1896:       assertFalse(node6.isArrayLit());
1897:       assertFalse(node6.isIn());
1898:       assertFalse(node6.hasMoreThanOneChild());
1899:       assertFalse(node6.isContinue());
1900:       assertFalse(node6.isNumber());
1901:       assertFalse(node6.isGetterDef());
1902:       assertFalse(node6.isFor());
1903:       assertFalse(node6.isInc());
1904:       assertFalse(node6.isCase());
1905:       assertFalse(node6.hasOneChild());
1906:       assertEquals(155647, node6.getSourcePosition());
1907:       assertFalse(node6.isBlock());
1908:       assertFalse(node6.isHook());
1909:       assertFalse(node6.isRegExp());
1910:       assertFalse(node6.isIf());
1911:       assertFalse(node6.isWith());
1912:       assertFalse(node6.isNE());
1913:       assertFalse(node6.isInstanceOf());
1914:       assertFalse(node6.isObjectLit());
1915:       assertFalse(node6.isThis());
1916:       assertFalse(node6.isComma());
1917:       assertFalse(node6.isNot());
1918:       assertFalse(node6.isThrow());
1919:       assertFalse(node6.isScript());
1920:       assertFalse(node6.isGetProp());
1921:       assertFalse(node6.isCast());
1922:       assertFalse(node6.isFalse());
1923:       assertEquals(4095, node6.getCharno());
1924:       assertFalse(node6.isAnd());
1925:       assertFalse(node6.isSwitch());
1926:       assertFalse(node6.isLabelName());
1927:       assertFalse(node6.isReturn());
1928:       assertFalse(node6.isAssignAdd());
1929:       assertFalse(node6.isLabel());
1930:       assertEquals(16, node6.getType());
1931:       assertFalse(node6.isDec());
1932:       assertFalse(node6.isTypeOf());
1933:       assertFalse(node6.isOr());
1934:       assertFalse(node6.isWhile());
1935:       assertFalse(node6.isString());
1936:       assertFalse(node6.hasChildren());
1937:       assertFalse(node6.isEmpty());
1938:       assertFalse(node6.isNew());
1939:       assertFalse(node6.isDo());
1940:       assertFalse(node6.isAdd());
1941:       assertFalse(node6.isTrue());
1942:       assertFalse(node6.isAssign());
1943:       assertFalse(node6.isDelProp());
1944:       assertFalse(node6.isBreak());
1945:       assertFalse(node6.isNull());
1946:       assertFalse(node6.isGetElem());
1947:       assertFalse(node6.isCall());
1948:       assertFalse(node6.isExprResult());
1949:       assertFalse(node6.isName());
1950:       assertFalse(node6.isVoid());
1951:       assertNotSame(node0, node4);
1952:       assertNotSame(node0, node6);
1953:       assertNotSame(node0, node5);
1954:       assertNotSame(node0, node3);
1955:       assertSame(node0, node2);
1956:       assertNotSame(node2, node4);
1957:       assertNotSame(node2, node5);
1958:       assertNotSame(node2, node6);
1959:       assertNotSame(node2, node3);
1960:       assertSame(node2, node0);
1961:       assertNotSame(node5, node4);
1962:       assertNotSame(node5, node0);
1963:       assertNotSame(node5, node2);
1964:       assertNotSame(node5, node3);
1965:       assertSame(node5, node6);
1966:       assertNotSame(node6, node3);
1967:       assertSame(node6, node5);
1968:       assertNotSame(node6, node4);
1969:       assertNotSame(node6, node0);
1970:       assertNotSame(node6, node2);
1971:       assertFalse(node0.equals((Object)node4));
1972:       assertFalse(node0.equals((Object)node5));
1973:       assertFalse(node0.equals((Object)node1));
1974:       assertFalse(node0.equals((Object)node3));
1975:       assertFalse(node1.equals((Object)node5));
1976:       assertFalse(node1.equals((Object)node2));
1977:       assertFalse(node1.equals((Object)node3));
1978:       assertFalse(node1.equals((Object)node0));
1979:       assertFalse(node1.equals((Object)node4));
1980:       assertFalse(node2.equals((Object)node4));
1981:       assertFalse(node2.equals((Object)node1));
1982:       assertFalse(node2.equals((Object)node5));
1983:       assertFalse(node2.equals((Object)node3));
1984:       assertFalse(node5.equals((Object)node4));
1985:       assertFalse(node5.equals((Object)node1));
1986:       assertFalse(node5.equals((Object)node0));
1987:       assertFalse(node5.equals((Object)node2));
1988:       assertFalse(node5.equals((Object)node3));
1989:       assertFalse(node6.equals((Object)node1));
1990:       assertFalse(node6.equals((Object)node3));
1991:       assertFalse(node6.equals((Object)node4));
1992:       assertFalse(node6.equals((Object)node0));
1993:       assertFalse(node6.equals((Object)node2));
1994:       
1995:       boolean boolean1 = node5.getBooleanProp(118);
1996:       assertFalse(node5.isThrow());
1997:       assertFalse(node5.isFalse());
1998:       assertFalse(node5.isHook());
1999:       assertFalse(node5.isComma());
2000:       assertFalse(node5.isSwitch());
2001:       assertFalse(node5.isBreak());
2002:       assertFalse(node5.isObjectLit());
2003:       assertFalse(node5.isAnd());
2004:       assertFalse(node5.isInstanceOf());
2005:       assertFalse(node5.isWith());
2006:       assertFalse(node5.isNot());
2007:       assertFalse(node5.isThis());
2008:       assertEquals(4095, node5.getCharno());
2009:       assertFalse(node5.isScript());
2010:       assertFalse(node5.isString());
2011:       assertEquals(16, node5.getType());
2012:       assertFalse(node5.isCase());
2013:       assertFalse(node5.hasOneChild());
2014:       assertFalse(node5.isGetProp());
2015:       assertFalse(node5.isCast());
2016:       assertFalse(node5.isFor());
2017:       assertFalse(node5.isFunction());
2018:       assertFalse(node5.isNE());
2019:       assertFalse(node5.isRegExp());
2020:       assertFalse(node5.isIf());
2021:       assertFalse(node5.isIn());
2022:       assertFalse(node5.isContinue());
2023:       assertFalse(node5.isSetterDef());
2024:       assertFalse(node5.isInc());
2025:       assertFalse(node5.isCall());
2026:       assertFalse(node5.isVar());
2027:       assertFalse(node5.isStringKey());
2028:       assertFalse(node5.isName());
2029:       assertFalse(node5.isBlock());
2030:       assertFalse(node5.isNull());
2031:       assertFalse(node5.isParamList());
2032:       assertEquals(37, node5.getLineno());
2033:       assertFalse(node5.isCatch());
2034:       assertFalse(node5.hasMoreThanOneChild());
2035:       assertFalse(node5.isReturn());
2036:       assertFalse(node5.isWhile());
2037:       assertFalse(node5.isDebugger());
2038:       assertFalse(node5.isNumber());
2039:       assertEquals(155647, node5.getSourcePosition());
2040:       assertFalse(node5.isTry());
2041:       assertFalse(node5.isAssign());
2042:       assertFalse(node5.isGetterDef());
2043:       assertFalse(node5.isDec());
2044:       assertFalse(node5.hasChildren());
2045:       assertFalse(node5.isExprResult());
2046:       assertFalse(node5.isTrue());
2047:       assertFalse(node5.isVoid());
2048:       assertFalse(node5.isTypeOf());
2049:       assertFalse(node5.isDelProp());
2050:       assertFalse(node5.isLabelName());
2051:       assertFalse(node5.isGetElem());
2052:       assertFalse(node5.isArrayLit());
2053:       assertEquals(0, node5.getChildCount());
2054:       assertFalse(node5.isOr());
2055:       assertFalse(node5.isLabel());
2056:       assertFalse(node5.isAssignAdd());
2057:       assertFalse(node5.isDefaultCase());
2058:       assertFalse(node5.isEmpty());
2059:       assertFalse(node5.isDo());
2060:       assertFalse(node5.isAdd());
2061:       assertFalse(node5.isNew());
2062:       assertNotSame(node5, node4);
2063:       assertNotSame(node5, node0);
2064:       assertNotSame(node5, node2);
2065:       assertNotSame(node5, node3);
2066:       assertSame(node5, node6);
2067:       assertFalse(node5.equals((Object)node4));
2068:       assertFalse(node5.equals((Object)node1));
2069:       assertFalse(node5.equals((Object)node0));
2070:       assertFalse(node5.equals((Object)node2));
2071:       assertFalse(node5.equals((Object)node3));
2072:       assertTrue(boolean1 == boolean0);
2073:       
2074:       boolean boolean2 = node6.isTypeOf();
2075:       assertFalse(node0.isNew());
2076:       assertEquals(254, node0.getType());
2077:       assertFalse(node0.isVar());
2078:       assertFalse(node0.isBlock());
2079:       assertFalse(node0.isStringKey());
2080:       assertFalse(node0.isContinue());
2081:       assertFalse(node0.isName());
2082:       assertEquals(37, node0.getLineno());
2083:       assertFalse(node0.hasMoreThanOneChild());
2084:       assertFalse(node0.isCall());
2085:       assertFalse(node0.isParamList());
2086:       assertFalse(node0.hasChildren());
2087:       assertFalse(node0.isReturn());
2088:       assertFalse(node0.isWhile());
2089:       assertFalse(node0.isNumber());
2090:       assertFalse(node0.hasOneChild());
2091:       assertFalse(node0.isVoid());
2092:       assertFalse(node0.isTrue());
2093:       assertFalse(node0.isAssign());
2094:       assertFalse(node0.isLabelName());
2095:       assertFalse(node0.isDec());
2096:       assertFalse(node0.isTypeOf());
2097:       assertFalse(node0.isDelProp());
2098:       assertFalse(node0.isArrayLit());
2099:       assertFalse(node0.isGetElem());
2100:       assertFalse(node0.isExprResult());
2101:       assertFalse(node0.isOr());
2102:       assertFalse(node0.isAssignAdd());
2103:       assertFalse(node0.isLabel());
2104:       assertEquals(0, node0.getChildCount());
2105:       assertFalse(node0.isNull());
2106:       assertFalse(node0.isEmpty());
2107:       assertFalse(node0.isDo());
2108:       assertFalse(node0.isDefaultCase());
2109:       assertFalse(node0.isAdd());
2110:       assertFalse(node0.isSwitch());
2111:       assertEquals(4095, node0.getCharno());
2112:       assertFalse(node0.isThrow());
2113:       assertFalse(node0.isHook());
2114:       assertFalse(node0.isFalse());
2115:       assertFalse(node0.isBreak());
2116:       assertFalse(node0.isAnd());
2117:       assertFalse(node0.isComma());
2118:       assertFalse(node0.isThis());
2119:       assertFalse(node0.isNot());
2120:       assertFalse(node0.isString());
2121:       assertFalse(node0.isCase());
2122:       assertFalse(node0.isGetterDef());
2123:       assertFalse(node0.isObjectLit());
2124:       assertFalse(node0.isScript());
2125:       assertFalse(node0.isGetProp());
2126:       assertFalse(node0.isTry());
2127:       assertEquals(155647, node0.getSourcePosition());
2128:       assertFalse(node0.isFunction());
2129:       assertFalse(node0.isDebugger());
2130:       assertFalse(node0.isFor());
2131:       assertFalse(node0.isWith());
2132:       assertFalse(node0.isIf());
2133:       assertFalse(node0.isRegExp());
2134:       assertFalse(node0.isCatch());
2135:       assertFalse(node0.isCast());
2136:       assertFalse(node0.isInstanceOf());
2137:       assertFalse(node0.isIn());
2138:       assertFalse(node0.isNE());
2139:       assertFalse(node0.isSetterDef());
2140:       assertFalse(node0.isInc());
2141:       assertFalse(node1.isThrow());
2142:       assertFalse(node1.isBreak());
2143:       assertFalse(node1.isGetProp());
2144:       assertFalse(node1.isInc());
2145:       assertEquals(4095, node1.getCharno());
2146:       assertFalse(node1.isObjectLit());
2147:       assertFalse(node1.isNot());
2148:       assertFalse(node1.isSwitch());
2149:       assertFalse(node1.isAnd());
2150:       assertFalse(node1.isCast());
2151:       assertFalse(node1.isFalse());
2152:       assertFalse(node1.isFor());
2153:       assertFalse(node1.isLabelName());
2154:       assertFalse(node1.isNE());
2155:       assertFalse(node1.isArrayLit());
2156:       assertFalse(node1.isIf());
2157:       assertEquals(155647, node1.getSourcePosition());
2158:       assertFalse(node1.isTry());
2159:       assertFalse(node1.isScript());
2160:       assertFalse(node1.isIn());
2161:       assertFalse(node1.isGetterDef());
2162:       assertFalse(node1.isNumber());
2163:       assertFalse(node1.isWith());
2164:       assertFalse(node1.isCase());
2165:       assertTrue(node1.hasChildren());
2166:       assertEquals(1, node1.getChildCount());
2167:       assertFalse(node1.isBlock());
2168:       assertEquals((-2145), node1.getType());
2169:       assertFalse(node1.isHook());
2170:       assertFalse(node1.isThis());
2171:       assertFalse(node1.isCatch());
2172:       assertFalse(node1.hasMoreThanOneChild());
2173:       assertFalse(node1.isInstanceOf());
2174:       assertFalse(node1.isRegExp());
2175:       assertFalse(node1.isStringKey());
2176:       assertFalse(node1.isCall());
2177:       assertFalse(node1.isNull());
2178:       assertFalse(node1.isVar());
2179:       assertFalse(node1.isParamList());
2180:       assertFalse(node1.isName());
2181:       assertFalse(node1.isNew());
2182:       assertFalse(node1.isAdd());
2183:       assertFalse(node1.isSetterDef());
2184:       assertFalse(node1.isDo());
2185:       assertFalse(node1.isDefaultCase());
2186:       assertFalse(node1.isAssignAdd());
2187:       assertFalse(node1.isLabel());
2188:       assertFalse(node1.isContinue());
2189:       assertFalse(node1.isFunction());
2190:       assertEquals(37, node1.getLineno());
2191:       assertFalse(node1.isAssign());
2192:       assertFalse(node1.isEmpty());
2193:       assertFalse(node1.isGetElem());
2194:       assertTrue(node1.hasOneChild());
2195:       assertFalse(node1.isDelProp());
2196:       assertFalse(node1.isOr());
2197:       assertFalse(node1.isTrue());
2198:       assertFalse(node1.isDebugger());
2199:       assertFalse(node1.isWhile());
2200:       assertFalse(node1.isString());
2201:       assertFalse(node1.isVoid());
2202:       assertFalse(node1.isReturn());
2203:       assertFalse(node1.isExprResult());
2204:       assertFalse(node1.isDec());
2205:       assertFalse(node1.isComma());
2206:       assertFalse(node1.isTypeOf());
2207:       assertFalse(node2.isInstanceOf());
2208:       assertFalse(node2.isObjectLit());
2209:       assertFalse(node2.isAnd());
2210:       assertFalse(node2.isThis());
2211:       assertFalse(node2.isComma());
2212:       assertFalse(node2.isNot());
2213:       assertFalse(node2.isScript());
2214:       assertFalse(node2.isGetProp());
2215:       assertFalse(node2.isThrow());
2216:       assertEquals(4095, node2.getCharno());
2217:       assertFalse(node2.isLabelName());
2218:       assertFalse(node2.isFalse());
2219:       assertFalse(node2.isSwitch());
2220:       assertFalse(node2.isCast());
2221:       assertFalse(node2.hasMoreThanOneChild());
2222:       assertFalse(node2.isIn());
2223:       assertFalse(node2.isNE());
2224:       assertFalse(node2.isGetterDef());
2225:       assertFalse(node2.isNumber());
2226:       assertFalse(node2.isInc());
2227:       assertFalse(node2.isCase());
2228:       assertFalse(node2.hasOneChild());
2229:       assertEquals(254, node2.getType());
2230:       assertEquals(155647, node2.getSourcePosition());
2231:       assertFalse(node2.isTry());
2232:       assertFalse(node2.isBlock());
2233:       assertFalse(node2.isHook());
2234:       assertFalse(node2.isFor());
2235:       assertFalse(node2.isRegExp());
2236:       assertFalse(node2.isIf());
2237:       assertFalse(node2.isWith());
2238:       assertFalse(node2.isCatch());
2239:       assertEquals(0, node2.getChildCount());
2240:       assertFalse(node2.isParamList());
2241:       assertFalse(node2.isNull());
2242:       assertFalse(node2.isDefaultCase());
2243:       assertFalse(node2.isSetterDef());
2244:       assertFalse(node2.isDebugger());
2245:       assertFalse(node2.isFunction());
2246:       assertFalse(node2.isVar());
2247:       assertFalse(node2.isStringKey());
2248:       assertEquals(37, node2.getLineno());
2249:       assertFalse(node2.isContinue());
2250:       assertFalse(node2.isArrayLit());
2251:       assertFalse(node2.isReturn());
2252:       assertFalse(node2.isOr());
2253:       assertFalse(node2.isAssignAdd());
2254:       assertFalse(node2.hasChildren());
2255:       assertFalse(node2.isLabel());
2256:       assertFalse(node2.isWhile());
2257:       assertFalse(node2.isString());
2258:       assertFalse(node2.isEmpty());
2259:       assertFalse(node2.isDo());
2260:       assertFalse(node2.isAdd());
2261:       assertFalse(node2.isNew());
2262:       assertFalse(node2.isTrue());
2263:       assertFalse(node2.isDelProp());
2264:       assertFalse(node2.isDec());
2265:       assertFalse(node2.isAssign());
2266:       assertFalse(node2.isName());
2267:       assertFalse(node2.isTypeOf());
2268:       assertFalse(node2.isCall());
2269:       assertFalse(node2.isExprResult());
2270:       assertFalse(node2.isVoid());
2271:       assertFalse(node2.isGetElem());
2272:       assertFalse(node2.isBreak());
2273:       assertFalse(node5.isThrow());
2274:       assertFalse(node5.isFalse());
2275:       assertFalse(node5.isHook());
2276:       assertFalse(node5.isComma());
2277:       assertFalse(node5.isSwitch());
2278:       assertFalse(node5.isBreak());
2279:       assertFalse(node5.isObjectLit());
2280:       assertFalse(node5.isAnd());
2281:       assertFalse(node5.isInstanceOf());
2282:       assertFalse(node5.isWith());
2283:       assertFalse(node5.isNot());
2284:       assertFalse(node5.isThis());
2285:       assertEquals(4095, node5.getCharno());
2286:       assertFalse(node5.isScript());
2287:       assertFalse(node5.isString());
2288:       assertEquals(16, node5.getType());
2289:       assertFalse(node5.isCase());
2290:       assertFalse(node5.hasOneChild());
2291:       assertFalse(node5.isGetProp());
2292:       assertFalse(node5.isCast());
2293:       assertFalse(node5.isFor());
2294:       assertFalse(node5.isFunction());
2295:       assertFalse(node5.isNE());
2296:       assertFalse(node5.isRegExp());
2297:       assertFalse(node5.isIf());
2298:       assertFalse(node5.isIn());
2299:       assertFalse(node5.isContinue());
2300:       assertFalse(node5.isSetterDef());
2301:       assertFalse(node5.isInc());
2302:       assertFalse(node5.isCall());
2303:       assertFalse(node5.isVar());
2304:       assertFalse(node5.isStringKey());
2305:       assertFalse(node5.isName());
2306:       assertFalse(node5.isBlock());
2307:       assertFalse(node5.isNull());
2308:       assertFalse(node5.isParamList());
2309:       assertEquals(37, node5.getLineno());
2310:       assertFalse(node5.isCatch());
2311:       assertFalse(node5.hasMoreThanOneChild());
2312:       assertFalse(node5.isReturn());
2313:       assertFalse(node5.isWhile());
2314:       assertFalse(node5.isDebugger());
2315:       assertFalse(node5.isNumber());
2316:       assertEquals(155647, node5.getSourcePosition());
2317:       assertFalse(node5.isTry());
2318:       assertFalse(node5.isAssign());
2319:       assertFalse(node5.isGetterDef());
2320:       assertFalse(node5.isDec());
2321:       assertFalse(node5.hasChildren());
2322:       assertFalse(node5.isExprResult());
2323:       assertFalse(node5.isTrue());
2324:       assertFalse(node5.isVoid());
2325:       assertFalse(node5.isTypeOf());
2326:       assertFalse(node5.isDelProp());
2327:       assertFalse(node5.isLabelName());
2328:       assertFalse(node5.isGetElem());
2329:       assertFalse(node5.isArrayLit());
2330:       assertEquals(0, node5.getChildCount());
2331:       assertFalse(node5.isOr());
2332:       assertFalse(node5.isLabel());
2333:       assertFalse(node5.isAssignAdd());
2334:       assertFalse(node5.isDefaultCase());
2335:       assertFalse(node5.isEmpty());
2336:       assertFalse(node5.isDo());
2337:       assertFalse(node5.isAdd());
2338:       assertFalse(node5.isNew());
2339:       assertFalse(node6.isCatch());
2340:       assertEquals(37, node6.getLineno());
2341:       assertEquals(0, node6.getChildCount());
2342:       assertFalse(node6.isDefaultCase());
2343:       assertFalse(node6.isSetterDef());
2344:       assertFalse(node6.isTry());
2345:       assertFalse(node6.isVar());
2346:       assertFalse(node6.isDebugger());
2347:       assertFalse(node6.isFunction());
2348:       assertFalse(node6.isStringKey());
2349:       assertFalse(node6.isParamList());
2350:       assertFalse(node6.isArrayLit());
2351:       assertFalse(node6.isIn());
2352:       assertFalse(node6.hasMoreThanOneChild());
2353:       assertFalse(node6.isContinue());
2354:       assertFalse(node6.isNumber());
2355:       assertFalse(node6.isGetterDef());
2356:       assertFalse(node6.isFor());
2357:       assertFalse(node6.isInc());
2358:       assertFalse(node6.isCase());
2359:       assertFalse(node6.hasOneChild());
2360:       assertEquals(155647, node6.getSourcePosition());
2361:       assertFalse(node6.isBlock());
2362:       assertFalse(node6.isHook());
2363:       assertFalse(node6.isRegExp());
2364:       assertFalse(node6.isIf());
2365:       assertFalse(node6.isWith());
2366:       assertFalse(node6.isNE());
2367:       assertFalse(node6.isInstanceOf());
2368:       assertFalse(node6.isObjectLit());
2369:       assertFalse(node6.isThis());
2370:       assertFalse(node6.isComma());
2371:       assertFalse(node6.isNot());
2372:       assertFalse(node6.isThrow());
2373:       assertFalse(node6.isScript());
2374:       assertFalse(node6.isGetProp());
2375:       assertFalse(node6.isCast());
2376:       assertFalse(node6.isFalse());
2377:       assertEquals(4095, node6.getCharno());
2378:       assertFalse(node6.isAnd());
2379:       assertFalse(node6.isSwitch());
2380:       assertFalse(node6.isLabelName());
2381:       assertFalse(node6.isReturn());
2382:       assertFalse(node6.isAssignAdd());
2383:       assertFalse(node6.isLabel());
2384:       assertEquals(16, node6.getType());
2385:       assertFalse(node6.isDec());
2386:       assertFalse(node6.isTypeOf());
2387:       assertFalse(node6.isOr());
2388:       assertFalse(node6.isWhile());
2389:       assertFalse(node6.isString());
2390:       assertFalse(node6.hasChildren());
2391:       assertFalse(node6.isEmpty());
2392:       assertFalse(node6.isNew());
2393:       assertFalse(node6.isDo());
2394:       assertFalse(node6.isAdd());
2395:       assertFalse(node6.isTrue());
2396:       assertFalse(node6.isAssign());
2397:       assertFalse(node6.isDelProp());
2398:       assertFalse(node6.isBreak());
2399:       assertFalse(node6.isNull());
2400:       assertFalse(node6.isGetElem());
2401:       assertFalse(node6.isCall());
2402:       assertFalse(node6.isExprResult());
2403:       assertFalse(node6.isName());
2404:       assertFalse(node6.isVoid());
2405:       assertNotSame(node0, node4);
2406:       assertNotSame(node0, node6);
2407:       assertNotSame(node0, node5);
2408:       assertNotSame(node0, node3);
2409:       assertSame(node0, node2);
2410:       assertNotSame(node2, node4);
2411:       assertNotSame(node2, node5);
2412:       assertNotSame(node2, node6);
2413:       assertNotSame(node2, node3);
2414:       assertSame(node2, node0);
2415:       assertNotSame(node5, node4);
2416:       assertNotSame(node5, node0);
2417:       assertNotSame(node5, node2);
2418:       assertNotSame(node5, node3);
2419:       assertSame(node5, node6);
2420:       assertNotSame(node6, node3);
2421:       assertSame(node6, node5);
2422:       assertNotSame(node6, node4);
2423:       assertNotSame(node6, node0);
2424:       assertNotSame(node6, node2);
2425:       assertFalse(node0.equals((Object)node4));
2426:       assertFalse(node0.equals((Object)node6));
2427:       assertFalse(node0.equals((Object)node5));
2428:       assertFalse(node0.equals((Object)node1));
2429:       assertFalse(node0.equals((Object)node3));
2430:       assertFalse(node1.equals((Object)node5));
2431:       assertFalse(node1.equals((Object)node6));
2432:       assertFalse(node1.equals((Object)node2));
2433:       assertFalse(node1.equals((Object)node3));
2434:       assertFalse(node1.equals((Object)node0));
2435:       assertFalse(node1.equals((Object)node4));
2436:       assertFalse(node2.equals((Object)node4));
2437:       assertFalse(node2.equals((Object)node1));
2438:       assertFalse(node2.equals((Object)node5));
2439:       assertFalse(node2.equals((Object)node6));
2440:       assertFalse(node2.equals((Object)node3));
2441:       assertFalse(node5.equals((Object)node4));
2442:       assertFalse(node5.equals((Object)node1));
2443:       assertFalse(node5.equals((Object)node0));
2444:       assertFalse(node5.equals((Object)node2));
2445:       assertFalse(node5.equals((Object)node3));
2446:       assertFalse(node6.equals((Object)node1));
2447:       assertFalse(node6.equals((Object)node3));
2448:       assertFalse(node6.equals((Object)node4));
2449:       assertFalse(node6.equals((Object)node0));
2450:       assertFalse(node6.equals((Object)node2));
2451:       assertTrue(boolean2 == boolean1);
2452:       assertTrue(boolean2 == boolean0);
2453:       
2454:       Node node7 = Node.newString("h!2n*fI,O3C", 147, 30);
2455:       assertFalse(node7.hasOneChild());
2456:       assertFalse(node7.isCast());
2457:       assertFalse(node7.isGetElem());
2458:       assertFalse(node7.isExprResult());
2459:       assertFalse(node7.isLabelName());
2460:       assertFalse(node7.isDec());
2461:       assertFalse(node7.hasChildren());
2462:       assertFalse(node7.isTypeOf());
2463:       assertFalse(node7.isWith());
2464:       assertFalse(node7.isReturn());
2465:       assertFalse(node7.isAssign());
2466:       assertFalse(node7.isLabel());
2467:       assertFalse(node7.isAnd());
2468:       assertFalse(node7.isContinue());
2469:       assertFalse(node7.isGetProp());
2470:       assertFalse(node7.isNumber());
2471:       assertFalse(node7.isScript());
2472:       assertEquals(147, node7.getLineno());
2473:       assertEquals(30, node7.getCharno());
2474:       assertFalse(node7.isObjectLit());
2475:       assertFalse(node7.isNot());
2476:       assertFalse(node7.isVar());
2477:       assertFalse(node7.isAdd());
2478:       assertFalse(node7.isCall());
2479:       assertFalse(node7.isName());
2480:       assertFalse(node7.isNew());
2481:       assertFalse(node7.isBreak());
2482:       assertFalse(node7.isWhile());
2483:       assertFalse(node7.isComma());
2484:       assertFalse(node7.isAssignAdd());
2485:       assertFalse(node7.isDo());
2486:       assertFalse(node7.isNull());
2487:       assertFalse(node7.isDelProp());
2488:       assertFalse(node7.isTrue());
2489:       assertFalse(node7.isOr());
2490:       assertFalse(node7.isVoid());
2491:       assertFalse(node7.isTry());
2492:       assertFalse(node7.isEmpty());
2493:       assertFalse(node7.isArrayLit());
2494:       assertFalse(node7.isDefaultCase());
2495:       assertFalse(node7.isRegExp());
2496:       assertEquals(40, node7.getType());
2497:       assertFalse(node7.isFunction());
2498:       assertFalse(node7.isFor());
2499:       assertEquals(0, node7.getChildCount());
2500:       assertFalse(node7.isCase());
2501:       assertFalse(node7.isGetterDef());
2502:       assertFalse(node7.isSwitch());
2503:       assertFalse(node7.isParamList());
2504:       assertFalse(node7.isStringKey());
2505:       assertFalse(node7.isDebugger());
2506:       assertFalse(node7.isHook());
2507:       assertTrue(node7.isString());
2508:       assertFalse(node7.isInc());
2509:       assertFalse(node7.isFalse());
2510:       assertFalse(node7.isThrow());
2511:       assertFalse(node7.isBlock());
2512:       assertFalse(node7.isThis());
2513:       assertFalse(node7.isIn());
2514:       assertFalse(node7.isInstanceOf());
2515:       assertFalse(node7.isCatch());
2516:       assertFalse(node7.hasMoreThanOneChild());
2517:       assertFalse(node7.isSetterDef());
2518:       assertFalse(node7.isIf());
2519:       assertFalse(node7.isNE());
2520:       assertEquals(602142, node7.getSourcePosition());
2521:       assertNotSame(node7, node4);
2522:       assertNotSame(node7, node5);
2523:       assertNotSame(node7, node3);
2524:       assertNotSame(node7, node0);
2525:       assertNotSame(node7, node2);
2526:       assertNotSame(node7, node6);
2527:       assertFalse(node7.equals((Object)node4));
2528:       assertFalse(node7.equals((Object)node5));
2529:       assertFalse(node7.equals((Object)node3));
2530:       assertFalse(node7.equals((Object)node0));
2531:       assertFalse(node7.equals((Object)node1));
2532:       assertFalse(node7.equals((Object)node2));
2533:       assertFalse(node7.equals((Object)node6));
2534:       
2535:       // Undeclared exception!
2536:       try { 
2537:         node5.clonePropsFrom(node7);
2538:         fail("Expecting exception: IllegalStateException");
2539:       
2540:       } catch(IllegalStateException e) {
2541:          //
2542:          // Node has existing properties.
2543:          //
2544:          verifyException("com.google.common.base.Preconditions", e);
2545:       }
2546:   }
2547: }
RegularFileObject[/tmp/EvoSuite_130_1628161899483/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:11:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_130_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.common.collect.Sets",
335:       "com.google.javascript.rhino.Node$AncestorIterable$1",
336:       "com.google.common.collect.Iterables",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.NamedType",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.javascript.rhino.jstype.JSType$2",
356:       "com.google.javascript.rhino.jstype.JSType$TypePair",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.NamespaceType",
359:       "com.google.common.collect.Iterators$12",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 11:11:40.146 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

node0.children();
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(254, node2.getType());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals(37, node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);

node0.detachChildren();
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node1.getLength();
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node2.getBooleanProp(9);
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(254, node2.getType());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals(37, node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = Node.newString("^T bi6mc\"24m1h|@{G");
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isDebugger());
assertFalse(node3.isStringKey());
assertFalse(node3.isContinue());
assertFalse(node3.isArrayLit());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isInc());
assertFalse(node3.isTry());
assertTrue(node3.isString());
assertFalse(node3.isRegExp());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isIf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isGetProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

Node node4 = Node.newString(38, "^T bi6mc\"24m1h|@{G", 15, 1679);
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isOr());
assertFalse(node4.isCast());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertFalse(node4.isAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isBreak());
assertFalse(node4.isVoid());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isComma());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertEquals(63119, node4.getSourcePosition());
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isSwitch());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertTrue(node4.isName());
assertEquals(1679, node4.getCharno());
assertFalse(node4.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertEquals(38, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isParamList());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertEquals(15, node4.getLineno());
assertNotSame(node4, node3);
assertNotSame(node4, node0);
assertNotSame(node4, node2);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("?0JftnD;'", false);
assertFalse(simpleSourceFile0.isExtern());
assertEquals("?0JftnD;'", simpleSourceFile0.getName());
assertEquals("?0JftnD;'", simpleSourceFile0.toString());

int int0 = Node.CHANGE_TIME;
assertFalse(int0 == int1);

node2.setStaticSourceFile(simpleSourceFile0);
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(254, node2.getType());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals(37, node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(simpleSourceFile0.isExtern());
assertEquals("?0JftnD;'", simpleSourceFile0.getName());
assertEquals("?0JftnD;'", simpleSourceFile0.toString());
assertNotSame(node0, node4);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node2, node4);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

Node node5 = Node.newString(16, "(|");
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isHook());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isComma());
assertFalse(node5.isSwitch());
assertFalse(node5.isBreak());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isThis());
assertFalse(node5.isScript());
assertFalse(node5.isString());
assertEquals(16, node5.getType());
assertFalse(node5.isCase());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isCast());
assertFalse(node5.isFor());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isFunction());
assertFalse(node5.isNE());
assertFalse(node5.isRegExp());
assertFalse(node5.isIf());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isIn());
assertFalse(node5.isContinue());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isCall());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isBlock());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertFalse(node5.isCatch());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node5.isDebugger());
assertFalse(node5.isNumber());
assertFalse(node5.isTry());
assertFalse(node5.isAssign());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isTypeOf());
assertFalse(node5.isDelProp());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isArrayLit());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isEmpty());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));

Node node6 = node5.useSourceInfoFromForTree(node2);
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(254, node2.getType());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals(37, node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isHook());
assertFalse(node5.isComma());
assertFalse(node5.isSwitch());
assertFalse(node5.isBreak());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isThis());
assertEquals(4095, node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isString());
assertEquals(16, node5.getType());
assertFalse(node5.isCase());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isCast());
assertFalse(node5.isFor());
assertFalse(node5.isFunction());
assertFalse(node5.isNE());
assertFalse(node5.isRegExp());
assertFalse(node5.isIf());
assertFalse(node5.isIn());
assertFalse(node5.isContinue());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isCall());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isBlock());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertEquals(37, node5.getLineno());
assertFalse(node5.isCatch());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node5.isDebugger());
assertFalse(node5.isNumber());
assertEquals(155647, node5.getSourcePosition());
assertFalse(node5.isTry());
assertFalse(node5.isAssign());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isTypeOf());
assertFalse(node5.isDelProp());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isArrayLit());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isEmpty());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertFalse(node6.isCatch());
assertEquals(37, node6.getLineno());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isSetterDef());
assertFalse(node6.isTry());
assertFalse(node6.isVar());
assertFalse(node6.isDebugger());
assertFalse(node6.isFunction());
assertFalse(node6.isStringKey());
assertFalse(node6.isParamList());
assertFalse(node6.isArrayLit());
assertFalse(node6.isIn());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isContinue());
assertFalse(node6.isNumber());
assertFalse(node6.isGetterDef());
assertFalse(node6.isFor());
assertFalse(node6.isInc());
assertFalse(node6.isCase());
assertFalse(node6.hasOneChild());
assertEquals(155647, node6.getSourcePosition());
assertFalse(node6.isBlock());
assertFalse(node6.isHook());
assertFalse(node6.isRegExp());
assertFalse(node6.isIf());
assertFalse(node6.isWith());
assertFalse(node6.isNE());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isObjectLit());
assertFalse(node6.isThis());
assertFalse(node6.isComma());
assertFalse(node6.isNot());
assertFalse(node6.isThrow());
assertFalse(node6.isScript());
assertFalse(node6.isGetProp());
assertFalse(node6.isCast());
assertFalse(node6.isFalse());
assertEquals(4095, node6.getCharno());
assertFalse(node6.isAnd());
assertFalse(node6.isSwitch());
assertFalse(node6.isLabelName());
assertFalse(node6.isReturn());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isLabel());
assertEquals(16, node6.getType());
assertFalse(node6.isDec());
assertFalse(node6.isTypeOf());
assertFalse(node6.isOr());
assertFalse(node6.isWhile());
assertFalse(node6.isString());
assertFalse(node6.hasChildren());
assertFalse(node6.isEmpty());
assertFalse(node6.isNew());
assertFalse(node6.isDo());
assertFalse(node6.isAdd());
assertFalse(node6.isTrue());
assertFalse(node6.isAssign());
assertFalse(node6.isDelProp());
assertFalse(node6.isBreak());
assertFalse(node6.isNull());
assertFalse(node6.isGetElem());
assertFalse(node6.isCall());
assertFalse(node6.isExprResult());
assertFalse(node6.isName());
assertFalse(node6.isVoid());
assertNotSame(node0, node4);
assertNotSame(node0, node6);
assertNotSame(node0, node5);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node2, node4);
assertNotSame(node2, node5);
assertNotSame(node2, node6);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertSame(node5, node6);
assertNotSame(node6, node3);
assertSame(node6, node5);
assertNotSame(node6, node4);
assertNotSame(node6, node0);
assertNotSame(node6, node2);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node2));

boolean boolean1 = node5.getBooleanProp(118);
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isHook());
assertFalse(node5.isComma());
assertFalse(node5.isSwitch());
assertFalse(node5.isBreak());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isThis());
assertEquals(4095, node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isString());
assertEquals(16, node5.getType());
assertFalse(node5.isCase());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isCast());
assertFalse(node5.isFor());
assertFalse(node5.isFunction());
assertFalse(node5.isNE());
assertFalse(node5.isRegExp());
assertFalse(node5.isIf());
assertFalse(node5.isIn());
assertFalse(node5.isContinue());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isCall());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isBlock());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertEquals(37, node5.getLineno());
assertFalse(node5.isCatch());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node5.isDebugger());
assertFalse(node5.isNumber());
assertEquals(155647, node5.getSourcePosition());
assertFalse(node5.isTry());
assertFalse(node5.isAssign());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isTypeOf());
assertFalse(node5.isDelProp());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isArrayLit());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isEmpty());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertSame(node5, node6);
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node6.isTypeOf();
assertFalse(node0.isNew());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(37, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(254, node2.getType());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals(37, node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isHook());
assertFalse(node5.isComma());
assertFalse(node5.isSwitch());
assertFalse(node5.isBreak());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isThis());
assertEquals(4095, node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isString());
assertEquals(16, node5.getType());
assertFalse(node5.isCase());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isCast());
assertFalse(node5.isFor());
assertFalse(node5.isFunction());
assertFalse(node5.isNE());
assertFalse(node5.isRegExp());
assertFalse(node5.isIf());
assertFalse(node5.isIn());
assertFalse(node5.isContinue());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isCall());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isBlock());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertEquals(37, node5.getLineno());
assertFalse(node5.isCatch());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node5.isDebugger());
assertFalse(node5.isNumber());
assertEquals(155647, node5.getSourcePosition());
assertFalse(node5.isTry());
assertFalse(node5.isAssign());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isTypeOf());
assertFalse(node5.isDelProp());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isArrayLit());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isOr());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isEmpty());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertFalse(node6.isCatch());
assertEquals(37, node6.getLineno());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isSetterDef());
assertFalse(node6.isTry());
assertFalse(node6.isVar());
assertFalse(node6.isDebugger());
assertFalse(node6.isFunction());
assertFalse(node6.isStringKey());
assertFalse(node6.isParamList());
assertFalse(node6.isArrayLit());
assertFalse(node6.isIn());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isContinue());
assertFalse(node6.isNumber());
assertFalse(node6.isGetterDef());
assertFalse(node6.isFor());
assertFalse(node6.isInc());
assertFalse(node6.isCase());
assertFalse(node6.hasOneChild());
assertEquals(155647, node6.getSourcePosition());
assertFalse(node6.isBlock());
assertFalse(node6.isHook());
assertFalse(node6.isRegExp());
assertFalse(node6.isIf());
assertFalse(node6.isWith());
assertFalse(node6.isNE());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isObjectLit());
assertFalse(node6.isThis());
assertFalse(node6.isComma());
assertFalse(node6.isNot());
assertFalse(node6.isThrow());
assertFalse(node6.isScript());
assertFalse(node6.isGetProp());
assertFalse(node6.isCast());
assertFalse(node6.isFalse());
assertEquals(4095, node6.getCharno());
assertFalse(node6.isAnd());
assertFalse(node6.isSwitch());
assertFalse(node6.isLabelName());
assertFalse(node6.isReturn());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isLabel());
assertEquals(16, node6.getType());
assertFalse(node6.isDec());
assertFalse(node6.isTypeOf());
assertFalse(node6.isOr());
assertFalse(node6.isWhile());
assertFalse(node6.isString());
assertFalse(node6.hasChildren());
assertFalse(node6.isEmpty());
assertFalse(node6.isNew());
assertFalse(node6.isDo());
assertFalse(node6.isAdd());
assertFalse(node6.isTrue());
assertFalse(node6.isAssign());
assertFalse(node6.isDelProp());
assertFalse(node6.isBreak());
assertFalse(node6.isNull());
assertFalse(node6.isGetElem());
assertFalse(node6.isCall());
assertFalse(node6.isExprResult());
assertFalse(node6.isName());
assertFalse(node6.isVoid());
assertNotSame(node0, node4);
assertNotSame(node0, node6);
assertNotSame(node0, node5);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node2, node4);
assertNotSame(node2, node5);
assertNotSame(node2, node6);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertSame(node5, node6);
assertNotSame(node6, node3);
assertSame(node6, node5);
assertNotSame(node6, node4);
assertNotSame(node6, node0);
assertNotSame(node6, node2);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node7 = Node.newString("h!2n*fI,O3C", 147, 30);
assertFalse(node7.hasOneChild());
assertFalse(node7.isCast());
assertFalse(node7.isGetElem());
assertFalse(node7.isExprResult());
assertFalse(node7.isLabelName());
assertFalse(node7.isDec());
assertFalse(node7.hasChildren());
assertFalse(node7.isTypeOf());
assertFalse(node7.isWith());
assertFalse(node7.isReturn());
assertFalse(node7.isAssign());
assertFalse(node7.isLabel());
assertFalse(node7.isAnd());
assertFalse(node7.isContinue());
assertFalse(node7.isGetProp());
assertFalse(node7.isNumber());
assertFalse(node7.isScript());
assertEquals(147, node7.getLineno());
assertEquals(30, node7.getCharno());
assertFalse(node7.isObjectLit());
assertFalse(node7.isNot());
assertFalse(node7.isVar());
assertFalse(node7.isAdd());
assertFalse(node7.isCall());
assertFalse(node7.isName());
assertFalse(node7.isNew());
assertFalse(node7.isBreak());
assertFalse(node7.isWhile());
assertFalse(node7.isComma());
assertFalse(node7.isAssignAdd());
assertFalse(node7.isDo());
assertFalse(node7.isNull());
assertFalse(node7.isDelProp());
assertFalse(node7.isTrue());
assertFalse(node7.isOr());
assertFalse(node7.isVoid());
assertFalse(node7.isTry());
assertFalse(node7.isEmpty());
assertFalse(node7.isArrayLit());
assertFalse(node7.isDefaultCase());
assertFalse(node7.isRegExp());
assertEquals(40, node7.getType());
assertFalse(node7.isFunction());
assertFalse(node7.isFor());
assertEquals(0, node7.getChildCount());
assertFalse(node7.isCase());
assertFalse(node7.isGetterDef());
assertFalse(node7.isSwitch());
assertFalse(node7.isParamList());
assertFalse(node7.isStringKey());
assertFalse(node7.isDebugger());
assertFalse(node7.isHook());
assertTrue(node7.isString());
assertFalse(node7.isInc());
assertFalse(node7.isFalse());
assertFalse(node7.isThrow());
assertFalse(node7.isBlock());
assertFalse(node7.isThis());
assertFalse(node7.isIn());
assertFalse(node7.isInstanceOf());
assertFalse(node7.isCatch());
assertFalse(node7.hasMoreThanOneChild());
assertFalse(node7.isSetterDef());
assertFalse(node7.isIf());
assertFalse(node7.isNE());
assertEquals(602142, node7.getSourcePosition());
assertNotSame(node7, node4);
assertNotSame(node7, node5);
assertNotSame(node7, node3);
assertNotSame(node7, node0);
assertNotSame(node7, node2);
assertNotSame(node7, node6);
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node5));
assertFalse(node7.equals((Object)node3));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node1));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node6));

node5.clonePropsFrom(node7);

[MASTER] 11:12:10.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:11.202 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:11.467 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:11.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:11.924 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:12.135 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:12.354 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:12.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:12.753 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:12.988 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:13.173 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:13.404 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:13.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:13.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:14.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:14.285 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:14.504 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:15.424 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:15.629 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:15.843 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:16.072 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:16.297 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:16.516 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:16.724 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:16.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:17.151 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:17.350 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:17.532 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:12:17.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/27
* Done!

* Computation finished
