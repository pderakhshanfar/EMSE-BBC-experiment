* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 10874
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2435877679
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:33.640 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:50:23.998 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:50:41.244 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 324 generations, 160100 statements, best individual has fitness: 3089.0
* Minimizing test suite
[MASTER] 18:00:59.366 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 791
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 587
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 99
* Number of covered goals: 99
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 454
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2056
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 714
* Number of covered goals: 542
* Generated 659 tests with total length 9709
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:02:06.060 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7086% of time used, but only 39/659 tests minimized), falling back to using all assertions
[MASTER] 18:02:23.623 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 18:02:32.054 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 18:02:36.044 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_42_1629223355529/com/google/javascript/rhino/Node_42_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_42_1629223355529/com/google/javascript/rhino/Node_42_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:36.044 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:36.044 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:36.047 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 161
[MASTER] 18:02:36.050 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_42_1629223355529/com/google/javascript/rhino/Node_42_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_42_tmp__ESTest extends Node_42_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("(|", 254, 0);
21:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
22:       assertEquals(40, Node.ORIGINALNAME_PROP);
23:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(30, Node.VAR_ARGS_NAME);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(15, Node.NO_SIDE_EFFECTS);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(49, Node.DIRECT_EVAL);
34:       assertEquals(53, Node.INPUT_ID);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(36, Node.QUOTED_PROP);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(56, Node.CHANGE_TIME);
44:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
47:       assertEquals(47, Node.IS_DISPATCHER);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(1, Node.DECR_FLAG);
50:       assertEquals(12, Node.COLUMN_BITS);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertFalse(node0.isGetterDef());
58:       assertFalse(node0.isIf());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isTry());
63:       assertEquals(1040384, node0.getSourcePosition());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isDefaultCase());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isCatch());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isFalse());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isComma());
81:       assertFalse(node0.isThrow());
82:       assertEquals(40, node0.getType());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isDebugger());
90:       assertFalse(node0.hasChildren());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.isAssign());
93:       assertFalse(node0.isTypeOf());
94:       assertFalse(node0.isLabelName());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isCast());
97:       assertFalse(node0.isGetElem());
98:       assertFalse(node0.hasOneChild());
99:       assertFalse(node0.isAssignAdd());
100:       assertFalse(node0.hasMoreThanOneChild());
101:       assertFalse(node0.isLabel());
102:       assertFalse(node0.isReturn());
103:       assertFalse(node0.isDo());
104:       assertFalse(node0.isWith());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isNew());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isOr());
109:       assertEquals(0, node0.getCharno());
110:       assertEquals(0, node0.getChildCount());
111:       assertFalse(node0.isInstanceOf());
112:       assertTrue(node0.isString());
113:       assertFalse(node0.isVar());
114:       assertFalse(node0.isThis());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.isBlock());
117:       assertFalse(node0.isSwitch());
118:       assertFalse(node0.isScript());
119:       assertFalse(node0.isCase());
120:       assertEquals(254, node0.getLineno());
121:       assertFalse(node0.isParamList());
122:       assertFalse(node0.isStringKey());
123:       
124:       Iterable<Node> iterable0 = node0.children();
125:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(48, Node.DIRECTIVES);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(4095, Node.COLUMN_MASK);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(53, Node.INPUT_ID);
139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(36, Node.QUOTED_PROP);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
146:       assertEquals(29, Node.JSDOC_INFO_PROP);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(2, Node.POST_FLAG);
153:       assertEquals(1, Node.DECR_FLAG);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(43, Node.IS_CONSTANT_NAME);
156:       assertEquals(32, Node.INCRDECR_PROP);
157:       assertEquals(46, Node.IS_NAMESPACE);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertFalse(iterable0.contains(node0));
162:       assertFalse(node0.isGetterDef());
163:       assertFalse(node0.isIf());
164:       assertFalse(node0.isDelProp());
165:       assertFalse(node0.isArrayLit());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isTry());
168:       assertEquals(1040384, node0.getSourcePosition());
169:       assertFalse(node0.isFor());
170:       assertFalse(node0.isRegExp());
171:       assertFalse(node0.isDefaultCase());
172:       assertFalse(node0.isVoid());
173:       assertFalse(node0.isCatch());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isIn());
176:       assertFalse(node0.isTrue());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isFalse());
182:       assertFalse(node0.isCall());
183:       assertFalse(node0.isSetterDef());
184:       assertFalse(node0.isGetProp());
185:       assertFalse(node0.isComma());
186:       assertFalse(node0.isThrow());
187:       assertEquals(40, node0.getType());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isNot());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isAnd());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.hasChildren());
196:       assertFalse(node0.isDec());
197:       assertFalse(node0.isAssign());
198:       assertFalse(node0.isTypeOf());
199:       assertFalse(node0.isLabelName());
200:       assertFalse(node0.isNumber());
201:       assertFalse(node0.isCast());
202:       assertFalse(node0.isGetElem());
203:       assertFalse(node0.hasOneChild());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.hasMoreThanOneChild());
206:       assertFalse(node0.isLabel());
207:       assertFalse(node0.isReturn());
208:       assertFalse(node0.isDo());
209:       assertFalse(node0.isWith());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isNew());
212:       assertFalse(node0.isAdd());
213:       assertFalse(node0.isOr());
214:       assertEquals(0, node0.getCharno());
215:       assertEquals(0, node0.getChildCount());
216:       assertFalse(node0.isInstanceOf());
217:       assertTrue(node0.isString());
218:       assertFalse(node0.isVar());
219:       assertFalse(node0.isThis());
220:       assertFalse(node0.isHook());
221:       assertFalse(node0.isBlock());
222:       assertFalse(node0.isSwitch());
223:       assertFalse(node0.isScript());
224:       assertFalse(node0.isCase());
225:       assertEquals(254, node0.getLineno());
226:       assertFalse(node0.isParamList());
227:       assertFalse(node0.isStringKey());
228:       
229:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
230:       assertFalse(node1.equals((Object)node0));
231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
232:       assertEquals(40, Node.ORIGINALNAME_PROP);
233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
234:       assertEquals(48, Node.DIRECTIVES);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
237:       assertEquals(4095, Node.COLUMN_MASK);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(55, Node.INFERRED_FUNCTION);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(15, Node.NO_SIDE_EFFECTS);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(49, Node.DIRECT_EVAL);
244:       assertEquals(53, Node.INPUT_ID);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(39, Node.EMPTY_BLOCK);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(57, Node.REFLECTED_OBJECT);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
252:       assertEquals(29, Node.JSDOC_INFO_PROP);
253:       assertEquals(56, Node.CHANGE_TIME);
254:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(2, Node.POST_FLAG);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(43, Node.IS_CONSTANT_NAME);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(56, Node.CHANGE_TIME);
268:       assertEquals(47, Node.IS_DISPATCHER);
269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
270:       assertEquals(29, Node.JSDOC_INFO_PROP);
271:       assertEquals(37, Node.OPT_ARG_NAME);
272:       assertEquals(32, Node.INCRDECR_PROP);
273:       assertEquals(51, Node.STATIC_SOURCE_FILE);
274:       assertEquals(46, Node.IS_NAMESPACE);
275:       assertEquals(53, Node.INPUT_ID);
276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
277:       assertEquals(43, Node.IS_CONSTANT_NAME);
278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
279:       assertEquals(57, Node.LAST_PROP);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(40, Node.ORIGINALNAME_PROP);
282:       assertEquals(30, Node.VAR_ARGS_NAME);
283:       assertEquals(2, Node.POST_FLAG);
284:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
285:       assertEquals(39, Node.EMPTY_BLOCK);
286:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
287:       assertEquals(48, Node.DIRECTIVES);
288:       assertEquals(57, Node.REFLECTED_OBJECT);
289:       assertEquals(55, Node.INFERRED_FUNCTION);
290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
291:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
292:       assertEquals(52, Node.LENGTH);
293:       assertEquals(8, Node.FLAG_NO_THROWS);
294:       assertEquals(50, Node.FREE_CALL);
295:       assertEquals(36, Node.QUOTED_PROP);
296:       assertEquals(1, Node.DECR_FLAG);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(49, Node.DIRECT_EVAL);
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertFalse(node0.isGetterDef());
304:       assertFalse(node0.isIf());
305:       assertFalse(node0.isDelProp());
306:       assertFalse(node0.isArrayLit());
307:       assertFalse(node0.isEmpty());
308:       assertFalse(node0.isTry());
309:       assertEquals(1040384, node0.getSourcePosition());
310:       assertFalse(node0.isFor());
311:       assertFalse(node0.isRegExp());
312:       assertFalse(node0.isDefaultCase());
313:       assertFalse(node0.isVoid());
314:       assertFalse(node0.isCatch());
315:       assertFalse(node0.isInc());
316:       assertFalse(node0.isIn());
317:       assertFalse(node0.isTrue());
318:       assertFalse(node0.isNull());
319:       assertFalse(node0.isNE());
320:       assertFalse(node0.isBreak());
321:       assertFalse(node0.isName());
322:       assertFalse(node0.isFalse());
323:       assertFalse(node0.isCall());
324:       assertFalse(node0.isSetterDef());
325:       assertFalse(node0.isGetProp());
326:       assertFalse(node0.isComma());
327:       assertFalse(node0.isThrow());
328:       assertEquals(40, node0.getType());
329:       assertFalse(node0.isWhile());
330:       assertFalse(node0.isNot());
331:       assertFalse(node0.isFunction());
332:       assertFalse(node0.isContinue());
333:       assertFalse(node0.isAnd());
334:       assertFalse(node0.isObjectLit());
335:       assertFalse(node0.isDebugger());
336:       assertFalse(node0.hasChildren());
337:       assertFalse(node0.isDec());
338:       assertFalse(node0.isAssign());
339:       assertFalse(node0.isTypeOf());
340:       assertFalse(node0.isLabelName());
341:       assertFalse(node0.isNumber());
342:       assertFalse(node0.isCast());
343:       assertFalse(node0.isGetElem());
344:       assertFalse(node0.hasOneChild());
345:       assertFalse(node0.isAssignAdd());
346:       assertFalse(node0.hasMoreThanOneChild());
347:       assertFalse(node0.isLabel());
348:       assertFalse(node0.isReturn());
349:       assertFalse(node0.isDo());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.isExprResult());
352:       assertFalse(node0.isNew());
353:       assertFalse(node0.isAdd());
354:       assertFalse(node0.isOr());
355:       assertEquals(0, node0.getCharno());
356:       assertEquals(0, node0.getChildCount());
357:       assertFalse(node0.isInstanceOf());
358:       assertTrue(node0.isString());
359:       assertFalse(node0.isVar());
360:       assertFalse(node0.isThis());
361:       assertFalse(node0.isHook());
362:       assertFalse(node0.isBlock());
363:       assertFalse(node0.isSwitch());
364:       assertFalse(node0.isScript());
365:       assertFalse(node0.isCase());
366:       assertEquals(254, node0.getLineno());
367:       assertFalse(node0.isParamList());
368:       assertFalse(node0.isStringKey());
369:       assertFalse(node1.isParamList());
370:       assertEquals(37, node1.getLineno());
371:       assertFalse(node1.isSetterDef());
372:       assertFalse(node1.isStringKey());
373:       assertFalse(node1.isName());
374:       assertFalse(node1.isNull());
375:       assertFalse(node1.isFunction());
376:       assertFalse(node1.isDefaultCase());
377:       assertFalse(node1.isDo());
378:       assertFalse(node1.isAdd());
379:       assertFalse(node1.isNew());
380:       assertFalse(node1.isArrayLit());
381:       assertFalse(node1.isContinue());
382:       assertFalse(node1.isVar());
383:       assertFalse(node1.isLabel());
384:       assertFalse(node1.isNE());
385:       assertFalse(node1.isNumber());
386:       assertFalse(node1.isIf());
387:       assertFalse(node1.isLabelName());
388:       assertTrue(node1.hasChildren());
389:       assertFalse(node1.isIn());
390:       assertFalse(node1.isGetterDef());
391:       assertFalse(node1.isRegExp());
392:       assertFalse(node1.isTry());
393:       assertEquals(4095, node1.getCharno());
394:       assertEquals(155647, node1.getSourcePosition());
395:       assertEquals((-2145), node1.getType());
396:       assertFalse(node1.isScript());
397:       assertFalse(node1.isCase());
398:       assertFalse(node1.isCatch());
399:       assertFalse(node1.isWith());
400:       assertFalse(node1.hasMoreThanOneChild());
401:       assertEquals(1, node1.getChildCount());
402:       assertFalse(node1.isBlock());
403:       assertFalse(node1.isFor());
404:       assertFalse(node1.isThis());
405:       assertFalse(node1.isHook());
406:       assertFalse(node1.isComma());
407:       assertFalse(node1.isInstanceOf());
408:       assertFalse(node1.isBreak());
409:       assertFalse(node1.isGetProp());
410:       assertFalse(node1.isAnd());
411:       assertFalse(node1.isObjectLit());
412:       assertFalse(node1.isNot());
413:       assertFalse(node1.isInc());
414:       assertFalse(node1.isSwitch());
415:       assertFalse(node1.isCast());
416:       assertFalse(node1.isThrow());
417:       assertFalse(node1.isFalse());
418:       assertFalse(node1.isTypeOf());
419:       assertFalse(node1.isAssignAdd());
420:       assertFalse(node1.isDelProp());
421:       assertFalse(node1.isEmpty());
422:       assertFalse(node1.isGetElem());
423:       assertFalse(node1.isOr());
424:       assertFalse(node1.isExprResult());
425:       assertFalse(node1.isVoid());
426:       assertFalse(node1.isTrue());
427:       assertFalse(node1.isDebugger());
428:       assertFalse(node1.isString());
429:       assertFalse(node1.isCall());
430:       assertFalse(node1.isWhile());
431:       assertFalse(node1.isAssign());
432:       assertFalse(node1.isDec());
433:       assertTrue(node1.hasOneChild());
434:       assertFalse(node1.isReturn());
435:       
436:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
437:       assertFalse(node2.equals((Object)node0));
438:       assertFalse(node2.equals((Object)node1));
439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       assertEquals(8, Node.FLAG_NO_THROWS);
442:       assertEquals(50, Node.FREE_CALL);
443:       assertEquals(52, Node.LENGTH);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(57, Node.LAST_PROP);
448:       assertEquals(43, Node.IS_CONSTANT_NAME);
449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
450:       assertEquals(30, Node.VAR_ARGS_NAME);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(54, Node.SLASH_V);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
456:       assertEquals(56, Node.CHANGE_TIME);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(32, Node.INCRDECR_PROP);
463:       assertEquals(1, Node.DECR_FLAG);
464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
467:       assertEquals(4095, Node.COLUMN_MASK);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
470:       assertEquals(57, Node.REFLECTED_OBJECT);
471:       assertEquals(37, Node.OPT_ARG_NAME);
472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertNotSame(node2, node0);
476:       assertFalse(node2.isNE());
477:       assertFalse(node2.isGetterDef());
478:       assertFalse(node2.isIf());
479:       assertFalse(node2.isDelProp());
480:       assertFalse(node2.isFor());
481:       assertFalse(node2.isIn());
482:       assertFalse(node2.isTry());
483:       assertFalse(node2.isEmpty());
484:       assertFalse(node2.isCase());
485:       assertFalse(node2.isSwitch());
486:       assertFalse(node2.isDefaultCase());
487:       assertFalse(node2.isFunction());
488:       assertEquals((-1), node2.getCharno());
489:       assertFalse(node2.isDebugger());
490:       assertEquals(40, node2.getType());
491:       assertFalse(node2.isArrayLit());
492:       assertEquals(0, node2.getChildCount());
493:       assertFalse(node2.isFalse());
494:       assertFalse(node2.isComma());
495:       assertFalse(node2.isNull());
496:       assertFalse(node2.isVar());
497:       assertFalse(node2.isObjectLit());
498:       assertFalse(node2.isAdd());
499:       assertFalse(node2.isNew());
500:       assertFalse(node2.isGetProp());
501:       assertFalse(node2.isVoid());
502:       assertFalse(node2.isWhile());
503:       assertFalse(node2.isTrue());
504:       assertFalse(node2.isName());
505:       assertFalse(node2.isBreak());
506:       assertFalse(node2.isExprResult());
507:       assertFalse(node2.isGetElem());
508:       assertFalse(node2.isCall());
509:       assertEquals((-1), node2.getSourcePosition());
510:       assertFalse(node2.isDec());
511:       assertFalse(node2.isTypeOf());
512:       assertFalse(node2.isNumber());
513:       assertFalse(node2.isAssign());
514:       assertFalse(node2.isOr());
515:       assertFalse(node2.isAssignAdd());
516:       assertFalse(node2.isLabel());
517:       assertFalse(node2.hasChildren());
518:       assertFalse(node2.isReturn());
519:       assertFalse(node2.hasOneChild());
520:       assertFalse(node2.isDo());
521:       assertFalse(node2.isScript());
522:       assertFalse(node2.isNot());
523:       assertFalse(node2.isCast());
524:       assertFalse(node2.isContinue());
525:       assertFalse(node2.isAnd());
526:       assertFalse(node2.isLabelName());
527:       assertFalse(node2.isParamList());
528:       assertFalse(node2.isStringKey());
529:       assertFalse(node2.isThrow());
530:       assertFalse(node2.isThis());
531:       assertFalse(node2.isSetterDef());
532:       assertFalse(node2.isInc());
533:       assertFalse(node2.isRegExp());
534:       assertFalse(node2.isWith());
535:       assertTrue(node2.isString());
536:       assertFalse(node2.isHook());
537:       assertFalse(node2.isBlock());
538:       assertFalse(node2.isInstanceOf());
539:       assertFalse(node2.isCatch());
540:       assertFalse(node2.hasMoreThanOneChild());
541:       assertEquals((-1), node2.getLineno());
542:       
543:       String string0 = node2.toStringTree();
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node2.equals((Object)node1));
546:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(8, Node.FLAG_NO_THROWS);
549:       assertEquals(50, Node.FREE_CALL);
550:       assertEquals(52, Node.LENGTH);
551:       assertEquals(55, Node.INFERRED_FUNCTION);
552:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
553:       assertEquals(39, Node.EMPTY_BLOCK);
554:       assertEquals(57, Node.LAST_PROP);
555:       assertEquals(43, Node.IS_CONSTANT_NAME);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(46, Node.IS_NAMESPACE);
559:       assertEquals(54, Node.SLASH_V);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(47, Node.IS_DISPATCHER);
562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
563:       assertEquals(56, Node.CHANGE_TIME);
564:       assertEquals(29, Node.JSDOC_INFO_PROP);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(53, Node.INPUT_ID);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
569:       assertEquals(32, Node.INCRDECR_PROP);
570:       assertEquals(1, Node.DECR_FLAG);
571:       assertEquals(15, Node.NO_SIDE_EFFECTS);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
574:       assertEquals(4095, Node.COLUMN_MASK);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(37, Node.OPT_ARG_NAME);
579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
580:       assertEquals(48, Node.DIRECTIVES);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
583:       assertNotSame(node2, node0);
584:       assertFalse(node2.isNE());
585:       assertFalse(node2.isGetterDef());
586:       assertFalse(node2.isIf());
587:       assertFalse(node2.isDelProp());
588:       assertFalse(node2.isFor());
589:       assertFalse(node2.isIn());
590:       assertFalse(node2.isTry());
591:       assertFalse(node2.isEmpty());
592:       assertFalse(node2.isCase());
593:       assertFalse(node2.isSwitch());
594:       assertFalse(node2.isDefaultCase());
595:       assertFalse(node2.isFunction());
596:       assertEquals((-1), node2.getCharno());
597:       assertFalse(node2.isDebugger());
598:       assertEquals(40, node2.getType());
599:       assertFalse(node2.isArrayLit());
600:       assertEquals(0, node2.getChildCount());
601:       assertFalse(node2.isFalse());
602:       assertFalse(node2.isComma());
603:       assertFalse(node2.isNull());
604:       assertFalse(node2.isVar());
605:       assertFalse(node2.isObjectLit());
606:       assertFalse(node2.isAdd());
607:       assertFalse(node2.isNew());
608:       assertFalse(node2.isGetProp());
609:       assertFalse(node2.isVoid());
610:       assertFalse(node2.isWhile());
611:       assertFalse(node2.isTrue());
612:       assertFalse(node2.isName());
613:       assertFalse(node2.isBreak());
614:       assertFalse(node2.isExprResult());
615:       assertFalse(node2.isGetElem());
616:       assertFalse(node2.isCall());
617:       assertEquals((-1), node2.getSourcePosition());
618:       assertFalse(node2.isDec());
619:       assertFalse(node2.isTypeOf());
620:       assertFalse(node2.isNumber());
621:       assertFalse(node2.isAssign());
622:       assertFalse(node2.isOr());
623:       assertFalse(node2.isAssignAdd());
624:       assertFalse(node2.isLabel());
625:       assertFalse(node2.hasChildren());
626:       assertFalse(node2.isReturn());
627:       assertFalse(node2.hasOneChild());
628:       assertFalse(node2.isDo());
629:       assertFalse(node2.isScript());
630:       assertFalse(node2.isNot());
631:       assertFalse(node2.isCast());
632:       assertFalse(node2.isContinue());
633:       assertFalse(node2.isAnd());
634:       assertFalse(node2.isLabelName());
635:       assertFalse(node2.isParamList());
636:       assertFalse(node2.isStringKey());
637:       assertFalse(node2.isThrow());
638:       assertFalse(node2.isThis());
639:       assertFalse(node2.isSetterDef());
640:       assertFalse(node2.isInc());
641:       assertFalse(node2.isRegExp());
642:       assertFalse(node2.isWith());
643:       assertTrue(node2.isString());
644:       assertFalse(node2.isHook());
645:       assertFalse(node2.isBlock());
646:       assertFalse(node2.isInstanceOf());
647:       assertFalse(node2.isCatch());
648:       assertFalse(node2.hasMoreThanOneChild());
649:       assertEquals((-1), node2.getLineno());
650:       
651:       int int0 = node1.getIntProp(254);
652:       assertFalse(node0.equals((Object)node2));
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node1.equals((Object)node0));
655:       assertFalse(node1.equals((Object)node2));
656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
657:       assertEquals(40, Node.ORIGINALNAME_PROP);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(48, Node.DIRECTIVES);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
662:       assertEquals(4095, Node.COLUMN_MASK);
663:       assertEquals(30, Node.VAR_ARGS_NAME);
664:       assertEquals(55, Node.INFERRED_FUNCTION);
665:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
666:       assertEquals(15, Node.NO_SIDE_EFFECTS);
667:       assertEquals(57, Node.LAST_PROP);
668:       assertEquals(49, Node.DIRECT_EVAL);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(36, Node.QUOTED_PROP);
673:       assertEquals(57, Node.REFLECTED_OBJECT);
674:       assertEquals(52, Node.LENGTH);
675:       assertEquals(8, Node.FLAG_NO_THROWS);
676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(56, Node.CHANGE_TIME);
679:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
680:       assertEquals(37, Node.OPT_ARG_NAME);
681:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
682:       assertEquals(47, Node.IS_DISPATCHER);
683:       assertEquals(2, Node.POST_FLAG);
684:       assertEquals(1, Node.DECR_FLAG);
685:       assertEquals(12, Node.COLUMN_BITS);
686:       assertEquals(43, Node.IS_CONSTANT_NAME);
687:       assertEquals(32, Node.INCRDECR_PROP);
688:       assertEquals(46, Node.IS_NAMESPACE);
689:       assertEquals(54, Node.SLASH_V);
690:       assertEquals(51, Node.STATIC_SOURCE_FILE);
691:       assertEquals(50, Node.FREE_CALL);
692:       assertEquals(56, Node.CHANGE_TIME);
693:       assertEquals(47, Node.IS_DISPATCHER);
694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
695:       assertEquals(29, Node.JSDOC_INFO_PROP);
696:       assertEquals(37, Node.OPT_ARG_NAME);
697:       assertEquals(32, Node.INCRDECR_PROP);
698:       assertEquals(51, Node.STATIC_SOURCE_FILE);
699:       assertEquals(46, Node.IS_NAMESPACE);
700:       assertEquals(53, Node.INPUT_ID);
701:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
702:       assertEquals(43, Node.IS_CONSTANT_NAME);
703:       assertEquals(15, Node.NO_SIDE_EFFECTS);
704:       assertEquals(57, Node.LAST_PROP);
705:       assertEquals(54, Node.SLASH_V);
706:       assertEquals(40, Node.ORIGINALNAME_PROP);
707:       assertEquals(30, Node.VAR_ARGS_NAME);
708:       assertEquals(2, Node.POST_FLAG);
709:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
710:       assertEquals(39, Node.EMPTY_BLOCK);
711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
712:       assertEquals(48, Node.DIRECTIVES);
713:       assertEquals(57, Node.REFLECTED_OBJECT);
714:       assertEquals(55, Node.INFERRED_FUNCTION);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(52, Node.LENGTH);
718:       assertEquals(8, Node.FLAG_NO_THROWS);
719:       assertEquals(50, Node.FREE_CALL);
720:       assertEquals(36, Node.QUOTED_PROP);
721:       assertEquals(1, Node.DECR_FLAG);
722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
723:       assertEquals(49, Node.DIRECT_EVAL);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(12, Node.COLUMN_BITS);
727:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
728:       assertEquals(0, int0);
729:       assertNotSame(node0, node2);
730:       assertFalse(node0.isGetterDef());
731:       assertFalse(node0.isIf());
732:       assertFalse(node0.isDelProp());
733:       assertFalse(node0.isArrayLit());
734:       assertFalse(node0.isEmpty());
735:       assertFalse(node0.isTry());
736:       assertEquals(1040384, node0.getSourcePosition());
737:       assertFalse(node0.isFor());
738:       assertFalse(node0.isRegExp());
739:       assertFalse(node0.isDefaultCase());
740:       assertFalse(node0.isVoid());
741:       assertFalse(node0.isCatch());
742:       assertFalse(node0.isInc());
743:       assertFalse(node0.isIn());
744:       assertFalse(node0.isTrue());
745:       assertFalse(node0.isNull());
746:       assertFalse(node0.isNE());
747:       assertFalse(node0.isBreak());
748:       assertFalse(node0.isName());
749:       assertFalse(node0.isFalse());
750:       assertFalse(node0.isCall());
751:       assertFalse(node0.isSetterDef());
752:       assertFalse(node0.isGetProp());
753:       assertFalse(node0.isComma());
754:       assertFalse(node0.isThrow());
755:       assertEquals(40, node0.getType());
756:       assertFalse(node0.isWhile());
757:       assertFalse(node0.isNot());
758:       assertFalse(node0.isFunction());
759:       assertFalse(node0.isContinue());
760:       assertFalse(node0.isAnd());
761:       assertFalse(node0.isObjectLit());
762:       assertFalse(node0.isDebugger());
763:       assertFalse(node0.hasChildren());
764:       assertFalse(node0.isDec());
765:       assertFalse(node0.isAssign());
766:       assertFalse(node0.isTypeOf());
767:       assertFalse(node0.isLabelName());
768:       assertFalse(node0.isNumber());
769:       assertFalse(node0.isCast());
770:       assertFalse(node0.isGetElem());
771:       assertFalse(node0.hasOneChild());
772:       assertFalse(node0.isAssignAdd());
773:       assertFalse(node0.hasMoreThanOneChild());
774:       assertFalse(node0.isLabel());
775:       assertFalse(node0.isReturn());
776:       assertFalse(node0.isDo());
777:       assertFalse(node0.isWith());
778:       assertFalse(node0.isExprResult());
779:       assertFalse(node0.isNew());
780:       assertFalse(node0.isAdd());
781:       assertFalse(node0.isOr());
782:       assertEquals(0, node0.getCharno());
783:       assertEquals(0, node0.getChildCount());
784:       assertFalse(node0.isInstanceOf());
785:       assertTrue(node0.isString());
786:       assertFalse(node0.isVar());
787:       assertFalse(node0.isThis());
788:       assertFalse(node0.isHook());
789:       assertFalse(node0.isBlock());
790:       assertFalse(node0.isSwitch());
791:       assertFalse(node0.isScript());
792:       assertFalse(node0.isCase());
793:       assertEquals(254, node0.getLineno());
794:       assertFalse(node0.isParamList());
795:       assertFalse(node0.isStringKey());
796:       assertFalse(node1.isParamList());
797:       assertEquals(37, node1.getLineno());
798:       assertFalse(node1.isSetterDef());
799:       assertFalse(node1.isStringKey());
800:       assertFalse(node1.isName());
801:       assertFalse(node1.isNull());
802:       assertFalse(node1.isFunction());
803:       assertFalse(node1.isDefaultCase());
804:       assertFalse(node1.isDo());
805:       assertFalse(node1.isAdd());
806:       assertFalse(node1.isNew());
807:       assertFalse(node1.isArrayLit());
808:       assertFalse(node1.isContinue());
809:       assertFalse(node1.isVar());
810:       assertFalse(node1.isLabel());
811:       assertFalse(node1.isNE());
812:       assertFalse(node1.isNumber());
813:       assertFalse(node1.isIf());
814:       assertFalse(node1.isLabelName());
815:       assertTrue(node1.hasChildren());
816:       assertFalse(node1.isIn());
817:       assertFalse(node1.isGetterDef());
818:       assertFalse(node1.isRegExp());
819:       assertFalse(node1.isTry());
820:       assertEquals(4095, node1.getCharno());
821:       assertEquals(155647, node1.getSourcePosition());
822:       assertEquals((-2145), node1.getType());
823:       assertFalse(node1.isScript());
824:       assertFalse(node1.isCase());
825:       assertFalse(node1.isCatch());
826:       assertFalse(node1.isWith());
827:       assertFalse(node1.hasMoreThanOneChild());
828:       assertEquals(1, node1.getChildCount());
829:       assertFalse(node1.isBlock());
830:       assertFalse(node1.isFor());
831:       assertFalse(node1.isThis());
832:       assertFalse(node1.isHook());
833:       assertFalse(node1.isComma());
834:       assertFalse(node1.isInstanceOf());
835:       assertFalse(node1.isBreak());
836:       assertFalse(node1.isGetProp());
837:       assertFalse(node1.isAnd());
838:       assertFalse(node1.isObjectLit());
839:       assertFalse(node1.isNot());
840:       assertFalse(node1.isInc());
841:       assertFalse(node1.isSwitch());
842:       assertFalse(node1.isCast());
843:       assertFalse(node1.isThrow());
844:       assertFalse(node1.isFalse());
845:       assertFalse(node1.isTypeOf());
846:       assertFalse(node1.isAssignAdd());
847:       assertFalse(node1.isDelProp());
848:       assertFalse(node1.isEmpty());
849:       assertFalse(node1.isGetElem());
850:       assertFalse(node1.isOr());
851:       assertFalse(node1.isExprResult());
852:       assertFalse(node1.isVoid());
853:       assertFalse(node1.isTrue());
854:       assertFalse(node1.isDebugger());
855:       assertFalse(node1.isString());
856:       assertFalse(node1.isCall());
857:       assertFalse(node1.isWhile());
858:       assertFalse(node1.isAssign());
859:       assertFalse(node1.isDec());
860:       assertTrue(node1.hasOneChild());
861:       assertFalse(node1.isReturn());
862:       
863:       boolean boolean0 = node1.isEquivalentToShallow(node0);
864:       assertFalse(node0.equals((Object)node2));
865:       assertFalse(node0.equals((Object)node1));
866:       assertFalse(node1.equals((Object)node0));
867:       assertFalse(node1.equals((Object)node2));
868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
871:       assertEquals(48, Node.DIRECTIVES);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
874:       assertEquals(4095, Node.COLUMN_MASK);
875:       assertEquals(30, Node.VAR_ARGS_NAME);
876:       assertEquals(55, Node.INFERRED_FUNCTION);
877:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
878:       assertEquals(15, Node.NO_SIDE_EFFECTS);
879:       assertEquals(57, Node.LAST_PROP);
880:       assertEquals(49, Node.DIRECT_EVAL);
881:       assertEquals(53, Node.INPUT_ID);
882:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
883:       assertEquals(39, Node.EMPTY_BLOCK);
884:       assertEquals(36, Node.QUOTED_PROP);
885:       assertEquals(57, Node.REFLECTED_OBJECT);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(8, Node.FLAG_NO_THROWS);
888:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
889:       assertEquals(29, Node.JSDOC_INFO_PROP);
890:       assertEquals(56, Node.CHANGE_TIME);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(37, Node.OPT_ARG_NAME);
893:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
894:       assertEquals(47, Node.IS_DISPATCHER);
895:       assertEquals(2, Node.POST_FLAG);
896:       assertEquals(1, Node.DECR_FLAG);
897:       assertEquals(12, Node.COLUMN_BITS);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(46, Node.IS_NAMESPACE);
901:       assertEquals(54, Node.SLASH_V);
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(56, Node.CHANGE_TIME);
905:       assertEquals(47, Node.IS_DISPATCHER);
906:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
907:       assertEquals(29, Node.JSDOC_INFO_PROP);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
911:       assertEquals(46, Node.IS_NAMESPACE);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
914:       assertEquals(43, Node.IS_CONSTANT_NAME);
915:       assertEquals(15, Node.NO_SIDE_EFFECTS);
916:       assertEquals(57, Node.LAST_PROP);
917:       assertEquals(54, Node.SLASH_V);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertEquals(30, Node.VAR_ARGS_NAME);
920:       assertEquals(2, Node.POST_FLAG);
921:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
922:       assertEquals(39, Node.EMPTY_BLOCK);
923:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
924:       assertEquals(48, Node.DIRECTIVES);
925:       assertEquals(57, Node.REFLECTED_OBJECT);
926:       assertEquals(55, Node.INFERRED_FUNCTION);
927:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
928:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
929:       assertEquals(52, Node.LENGTH);
930:       assertEquals(8, Node.FLAG_NO_THROWS);
931:       assertEquals(50, Node.FREE_CALL);
932:       assertEquals(36, Node.QUOTED_PROP);
933:       assertEquals(1, Node.DECR_FLAG);
934:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
935:       assertEquals(49, Node.DIRECT_EVAL);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(4095, Node.COLUMN_MASK);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
940:       assertFalse(boolean0);
941:       assertNotSame(node0, node2);
942:       assertFalse(node0.isGetterDef());
943:       assertFalse(node0.isIf());
944:       assertFalse(node0.isDelProp());
945:       assertFalse(node0.isArrayLit());
946:       assertFalse(node0.isEmpty());
947:       assertFalse(node0.isTry());
948:       assertEquals(1040384, node0.getSourcePosition());
949:       assertFalse(node0.isFor());
950:       assertFalse(node0.isRegExp());
951:       assertFalse(node0.isDefaultCase());
952:       assertFalse(node0.isVoid());
953:       assertFalse(node0.isCatch());
954:       assertFalse(node0.isInc());
955:       assertFalse(node0.isIn());
956:       assertFalse(node0.isTrue());
957:       assertFalse(node0.isNull());
958:       assertFalse(node0.isNE());
959:       assertFalse(node0.isBreak());
960:       assertFalse(node0.isName());
961:       assertFalse(node0.isFalse());
962:       assertFalse(node0.isCall());
963:       assertFalse(node0.isSetterDef());
964:       assertFalse(node0.isGetProp());
965:       assertFalse(node0.isComma());
966:       assertFalse(node0.isThrow());
967:       assertEquals(40, node0.getType());
968:       assertFalse(node0.isWhile());
969:       assertFalse(node0.isNot());
970:       assertFalse(node0.isFunction());
971:       assertFalse(node0.isContinue());
972:       assertFalse(node0.isAnd());
973:       assertFalse(node0.isObjectLit());
974:       assertFalse(node0.isDebugger());
975:       assertFalse(node0.hasChildren());
976:       assertFalse(node0.isDec());
977:       assertFalse(node0.isAssign());
978:       assertFalse(node0.isTypeOf());
979:       assertFalse(node0.isLabelName());
980:       assertFalse(node0.isNumber());
981:       assertFalse(node0.isCast());
982:       assertFalse(node0.isGetElem());
983:       assertFalse(node0.hasOneChild());
984:       assertFalse(node0.isAssignAdd());
985:       assertFalse(node0.hasMoreThanOneChild());
986:       assertFalse(node0.isLabel());
987:       assertFalse(node0.isReturn());
988:       assertFalse(node0.isDo());
989:       assertFalse(node0.isWith());
990:       assertFalse(node0.isExprResult());
991:       assertFalse(node0.isNew());
992:       assertFalse(node0.isAdd());
993:       assertFalse(node0.isOr());
994:       assertEquals(0, node0.getCharno());
995:       assertEquals(0, node0.getChildCount());
996:       assertFalse(node0.isInstanceOf());
997:       assertTrue(node0.isString());
998:       assertFalse(node0.isVar());
999:       assertFalse(node0.isThis());
1000:       assertFalse(node0.isHook());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isSwitch());
1003:       assertFalse(node0.isScript());
1004:       assertFalse(node0.isCase());
1005:       assertEquals(254, node0.getLineno());
1006:       assertFalse(node0.isParamList());
1007:       assertFalse(node0.isStringKey());
1008:       assertFalse(node1.isParamList());
1009:       assertEquals(37, node1.getLineno());
1010:       assertFalse(node1.isSetterDef());
1011:       assertFalse(node1.isStringKey());
1012:       assertFalse(node1.isName());
1013:       assertFalse(node1.isNull());
1014:       assertFalse(node1.isFunction());
1015:       assertFalse(node1.isDefaultCase());
1016:       assertFalse(node1.isDo());
1017:       assertFalse(node1.isAdd());
1018:       assertFalse(node1.isNew());
1019:       assertFalse(node1.isArrayLit());
1020:       assertFalse(node1.isContinue());
1021:       assertFalse(node1.isVar());
1022:       assertFalse(node1.isLabel());
1023:       assertFalse(node1.isNE());
1024:       assertFalse(node1.isNumber());
1025:       assertFalse(node1.isIf());
1026:       assertFalse(node1.isLabelName());
1027:       assertTrue(node1.hasChildren());
1028:       assertFalse(node1.isIn());
1029:       assertFalse(node1.isGetterDef());
1030:       assertFalse(node1.isRegExp());
1031:       assertFalse(node1.isTry());
1032:       assertEquals(4095, node1.getCharno());
1033:       assertEquals(155647, node1.getSourcePosition());
1034:       assertEquals((-2145), node1.getType());
1035:       assertFalse(node1.isScript());
1036:       assertFalse(node1.isCase());
1037:       assertFalse(node1.isCatch());
1038:       assertFalse(node1.isWith());
1039:       assertFalse(node1.hasMoreThanOneChild());
1040:       assertEquals(1, node1.getChildCount());
1041:       assertFalse(node1.isBlock());
1042:       assertFalse(node1.isFor());
1043:       assertFalse(node1.isThis());
1044:       assertFalse(node1.isHook());
1045:       assertFalse(node1.isComma());
1046:       assertFalse(node1.isInstanceOf());
1047:       assertFalse(node1.isBreak());
1048:       assertFalse(node1.isGetProp());
1049:       assertFalse(node1.isAnd());
1050:       assertFalse(node1.isObjectLit());
1051:       assertFalse(node1.isNot());
1052:       assertFalse(node1.isInc());
1053:       assertFalse(node1.isSwitch());
1054:       assertFalse(node1.isCast());
1055:       assertFalse(node1.isThrow());
1056:       assertFalse(node1.isFalse());
1057:       assertFalse(node1.isTypeOf());
1058:       assertFalse(node1.isAssignAdd());
1059:       assertFalse(node1.isDelProp());
1060:       assertFalse(node1.isEmpty());
1061:       assertFalse(node1.isGetElem());
1062:       assertFalse(node1.isOr());
1063:       assertFalse(node1.isExprResult());
1064:       assertFalse(node1.isVoid());
1065:       assertFalse(node1.isTrue());
1066:       assertFalse(node1.isDebugger());
1067:       assertFalse(node1.isString());
1068:       assertFalse(node1.isCall());
1069:       assertFalse(node1.isWhile());
1070:       assertFalse(node1.isAssign());
1071:       assertFalse(node1.isDec());
1072:       assertTrue(node1.hasOneChild());
1073:       assertFalse(node1.isReturn());
1074:       
1075:       Node node3 = node0.useSourceInfoFrom(node1);
1076:       assertFalse(node0.equals((Object)node2));
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertFalse(node1.equals((Object)node0));
1079:       assertFalse(node1.equals((Object)node2));
1080:       assertFalse(node3.equals((Object)node2));
1081:       assertFalse(node3.equals((Object)node1));
1082:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1083:       assertEquals(40, Node.ORIGINALNAME_PROP);
1084:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(30, Node.VAR_ARGS_NAME);
1090:       assertEquals(55, Node.INFERRED_FUNCTION);
1091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1092:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1093:       assertEquals(57, Node.LAST_PROP);
1094:       assertEquals(49, Node.DIRECT_EVAL);
1095:       assertEquals(53, Node.INPUT_ID);
1096:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1097:       assertEquals(39, Node.EMPTY_BLOCK);
1098:       assertEquals(36, Node.QUOTED_PROP);
1099:       assertEquals(57, Node.REFLECTED_OBJECT);
1100:       assertEquals(52, Node.LENGTH);
1101:       assertEquals(8, Node.FLAG_NO_THROWS);
1102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(56, Node.CHANGE_TIME);
1105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1106:       assertEquals(37, Node.OPT_ARG_NAME);
1107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(2, Node.POST_FLAG);
1110:       assertEquals(1, Node.DECR_FLAG);
1111:       assertEquals(12, Node.COLUMN_BITS);
1112:       assertEquals(43, Node.IS_CONSTANT_NAME);
1113:       assertEquals(32, Node.INCRDECR_PROP);
1114:       assertEquals(46, Node.IS_NAMESPACE);
1115:       assertEquals(54, Node.SLASH_V);
1116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1117:       assertEquals(50, Node.FREE_CALL);
1118:       assertEquals(56, Node.CHANGE_TIME);
1119:       assertEquals(47, Node.IS_DISPATCHER);
1120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1121:       assertEquals(29, Node.JSDOC_INFO_PROP);
1122:       assertEquals(37, Node.OPT_ARG_NAME);
1123:       assertEquals(32, Node.INCRDECR_PROP);
1124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1125:       assertEquals(46, Node.IS_NAMESPACE);
1126:       assertEquals(53, Node.INPUT_ID);
1127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1128:       assertEquals(43, Node.IS_CONSTANT_NAME);
1129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1130:       assertEquals(57, Node.LAST_PROP);
1131:       assertEquals(54, Node.SLASH_V);
1132:       assertEquals(40, Node.ORIGINALNAME_PROP);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(2, Node.POST_FLAG);
1135:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1136:       assertEquals(39, Node.EMPTY_BLOCK);
1137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1138:       assertEquals(48, Node.DIRECTIVES);
1139:       assertEquals(57, Node.REFLECTED_OBJECT);
1140:       assertEquals(55, Node.INFERRED_FUNCTION);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1143:       assertEquals(52, Node.LENGTH);
1144:       assertEquals(8, Node.FLAG_NO_THROWS);
1145:       assertEquals(50, Node.FREE_CALL);
1146:       assertEquals(36, Node.QUOTED_PROP);
1147:       assertEquals(1, Node.DECR_FLAG);
1148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1149:       assertEquals(49, Node.DIRECT_EVAL);
1150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1151:       assertEquals(4095, Node.COLUMN_MASK);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1154:       assertEquals(40, Node.ORIGINALNAME_PROP);
1155:       assertEquals(57, Node.REFLECTED_OBJECT);
1156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1157:       assertEquals(50, Node.FREE_CALL);
1158:       assertEquals(52, Node.LENGTH);
1159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(49, Node.DIRECT_EVAL);
1163:       assertEquals(48, Node.DIRECTIVES);
1164:       assertEquals(12, Node.COLUMN_BITS);
1165:       assertEquals(4095, Node.COLUMN_MASK);
1166:       assertEquals(46, Node.IS_NAMESPACE);
1167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1169:       assertEquals(32, Node.INCRDECR_PROP);
1170:       assertEquals(1, Node.DECR_FLAG);
1171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1172:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1173:       assertEquals(47, Node.IS_DISPATCHER);
1174:       assertEquals(2, Node.POST_FLAG);
1175:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1176:       assertEquals(43, Node.IS_CONSTANT_NAME);
1177:       assertEquals(56, Node.CHANGE_TIME);
1178:       assertEquals(37, Node.OPT_ARG_NAME);
1179:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1180:       assertEquals(55, Node.INFERRED_FUNCTION);
1181:       assertEquals(30, Node.VAR_ARGS_NAME);
1182:       assertEquals(36, Node.QUOTED_PROP);
1183:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1184:       assertEquals(8, Node.FLAG_NO_THROWS);
1185:       assertEquals(39, Node.EMPTY_BLOCK);
1186:       assertEquals(57, Node.LAST_PROP);
1187:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1188:       assertEquals(29, Node.JSDOC_INFO_PROP);
1189:       assertEquals(53, Node.INPUT_ID);
1190:       assertNotSame(node0, node2);
1191:       assertSame(node0, node3);
1192:       assertSame(node3, node0);
1193:       assertNotSame(node3, node2);
1194:       assertFalse(node0.isGetterDef());
1195:       assertFalse(node0.isIf());
1196:       assertFalse(node0.isDelProp());
1197:       assertFalse(node0.isArrayLit());
1198:       assertFalse(node0.isEmpty());
1199:       assertEquals(155647, node0.getSourcePosition());
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isFor());
1202:       assertFalse(node0.isRegExp());
1203:       assertFalse(node0.isDefaultCase());
1204:       assertFalse(node0.isVoid());
1205:       assertFalse(node0.isCatch());
1206:       assertFalse(node0.isInc());
1207:       assertFalse(node0.isIn());
1208:       assertFalse(node0.isTrue());
1209:       assertFalse(node0.isNull());
1210:       assertFalse(node0.isNE());
1211:       assertFalse(node0.isBreak());
1212:       assertFalse(node0.isName());
1213:       assertEquals(37, node0.getLineno());
1214:       assertFalse(node0.isFalse());
1215:       assertFalse(node0.isCall());
1216:       assertFalse(node0.isSetterDef());
1217:       assertFalse(node0.isGetProp());
1218:       assertFalse(node0.isComma());
1219:       assertFalse(node0.isThrow());
1220:       assertEquals(40, node0.getType());
1221:       assertFalse(node0.isWhile());
1222:       assertFalse(node0.isNot());
1223:       assertFalse(node0.isFunction());
1224:       assertFalse(node0.isContinue());
1225:       assertFalse(node0.isAnd());
1226:       assertFalse(node0.isObjectLit());
1227:       assertFalse(node0.isDebugger());
1228:       assertFalse(node0.hasChildren());
1229:       assertFalse(node0.isDec());
1230:       assertFalse(node0.isAssign());
1231:       assertFalse(node0.isTypeOf());
1232:       assertFalse(node0.isLabelName());
1233:       assertFalse(node0.isNumber());
1234:       assertFalse(node0.isCast());
1235:       assertFalse(node0.isGetElem());
1236:       assertFalse(node0.hasOneChild());
1237:       assertFalse(node0.isAssignAdd());
1238:       assertFalse(node0.hasMoreThanOneChild());
1239:       assertFalse(node0.isLabel());
1240:       assertFalse(node0.isReturn());
1241:       assertFalse(node0.isDo());
1242:       assertFalse(node0.isWith());
1243:       assertFalse(node0.isExprResult());
1244:       assertFalse(node0.isNew());
1245:       assertFalse(node0.isAdd());
1246:       assertFalse(node0.isOr());
1247:       assertEquals(0, node0.getChildCount());
1248:       assertFalse(node0.isInstanceOf());
1249:       assertTrue(node0.isString());
1250:       assertFalse(node0.isVar());
1251:       assertFalse(node0.isThis());
1252:       assertFalse(node0.isHook());
1253:       assertFalse(node0.isBlock());
1254:       assertEquals(4095, node0.getCharno());
1255:       assertFalse(node0.isSwitch());
1256:       assertFalse(node0.isScript());
1257:       assertFalse(node0.isCase());
1258:       assertFalse(node0.isParamList());
1259:       assertFalse(node0.isStringKey());
1260:       assertFalse(node1.isParamList());
1261:       assertEquals(37, node1.getLineno());
1262:       assertFalse(node1.isSetterDef());
1263:       assertFalse(node1.isStringKey());
1264:       assertFalse(node1.isName());
1265:       assertFalse(node1.isNull());
1266:       assertFalse(node1.isFunction());
1267:       assertFalse(node1.isDefaultCase());
1268:       assertFalse(node1.isDo());
1269:       assertFalse(node1.isAdd());
1270:       assertFalse(node1.isNew());
1271:       assertFalse(node1.isArrayLit());
1272:       assertFalse(node1.isContinue());
1273:       assertFalse(node1.isVar());
1274:       assertFalse(node1.isLabel());
1275:       assertFalse(node1.isNE());
1276:       assertFalse(node1.isNumber());
1277:       assertFalse(node1.isIf());
1278:       assertFalse(node1.isLabelName());
1279:       assertTrue(node1.hasChildren());
1280:       assertFalse(node1.isIn());
1281:       assertFalse(node1.isGetterDef());
1282:       assertFalse(node1.isRegExp());
1283:       assertFalse(node1.isTry());
1284:       assertEquals(4095, node1.getCharno());
1285:       assertEquals(155647, node1.getSourcePosition());
1286:       assertEquals((-2145), node1.getType());
1287:       assertFalse(node1.isScript());
1288:       assertFalse(node1.isCase());
1289:       assertFalse(node1.isCatch());
1290:       assertFalse(node1.isWith());
1291:       assertFalse(node1.hasMoreThanOneChild());
1292:       assertEquals(1, node1.getChildCount());
1293:       assertFalse(node1.isBlock());
1294:       assertFalse(node1.isFor());
1295:       assertFalse(node1.isThis());
1296:       assertFalse(node1.isHook());
1297:       assertFalse(node1.isComma());
1298:       assertFalse(node1.isInstanceOf());
1299:       assertFalse(node1.isBreak());
1300:       assertFalse(node1.isGetProp());
1301:       assertFalse(node1.isAnd());
1302:       assertFalse(node1.isObjectLit());
1303:       assertFalse(node1.isNot());
1304:       assertFalse(node1.isInc());
1305:       assertFalse(node1.isSwitch());
1306:       assertFalse(node1.isCast());
1307:       assertFalse(node1.isThrow());
1308:       assertFalse(node1.isFalse());
1309:       assertFalse(node1.isTypeOf());
1310:       assertFalse(node1.isAssignAdd());
1311:       assertFalse(node1.isDelProp());
1312:       assertFalse(node1.isEmpty());
1313:       assertFalse(node1.isGetElem());
1314:       assertFalse(node1.isOr());
1315:       assertFalse(node1.isExprResult());
1316:       assertFalse(node1.isVoid());
1317:       assertFalse(node1.isTrue());
1318:       assertFalse(node1.isDebugger());
1319:       assertFalse(node1.isString());
1320:       assertFalse(node1.isCall());
1321:       assertFalse(node1.isWhile());
1322:       assertFalse(node1.isAssign());
1323:       assertFalse(node1.isDec());
1324:       assertTrue(node1.hasOneChild());
1325:       assertFalse(node1.isReturn());
1326:       assertFalse(node3.isGetElem());
1327:       assertFalse(node3.isAssign());
1328:       assertFalse(node3.isLabelName());
1329:       assertFalse(node3.isDec());
1330:       assertFalse(node3.hasChildren());
1331:       assertFalse(node3.isLabel());
1332:       assertFalse(node3.isTypeOf());
1333:       assertFalse(node3.isCast());
1334:       assertFalse(node3.isExprResult());
1335:       assertFalse(node3.isAnd());
1336:       assertFalse(node3.isWith());
1337:       assertFalse(node3.hasMoreThanOneChild());
1338:       assertFalse(node3.isObjectLit());
1339:       assertFalse(node3.isNot());
1340:       assertFalse(node3.isWhile());
1341:       assertFalse(node3.isReturn());
1342:       assertFalse(node3.isGetProp());
1343:       assertTrue(node3.isString());
1344:       assertFalse(node3.isNumber());
1345:       assertFalse(node3.hasOneChild());
1346:       assertFalse(node3.isScript());
1347:       assertFalse(node3.isStringKey());
1348:       assertFalse(node3.isName());
1349:       assertFalse(node3.isParamList());
1350:       assertFalse(node3.isVar());
1351:       assertFalse(node3.isNull());
1352:       assertFalse(node3.isComma());
1353:       assertFalse(node3.isSwitch());
1354:       assertEquals(0, node3.getChildCount());
1355:       assertFalse(node3.isBreak());
1356:       assertFalse(node3.isCall());
1357:       assertFalse(node3.isDo());
1358:       assertFalse(node3.isDefaultCase());
1359:       assertFalse(node3.isTrue());
1360:       assertFalse(node3.isNew());
1361:       assertFalse(node3.isAssignAdd());
1362:       assertFalse(node3.isOr());
1363:       assertFalse(node3.isAdd());
1364:       assertFalse(node3.isEmpty());
1365:       assertFalse(node3.isGetterDef());
1366:       assertFalse(node3.isDelProp());
1367:       assertFalse(node3.isIf());
1368:       assertFalse(node3.isFor());
1369:       assertFalse(node3.isNE());
1370:       assertFalse(node3.isFunction());
1371:       assertFalse(node3.isRegExp());
1372:       assertFalse(node3.isVoid());
1373:       assertFalse(node3.isArrayLit());
1374:       assertFalse(node3.isCase());
1375:       assertFalse(node3.isDebugger());
1376:       assertEquals(155647, node3.getSourcePosition());
1377:       assertFalse(node3.isTry());
1378:       assertEquals(4095, node3.getCharno());
1379:       assertFalse(node3.isThrow());
1380:       assertFalse(node3.isFalse());
1381:       assertFalse(node3.isHook());
1382:       assertFalse(node3.isThis());
1383:       assertFalse(node3.isBlock());
1384:       assertEquals(37, node3.getLineno());
1385:       assertFalse(node3.isInstanceOf());
1386:       assertFalse(node3.isCatch());
1387:       assertEquals(40, node3.getType());
1388:       assertFalse(node3.isContinue());
1389:       assertFalse(node3.isIn());
1390:       assertFalse(node3.isSetterDef());
1391:       assertFalse(node3.isInc());
1392:       
1393:       Node node4 = node3.cloneTree();
1394:       assertFalse(node0.equals((Object)node2));
1395:       assertFalse(node0.equals((Object)node1));
1396:       assertFalse(node1.equals((Object)node2));
1397:       assertFalse(node1.equals((Object)node0));
1398:       assertFalse(node1.equals((Object)node3));
1399:       assertFalse(node3.equals((Object)node2));
1400:       assertFalse(node3.equals((Object)node1));
1401:       assertFalse(node4.equals((Object)node2));
1402:       assertFalse(node4.equals((Object)node1));
1403:       assertFalse(node4.equals((Object)node0));
1404:       assertFalse(node4.equals((Object)node3));
1405:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1406:       assertEquals(40, Node.ORIGINALNAME_PROP);
1407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1408:       assertEquals(48, Node.DIRECTIVES);
1409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1411:       assertEquals(4095, Node.COLUMN_MASK);
1412:       assertEquals(30, Node.VAR_ARGS_NAME);
1413:       assertEquals(55, Node.INFERRED_FUNCTION);
1414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1416:       assertEquals(57, Node.LAST_PROP);
1417:       assertEquals(49, Node.DIRECT_EVAL);
1418:       assertEquals(53, Node.INPUT_ID);
1419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1420:       assertEquals(39, Node.EMPTY_BLOCK);
1421:       assertEquals(36, Node.QUOTED_PROP);
1422:       assertEquals(57, Node.REFLECTED_OBJECT);
1423:       assertEquals(52, Node.LENGTH);
1424:       assertEquals(8, Node.FLAG_NO_THROWS);
1425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1426:       assertEquals(29, Node.JSDOC_INFO_PROP);
1427:       assertEquals(56, Node.CHANGE_TIME);
1428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1431:       assertEquals(47, Node.IS_DISPATCHER);
1432:       assertEquals(2, Node.POST_FLAG);
1433:       assertEquals(1, Node.DECR_FLAG);
1434:       assertEquals(12, Node.COLUMN_BITS);
1435:       assertEquals(43, Node.IS_CONSTANT_NAME);
1436:       assertEquals(32, Node.INCRDECR_PROP);
1437:       assertEquals(46, Node.IS_NAMESPACE);
1438:       assertEquals(54, Node.SLASH_V);
1439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1440:       assertEquals(50, Node.FREE_CALL);
1441:       assertEquals(56, Node.CHANGE_TIME);
1442:       assertEquals(47, Node.IS_DISPATCHER);
1443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1444:       assertEquals(29, Node.JSDOC_INFO_PROP);
1445:       assertEquals(37, Node.OPT_ARG_NAME);
1446:       assertEquals(32, Node.INCRDECR_PROP);
1447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1448:       assertEquals(46, Node.IS_NAMESPACE);
1449:       assertEquals(53, Node.INPUT_ID);
1450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1451:       assertEquals(43, Node.IS_CONSTANT_NAME);
1452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1453:       assertEquals(57, Node.LAST_PROP);
1454:       assertEquals(54, Node.SLASH_V);
1455:       assertEquals(40, Node.ORIGINALNAME_PROP);
1456:       assertEquals(30, Node.VAR_ARGS_NAME);
1457:       assertEquals(2, Node.POST_FLAG);
1458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1459:       assertEquals(39, Node.EMPTY_BLOCK);
1460:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1461:       assertEquals(48, Node.DIRECTIVES);
1462:       assertEquals(57, Node.REFLECTED_OBJECT);
1463:       assertEquals(55, Node.INFERRED_FUNCTION);
1464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1466:       assertEquals(52, Node.LENGTH);
1467:       assertEquals(8, Node.FLAG_NO_THROWS);
1468:       assertEquals(50, Node.FREE_CALL);
1469:       assertEquals(36, Node.QUOTED_PROP);
1470:       assertEquals(1, Node.DECR_FLAG);
1471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1472:       assertEquals(49, Node.DIRECT_EVAL);
1473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1474:       assertEquals(4095, Node.COLUMN_MASK);
1475:       assertEquals(12, Node.COLUMN_BITS);
1476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1477:       assertEquals(40, Node.ORIGINALNAME_PROP);
1478:       assertEquals(57, Node.REFLECTED_OBJECT);
1479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1480:       assertEquals(50, Node.FREE_CALL);
1481:       assertEquals(52, Node.LENGTH);
1482:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1483:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1484:       assertEquals(54, Node.SLASH_V);
1485:       assertEquals(49, Node.DIRECT_EVAL);
1486:       assertEquals(48, Node.DIRECTIVES);
1487:       assertEquals(12, Node.COLUMN_BITS);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(46, Node.IS_NAMESPACE);
1490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1491:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1492:       assertEquals(32, Node.INCRDECR_PROP);
1493:       assertEquals(1, Node.DECR_FLAG);
1494:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1496:       assertEquals(47, Node.IS_DISPATCHER);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1499:       assertEquals(43, Node.IS_CONSTANT_NAME);
1500:       assertEquals(56, Node.CHANGE_TIME);
1501:       assertEquals(37, Node.OPT_ARG_NAME);
1502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1503:       assertEquals(55, Node.INFERRED_FUNCTION);
1504:       assertEquals(30, Node.VAR_ARGS_NAME);
1505:       assertEquals(36, Node.QUOTED_PROP);
1506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1507:       assertEquals(8, Node.FLAG_NO_THROWS);
1508:       assertEquals(39, Node.EMPTY_BLOCK);
1509:       assertEquals(57, Node.LAST_PROP);
1510:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(53, Node.INPUT_ID);
1513:       assertEquals(49, Node.DIRECT_EVAL);
1514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1515:       assertEquals(57, Node.LAST_PROP);
1516:       assertEquals(32, Node.INCRDECR_PROP);
1517:       assertEquals(1, Node.DECR_FLAG);
1518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1519:       assertEquals(2, Node.POST_FLAG);
1520:       assertEquals(12, Node.COLUMN_BITS);
1521:       assertEquals(47, Node.IS_DISPATCHER);
1522:       assertEquals(30, Node.VAR_ARGS_NAME);
1523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1524:       assertEquals(29, Node.JSDOC_INFO_PROP);
1525:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1526:       assertEquals(56, Node.CHANGE_TIME);
1527:       assertEquals(39, Node.EMPTY_BLOCK);
1528:       assertEquals(37, Node.OPT_ARG_NAME);
1529:       assertEquals(48, Node.DIRECTIVES);
1530:       assertEquals(53, Node.INPUT_ID);
1531:       assertEquals(52, Node.LENGTH);
1532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1533:       assertEquals(36, Node.QUOTED_PROP);
1534:       assertEquals(8, Node.FLAG_NO_THROWS);
1535:       assertEquals(57, Node.REFLECTED_OBJECT);
1536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1537:       assertEquals(55, Node.INFERRED_FUNCTION);
1538:       assertEquals(43, Node.IS_CONSTANT_NAME);
1539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1540:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1541:       assertEquals(4095, Node.COLUMN_MASK);
1542:       assertEquals(50, Node.FREE_CALL);
1543:       assertEquals(40, Node.ORIGINALNAME_PROP);
1544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1546:       assertEquals(46, Node.IS_NAMESPACE);
1547:       assertEquals(54, Node.SLASH_V);
1548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1549:       assertNotSame(node0, node2);
1550:       assertSame(node0, node3);
1551:       assertNotSame(node0, node4);
1552:       assertSame(node3, node0);
1553:       assertNotSame(node3, node4);
1554:       assertNotSame(node3, node2);
1555:       assertNotSame(node4, node2);
1556:       assertNotSame(node4, node0);
1557:       assertNotSame(node4, node3);
1558:       assertFalse(node0.isGetterDef());
1559:       assertFalse(node0.isIf());
1560:       assertFalse(node0.isDelProp());
1561:       assertFalse(node0.isArrayLit());
1562:       assertFalse(node0.isEmpty());
1563:       assertEquals(155647, node0.getSourcePosition());
1564:       assertFalse(node0.isTry());
1565:       assertFalse(node0.isFor());
1566:       assertFalse(node0.isRegExp());
1567:       assertFalse(node0.isDefaultCase());
1568:       assertFalse(node0.isVoid());
1569:       assertFalse(node0.isCatch());
1570:       assertFalse(node0.isInc());
1571:       assertFalse(node0.isIn());
1572:       assertFalse(node0.isTrue());
1573:       assertFalse(node0.isNull());
1574:       assertFalse(node0.isNE());
1575:       assertFalse(node0.isBreak());
1576:       assertFalse(node0.isName());
1577:       assertEquals(37, node0.getLineno());
1578:       assertFalse(node0.isFalse());
1579:       assertFalse(node0.isCall());
1580:       assertFalse(node0.isSetterDef());
1581:       assertFalse(node0.isGetProp());
1582:       assertFalse(node0.isComma());
1583:       assertFalse(node0.isThrow());
1584:       assertEquals(40, node0.getType());
1585:       assertFalse(node0.isWhile());
1586:       assertFalse(node0.isNot());
1587:       assertFalse(node0.isFunction());
1588:       assertFalse(node0.isContinue());
1589:       assertFalse(node0.isAnd());
1590:       assertFalse(node0.isObjectLit());
1591:       assertFalse(node0.isDebugger());
1592:       assertFalse(node0.hasChildren());
1593:       assertFalse(node0.isDec());
1594:       assertFalse(node0.isAssign());
1595:       assertFalse(node0.isTypeOf());
1596:       assertFalse(node0.isLabelName());
1597:       assertFalse(node0.isNumber());
1598:       assertFalse(node0.isCast());
1599:       assertFalse(node0.isGetElem());
1600:       assertFalse(node0.hasOneChild());
1601:       assertFalse(node0.isAssignAdd());
1602:       assertFalse(node0.hasMoreThanOneChild());
1603:       assertFalse(node0.isLabel());
1604:       assertFalse(node0.isReturn());
1605:       assertFalse(node0.isDo());
1606:       assertFalse(node0.isWith());
1607:       assertFalse(node0.isExprResult());
1608:       assertFalse(node0.isNew());
1609:       assertFalse(node0.isAdd());
1610:       assertFalse(node0.isOr());
1611:       assertEquals(0, node0.getChildCount());
1612:       assertFalse(node0.isInstanceOf());
1613:       assertTrue(node0.isString());
1614:       assertFalse(node0.isVar());
1615:       assertFalse(node0.isThis());
1616:       assertFalse(node0.isHook());
1617:       assertFalse(node0.isBlock());
1618:       assertEquals(4095, node0.getCharno());
1619:       assertFalse(node0.isSwitch());
1620:       assertFalse(node0.isScript());
1621:       assertFalse(node0.isCase());
1622:       assertFalse(node0.isParamList());
1623:       assertFalse(node0.isStringKey());
1624:       assertFalse(node1.isParamList());
1625:       assertEquals(37, node1.getLineno());
1626:       assertFalse(node1.isSetterDef());
1627:       assertFalse(node1.isStringKey());
1628:       assertFalse(node1.isName());
1629:       assertFalse(node1.isNull());
1630:       assertFalse(node1.isFunction());
1631:       assertFalse(node1.isDefaultCase());
1632:       assertFalse(node1.isDo());
1633:       assertFalse(node1.isAdd());
1634:       assertFalse(node1.isNew());
1635:       assertFalse(node1.isArrayLit());
1636:       assertFalse(node1.isContinue());
1637:       assertFalse(node1.isVar());
1638:       assertFalse(node1.isLabel());
1639:       assertFalse(node1.isNE());
1640:       assertFalse(node1.isNumber());
1641:       assertFalse(node1.isIf());
1642:       assertFalse(node1.isLabelName());
1643:       assertTrue(node1.hasChildren());
1644:       assertFalse(node1.isIn());
1645:       assertFalse(node1.isGetterDef());
1646:       assertFalse(node1.isRegExp());
1647:       assertFalse(node1.isTry());
1648:       assertEquals(4095, node1.getCharno());
1649:       assertEquals(155647, node1.getSourcePosition());
1650:       assertEquals((-2145), node1.getType());
1651:       assertFalse(node1.isScript());
1652:       assertFalse(node1.isCase());
1653:       assertFalse(node1.isCatch());
1654:       assertFalse(node1.isWith());
1655:       assertFalse(node1.hasMoreThanOneChild());
1656:       assertEquals(1, node1.getChildCount());
1657:       assertFalse(node1.isBlock());
1658:       assertFalse(node1.isFor());
1659:       assertFalse(node1.isThis());
1660:       assertFalse(node1.isHook());
1661:       assertFalse(node1.isComma());
1662:       assertFalse(node1.isInstanceOf());
1663:       assertFalse(node1.isBreak());
1664:       assertFalse(node1.isGetProp());
1665:       assertFalse(node1.isAnd());
1666:       assertFalse(node1.isObjectLit());
1667:       assertFalse(node1.isNot());
1668:       assertFalse(node1.isInc());
1669:       assertFalse(node1.isSwitch());
1670:       assertFalse(node1.isCast());
1671:       assertFalse(node1.isThrow());
1672:       assertFalse(node1.isFalse());
1673:       assertFalse(node1.isTypeOf());
1674:       assertFalse(node1.isAssignAdd());
1675:       assertFalse(node1.isDelProp());
1676:       assertFalse(node1.isEmpty());
1677:       assertFalse(node1.isGetElem());
1678:       assertFalse(node1.isOr());
1679:       assertFalse(node1.isExprResult());
1680:       assertFalse(node1.isVoid());
1681:       assertFalse(node1.isTrue());
1682:       assertFalse(node1.isDebugger());
1683:       assertFalse(node1.isString());
1684:       assertFalse(node1.isCall());
1685:       assertFalse(node1.isWhile());
1686:       assertFalse(node1.isAssign());
1687:       assertFalse(node1.isDec());
1688:       assertTrue(node1.hasOneChild());
1689:       assertFalse(node1.isReturn());
1690:       assertFalse(node3.isGetElem());
1691:       assertFalse(node3.isAssign());
1692:       assertFalse(node3.isLabelName());
1693:       assertFalse(node3.isDec());
1694:       assertFalse(node3.hasChildren());
1695:       assertFalse(node3.isLabel());
1696:       assertFalse(node3.isTypeOf());
1697:       assertFalse(node3.isCast());
1698:       assertFalse(node3.isExprResult());
1699:       assertFalse(node3.isAnd());
1700:       assertFalse(node3.isWith());
1701:       assertFalse(node3.hasMoreThanOneChild());
1702:       assertFalse(node3.isObjectLit());
1703:       assertFalse(node3.isNot());
1704:       assertFalse(node3.isWhile());
1705:       assertFalse(node3.isReturn());
1706:       assertFalse(node3.isGetProp());
1707:       assertTrue(node3.isString());
1708:       assertFalse(node3.isNumber());
1709:       assertFalse(node3.hasOneChild());
1710:       assertFalse(node3.isScript());
1711:       assertFalse(node3.isStringKey());
1712:       assertFalse(node3.isName());
1713:       assertFalse(node3.isParamList());
1714:       assertFalse(node3.isVar());
1715:       assertFalse(node3.isNull());
1716:       assertFalse(node3.isComma());
1717:       assertFalse(node3.isSwitch());
1718:       assertEquals(0, node3.getChildCount());
1719:       assertFalse(node3.isBreak());
1720:       assertFalse(node3.isCall());
1721:       assertFalse(node3.isDo());
1722:       assertFalse(node3.isDefaultCase());
1723:       assertFalse(node3.isTrue());
1724:       assertFalse(node3.isNew());
1725:       assertFalse(node3.isAssignAdd());
1726:       assertFalse(node3.isOr());
1727:       assertFalse(node3.isAdd());
1728:       assertFalse(node3.isEmpty());
1729:       assertFalse(node3.isGetterDef());
1730:       assertFalse(node3.isDelProp());
1731:       assertFalse(node3.isIf());
1732:       assertFalse(node3.isFor());
1733:       assertFalse(node3.isNE());
1734:       assertFalse(node3.isFunction());
1735:       assertFalse(node3.isRegExp());
1736:       assertFalse(node3.isVoid());
1737:       assertFalse(node3.isArrayLit());
1738:       assertFalse(node3.isCase());
1739:       assertFalse(node3.isDebugger());
1740:       assertEquals(155647, node3.getSourcePosition());
1741:       assertFalse(node3.isTry());
1742:       assertEquals(4095, node3.getCharno());
1743:       assertFalse(node3.isThrow());
1744:       assertFalse(node3.isFalse());
1745:       assertFalse(node3.isHook());
1746:       assertFalse(node3.isThis());
1747:       assertFalse(node3.isBlock());
1748:       assertEquals(37, node3.getLineno());
1749:       assertFalse(node3.isInstanceOf());
1750:       assertFalse(node3.isCatch());
1751:       assertEquals(40, node3.getType());
1752:       assertFalse(node3.isContinue());
1753:       assertFalse(node3.isIn());
1754:       assertFalse(node3.isSetterDef());
1755:       assertFalse(node3.isInc());
1756:       assertFalse(node4.isDefaultCase());
1757:       assertFalse(node4.isRegExp());
1758:       assertFalse(node4.isVoid());
1759:       assertFalse(node4.isFunction());
1760:       assertFalse(node4.isCatch());
1761:       assertEquals(0, node4.getChildCount());
1762:       assertEquals(155647, node4.getSourcePosition());
1763:       assertFalse(node4.isTry());
1764:       assertFalse(node4.isFor());
1765:       assertEquals(40, node4.getType());
1766:       assertFalse(node4.isIf());
1767:       assertFalse(node4.isDelProp());
1768:       assertFalse(node4.isName());
1769:       assertFalse(node4.isSetterDef());
1770:       assertFalse(node4.isEmpty());
1771:       assertFalse(node4.isCall());
1772:       assertFalse(node4.isIn());
1773:       assertFalse(node4.isNE());
1774:       assertFalse(node4.isNull());
1775:       assertFalse(node4.isTrue());
1776:       assertFalse(node4.isSwitch());
1777:       assertFalse(node4.isDo());
1778:       assertEquals(4095, node4.getCharno());
1779:       assertFalse(node4.isCase());
1780:       assertFalse(node4.isNew());
1781:       assertFalse(node4.isAdd());
1782:       assertFalse(node4.isHook());
1783:       assertFalse(node4.hasMoreThanOneChild());
1784:       assertFalse(node4.isAssignAdd());
1785:       assertTrue(node4.isString());
1786:       assertFalse(node4.isLabel());
1787:       assertFalse(node4.isVar());
1788:       assertFalse(node4.isBlock());
1789:       assertFalse(node4.isNumber());
1790:       assertFalse(node4.isGetterDef());
1791:       assertFalse(node4.isLabelName());
1792:       assertFalse(node4.isArrayLit());
1793:       assertFalse(node4.isStringKey());
1794:       assertFalse(node4.isParamList());
1795:       assertFalse(node4.isWith());
1796:       assertFalse(node4.isNot());
1797:       assertFalse(node4.isScript());
1798:       assertFalse(node4.isExprResult());
1799:       assertFalse(node4.isInstanceOf());
1800:       assertFalse(node4.hasOneChild());
1801:       assertFalse(node4.isThis());
1802:       assertFalse(node4.isDec());
1803:       assertFalse(node4.hasChildren());
1804:       assertFalse(node4.isBreak());
1805:       assertFalse(node4.isAssign());
1806:       assertFalse(node4.isComma());
1807:       assertFalse(node4.isTypeOf());
1808:       assertFalse(node4.isGetElem());
1809:       assertFalse(node4.isOr());
1810:       assertFalse(node4.isWhile());
1811:       assertFalse(node4.isContinue());
1812:       assertFalse(node4.isInc());
1813:       assertFalse(node4.isThrow());
1814:       assertFalse(node4.isReturn());
1815:       assertEquals(37, node4.getLineno());
1816:       assertFalse(node4.isFalse());
1817:       assertFalse(node4.isGetProp());
1818:       assertFalse(node4.isCast());
1819:       assertFalse(node4.isObjectLit());
1820:       assertFalse(node4.isAnd());
1821:       assertFalse(node4.isDebugger());
1822:       
1823:       String string1 = node3.getString();
1824:       assertFalse(node0.equals((Object)node2));
1825:       assertFalse(node0.equals((Object)node1));
1826:       assertFalse(node0.equals((Object)node4));
1827:       assertFalse(node1.equals((Object)node2));
1828:       assertFalse(node1.equals((Object)node0));
1829:       assertFalse(node1.equals((Object)node4));
1830:       assertFalse(node1.equals((Object)node3));
1831:       assertFalse(node3.equals((Object)node4));
1832:       assertFalse(node3.equals((Object)node2));
1833:       assertFalse(node3.equals((Object)node1));
1834:       assertFalse(string1.equals((Object)string0));
1835:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1836:       assertEquals(40, Node.ORIGINALNAME_PROP);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(48, Node.DIRECTIVES);
1839:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1840:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1841:       assertEquals(4095, Node.COLUMN_MASK);
1842:       assertEquals(30, Node.VAR_ARGS_NAME);
1843:       assertEquals(55, Node.INFERRED_FUNCTION);
1844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1846:       assertEquals(57, Node.LAST_PROP);
1847:       assertEquals(49, Node.DIRECT_EVAL);
1848:       assertEquals(53, Node.INPUT_ID);
1849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1850:       assertEquals(39, Node.EMPTY_BLOCK);
1851:       assertEquals(36, Node.QUOTED_PROP);
1852:       assertEquals(57, Node.REFLECTED_OBJECT);
1853:       assertEquals(52, Node.LENGTH);
1854:       assertEquals(8, Node.FLAG_NO_THROWS);
1855:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1856:       assertEquals(29, Node.JSDOC_INFO_PROP);
1857:       assertEquals(56, Node.CHANGE_TIME);
1858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1859:       assertEquals(37, Node.OPT_ARG_NAME);
1860:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1861:       assertEquals(47, Node.IS_DISPATCHER);
1862:       assertEquals(2, Node.POST_FLAG);
1863:       assertEquals(1, Node.DECR_FLAG);
1864:       assertEquals(12, Node.COLUMN_BITS);
1865:       assertEquals(43, Node.IS_CONSTANT_NAME);
1866:       assertEquals(32, Node.INCRDECR_PROP);
1867:       assertEquals(46, Node.IS_NAMESPACE);
1868:       assertEquals(54, Node.SLASH_V);
1869:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1870:       assertEquals(50, Node.FREE_CALL);
1871:       assertEquals(56, Node.CHANGE_TIME);
1872:       assertEquals(47, Node.IS_DISPATCHER);
1873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1874:       assertEquals(29, Node.JSDOC_INFO_PROP);
1875:       assertEquals(37, Node.OPT_ARG_NAME);
1876:       assertEquals(32, Node.INCRDECR_PROP);
1877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1878:       assertEquals(46, Node.IS_NAMESPACE);
1879:       assertEquals(53, Node.INPUT_ID);
1880:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1881:       assertEquals(43, Node.IS_CONSTANT_NAME);
1882:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1883:       assertEquals(57, Node.LAST_PROP);
1884:       assertEquals(54, Node.SLASH_V);
1885:       assertEquals(40, Node.ORIGINALNAME_PROP);
1886:       assertEquals(30, Node.VAR_ARGS_NAME);
1887:       assertEquals(2, Node.POST_FLAG);
1888:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1889:       assertEquals(39, Node.EMPTY_BLOCK);
1890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1891:       assertEquals(48, Node.DIRECTIVES);
1892:       assertEquals(57, Node.REFLECTED_OBJECT);
1893:       assertEquals(55, Node.INFERRED_FUNCTION);
1894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1896:       assertEquals(52, Node.LENGTH);
1897:       assertEquals(8, Node.FLAG_NO_THROWS);
1898:       assertEquals(50, Node.FREE_CALL);
1899:       assertEquals(36, Node.QUOTED_PROP);
1900:       assertEquals(1, Node.DECR_FLAG);
1901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1902:       assertEquals(49, Node.DIRECT_EVAL);
1903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1904:       assertEquals(4095, Node.COLUMN_MASK);
1905:       assertEquals(12, Node.COLUMN_BITS);
1906:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1907:       assertEquals(40, Node.ORIGINALNAME_PROP);
1908:       assertEquals(57, Node.REFLECTED_OBJECT);
1909:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1910:       assertEquals(50, Node.FREE_CALL);
1911:       assertEquals(52, Node.LENGTH);
1912:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1914:       assertEquals(54, Node.SLASH_V);
1915:       assertEquals(49, Node.DIRECT_EVAL);
1916:       assertEquals(48, Node.DIRECTIVES);
1917:       assertEquals(12, Node.COLUMN_BITS);
1918:       assertEquals(4095, Node.COLUMN_MASK);
1919:       assertEquals(46, Node.IS_NAMESPACE);
1920:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1921:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1922:       assertEquals(32, Node.INCRDECR_PROP);
1923:       assertEquals(1, Node.DECR_FLAG);
1924:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1925:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1926:       assertEquals(47, Node.IS_DISPATCHER);
1927:       assertEquals(2, Node.POST_FLAG);
1928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1929:       assertEquals(43, Node.IS_CONSTANT_NAME);
1930:       assertEquals(56, Node.CHANGE_TIME);
1931:       assertEquals(37, Node.OPT_ARG_NAME);
1932:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1933:       assertEquals(55, Node.INFERRED_FUNCTION);
1934:       assertEquals(30, Node.VAR_ARGS_NAME);
1935:       assertEquals(36, Node.QUOTED_PROP);
1936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1937:       assertEquals(8, Node.FLAG_NO_THROWS);
1938:       assertEquals(39, Node.EMPTY_BLOCK);
1939:       assertEquals(57, Node.LAST_PROP);
1940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1941:       assertEquals(29, Node.JSDOC_INFO_PROP);
1942:       assertEquals(53, Node.INPUT_ID);
1943:       assertEquals("(|", string1);
1944:       assertNotSame(node0, node2);
1945:       assertSame(node0, node3);
1946:       assertNotSame(node0, node4);
1947:       assertSame(node3, node0);
1948:       assertNotSame(node3, node4);
1949:       assertNotSame(node3, node2);
1950:       assertFalse(node0.isGetterDef());
1951:       assertFalse(node0.isIf());
1952:       assertFalse(node0.isDelProp());
1953:       assertFalse(node0.isArrayLit());
1954:       assertFalse(node0.isEmpty());
1955:       assertEquals(155647, node0.getSourcePosition());
1956:       assertFalse(node0.isTry());
1957:       assertFalse(node0.isFor());
1958:       assertFalse(node0.isRegExp());
1959:       assertFalse(node0.isDefaultCase());
1960:       assertFalse(node0.isVoid());
1961:       assertFalse(node0.isCatch());
1962:       assertFalse(node0.isInc());
1963:       assertFalse(node0.isIn());
1964:       assertFalse(node0.isTrue());
1965:       assertFalse(node0.isNull());
1966:       assertFalse(node0.isNE());
1967:       assertFalse(node0.isBreak());
1968:       assertFalse(node0.isName());
1969:       assertEquals(37, node0.getLineno());
1970:       assertFalse(node0.isFalse());
1971:       assertFalse(node0.isCall());
1972:       assertFalse(node0.isSetterDef());
1973:       assertFalse(node0.isGetProp());
1974:       assertFalse(node0.isComma());
1975:       assertFalse(node0.isThrow());
1976:       assertEquals(40, node0.getType());
1977:       assertFalse(node0.isWhile());
1978:       assertFalse(node0.isNot());
1979:       assertFalse(node0.isFunction());
1980:       assertFalse(node0.isContinue());
1981:       assertFalse(node0.isAnd());
1982:       assertFalse(node0.isObjectLit());
1983:       assertFalse(node0.isDebugger());
1984:       assertFalse(node0.hasChildren());
1985:       assertFalse(node0.isDec());
1986:       assertFalse(node0.isAssign());
1987:       assertFalse(node0.isTypeOf());
1988:       assertFalse(node0.isLabelName());
1989:       assertFalse(node0.isNumber());
1990:       assertFalse(node0.isCast());
1991:       assertFalse(node0.isGetElem());
1992:       assertFalse(node0.hasOneChild());
1993:       assertFalse(node0.isAssignAdd());
1994:       assertFalse(node0.hasMoreThanOneChild());
1995:       assertFalse(node0.isLabel());
1996:       assertFalse(node0.isReturn());
1997:       assertFalse(node0.isDo());
1998:       assertFalse(node0.isWith());
1999:       assertFalse(node0.isExprResult());
2000:       assertFalse(node0.isNew());
2001:       assertFalse(node0.isAdd());
2002:       assertFalse(node0.isOr());
2003:       assertEquals(0, node0.getChildCount());
2004:       assertFalse(node0.isInstanceOf());
2005:       assertTrue(node0.isString());
2006:       assertFalse(node0.isVar());
2007:       assertFalse(node0.isThis());
2008:       assertFalse(node0.isHook());
2009:       assertFalse(node0.isBlock());
2010:       assertEquals(4095, node0.getCharno());
2011:       assertFalse(node0.isSwitch());
2012:       assertFalse(node0.isScript());
2013:       assertFalse(node0.isCase());
2014:       assertFalse(node0.isParamList());
2015:       assertFalse(node0.isStringKey());
2016:       assertFalse(node1.isParamList());
2017:       assertEquals(37, node1.getLineno());
2018:       assertFalse(node1.isSetterDef());
2019:       assertFalse(node1.isStringKey());
2020:       assertFalse(node1.isName());
2021:       assertFalse(node1.isNull());
2022:       assertFalse(node1.isFunction());
2023:       assertFalse(node1.isDefaultCase());
2024:       assertFalse(node1.isDo());
2025:       assertFalse(node1.isAdd());
2026:       assertFalse(node1.isNew());
2027:       assertFalse(node1.isArrayLit());
2028:       assertFalse(node1.isContinue());
2029:       assertFalse(node1.isVar());
2030:       assertFalse(node1.isLabel());
2031:       assertFalse(node1.isNE());
2032:       assertFalse(node1.isNumber());
2033:       assertFalse(node1.isIf());
2034:       assertFalse(node1.isLabelName());
2035:       assertTrue(node1.hasChildren());
2036:       assertFalse(node1.isIn());
2037:       assertFalse(node1.isGetterDef());
2038:       assertFalse(node1.isRegExp());
2039:       assertFalse(node1.isTry());
2040:       assertEquals(4095, node1.getCharno());
2041:       assertEquals(155647, node1.getSourcePosition());
2042:       assertEquals((-2145), node1.getType());
2043:       assertFalse(node1.isScript());
2044:       assertFalse(node1.isCase());
2045:       assertFalse(node1.isCatch());
2046:       assertFalse(node1.isWith());
2047:       assertFalse(node1.hasMoreThanOneChild());
2048:       assertEquals(1, node1.getChildCount());
2049:       assertFalse(node1.isBlock());
2050:       assertFalse(node1.isFor());
2051:       assertFalse(node1.isThis());
2052:       assertFalse(node1.isHook());
2053:       assertFalse(node1.isComma());
2054:       assertFalse(node1.isInstanceOf());
2055:       assertFalse(node1.isBreak());
2056:       assertFalse(node1.isGetProp());
2057:       assertFalse(node1.isAnd());
2058:       assertFalse(node1.isObjectLit());
2059:       assertFalse(node1.isNot());
2060:       assertFalse(node1.isInc());
2061:       assertFalse(node1.isSwitch());
2062:       assertFalse(node1.isCast());
2063:       assertFalse(node1.isThrow());
2064:       assertFalse(node1.isFalse());
2065:       assertFalse(node1.isTypeOf());
2066:       assertFalse(node1.isAssignAdd());
2067:       assertFalse(node1.isDelProp());
2068:       assertFalse(node1.isEmpty());
2069:       assertFalse(node1.isGetElem());
2070:       assertFalse(node1.isOr());
2071:       assertFalse(node1.isExprResult());
2072:       assertFalse(node1.isVoid());
2073:       assertFalse(node1.isTrue());
2074:       assertFalse(node1.isDebugger());
2075:       assertFalse(node1.isString());
2076:       assertFalse(node1.isCall());
2077:       assertFalse(node1.isWhile());
2078:       assertFalse(node1.isAssign());
2079:       assertFalse(node1.isDec());
2080:       assertTrue(node1.hasOneChild());
2081:       assertFalse(node1.isReturn());
2082:       assertFalse(node3.isGetElem());
2083:       assertFalse(node3.isAssign());
2084:       assertFalse(node3.isLabelName());
2085:       assertFalse(node3.isDec());
2086:       assertFalse(node3.hasChildren());
2087:       assertFalse(node3.isLabel());
2088:       assertFalse(node3.isTypeOf());
2089:       assertFalse(node3.isCast());
2090:       assertFalse(node3.isExprResult());
2091:       assertFalse(node3.isAnd());
2092:       assertFalse(node3.isWith());
2093:       assertFalse(node3.hasMoreThanOneChild());
2094:       assertFalse(node3.isObjectLit());
2095:       assertFalse(node3.isNot());
2096:       assertFalse(node3.isWhile());
2097:       assertFalse(node3.isReturn());
2098:       assertFalse(node3.isGetProp());
2099:       assertTrue(node3.isString());
2100:       assertFalse(node3.isNumber());
2101:       assertFalse(node3.hasOneChild());
2102:       assertFalse(node3.isScript());
2103:       assertFalse(node3.isStringKey());
2104:       assertFalse(node3.isName());
2105:       assertFalse(node3.isParamList());
2106:       assertFalse(node3.isVar());
2107:       assertFalse(node3.isNull());
2108:       assertFalse(node3.isComma());
2109:       assertFalse(node3.isSwitch());
2110:       assertEquals(0, node3.getChildCount());
2111:       assertFalse(node3.isBreak());
2112:       assertFalse(node3.isCall());
2113:       assertFalse(node3.isDo());
2114:       assertFalse(node3.isDefaultCase());
2115:       assertFalse(node3.isTrue());
2116:       assertFalse(node3.isNew());
2117:       assertFalse(node3.isAssignAdd());
2118:       assertFalse(node3.isOr());
2119:       assertFalse(node3.isAdd());
2120:       assertFalse(node3.isEmpty());
2121:       assertFalse(node3.isGetterDef());
2122:       assertFalse(node3.isDelProp());
2123:       assertFalse(node3.isIf());
2124:       assertFalse(node3.isFor());
2125:       assertFalse(node3.isNE());
2126:       assertFalse(node3.isFunction());
2127:       assertFalse(node3.isRegExp());
2128:       assertFalse(node3.isVoid());
2129:       assertFalse(node3.isArrayLit());
2130:       assertFalse(node3.isCase());
2131:       assertFalse(node3.isDebugger());
2132:       assertEquals(155647, node3.getSourcePosition());
2133:       assertFalse(node3.isTry());
2134:       assertEquals(4095, node3.getCharno());
2135:       assertFalse(node3.isThrow());
2136:       assertFalse(node3.isFalse());
2137:       assertFalse(node3.isHook());
2138:       assertFalse(node3.isThis());
2139:       assertFalse(node3.isBlock());
2140:       assertEquals(37, node3.getLineno());
2141:       assertFalse(node3.isInstanceOf());
2142:       assertFalse(node3.isCatch());
2143:       assertEquals(40, node3.getType());
2144:       assertFalse(node3.isContinue());
2145:       assertFalse(node3.isIn());
2146:       assertFalse(node3.isSetterDef());
2147:       assertFalse(node3.isInc());
2148:       
2149:       Node node5 = Node.newNumber(1679.9);
2150:       assertFalse(node5.equals((Object)node1));
2151:       assertFalse(node5.equals((Object)node0));
2152:       assertFalse(node5.equals((Object)node4));
2153:       assertFalse(node5.equals((Object)node3));
2154:       assertFalse(node5.equals((Object)node2));
2155:       assertEquals(56, Node.CHANGE_TIME);
2156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2157:       assertEquals(47, Node.IS_DISPATCHER);
2158:       assertEquals(37, Node.OPT_ARG_NAME);
2159:       assertEquals(2, Node.POST_FLAG);
2160:       assertEquals(46, Node.IS_NAMESPACE);
2161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2162:       assertEquals(32, Node.INCRDECR_PROP);
2163:       assertEquals(1, Node.DECR_FLAG);
2164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2165:       assertEquals(53, Node.INPUT_ID);
2166:       assertEquals(29, Node.JSDOC_INFO_PROP);
2167:       assertEquals(43, Node.IS_CONSTANT_NAME);
2168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2169:       assertEquals(57, Node.LAST_PROP);
2170:       assertEquals(30, Node.VAR_ARGS_NAME);
2171:       assertEquals(54, Node.SLASH_V);
2172:       assertEquals(40, Node.ORIGINALNAME_PROP);
2173:       assertEquals(8, Node.FLAG_NO_THROWS);
2174:       assertEquals(39, Node.EMPTY_BLOCK);
2175:       assertEquals(48, Node.DIRECTIVES);
2176:       assertEquals(50, Node.FREE_CALL);
2177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2178:       assertEquals(57, Node.REFLECTED_OBJECT);
2179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2180:       assertEquals(52, Node.LENGTH);
2181:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2182:       assertEquals(55, Node.INFERRED_FUNCTION);
2183:       assertEquals(36, Node.QUOTED_PROP);
2184:       assertEquals(49, Node.DIRECT_EVAL);
2185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2186:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2187:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2188:       assertEquals(12, Node.COLUMN_BITS);
2189:       assertEquals(4095, Node.COLUMN_MASK);
2190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2191:       assertFalse(node5.isGetProp());
2192:       assertFalse(node5.isComma());
2193:       assertFalse(node5.isThis());
2194:       assertFalse(node5.isBreak());
2195:       assertFalse(node5.isAnd());
2196:       assertFalse(node5.isNot());
2197:       assertFalse(node5.isObjectLit());
2198:       assertEquals((-1), node5.getCharno());
2199:       assertFalse(node5.isInc());
2200:       assertFalse(node5.isSwitch());
2201:       assertFalse(node5.isThrow());
2202:       assertFalse(node5.isCast());
2203:       assertFalse(node5.isFalse());
2204:       assertFalse(node5.isNE());
2205:       assertFalse(node5.isIf());
2206:       assertEquals((-1), node5.getLineno());
2207:       assertFalse(node5.isLabelName());
2208:       assertFalse(node5.isCase());
2209:       assertFalse(node5.isGetterDef());
2210:       assertFalse(node5.isIn());
2211:       assertFalse(node5.isScript());
2212:       assertFalse(node5.isBlock());
2213:       assertFalse(node5.hasOneChild());
2214:       assertFalse(node5.isTry());
2215:       assertFalse(node5.isCatch());
2216:       assertFalse(node5.isFor());
2217:       assertEquals(39, node5.getType());
2218:       assertFalse(node5.isHook());
2219:       assertFalse(node5.isInstanceOf());
2220:       assertFalse(node5.isWith());
2221:       assertFalse(node5.hasMoreThanOneChild());
2222:       assertFalse(node5.isRegExp());
2223:       assertFalse(node5.isParamList());
2224:       assertFalse(node5.isNull());
2225:       assertFalse(node5.isSetterDef());
2226:       assertFalse(node5.isName());
2227:       assertFalse(node5.isStringKey());
2228:       assertFalse(node5.isNew());
2229:       assertFalse(node5.isDebugger());
2230:       assertFalse(node5.isAdd());
2231:       assertFalse(node5.isDefaultCase());
2232:       assertFalse(node5.isArrayLit());
2233:       assertFalse(node5.isDo());
2234:       assertFalse(node5.isContinue());
2235:       assertFalse(node5.isVar());
2236:       assertEquals(0, node5.getChildCount());
2237:       assertFalse(node5.isFunction());
2238:       assertFalse(node5.isLabel());
2239:       assertFalse(node5.isReturn());
2240:       assertTrue(node5.isNumber());
2241:       assertFalse(node5.isAssignAdd());
2242:       assertFalse(node5.isDelProp());
2243:       assertFalse(node5.isEmpty());
2244:       assertEquals((-1), node5.getSourcePosition());
2245:       assertFalse(node5.isString());
2246:       assertFalse(node5.isOr());
2247:       assertFalse(node5.isVoid());
2248:       assertFalse(node5.isExprResult());
2249:       assertFalse(node5.isTrue());
2250:       assertFalse(node5.isWhile());
2251:       assertFalse(node5.isGetElem());
2252:       assertFalse(node5.isCall());
2253:       assertFalse(node5.hasChildren());
2254:       assertFalse(node5.isDec());
2255:       assertFalse(node5.isAssign());
2256:       assertFalse(node5.isTypeOf());
2257:       
2258:       boolean boolean1 = node3.isCatch();
2259:       assertFalse(node0.equals((Object)node2));
2260:       assertFalse(node0.equals((Object)node1));
2261:       assertFalse(node0.equals((Object)node5));
2262:       assertFalse(node0.equals((Object)node4));
2263:       assertFalse(node1.equals((Object)node2));
2264:       assertFalse(node1.equals((Object)node0));
2265:       assertFalse(node1.equals((Object)node4));
2266:       assertFalse(node1.equals((Object)node5));
2267:       assertFalse(node1.equals((Object)node3));
2268:       assertFalse(node3.equals((Object)node5));
2269:       assertFalse(node3.equals((Object)node4));
2270:       assertFalse(node3.equals((Object)node2));
2271:       assertFalse(node3.equals((Object)node1));
2272:       assertTrue(boolean1 == boolean0);
2273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2274:       assertEquals(40, Node.ORIGINALNAME_PROP);
2275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2276:       assertEquals(48, Node.DIRECTIVES);
2277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2279:       assertEquals(4095, Node.COLUMN_MASK);
2280:       assertEquals(30, Node.VAR_ARGS_NAME);
2281:       assertEquals(55, Node.INFERRED_FUNCTION);
2282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2283:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2284:       assertEquals(57, Node.LAST_PROP);
2285:       assertEquals(49, Node.DIRECT_EVAL);
2286:       assertEquals(53, Node.INPUT_ID);
2287:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2288:       assertEquals(39, Node.EMPTY_BLOCK);
2289:       assertEquals(36, Node.QUOTED_PROP);
2290:       assertEquals(57, Node.REFLECTED_OBJECT);
2291:       assertEquals(52, Node.LENGTH);
2292:       assertEquals(8, Node.FLAG_NO_THROWS);
2293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2294:       assertEquals(29, Node.JSDOC_INFO_PROP);
2295:       assertEquals(56, Node.CHANGE_TIME);
2296:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2297:       assertEquals(37, Node.OPT_ARG_NAME);
2298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2299:       assertEquals(47, Node.IS_DISPATCHER);
2300:       assertEquals(2, Node.POST_FLAG);
2301:       assertEquals(1, Node.DECR_FLAG);
2302:       assertEquals(12, Node.COLUMN_BITS);
2303:       assertEquals(43, Node.IS_CONSTANT_NAME);
2304:       assertEquals(32, Node.INCRDECR_PROP);
2305:       assertEquals(46, Node.IS_NAMESPACE);
2306:       assertEquals(54, Node.SLASH_V);
2307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2308:       assertEquals(50, Node.FREE_CALL);
2309:       assertEquals(56, Node.CHANGE_TIME);
2310:       assertEquals(47, Node.IS_DISPATCHER);
2311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2312:       assertEquals(29, Node.JSDOC_INFO_PROP);
2313:       assertEquals(37, Node.OPT_ARG_NAME);
2314:       assertEquals(32, Node.INCRDECR_PROP);
2315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2316:       assertEquals(46, Node.IS_NAMESPACE);
2317:       assertEquals(53, Node.INPUT_ID);
2318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2319:       assertEquals(43, Node.IS_CONSTANT_NAME);
2320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2321:       assertEquals(57, Node.LAST_PROP);
2322:       assertEquals(54, Node.SLASH_V);
2323:       assertEquals(40, Node.ORIGINALNAME_PROP);
2324:       assertEquals(30, Node.VAR_ARGS_NAME);
2325:       assertEquals(2, Node.POST_FLAG);
2326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2327:       assertEquals(39, Node.EMPTY_BLOCK);
2328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2329:       assertEquals(48, Node.DIRECTIVES);
2330:       assertEquals(57, Node.REFLECTED_OBJECT);
2331:       assertEquals(55, Node.INFERRED_FUNCTION);
2332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2334:       assertEquals(52, Node.LENGTH);
2335:       assertEquals(8, Node.FLAG_NO_THROWS);
2336:       assertEquals(50, Node.FREE_CALL);
2337:       assertEquals(36, Node.QUOTED_PROP);
2338:       assertEquals(1, Node.DECR_FLAG);
2339:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2340:       assertEquals(49, Node.DIRECT_EVAL);
2341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2342:       assertEquals(4095, Node.COLUMN_MASK);
2343:       assertEquals(12, Node.COLUMN_BITS);
2344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2345:       assertEquals(40, Node.ORIGINALNAME_PROP);
2346:       assertEquals(57, Node.REFLECTED_OBJECT);
2347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2348:       assertEquals(50, Node.FREE_CALL);
2349:       assertEquals(52, Node.LENGTH);
2350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2352:       assertEquals(54, Node.SLASH_V);
2353:       assertEquals(49, Node.DIRECT_EVAL);
2354:       assertEquals(48, Node.DIRECTIVES);
2355:       assertEquals(12, Node.COLUMN_BITS);
2356:       assertEquals(4095, Node.COLUMN_MASK);
2357:       assertEquals(46, Node.IS_NAMESPACE);
2358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2360:       assertEquals(32, Node.INCRDECR_PROP);
2361:       assertEquals(1, Node.DECR_FLAG);
2362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2364:       assertEquals(47, Node.IS_DISPATCHER);
2365:       assertEquals(2, Node.POST_FLAG);
2366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2367:       assertEquals(43, Node.IS_CONSTANT_NAME);
2368:       assertEquals(56, Node.CHANGE_TIME);
2369:       assertEquals(37, Node.OPT_ARG_NAME);
2370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2371:       assertEquals(55, Node.INFERRED_FUNCTION);
2372:       assertEquals(30, Node.VAR_ARGS_NAME);
2373:       assertEquals(36, Node.QUOTED_PROP);
2374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2375:       assertEquals(8, Node.FLAG_NO_THROWS);
2376:       assertEquals(39, Node.EMPTY_BLOCK);
2377:       assertEquals(57, Node.LAST_PROP);
2378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2379:       assertEquals(29, Node.JSDOC_INFO_PROP);
2380:       assertEquals(53, Node.INPUT_ID);
2381:       assertFalse(boolean1);
2382:       assertNotSame(node0, node2);
2383:       assertSame(node0, node3);
2384:       assertNotSame(node0, node4);
2385:       assertSame(node3, node0);
2386:       assertNotSame(node3, node4);
2387:       assertNotSame(node3, node2);
2388:       assertFalse(node0.isGetterDef());
2389:       assertFalse(node0.isIf());
2390:       assertFalse(node0.isDelProp());
2391:       assertFalse(node0.isArrayLit());
2392:       assertFalse(node0.isEmpty());
2393:       assertEquals(155647, node0.getSourcePosition());
2394:       assertFalse(node0.isTry());
2395:       assertFalse(node0.isFor());
2396:       assertFalse(node0.isRegExp());
2397:       assertFalse(node0.isDefaultCase());
2398:       
2399:       Node node6 = new Node(86, 38, 3243);
2400:       assertFalse(node6.equals((Object)node2));
2401:       assertFalse(node6.equals((Object)node1));
2402:       assertFalse(node6.equals((Object)node5));
2403:       assertFalse(node6.equals((Object)node0));
2404:       assertFalse(node6.equals((Object)node4));
2405:       assertFalse(node6.equals((Object)node3));
2406:       assertEquals(40, Node.ORIGINALNAME_PROP);
2407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2409:       assertEquals(48, Node.DIRECTIVES);
2410:       assertEquals(54, Node.SLASH_V);
2411:       assertEquals(8, Node.FLAG_NO_THROWS);
2412:       assertEquals(39, Node.EMPTY_BLOCK);
2413:       assertEquals(52, Node.LENGTH);
2414:       assertEquals(57, Node.REFLECTED_OBJECT);
2415:       assertEquals(50, Node.FREE_CALL);
2416:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2417:       assertEquals(55, Node.INFERRED_FUNCTION);
2418:       assertEquals(57, Node.LAST_PROP);
2419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2421:       assertEquals(47, Node.IS_DISPATCHER);
2422:       assertEquals(2, Node.POST_FLAG);
2423:       assertEquals(30, Node.VAR_ARGS_NAME);
2424:       assertEquals(29, Node.JSDOC_INFO_PROP);
2425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2426:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2427:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2428:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2429:       assertEquals(53, Node.INPUT_ID);
2430:       assertEquals(43, Node.IS_CONSTANT_NAME);
2431:       assertEquals(56, Node.CHANGE_TIME);
2432:       assertEquals(46, Node.IS_NAMESPACE);
2433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2434:       assertEquals(36, Node.QUOTED_PROP);
2435:       assertEquals(12, Node.COLUMN_BITS);
2436:       assertEquals(4095, Node.COLUMN_MASK);
2437:       assertEquals(32, Node.INCRDECR_PROP);
2438:       assertEquals(49, Node.DIRECT_EVAL);
2439:       assertEquals(1, Node.DECR_FLAG);
2440:       assertEquals(37, Node.OPT_ARG_NAME);
2441:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2442:       
2443:       node6.removeChildren();
2444:       assertFalse(node6.equals((Object)node2));
2445:       assertFalse(node6.equals((Object)node1));
2446:       assertFalse(node6.equals((Object)node5));
2447:       assertFalse(node6.equals((Object)node0));
2448:       assertFalse(node6.equals((Object)node4));
2449:       assertFalse(node6.equals((Object)node3));
2450:       assertEquals(40, Node.ORIGINALNAME_PROP);
2451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2453:       assertEquals(48, Node.DIRECTIVES);
2454:       assertEquals(54, Node.SLASH_V);
2455:       assertEquals(8, Node.FLAG_NO_THROWS);
2456:       assertEquals(39, Node.EMPTY_BLOCK);
2457:       assertEquals(52, Node.LENGTH);
2458:       assertEquals(57, Node.REFLECTED_OBJECT);
2459:       assertEquals(50, Node.FREE_CALL);
2460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2461:       assertEquals(55, Node.INFERRED_FUNCTION);
2462:       assertEquals(57, Node.LAST_PROP);
2463:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2465:       assertEquals(47, Node.IS_DISPATCHER);
2466:       assertEquals(2, Node.POST_FLAG);
2467:       assertEquals(30, Node.VAR_ARGS_NAME);
2468:       assertEquals(29, Node.JSDOC_INFO_PROP);
2469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2471:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2473:       assertEquals(53, Node.INPUT_ID);
2474:       assertEquals(43, Node.IS_CONSTANT_NAME);
2475:       assertEquals(56, Node.CHANGE_TIME);
2476:       assertEquals(46, Node.IS_NAMESPACE);
2477:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2478:       assertEquals(36, Node.QUOTED_PROP);
2479:       assertEquals(12, Node.COLUMN_BITS);
2480:       assertEquals(4095, Node.COLUMN_MASK);
2481:       assertEquals(32, Node.INCRDECR_PROP);
2482:       assertEquals(49, Node.DIRECT_EVAL);
2483:       assertEquals(1, Node.DECR_FLAG);
2484:       assertEquals(37, Node.OPT_ARG_NAME);
2485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2486:       assertNotSame(node6, node1);
2487:       
2488:       boolean boolean2 = node5.isDefaultCase();
2489:       assertFalse(node5.equals((Object)node1));
2490:       assertFalse(node5.equals((Object)node0));
2491:       assertFalse(node5.equals((Object)node4));
2492:       assertFalse(node5.equals((Object)node3));
2493:       assertFalse(node5.equals((Object)node6));
2494:       assertFalse(node5.equals((Object)node2));
2495:       assertTrue(boolean2 == boolean0);
2496:       assertTrue(boolean2 == boolean1);
2497:       assertEquals(56, Node.CHANGE_TIME);
2498:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2499:       assertEquals(47, Node.IS_DISPATCHER);
2500:       assertEquals(37, Node.OPT_ARG_NAME);
2501:       assertEquals(2, Node.POST_FLAG);
2502:       assertEquals(46, Node.IS_NAMESPACE);
2503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2504:       assertEquals(32, Node.INCRDECR_PROP);
2505:       assertEquals(1, Node.DECR_FLAG);
2506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2507:       assertEquals(53, Node.INPUT_ID);
2508:       assertEquals(29, Node.JSDOC_INFO_PROP);
2509:       assertEquals(43, Node.IS_CONSTANT_NAME);
2510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2511:       assertEquals(57, Node.LAST_PROP);
2512:       assertEquals(30, Node.VAR_ARGS_NAME);
2513:       assertEquals(54, Node.SLASH_V);
2514:       assertEquals(40, Node.ORIGINALNAME_PROP);
2515:       assertEquals(8, Node.FLAG_NO_THROWS);
2516:       assertEquals(39, Node.EMPTY_BLOCK);
2517:       assertEquals(48, Node.DIRECTIVES);
2518:       assertEquals(50, Node.FREE_CALL);
2519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2520:       assertEquals(57, Node.REFLECTED_OBJECT);
2521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2522:       assertEquals(52, Node.LENGTH);
2523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2524:       assertEquals(55, Node.INFERRED_FUNCTION);
2525:       assertEquals(36, Node.QUOTED_PROP);
2526:       assertEquals(49, Node.DIRECT_EVAL);
2527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2530:       assertEquals(12, Node.COLUMN_BITS);
2531:       assertEquals(4095, Node.COLUMN_MASK);
2532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2533:       assertFalse(boolean2);
2534:   }
2535: }
RegularFileObject[/tmp/EvoSuite_42_1629223355529/com/google/javascript/rhino/Node_42_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_42_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_42_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_42_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:36.366 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("(|", 254, 0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(254, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(254, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(254, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node2, node0);
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotSame(node2, node0);
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, int0);
assertNotSame(node0, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(254, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean0);
assertNotSame(node0, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(254, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());

Node node3 = node0.useSourceInfoFrom(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertTrue(node3.isString());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isParamList());
assertFalse(node3.isVar());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isSwitch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCase());
assertFalse(node3.isDebugger());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isTry());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(37, node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertEquals(40, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());

Node node4 = node3.cloneTree();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node4);
assertSame(node3, node0);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertTrue(node3.isString());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isParamList());
assertFalse(node3.isVar());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isSwitch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCase());
assertFalse(node3.isDebugger());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isTry());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(37, node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertEquals(40, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertFalse(node4.isFunction());
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertEquals(155647, node4.getSourcePosition());
assertFalse(node4.isTry());
assertFalse(node4.isFor());
assertEquals(40, node4.getType());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isSetterDef());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isSwitch());
assertFalse(node4.isDo());
assertEquals(4095, node4.getCharno());
assertFalse(node4.isCase());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isHook());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssignAdd());
assertTrue(node4.isString());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThis());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isAssign());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isGetElem());
assertFalse(node4.isOr());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isInc());
assertFalse(node4.isThrow());
assertFalse(node4.isReturn());
assertEquals(37, node4.getLineno());
assertFalse(node4.isFalse());
assertFalse(node4.isGetProp());
assertFalse(node4.isCast());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());

String string1 = node3.getString();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(string1.equals((Object)string0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals("(|", string1);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node4);
assertSame(node3, node0);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertTrue(node3.isString());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isParamList());
assertFalse(node3.isVar());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isSwitch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCase());
assertFalse(node3.isDebugger());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isTry());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(37, node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertEquals(40, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());

Node node5 = Node.newNumber(1679.9);
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node5.isGetProp());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isBreak());
assertFalse(node5.isAnd());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertFalse(node5.isThrow());
assertFalse(node5.isCast());
assertFalse(node5.isFalse());
assertFalse(node5.isNE());
assertFalse(node5.isIf());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabelName());
assertFalse(node5.isCase());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isScript());
assertFalse(node5.isBlock());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isCatch());
assertFalse(node5.isFor());
assertEquals(39, node5.getType());
assertFalse(node5.isHook());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isRegExp());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isSetterDef());
assertFalse(node5.isName());
assertFalse(node5.isStringKey());
assertFalse(node5.isNew());
assertFalse(node5.isDebugger());
assertFalse(node5.isAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isArrayLit());
assertFalse(node5.isDo());
assertFalse(node5.isContinue());
assertFalse(node5.isVar());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isFunction());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertTrue(node5.isNumber());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDelProp());
assertFalse(node5.isEmpty());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isString());
assertFalse(node5.isOr());
assertFalse(node5.isVoid());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isWhile());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());

boolean boolean1 = node3.isCatch();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node3));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean1);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node4);
assertSame(node3, node0);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());

Node node6 = new Node(86, 38, 3243);
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node6.removeChildren();
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node6, node1);

boolean boolean2 = node5.isDefaultCase();
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean2);


[MASTER] 18:02:40.008 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_66_1629223359420/com/google/javascript/rhino/Node_66_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_66_1629223359420/com/google/javascript/rhino/Node_66_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:40.008 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:40.008 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:40.009 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 18:02:40.011 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_66_1629223359420/com/google/javascript/rhino/Node_66_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_66_tmp__ESTest extends Node_66_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("(|", 254, 0);
22:       assertEquals(52, Node.LENGTH);
23:       assertEquals(57, Node.REFLECTED_OBJECT);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(2, Node.POST_FLAG);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
36:       assertEquals(15, Node.NO_SIDE_EFFECTS);
37:       assertEquals(57, Node.LAST_PROP);
38:       assertEquals(47, Node.IS_DISPATCHER);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(32, Node.INCRDECR_PROP);
51:       assertEquals(46, Node.IS_NAMESPACE);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(4095, Node.COLUMN_MASK);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isFunction());
66:       assertFalse(node0.isDelProp());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isIn());
69:       assertEquals(40, node0.getType());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isInc());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isInstanceOf());
83:       assertEquals(254, node0.getLineno());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isScript());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isNumber());
88:       assertTrue(node0.isString());
89:       assertFalse(node0.isTry());
90:       assertFalse(node0.isCase());
91:       assertFalse(node0.isCast());
92:       assertFalse(node0.hasOneChild());
93:       assertFalse(node0.isAssign());
94:       assertFalse(node0.hasChildren());
95:       assertEquals(0, node0.getCharno());
96:       assertFalse(node0.isDec());
97:       assertFalse(node0.isTypeOf());
98:       assertFalse(node0.isWith());
99:       assertFalse(node0.isLabelName());
100:       assertFalse(node0.isExprResult());
101:       assertFalse(node0.isGetElem());
102:       assertFalse(node0.isContinue());
103:       assertFalse(node0.isOr());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isLabel());
106:       assertFalse(node0.isDo());
107:       assertFalse(node0.isNew());
108:       assertFalse(node0.isAdd());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isFalse());
111:       assertFalse(node0.isThrow());
112:       assertFalse(node0.isNull());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isBreak());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isAnd());
117:       assertFalse(node0.isObjectLit());
118:       assertFalse(node0.isNot());
119:       assertFalse(node0.isWhile());
120:       assertFalse(node0.isReturn());
121:       assertFalse(node0.isDebugger());
122:       assertEquals(1040384, node0.getSourcePosition());
123:       assertFalse(node0.isGetProp());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(52, Node.LENGTH);
127:       assertEquals(57, Node.REFLECTED_OBJECT);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
132:       assertEquals(40, Node.ORIGINALNAME_PROP);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       assertEquals(55, Node.INFERRED_FUNCTION);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(2, Node.POST_FLAG);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(57, Node.LAST_PROP);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(29, Node.JSDOC_INFO_PROP);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
148:       assertEquals(53, Node.INPUT_ID);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(32, Node.INCRDECR_PROP);
155:       assertEquals(46, Node.IS_NAMESPACE);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertFalse(iterable0.contains(node0));
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isIf());
169:       assertFalse(node0.isRegExp());
170:       assertFalse(node0.isFunction());
171:       assertFalse(node0.isDelProp());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isIn());
174:       assertEquals(40, node0.getType());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isDefaultCase());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isInc());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isHook());
182:       assertFalse(node0.isBlock());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.isInstanceOf());
188:       assertEquals(254, node0.getLineno());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isGetterDef());
192:       assertFalse(node0.isNumber());
193:       assertTrue(node0.isString());
194:       assertFalse(node0.isTry());
195:       assertFalse(node0.isCase());
196:       assertFalse(node0.isCast());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isAssign());
199:       assertFalse(node0.hasChildren());
200:       assertEquals(0, node0.getCharno());
201:       assertFalse(node0.isDec());
202:       assertFalse(node0.isTypeOf());
203:       assertFalse(node0.isWith());
204:       assertFalse(node0.isLabelName());
205:       assertFalse(node0.isExprResult());
206:       assertFalse(node0.isGetElem());
207:       assertFalse(node0.isContinue());
208:       assertFalse(node0.isOr());
209:       assertFalse(node0.isAssignAdd());
210:       assertFalse(node0.isLabel());
211:       assertFalse(node0.isDo());
212:       assertFalse(node0.isNew());
213:       assertFalse(node0.isAdd());
214:       assertFalse(node0.isName());
215:       assertFalse(node0.isFalse());
216:       assertFalse(node0.isThrow());
217:       assertFalse(node0.isNull());
218:       assertFalse(node0.isComma());
219:       assertFalse(node0.isBreak());
220:       assertFalse(node0.isCall());
221:       assertFalse(node0.isAnd());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isNot());
224:       assertFalse(node0.isWhile());
225:       assertFalse(node0.isReturn());
226:       assertFalse(node0.isDebugger());
227:       assertEquals(1040384, node0.getSourcePosition());
228:       assertFalse(node0.isGetProp());
229:       
230:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
231:       assertFalse(node1.equals((Object)node0));
232:       assertEquals(52, Node.LENGTH);
233:       assertEquals(57, Node.REFLECTED_OBJECT);
234:       assertEquals(54, Node.SLASH_V);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(49, Node.DIRECT_EVAL);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(8, Node.FLAG_NO_THROWS);
243:       assertEquals(2, Node.POST_FLAG);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(47, Node.IS_DISPATCHER);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(53, Node.INPUT_ID);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(43, Node.IS_CONSTANT_NAME);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(32, Node.INCRDECR_PROP);
261:       assertEquals(46, Node.IS_NAMESPACE);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(4095, Node.COLUMN_MASK);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
269:       assertEquals(57, Node.LAST_PROP);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(52, Node.LENGTH);
272:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
273:       assertEquals(30, Node.VAR_ARGS_NAME);
274:       assertEquals(12, Node.COLUMN_BITS);
275:       assertEquals(32, Node.INCRDECR_PROP);
276:       assertEquals(1, Node.DECR_FLAG);
277:       assertEquals(2, Node.POST_FLAG);
278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
279:       assertEquals(47, Node.IS_DISPATCHER);
280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
281:       assertEquals(50, Node.FREE_CALL);
282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
283:       assertEquals(40, Node.ORIGINALNAME_PROP);
284:       assertEquals(46, Node.IS_NAMESPACE);
285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
286:       assertEquals(43, Node.IS_CONSTANT_NAME);
287:       assertEquals(36, Node.QUOTED_PROP);
288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
289:       assertEquals(55, Node.INFERRED_FUNCTION);
290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
291:       assertEquals(29, Node.JSDOC_INFO_PROP);
292:       assertEquals(53, Node.INPUT_ID);
293:       assertEquals(8, Node.FLAG_NO_THROWS);
294:       assertEquals(39, Node.EMPTY_BLOCK);
295:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
296:       assertEquals(56, Node.CHANGE_TIME);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(57, Node.REFLECTED_OBJECT);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(37, Node.OPT_ARG_NAME);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertFalse(node0.isArrayLit());
305:       assertFalse(node0.isFor());
306:       assertFalse(node0.isTrue());
307:       assertFalse(node0.isNE());
308:       assertFalse(node0.isVoid());
309:       assertFalse(node0.isIf());
310:       assertFalse(node0.isRegExp());
311:       assertFalse(node0.isFunction());
312:       assertFalse(node0.isDelProp());
313:       assertEquals(0, node0.getChildCount());
314:       assertFalse(node0.isIn());
315:       assertEquals(40, node0.getType());
316:       assertFalse(node0.isSetterDef());
317:       assertFalse(node0.isDefaultCase());
318:       assertFalse(node0.isEmpty());
319:       assertFalse(node0.isInc());
320:       assertFalse(node0.isVar());
321:       assertFalse(node0.isStringKey());
322:       assertFalse(node0.isHook());
323:       assertFalse(node0.isBlock());
324:       assertFalse(node0.isSwitch());
325:       assertFalse(node0.isParamList());
326:       assertFalse(node0.hasMoreThanOneChild());
327:       assertFalse(node0.isCatch());
328:       assertFalse(node0.isInstanceOf());
329:       assertEquals(254, node0.getLineno());
330:       assertFalse(node0.isThis());
331:       assertFalse(node0.isScript());
332:       assertFalse(node0.isGetterDef());
333:       assertFalse(node0.isNumber());
334:       assertTrue(node0.isString());
335:       assertFalse(node0.isTry());
336:       assertFalse(node0.isCase());
337:       assertFalse(node0.isCast());
338:       assertFalse(node0.hasOneChild());
339:       assertFalse(node0.isAssign());
340:       assertFalse(node0.hasChildren());
341:       assertEquals(0, node0.getCharno());
342:       assertFalse(node0.isDec());
343:       assertFalse(node0.isTypeOf());
344:       assertFalse(node0.isWith());
345:       assertFalse(node0.isLabelName());
346:       assertFalse(node0.isExprResult());
347:       assertFalse(node0.isGetElem());
348:       assertFalse(node0.isContinue());
349:       assertFalse(node0.isOr());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isLabel());
352:       assertFalse(node0.isDo());
353:       assertFalse(node0.isNew());
354:       assertFalse(node0.isAdd());
355:       assertFalse(node0.isName());
356:       assertFalse(node0.isFalse());
357:       assertFalse(node0.isThrow());
358:       assertFalse(node0.isNull());
359:       assertFalse(node0.isComma());
360:       assertFalse(node0.isBreak());
361:       assertFalse(node0.isCall());
362:       assertFalse(node0.isAnd());
363:       assertFalse(node0.isObjectLit());
364:       assertFalse(node0.isNot());
365:       assertFalse(node0.isWhile());
366:       assertFalse(node0.isReturn());
367:       assertFalse(node0.isDebugger());
368:       assertEquals(1040384, node0.getSourcePosition());
369:       assertFalse(node0.isGetProp());
370:       assertFalse(node1.isObjectLit());
371:       assertFalse(node1.isNot());
372:       assertFalse(node1.isNumber());
373:       assertFalse(node1.isScript());
374:       assertFalse(node1.isAssignAdd());
375:       assertFalse(node1.isLabel());
376:       assertFalse(node1.isFalse());
377:       assertFalse(node1.isContinue());
378:       assertFalse(node1.isAnd());
379:       assertFalse(node1.isLabelName());
380:       assertFalse(node1.isCast());
381:       assertFalse(node1.isNew());
382:       assertFalse(node1.isWhile());
383:       assertFalse(node1.isVar());
384:       assertFalse(node1.isDo());
385:       assertFalse(node1.isString());
386:       assertFalse(node1.isAdd());
387:       assertFalse(node1.isGetProp());
388:       assertFalse(node1.isComma());
389:       assertFalse(node1.isOr());
390:       assertFalse(node1.isTypeOf());
391:       assertFalse(node1.isDec());
392:       assertTrue(node1.hasOneChild());
393:       assertFalse(node1.isReturn());
394:       assertFalse(node1.isNull());
395:       assertFalse(node1.isGetElem());
396:       assertFalse(node1.isAssign());
397:       assertFalse(node1.isDelProp());
398:       assertFalse(node1.isName());
399:       assertFalse(node1.isBreak());
400:       assertFalse(node1.isExprResult());
401:       assertFalse(node1.isCall());
402:       assertFalse(node1.isDebugger());
403:       assertFalse(node1.isFunction());
404:       assertEquals(155647, node1.getSourcePosition());
405:       assertFalse(node1.isRegExp());
406:       assertFalse(node1.isVoid());
407:       assertFalse(node1.isTry());
408:       assertFalse(node1.isDefaultCase());
409:       assertFalse(node1.isTrue());
410:       assertFalse(node1.isGetterDef());
411:       assertFalse(node1.isEmpty());
412:       assertFalse(node1.isParamList());
413:       assertFalse(node1.isStringKey());
414:       assertEquals(37, node1.getLineno());
415:       assertFalse(node1.isArrayLit());
416:       assertFalse(node1.isSwitch());
417:       assertEquals(4095, node1.getCharno());
418:       assertFalse(node1.isHook());
419:       assertFalse(node1.isBlock());
420:       assertFalse(node1.isThrow());
421:       assertFalse(node1.isCase());
422:       assertFalse(node1.isIn());
423:       assertFalse(node1.isSetterDef());
424:       assertFalse(node1.isInc());
425:       assertFalse(node1.isIf());
426:       assertEquals(1, node1.getChildCount());
427:       assertFalse(node1.isThis());
428:       assertFalse(node1.isNE());
429:       assertFalse(node1.isFor());
430:       assertFalse(node1.isWith());
431:       assertFalse(node1.hasMoreThanOneChild());
432:       assertFalse(node1.isInstanceOf());
433:       assertFalse(node1.isCatch());
434:       assertEquals((-2145), node1.getType());
435:       assertTrue(node1.hasChildren());
436:       
437:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
438:       assertFalse(node2.equals((Object)node1));
439:       assertFalse(node2.equals((Object)node0));
440:       assertEquals(32, Node.INCRDECR_PROP);
441:       assertEquals(46, Node.IS_NAMESPACE);
442:       assertEquals(37, Node.OPT_ARG_NAME);
443:       assertEquals(1, Node.DECR_FLAG);
444:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(49, Node.DIRECT_EVAL);
447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
448:       assertEquals(56, Node.CHANGE_TIME);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(40, Node.ORIGINALNAME_PROP);
453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
454:       assertEquals(53, Node.INPUT_ID);
455:       assertEquals(30, Node.VAR_ARGS_NAME);
456:       assertEquals(57, Node.LAST_PROP);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(4095, Node.COLUMN_MASK);
461:       assertEquals(39, Node.EMPTY_BLOCK);
462:       assertEquals(55, Node.INFERRED_FUNCTION);
463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
464:       assertEquals(48, Node.DIRECTIVES);
465:       assertEquals(50, Node.FREE_CALL);
466:       assertEquals(43, Node.IS_CONSTANT_NAME);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(57, Node.REFLECTED_OBJECT);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
476:       assertNotSame(node2, node0);
477:       assertEquals(0, node2.getChildCount());
478:       assertFalse(node2.isCatch());
479:       assertFalse(node2.isNull());
480:       assertFalse(node2.isTrue());
481:       assertFalse(node2.isVoid());
482:       assertFalse(node2.isDebugger());
483:       assertFalse(node2.isName());
484:       assertFalse(node2.isParamList());
485:       assertFalse(node2.isStringKey());
486:       assertFalse(node2.isVar());
487:       assertFalse(node2.isArrayLit());
488:       assertFalse(node2.isAdd());
489:       assertFalse(node2.isEmpty());
490:       assertFalse(node2.isFunction());
491:       assertFalse(node2.isSetterDef());
492:       assertFalse(node2.isNew());
493:       assertFalse(node2.isDo());
494:       assertEquals(40, node2.getType());
495:       assertFalse(node2.isDefaultCase());
496:       assertFalse(node2.hasMoreThanOneChild());
497:       assertEquals((-1), node2.getLineno());
498:       assertFalse(node2.isCase());
499:       assertFalse(node2.isIn());
500:       assertFalse(node2.isNE());
501:       assertFalse(node2.isSwitch());
502:       assertFalse(node2.isNumber());
503:       assertFalse(node2.isGetterDef());
504:       assertEquals((-1), node2.getCharno());
505:       assertFalse(node2.isLabelName());
506:       assertFalse(node2.isIf());
507:       assertFalse(node2.isHook());
508:       assertFalse(node2.hasOneChild());
509:       assertFalse(node2.isScript());
510:       assertFalse(node2.isRegExp());
511:       assertFalse(node2.isThis());
512:       assertFalse(node2.isTry());
513:       assertFalse(node2.isFor());
514:       assertFalse(node2.isBlock());
515:       assertTrue(node2.isString());
516:       assertFalse(node2.isObjectLit());
517:       assertFalse(node2.isNot());
518:       assertFalse(node2.isWith());
519:       assertFalse(node2.isInstanceOf());
520:       assertFalse(node2.isExprResult());
521:       assertFalse(node2.isBreak());
522:       assertFalse(node2.isAnd());
523:       assertFalse(node2.isCast());
524:       assertFalse(node2.isFalse());
525:       assertFalse(node2.isInc());
526:       assertFalse(node2.isAssignAdd());
527:       assertFalse(node2.isLabel());
528:       assertFalse(node2.isThrow());
529:       assertFalse(node2.isOr());
530:       assertFalse(node2.isContinue());
531:       assertFalse(node2.isDelProp());
532:       assertEquals((-1), node2.getSourcePosition());
533:       assertFalse(node2.isCall());
534:       assertFalse(node2.isAssign());
535:       assertFalse(node2.isGetElem());
536:       assertFalse(node2.isTypeOf());
537:       assertFalse(node2.hasChildren());
538:       assertFalse(node2.isGetProp());
539:       assertFalse(node2.isComma());
540:       assertFalse(node2.isDec());
541:       assertFalse(node2.isReturn());
542:       assertFalse(node2.isWhile());
543:       
544:       String string0 = node2.toStringTree();
545:       assertFalse(node2.equals((Object)node1));
546:       assertFalse(node2.equals((Object)node0));
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(46, Node.IS_NAMESPACE);
549:       assertEquals(37, Node.OPT_ARG_NAME);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(29, Node.JSDOC_INFO_PROP);
553:       assertEquals(49, Node.DIRECT_EVAL);
554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(51, Node.STATIC_SOURCE_FILE);
558:       assertEquals(52, Node.LENGTH);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       assertEquals(53, Node.INPUT_ID);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(57, Node.LAST_PROP);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(47, Node.IS_DISPATCHER);
567:       assertEquals(4095, Node.COLUMN_MASK);
568:       assertEquals(39, Node.EMPTY_BLOCK);
569:       assertEquals(55, Node.INFERRED_FUNCTION);
570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
571:       assertEquals(48, Node.DIRECTIVES);
572:       assertEquals(50, Node.FREE_CALL);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
575:       assertEquals(8, Node.FLAG_NO_THROWS);
576:       assertEquals(36, Node.QUOTED_PROP);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
580:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
581:       assertEquals(12, Node.COLUMN_BITS);
582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
583:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
584:       assertNotSame(node2, node0);
585:       assertEquals(0, node2.getChildCount());
586:       assertFalse(node2.isCatch());
587:       assertFalse(node2.isNull());
588:       assertFalse(node2.isTrue());
589:       assertFalse(node2.isVoid());
590:       assertFalse(node2.isDebugger());
591:       assertFalse(node2.isName());
592:       assertFalse(node2.isParamList());
593:       assertFalse(node2.isStringKey());
594:       assertFalse(node2.isVar());
595:       assertFalse(node2.isArrayLit());
596:       assertFalse(node2.isAdd());
597:       assertFalse(node2.isEmpty());
598:       assertFalse(node2.isFunction());
599:       assertFalse(node2.isSetterDef());
600:       assertFalse(node2.isNew());
601:       assertFalse(node2.isDo());
602:       assertEquals(40, node2.getType());
603:       assertFalse(node2.isDefaultCase());
604:       assertFalse(node2.hasMoreThanOneChild());
605:       assertEquals((-1), node2.getLineno());
606:       assertFalse(node2.isCase());
607:       assertFalse(node2.isIn());
608:       assertFalse(node2.isNE());
609:       assertFalse(node2.isSwitch());
610:       assertFalse(node2.isNumber());
611:       assertFalse(node2.isGetterDef());
612:       assertEquals((-1), node2.getCharno());
613:       assertFalse(node2.isLabelName());
614:       assertFalse(node2.isIf());
615:       assertFalse(node2.isHook());
616:       assertFalse(node2.hasOneChild());
617:       assertFalse(node2.isScript());
618:       assertFalse(node2.isRegExp());
619:       assertFalse(node2.isThis());
620:       assertFalse(node2.isTry());
621:       assertFalse(node2.isFor());
622:       assertFalse(node2.isBlock());
623:       assertTrue(node2.isString());
624:       assertFalse(node2.isObjectLit());
625:       assertFalse(node2.isNot());
626:       assertFalse(node2.isWith());
627:       assertFalse(node2.isInstanceOf());
628:       assertFalse(node2.isExprResult());
629:       assertFalse(node2.isBreak());
630:       assertFalse(node2.isAnd());
631:       assertFalse(node2.isCast());
632:       assertFalse(node2.isFalse());
633:       assertFalse(node2.isInc());
634:       assertFalse(node2.isAssignAdd());
635:       assertFalse(node2.isLabel());
636:       assertFalse(node2.isThrow());
637:       assertFalse(node2.isOr());
638:       assertFalse(node2.isContinue());
639:       assertFalse(node2.isDelProp());
640:       assertEquals((-1), node2.getSourcePosition());
641:       assertFalse(node2.isCall());
642:       assertFalse(node2.isAssign());
643:       assertFalse(node2.isGetElem());
644:       assertFalse(node2.isTypeOf());
645:       assertFalse(node2.hasChildren());
646:       assertFalse(node2.isGetProp());
647:       assertFalse(node2.isComma());
648:       assertFalse(node2.isDec());
649:       assertFalse(node2.isReturn());
650:       assertFalse(node2.isWhile());
651:       
652:       int int0 = node1.getIntProp(254);
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node0.equals((Object)node2));
655:       assertFalse(node1.equals((Object)node2));
656:       assertFalse(node1.equals((Object)node0));
657:       assertEquals(52, Node.LENGTH);
658:       assertEquals(57, Node.REFLECTED_OBJECT);
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(50, Node.FREE_CALL);
662:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
663:       assertEquals(40, Node.ORIGINALNAME_PROP);
664:       assertEquals(48, Node.DIRECTIVES);
665:       assertEquals(49, Node.DIRECT_EVAL);
666:       assertEquals(55, Node.INFERRED_FUNCTION);
667:       assertEquals(8, Node.FLAG_NO_THROWS);
668:       assertEquals(2, Node.POST_FLAG);
669:       assertEquals(30, Node.VAR_ARGS_NAME);
670:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
672:       assertEquals(57, Node.LAST_PROP);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       assertEquals(29, Node.JSDOC_INFO_PROP);
675:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
676:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
679:       assertEquals(53, Node.INPUT_ID);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(56, Node.CHANGE_TIME);
683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
684:       assertEquals(37, Node.OPT_ARG_NAME);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(46, Node.IS_NAMESPACE);
687:       assertEquals(12, Node.COLUMN_BITS);
688:       assertEquals(4095, Node.COLUMN_MASK);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
691:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
692:       assertEquals(1, Node.DECR_FLAG);
693:       assertEquals(15, Node.NO_SIDE_EFFECTS);
694:       assertEquals(57, Node.LAST_PROP);
695:       assertEquals(54, Node.SLASH_V);
696:       assertEquals(52, Node.LENGTH);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(30, Node.VAR_ARGS_NAME);
699:       assertEquals(12, Node.COLUMN_BITS);
700:       assertEquals(32, Node.INCRDECR_PROP);
701:       assertEquals(1, Node.DECR_FLAG);
702:       assertEquals(2, Node.POST_FLAG);
703:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
704:       assertEquals(47, Node.IS_DISPATCHER);
705:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
706:       assertEquals(50, Node.FREE_CALL);
707:       assertEquals(51, Node.STATIC_SOURCE_FILE);
708:       assertEquals(40, Node.ORIGINALNAME_PROP);
709:       assertEquals(46, Node.IS_NAMESPACE);
710:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
711:       assertEquals(43, Node.IS_CONSTANT_NAME);
712:       assertEquals(36, Node.QUOTED_PROP);
713:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
714:       assertEquals(55, Node.INFERRED_FUNCTION);
715:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
716:       assertEquals(29, Node.JSDOC_INFO_PROP);
717:       assertEquals(53, Node.INPUT_ID);
718:       assertEquals(8, Node.FLAG_NO_THROWS);
719:       assertEquals(39, Node.EMPTY_BLOCK);
720:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
721:       assertEquals(56, Node.CHANGE_TIME);
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
724:       assertEquals(4095, Node.COLUMN_MASK);
725:       assertEquals(57, Node.REFLECTED_OBJECT);
726:       assertEquals(49, Node.DIRECT_EVAL);
727:       assertEquals(37, Node.OPT_ARG_NAME);
728:       assertEquals(48, Node.DIRECTIVES);
729:       assertEquals(0, int0);
730:       assertNotSame(node0, node2);
731:       assertFalse(node0.isArrayLit());
732:       assertFalse(node0.isFor());
733:       assertFalse(node0.isTrue());
734:       assertFalse(node0.isNE());
735:       assertFalse(node0.isVoid());
736:       assertFalse(node0.isIf());
737:       assertFalse(node0.isRegExp());
738:       assertFalse(node0.isFunction());
739:       assertFalse(node0.isDelProp());
740:       assertEquals(0, node0.getChildCount());
741:       assertFalse(node0.isIn());
742:       assertEquals(40, node0.getType());
743:       assertFalse(node0.isSetterDef());
744:       assertFalse(node0.isDefaultCase());
745:       assertFalse(node0.isEmpty());
746:       assertFalse(node0.isInc());
747:       assertFalse(node0.isVar());
748:       assertFalse(node0.isStringKey());
749:       assertFalse(node0.isHook());
750:       assertFalse(node0.isBlock());
751:       assertFalse(node0.isSwitch());
752:       assertFalse(node0.isParamList());
753:       assertFalse(node0.hasMoreThanOneChild());
754:       assertFalse(node0.isCatch());
755:       assertFalse(node0.isInstanceOf());
756:       assertEquals(254, node0.getLineno());
757:       assertFalse(node0.isThis());
758:       assertFalse(node0.isScript());
759:       assertFalse(node0.isGetterDef());
760:       assertFalse(node0.isNumber());
761:       assertTrue(node0.isString());
762:       assertFalse(node0.isTry());
763:       assertFalse(node0.isCase());
764:       assertFalse(node0.isCast());
765:       assertFalse(node0.hasOneChild());
766:       assertFalse(node0.isAssign());
767:       assertFalse(node0.hasChildren());
768:       assertEquals(0, node0.getCharno());
769:       assertFalse(node0.isDec());
770:       assertFalse(node0.isTypeOf());
771:       assertFalse(node0.isWith());
772:       assertFalse(node0.isLabelName());
773:       assertFalse(node0.isExprResult());
774:       assertFalse(node0.isGetElem());
775:       assertFalse(node0.isContinue());
776:       assertFalse(node0.isOr());
777:       assertFalse(node0.isAssignAdd());
778:       assertFalse(node0.isLabel());
779:       assertFalse(node0.isDo());
780:       assertFalse(node0.isNew());
781:       assertFalse(node0.isAdd());
782:       assertFalse(node0.isName());
783:       assertFalse(node0.isFalse());
784:       assertFalse(node0.isThrow());
785:       assertFalse(node0.isNull());
786:       assertFalse(node0.isComma());
787:       assertFalse(node0.isBreak());
788:       assertFalse(node0.isCall());
789:       assertFalse(node0.isAnd());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isNot());
792:       assertFalse(node0.isWhile());
793:       assertFalse(node0.isReturn());
794:       assertFalse(node0.isDebugger());
795:       assertEquals(1040384, node0.getSourcePosition());
796:       assertFalse(node0.isGetProp());
797:       assertFalse(node1.isObjectLit());
798:       assertFalse(node1.isNot());
799:       assertFalse(node1.isNumber());
800:       assertFalse(node1.isScript());
801:       assertFalse(node1.isAssignAdd());
802:       assertFalse(node1.isLabel());
803:       assertFalse(node1.isFalse());
804:       assertFalse(node1.isContinue());
805:       assertFalse(node1.isAnd());
806:       assertFalse(node1.isLabelName());
807:       assertFalse(node1.isCast());
808:       assertFalse(node1.isNew());
809:       assertFalse(node1.isWhile());
810:       assertFalse(node1.isVar());
811:       assertFalse(node1.isDo());
812:       assertFalse(node1.isString());
813:       assertFalse(node1.isAdd());
814:       assertFalse(node1.isGetProp());
815:       assertFalse(node1.isComma());
816:       assertFalse(node1.isOr());
817:       assertFalse(node1.isTypeOf());
818:       assertFalse(node1.isDec());
819:       assertTrue(node1.hasOneChild());
820:       assertFalse(node1.isReturn());
821:       assertFalse(node1.isNull());
822:       assertFalse(node1.isGetElem());
823:       assertFalse(node1.isAssign());
824:       assertFalse(node1.isDelProp());
825:       assertFalse(node1.isName());
826:       assertFalse(node1.isBreak());
827:       assertFalse(node1.isExprResult());
828:       assertFalse(node1.isCall());
829:       assertFalse(node1.isDebugger());
830:       assertFalse(node1.isFunction());
831:       assertEquals(155647, node1.getSourcePosition());
832:       assertFalse(node1.isRegExp());
833:       assertFalse(node1.isVoid());
834:       assertFalse(node1.isTry());
835:       assertFalse(node1.isDefaultCase());
836:       assertFalse(node1.isTrue());
837:       assertFalse(node1.isGetterDef());
838:       assertFalse(node1.isEmpty());
839:       assertFalse(node1.isParamList());
840:       assertFalse(node1.isStringKey());
841:       assertEquals(37, node1.getLineno());
842:       assertFalse(node1.isArrayLit());
843:       assertFalse(node1.isSwitch());
844:       assertEquals(4095, node1.getCharno());
845:       assertFalse(node1.isHook());
846:       assertFalse(node1.isBlock());
847:       assertFalse(node1.isThrow());
848:       assertFalse(node1.isCase());
849:       assertFalse(node1.isIn());
850:       assertFalse(node1.isSetterDef());
851:       assertFalse(node1.isInc());
852:       assertFalse(node1.isIf());
853:       assertEquals(1, node1.getChildCount());
854:       assertFalse(node1.isThis());
855:       assertFalse(node1.isNE());
856:       assertFalse(node1.isFor());
857:       assertFalse(node1.isWith());
858:       assertFalse(node1.hasMoreThanOneChild());
859:       assertFalse(node1.isInstanceOf());
860:       assertFalse(node1.isCatch());
861:       assertEquals((-2145), node1.getType());
862:       assertTrue(node1.hasChildren());
863:       
864:       boolean boolean0 = node1.isEquivalentToShallow(node0);
865:       assertFalse(node0.equals((Object)node1));
866:       assertFalse(node0.equals((Object)node2));
867:       assertFalse(node1.equals((Object)node2));
868:       assertFalse(node1.equals((Object)node0));
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(50, Node.FREE_CALL);
874:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
875:       assertEquals(40, Node.ORIGINALNAME_PROP);
876:       assertEquals(48, Node.DIRECTIVES);
877:       assertEquals(49, Node.DIRECT_EVAL);
878:       assertEquals(55, Node.INFERRED_FUNCTION);
879:       assertEquals(8, Node.FLAG_NO_THROWS);
880:       assertEquals(2, Node.POST_FLAG);
881:       assertEquals(30, Node.VAR_ARGS_NAME);
882:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
883:       assertEquals(15, Node.NO_SIDE_EFFECTS);
884:       assertEquals(57, Node.LAST_PROP);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertEquals(29, Node.JSDOC_INFO_PROP);
887:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
888:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
889:       assertEquals(39, Node.EMPTY_BLOCK);
890:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
891:       assertEquals(53, Node.INPUT_ID);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(43, Node.IS_CONSTANT_NAME);
894:       assertEquals(56, Node.CHANGE_TIME);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(37, Node.OPT_ARG_NAME);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertEquals(4095, Node.COLUMN_MASK);
901:       assertEquals(51, Node.STATIC_SOURCE_FILE);
902:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(1, Node.DECR_FLAG);
905:       assertEquals(15, Node.NO_SIDE_EFFECTS);
906:       assertEquals(57, Node.LAST_PROP);
907:       assertEquals(54, Node.SLASH_V);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
910:       assertEquals(30, Node.VAR_ARGS_NAME);
911:       assertEquals(12, Node.COLUMN_BITS);
912:       assertEquals(32, Node.INCRDECR_PROP);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(2, Node.POST_FLAG);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(47, Node.IS_DISPATCHER);
917:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
918:       assertEquals(50, Node.FREE_CALL);
919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
920:       assertEquals(40, Node.ORIGINALNAME_PROP);
921:       assertEquals(46, Node.IS_NAMESPACE);
922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
923:       assertEquals(43, Node.IS_CONSTANT_NAME);
924:       assertEquals(36, Node.QUOTED_PROP);
925:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
926:       assertEquals(55, Node.INFERRED_FUNCTION);
927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
928:       assertEquals(29, Node.JSDOC_INFO_PROP);
929:       assertEquals(53, Node.INPUT_ID);
930:       assertEquals(8, Node.FLAG_NO_THROWS);
931:       assertEquals(39, Node.EMPTY_BLOCK);
932:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
933:       assertEquals(56, Node.CHANGE_TIME);
934:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(57, Node.REFLECTED_OBJECT);
938:       assertEquals(49, Node.DIRECT_EVAL);
939:       assertEquals(37, Node.OPT_ARG_NAME);
940:       assertEquals(48, Node.DIRECTIVES);
941:       assertFalse(boolean0);
942:       assertNotSame(node0, node2);
943:       assertFalse(node0.isArrayLit());
944:       assertFalse(node0.isFor());
945:       assertFalse(node0.isTrue());
946:       assertFalse(node0.isNE());
947:       assertFalse(node0.isVoid());
948:       assertFalse(node0.isIf());
949:       assertFalse(node0.isRegExp());
950:       assertFalse(node0.isFunction());
951:       assertFalse(node0.isDelProp());
952:       assertEquals(0, node0.getChildCount());
953:       assertFalse(node0.isIn());
954:       assertEquals(40, node0.getType());
955:       assertFalse(node0.isSetterDef());
956:       assertFalse(node0.isDefaultCase());
957:       assertFalse(node0.isEmpty());
958:       assertFalse(node0.isInc());
959:       assertFalse(node0.isVar());
960:       assertFalse(node0.isStringKey());
961:       assertFalse(node0.isHook());
962:       assertFalse(node0.isBlock());
963:       assertFalse(node0.isSwitch());
964:       assertFalse(node0.isParamList());
965:       assertFalse(node0.hasMoreThanOneChild());
966:       assertFalse(node0.isCatch());
967:       assertFalse(node0.isInstanceOf());
968:       assertEquals(254, node0.getLineno());
969:       assertFalse(node0.isThis());
970:       assertFalse(node0.isScript());
971:       assertFalse(node0.isGetterDef());
972:       assertFalse(node0.isNumber());
973:       assertTrue(node0.isString());
974:       assertFalse(node0.isTry());
975:       assertFalse(node0.isCase());
976:       assertFalse(node0.isCast());
977:       assertFalse(node0.hasOneChild());
978:       assertFalse(node0.isAssign());
979:       assertFalse(node0.hasChildren());
980:       assertEquals(0, node0.getCharno());
981:       assertFalse(node0.isDec());
982:       assertFalse(node0.isTypeOf());
983:       assertFalse(node0.isWith());
984:       assertFalse(node0.isLabelName());
985:       assertFalse(node0.isExprResult());
986:       assertFalse(node0.isGetElem());
987:       assertFalse(node0.isContinue());
988:       assertFalse(node0.isOr());
989:       assertFalse(node0.isAssignAdd());
990:       assertFalse(node0.isLabel());
991:       assertFalse(node0.isDo());
992:       assertFalse(node0.isNew());
993:       assertFalse(node0.isAdd());
994:       assertFalse(node0.isName());
995:       assertFalse(node0.isFalse());
996:       assertFalse(node0.isThrow());
997:       assertFalse(node0.isNull());
998:       assertFalse(node0.isComma());
999:       assertFalse(node0.isBreak());
1000:       assertFalse(node0.isCall());
1001:       assertFalse(node0.isAnd());
1002:       assertFalse(node0.isObjectLit());
1003:       assertFalse(node0.isNot());
1004:       assertFalse(node0.isWhile());
1005:       assertFalse(node0.isReturn());
1006:       assertFalse(node0.isDebugger());
1007:       assertEquals(1040384, node0.getSourcePosition());
1008:       assertFalse(node0.isGetProp());
1009:       assertFalse(node1.isObjectLit());
1010:       assertFalse(node1.isNot());
1011:       assertFalse(node1.isNumber());
1012:       assertFalse(node1.isScript());
1013:       assertFalse(node1.isAssignAdd());
1014:       assertFalse(node1.isLabel());
1015:       assertFalse(node1.isFalse());
1016:       assertFalse(node1.isContinue());
1017:       assertFalse(node1.isAnd());
1018:       assertFalse(node1.isLabelName());
1019:       assertFalse(node1.isCast());
1020:       assertFalse(node1.isNew());
1021:       assertFalse(node1.isWhile());
1022:       assertFalse(node1.isVar());
1023:       assertFalse(node1.isDo());
1024:       assertFalse(node1.isString());
1025:       assertFalse(node1.isAdd());
1026:       assertFalse(node1.isGetProp());
1027:       assertFalse(node1.isComma());
1028:       assertFalse(node1.isOr());
1029:       assertFalse(node1.isTypeOf());
1030:       assertFalse(node1.isDec());
1031:       assertTrue(node1.hasOneChild());
1032:       assertFalse(node1.isReturn());
1033:       assertFalse(node1.isNull());
1034:       assertFalse(node1.isGetElem());
1035:       assertFalse(node1.isAssign());
1036:       assertFalse(node1.isDelProp());
1037:       assertFalse(node1.isName());
1038:       assertFalse(node1.isBreak());
1039:       assertFalse(node1.isExprResult());
1040:       assertFalse(node1.isCall());
1041:       assertFalse(node1.isDebugger());
1042:       assertFalse(node1.isFunction());
1043:       assertEquals(155647, node1.getSourcePosition());
1044:       assertFalse(node1.isRegExp());
1045:       assertFalse(node1.isVoid());
1046:       assertFalse(node1.isTry());
1047:       assertFalse(node1.isDefaultCase());
1048:       assertFalse(node1.isTrue());
1049:       assertFalse(node1.isGetterDef());
1050:       assertFalse(node1.isEmpty());
1051:       assertFalse(node1.isParamList());
1052:       assertFalse(node1.isStringKey());
1053:       assertEquals(37, node1.getLineno());
1054:       assertFalse(node1.isArrayLit());
1055:       assertFalse(node1.isSwitch());
1056:       assertEquals(4095, node1.getCharno());
1057:       assertFalse(node1.isHook());
1058:       assertFalse(node1.isBlock());
1059:       assertFalse(node1.isThrow());
1060:       assertFalse(node1.isCase());
1061:       assertFalse(node1.isIn());
1062:       assertFalse(node1.isSetterDef());
1063:       assertFalse(node1.isInc());
1064:       assertFalse(node1.isIf());
1065:       assertEquals(1, node1.getChildCount());
1066:       assertFalse(node1.isThis());
1067:       assertFalse(node1.isNE());
1068:       assertFalse(node1.isFor());
1069:       assertFalse(node1.isWith());
1070:       assertFalse(node1.hasMoreThanOneChild());
1071:       assertFalse(node1.isInstanceOf());
1072:       assertFalse(node1.isCatch());
1073:       assertEquals((-2145), node1.getType());
1074:       assertTrue(node1.hasChildren());
1075:       
1076:       Node node3 = node0.useSourceInfoFrom(node1);
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertFalse(node0.equals((Object)node2));
1079:       assertFalse(node1.equals((Object)node2));
1080:       assertFalse(node1.equals((Object)node0));
1081:       assertFalse(node3.equals((Object)node2));
1082:       assertFalse(node3.equals((Object)node1));
1083:       assertEquals(52, Node.LENGTH);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(40, Node.ORIGINALNAME_PROP);
1090:       assertEquals(48, Node.DIRECTIVES);
1091:       assertEquals(49, Node.DIRECT_EVAL);
1092:       assertEquals(55, Node.INFERRED_FUNCTION);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(2, Node.POST_FLAG);
1095:       assertEquals(30, Node.VAR_ARGS_NAME);
1096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1097:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1098:       assertEquals(57, Node.LAST_PROP);
1099:       assertEquals(47, Node.IS_DISPATCHER);
1100:       assertEquals(29, Node.JSDOC_INFO_PROP);
1101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1103:       assertEquals(39, Node.EMPTY_BLOCK);
1104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1105:       assertEquals(53, Node.INPUT_ID);
1106:       assertEquals(36, Node.QUOTED_PROP);
1107:       assertEquals(43, Node.IS_CONSTANT_NAME);
1108:       assertEquals(56, Node.CHANGE_TIME);
1109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1110:       assertEquals(37, Node.OPT_ARG_NAME);
1111:       assertEquals(32, Node.INCRDECR_PROP);
1112:       assertEquals(46, Node.IS_NAMESPACE);
1113:       assertEquals(12, Node.COLUMN_BITS);
1114:       assertEquals(4095, Node.COLUMN_MASK);
1115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1118:       assertEquals(1, Node.DECR_FLAG);
1119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1120:       assertEquals(57, Node.LAST_PROP);
1121:       assertEquals(54, Node.SLASH_V);
1122:       assertEquals(52, Node.LENGTH);
1123:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1124:       assertEquals(30, Node.VAR_ARGS_NAME);
1125:       assertEquals(12, Node.COLUMN_BITS);
1126:       assertEquals(32, Node.INCRDECR_PROP);
1127:       assertEquals(1, Node.DECR_FLAG);
1128:       assertEquals(2, Node.POST_FLAG);
1129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1130:       assertEquals(47, Node.IS_DISPATCHER);
1131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1132:       assertEquals(50, Node.FREE_CALL);
1133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1134:       assertEquals(40, Node.ORIGINALNAME_PROP);
1135:       assertEquals(46, Node.IS_NAMESPACE);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(43, Node.IS_CONSTANT_NAME);
1138:       assertEquals(36, Node.QUOTED_PROP);
1139:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1140:       assertEquals(55, Node.INFERRED_FUNCTION);
1141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1142:       assertEquals(29, Node.JSDOC_INFO_PROP);
1143:       assertEquals(53, Node.INPUT_ID);
1144:       assertEquals(8, Node.FLAG_NO_THROWS);
1145:       assertEquals(39, Node.EMPTY_BLOCK);
1146:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1147:       assertEquals(56, Node.CHANGE_TIME);
1148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1150:       assertEquals(4095, Node.COLUMN_MASK);
1151:       assertEquals(57, Node.REFLECTED_OBJECT);
1152:       assertEquals(49, Node.DIRECT_EVAL);
1153:       assertEquals(37, Node.OPT_ARG_NAME);
1154:       assertEquals(48, Node.DIRECTIVES);
1155:       assertEquals(43, Node.IS_CONSTANT_NAME);
1156:       assertEquals(36, Node.QUOTED_PROP);
1157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1158:       assertEquals(4095, Node.COLUMN_MASK);
1159:       assertEquals(48, Node.DIRECTIVES);
1160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1161:       assertEquals(56, Node.CHANGE_TIME);
1162:       assertEquals(47, Node.IS_DISPATCHER);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(39, Node.EMPTY_BLOCK);
1165:       assertEquals(29, Node.JSDOC_INFO_PROP);
1166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1167:       assertEquals(8, Node.FLAG_NO_THROWS);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(55, Node.INFERRED_FUNCTION);
1170:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1171:       assertEquals(53, Node.INPUT_ID);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(54, Node.SLASH_V);
1175:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1176:       assertEquals(30, Node.VAR_ARGS_NAME);
1177:       assertEquals(52, Node.LENGTH);
1178:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1179:       assertEquals(57, Node.REFLECTED_OBJECT);
1180:       assertEquals(40, Node.ORIGINALNAME_PROP);
1181:       assertEquals(46, Node.IS_NAMESPACE);
1182:       assertEquals(37, Node.OPT_ARG_NAME);
1183:       assertEquals(49, Node.DIRECT_EVAL);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1187:       assertEquals(50, Node.FREE_CALL);
1188:       assertEquals(12, Node.COLUMN_BITS);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(32, Node.INCRDECR_PROP);
1191:       assertNotSame(node0, node2);
1192:       assertSame(node0, node3);
1193:       assertSame(node3, node0);
1194:       assertNotSame(node3, node2);
1195:       assertFalse(node0.isArrayLit());
1196:       assertEquals(155647, node0.getSourcePosition());
1197:       assertFalse(node0.isFor());
1198:       assertFalse(node0.isTrue());
1199:       assertFalse(node0.isNE());
1200:       assertFalse(node0.isVoid());
1201:       assertFalse(node0.isIf());
1202:       assertFalse(node0.isRegExp());
1203:       assertFalse(node0.isFunction());
1204:       assertFalse(node0.isDelProp());
1205:       assertEquals(0, node0.getChildCount());
1206:       assertFalse(node0.isIn());
1207:       assertEquals(40, node0.getType());
1208:       assertFalse(node0.isSetterDef());
1209:       assertFalse(node0.isDefaultCase());
1210:       assertFalse(node0.isEmpty());
1211:       assertFalse(node0.isInc());
1212:       assertFalse(node0.isVar());
1213:       assertFalse(node0.isStringKey());
1214:       assertFalse(node0.isHook());
1215:       assertFalse(node0.isBlock());
1216:       assertFalse(node0.isSwitch());
1217:       assertFalse(node0.isParamList());
1218:       assertFalse(node0.hasMoreThanOneChild());
1219:       assertFalse(node0.isCatch());
1220:       assertFalse(node0.isInstanceOf());
1221:       assertFalse(node0.isThis());
1222:       assertFalse(node0.isScript());
1223:       assertEquals(4095, node0.getCharno());
1224:       assertFalse(node0.isGetterDef());
1225:       assertFalse(node0.isNumber());
1226:       assertTrue(node0.isString());
1227:       assertFalse(node0.isTry());
1228:       assertFalse(node0.isCase());
1229:       assertFalse(node0.isCast());
1230:       assertFalse(node0.hasOneChild());
1231:       assertFalse(node0.isAssign());
1232:       assertFalse(node0.hasChildren());
1233:       assertFalse(node0.isDec());
1234:       assertFalse(node0.isTypeOf());
1235:       assertFalse(node0.isWith());
1236:       assertFalse(node0.isLabelName());
1237:       assertFalse(node0.isExprResult());
1238:       assertFalse(node0.isGetElem());
1239:       assertFalse(node0.isContinue());
1240:       assertFalse(node0.isOr());
1241:       assertFalse(node0.isAssignAdd());
1242:       assertFalse(node0.isLabel());
1243:       assertFalse(node0.isDo());
1244:       assertFalse(node0.isNew());
1245:       assertFalse(node0.isAdd());
1246:       assertFalse(node0.isName());
1247:       assertFalse(node0.isFalse());
1248:       assertFalse(node0.isThrow());
1249:       assertFalse(node0.isNull());
1250:       assertFalse(node0.isComma());
1251:       assertEquals(37, node0.getLineno());
1252:       assertFalse(node0.isBreak());
1253:       assertFalse(node0.isCall());
1254:       assertFalse(node0.isAnd());
1255:       assertFalse(node0.isObjectLit());
1256:       assertFalse(node0.isNot());
1257:       assertFalse(node0.isWhile());
1258:       assertFalse(node0.isReturn());
1259:       assertFalse(node0.isDebugger());
1260:       assertFalse(node0.isGetProp());
1261:       assertFalse(node1.isObjectLit());
1262:       assertFalse(node1.isNot());
1263:       assertFalse(node1.isNumber());
1264:       assertFalse(node1.isScript());
1265:       assertFalse(node1.isAssignAdd());
1266:       assertFalse(node1.isLabel());
1267:       assertFalse(node1.isFalse());
1268:       assertFalse(node1.isContinue());
1269:       assertFalse(node1.isAnd());
1270:       assertFalse(node1.isLabelName());
1271:       assertFalse(node1.isCast());
1272:       assertFalse(node1.isNew());
1273:       assertFalse(node1.isWhile());
1274:       assertFalse(node1.isVar());
1275:       assertFalse(node1.isDo());
1276:       assertFalse(node1.isString());
1277:       assertFalse(node1.isAdd());
1278:       assertFalse(node1.isGetProp());
1279:       assertFalse(node1.isComma());
1280:       assertFalse(node1.isOr());
1281:       assertFalse(node1.isTypeOf());
1282:       assertFalse(node1.isDec());
1283:       assertTrue(node1.hasOneChild());
1284:       assertFalse(node1.isReturn());
1285:       assertFalse(node1.isNull());
1286:       assertFalse(node1.isGetElem());
1287:       assertFalse(node1.isAssign());
1288:       assertFalse(node1.isDelProp());
1289:       assertFalse(node1.isName());
1290:       assertFalse(node1.isBreak());
1291:       assertFalse(node1.isExprResult());
1292:       assertFalse(node1.isCall());
1293:       assertFalse(node1.isDebugger());
1294:       assertFalse(node1.isFunction());
1295:       assertEquals(155647, node1.getSourcePosition());
1296:       assertFalse(node1.isRegExp());
1297:       assertFalse(node1.isVoid());
1298:       assertFalse(node1.isTry());
1299:       assertFalse(node1.isDefaultCase());
1300:       assertFalse(node1.isTrue());
1301:       assertFalse(node1.isGetterDef());
1302:       assertFalse(node1.isEmpty());
1303:       assertFalse(node1.isParamList());
1304:       assertFalse(node1.isStringKey());
1305:       assertEquals(37, node1.getLineno());
1306:       assertFalse(node1.isArrayLit());
1307:       assertFalse(node1.isSwitch());
1308:       assertEquals(4095, node1.getCharno());
1309:       assertFalse(node1.isHook());
1310:       assertFalse(node1.isBlock());
1311:       assertFalse(node1.isThrow());
1312:       assertFalse(node1.isCase());
1313:       assertFalse(node1.isIn());
1314:       assertFalse(node1.isSetterDef());
1315:       assertFalse(node1.isInc());
1316:       assertFalse(node1.isIf());
1317:       assertEquals(1, node1.getChildCount());
1318:       assertFalse(node1.isThis());
1319:       assertFalse(node1.isNE());
1320:       assertFalse(node1.isFor());
1321:       assertFalse(node1.isWith());
1322:       assertFalse(node1.hasMoreThanOneChild());
1323:       assertFalse(node1.isInstanceOf());
1324:       assertFalse(node1.isCatch());
1325:       assertEquals((-2145), node1.getType());
1326:       assertTrue(node1.hasChildren());
1327:       assertEquals(4095, node3.getCharno());
1328:       assertFalse(node3.isSwitch());
1329:       assertFalse(node3.isHook());
1330:       assertFalse(node3.isFalse());
1331:       assertFalse(node3.isBreak());
1332:       assertFalse(node3.isNE());
1333:       assertFalse(node3.isIf());
1334:       assertFalse(node3.isThrow());
1335:       assertFalse(node3.isIn());
1336:       assertFalse(node3.isEmpty());
1337:       assertFalse(node3.isInc());
1338:       assertFalse(node3.isExprResult());
1339:       assertFalse(node3.isVoid());
1340:       assertFalse(node3.isTrue());
1341:       assertFalse(node3.isDebugger());
1342:       assertFalse(node3.isFunction());
1343:       assertEquals(40, node3.getType());
1344:       assertFalse(node3.isAnd());
1345:       assertFalse(node3.isCast());
1346:       assertFalse(node3.isDelProp());
1347:       assertFalse(node3.isGetElem());
1348:       assertFalse(node3.isComma());
1349:       assertFalse(node3.isTypeOf());
1350:       assertFalse(node3.hasChildren());
1351:       assertFalse(node3.isAssign());
1352:       assertFalse(node3.isDec());
1353:       assertFalse(node3.isReturn());
1354:       assertFalse(node3.isObjectLit());
1355:       assertFalse(node3.isNot());
1356:       assertFalse(node3.isGetProp());
1357:       assertFalse(node3.isNew());
1358:       assertTrue(node3.isString());
1359:       assertFalse(node3.isWhile());
1360:       assertFalse(node3.isVar());
1361:       assertFalse(node3.isBlock());
1362:       assertFalse(node3.isCall());
1363:       assertFalse(node3.isContinue());
1364:       assertFalse(node3.isStringKey());
1365:       assertFalse(node3.isName());
1366:       assertFalse(node3.hasMoreThanOneChild());
1367:       assertEquals(37, node3.getLineno());
1368:       assertFalse(node3.isAssignAdd());
1369:       assertEquals(0, node3.getChildCount());
1370:       assertFalse(node3.isOr());
1371:       assertFalse(node3.isLabel());
1372:       assertFalse(node3.isNull());
1373:       assertFalse(node3.isDo());
1374:       assertFalse(node3.isAdd());
1375:       assertFalse(node3.isSetterDef());
1376:       assertFalse(node3.isRegExp());
1377:       assertFalse(node3.isTry());
1378:       assertFalse(node3.isDefaultCase());
1379:       assertFalse(node3.isCatch());
1380:       assertFalse(node3.isLabelName());
1381:       assertFalse(node3.isWith());
1382:       assertFalse(node3.isInstanceOf());
1383:       assertFalse(node3.isArrayLit());
1384:       assertFalse(node3.isParamList());
1385:       assertFalse(node3.isNumber());
1386:       assertFalse(node3.isGetterDef());
1387:       assertFalse(node3.isFor());
1388:       assertFalse(node3.isThis());
1389:       assertEquals(155647, node3.getSourcePosition());
1390:       assertFalse(node3.hasOneChild());
1391:       assertFalse(node3.isScript());
1392:       assertFalse(node3.isCase());
1393:       
1394:       Node node4 = node3.cloneTree();
1395:       assertFalse(node0.equals((Object)node1));
1396:       assertFalse(node0.equals((Object)node2));
1397:       assertFalse(node1.equals((Object)node2));
1398:       assertFalse(node1.equals((Object)node3));
1399:       assertFalse(node1.equals((Object)node0));
1400:       assertFalse(node3.equals((Object)node2));
1401:       assertFalse(node3.equals((Object)node1));
1402:       assertFalse(node4.equals((Object)node0));
1403:       assertFalse(node4.equals((Object)node2));
1404:       assertFalse(node4.equals((Object)node3));
1405:       assertFalse(node4.equals((Object)node1));
1406:       assertEquals(52, Node.LENGTH);
1407:       assertEquals(57, Node.REFLECTED_OBJECT);
1408:       assertEquals(54, Node.SLASH_V);
1409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1410:       assertEquals(50, Node.FREE_CALL);
1411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1412:       assertEquals(40, Node.ORIGINALNAME_PROP);
1413:       assertEquals(48, Node.DIRECTIVES);
1414:       assertEquals(49, Node.DIRECT_EVAL);
1415:       assertEquals(55, Node.INFERRED_FUNCTION);
1416:       assertEquals(8, Node.FLAG_NO_THROWS);
1417:       assertEquals(2, Node.POST_FLAG);
1418:       assertEquals(30, Node.VAR_ARGS_NAME);
1419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(47, Node.IS_DISPATCHER);
1423:       assertEquals(29, Node.JSDOC_INFO_PROP);
1424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1426:       assertEquals(39, Node.EMPTY_BLOCK);
1427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1428:       assertEquals(53, Node.INPUT_ID);
1429:       assertEquals(36, Node.QUOTED_PROP);
1430:       assertEquals(43, Node.IS_CONSTANT_NAME);
1431:       assertEquals(56, Node.CHANGE_TIME);
1432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1433:       assertEquals(37, Node.OPT_ARG_NAME);
1434:       assertEquals(32, Node.INCRDECR_PROP);
1435:       assertEquals(46, Node.IS_NAMESPACE);
1436:       assertEquals(12, Node.COLUMN_BITS);
1437:       assertEquals(4095, Node.COLUMN_MASK);
1438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1440:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1441:       assertEquals(1, Node.DECR_FLAG);
1442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1443:       assertEquals(57, Node.LAST_PROP);
1444:       assertEquals(54, Node.SLASH_V);
1445:       assertEquals(52, Node.LENGTH);
1446:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1447:       assertEquals(30, Node.VAR_ARGS_NAME);
1448:       assertEquals(12, Node.COLUMN_BITS);
1449:       assertEquals(32, Node.INCRDECR_PROP);
1450:       assertEquals(1, Node.DECR_FLAG);
1451:       assertEquals(2, Node.POST_FLAG);
1452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1453:       assertEquals(47, Node.IS_DISPATCHER);
1454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1455:       assertEquals(50, Node.FREE_CALL);
1456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1457:       assertEquals(40, Node.ORIGINALNAME_PROP);
1458:       assertEquals(46, Node.IS_NAMESPACE);
1459:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1460:       assertEquals(43, Node.IS_CONSTANT_NAME);
1461:       assertEquals(36, Node.QUOTED_PROP);
1462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1463:       assertEquals(55, Node.INFERRED_FUNCTION);
1464:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1465:       assertEquals(29, Node.JSDOC_INFO_PROP);
1466:       assertEquals(53, Node.INPUT_ID);
1467:       assertEquals(8, Node.FLAG_NO_THROWS);
1468:       assertEquals(39, Node.EMPTY_BLOCK);
1469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1470:       assertEquals(56, Node.CHANGE_TIME);
1471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1473:       assertEquals(4095, Node.COLUMN_MASK);
1474:       assertEquals(57, Node.REFLECTED_OBJECT);
1475:       assertEquals(49, Node.DIRECT_EVAL);
1476:       assertEquals(37, Node.OPT_ARG_NAME);
1477:       assertEquals(48, Node.DIRECTIVES);
1478:       assertEquals(43, Node.IS_CONSTANT_NAME);
1479:       assertEquals(36, Node.QUOTED_PROP);
1480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1481:       assertEquals(4095, Node.COLUMN_MASK);
1482:       assertEquals(48, Node.DIRECTIVES);
1483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1484:       assertEquals(56, Node.CHANGE_TIME);
1485:       assertEquals(47, Node.IS_DISPATCHER);
1486:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1487:       assertEquals(39, Node.EMPTY_BLOCK);
1488:       assertEquals(29, Node.JSDOC_INFO_PROP);
1489:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1490:       assertEquals(8, Node.FLAG_NO_THROWS);
1491:       assertEquals(2, Node.POST_FLAG);
1492:       assertEquals(55, Node.INFERRED_FUNCTION);
1493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1494:       assertEquals(53, Node.INPUT_ID);
1495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(54, Node.SLASH_V);
1498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1499:       assertEquals(30, Node.VAR_ARGS_NAME);
1500:       assertEquals(52, Node.LENGTH);
1501:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1502:       assertEquals(57, Node.REFLECTED_OBJECT);
1503:       assertEquals(40, Node.ORIGINALNAME_PROP);
1504:       assertEquals(46, Node.IS_NAMESPACE);
1505:       assertEquals(37, Node.OPT_ARG_NAME);
1506:       assertEquals(49, Node.DIRECT_EVAL);
1507:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1510:       assertEquals(50, Node.FREE_CALL);
1511:       assertEquals(12, Node.COLUMN_BITS);
1512:       assertEquals(1, Node.DECR_FLAG);
1513:       assertEquals(32, Node.INCRDECR_PROP);
1514:       assertEquals(52, Node.LENGTH);
1515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1516:       assertEquals(40, Node.ORIGINALNAME_PROP);
1517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1518:       assertEquals(49, Node.DIRECT_EVAL);
1519:       assertEquals(50, Node.FREE_CALL);
1520:       assertEquals(57, Node.REFLECTED_OBJECT);
1521:       assertEquals(46, Node.IS_NAMESPACE);
1522:       assertEquals(54, Node.SLASH_V);
1523:       assertEquals(55, Node.INFERRED_FUNCTION);
1524:       assertEquals(2, Node.POST_FLAG);
1525:       assertEquals(39, Node.EMPTY_BLOCK);
1526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1527:       assertEquals(8, Node.FLAG_NO_THROWS);
1528:       assertEquals(29, Node.JSDOC_INFO_PROP);
1529:       assertEquals(30, Node.VAR_ARGS_NAME);
1530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1531:       assertEquals(47, Node.IS_DISPATCHER);
1532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1533:       assertEquals(57, Node.LAST_PROP);
1534:       assertEquals(53, Node.INPUT_ID);
1535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1537:       assertEquals(36, Node.QUOTED_PROP);
1538:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1539:       assertEquals(43, Node.IS_CONSTANT_NAME);
1540:       assertEquals(56, Node.CHANGE_TIME);
1541:       assertEquals(32, Node.INCRDECR_PROP);
1542:       assertEquals(48, Node.DIRECTIVES);
1543:       assertEquals(37, Node.OPT_ARG_NAME);
1544:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1546:       assertEquals(4095, Node.COLUMN_MASK);
1547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1548:       assertEquals(1, Node.DECR_FLAG);
1549:       assertEquals(12, Node.COLUMN_BITS);
1550:       assertNotSame(node0, node4);
1551:       assertNotSame(node0, node2);
1552:       assertSame(node0, node3);
1553:       assertSame(node3, node0);
1554:       assertNotSame(node3, node2);
1555:       assertNotSame(node3, node4);
1556:       assertNotSame(node4, node0);
1557:       assertNotSame(node4, node2);
1558:       assertNotSame(node4, node3);
1559:       assertFalse(node0.isArrayLit());
1560:       assertEquals(155647, node0.getSourcePosition());
1561:       assertFalse(node0.isFor());
1562:       assertFalse(node0.isTrue());
1563:       assertFalse(node0.isNE());
1564:       assertFalse(node0.isVoid());
1565:       assertFalse(node0.isIf());
1566:       assertFalse(node0.isRegExp());
1567:       assertFalse(node0.isFunction());
1568:       assertFalse(node0.isDelProp());
1569:       assertEquals(0, node0.getChildCount());
1570:       assertFalse(node0.isIn());
1571:       assertEquals(40, node0.getType());
1572:       assertFalse(node0.isSetterDef());
1573:       assertFalse(node0.isDefaultCase());
1574:       assertFalse(node0.isEmpty());
1575:       assertFalse(node0.isInc());
1576:       assertFalse(node0.isVar());
1577:       assertFalse(node0.isStringKey());
1578:       assertFalse(node0.isHook());
1579:       assertFalse(node0.isBlock());
1580:       assertFalse(node0.isSwitch());
1581:       assertFalse(node0.isParamList());
1582:       assertFalse(node0.hasMoreThanOneChild());
1583:       assertFalse(node0.isCatch());
1584:       assertFalse(node0.isInstanceOf());
1585:       assertFalse(node0.isThis());
1586:       assertFalse(node0.isScript());
1587:       assertEquals(4095, node0.getCharno());
1588:       assertFalse(node0.isGetterDef());
1589:       assertFalse(node0.isNumber());
1590:       assertTrue(node0.isString());
1591:       assertFalse(node0.isTry());
1592:       assertFalse(node0.isCase());
1593:       assertFalse(node0.isCast());
1594:       assertFalse(node0.hasOneChild());
1595:       assertFalse(node0.isAssign());
1596:       assertFalse(node0.hasChildren());
1597:       assertFalse(node0.isDec());
1598:       assertFalse(node0.isTypeOf());
1599:       assertFalse(node0.isWith());
1600:       assertFalse(node0.isLabelName());
1601:       assertFalse(node0.isExprResult());
1602:       assertFalse(node0.isGetElem());
1603:       assertFalse(node0.isContinue());
1604:       assertFalse(node0.isOr());
1605:       assertFalse(node0.isAssignAdd());
1606:       assertFalse(node0.isLabel());
1607:       assertFalse(node0.isDo());
1608:       assertFalse(node0.isNew());
1609:       assertFalse(node0.isAdd());
1610:       assertFalse(node0.isName());
1611:       assertFalse(node0.isFalse());
1612:       assertFalse(node0.isThrow());
1613:       assertFalse(node0.isNull());
1614:       assertFalse(node0.isComma());
1615:       assertEquals(37, node0.getLineno());
1616:       assertFalse(node0.isBreak());
1617:       assertFalse(node0.isCall());
1618:       assertFalse(node0.isAnd());
1619:       assertFalse(node0.isObjectLit());
1620:       assertFalse(node0.isNot());
1621:       assertFalse(node0.isWhile());
1622:       assertFalse(node0.isReturn());
1623:       assertFalse(node0.isDebugger());
1624:       assertFalse(node0.isGetProp());
1625:       assertFalse(node1.isObjectLit());
1626:       assertFalse(node1.isNot());
1627:       assertFalse(node1.isNumber());
1628:       assertFalse(node1.isScript());
1629:       assertFalse(node1.isAssignAdd());
1630:       assertFalse(node1.isLabel());
1631:       assertFalse(node1.isFalse());
1632:       assertFalse(node1.isContinue());
1633:       assertFalse(node1.isAnd());
1634:       assertFalse(node1.isLabelName());
1635:       assertFalse(node1.isCast());
1636:       assertFalse(node1.isNew());
1637:       assertFalse(node1.isWhile());
1638:       assertFalse(node1.isVar());
1639:       assertFalse(node1.isDo());
1640:       assertFalse(node1.isString());
1641:       assertFalse(node1.isAdd());
1642:       assertFalse(node1.isGetProp());
1643:       assertFalse(node1.isComma());
1644:       assertFalse(node1.isOr());
1645:       assertFalse(node1.isTypeOf());
1646:       assertFalse(node1.isDec());
1647:       assertTrue(node1.hasOneChild());
1648:       assertFalse(node1.isReturn());
1649:       assertFalse(node1.isNull());
1650:       assertFalse(node1.isGetElem());
1651:       assertFalse(node1.isAssign());
1652:       assertFalse(node1.isDelProp());
1653:       assertFalse(node1.isName());
1654:       assertFalse(node1.isBreak());
1655:       assertFalse(node1.isExprResult());
1656:       assertFalse(node1.isCall());
1657:       assertFalse(node1.isDebugger());
1658:       assertFalse(node1.isFunction());
1659:       assertEquals(155647, node1.getSourcePosition());
1660:       assertFalse(node1.isRegExp());
1661:       assertFalse(node1.isVoid());
1662:       assertFalse(node1.isTry());
1663:       assertFalse(node1.isDefaultCase());
1664:       assertFalse(node1.isTrue());
1665:       assertFalse(node1.isGetterDef());
1666:       assertFalse(node1.isEmpty());
1667:       assertFalse(node1.isParamList());
1668:       assertFalse(node1.isStringKey());
1669:       assertEquals(37, node1.getLineno());
1670:       assertFalse(node1.isArrayLit());
1671:       assertFalse(node1.isSwitch());
1672:       assertEquals(4095, node1.getCharno());
1673:       assertFalse(node1.isHook());
1674:       assertFalse(node1.isBlock());
1675:       assertFalse(node1.isThrow());
1676:       assertFalse(node1.isCase());
1677:       assertFalse(node1.isIn());
1678:       assertFalse(node1.isSetterDef());
1679:       assertFalse(node1.isInc());
1680:       assertFalse(node1.isIf());
1681:       assertEquals(1, node1.getChildCount());
1682:       assertFalse(node1.isThis());
1683:       assertFalse(node1.isNE());
1684:       assertFalse(node1.isFor());
1685:       assertFalse(node1.isWith());
1686:       assertFalse(node1.hasMoreThanOneChild());
1687:       assertFalse(node1.isInstanceOf());
1688:       assertFalse(node1.isCatch());
1689:       assertEquals((-2145), node1.getType());
1690:       assertTrue(node1.hasChildren());
1691:       assertEquals(4095, node3.getCharno());
1692:       assertFalse(node3.isSwitch());
1693:       assertFalse(node3.isHook());
1694:       assertFalse(node3.isFalse());
1695:       assertFalse(node3.isBreak());
1696:       assertFalse(node3.isNE());
1697:       assertFalse(node3.isIf());
1698:       assertFalse(node3.isThrow());
1699:       assertFalse(node3.isIn());
1700:       assertFalse(node3.isEmpty());
1701:       assertFalse(node3.isInc());
1702:       assertFalse(node3.isExprResult());
1703:       assertFalse(node3.isVoid());
1704:       assertFalse(node3.isTrue());
1705:       assertFalse(node3.isDebugger());
1706:       assertFalse(node3.isFunction());
1707:       assertEquals(40, node3.getType());
1708:       assertFalse(node3.isAnd());
1709:       assertFalse(node3.isCast());
1710:       assertFalse(node3.isDelProp());
1711:       assertFalse(node3.isGetElem());
1712:       assertFalse(node3.isComma());
1713:       assertFalse(node3.isTypeOf());
1714:       assertFalse(node3.hasChildren());
1715:       assertFalse(node3.isAssign());
1716:       assertFalse(node3.isDec());
1717:       assertFalse(node3.isReturn());
1718:       assertFalse(node3.isObjectLit());
1719:       assertFalse(node3.isNot());
1720:       assertFalse(node3.isGetProp());
1721:       assertFalse(node3.isNew());
1722:       assertTrue(node3.isString());
1723:       assertFalse(node3.isWhile());
1724:       assertFalse(node3.isVar());
1725:       assertFalse(node3.isBlock());
1726:       assertFalse(node3.isCall());
1727:       assertFalse(node3.isContinue());
1728:       assertFalse(node3.isStringKey());
1729:       assertFalse(node3.isName());
1730:       assertFalse(node3.hasMoreThanOneChild());
1731:       assertEquals(37, node3.getLineno());
1732:       assertFalse(node3.isAssignAdd());
1733:       assertEquals(0, node3.getChildCount());
1734:       assertFalse(node3.isOr());
1735:       assertFalse(node3.isLabel());
1736:       assertFalse(node3.isNull());
1737:       assertFalse(node3.isDo());
1738:       assertFalse(node3.isAdd());
1739:       assertFalse(node3.isSetterDef());
1740:       assertFalse(node3.isRegExp());
1741:       assertFalse(node3.isTry());
1742:       assertFalse(node3.isDefaultCase());
1743:       assertFalse(node3.isCatch());
1744:       assertFalse(node3.isLabelName());
1745:       assertFalse(node3.isWith());
1746:       assertFalse(node3.isInstanceOf());
1747:       assertFalse(node3.isArrayLit());
1748:       assertFalse(node3.isParamList());
1749:       assertFalse(node3.isNumber());
1750:       assertFalse(node3.isGetterDef());
1751:       assertFalse(node3.isFor());
1752:       assertFalse(node3.isThis());
1753:       assertEquals(155647, node3.getSourcePosition());
1754:       assertFalse(node3.hasOneChild());
1755:       assertFalse(node3.isScript());
1756:       assertFalse(node3.isCase());
1757:       assertFalse(node4.isArrayLit());
1758:       assertFalse(node4.isFunction());
1759:       assertFalse(node4.isDebugger());
1760:       assertFalse(node4.isGetterDef());
1761:       assertFalse(node4.isRegExp());
1762:       assertFalse(node4.isIf());
1763:       assertFalse(node4.isTrue());
1764:       assertFalse(node4.isNE());
1765:       assertFalse(node4.isVoid());
1766:       assertFalse(node4.isDelProp());
1767:       assertFalse(node4.isIn());
1768:       assertEquals(40, node4.getType());
1769:       assertEquals(0, node4.getChildCount());
1770:       assertFalse(node4.isDefaultCase());
1771:       assertFalse(node4.isSetterDef());
1772:       assertFalse(node4.isInc());
1773:       assertFalse(node4.isEmpty());
1774:       assertFalse(node4.isHook());
1775:       assertFalse(node4.isVar());
1776:       assertFalse(node4.isBlock());
1777:       assertEquals(4095, node4.getCharno());
1778:       assertFalse(node4.isSwitch());
1779:       assertFalse(node4.isParamList());
1780:       assertFalse(node4.isStringKey());
1781:       assertFalse(node4.isInstanceOf());
1782:       assertFalse(node4.hasMoreThanOneChild());
1783:       assertFalse(node4.isCatch());
1784:       assertFalse(node4.isWith());
1785:       assertFalse(node4.isNumber());
1786:       assertFalse(node4.isThis());
1787:       assertFalse(node4.isScript());
1788:       assertFalse(node4.isFor());
1789:       assertFalse(node4.isCase());
1790:       assertTrue(node4.isString());
1791:       assertEquals(155647, node4.getSourcePosition());
1792:       assertFalse(node4.isTry());
1793:       assertFalse(node4.hasOneChild());
1794:       assertFalse(node4.isCast());
1795:       assertFalse(node4.isAssign());
1796:       assertFalse(node4.isTypeOf());
1797:       assertFalse(node4.isExprResult());
1798:       assertFalse(node4.isGetElem());
1799:       assertFalse(node4.isAnd());
1800:       assertFalse(node4.isLabelName());
1801:       assertFalse(node4.isLabel());
1802:       assertFalse(node4.isContinue());
1803:       assertFalse(node4.isOr());
1804:       assertFalse(node4.isNew());
1805:       assertFalse(node4.isAssignAdd());
1806:       assertFalse(node4.isDo());
1807:       assertFalse(node4.isCall());
1808:       assertFalse(node4.isAdd());
1809:       assertFalse(node4.isThrow());
1810:       assertFalse(node4.isFalse());
1811:       assertEquals(37, node4.getLineno());
1812:       assertFalse(node4.isNull());
1813:       assertFalse(node4.isBreak());
1814:       assertFalse(node4.isName());
1815:       assertFalse(node4.isReturn());
1816:       assertFalse(node4.isComma());
1817:       assertFalse(node4.isObjectLit());
1818:       assertFalse(node4.isNot());
1819:       assertFalse(node4.isDec());
1820:       assertFalse(node4.hasChildren());
1821:       assertFalse(node4.isWhile());
1822:       assertFalse(node4.isGetProp());
1823:       
1824:       String string1 = node3.getString();
1825:       assertFalse(node0.equals((Object)node1));
1826:       assertFalse(node0.equals((Object)node4));
1827:       assertFalse(node0.equals((Object)node2));
1828:       assertFalse(node1.equals((Object)node2));
1829:       assertFalse(node1.equals((Object)node3));
1830:       assertFalse(node1.equals((Object)node4));
1831:       assertFalse(node1.equals((Object)node0));
1832:       assertFalse(node3.equals((Object)node2));
1833:       assertFalse(node3.equals((Object)node4));
1834:       assertFalse(node3.equals((Object)node1));
1835:       assertFalse(string1.equals((Object)string0));
1836:       assertEquals(52, Node.LENGTH);
1837:       assertEquals(57, Node.REFLECTED_OBJECT);
1838:       assertEquals(54, Node.SLASH_V);
1839:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1840:       assertEquals(50, Node.FREE_CALL);
1841:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1842:       assertEquals(40, Node.ORIGINALNAME_PROP);
1843:       assertEquals(48, Node.DIRECTIVES);
1844:       assertEquals(49, Node.DIRECT_EVAL);
1845:       assertEquals(55, Node.INFERRED_FUNCTION);
1846:       assertEquals(8, Node.FLAG_NO_THROWS);
1847:       assertEquals(2, Node.POST_FLAG);
1848:       assertEquals(30, Node.VAR_ARGS_NAME);
1849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1851:       assertEquals(57, Node.LAST_PROP);
1852:       assertEquals(47, Node.IS_DISPATCHER);
1853:       assertEquals(29, Node.JSDOC_INFO_PROP);
1854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1856:       assertEquals(39, Node.EMPTY_BLOCK);
1857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1858:       assertEquals(53, Node.INPUT_ID);
1859:       assertEquals(36, Node.QUOTED_PROP);
1860:       assertEquals(43, Node.IS_CONSTANT_NAME);
1861:       assertEquals(56, Node.CHANGE_TIME);
1862:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1863:       assertEquals(37, Node.OPT_ARG_NAME);
1864:       assertEquals(32, Node.INCRDECR_PROP);
1865:       assertEquals(46, Node.IS_NAMESPACE);
1866:       assertEquals(12, Node.COLUMN_BITS);
1867:       assertEquals(4095, Node.COLUMN_MASK);
1868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1870:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1871:       assertEquals(1, Node.DECR_FLAG);
1872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1873:       assertEquals(57, Node.LAST_PROP);
1874:       assertEquals(54, Node.SLASH_V);
1875:       assertEquals(52, Node.LENGTH);
1876:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1877:       assertEquals(30, Node.VAR_ARGS_NAME);
1878:       assertEquals(12, Node.COLUMN_BITS);
1879:       assertEquals(32, Node.INCRDECR_PROP);
1880:       assertEquals(1, Node.DECR_FLAG);
1881:       assertEquals(2, Node.POST_FLAG);
1882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1883:       assertEquals(47, Node.IS_DISPATCHER);
1884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1885:       assertEquals(50, Node.FREE_CALL);
1886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1887:       assertEquals(40, Node.ORIGINALNAME_PROP);
1888:       assertEquals(46, Node.IS_NAMESPACE);
1889:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1890:       assertEquals(43, Node.IS_CONSTANT_NAME);
1891:       assertEquals(36, Node.QUOTED_PROP);
1892:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1893:       assertEquals(55, Node.INFERRED_FUNCTION);
1894:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1895:       assertEquals(29, Node.JSDOC_INFO_PROP);
1896:       assertEquals(53, Node.INPUT_ID);
1897:       assertEquals(8, Node.FLAG_NO_THROWS);
1898:       assertEquals(39, Node.EMPTY_BLOCK);
1899:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1900:       assertEquals(56, Node.CHANGE_TIME);
1901:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1902:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1903:       assertEquals(4095, Node.COLUMN_MASK);
1904:       assertEquals(57, Node.REFLECTED_OBJECT);
1905:       assertEquals(49, Node.DIRECT_EVAL);
1906:       assertEquals(37, Node.OPT_ARG_NAME);
1907:       assertEquals(48, Node.DIRECTIVES);
1908:       assertEquals(43, Node.IS_CONSTANT_NAME);
1909:       assertEquals(36, Node.QUOTED_PROP);
1910:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1911:       assertEquals(4095, Node.COLUMN_MASK);
1912:       assertEquals(48, Node.DIRECTIVES);
1913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1914:       assertEquals(56, Node.CHANGE_TIME);
1915:       assertEquals(47, Node.IS_DISPATCHER);
1916:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1917:       assertEquals(39, Node.EMPTY_BLOCK);
1918:       assertEquals(29, Node.JSDOC_INFO_PROP);
1919:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1920:       assertEquals(8, Node.FLAG_NO_THROWS);
1921:       assertEquals(2, Node.POST_FLAG);
1922:       assertEquals(55, Node.INFERRED_FUNCTION);
1923:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1924:       assertEquals(53, Node.INPUT_ID);
1925:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1926:       assertEquals(57, Node.LAST_PROP);
1927:       assertEquals(54, Node.SLASH_V);
1928:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1929:       assertEquals(30, Node.VAR_ARGS_NAME);
1930:       assertEquals(52, Node.LENGTH);
1931:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1932:       assertEquals(57, Node.REFLECTED_OBJECT);
1933:       assertEquals(40, Node.ORIGINALNAME_PROP);
1934:       assertEquals(46, Node.IS_NAMESPACE);
1935:       assertEquals(37, Node.OPT_ARG_NAME);
1936:       assertEquals(49, Node.DIRECT_EVAL);
1937:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1938:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1940:       assertEquals(50, Node.FREE_CALL);
1941:       assertEquals(12, Node.COLUMN_BITS);
1942:       assertEquals(1, Node.DECR_FLAG);
1943:       assertEquals(32, Node.INCRDECR_PROP);
1944:       assertEquals("(|", string1);
1945:       assertNotSame(node0, node4);
1946:       assertNotSame(node0, node2);
1947:       assertSame(node0, node3);
1948:       assertSame(node3, node0);
1949:       assertNotSame(node3, node2);
1950:       assertNotSame(node3, node4);
1951:       assertFalse(node0.isArrayLit());
1952:       assertEquals(155647, node0.getSourcePosition());
1953:       assertFalse(node0.isFor());
1954:       assertFalse(node0.isTrue());
1955:       assertFalse(node0.isNE());
1956:       assertFalse(node0.isVoid());
1957:       assertFalse(node0.isIf());
1958:       assertFalse(node0.isRegExp());
1959:       assertFalse(node0.isFunction());
1960:       assertFalse(node0.isDelProp());
1961:       assertEquals(0, node0.getChildCount());
1962:       assertFalse(node0.isIn());
1963:       assertEquals(40, node0.getType());
1964:       assertFalse(node0.isSetterDef());
1965:       assertFalse(node0.isDefaultCase());
1966:       assertFalse(node0.isEmpty());
1967:       assertFalse(node0.isInc());
1968:       assertFalse(node0.isVar());
1969:       assertFalse(node0.isStringKey());
1970:       assertFalse(node0.isHook());
1971:       assertFalse(node0.isBlock());
1972:       assertFalse(node0.isSwitch());
1973:       assertFalse(node0.isParamList());
1974:       assertFalse(node0.hasMoreThanOneChild());
1975:       assertFalse(node0.isCatch());
1976:       assertFalse(node0.isInstanceOf());
1977:       assertFalse(node0.isThis());
1978:       assertFalse(node0.isScript());
1979:       assertEquals(4095, node0.getCharno());
1980:       assertFalse(node0.isGetterDef());
1981:       assertFalse(node0.isNumber());
1982:       assertTrue(node0.isString());
1983:       assertFalse(node0.isTry());
1984:       assertFalse(node0.isCase());
1985:       assertFalse(node0.isCast());
1986:       assertFalse(node0.hasOneChild());
1987:       assertFalse(node0.isAssign());
1988:       assertFalse(node0.hasChildren());
1989:       assertFalse(node0.isDec());
1990:       assertFalse(node0.isTypeOf());
1991:       assertFalse(node0.isWith());
1992:       assertFalse(node0.isLabelName());
1993:       assertFalse(node0.isExprResult());
1994:       assertFalse(node0.isGetElem());
1995:       assertFalse(node0.isContinue());
1996:       assertFalse(node0.isOr());
1997:       assertFalse(node0.isAssignAdd());
1998:       assertFalse(node0.isLabel());
1999:       assertFalse(node0.isDo());
2000:       assertFalse(node0.isNew());
2001:       assertFalse(node0.isAdd());
2002:       assertFalse(node0.isName());
2003:       assertFalse(node0.isFalse());
2004:       assertFalse(node0.isThrow());
2005:       assertFalse(node0.isNull());
2006:       assertFalse(node0.isComma());
2007:       assertEquals(37, node0.getLineno());
2008:       assertFalse(node0.isBreak());
2009:       assertFalse(node0.isCall());
2010:       assertFalse(node0.isAnd());
2011:       assertFalse(node0.isObjectLit());
2012:       assertFalse(node0.isNot());
2013:       assertFalse(node0.isWhile());
2014:       assertFalse(node0.isReturn());
2015:       assertFalse(node0.isDebugger());
2016:       assertFalse(node0.isGetProp());
2017:       assertFalse(node1.isObjectLit());
2018:       assertFalse(node1.isNot());
2019:       assertFalse(node1.isNumber());
2020:       assertFalse(node1.isScript());
2021:       assertFalse(node1.isAssignAdd());
2022:       assertFalse(node1.isLabel());
2023:       assertFalse(node1.isFalse());
2024:       assertFalse(node1.isContinue());
2025:       assertFalse(node1.isAnd());
2026:       assertFalse(node1.isLabelName());
2027:       assertFalse(node1.isCast());
2028:       assertFalse(node1.isNew());
2029:       assertFalse(node1.isWhile());
2030:       assertFalse(node1.isVar());
2031:       assertFalse(node1.isDo());
2032:       assertFalse(node1.isString());
2033:       assertFalse(node1.isAdd());
2034:       assertFalse(node1.isGetProp());
2035:       assertFalse(node1.isComma());
2036:       assertFalse(node1.isOr());
2037:       assertFalse(node1.isTypeOf());
2038:       assertFalse(node1.isDec());
2039:       assertTrue(node1.hasOneChild());
2040:       assertFalse(node1.isReturn());
2041:       assertFalse(node1.isNull());
2042:       assertFalse(node1.isGetElem());
2043:       assertFalse(node1.isAssign());
2044:       assertFalse(node1.isDelProp());
2045:       assertFalse(node1.isName());
2046:       assertFalse(node1.isBreak());
2047:       assertFalse(node1.isExprResult());
2048:       assertFalse(node1.isCall());
2049:       assertFalse(node1.isDebugger());
2050:       assertFalse(node1.isFunction());
2051:       assertEquals(155647, node1.getSourcePosition());
2052:       assertFalse(node1.isRegExp());
2053:       assertFalse(node1.isVoid());
2054:       assertFalse(node1.isTry());
2055:       assertFalse(node1.isDefaultCase());
2056:       assertFalse(node1.isTrue());
2057:       assertFalse(node1.isGetterDef());
2058:       assertFalse(node1.isEmpty());
2059:       assertFalse(node1.isParamList());
2060:       assertFalse(node1.isStringKey());
2061:       assertEquals(37, node1.getLineno());
2062:       assertFalse(node1.isArrayLit());
2063:       assertFalse(node1.isSwitch());
2064:       assertEquals(4095, node1.getCharno());
2065:       assertFalse(node1.isHook());
2066:       assertFalse(node1.isBlock());
2067:       assertFalse(node1.isThrow());
2068:       assertFalse(node1.isCase());
2069:       assertFalse(node1.isIn());
2070:       assertFalse(node1.isSetterDef());
2071:       assertFalse(node1.isInc());
2072:       assertFalse(node1.isIf());
2073:       assertEquals(1, node1.getChildCount());
2074:       assertFalse(node1.isThis());
2075:       assertFalse(node1.isNE());
2076:       assertFalse(node1.isFor());
2077:       assertFalse(node1.isWith());
2078:       assertFalse(node1.hasMoreThanOneChild());
2079:       assertFalse(node1.isInstanceOf());
2080:       assertFalse(node1.isCatch());
2081:       assertEquals((-2145), node1.getType());
2082:       assertTrue(node1.hasChildren());
2083:       assertEquals(4095, node3.getCharno());
2084:       assertFalse(node3.isSwitch());
2085:       assertFalse(node3.isHook());
2086:       assertFalse(node3.isFalse());
2087:       assertFalse(node3.isBreak());
2088:       assertFalse(node3.isNE());
2089:       assertFalse(node3.isIf());
2090:       assertFalse(node3.isThrow());
2091:       assertFalse(node3.isIn());
2092:       assertFalse(node3.isEmpty());
2093:       assertFalse(node3.isInc());
2094:       assertFalse(node3.isExprResult());
2095:       assertFalse(node3.isVoid());
2096:       assertFalse(node3.isTrue());
2097:       assertFalse(node3.isDebugger());
2098:       assertFalse(node3.isFunction());
2099:       assertEquals(40, node3.getType());
2100:       assertFalse(node3.isAnd());
2101:       assertFalse(node3.isCast());
2102:       assertFalse(node3.isDelProp());
2103:       assertFalse(node3.isGetElem());
2104:       assertFalse(node3.isComma());
2105:       assertFalse(node3.isTypeOf());
2106:       assertFalse(node3.hasChildren());
2107:       assertFalse(node3.isAssign());
2108:       assertFalse(node3.isDec());
2109:       assertFalse(node3.isReturn());
2110:       assertFalse(node3.isObjectLit());
2111:       assertFalse(node3.isNot());
2112:       assertFalse(node3.isGetProp());
2113:       assertFalse(node3.isNew());
2114:       assertTrue(node3.isString());
2115:       assertFalse(node3.isWhile());
2116:       assertFalse(node3.isVar());
2117:       assertFalse(node3.isBlock());
2118:       assertFalse(node3.isCall());
2119:       assertFalse(node3.isContinue());
2120:       assertFalse(node3.isStringKey());
2121:       assertFalse(node3.isName());
2122:       assertFalse(node3.hasMoreThanOneChild());
2123:       assertEquals(37, node3.getLineno());
2124:       assertFalse(node3.isAssignAdd());
2125:       assertEquals(0, node3.getChildCount());
2126:       assertFalse(node3.isOr());
2127:       assertFalse(node3.isLabel());
2128:       assertFalse(node3.isNull());
2129:       assertFalse(node3.isDo());
2130:       assertFalse(node3.isAdd());
2131:       assertFalse(node3.isSetterDef());
2132:       assertFalse(node3.isRegExp());
2133:       assertFalse(node3.isTry());
2134:       assertFalse(node3.isDefaultCase());
2135:       assertFalse(node3.isCatch());
2136:       assertFalse(node3.isLabelName());
2137:       assertFalse(node3.isWith());
2138:       assertFalse(node3.isInstanceOf());
2139:       assertFalse(node3.isArrayLit());
2140:       assertFalse(node3.isParamList());
2141:       assertFalse(node3.isNumber());
2142:       assertFalse(node3.isGetterDef());
2143:       assertFalse(node3.isFor());
2144:       assertFalse(node3.isThis());
2145:       assertEquals(155647, node3.getSourcePosition());
2146:       assertFalse(node3.hasOneChild());
2147:       assertFalse(node3.isScript());
2148:       assertFalse(node3.isCase());
2149:       
2150:       int int1 = Node.extractLineno(37);
2151:       assertTrue(int1 == int0);
2152:       assertEquals(0, int1);
2153:       
2154:       boolean boolean1 = node2.isLabel();
2155:       assertFalse(node2.equals((Object)node1));
2156:       assertFalse(node2.equals((Object)node3));
2157:       assertFalse(node2.equals((Object)node4));
2158:       assertFalse(node2.equals((Object)node0));
2159:       assertTrue(boolean1 == boolean0);
2160:       assertEquals(32, Node.INCRDECR_PROP);
2161:       assertEquals(46, Node.IS_NAMESPACE);
2162:       assertEquals(37, Node.OPT_ARG_NAME);
2163:       assertEquals(1, Node.DECR_FLAG);
2164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2165:       assertEquals(29, Node.JSDOC_INFO_PROP);
2166:       assertEquals(49, Node.DIRECT_EVAL);
2167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2168:       assertEquals(56, Node.CHANGE_TIME);
2169:       assertEquals(54, Node.SLASH_V);
2170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2171:       assertEquals(52, Node.LENGTH);
2172:       assertEquals(40, Node.ORIGINALNAME_PROP);
2173:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2174:       assertEquals(53, Node.INPUT_ID);
2175:       assertEquals(30, Node.VAR_ARGS_NAME);
2176:       assertEquals(57, Node.LAST_PROP);
2177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2178:       assertEquals(2, Node.POST_FLAG);
2179:       assertEquals(47, Node.IS_DISPATCHER);
2180:       assertEquals(4095, Node.COLUMN_MASK);
2181:       assertEquals(39, Node.EMPTY_BLOCK);
2182:       assertEquals(55, Node.INFERRED_FUNCTION);
2183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2184:       assertEquals(48, Node.DIRECTIVES);
2185:       assertEquals(50, Node.FREE_CALL);
2186:       assertEquals(43, Node.IS_CONSTANT_NAME);
2187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2188:       assertEquals(8, Node.FLAG_NO_THROWS);
2189:       assertEquals(36, Node.QUOTED_PROP);
2190:       assertEquals(57, Node.REFLECTED_OBJECT);
2191:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2192:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2194:       assertEquals(12, Node.COLUMN_BITS);
2195:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2196:       assertFalse(boolean1);
2197:       assertNotSame(node2, node3);
2198:       assertNotSame(node2, node4);
2199:       assertNotSame(node2, node0);
2200:       assertEquals(0, node2.getChildCount());
2201:       assertFalse(node2.isCatch());
2202:       assertFalse(node2.isNull());
2203:       assertFalse(node2.isTrue());
2204:       assertFalse(node2.isVoid());
2205:       assertFalse(node2.isDebugger());
2206:       assertFalse(node2.isName());
2207:       assertFalse(node2.isParamList());
2208:       assertFalse(node2.isStringKey());
2209:       assertFalse(node2.isVar());
2210:       assertFalse(node2.isArrayLit());
2211:       assertFalse(node2.isAdd());
2212:       assertFalse(node2.isEmpty());
2213:       assertFalse(node2.isFunction());
2214:       assertFalse(node2.isSetterDef());
2215:       assertFalse(node2.isNew());
2216:       assertFalse(node2.isDo());
2217:       assertEquals(40, node2.getType());
2218:       assertFalse(node2.isDefaultCase());
2219:       assertFalse(node2.hasMoreThanOneChild());
2220:       assertEquals((-1), node2.getLineno());
2221:       assertFalse(node2.isCase());
2222:       assertFalse(node2.isIn());
2223:       assertFalse(node2.isNE());
2224:       assertFalse(node2.isSwitch());
2225:       assertFalse(node2.isNumber());
2226:       assertFalse(node2.isGetterDef());
2227:       assertEquals((-1), node2.getCharno());
2228:       assertFalse(node2.isLabelName());
2229:       assertFalse(node2.isIf());
2230:       assertFalse(node2.isHook());
2231:       
2232:       node3.getAncestors();
2233:       assertFalse(node0.equals((Object)node1));
2234:       assertFalse(node0.equals((Object)node4));
2235:       assertFalse(node0.equals((Object)node2));
2236:       assertFalse(node1.equals((Object)node2));
2237:       assertFalse(node1.equals((Object)node3));
2238:       assertFalse(node1.equals((Object)node4));
2239:       assertFalse(node1.equals((Object)node0));
2240:       assertFalse(node3.equals((Object)node2));
2241:       assertFalse(node3.equals((Object)node4));
2242:       assertFalse(node3.equals((Object)node1));
2243:       assertEquals(52, Node.LENGTH);
2244:       assertEquals(57, Node.REFLECTED_OBJECT);
2245:       assertEquals(54, Node.SLASH_V);
2246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2247:       assertEquals(50, Node.FREE_CALL);
2248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2249:       assertEquals(40, Node.ORIGINALNAME_PROP);
2250:       assertEquals(48, Node.DIRECTIVES);
2251:       assertEquals(49, Node.DIRECT_EVAL);
2252:       assertEquals(55, Node.INFERRED_FUNCTION);
2253:       assertEquals(8, Node.FLAG_NO_THROWS);
2254:       assertEquals(2, Node.POST_FLAG);
2255:       assertEquals(30, Node.VAR_ARGS_NAME);
2256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2258:       assertEquals(57, Node.LAST_PROP);
2259:       assertEquals(47, Node.IS_DISPATCHER);
2260:       assertEquals(29, Node.JSDOC_INFO_PROP);
2261:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2262:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2263:       assertEquals(39, Node.EMPTY_BLOCK);
2264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2265:       assertEquals(53, Node.INPUT_ID);
2266:       assertEquals(36, Node.QUOTED_PROP);
2267:       assertEquals(43, Node.IS_CONSTANT_NAME);
2268:       assertEquals(56, Node.CHANGE_TIME);
2269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2270:       assertEquals(37, Node.OPT_ARG_NAME);
2271:       assertEquals(32, Node.INCRDECR_PROP);
2272:       assertEquals(46, Node.IS_NAMESPACE);
2273:       assertEquals(12, Node.COLUMN_BITS);
2274:       assertEquals(4095, Node.COLUMN_MASK);
2275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2278:       assertEquals(1, Node.DECR_FLAG);
2279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2280:       assertEquals(57, Node.LAST_PROP);
2281:       assertEquals(54, Node.SLASH_V);
2282:       assertEquals(52, Node.LENGTH);
2283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2284:       assertEquals(30, Node.VAR_ARGS_NAME);
2285:       assertEquals(12, Node.COLUMN_BITS);
2286:       assertEquals(32, Node.INCRDECR_PROP);
2287:       assertEquals(1, Node.DECR_FLAG);
2288:       assertEquals(2, Node.POST_FLAG);
2289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2290:       assertEquals(47, Node.IS_DISPATCHER);
2291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2292:       assertEquals(50, Node.FREE_CALL);
2293:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2294:       assertEquals(40, Node.ORIGINALNAME_PROP);
2295:       assertEquals(46, Node.IS_NAMESPACE);
2296:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2297:       assertEquals(43, Node.IS_CONSTANT_NAME);
2298:       assertEquals(36, Node.QUOTED_PROP);
2299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2300:       assertEquals(55, Node.INFERRED_FUNCTION);
2301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2302:       assertEquals(29, Node.JSDOC_INFO_PROP);
2303:       assertEquals(53, Node.INPUT_ID);
2304:       assertEquals(8, Node.FLAG_NO_THROWS);
2305:       assertEquals(39, Node.EMPTY_BLOCK);
2306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2307:       assertEquals(56, Node.CHANGE_TIME);
2308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2310:       assertEquals(4095, Node.COLUMN_MASK);
2311:       assertEquals(57, Node.REFLECTED_OBJECT);
2312:       assertEquals(49, Node.DIRECT_EVAL);
2313:       assertEquals(37, Node.OPT_ARG_NAME);
2314:       assertEquals(48, Node.DIRECTIVES);
2315:       assertEquals(43, Node.IS_CONSTANT_NAME);
2316:       assertEquals(36, Node.QUOTED_PROP);
2317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2318:       assertEquals(4095, Node.COLUMN_MASK);
2319:       assertEquals(48, Node.DIRECTIVES);
2320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2321:       assertEquals(56, Node.CHANGE_TIME);
2322:       assertEquals(47, Node.IS_DISPATCHER);
2323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2324:       assertEquals(39, Node.EMPTY_BLOCK);
2325:       assertEquals(29, Node.JSDOC_INFO_PROP);
2326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2327:       assertEquals(8, Node.FLAG_NO_THROWS);
2328:       assertEquals(2, Node.POST_FLAG);
2329:       assertEquals(55, Node.INFERRED_FUNCTION);
2330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2331:       assertEquals(53, Node.INPUT_ID);
2332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2333:       assertEquals(57, Node.LAST_PROP);
2334:       assertEquals(54, Node.SLASH_V);
2335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2336:       assertEquals(30, Node.VAR_ARGS_NAME);
2337:       assertEquals(52, Node.LENGTH);
2338:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2339:       assertEquals(57, Node.REFLECTED_OBJECT);
2340:       assertEquals(40, Node.ORIGINALNAME_PROP);
2341:       assertEquals(46, Node.IS_NAMESPACE);
2342:       assertEquals(37, Node.OPT_ARG_NAME);
2343:       assertEquals(49, Node.DIRECT_EVAL);
2344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2347:       assertEquals(50, Node.FREE_CALL);
2348:       assertEquals(12, Node.COLUMN_BITS);
2349:       assertEquals(1, Node.DECR_FLAG);
2350:       assertEquals(32, Node.INCRDECR_PROP);
2351:       assertNotSame(node0, node4);
2352:       assertNotSame(node0, node2);
2353:       assertSame(node0, node3);
2354:       assertSame(node3, node0);
2355:       assertNotSame(node3, node2);
2356:       assertNotSame(node3, node4);
2357:       
2358:       Node node5 = node1.srcref(node2);
2359:       assertFalse(node0.equals((Object)node1));
2360:       assertFalse(node0.equals((Object)node4));
2361:       assertFalse(node0.equals((Object)node2));
2362:       assertFalse(node1.equals((Object)node2));
2363:       assertFalse(node1.equals((Object)node3));
2364:       assertFalse(node1.equals((Object)node4));
2365:       assertFalse(node1.equals((Object)node0));
2366:       assertFalse(node2.equals((Object)node1));
2367:       assertFalse(node2.equals((Object)node3));
2368:       assertFalse(node2.equals((Object)node4));
2369:       assertFalse(node2.equals((Object)node0));
2370:       assertFalse(node5.equals((Object)node0));
2371:       assertFalse(node5.equals((Object)node4));
2372:       assertFalse(node5.equals((Object)node3));
2373:       assertFalse(node5.equals((Object)node2));
2374:       assertEquals(52, Node.LENGTH);
2375:       assertEquals(57, Node.REFLECTED_OBJECT);
2376:       assertEquals(54, Node.SLASH_V);
2377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2378:       assertEquals(50, Node.FREE_CALL);
2379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2380:       assertEquals(40, Node.ORIGINALNAME_PROP);
2381:       assertEquals(48, Node.DIRECTIVES);
2382:       assertEquals(49, Node.DIRECT_EVAL);
2383:       assertEquals(55, Node.INFERRED_FUNCTION);
2384:       assertEquals(8, Node.FLAG_NO_THROWS);
2385:       assertEquals(2, Node.POST_FLAG);
2386:       assertEquals(30, Node.VAR_ARGS_NAME);
2387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2389:       assertEquals(57, Node.LAST_PROP);
2390:       assertEquals(47, Node.IS_DISPATCHER);
2391:       assertEquals(29, Node.JSDOC_INFO_PROP);
2392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2394:       assertEquals(39, Node.EMPTY_BLOCK);
2395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2396:       assertEquals(53, Node.INPUT_ID);
2397:       assertEquals(36, Node.QUOTED_PROP);
2398:       assertEquals(43, Node.IS_CONSTANT_NAME);
2399:       assertEquals(56, Node.CHANGE_TIME);
2400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2401:       assertEquals(37, Node.OPT_ARG_NAME);
2402:       assertEquals(32, Node.INCRDECR_PROP);
2403:       assertEquals(46, Node.IS_NAMESPACE);
2404:       assertEquals(12, Node.COLUMN_BITS);
2405:       assertEquals(4095, Node.COLUMN_MASK);
2406:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2409:       assertEquals(1, Node.DECR_FLAG);
2410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2411:       assertEquals(57, Node.LAST_PROP);
2412:       assertEquals(54, Node.SLASH_V);
2413:       assertEquals(52, Node.LENGTH);
2414:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2415:       assertEquals(30, Node.VAR_ARGS_NAME);
2416:       assertEquals(12, Node.COLUMN_BITS);
2417:       assertEquals(32, Node.INCRDECR_PROP);
2418:       assertEquals(1, Node.DECR_FLAG);
2419:       assertEquals(2, Node.POST_FLAG);
2420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2421:       assertEquals(47, Node.IS_DISPATCHER);
2422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2423:       assertEquals(50, Node.FREE_CALL);
2424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2425:       assertEquals(40, Node.ORIGINALNAME_PROP);
2426:       assertEquals(46, Node.IS_NAMESPACE);
2427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2428:       assertEquals(43, Node.IS_CONSTANT_NAME);
2429:       assertEquals(36, Node.QUOTED_PROP);
2430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2431:       assertEquals(55, Node.INFERRED_FUNCTION);
2432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2433:       assertEquals(29, Node.JSDOC_INFO_PROP);
2434:       assertEquals(53, Node.INPUT_ID);
2435:       assertEquals(8, Node.FLAG_NO_THROWS);
2436:       assertEquals(39, Node.EMPTY_BLOCK);
2437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2438:       assertEquals(56, Node.CHANGE_TIME);
2439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2441:       assertEquals(4095, Node.COLUMN_MASK);
2442:       assertEquals(57, Node.REFLECTED_OBJECT);
2443:       assertEquals(49, Node.DIRECT_EVAL);
2444:       assertEquals(37, Node.OPT_ARG_NAME);
2445:       assertEquals(48, Node.DIRECTIVES);
2446:       assertEquals(32, Node.INCRDECR_PROP);
2447:       assertEquals(46, Node.IS_NAMESPACE);
2448:       assertEquals(37, Node.OPT_ARG_NAME);
2449:       assertEquals(1, Node.DECR_FLAG);
2450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2451:       assertEquals(29, Node.JSDOC_INFO_PROP);
2452:       assertEquals(49, Node.DIRECT_EVAL);
2453:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2454:       assertEquals(56, Node.CHANGE_TIME);
2455:       assertEquals(54, Node.SLASH_V);
2456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2457:       assertEquals(52, Node.LENGTH);
2458:       assertEquals(40, Node.ORIGINALNAME_PROP);
2459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2460:       assertEquals(53, Node.INPUT_ID);
2461:       assertEquals(30, Node.VAR_ARGS_NAME);
2462:       assertEquals(57, Node.LAST_PROP);
2463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2464:       assertEquals(2, Node.POST_FLAG);
2465:       assertEquals(47, Node.IS_DISPATCHER);
2466:       assertEquals(4095, Node.COLUMN_MASK);
2467:       assertEquals(39, Node.EMPTY_BLOCK);
2468:       assertEquals(55, Node.INFERRED_FUNCTION);
2469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2470:       assertEquals(48, Node.DIRECTIVES);
2471:       assertEquals(50, Node.FREE_CALL);
2472:       assertEquals(43, Node.IS_CONSTANT_NAME);
2473:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2474:       assertEquals(8, Node.FLAG_NO_THROWS);
2475:       assertEquals(36, Node.QUOTED_PROP);
2476:       assertEquals(57, Node.REFLECTED_OBJECT);
2477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2478:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2480:       assertEquals(12, Node.COLUMN_BITS);
2481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2482:       assertEquals(4095, Node.COLUMN_MASK);
2483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2484:       assertEquals(55, Node.INFERRED_FUNCTION);
2485:       assertEquals(8, Node.FLAG_NO_THROWS);
2486:       assertEquals(48, Node.DIRECTIVES);
2487:       assertEquals(36, Node.QUOTED_PROP);
2488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2489:       assertEquals(43, Node.IS_CONSTANT_NAME);
2490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2491:       assertEquals(50, Node.FREE_CALL);
2492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2495:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2496:       assertEquals(12, Node.COLUMN_BITS);
2497:       assertEquals(32, Node.INCRDECR_PROP);
2498:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2499:       assertEquals(1, Node.DECR_FLAG);
2500:       assertEquals(37, Node.OPT_ARG_NAME);
2501:       assertEquals(49, Node.DIRECT_EVAL);
2502:       assertEquals(46, Node.IS_NAMESPACE);
2503:       assertEquals(54, Node.SLASH_V);
2504:       assertEquals(56, Node.CHANGE_TIME);
2505:       assertEquals(40, Node.ORIGINALNAME_PROP);
2506:       assertEquals(57, Node.REFLECTED_OBJECT);
2507:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2508:       assertEquals(29, Node.JSDOC_INFO_PROP);
2509:       assertEquals(52, Node.LENGTH);
2510:       assertEquals(53, Node.INPUT_ID);
2511:       assertEquals(2, Node.POST_FLAG);
2512:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2513:       assertEquals(39, Node.EMPTY_BLOCK);
2514:       assertEquals(47, Node.IS_DISPATCHER);
2515:       assertEquals(30, Node.VAR_ARGS_NAME);
2516:       assertEquals(57, Node.LAST_PROP);
2517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2518:       assertNotSame(node0, node4);
2519:       assertNotSame(node0, node2);
2520:       assertSame(node0, node3);
2521:       assertSame(node1, node5);
2522:       assertNotSame(node2, node3);
2523:       assertNotSame(node2, node4);
2524:       assertNotSame(node2, node0);
2525:       assertSame(node5, node1);
2526:       
2527:       Node node6 = null;
2528:       // Undeclared exception!
2529:       try { 
2530:         node2.addChildToFront((Node) null);
2531:         fail("Expecting exception: NullPointerException");
2532:       
2533:       } catch(NullPointerException e) {
2534:          //
2535:          // no message in exception (getMessage() returned null)
2536:          //
2537:          verifyException("com.google.javascript.rhino.Node", e);
2538:       }
2539:   }
2540: }
RegularFileObject[/tmp/EvoSuite_66_1629223359420/com/google/javascript/rhino/Node_66_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_66_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_66_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_66_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:40.187 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("(|", 254, 0);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(254, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isGetProp());

Iterable<Node> iterable0 = node0.children();
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(254, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isGetProp());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(254, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(37, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertTrue(node1.hasChildren());

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node2, node0);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isThrow());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotSame(node2, node0);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isThrow());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, int0);
assertNotSame(node0, node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(254, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(37, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertTrue(node1.hasChildren());

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean0);
assertNotSame(node0, node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(254, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(37, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertTrue(node1.hasChildren());

Node node3 = node0.useSourceInfoFrom(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node0.isArrayLit());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(37, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(37, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertTrue(node1.hasChildren());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isThrow());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(37, node3.getLineno());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isCase());

Node node4 = node3.cloneTree();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node4);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertNotSame(node4, node0);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertFalse(node0.isArrayLit());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(37, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(37, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertTrue(node1.hasChildren());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isThrow());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(37, node3.getLineno());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetterDef());
assertFalse(node4.isRegExp());
assertFalse(node4.isIf());
assertFalse(node4.isTrue());
assertFalse(node4.isNE());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());
assertFalse(node4.isIn());
assertEquals(40, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isEmpty());
assertFalse(node4.isHook());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertEquals(4095, node4.getCharno());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.isNumber());
assertFalse(node4.isThis());
assertFalse(node4.isScript());
assertFalse(node4.isFor());
assertFalse(node4.isCase());
assertTrue(node4.isString());
assertEquals(155647, node4.getSourcePosition());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isLabel());
assertFalse(node4.isContinue());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isCall());
assertFalse(node4.isAdd());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertEquals(37, node4.getLineno());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertFalse(node4.isGetProp());

String string1 = node3.getString();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(string1.equals((Object)string0));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals("(|", string1);
assertNotSame(node0, node4);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertFalse(node0.isArrayLit());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(37, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(37, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertTrue(node1.hasChildren());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isThrow());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(37, node3.getLineno());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isCase());

int int1 = Node.extractLineno(37);
assertTrue(int1 == int0);
assertEquals(0, int1);

boolean boolean1 = node2.isLabel();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean1);
assertNotSame(node2, node3);
assertNotSame(node2, node4);
assertNotSame(node2, node0);
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isHook());

node3.getAncestors();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node0, node4);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertSame(node3, node0);
assertNotSame(node3, node2);
assertNotSame(node3, node4);

Node node5 = node1.srcref(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node0, node4);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertSame(node1, node5);
assertNotSame(node2, node3);
assertNotSame(node2, node4);
assertNotSame(node2, node0);
assertSame(node5, node1);

Node node6 = null;
node2.addChildToFront((Node) null);

[MASTER] 18:02:43.432 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_74_1629223362971/com/google/javascript/rhino/Node_74_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_74_1629223362971/com/google/javascript/rhino/Node_74_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:43.432 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:43.432 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:43.433 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 161
[MASTER] 18:02:43.435 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_74_1629223362971/com/google/javascript/rhino/Node_74_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_74_tmp__ESTest extends Node_74_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(254, "(|");
21:       assertEquals(29, Node.JSDOC_INFO_PROP);
22:       assertEquals(47, Node.IS_DISPATCHER);
23:       assertEquals(56, Node.CHANGE_TIME);
24:       assertEquals(37, Node.OPT_ARG_NAME);
25:       assertEquals(2, Node.POST_FLAG);
26:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
27:       assertEquals(49, Node.DIRECT_EVAL);
28:       assertEquals(30, Node.VAR_ARGS_NAME);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(52, Node.LENGTH);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(8, Node.FLAG_NO_THROWS);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
41:       assertEquals(57, Node.REFLECTED_OBJECT);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(1, Node.DECR_FLAG);
49:       assertEquals(43, Node.IS_CONSTANT_NAME);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(32, Node.INCRDECR_PROP);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertFalse(node0.isSetterDef());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isName());
62:       assertEquals(0, node0.getChildCount());
63:       assertEquals(254, node0.getType());
64:       assertFalse(node0.isVar());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isBlock());
67:       assertFalse(node0.isCall());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isDo());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.hasChildren());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isReturn());
82:       assertFalse(node0.isContinue());
83:       assertFalse(node0.isAssign());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isWhile());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isDebugger());
90:       assertFalse(node0.isNot());
91:       assertFalse(node0.isObjectLit());
92:       assertFalse(node0.isBreak());
93:       assertFalse(node0.isThis());
94:       assertFalse(node0.isThrow());
95:       assertFalse(node0.isGetProp());
96:       assertFalse(node0.isInstanceOf());
97:       assertFalse(node0.isHook());
98:       assertFalse(node0.isFalse());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isExprResult());
102:       assertFalse(node0.isInc());
103:       assertFalse(node0.isIn());
104:       assertFalse(node0.isNumber());
105:       assertFalse(node0.isIf());
106:       assertFalse(node0.isNE());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isFor());
109:       assertFalse(node0.isAssignAdd());
110:       assertFalse(node0.isLabelName());
111:       assertEquals((-1), node0.getLineno());
112:       assertFalse(node0.isArrayLit());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.hasMoreThanOneChild());
115:       assertFalse(node0.isRegExp());
116:       assertFalse(node0.isScript());
117:       assertFalse(node0.isCase());
118:       assertFalse(node0.isSwitch());
119:       assertFalse(node0.isTry());
120:       assertFalse(node0.hasOneChild());
121:       assertEquals((-1), node0.getCharno());
122:       assertFalse(node0.isGetterDef());
123:       
124:       Iterable<Node> iterable0 = node0.children();
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(47, Node.IS_DISPATCHER);
127:       assertEquals(56, Node.CHANGE_TIME);
128:       assertEquals(37, Node.OPT_ARG_NAME);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
131:       assertEquals(49, Node.DIRECT_EVAL);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
136:       assertEquals(53, Node.INPUT_ID);
137:       assertEquals(52, Node.LENGTH);
138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:       assertEquals(55, Node.INFERRED_FUNCTION);
143:       assertEquals(50, Node.FREE_CALL);
144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(48, Node.DIRECTIVES);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(40, Node.ORIGINALNAME_PROP);
151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
152:       assertEquals(1, Node.DECR_FLAG);
153:       assertEquals(43, Node.IS_CONSTANT_NAME);
154:       assertEquals(51, Node.STATIC_SOURCE_FILE);
155:       assertEquals(12, Node.COLUMN_BITS);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(54, Node.SLASH_V);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertFalse(iterable0.contains(node0));
162:       assertFalse(node0.isSetterDef());
163:       assertFalse(node0.isNull());
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isName());
167:       assertEquals(0, node0.getChildCount());
168:       assertEquals(254, node0.getType());
169:       assertFalse(node0.isVar());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isBlock());
172:       assertFalse(node0.isCall());
173:       assertFalse(node0.isDefaultCase());
174:       assertFalse(node0.isTrue());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isDo());
177:       assertFalse(node0.isVoid());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isDec());
181:       assertFalse(node0.hasChildren());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isCast());
186:       assertFalse(node0.isReturn());
187:       assertFalse(node0.isContinue());
188:       assertFalse(node0.isAssign());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isString());
192:       assertFalse(node0.isWhile());
193:       assertFalse(node0.isAnd());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isObjectLit());
197:       assertFalse(node0.isBreak());
198:       assertFalse(node0.isThis());
199:       assertFalse(node0.isThrow());
200:       assertFalse(node0.isGetProp());
201:       assertFalse(node0.isInstanceOf());
202:       assertFalse(node0.isHook());
203:       assertFalse(node0.isFalse());
204:       assertFalse(node0.isWith());
205:       assertFalse(node0.isComma());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.isInc());
208:       assertFalse(node0.isIn());
209:       assertFalse(node0.isNumber());
210:       assertFalse(node0.isIf());
211:       assertFalse(node0.isNE());
212:       assertFalse(node0.isEmpty());
213:       assertFalse(node0.isFor());
214:       assertFalse(node0.isAssignAdd());
215:       assertFalse(node0.isLabelName());
216:       assertEquals((-1), node0.getLineno());
217:       assertFalse(node0.isArrayLit());
218:       assertFalse(node0.isLabel());
219:       assertFalse(node0.hasMoreThanOneChild());
220:       assertFalse(node0.isRegExp());
221:       assertFalse(node0.isScript());
222:       assertFalse(node0.isCase());
223:       assertFalse(node0.isSwitch());
224:       assertFalse(node0.isTry());
225:       assertFalse(node0.hasOneChild());
226:       assertEquals((-1), node0.getCharno());
227:       assertFalse(node0.isGetterDef());
228:       
229:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
230:       assertFalse(node1.equals((Object)node0));
231:       assertEquals(29, Node.JSDOC_INFO_PROP);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(56, Node.CHANGE_TIME);
234:       assertEquals(37, Node.OPT_ARG_NAME);
235:       assertEquals(2, Node.POST_FLAG);
236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
237:       assertEquals(49, Node.DIRECT_EVAL);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
242:       assertEquals(53, Node.INPUT_ID);
243:       assertEquals(52, Node.LENGTH);
244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
245:       assertEquals(8, Node.FLAG_NO_THROWS);
246:       assertEquals(39, Node.EMPTY_BLOCK);
247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
248:       assertEquals(55, Node.INFERRED_FUNCTION);
249:       assertEquals(50, Node.FREE_CALL);
250:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
251:       assertEquals(57, Node.REFLECTED_OBJECT);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
254:       assertEquals(48, Node.DIRECTIVES);
255:       assertEquals(4095, Node.COLUMN_MASK);
256:       assertEquals(40, Node.ORIGINALNAME_PROP);
257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
258:       assertEquals(1, Node.DECR_FLAG);
259:       assertEquals(43, Node.IS_CONSTANT_NAME);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(46, Node.IS_NAMESPACE);
263:       assertEquals(54, Node.SLASH_V);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(56, Node.CHANGE_TIME);
269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
270:       assertEquals(37, Node.OPT_ARG_NAME);
271:       assertEquals(32, Node.INCRDECR_PROP);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
274:       assertEquals(29, Node.JSDOC_INFO_PROP);
275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
276:       assertEquals(53, Node.INPUT_ID);
277:       assertEquals(52, Node.LENGTH);
278:       assertEquals(54, Node.SLASH_V);
279:       assertEquals(43, Node.IS_CONSTANT_NAME);
280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
281:       assertEquals(57, Node.LAST_PROP);
282:       assertEquals(40, Node.ORIGINALNAME_PROP);
283:       assertEquals(47, Node.IS_DISPATCHER);
284:       assertEquals(2, Node.POST_FLAG);
285:       assertEquals(30, Node.VAR_ARGS_NAME);
286:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
287:       assertEquals(39, Node.EMPTY_BLOCK);
288:       assertEquals(48, Node.DIRECTIVES);
289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
291:       assertEquals(55, Node.INFERRED_FUNCTION);
292:       assertEquals(36, Node.QUOTED_PROP);
293:       assertEquals(57, Node.REFLECTED_OBJECT);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(50, Node.FREE_CALL);
296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(49, Node.DIRECT_EVAL);
299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(4095, Node.COLUMN_MASK);
303:       assertFalse(node0.isSetterDef());
304:       assertFalse(node0.isNull());
305:       assertFalse(node0.isStringKey());
306:       assertFalse(node0.isParamList());
307:       assertFalse(node0.isName());
308:       assertEquals(0, node0.getChildCount());
309:       assertEquals(254, node0.getType());
310:       assertFalse(node0.isVar());
311:       assertFalse(node0.isCatch());
312:       assertFalse(node0.isBlock());
313:       assertFalse(node0.isCall());
314:       assertFalse(node0.isDefaultCase());
315:       assertFalse(node0.isTrue());
316:       assertFalse(node0.isNew());
317:       assertFalse(node0.isDo());
318:       assertFalse(node0.isVoid());
319:       assertFalse(node0.isAdd());
320:       assertFalse(node0.isOr());
321:       assertFalse(node0.isDec());
322:       assertFalse(node0.hasChildren());
323:       assertEquals((-1), node0.getSourcePosition());
324:       assertFalse(node0.isGetElem());
325:       assertFalse(node0.isDelProp());
326:       assertFalse(node0.isCast());
327:       assertFalse(node0.isReturn());
328:       assertFalse(node0.isContinue());
329:       assertFalse(node0.isAssign());
330:       assertFalse(node0.isTypeOf());
331:       assertFalse(node0.isFunction());
332:       assertFalse(node0.isString());
333:       assertFalse(node0.isWhile());
334:       assertFalse(node0.isAnd());
335:       assertFalse(node0.isDebugger());
336:       assertFalse(node0.isNot());
337:       assertFalse(node0.isObjectLit());
338:       assertFalse(node0.isBreak());
339:       assertFalse(node0.isThis());
340:       assertFalse(node0.isThrow());
341:       assertFalse(node0.isGetProp());
342:       assertFalse(node0.isInstanceOf());
343:       assertFalse(node0.isHook());
344:       assertFalse(node0.isFalse());
345:       assertFalse(node0.isWith());
346:       assertFalse(node0.isComma());
347:       assertFalse(node0.isExprResult());
348:       assertFalse(node0.isInc());
349:       assertFalse(node0.isIn());
350:       assertFalse(node0.isNumber());
351:       assertFalse(node0.isIf());
352:       assertFalse(node0.isNE());
353:       assertFalse(node0.isEmpty());
354:       assertFalse(node0.isFor());
355:       assertFalse(node0.isAssignAdd());
356:       assertFalse(node0.isLabelName());
357:       assertEquals((-1), node0.getLineno());
358:       assertFalse(node0.isArrayLit());
359:       assertFalse(node0.isLabel());
360:       assertFalse(node0.hasMoreThanOneChild());
361:       assertFalse(node0.isRegExp());
362:       assertFalse(node0.isScript());
363:       assertFalse(node0.isCase());
364:       assertFalse(node0.isSwitch());
365:       assertFalse(node0.isTry());
366:       assertFalse(node0.hasOneChild());
367:       assertEquals((-1), node0.getCharno());
368:       assertFalse(node0.isGetterDef());
369:       assertFalse(node1.isCatch());
370:       assertFalse(node1.isSetterDef());
371:       assertFalse(node1.isName());
372:       assertFalse(node1.isParamList());
373:       assertFalse(node1.isStringKey());
374:       assertFalse(node1.isDebugger());
375:       assertFalse(node1.isNull());
376:       assertFalse(node1.isTrue());
377:       assertFalse(node1.isArrayLit());
378:       assertFalse(node1.isNew());
379:       assertFalse(node1.isEmpty());
380:       assertFalse(node1.isAdd());
381:       assertFalse(node1.isDefaultCase());
382:       assertFalse(node1.isDo());
383:       assertEquals(37, node1.getLineno());
384:       assertFalse(node1.isFunction());
385:       assertFalse(node1.isVar());
386:       assertFalse(node1.isIn());
387:       assertEquals(1, node1.getChildCount());
388:       assertFalse(node1.hasMoreThanOneChild());
389:       assertFalse(node1.isCase());
390:       assertTrue(node1.hasChildren());
391:       assertFalse(node1.isGetterDef());
392:       assertFalse(node1.isIf());
393:       assertFalse(node1.isSwitch());
394:       assertFalse(node1.isLabelName());
395:       assertEquals(4095, node1.getCharno());
396:       assertFalse(node1.isNumber());
397:       assertFalse(node1.isNE());
398:       assertFalse(node1.isTry());
399:       assertEquals(155647, node1.getSourcePosition());
400:       assertFalse(node1.isScript());
401:       assertEquals((-2145), node1.getType());
402:       assertFalse(node1.isWith());
403:       assertFalse(node1.isRegExp());
404:       assertFalse(node1.isFor());
405:       assertFalse(node1.isThis());
406:       assertFalse(node1.isHook());
407:       assertFalse(node1.isBlock());
408:       assertFalse(node1.isInstanceOf());
409:       assertFalse(node1.isObjectLit());
410:       assertFalse(node1.isGetProp());
411:       assertFalse(node1.isBreak());
412:       assertFalse(node1.isNot());
413:       assertFalse(node1.isAnd());
414:       assertFalse(node1.isCast());
415:       assertFalse(node1.isInc());
416:       assertFalse(node1.isFalse());
417:       assertFalse(node1.isThrow());
418:       assertFalse(node1.isLabel());
419:       assertFalse(node1.isOr());
420:       assertFalse(node1.isAssignAdd());
421:       assertFalse(node1.isContinue());
422:       assertFalse(node1.isString());
423:       assertFalse(node1.isDelProp());
424:       assertFalse(node1.isVoid());
425:       assertFalse(node1.isExprResult());
426:       assertFalse(node1.isGetElem());
427:       assertFalse(node1.isCall());
428:       assertFalse(node1.isDec());
429:       assertFalse(node1.isWhile());
430:       assertFalse(node1.isAssign());
431:       assertFalse(node1.isTypeOf());
432:       assertFalse(node1.isComma());
433:       assertTrue(node1.hasOneChild());
434:       assertFalse(node1.isReturn());
435:       
436:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
437:       assertFalse(node2.equals((Object)node0));
438:       assertFalse(node2.equals((Object)node1));
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(36, Node.QUOTED_PROP);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
443:       assertEquals(55, Node.INFERRED_FUNCTION);
444:       assertEquals(39, Node.EMPTY_BLOCK);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       assertEquals(53, Node.INPUT_ID);
448:       assertEquals(56, Node.CHANGE_TIME);
449:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
450:       assertEquals(8, Node.FLAG_NO_THROWS);
451:       assertEquals(48, Node.DIRECTIVES);
452:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
453:       assertEquals(4095, Node.COLUMN_MASK);
454:       assertEquals(37, Node.OPT_ARG_NAME);
455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(57, Node.LAST_PROP);
458:       assertEquals(30, Node.VAR_ARGS_NAME);
459:       assertEquals(49, Node.DIRECT_EVAL);
460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
461:       assertEquals(12, Node.COLUMN_BITS);
462:       assertEquals(54, Node.SLASH_V);
463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
464:       assertEquals(57, Node.REFLECTED_OBJECT);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(32, Node.INCRDECR_PROP);
467:       assertEquals(1, Node.DECR_FLAG);
468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
469:       assertEquals(47, Node.IS_DISPATCHER);
470:       assertEquals(2, Node.POST_FLAG);
471:       assertEquals(50, Node.FREE_CALL);
472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
473:       assertEquals(46, Node.IS_NAMESPACE);
474:       assertEquals(40, Node.ORIGINALNAME_PROP);
475:       assertNotSame(node2, node0);
476:       assertEquals((-1), node2.getCharno());
477:       assertFalse(node2.isInc());
478:       assertFalse(node2.isSwitch());
479:       assertFalse(node2.isCase());
480:       assertFalse(node2.isIn());
481:       assertFalse(node2.isComma());
482:       assertFalse(node2.isNE());
483:       assertFalse(node2.isThis());
484:       assertFalse(node2.isGetProp());
485:       assertFalse(node2.isBreak());
486:       assertFalse(node2.isDelProp());
487:       assertFalse(node2.isIf());
488:       assertFalse(node2.isFor());
489:       assertFalse(node2.isHook());
490:       assertFalse(node2.isInstanceOf());
491:       assertFalse(node2.isWith());
492:       assertFalse(node2.isDebugger());
493:       assertFalse(node2.isAnd());
494:       assertFalse(node2.isObjectLit());
495:       assertFalse(node2.isNot());
496:       assertEquals((-1), node2.getSourcePosition());
497:       assertFalse(node2.isSetterDef());
498:       assertFalse(node2.isContinue());
499:       assertFalse(node2.isCast());
500:       assertFalse(node2.isThrow());
501:       assertEquals(40, node2.getType());
502:       assertFalse(node2.isFunction());
503:       assertFalse(node2.isFalse());
504:       assertFalse(node2.isNew());
505:       assertFalse(node2.isAdd());
506:       assertFalse(node2.isBlock());
507:       assertFalse(node2.isWhile());
508:       assertFalse(node2.isDo());
509:       assertTrue(node2.isString());
510:       assertFalse(node2.isStringKey());
511:       assertFalse(node2.isOr());
512:       assertFalse(node2.isNull());
513:       assertFalse(node2.isReturn());
514:       assertEquals((-1), node2.getLineno());
515:       assertFalse(node2.isName());
516:       assertFalse(node2.isCall());
517:       assertFalse(node2.isCatch());
518:       assertFalse(node2.isGetElem());
519:       assertFalse(node2.hasChildren());
520:       assertFalse(node2.isAssign());
521:       assertFalse(node2.isDec());
522:       assertFalse(node2.isTypeOf());
523:       assertFalse(node2.isRegExp());
524:       assertFalse(node2.hasMoreThanOneChild());
525:       assertFalse(node2.isExprResult());
526:       assertFalse(node2.isVoid());
527:       assertFalse(node2.isTrue());
528:       assertFalse(node2.isScript());
529:       assertFalse(node2.hasOneChild());
530:       assertFalse(node2.isTry());
531:       assertFalse(node2.isDefaultCase());
532:       assertFalse(node2.isEmpty());
533:       assertFalse(node2.isGetterDef());
534:       assertFalse(node2.isNumber());
535:       assertFalse(node2.isParamList());
536:       assertFalse(node2.isLabel());
537:       assertFalse(node2.isAssignAdd());
538:       assertFalse(node2.isLabelName());
539:       assertFalse(node2.isVar());
540:       assertFalse(node2.isArrayLit());
541:       assertEquals(0, node2.getChildCount());
542:       
543:       String string0 = node2.toStringTree();
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node2.equals((Object)node1));
546:       assertEquals(43, Node.IS_CONSTANT_NAME);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
550:       assertEquals(55, Node.INFERRED_FUNCTION);
551:       assertEquals(39, Node.EMPTY_BLOCK);
552:       assertEquals(29, Node.JSDOC_INFO_PROP);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(53, Node.INPUT_ID);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
557:       assertEquals(8, Node.FLAG_NO_THROWS);
558:       assertEquals(48, Node.DIRECTIVES);
559:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
560:       assertEquals(4095, Node.COLUMN_MASK);
561:       assertEquals(37, Node.OPT_ARG_NAME);
562:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
563:       assertEquals(15, Node.NO_SIDE_EFFECTS);
564:       assertEquals(57, Node.LAST_PROP);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(12, Node.COLUMN_BITS);
569:       assertEquals(54, Node.SLASH_V);
570:       assertEquals(51, Node.STATIC_SOURCE_FILE);
571:       assertEquals(57, Node.REFLECTED_OBJECT);
572:       assertEquals(52, Node.LENGTH);
573:       assertEquals(32, Node.INCRDECR_PROP);
574:       assertEquals(1, Node.DECR_FLAG);
575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
576:       assertEquals(47, Node.IS_DISPATCHER);
577:       assertEquals(2, Node.POST_FLAG);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(40, Node.ORIGINALNAME_PROP);
582:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
583:       assertNotSame(node2, node0);
584:       assertEquals((-1), node2.getCharno());
585:       assertFalse(node2.isInc());
586:       assertFalse(node2.isSwitch());
587:       assertFalse(node2.isCase());
588:       assertFalse(node2.isIn());
589:       assertFalse(node2.isComma());
590:       assertFalse(node2.isNE());
591:       assertFalse(node2.isThis());
592:       assertFalse(node2.isGetProp());
593:       assertFalse(node2.isBreak());
594:       assertFalse(node2.isDelProp());
595:       assertFalse(node2.isIf());
596:       assertFalse(node2.isFor());
597:       assertFalse(node2.isHook());
598:       assertFalse(node2.isInstanceOf());
599:       assertFalse(node2.isWith());
600:       assertFalse(node2.isDebugger());
601:       assertFalse(node2.isAnd());
602:       assertFalse(node2.isObjectLit());
603:       assertFalse(node2.isNot());
604:       assertEquals((-1), node2.getSourcePosition());
605:       assertFalse(node2.isSetterDef());
606:       assertFalse(node2.isContinue());
607:       assertFalse(node2.isCast());
608:       assertFalse(node2.isThrow());
609:       assertEquals(40, node2.getType());
610:       assertFalse(node2.isFunction());
611:       assertFalse(node2.isFalse());
612:       assertFalse(node2.isNew());
613:       assertFalse(node2.isAdd());
614:       assertFalse(node2.isBlock());
615:       assertFalse(node2.isWhile());
616:       assertFalse(node2.isDo());
617:       assertTrue(node2.isString());
618:       assertFalse(node2.isStringKey());
619:       assertFalse(node2.isOr());
620:       assertFalse(node2.isNull());
621:       assertFalse(node2.isReturn());
622:       assertEquals((-1), node2.getLineno());
623:       assertFalse(node2.isName());
624:       assertFalse(node2.isCall());
625:       assertFalse(node2.isCatch());
626:       assertFalse(node2.isGetElem());
627:       assertFalse(node2.hasChildren());
628:       assertFalse(node2.isAssign());
629:       assertFalse(node2.isDec());
630:       assertFalse(node2.isTypeOf());
631:       assertFalse(node2.isRegExp());
632:       assertFalse(node2.hasMoreThanOneChild());
633:       assertFalse(node2.isExprResult());
634:       assertFalse(node2.isVoid());
635:       assertFalse(node2.isTrue());
636:       assertFalse(node2.isScript());
637:       assertFalse(node2.hasOneChild());
638:       assertFalse(node2.isTry());
639:       assertFalse(node2.isDefaultCase());
640:       assertFalse(node2.isEmpty());
641:       assertFalse(node2.isGetterDef());
642:       assertFalse(node2.isNumber());
643:       assertFalse(node2.isParamList());
644:       assertFalse(node2.isLabel());
645:       assertFalse(node2.isAssignAdd());
646:       assertFalse(node2.isLabelName());
647:       assertFalse(node2.isVar());
648:       assertFalse(node2.isArrayLit());
649:       assertEquals(0, node2.getChildCount());
650:       
651:       int int0 = node1.getIntProp(254);
652:       assertFalse(node0.equals((Object)node2));
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node1.equals((Object)node0));
655:       assertFalse(node1.equals((Object)node2));
656:       assertEquals(29, Node.JSDOC_INFO_PROP);
657:       assertEquals(47, Node.IS_DISPATCHER);
658:       assertEquals(56, Node.CHANGE_TIME);
659:       assertEquals(37, Node.OPT_ARG_NAME);
660:       assertEquals(2, Node.POST_FLAG);
661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
662:       assertEquals(49, Node.DIRECT_EVAL);
663:       assertEquals(30, Node.VAR_ARGS_NAME);
664:       assertEquals(36, Node.QUOTED_PROP);
665:       assertEquals(57, Node.LAST_PROP);
666:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
667:       assertEquals(53, Node.INPUT_ID);
668:       assertEquals(52, Node.LENGTH);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
673:       assertEquals(55, Node.INFERRED_FUNCTION);
674:       assertEquals(50, Node.FREE_CALL);
675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
676:       assertEquals(57, Node.REFLECTED_OBJECT);
677:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
678:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
679:       assertEquals(48, Node.DIRECTIVES);
680:       assertEquals(4095, Node.COLUMN_MASK);
681:       assertEquals(40, Node.ORIGINALNAME_PROP);
682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
683:       assertEquals(1, Node.DECR_FLAG);
684:       assertEquals(43, Node.IS_CONSTANT_NAME);
685:       assertEquals(51, Node.STATIC_SOURCE_FILE);
686:       assertEquals(12, Node.COLUMN_BITS);
687:       assertEquals(46, Node.IS_NAMESPACE);
688:       assertEquals(54, Node.SLASH_V);
689:       assertEquals(32, Node.INCRDECR_PROP);
690:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
691:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
692:       assertEquals(46, Node.IS_NAMESPACE);
693:       assertEquals(56, Node.CHANGE_TIME);
694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
695:       assertEquals(37, Node.OPT_ARG_NAME);
696:       assertEquals(32, Node.INCRDECR_PROP);
697:       assertEquals(1, Node.DECR_FLAG);
698:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
699:       assertEquals(29, Node.JSDOC_INFO_PROP);
700:       assertEquals(51, Node.STATIC_SOURCE_FILE);
701:       assertEquals(53, Node.INPUT_ID);
702:       assertEquals(52, Node.LENGTH);
703:       assertEquals(54, Node.SLASH_V);
704:       assertEquals(43, Node.IS_CONSTANT_NAME);
705:       assertEquals(15, Node.NO_SIDE_EFFECTS);
706:       assertEquals(57, Node.LAST_PROP);
707:       assertEquals(40, Node.ORIGINALNAME_PROP);
708:       assertEquals(47, Node.IS_DISPATCHER);
709:       assertEquals(2, Node.POST_FLAG);
710:       assertEquals(30, Node.VAR_ARGS_NAME);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(39, Node.EMPTY_BLOCK);
713:       assertEquals(48, Node.DIRECTIVES);
714:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(55, Node.INFERRED_FUNCTION);
717:       assertEquals(36, Node.QUOTED_PROP);
718:       assertEquals(57, Node.REFLECTED_OBJECT);
719:       assertEquals(8, Node.FLAG_NO_THROWS);
720:       assertEquals(50, Node.FREE_CALL);
721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
723:       assertEquals(49, Node.DIRECT_EVAL);
724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
725:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
726:       assertEquals(12, Node.COLUMN_BITS);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(0, int0);
729:       assertNotSame(node0, node2);
730:       assertFalse(node0.isSetterDef());
731:       assertFalse(node0.isNull());
732:       assertFalse(node0.isStringKey());
733:       assertFalse(node0.isParamList());
734:       assertFalse(node0.isName());
735:       assertEquals(0, node0.getChildCount());
736:       assertEquals(254, node0.getType());
737:       assertFalse(node0.isVar());
738:       assertFalse(node0.isCatch());
739:       assertFalse(node0.isBlock());
740:       assertFalse(node0.isCall());
741:       assertFalse(node0.isDefaultCase());
742:       assertFalse(node0.isTrue());
743:       assertFalse(node0.isNew());
744:       assertFalse(node0.isDo());
745:       assertFalse(node0.isVoid());
746:       assertFalse(node0.isAdd());
747:       assertFalse(node0.isOr());
748:       assertFalse(node0.isDec());
749:       assertFalse(node0.hasChildren());
750:       assertEquals((-1), node0.getSourcePosition());
751:       assertFalse(node0.isGetElem());
752:       assertFalse(node0.isDelProp());
753:       assertFalse(node0.isCast());
754:       assertFalse(node0.isReturn());
755:       assertFalse(node0.isContinue());
756:       assertFalse(node0.isAssign());
757:       assertFalse(node0.isTypeOf());
758:       assertFalse(node0.isFunction());
759:       assertFalse(node0.isString());
760:       assertFalse(node0.isWhile());
761:       assertFalse(node0.isAnd());
762:       assertFalse(node0.isDebugger());
763:       assertFalse(node0.isNot());
764:       assertFalse(node0.isObjectLit());
765:       assertFalse(node0.isBreak());
766:       assertFalse(node0.isThis());
767:       assertFalse(node0.isThrow());
768:       assertFalse(node0.isGetProp());
769:       assertFalse(node0.isInstanceOf());
770:       assertFalse(node0.isHook());
771:       assertFalse(node0.isFalse());
772:       assertFalse(node0.isWith());
773:       assertFalse(node0.isComma());
774:       assertFalse(node0.isExprResult());
775:       assertFalse(node0.isInc());
776:       assertFalse(node0.isIn());
777:       assertFalse(node0.isNumber());
778:       assertFalse(node0.isIf());
779:       assertFalse(node0.isNE());
780:       assertFalse(node0.isEmpty());
781:       assertFalse(node0.isFor());
782:       assertFalse(node0.isAssignAdd());
783:       assertFalse(node0.isLabelName());
784:       assertEquals((-1), node0.getLineno());
785:       assertFalse(node0.isArrayLit());
786:       assertFalse(node0.isLabel());
787:       assertFalse(node0.hasMoreThanOneChild());
788:       assertFalse(node0.isRegExp());
789:       assertFalse(node0.isScript());
790:       assertFalse(node0.isCase());
791:       assertFalse(node0.isSwitch());
792:       assertFalse(node0.isTry());
793:       assertFalse(node0.hasOneChild());
794:       assertEquals((-1), node0.getCharno());
795:       assertFalse(node0.isGetterDef());
796:       assertFalse(node1.isCatch());
797:       assertFalse(node1.isSetterDef());
798:       assertFalse(node1.isName());
799:       assertFalse(node1.isParamList());
800:       assertFalse(node1.isStringKey());
801:       assertFalse(node1.isDebugger());
802:       assertFalse(node1.isNull());
803:       assertFalse(node1.isTrue());
804:       assertFalse(node1.isArrayLit());
805:       assertFalse(node1.isNew());
806:       assertFalse(node1.isEmpty());
807:       assertFalse(node1.isAdd());
808:       assertFalse(node1.isDefaultCase());
809:       assertFalse(node1.isDo());
810:       assertEquals(37, node1.getLineno());
811:       assertFalse(node1.isFunction());
812:       assertFalse(node1.isVar());
813:       assertFalse(node1.isIn());
814:       assertEquals(1, node1.getChildCount());
815:       assertFalse(node1.hasMoreThanOneChild());
816:       assertFalse(node1.isCase());
817:       assertTrue(node1.hasChildren());
818:       assertFalse(node1.isGetterDef());
819:       assertFalse(node1.isIf());
820:       assertFalse(node1.isSwitch());
821:       assertFalse(node1.isLabelName());
822:       assertEquals(4095, node1.getCharno());
823:       assertFalse(node1.isNumber());
824:       assertFalse(node1.isNE());
825:       assertFalse(node1.isTry());
826:       assertEquals(155647, node1.getSourcePosition());
827:       assertFalse(node1.isScript());
828:       assertEquals((-2145), node1.getType());
829:       assertFalse(node1.isWith());
830:       assertFalse(node1.isRegExp());
831:       assertFalse(node1.isFor());
832:       assertFalse(node1.isThis());
833:       assertFalse(node1.isHook());
834:       assertFalse(node1.isBlock());
835:       assertFalse(node1.isInstanceOf());
836:       assertFalse(node1.isObjectLit());
837:       assertFalse(node1.isGetProp());
838:       assertFalse(node1.isBreak());
839:       assertFalse(node1.isNot());
840:       assertFalse(node1.isAnd());
841:       assertFalse(node1.isCast());
842:       assertFalse(node1.isInc());
843:       assertFalse(node1.isFalse());
844:       assertFalse(node1.isThrow());
845:       assertFalse(node1.isLabel());
846:       assertFalse(node1.isOr());
847:       assertFalse(node1.isAssignAdd());
848:       assertFalse(node1.isContinue());
849:       assertFalse(node1.isString());
850:       assertFalse(node1.isDelProp());
851:       assertFalse(node1.isVoid());
852:       assertFalse(node1.isExprResult());
853:       assertFalse(node1.isGetElem());
854:       assertFalse(node1.isCall());
855:       assertFalse(node1.isDec());
856:       assertFalse(node1.isWhile());
857:       assertFalse(node1.isAssign());
858:       assertFalse(node1.isTypeOf());
859:       assertFalse(node1.isComma());
860:       assertTrue(node1.hasOneChild());
861:       assertFalse(node1.isReturn());
862:       
863:       boolean boolean0 = node1.isEquivalentToShallow(node0);
864:       assertFalse(node0.equals((Object)node2));
865:       assertFalse(node0.equals((Object)node1));
866:       assertFalse(node1.equals((Object)node0));
867:       assertFalse(node1.equals((Object)node2));
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(47, Node.IS_DISPATCHER);
870:       assertEquals(56, Node.CHANGE_TIME);
871:       assertEquals(37, Node.OPT_ARG_NAME);
872:       assertEquals(2, Node.POST_FLAG);
873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
874:       assertEquals(49, Node.DIRECT_EVAL);
875:       assertEquals(30, Node.VAR_ARGS_NAME);
876:       assertEquals(36, Node.QUOTED_PROP);
877:       assertEquals(57, Node.LAST_PROP);
878:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
879:       assertEquals(53, Node.INPUT_ID);
880:       assertEquals(52, Node.LENGTH);
881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
882:       assertEquals(8, Node.FLAG_NO_THROWS);
883:       assertEquals(39, Node.EMPTY_BLOCK);
884:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
885:       assertEquals(55, Node.INFERRED_FUNCTION);
886:       assertEquals(50, Node.FREE_CALL);
887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
888:       assertEquals(57, Node.REFLECTED_OBJECT);
889:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
890:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
891:       assertEquals(48, Node.DIRECTIVES);
892:       assertEquals(4095, Node.COLUMN_MASK);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
895:       assertEquals(1, Node.DECR_FLAG);
896:       assertEquals(43, Node.IS_CONSTANT_NAME);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(46, Node.IS_NAMESPACE);
900:       assertEquals(54, Node.SLASH_V);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
903:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
904:       assertEquals(46, Node.IS_NAMESPACE);
905:       assertEquals(56, Node.CHANGE_TIME);
906:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
907:       assertEquals(37, Node.OPT_ARG_NAME);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(1, Node.DECR_FLAG);
910:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(51, Node.STATIC_SOURCE_FILE);
913:       assertEquals(53, Node.INPUT_ID);
914:       assertEquals(52, Node.LENGTH);
915:       assertEquals(54, Node.SLASH_V);
916:       assertEquals(43, Node.IS_CONSTANT_NAME);
917:       assertEquals(15, Node.NO_SIDE_EFFECTS);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(40, Node.ORIGINALNAME_PROP);
920:       assertEquals(47, Node.IS_DISPATCHER);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(30, Node.VAR_ARGS_NAME);
923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
924:       assertEquals(39, Node.EMPTY_BLOCK);
925:       assertEquals(48, Node.DIRECTIVES);
926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
927:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
928:       assertEquals(55, Node.INFERRED_FUNCTION);
929:       assertEquals(36, Node.QUOTED_PROP);
930:       assertEquals(57, Node.REFLECTED_OBJECT);
931:       assertEquals(8, Node.FLAG_NO_THROWS);
932:       assertEquals(50, Node.FREE_CALL);
933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
934:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
935:       assertEquals(49, Node.DIRECT_EVAL);
936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(4095, Node.COLUMN_MASK);
940:       assertFalse(boolean0);
941:       assertNotSame(node0, node2);
942:       assertFalse(node0.isSetterDef());
943:       assertFalse(node0.isNull());
944:       assertFalse(node0.isStringKey());
945:       assertFalse(node0.isParamList());
946:       assertFalse(node0.isName());
947:       assertEquals(0, node0.getChildCount());
948:       assertEquals(254, node0.getType());
949:       assertFalse(node0.isVar());
950:       assertFalse(node0.isCatch());
951:       assertFalse(node0.isBlock());
952:       assertFalse(node0.isCall());
953:       assertFalse(node0.isDefaultCase());
954:       assertFalse(node0.isTrue());
955:       assertFalse(node0.isNew());
956:       assertFalse(node0.isDo());
957:       assertFalse(node0.isVoid());
958:       assertFalse(node0.isAdd());
959:       assertFalse(node0.isOr());
960:       assertFalse(node0.isDec());
961:       assertFalse(node0.hasChildren());
962:       assertEquals((-1), node0.getSourcePosition());
963:       assertFalse(node0.isGetElem());
964:       assertFalse(node0.isDelProp());
965:       assertFalse(node0.isCast());
966:       assertFalse(node0.isReturn());
967:       assertFalse(node0.isContinue());
968:       assertFalse(node0.isAssign());
969:       assertFalse(node0.isTypeOf());
970:       assertFalse(node0.isFunction());
971:       assertFalse(node0.isString());
972:       assertFalse(node0.isWhile());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node0.isDebugger());
975:       assertFalse(node0.isNot());
976:       assertFalse(node0.isObjectLit());
977:       assertFalse(node0.isBreak());
978:       assertFalse(node0.isThis());
979:       assertFalse(node0.isThrow());
980:       assertFalse(node0.isGetProp());
981:       assertFalse(node0.isInstanceOf());
982:       assertFalse(node0.isHook());
983:       assertFalse(node0.isFalse());
984:       assertFalse(node0.isWith());
985:       assertFalse(node0.isComma());
986:       assertFalse(node0.isExprResult());
987:       assertFalse(node0.isInc());
988:       assertFalse(node0.isIn());
989:       assertFalse(node0.isNumber());
990:       assertFalse(node0.isIf());
991:       assertFalse(node0.isNE());
992:       assertFalse(node0.isEmpty());
993:       assertFalse(node0.isFor());
994:       assertFalse(node0.isAssignAdd());
995:       assertFalse(node0.isLabelName());
996:       assertEquals((-1), node0.getLineno());
997:       assertFalse(node0.isArrayLit());
998:       assertFalse(node0.isLabel());
999:       assertFalse(node0.hasMoreThanOneChild());
1000:       assertFalse(node0.isRegExp());
1001:       assertFalse(node0.isScript());
1002:       assertFalse(node0.isCase());
1003:       assertFalse(node0.isSwitch());
1004:       assertFalse(node0.isTry());
1005:       assertFalse(node0.hasOneChild());
1006:       assertEquals((-1), node0.getCharno());
1007:       assertFalse(node0.isGetterDef());
1008:       assertFalse(node1.isCatch());
1009:       assertFalse(node1.isSetterDef());
1010:       assertFalse(node1.isName());
1011:       assertFalse(node1.isParamList());
1012:       assertFalse(node1.isStringKey());
1013:       assertFalse(node1.isDebugger());
1014:       assertFalse(node1.isNull());
1015:       assertFalse(node1.isTrue());
1016:       assertFalse(node1.isArrayLit());
1017:       assertFalse(node1.isNew());
1018:       assertFalse(node1.isEmpty());
1019:       assertFalse(node1.isAdd());
1020:       assertFalse(node1.isDefaultCase());
1021:       assertFalse(node1.isDo());
1022:       assertEquals(37, node1.getLineno());
1023:       assertFalse(node1.isFunction());
1024:       assertFalse(node1.isVar());
1025:       assertFalse(node1.isIn());
1026:       assertEquals(1, node1.getChildCount());
1027:       assertFalse(node1.hasMoreThanOneChild());
1028:       assertFalse(node1.isCase());
1029:       assertTrue(node1.hasChildren());
1030:       assertFalse(node1.isGetterDef());
1031:       assertFalse(node1.isIf());
1032:       assertFalse(node1.isSwitch());
1033:       assertFalse(node1.isLabelName());
1034:       assertEquals(4095, node1.getCharno());
1035:       assertFalse(node1.isNumber());
1036:       assertFalse(node1.isNE());
1037:       assertFalse(node1.isTry());
1038:       assertEquals(155647, node1.getSourcePosition());
1039:       assertFalse(node1.isScript());
1040:       assertEquals((-2145), node1.getType());
1041:       assertFalse(node1.isWith());
1042:       assertFalse(node1.isRegExp());
1043:       assertFalse(node1.isFor());
1044:       assertFalse(node1.isThis());
1045:       assertFalse(node1.isHook());
1046:       assertFalse(node1.isBlock());
1047:       assertFalse(node1.isInstanceOf());
1048:       assertFalse(node1.isObjectLit());
1049:       assertFalse(node1.isGetProp());
1050:       assertFalse(node1.isBreak());
1051:       assertFalse(node1.isNot());
1052:       assertFalse(node1.isAnd());
1053:       assertFalse(node1.isCast());
1054:       assertFalse(node1.isInc());
1055:       assertFalse(node1.isFalse());
1056:       assertFalse(node1.isThrow());
1057:       assertFalse(node1.isLabel());
1058:       assertFalse(node1.isOr());
1059:       assertFalse(node1.isAssignAdd());
1060:       assertFalse(node1.isContinue());
1061:       assertFalse(node1.isString());
1062:       assertFalse(node1.isDelProp());
1063:       assertFalse(node1.isVoid());
1064:       assertFalse(node1.isExprResult());
1065:       assertFalse(node1.isGetElem());
1066:       assertFalse(node1.isCall());
1067:       assertFalse(node1.isDec());
1068:       assertFalse(node1.isWhile());
1069:       assertFalse(node1.isAssign());
1070:       assertFalse(node1.isTypeOf());
1071:       assertFalse(node1.isComma());
1072:       assertTrue(node1.hasOneChild());
1073:       assertFalse(node1.isReturn());
1074:       
1075:       Node node3 = node0.useSourceInfoFrom(node1);
1076:       assertFalse(node0.equals((Object)node2));
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertFalse(node1.equals((Object)node0));
1079:       assertFalse(node1.equals((Object)node2));
1080:       assertFalse(node3.equals((Object)node2));
1081:       assertFalse(node3.equals((Object)node1));
1082:       assertEquals(29, Node.JSDOC_INFO_PROP);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       assertEquals(56, Node.CHANGE_TIME);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(2, Node.POST_FLAG);
1087:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1088:       assertEquals(49, Node.DIRECT_EVAL);
1089:       assertEquals(30, Node.VAR_ARGS_NAME);
1090:       assertEquals(36, Node.QUOTED_PROP);
1091:       assertEquals(57, Node.LAST_PROP);
1092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(52, Node.LENGTH);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(8, Node.FLAG_NO_THROWS);
1097:       assertEquals(39, Node.EMPTY_BLOCK);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(55, Node.INFERRED_FUNCTION);
1100:       assertEquals(50, Node.FREE_CALL);
1101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1102:       assertEquals(57, Node.REFLECTED_OBJECT);
1103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1105:       assertEquals(48, Node.DIRECTIVES);
1106:       assertEquals(4095, Node.COLUMN_MASK);
1107:       assertEquals(40, Node.ORIGINALNAME_PROP);
1108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1109:       assertEquals(1, Node.DECR_FLAG);
1110:       assertEquals(43, Node.IS_CONSTANT_NAME);
1111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1112:       assertEquals(12, Node.COLUMN_BITS);
1113:       assertEquals(46, Node.IS_NAMESPACE);
1114:       assertEquals(54, Node.SLASH_V);
1115:       assertEquals(32, Node.INCRDECR_PROP);
1116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1118:       assertEquals(46, Node.IS_NAMESPACE);
1119:       assertEquals(56, Node.CHANGE_TIME);
1120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1121:       assertEquals(37, Node.OPT_ARG_NAME);
1122:       assertEquals(32, Node.INCRDECR_PROP);
1123:       assertEquals(1, Node.DECR_FLAG);
1124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1125:       assertEquals(29, Node.JSDOC_INFO_PROP);
1126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1127:       assertEquals(53, Node.INPUT_ID);
1128:       assertEquals(52, Node.LENGTH);
1129:       assertEquals(54, Node.SLASH_V);
1130:       assertEquals(43, Node.IS_CONSTANT_NAME);
1131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1132:       assertEquals(57, Node.LAST_PROP);
1133:       assertEquals(40, Node.ORIGINALNAME_PROP);
1134:       assertEquals(47, Node.IS_DISPATCHER);
1135:       assertEquals(2, Node.POST_FLAG);
1136:       assertEquals(30, Node.VAR_ARGS_NAME);
1137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1138:       assertEquals(39, Node.EMPTY_BLOCK);
1139:       assertEquals(48, Node.DIRECTIVES);
1140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(36, Node.QUOTED_PROP);
1144:       assertEquals(57, Node.REFLECTED_OBJECT);
1145:       assertEquals(8, Node.FLAG_NO_THROWS);
1146:       assertEquals(50, Node.FREE_CALL);
1147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1149:       assertEquals(49, Node.DIRECT_EVAL);
1150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(48, Node.DIRECTIVES);
1155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1156:       assertEquals(8, Node.FLAG_NO_THROWS);
1157:       assertEquals(40, Node.ORIGINALNAME_PROP);
1158:       assertEquals(4095, Node.COLUMN_MASK);
1159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1160:       assertEquals(54, Node.SLASH_V);
1161:       assertEquals(43, Node.IS_CONSTANT_NAME);
1162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1164:       assertEquals(1, Node.DECR_FLAG);
1165:       assertEquals(50, Node.FREE_CALL);
1166:       assertEquals(32, Node.INCRDECR_PROP);
1167:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1168:       assertEquals(37, Node.OPT_ARG_NAME);
1169:       assertEquals(2, Node.POST_FLAG);
1170:       assertEquals(46, Node.IS_NAMESPACE);
1171:       assertEquals(56, Node.CHANGE_TIME);
1172:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1173:       assertEquals(12, Node.COLUMN_BITS);
1174:       assertEquals(47, Node.IS_DISPATCHER);
1175:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1176:       assertEquals(49, Node.DIRECT_EVAL);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(52, Node.LENGTH);
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(30, Node.VAR_ARGS_NAME);
1181:       assertEquals(36, Node.QUOTED_PROP);
1182:       assertEquals(57, Node.REFLECTED_OBJECT);
1183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1184:       assertEquals(55, Node.INFERRED_FUNCTION);
1185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1186:       assertEquals(29, Node.JSDOC_INFO_PROP);
1187:       assertEquals(53, Node.INPUT_ID);
1188:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1189:       assertEquals(39, Node.EMPTY_BLOCK);
1190:       assertNotSame(node0, node2);
1191:       assertSame(node0, node3);
1192:       assertNotSame(node3, node2);
1193:       assertSame(node3, node0);
1194:       assertFalse(node0.isSetterDef());
1195:       assertFalse(node0.isNull());
1196:       assertFalse(node0.isStringKey());
1197:       assertFalse(node0.isParamList());
1198:       assertFalse(node0.isName());
1199:       assertEquals(0, node0.getChildCount());
1200:       assertEquals(254, node0.getType());
1201:       assertFalse(node0.isVar());
1202:       assertFalse(node0.isCatch());
1203:       assertFalse(node0.isBlock());
1204:       assertFalse(node0.isCall());
1205:       assertEquals(37, node0.getLineno());
1206:       assertFalse(node0.isDefaultCase());
1207:       assertFalse(node0.isTrue());
1208:       assertFalse(node0.isNew());
1209:       assertFalse(node0.isDo());
1210:       assertFalse(node0.isVoid());
1211:       assertFalse(node0.isAdd());
1212:       assertFalse(node0.isOr());
1213:       assertFalse(node0.isDec());
1214:       assertFalse(node0.hasChildren());
1215:       assertFalse(node0.isGetElem());
1216:       assertFalse(node0.isDelProp());
1217:       assertFalse(node0.isCast());
1218:       assertFalse(node0.isReturn());
1219:       assertFalse(node0.isContinue());
1220:       assertFalse(node0.isAssign());
1221:       assertFalse(node0.isTypeOf());
1222:       assertFalse(node0.isFunction());
1223:       assertFalse(node0.isString());
1224:       assertFalse(node0.isWhile());
1225:       assertFalse(node0.isAnd());
1226:       assertFalse(node0.isDebugger());
1227:       assertFalse(node0.isNot());
1228:       assertFalse(node0.isObjectLit());
1229:       assertFalse(node0.isBreak());
1230:       assertFalse(node0.isThis());
1231:       assertFalse(node0.isThrow());
1232:       assertFalse(node0.isGetProp());
1233:       assertFalse(node0.isInstanceOf());
1234:       assertFalse(node0.isHook());
1235:       assertFalse(node0.isFalse());
1236:       assertFalse(node0.isWith());
1237:       assertFalse(node0.isComma());
1238:       assertFalse(node0.isExprResult());
1239:       assertFalse(node0.isInc());
1240:       assertFalse(node0.isIn());
1241:       assertFalse(node0.isNumber());
1242:       assertFalse(node0.isIf());
1243:       assertFalse(node0.isNE());
1244:       assertFalse(node0.isEmpty());
1245:       assertFalse(node0.isFor());
1246:       assertFalse(node0.isAssignAdd());
1247:       assertFalse(node0.isLabelName());
1248:       assertFalse(node0.isArrayLit());
1249:       assertFalse(node0.isLabel());
1250:       assertFalse(node0.hasMoreThanOneChild());
1251:       assertFalse(node0.isRegExp());
1252:       assertFalse(node0.isScript());
1253:       assertFalse(node0.isCase());
1254:       assertFalse(node0.isSwitch());
1255:       assertFalse(node0.isTry());
1256:       assertEquals(155647, node0.getSourcePosition());
1257:       assertFalse(node0.hasOneChild());
1258:       assertFalse(node0.isGetterDef());
1259:       assertEquals(4095, node0.getCharno());
1260:       assertFalse(node1.isCatch());
1261:       assertFalse(node1.isSetterDef());
1262:       assertFalse(node1.isName());
1263:       assertFalse(node1.isParamList());
1264:       assertFalse(node1.isStringKey());
1265:       assertFalse(node1.isDebugger());
1266:       assertFalse(node1.isNull());
1267:       assertFalse(node1.isTrue());
1268:       assertFalse(node1.isArrayLit());
1269:       assertFalse(node1.isNew());
1270:       assertFalse(node1.isEmpty());
1271:       assertFalse(node1.isAdd());
1272:       assertFalse(node1.isDefaultCase());
1273:       assertFalse(node1.isDo());
1274:       assertEquals(37, node1.getLineno());
1275:       assertFalse(node1.isFunction());
1276:       assertFalse(node1.isVar());
1277:       assertFalse(node1.isIn());
1278:       assertEquals(1, node1.getChildCount());
1279:       assertFalse(node1.hasMoreThanOneChild());
1280:       assertFalse(node1.isCase());
1281:       assertTrue(node1.hasChildren());
1282:       assertFalse(node1.isGetterDef());
1283:       assertFalse(node1.isIf());
1284:       assertFalse(node1.isSwitch());
1285:       assertFalse(node1.isLabelName());
1286:       assertEquals(4095, node1.getCharno());
1287:       assertFalse(node1.isNumber());
1288:       assertFalse(node1.isNE());
1289:       assertFalse(node1.isTry());
1290:       assertEquals(155647, node1.getSourcePosition());
1291:       assertFalse(node1.isScript());
1292:       assertEquals((-2145), node1.getType());
1293:       assertFalse(node1.isWith());
1294:       assertFalse(node1.isRegExp());
1295:       assertFalse(node1.isFor());
1296:       assertFalse(node1.isThis());
1297:       assertFalse(node1.isHook());
1298:       assertFalse(node1.isBlock());
1299:       assertFalse(node1.isInstanceOf());
1300:       assertFalse(node1.isObjectLit());
1301:       assertFalse(node1.isGetProp());
1302:       assertFalse(node1.isBreak());
1303:       assertFalse(node1.isNot());
1304:       assertFalse(node1.isAnd());
1305:       assertFalse(node1.isCast());
1306:       assertFalse(node1.isInc());
1307:       assertFalse(node1.isFalse());
1308:       assertFalse(node1.isThrow());
1309:       assertFalse(node1.isLabel());
1310:       assertFalse(node1.isOr());
1311:       assertFalse(node1.isAssignAdd());
1312:       assertFalse(node1.isContinue());
1313:       assertFalse(node1.isString());
1314:       assertFalse(node1.isDelProp());
1315:       assertFalse(node1.isVoid());
1316:       assertFalse(node1.isExprResult());
1317:       assertFalse(node1.isGetElem());
1318:       assertFalse(node1.isCall());
1319:       assertFalse(node1.isDec());
1320:       assertFalse(node1.isWhile());
1321:       assertFalse(node1.isAssign());
1322:       assertFalse(node1.isTypeOf());
1323:       assertFalse(node1.isComma());
1324:       assertTrue(node1.hasOneChild());
1325:       assertFalse(node1.isReturn());
1326:       assertFalse(node3.isOr());
1327:       assertFalse(node3.isAssignAdd());
1328:       assertFalse(node3.isReturn());
1329:       assertFalse(node3.isLabel());
1330:       assertFalse(node3.isAssign());
1331:       assertFalse(node3.isLabelName());
1332:       assertFalse(node3.isGetElem());
1333:       assertFalse(node3.isDec());
1334:       assertFalse(node3.hasChildren());
1335:       assertFalse(node3.isCast());
1336:       assertFalse(node3.hasMoreThanOneChild());
1337:       assertFalse(node3.isTypeOf());
1338:       assertFalse(node3.isContinue());
1339:       assertFalse(node3.isBlock());
1340:       assertFalse(node3.hasOneChild());
1341:       assertFalse(node3.isStringKey());
1342:       assertFalse(node3.isWhile());
1343:       assertFalse(node3.isNot());
1344:       assertFalse(node3.isScript());
1345:       assertFalse(node3.isObjectLit());
1346:       assertFalse(node3.isNumber());
1347:       assertFalse(node3.isThis());
1348:       assertFalse(node3.isAnd());
1349:       assertFalse(node3.isWith());
1350:       assertFalse(node3.isCatch());
1351:       assertEquals(37, node3.getLineno());
1352:       assertFalse(node3.isRegExp());
1353:       assertFalse(node3.isFunction());
1354:       assertFalse(node3.isInstanceOf());
1355:       assertFalse(node3.isFalse());
1356:       assertEquals(254, node3.getType());
1357:       assertFalse(node3.isThrow());
1358:       assertFalse(node3.isSetterDef());
1359:       assertFalse(node3.isInc());
1360:       assertFalse(node3.isIn());
1361:       assertFalse(node3.isNE());
1362:       assertFalse(node3.isIf());
1363:       assertFalse(node3.isFor());
1364:       assertFalse(node3.isDelProp());
1365:       assertFalse(node3.isTry());
1366:       assertEquals(155647, node3.getSourcePosition());
1367:       assertFalse(node3.isHook());
1368:       assertFalse(node3.isArrayLit());
1369:       assertFalse(node3.isDebugger());
1370:       assertFalse(node3.isSwitch());
1371:       assertFalse(node3.isGetterDef());
1372:       assertFalse(node3.isCase());
1373:       assertEquals(4095, node3.getCharno());
1374:       assertFalse(node3.isString());
1375:       assertEquals(0, node3.getChildCount());
1376:       assertFalse(node3.isGetProp());
1377:       assertFalse(node3.isNull());
1378:       assertFalse(node3.isParamList());
1379:       assertFalse(node3.isName());
1380:       assertFalse(node3.isBreak());
1381:       assertFalse(node3.isComma());
1382:       assertFalse(node3.isExprResult());
1383:       assertFalse(node3.isCall());
1384:       assertFalse(node3.isAdd());
1385:       assertFalse(node3.isNew());
1386:       assertFalse(node3.isVar());
1387:       assertFalse(node3.isVoid());
1388:       assertFalse(node3.isTrue());
1389:       assertFalse(node3.isDefaultCase());
1390:       assertFalse(node3.isDo());
1391:       assertFalse(node3.isEmpty());
1392:       
1393:       Node node4 = node3.cloneTree();
1394:       assertFalse(node0.equals((Object)node2));
1395:       assertFalse(node0.equals((Object)node1));
1396:       assertFalse(node1.equals((Object)node0));
1397:       assertFalse(node1.equals((Object)node3));
1398:       assertFalse(node1.equals((Object)node2));
1399:       assertFalse(node3.equals((Object)node2));
1400:       assertFalse(node3.equals((Object)node1));
1401:       assertFalse(node4.equals((Object)node1));
1402:       assertFalse(node4.equals((Object)node0));
1403:       assertFalse(node4.equals((Object)node3));
1404:       assertFalse(node4.equals((Object)node2));
1405:       assertEquals(29, Node.JSDOC_INFO_PROP);
1406:       assertEquals(47, Node.IS_DISPATCHER);
1407:       assertEquals(56, Node.CHANGE_TIME);
1408:       assertEquals(37, Node.OPT_ARG_NAME);
1409:       assertEquals(2, Node.POST_FLAG);
1410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1411:       assertEquals(49, Node.DIRECT_EVAL);
1412:       assertEquals(30, Node.VAR_ARGS_NAME);
1413:       assertEquals(36, Node.QUOTED_PROP);
1414:       assertEquals(57, Node.LAST_PROP);
1415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1416:       assertEquals(53, Node.INPUT_ID);
1417:       assertEquals(52, Node.LENGTH);
1418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1419:       assertEquals(8, Node.FLAG_NO_THROWS);
1420:       assertEquals(39, Node.EMPTY_BLOCK);
1421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1422:       assertEquals(55, Node.INFERRED_FUNCTION);
1423:       assertEquals(50, Node.FREE_CALL);
1424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1425:       assertEquals(57, Node.REFLECTED_OBJECT);
1426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1428:       assertEquals(48, Node.DIRECTIVES);
1429:       assertEquals(4095, Node.COLUMN_MASK);
1430:       assertEquals(40, Node.ORIGINALNAME_PROP);
1431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1432:       assertEquals(1, Node.DECR_FLAG);
1433:       assertEquals(43, Node.IS_CONSTANT_NAME);
1434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1435:       assertEquals(12, Node.COLUMN_BITS);
1436:       assertEquals(46, Node.IS_NAMESPACE);
1437:       assertEquals(54, Node.SLASH_V);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1441:       assertEquals(46, Node.IS_NAMESPACE);
1442:       assertEquals(56, Node.CHANGE_TIME);
1443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1444:       assertEquals(37, Node.OPT_ARG_NAME);
1445:       assertEquals(32, Node.INCRDECR_PROP);
1446:       assertEquals(1, Node.DECR_FLAG);
1447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1448:       assertEquals(29, Node.JSDOC_INFO_PROP);
1449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1450:       assertEquals(53, Node.INPUT_ID);
1451:       assertEquals(52, Node.LENGTH);
1452:       assertEquals(54, Node.SLASH_V);
1453:       assertEquals(43, Node.IS_CONSTANT_NAME);
1454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1455:       assertEquals(57, Node.LAST_PROP);
1456:       assertEquals(40, Node.ORIGINALNAME_PROP);
1457:       assertEquals(47, Node.IS_DISPATCHER);
1458:       assertEquals(2, Node.POST_FLAG);
1459:       assertEquals(30, Node.VAR_ARGS_NAME);
1460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1461:       assertEquals(39, Node.EMPTY_BLOCK);
1462:       assertEquals(48, Node.DIRECTIVES);
1463:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1465:       assertEquals(55, Node.INFERRED_FUNCTION);
1466:       assertEquals(36, Node.QUOTED_PROP);
1467:       assertEquals(57, Node.REFLECTED_OBJECT);
1468:       assertEquals(8, Node.FLAG_NO_THROWS);
1469:       assertEquals(50, Node.FREE_CALL);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1472:       assertEquals(49, Node.DIRECT_EVAL);
1473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1474:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1475:       assertEquals(12, Node.COLUMN_BITS);
1476:       assertEquals(4095, Node.COLUMN_MASK);
1477:       assertEquals(48, Node.DIRECTIVES);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(8, Node.FLAG_NO_THROWS);
1480:       assertEquals(40, Node.ORIGINALNAME_PROP);
1481:       assertEquals(4095, Node.COLUMN_MASK);
1482:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1483:       assertEquals(54, Node.SLASH_V);
1484:       assertEquals(43, Node.IS_CONSTANT_NAME);
1485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1487:       assertEquals(1, Node.DECR_FLAG);
1488:       assertEquals(50, Node.FREE_CALL);
1489:       assertEquals(32, Node.INCRDECR_PROP);
1490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1491:       assertEquals(37, Node.OPT_ARG_NAME);
1492:       assertEquals(2, Node.POST_FLAG);
1493:       assertEquals(46, Node.IS_NAMESPACE);
1494:       assertEquals(56, Node.CHANGE_TIME);
1495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1496:       assertEquals(12, Node.COLUMN_BITS);
1497:       assertEquals(47, Node.IS_DISPATCHER);
1498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1499:       assertEquals(49, Node.DIRECT_EVAL);
1500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1501:       assertEquals(52, Node.LENGTH);
1502:       assertEquals(57, Node.LAST_PROP);
1503:       assertEquals(30, Node.VAR_ARGS_NAME);
1504:       assertEquals(36, Node.QUOTED_PROP);
1505:       assertEquals(57, Node.REFLECTED_OBJECT);
1506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1507:       assertEquals(55, Node.INFERRED_FUNCTION);
1508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1509:       assertEquals(29, Node.JSDOC_INFO_PROP);
1510:       assertEquals(53, Node.INPUT_ID);
1511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1512:       assertEquals(39, Node.EMPTY_BLOCK);
1513:       assertEquals(37, Node.OPT_ARG_NAME);
1514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1515:       assertEquals(56, Node.CHANGE_TIME);
1516:       assertEquals(47, Node.IS_DISPATCHER);
1517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1518:       assertEquals(2, Node.POST_FLAG);
1519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1520:       assertEquals(46, Node.IS_NAMESPACE);
1521:       assertEquals(49, Node.DIRECT_EVAL);
1522:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1523:       assertEquals(43, Node.IS_CONSTANT_NAME);
1524:       assertEquals(54, Node.SLASH_V);
1525:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1526:       assertEquals(12, Node.COLUMN_BITS);
1527:       assertEquals(32, Node.INCRDECR_PROP);
1528:       assertEquals(1, Node.DECR_FLAG);
1529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1530:       assertEquals(8, Node.FLAG_NO_THROWS);
1531:       assertEquals(39, Node.EMPTY_BLOCK);
1532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1534:       assertEquals(50, Node.FREE_CALL);
1535:       assertEquals(40, Node.ORIGINALNAME_PROP);
1536:       assertEquals(4095, Node.COLUMN_MASK);
1537:       assertEquals(57, Node.REFLECTED_OBJECT);
1538:       assertEquals(48, Node.DIRECTIVES);
1539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1540:       assertEquals(53, Node.INPUT_ID);
1541:       assertEquals(52, Node.LENGTH);
1542:       assertEquals(36, Node.QUOTED_PROP);
1543:       assertEquals(30, Node.VAR_ARGS_NAME);
1544:       assertEquals(55, Node.INFERRED_FUNCTION);
1545:       assertEquals(29, Node.JSDOC_INFO_PROP);
1546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1548:       assertEquals(57, Node.LAST_PROP);
1549:       assertNotSame(node0, node2);
1550:       assertNotSame(node0, node4);
1551:       assertSame(node0, node3);
1552:       assertNotSame(node3, node2);
1553:       assertNotSame(node3, node4);
1554:       assertSame(node3, node0);
1555:       assertNotSame(node4, node0);
1556:       assertNotSame(node4, node3);
1557:       assertNotSame(node4, node2);
1558:       assertFalse(node0.isSetterDef());
1559:       assertFalse(node0.isNull());
1560:       assertFalse(node0.isStringKey());
1561:       assertFalse(node0.isParamList());
1562:       assertFalse(node0.isName());
1563:       assertEquals(0, node0.getChildCount());
1564:       assertEquals(254, node0.getType());
1565:       assertFalse(node0.isVar());
1566:       assertFalse(node0.isCatch());
1567:       assertFalse(node0.isBlock());
1568:       assertFalse(node0.isCall());
1569:       assertEquals(37, node0.getLineno());
1570:       assertFalse(node0.isDefaultCase());
1571:       assertFalse(node0.isTrue());
1572:       assertFalse(node0.isNew());
1573:       assertFalse(node0.isDo());
1574:       assertFalse(node0.isVoid());
1575:       assertFalse(node0.isAdd());
1576:       assertFalse(node0.isOr());
1577:       assertFalse(node0.isDec());
1578:       assertFalse(node0.hasChildren());
1579:       assertFalse(node0.isGetElem());
1580:       assertFalse(node0.isDelProp());
1581:       assertFalse(node0.isCast());
1582:       assertFalse(node0.isReturn());
1583:       assertFalse(node0.isContinue());
1584:       assertFalse(node0.isAssign());
1585:       assertFalse(node0.isTypeOf());
1586:       assertFalse(node0.isFunction());
1587:       assertFalse(node0.isString());
1588:       assertFalse(node0.isWhile());
1589:       assertFalse(node0.isAnd());
1590:       assertFalse(node0.isDebugger());
1591:       assertFalse(node0.isNot());
1592:       assertFalse(node0.isObjectLit());
1593:       assertFalse(node0.isBreak());
1594:       assertFalse(node0.isThis());
1595:       assertFalse(node0.isThrow());
1596:       assertFalse(node0.isGetProp());
1597:       assertFalse(node0.isInstanceOf());
1598:       assertFalse(node0.isHook());
1599:       assertFalse(node0.isFalse());
1600:       assertFalse(node0.isWith());
1601:       assertFalse(node0.isComma());
1602:       assertFalse(node0.isExprResult());
1603:       assertFalse(node0.isInc());
1604:       assertFalse(node0.isIn());
1605:       assertFalse(node0.isNumber());
1606:       assertFalse(node0.isIf());
1607:       assertFalse(node0.isNE());
1608:       assertFalse(node0.isEmpty());
1609:       assertFalse(node0.isFor());
1610:       assertFalse(node0.isAssignAdd());
1611:       assertFalse(node0.isLabelName());
1612:       assertFalse(node0.isArrayLit());
1613:       assertFalse(node0.isLabel());
1614:       assertFalse(node0.hasMoreThanOneChild());
1615:       assertFalse(node0.isRegExp());
1616:       assertFalse(node0.isScript());
1617:       assertFalse(node0.isCase());
1618:       assertFalse(node0.isSwitch());
1619:       assertFalse(node0.isTry());
1620:       assertEquals(155647, node0.getSourcePosition());
1621:       assertFalse(node0.hasOneChild());
1622:       assertFalse(node0.isGetterDef());
1623:       assertEquals(4095, node0.getCharno());
1624:       assertFalse(node1.isCatch());
1625:       assertFalse(node1.isSetterDef());
1626:       assertFalse(node1.isName());
1627:       assertFalse(node1.isParamList());
1628:       assertFalse(node1.isStringKey());
1629:       assertFalse(node1.isDebugger());
1630:       assertFalse(node1.isNull());
1631:       assertFalse(node1.isTrue());
1632:       assertFalse(node1.isArrayLit());
1633:       assertFalse(node1.isNew());
1634:       assertFalse(node1.isEmpty());
1635:       assertFalse(node1.isAdd());
1636:       assertFalse(node1.isDefaultCase());
1637:       assertFalse(node1.isDo());
1638:       assertEquals(37, node1.getLineno());
1639:       assertFalse(node1.isFunction());
1640:       assertFalse(node1.isVar());
1641:       assertFalse(node1.isIn());
1642:       assertEquals(1, node1.getChildCount());
1643:       assertFalse(node1.hasMoreThanOneChild());
1644:       assertFalse(node1.isCase());
1645:       assertTrue(node1.hasChildren());
1646:       assertFalse(node1.isGetterDef());
1647:       assertFalse(node1.isIf());
1648:       assertFalse(node1.isSwitch());
1649:       assertFalse(node1.isLabelName());
1650:       assertEquals(4095, node1.getCharno());
1651:       assertFalse(node1.isNumber());
1652:       assertFalse(node1.isNE());
1653:       assertFalse(node1.isTry());
1654:       assertEquals(155647, node1.getSourcePosition());
1655:       assertFalse(node1.isScript());
1656:       assertEquals((-2145), node1.getType());
1657:       assertFalse(node1.isWith());
1658:       assertFalse(node1.isRegExp());
1659:       assertFalse(node1.isFor());
1660:       assertFalse(node1.isThis());
1661:       assertFalse(node1.isHook());
1662:       assertFalse(node1.isBlock());
1663:       assertFalse(node1.isInstanceOf());
1664:       assertFalse(node1.isObjectLit());
1665:       assertFalse(node1.isGetProp());
1666:       assertFalse(node1.isBreak());
1667:       assertFalse(node1.isNot());
1668:       assertFalse(node1.isAnd());
1669:       assertFalse(node1.isCast());
1670:       assertFalse(node1.isInc());
1671:       assertFalse(node1.isFalse());
1672:       assertFalse(node1.isThrow());
1673:       assertFalse(node1.isLabel());
1674:       assertFalse(node1.isOr());
1675:       assertFalse(node1.isAssignAdd());
1676:       assertFalse(node1.isContinue());
1677:       assertFalse(node1.isString());
1678:       assertFalse(node1.isDelProp());
1679:       assertFalse(node1.isVoid());
1680:       assertFalse(node1.isExprResult());
1681:       assertFalse(node1.isGetElem());
1682:       assertFalse(node1.isCall());
1683:       assertFalse(node1.isDec());
1684:       assertFalse(node1.isWhile());
1685:       assertFalse(node1.isAssign());
1686:       assertFalse(node1.isTypeOf());
1687:       assertFalse(node1.isComma());
1688:       assertTrue(node1.hasOneChild());
1689:       assertFalse(node1.isReturn());
1690:       assertFalse(node3.isOr());
1691:       assertFalse(node3.isAssignAdd());
1692:       assertFalse(node3.isReturn());
1693:       assertFalse(node3.isLabel());
1694:       assertFalse(node3.isAssign());
1695:       assertFalse(node3.isLabelName());
1696:       assertFalse(node3.isGetElem());
1697:       assertFalse(node3.isDec());
1698:       assertFalse(node3.hasChildren());
1699:       assertFalse(node3.isCast());
1700:       assertFalse(node3.hasMoreThanOneChild());
1701:       assertFalse(node3.isTypeOf());
1702:       assertFalse(node3.isContinue());
1703:       assertFalse(node3.isBlock());
1704:       assertFalse(node3.hasOneChild());
1705:       assertFalse(node3.isStringKey());
1706:       assertFalse(node3.isWhile());
1707:       assertFalse(node3.isNot());
1708:       assertFalse(node3.isScript());
1709:       assertFalse(node3.isObjectLit());
1710:       assertFalse(node3.isNumber());
1711:       assertFalse(node3.isThis());
1712:       assertFalse(node3.isAnd());
1713:       assertFalse(node3.isWith());
1714:       assertFalse(node3.isCatch());
1715:       assertEquals(37, node3.getLineno());
1716:       assertFalse(node3.isRegExp());
1717:       assertFalse(node3.isFunction());
1718:       assertFalse(node3.isInstanceOf());
1719:       assertFalse(node3.isFalse());
1720:       assertEquals(254, node3.getType());
1721:       assertFalse(node3.isThrow());
1722:       assertFalse(node3.isSetterDef());
1723:       assertFalse(node3.isInc());
1724:       assertFalse(node3.isIn());
1725:       assertFalse(node3.isNE());
1726:       assertFalse(node3.isIf());
1727:       assertFalse(node3.isFor());
1728:       assertFalse(node3.isDelProp());
1729:       assertFalse(node3.isTry());
1730:       assertEquals(155647, node3.getSourcePosition());
1731:       assertFalse(node3.isHook());
1732:       assertFalse(node3.isArrayLit());
1733:       assertFalse(node3.isDebugger());
1734:       assertFalse(node3.isSwitch());
1735:       assertFalse(node3.isGetterDef());
1736:       assertFalse(node3.isCase());
1737:       assertEquals(4095, node3.getCharno());
1738:       assertFalse(node3.isString());
1739:       assertEquals(0, node3.getChildCount());
1740:       assertFalse(node3.isGetProp());
1741:       assertFalse(node3.isNull());
1742:       assertFalse(node3.isParamList());
1743:       assertFalse(node3.isName());
1744:       assertFalse(node3.isBreak());
1745:       assertFalse(node3.isComma());
1746:       assertFalse(node3.isExprResult());
1747:       assertFalse(node3.isCall());
1748:       assertFalse(node3.isAdd());
1749:       assertFalse(node3.isNew());
1750:       assertFalse(node3.isVar());
1751:       assertFalse(node3.isVoid());
1752:       assertFalse(node3.isTrue());
1753:       assertFalse(node3.isDefaultCase());
1754:       assertFalse(node3.isDo());
1755:       assertFalse(node3.isEmpty());
1756:       assertFalse(node4.isComma());
1757:       assertFalse(node4.isThis());
1758:       assertFalse(node4.isAnd());
1759:       assertFalse(node4.isWith());
1760:       assertFalse(node4.isFalse());
1761:       assertFalse(node4.isInstanceOf());
1762:       assertFalse(node4.isBreak());
1763:       assertFalse(node4.isExprResult());
1764:       assertFalse(node4.isSwitch());
1765:       assertEquals(4095, node4.getCharno());
1766:       assertFalse(node4.isHook());
1767:       assertFalse(node4.isNot());
1768:       assertFalse(node4.isCase());
1769:       assertFalse(node4.isString());
1770:       assertFalse(node4.isObjectLit());
1771:       assertFalse(node4.isNumber());
1772:       assertFalse(node4.isScript());
1773:       assertFalse(node4.hasOneChild());
1774:       assertFalse(node4.isGetProp());
1775:       assertFalse(node4.isIn());
1776:       assertFalse(node4.isNE());
1777:       assertFalse(node4.isIf());
1778:       assertFalse(node4.isContinue());
1779:       assertFalse(node4.isCast());
1780:       assertFalse(node4.hasMoreThanOneChild());
1781:       assertEquals(254, node4.getType());
1782:       assertFalse(node4.isFunction());
1783:       assertFalse(node4.isThrow());
1784:       assertFalse(node4.isSetterDef());
1785:       assertFalse(node4.isInc());
1786:       assertEquals(0, node4.getChildCount());
1787:       assertFalse(node4.isParamList());
1788:       assertFalse(node4.isNull());
1789:       assertFalse(node4.isStringKey());
1790:       assertEquals(37, node4.getLineno());
1791:       assertFalse(node4.isName());
1792:       assertFalse(node4.isCatch());
1793:       assertFalse(node4.isCall());
1794:       assertFalse(node4.isTry());
1795:       assertEquals(155647, node4.getSourcePosition());
1796:       assertFalse(node4.isRegExp());
1797:       assertFalse(node4.isDebugger());
1798:       assertFalse(node4.isBlock());
1799:       assertFalse(node4.isFor());
1800:       assertFalse(node4.isWhile());
1801:       assertFalse(node4.isGetterDef());
1802:       assertFalse(node4.isOr());
1803:       assertFalse(node4.isAssignAdd());
1804:       assertFalse(node4.isLabel());
1805:       assertFalse(node4.isDec());
1806:       assertFalse(node4.hasChildren());
1807:       assertFalse(node4.isReturn());
1808:       assertFalse(node4.isAssign());
1809:       assertFalse(node4.isLabelName());
1810:       assertFalse(node4.isDelProp());
1811:       assertFalse(node4.isTypeOf());
1812:       assertFalse(node4.isArrayLit());
1813:       assertFalse(node4.isGetElem());
1814:       assertFalse(node4.isAdd());
1815:       assertFalse(node4.isNew());
1816:       assertFalse(node4.isVoid());
1817:       assertFalse(node4.isVar());
1818:       assertFalse(node4.isTrue());
1819:       assertFalse(node4.isDo());
1820:       assertFalse(node4.isEmpty());
1821:       assertFalse(node4.isDefaultCase());
1822:       
1823:       String string1 = node3.getString();
1824:       assertFalse(node0.equals((Object)node2));
1825:       assertFalse(node0.equals((Object)node4));
1826:       assertFalse(node0.equals((Object)node1));
1827:       assertFalse(node1.equals((Object)node0));
1828:       assertFalse(node1.equals((Object)node3));
1829:       assertFalse(node1.equals((Object)node2));
1830:       assertFalse(node1.equals((Object)node4));
1831:       assertFalse(node3.equals((Object)node2));
1832:       assertFalse(node3.equals((Object)node4));
1833:       assertFalse(node3.equals((Object)node1));
1834:       assertFalse(string1.equals((Object)string0));
1835:       assertEquals(29, Node.JSDOC_INFO_PROP);
1836:       assertEquals(47, Node.IS_DISPATCHER);
1837:       assertEquals(56, Node.CHANGE_TIME);
1838:       assertEquals(37, Node.OPT_ARG_NAME);
1839:       assertEquals(2, Node.POST_FLAG);
1840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1841:       assertEquals(49, Node.DIRECT_EVAL);
1842:       assertEquals(30, Node.VAR_ARGS_NAME);
1843:       assertEquals(36, Node.QUOTED_PROP);
1844:       assertEquals(57, Node.LAST_PROP);
1845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1846:       assertEquals(53, Node.INPUT_ID);
1847:       assertEquals(52, Node.LENGTH);
1848:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1849:       assertEquals(8, Node.FLAG_NO_THROWS);
1850:       assertEquals(39, Node.EMPTY_BLOCK);
1851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1852:       assertEquals(55, Node.INFERRED_FUNCTION);
1853:       assertEquals(50, Node.FREE_CALL);
1854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1855:       assertEquals(57, Node.REFLECTED_OBJECT);
1856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1857:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1858:       assertEquals(48, Node.DIRECTIVES);
1859:       assertEquals(4095, Node.COLUMN_MASK);
1860:       assertEquals(40, Node.ORIGINALNAME_PROP);
1861:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1862:       assertEquals(1, Node.DECR_FLAG);
1863:       assertEquals(43, Node.IS_CONSTANT_NAME);
1864:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1865:       assertEquals(12, Node.COLUMN_BITS);
1866:       assertEquals(46, Node.IS_NAMESPACE);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(32, Node.INCRDECR_PROP);
1869:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1870:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1871:       assertEquals(46, Node.IS_NAMESPACE);
1872:       assertEquals(56, Node.CHANGE_TIME);
1873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1874:       assertEquals(37, Node.OPT_ARG_NAME);
1875:       assertEquals(32, Node.INCRDECR_PROP);
1876:       assertEquals(1, Node.DECR_FLAG);
1877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1878:       assertEquals(29, Node.JSDOC_INFO_PROP);
1879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1880:       assertEquals(53, Node.INPUT_ID);
1881:       assertEquals(52, Node.LENGTH);
1882:       assertEquals(54, Node.SLASH_V);
1883:       assertEquals(43, Node.IS_CONSTANT_NAME);
1884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1885:       assertEquals(57, Node.LAST_PROP);
1886:       assertEquals(40, Node.ORIGINALNAME_PROP);
1887:       assertEquals(47, Node.IS_DISPATCHER);
1888:       assertEquals(2, Node.POST_FLAG);
1889:       assertEquals(30, Node.VAR_ARGS_NAME);
1890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1891:       assertEquals(39, Node.EMPTY_BLOCK);
1892:       assertEquals(48, Node.DIRECTIVES);
1893:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1895:       assertEquals(55, Node.INFERRED_FUNCTION);
1896:       assertEquals(36, Node.QUOTED_PROP);
1897:       assertEquals(57, Node.REFLECTED_OBJECT);
1898:       assertEquals(8, Node.FLAG_NO_THROWS);
1899:       assertEquals(50, Node.FREE_CALL);
1900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1902:       assertEquals(49, Node.DIRECT_EVAL);
1903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(12, Node.COLUMN_BITS);
1906:       assertEquals(4095, Node.COLUMN_MASK);
1907:       assertEquals(48, Node.DIRECTIVES);
1908:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1909:       assertEquals(8, Node.FLAG_NO_THROWS);
1910:       assertEquals(40, Node.ORIGINALNAME_PROP);
1911:       assertEquals(4095, Node.COLUMN_MASK);
1912:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1913:       assertEquals(54, Node.SLASH_V);
1914:       assertEquals(43, Node.IS_CONSTANT_NAME);
1915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1916:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1917:       assertEquals(1, Node.DECR_FLAG);
1918:       assertEquals(50, Node.FREE_CALL);
1919:       assertEquals(32, Node.INCRDECR_PROP);
1920:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1921:       assertEquals(37, Node.OPT_ARG_NAME);
1922:       assertEquals(2, Node.POST_FLAG);
1923:       assertEquals(46, Node.IS_NAMESPACE);
1924:       assertEquals(56, Node.CHANGE_TIME);
1925:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1926:       assertEquals(12, Node.COLUMN_BITS);
1927:       assertEquals(47, Node.IS_DISPATCHER);
1928:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1929:       assertEquals(49, Node.DIRECT_EVAL);
1930:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1931:       assertEquals(52, Node.LENGTH);
1932:       assertEquals(57, Node.LAST_PROP);
1933:       assertEquals(30, Node.VAR_ARGS_NAME);
1934:       assertEquals(36, Node.QUOTED_PROP);
1935:       assertEquals(57, Node.REFLECTED_OBJECT);
1936:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1937:       assertEquals(55, Node.INFERRED_FUNCTION);
1938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1939:       assertEquals(29, Node.JSDOC_INFO_PROP);
1940:       assertEquals(53, Node.INPUT_ID);
1941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1942:       assertEquals(39, Node.EMPTY_BLOCK);
1943:       assertEquals("(|", string1);
1944:       assertNotSame(node0, node2);
1945:       assertNotSame(node0, node4);
1946:       assertSame(node0, node3);
1947:       assertNotSame(node3, node2);
1948:       assertNotSame(node3, node4);
1949:       assertSame(node3, node0);
1950:       assertFalse(node0.isSetterDef());
1951:       assertFalse(node0.isNull());
1952:       assertFalse(node0.isStringKey());
1953:       assertFalse(node0.isParamList());
1954:       assertFalse(node0.isName());
1955:       assertEquals(0, node0.getChildCount());
1956:       assertEquals(254, node0.getType());
1957:       assertFalse(node0.isVar());
1958:       assertFalse(node0.isCatch());
1959:       assertFalse(node0.isBlock());
1960:       assertFalse(node0.isCall());
1961:       assertEquals(37, node0.getLineno());
1962:       assertFalse(node0.isDefaultCase());
1963:       assertFalse(node0.isTrue());
1964:       assertFalse(node0.isNew());
1965:       assertFalse(node0.isDo());
1966:       assertFalse(node0.isVoid());
1967:       assertFalse(node0.isAdd());
1968:       assertFalse(node0.isOr());
1969:       assertFalse(node0.isDec());
1970:       assertFalse(node0.hasChildren());
1971:       assertFalse(node0.isGetElem());
1972:       assertFalse(node0.isDelProp());
1973:       assertFalse(node0.isCast());
1974:       assertFalse(node0.isReturn());
1975:       assertFalse(node0.isContinue());
1976:       assertFalse(node0.isAssign());
1977:       assertFalse(node0.isTypeOf());
1978:       assertFalse(node0.isFunction());
1979:       assertFalse(node0.isString());
1980:       assertFalse(node0.isWhile());
1981:       assertFalse(node0.isAnd());
1982:       assertFalse(node0.isDebugger());
1983:       assertFalse(node0.isNot());
1984:       assertFalse(node0.isObjectLit());
1985:       assertFalse(node0.isBreak());
1986:       assertFalse(node0.isThis());
1987:       assertFalse(node0.isThrow());
1988:       assertFalse(node0.isGetProp());
1989:       assertFalse(node0.isInstanceOf());
1990:       assertFalse(node0.isHook());
1991:       assertFalse(node0.isFalse());
1992:       assertFalse(node0.isWith());
1993:       assertFalse(node0.isComma());
1994:       assertFalse(node0.isExprResult());
1995:       assertFalse(node0.isInc());
1996:       assertFalse(node0.isIn());
1997:       assertFalse(node0.isNumber());
1998:       assertFalse(node0.isIf());
1999:       assertFalse(node0.isNE());
2000:       assertFalse(node0.isEmpty());
2001:       assertFalse(node0.isFor());
2002:       assertFalse(node0.isAssignAdd());
2003:       assertFalse(node0.isLabelName());
2004:       assertFalse(node0.isArrayLit());
2005:       
2006:       boolean boolean1 = node3.isOptionalArg();
2007:       assertFalse(node0.equals((Object)node2));
2008:       assertFalse(node0.equals((Object)node4));
2009:       assertFalse(node0.equals((Object)node1));
2010:       assertFalse(node1.equals((Object)node0));
2011:       assertFalse(node1.equals((Object)node3));
2012:       assertFalse(node1.equals((Object)node2));
2013:       assertFalse(node1.equals((Object)node4));
2014:       assertFalse(node3.equals((Object)node2));
2015:       assertFalse(node3.equals((Object)node4));
2016:       assertFalse(node3.equals((Object)node1));
2017:       assertTrue(boolean1 == boolean0);
2018:       assertEquals(29, Node.JSDOC_INFO_PROP);
2019:       assertEquals(47, Node.IS_DISPATCHER);
2020:       assertEquals(56, Node.CHANGE_TIME);
2021:       assertEquals(37, Node.OPT_ARG_NAME);
2022:       assertEquals(2, Node.POST_FLAG);
2023:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2024:       assertEquals(49, Node.DIRECT_EVAL);
2025:       assertEquals(30, Node.VAR_ARGS_NAME);
2026:       assertEquals(36, Node.QUOTED_PROP);
2027:       assertEquals(57, Node.LAST_PROP);
2028:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2029:       assertEquals(53, Node.INPUT_ID);
2030:       assertEquals(52, Node.LENGTH);
2031:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2032:       assertEquals(8, Node.FLAG_NO_THROWS);
2033:       assertEquals(39, Node.EMPTY_BLOCK);
2034:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2035:       assertEquals(55, Node.INFERRED_FUNCTION);
2036:       assertEquals(50, Node.FREE_CALL);
2037:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2038:       assertEquals(57, Node.REFLECTED_OBJECT);
2039:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2040:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2041:       assertEquals(48, Node.DIRECTIVES);
2042:       assertEquals(4095, Node.COLUMN_MASK);
2043:       assertEquals(40, Node.ORIGINALNAME_PROP);
2044:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2045:       assertEquals(1, Node.DECR_FLAG);
2046:       assertEquals(43, Node.IS_CONSTANT_NAME);
2047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2048:       assertEquals(12, Node.COLUMN_BITS);
2049:       assertEquals(46, Node.IS_NAMESPACE);
2050:       assertEquals(54, Node.SLASH_V);
2051:       assertEquals(32, Node.INCRDECR_PROP);
2052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2054:       assertEquals(46, Node.IS_NAMESPACE);
2055:       assertEquals(56, Node.CHANGE_TIME);
2056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2057:       assertEquals(37, Node.OPT_ARG_NAME);
2058:       assertEquals(32, Node.INCRDECR_PROP);
2059:       assertEquals(1, Node.DECR_FLAG);
2060:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2061:       assertEquals(29, Node.JSDOC_INFO_PROP);
2062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2063:       assertEquals(53, Node.INPUT_ID);
2064:       assertEquals(52, Node.LENGTH);
2065:       assertEquals(54, Node.SLASH_V);
2066:       assertEquals(43, Node.IS_CONSTANT_NAME);
2067:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2068:       assertEquals(57, Node.LAST_PROP);
2069:       assertEquals(40, Node.ORIGINALNAME_PROP);
2070:       assertEquals(47, Node.IS_DISPATCHER);
2071:       assertEquals(2, Node.POST_FLAG);
2072:       assertEquals(30, Node.VAR_ARGS_NAME);
2073:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2074:       assertEquals(39, Node.EMPTY_BLOCK);
2075:       assertEquals(48, Node.DIRECTIVES);
2076:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2078:       assertEquals(55, Node.INFERRED_FUNCTION);
2079:       assertEquals(36, Node.QUOTED_PROP);
2080:       assertEquals(57, Node.REFLECTED_OBJECT);
2081:       assertEquals(8, Node.FLAG_NO_THROWS);
2082:       assertEquals(50, Node.FREE_CALL);
2083:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2084:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2085:       assertEquals(49, Node.DIRECT_EVAL);
2086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2087:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2088:       assertEquals(12, Node.COLUMN_BITS);
2089:       assertEquals(4095, Node.COLUMN_MASK);
2090:       assertEquals(48, Node.DIRECTIVES);
2091:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2092:       assertEquals(8, Node.FLAG_NO_THROWS);
2093:       assertEquals(40, Node.ORIGINALNAME_PROP);
2094:       assertEquals(4095, Node.COLUMN_MASK);
2095:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2096:       assertEquals(54, Node.SLASH_V);
2097:       assertEquals(43, Node.IS_CONSTANT_NAME);
2098:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2099:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2100:       assertEquals(1, Node.DECR_FLAG);
2101:       assertEquals(50, Node.FREE_CALL);
2102:       assertEquals(32, Node.INCRDECR_PROP);
2103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2104:       assertEquals(37, Node.OPT_ARG_NAME);
2105:       assertEquals(2, Node.POST_FLAG);
2106:       assertEquals(46, Node.IS_NAMESPACE);
2107:       assertEquals(56, Node.CHANGE_TIME);
2108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2109:       assertEquals(12, Node.COLUMN_BITS);
2110:       assertEquals(47, Node.IS_DISPATCHER);
2111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2114:       assertEquals(52, Node.LENGTH);
2115:       assertEquals(57, Node.LAST_PROP);
2116:       assertEquals(30, Node.VAR_ARGS_NAME);
2117:       assertEquals(36, Node.QUOTED_PROP);
2118:       assertEquals(57, Node.REFLECTED_OBJECT);
2119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2120:       assertEquals(55, Node.INFERRED_FUNCTION);
2121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2122:       assertEquals(29, Node.JSDOC_INFO_PROP);
2123:       assertEquals(53, Node.INPUT_ID);
2124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2125:       assertEquals(39, Node.EMPTY_BLOCK);
2126:       assertFalse(boolean1);
2127:       assertNotSame(node0, node2);
2128:       assertNotSame(node0, node4);
2129:       assertSame(node0, node3);
2130:       assertNotSame(node3, node2);
2131:       assertNotSame(node3, node4);
2132:       assertSame(node3, node0);
2133:       
2134:       node3.setQuotedString();
2135:       assertFalse(node0.equals((Object)node2));
2136:       assertFalse(node0.equals((Object)node4));
2137:       assertFalse(node0.equals((Object)node1));
2138:       assertFalse(node1.equals((Object)node0));
2139:       assertFalse(node1.equals((Object)node3));
2140:       assertFalse(node1.equals((Object)node2));
2141:       assertFalse(node1.equals((Object)node4));
2142:       assertFalse(node3.equals((Object)node2));
2143:       assertFalse(node3.equals((Object)node4));
2144:       assertFalse(node3.equals((Object)node1));
2145:       assertEquals(29, Node.JSDOC_INFO_PROP);
2146:       assertEquals(47, Node.IS_DISPATCHER);
2147:       assertEquals(56, Node.CHANGE_TIME);
2148:       assertEquals(37, Node.OPT_ARG_NAME);
2149:       assertEquals(2, Node.POST_FLAG);
2150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2151:       assertEquals(49, Node.DIRECT_EVAL);
2152:       assertEquals(30, Node.VAR_ARGS_NAME);
2153:       assertEquals(36, Node.QUOTED_PROP);
2154:       assertEquals(57, Node.LAST_PROP);
2155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2156:       assertEquals(53, Node.INPUT_ID);
2157:       assertEquals(52, Node.LENGTH);
2158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2159:       assertEquals(8, Node.FLAG_NO_THROWS);
2160:       assertEquals(39, Node.EMPTY_BLOCK);
2161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2162:       assertEquals(55, Node.INFERRED_FUNCTION);
2163:       assertEquals(50, Node.FREE_CALL);
2164:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2165:       assertEquals(57, Node.REFLECTED_OBJECT);
2166:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2168:       assertEquals(48, Node.DIRECTIVES);
2169:       assertEquals(4095, Node.COLUMN_MASK);
2170:       assertEquals(40, Node.ORIGINALNAME_PROP);
2171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2172:       assertEquals(1, Node.DECR_FLAG);
2173:       assertEquals(43, Node.IS_CONSTANT_NAME);
2174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2175:       assertEquals(12, Node.COLUMN_BITS);
2176:       assertEquals(46, Node.IS_NAMESPACE);
2177:       assertEquals(54, Node.SLASH_V);
2178:       assertEquals(32, Node.INCRDECR_PROP);
2179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2181:       assertEquals(46, Node.IS_NAMESPACE);
2182:       assertEquals(56, Node.CHANGE_TIME);
2183:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2184:       assertEquals(37, Node.OPT_ARG_NAME);
2185:       assertEquals(32, Node.INCRDECR_PROP);
2186:       assertEquals(1, Node.DECR_FLAG);
2187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2188:       assertEquals(29, Node.JSDOC_INFO_PROP);
2189:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2190:       assertEquals(53, Node.INPUT_ID);
2191:       assertEquals(52, Node.LENGTH);
2192:       assertEquals(54, Node.SLASH_V);
2193:       assertEquals(43, Node.IS_CONSTANT_NAME);
2194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2195:       assertEquals(57, Node.LAST_PROP);
2196:       assertEquals(40, Node.ORIGINALNAME_PROP);
2197:       assertEquals(47, Node.IS_DISPATCHER);
2198:       assertEquals(2, Node.POST_FLAG);
2199:       assertEquals(30, Node.VAR_ARGS_NAME);
2200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2201:       assertEquals(39, Node.EMPTY_BLOCK);
2202:       assertEquals(48, Node.DIRECTIVES);
2203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2205:       assertEquals(55, Node.INFERRED_FUNCTION);
2206:       assertEquals(36, Node.QUOTED_PROP);
2207:       assertEquals(57, Node.REFLECTED_OBJECT);
2208:       assertEquals(8, Node.FLAG_NO_THROWS);
2209:       assertEquals(50, Node.FREE_CALL);
2210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2212:       assertEquals(49, Node.DIRECT_EVAL);
2213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2215:       assertEquals(12, Node.COLUMN_BITS);
2216:       assertEquals(4095, Node.COLUMN_MASK);
2217:       assertEquals(48, Node.DIRECTIVES);
2218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2219:       assertEquals(8, Node.FLAG_NO_THROWS);
2220:       assertEquals(40, Node.ORIGINALNAME_PROP);
2221:       assertEquals(4095, Node.COLUMN_MASK);
2222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2223:       assertEquals(54, Node.SLASH_V);
2224:       assertEquals(43, Node.IS_CONSTANT_NAME);
2225:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2227:       assertEquals(1, Node.DECR_FLAG);
2228:       assertEquals(50, Node.FREE_CALL);
2229:       assertEquals(32, Node.INCRDECR_PROP);
2230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2231:       assertEquals(37, Node.OPT_ARG_NAME);
2232:       assertEquals(2, Node.POST_FLAG);
2233:       assertEquals(46, Node.IS_NAMESPACE);
2234:       assertEquals(56, Node.CHANGE_TIME);
2235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2236:       assertEquals(12, Node.COLUMN_BITS);
2237:       assertEquals(47, Node.IS_DISPATCHER);
2238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2239:       assertEquals(49, Node.DIRECT_EVAL);
2240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2241:       assertEquals(52, Node.LENGTH);
2242:       assertEquals(57, Node.LAST_PROP);
2243:       assertEquals(30, Node.VAR_ARGS_NAME);
2244:       assertEquals(36, Node.QUOTED_PROP);
2245:       assertEquals(57, Node.REFLECTED_OBJECT);
2246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2247:       assertEquals(55, Node.INFERRED_FUNCTION);
2248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2249:       assertEquals(29, Node.JSDOC_INFO_PROP);
2250:       assertEquals(53, Node.INPUT_ID);
2251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2252:       assertEquals(39, Node.EMPTY_BLOCK);
2253:       assertNotSame(node0, node2);
2254:       assertNotSame(node0, node4);
2255:       assertSame(node0, node3);
2256:       assertNotSame(node3, node2);
2257:       assertNotSame(node3, node4);
2258:       assertSame(node3, node0);
2259:       
2260:       boolean boolean2 = node0.isDebugger();
2261:       assertFalse(node0.equals((Object)node2));
2262:       assertFalse(node0.equals((Object)node4));
2263:       assertFalse(node0.equals((Object)node1));
2264:       assertTrue(boolean2 == boolean1);
2265:       assertTrue(boolean2 == boolean0);
2266:       assertEquals(29, Node.JSDOC_INFO_PROP);
2267:       assertEquals(47, Node.IS_DISPATCHER);
2268:       assertEquals(56, Node.CHANGE_TIME);
2269:       assertEquals(37, Node.OPT_ARG_NAME);
2270:       assertEquals(2, Node.POST_FLAG);
2271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2272:       assertEquals(49, Node.DIRECT_EVAL);
2273:       assertEquals(30, Node.VAR_ARGS_NAME);
2274:       assertEquals(36, Node.QUOTED_PROP);
2275:       assertEquals(57, Node.LAST_PROP);
2276:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2277:       assertEquals(53, Node.INPUT_ID);
2278:       assertEquals(52, Node.LENGTH);
2279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2280:       assertEquals(8, Node.FLAG_NO_THROWS);
2281:       assertEquals(39, Node.EMPTY_BLOCK);
2282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2283:       assertEquals(55, Node.INFERRED_FUNCTION);
2284:       assertEquals(50, Node.FREE_CALL);
2285:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2286:       assertEquals(57, Node.REFLECTED_OBJECT);
2287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2289:       assertEquals(48, Node.DIRECTIVES);
2290:       assertEquals(4095, Node.COLUMN_MASK);
2291:       assertEquals(40, Node.ORIGINALNAME_PROP);
2292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2293:       assertEquals(1, Node.DECR_FLAG);
2294:       assertEquals(43, Node.IS_CONSTANT_NAME);
2295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2296:       assertEquals(12, Node.COLUMN_BITS);
2297:       assertEquals(46, Node.IS_NAMESPACE);
2298:       assertEquals(54, Node.SLASH_V);
2299:       assertEquals(32, Node.INCRDECR_PROP);
2300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2302:       assertFalse(boolean2);
2303:       assertNotSame(node0, node2);
2304:       assertNotSame(node0, node4);
2305:       assertSame(node0, node3);
2306:       
2307:       boolean boolean3 = node0.isDelProp();
2308:       assertFalse(node0.equals((Object)node2));
2309:       assertFalse(node0.equals((Object)node4));
2310:       assertFalse(node0.equals((Object)node1));
2311:       assertTrue(boolean3 == boolean2);
2312:       assertTrue(boolean3 == boolean1);
2313:       assertTrue(boolean3 == boolean0);
2314:       assertEquals(29, Node.JSDOC_INFO_PROP);
2315:       assertEquals(47, Node.IS_DISPATCHER);
2316:       assertEquals(56, Node.CHANGE_TIME);
2317:       assertEquals(37, Node.OPT_ARG_NAME);
2318:       assertEquals(2, Node.POST_FLAG);
2319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2320:       assertEquals(49, Node.DIRECT_EVAL);
2321:       assertEquals(30, Node.VAR_ARGS_NAME);
2322:       assertEquals(36, Node.QUOTED_PROP);
2323:       assertEquals(57, Node.LAST_PROP);
2324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2325:       assertEquals(53, Node.INPUT_ID);
2326:       assertEquals(52, Node.LENGTH);
2327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2328:       assertEquals(8, Node.FLAG_NO_THROWS);
2329:       assertEquals(39, Node.EMPTY_BLOCK);
2330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2331:       assertEquals(55, Node.INFERRED_FUNCTION);
2332:       assertEquals(50, Node.FREE_CALL);
2333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2334:       assertEquals(57, Node.REFLECTED_OBJECT);
2335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2337:       assertEquals(48, Node.DIRECTIVES);
2338:       assertEquals(4095, Node.COLUMN_MASK);
2339:       assertEquals(40, Node.ORIGINALNAME_PROP);
2340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2341:       assertEquals(1, Node.DECR_FLAG);
2342:       assertEquals(43, Node.IS_CONSTANT_NAME);
2343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2344:       assertEquals(12, Node.COLUMN_BITS);
2345:       assertEquals(46, Node.IS_NAMESPACE);
2346:       assertEquals(54, Node.SLASH_V);
2347:       assertEquals(32, Node.INCRDECR_PROP);
2348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2350:       assertFalse(boolean3);
2351:       assertNotSame(node0, node2);
2352:       assertNotSame(node0, node4);
2353:       assertSame(node0, node3);
2354:       
2355:       boolean boolean4 = node0.isName();
2356:       assertFalse(node0.equals((Object)node2));
2357:       assertFalse(node0.equals((Object)node4));
2358:       assertFalse(node0.equals((Object)node1));
2359:       assertTrue(boolean4 == boolean2);
2360:       assertTrue(boolean4 == boolean0);
2361:       assertTrue(boolean4 == boolean1);
2362:       assertTrue(boolean4 == boolean3);
2363:       assertEquals(29, Node.JSDOC_INFO_PROP);
2364:       assertEquals(47, Node.IS_DISPATCHER);
2365:       assertEquals(56, Node.CHANGE_TIME);
2366:       assertEquals(37, Node.OPT_ARG_NAME);
2367:       assertEquals(2, Node.POST_FLAG);
2368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2369:       assertEquals(49, Node.DIRECT_EVAL);
2370:       assertEquals(30, Node.VAR_ARGS_NAME);
2371:       assertEquals(36, Node.QUOTED_PROP);
2372:       assertEquals(57, Node.LAST_PROP);
2373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2374:       assertEquals(53, Node.INPUT_ID);
2375:       assertEquals(52, Node.LENGTH);
2376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2377:       assertEquals(8, Node.FLAG_NO_THROWS);
2378:       assertEquals(39, Node.EMPTY_BLOCK);
2379:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2380:       assertEquals(55, Node.INFERRED_FUNCTION);
2381:       assertEquals(50, Node.FREE_CALL);
2382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2383:       assertEquals(57, Node.REFLECTED_OBJECT);
2384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2386:       assertEquals(48, Node.DIRECTIVES);
2387:       assertEquals(4095, Node.COLUMN_MASK);
2388:       assertEquals(40, Node.ORIGINALNAME_PROP);
2389:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2390:       assertEquals(1, Node.DECR_FLAG);
2391:       assertEquals(43, Node.IS_CONSTANT_NAME);
2392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2393:       assertEquals(12, Node.COLUMN_BITS);
2394:       assertEquals(46, Node.IS_NAMESPACE);
2395:       assertEquals(54, Node.SLASH_V);
2396:       assertEquals(32, Node.INCRDECR_PROP);
2397:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2398:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2399:       assertFalse(boolean4);
2400:       assertNotSame(node0, node2);
2401:       assertNotSame(node0, node4);
2402:       assertSame(node0, node3);
2403:       
2404:       boolean boolean5 = node3.isLabel();
2405:       assertFalse(node0.equals((Object)node2));
2406:       assertFalse(node0.equals((Object)node4));
2407:       assertFalse(node0.equals((Object)node1));
2408:       assertFalse(node1.equals((Object)node0));
2409:       assertFalse(node1.equals((Object)node3));
2410:       assertFalse(node1.equals((Object)node2));
2411:       assertFalse(node1.equals((Object)node4));
2412:       assertFalse(node3.equals((Object)node2));
2413:       assertFalse(node3.equals((Object)node4));
2414:       assertFalse(node3.equals((Object)node1));
2415:       assertTrue(boolean5 == boolean4);
2416:       assertTrue(boolean5 == boolean0);
2417:       assertTrue(boolean5 == boolean2);
2418:       assertTrue(boolean5 == boolean1);
2419:       assertTrue(boolean5 == boolean3);
2420:       assertEquals(29, Node.JSDOC_INFO_PROP);
2421:       assertEquals(47, Node.IS_DISPATCHER);
2422:       assertEquals(56, Node.CHANGE_TIME);
2423:       assertEquals(37, Node.OPT_ARG_NAME);
2424:       assertEquals(2, Node.POST_FLAG);
2425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2426:       assertEquals(49, Node.DIRECT_EVAL);
2427:       assertEquals(30, Node.VAR_ARGS_NAME);
2428:       assertEquals(36, Node.QUOTED_PROP);
2429:       assertEquals(57, Node.LAST_PROP);
2430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2431:       assertEquals(53, Node.INPUT_ID);
2432:       assertEquals(52, Node.LENGTH);
2433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2434:       assertEquals(8, Node.FLAG_NO_THROWS);
2435:       assertEquals(39, Node.EMPTY_BLOCK);
2436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2437:       assertEquals(55, Node.INFERRED_FUNCTION);
2438:       assertEquals(50, Node.FREE_CALL);
2439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2440:       assertEquals(57, Node.REFLECTED_OBJECT);
2441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2443:       assertEquals(48, Node.DIRECTIVES);
2444:       assertEquals(4095, Node.COLUMN_MASK);
2445:       assertEquals(40, Node.ORIGINALNAME_PROP);
2446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2447:       assertEquals(1, Node.DECR_FLAG);
2448:       assertEquals(43, Node.IS_CONSTANT_NAME);
2449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2450:       assertEquals(12, Node.COLUMN_BITS);
2451:       assertEquals(46, Node.IS_NAMESPACE);
2452:       assertEquals(54, Node.SLASH_V);
2453:       assertEquals(32, Node.INCRDECR_PROP);
2454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2456:       assertEquals(46, Node.IS_NAMESPACE);
2457:       assertEquals(56, Node.CHANGE_TIME);
2458:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2459:       assertEquals(37, Node.OPT_ARG_NAME);
2460:       assertEquals(32, Node.INCRDECR_PROP);
2461:       assertEquals(1, Node.DECR_FLAG);
2462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2463:       assertEquals(29, Node.JSDOC_INFO_PROP);
2464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2465:       assertEquals(53, Node.INPUT_ID);
2466:       assertEquals(52, Node.LENGTH);
2467:       assertEquals(54, Node.SLASH_V);
2468:       assertEquals(43, Node.IS_CONSTANT_NAME);
2469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2470:       assertEquals(57, Node.LAST_PROP);
2471:       assertEquals(40, Node.ORIGINALNAME_PROP);
2472:       assertEquals(47, Node.IS_DISPATCHER);
2473:       assertEquals(2, Node.POST_FLAG);
2474:       assertEquals(30, Node.VAR_ARGS_NAME);
2475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2476:       assertEquals(39, Node.EMPTY_BLOCK);
2477:       assertEquals(48, Node.DIRECTIVES);
2478:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2480:       assertEquals(55, Node.INFERRED_FUNCTION);
2481:       assertEquals(36, Node.QUOTED_PROP);
2482:       assertEquals(57, Node.REFLECTED_OBJECT);
2483:       assertEquals(8, Node.FLAG_NO_THROWS);
2484:       assertEquals(50, Node.FREE_CALL);
2485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2486:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2487:       assertEquals(49, Node.DIRECT_EVAL);
2488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2490:       assertEquals(12, Node.COLUMN_BITS);
2491:       assertEquals(4095, Node.COLUMN_MASK);
2492:       assertEquals(48, Node.DIRECTIVES);
2493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2494:       assertEquals(8, Node.FLAG_NO_THROWS);
2495:       assertEquals(40, Node.ORIGINALNAME_PROP);
2496:       assertEquals(4095, Node.COLUMN_MASK);
2497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2498:       assertEquals(54, Node.SLASH_V);
2499:       assertEquals(43, Node.IS_CONSTANT_NAME);
2500:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2502:       assertEquals(1, Node.DECR_FLAG);
2503:       assertEquals(50, Node.FREE_CALL);
2504:       assertEquals(32, Node.INCRDECR_PROP);
2505:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2506:       assertEquals(37, Node.OPT_ARG_NAME);
2507:       assertEquals(2, Node.POST_FLAG);
2508:       assertEquals(46, Node.IS_NAMESPACE);
2509:       assertEquals(56, Node.CHANGE_TIME);
2510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2511:       assertEquals(12, Node.COLUMN_BITS);
2512:       assertEquals(47, Node.IS_DISPATCHER);
2513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2514:       assertEquals(49, Node.DIRECT_EVAL);
2515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2516:       assertEquals(52, Node.LENGTH);
2517:       assertEquals(57, Node.LAST_PROP);
2518:       assertEquals(30, Node.VAR_ARGS_NAME);
2519:       assertEquals(36, Node.QUOTED_PROP);
2520:       assertEquals(57, Node.REFLECTED_OBJECT);
2521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2522:       assertEquals(55, Node.INFERRED_FUNCTION);
2523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2524:       assertEquals(29, Node.JSDOC_INFO_PROP);
2525:       assertEquals(53, Node.INPUT_ID);
2526:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2527:       assertEquals(39, Node.EMPTY_BLOCK);
2528:       assertFalse(boolean5);
2529:       assertNotSame(node0, node2);
2530:       assertNotSame(node0, node4);
2531:       assertSame(node0, node3);
2532:       assertNotSame(node3, node2);
2533:       assertNotSame(node3, node4);
2534:       assertSame(node3, node0);
2535:   }
2536: }
RegularFileObject[/tmp/EvoSuite_74_1629223362971/com/google/javascript/rhino/Node_74_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_74_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_74_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_74_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:43.613 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());

Iterable<Node> iterable0 = node0.children();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isScript());
assertEquals((-2145), node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node2, node0);
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertTrue(node2.isString());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotSame(node2, node0);
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isSetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertTrue(node2.isString());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, int0);
assertNotSame(node0, node2);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isScript());
assertEquals((-2145), node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean0);
assertNotSame(node0, node2);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isScript());
assertEquals((-2145), node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());

Node node3 = node0.useSourceInfoFrom(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node3, node2);
assertSame(node3, node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertEquals(37, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isScript());
assertEquals((-2145), node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isContinue());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isStringKey());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNumber());
assertFalse(node3.isThis());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertEquals(37, node3.getLineno());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFalse());
assertEquals(254, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isHook());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isString());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetProp());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());

Node node4 = node3.cloneTree();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertSame(node3, node0);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertNotSame(node4, node2);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertEquals(37, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertEquals(4095, node0.getCharno());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isScript());
assertEquals((-2145), node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isContinue());
assertFalse(node3.isBlock());
assertFalse(node3.hasOneChild());
assertFalse(node3.isStringKey());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNumber());
assertFalse(node3.isThis());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertEquals(37, node3.getLineno());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFalse());
assertEquals(254, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isHook());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isString());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetProp());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isAnd());
assertFalse(node4.isWith());
assertFalse(node4.isFalse());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isExprResult());
assertFalse(node4.isSwitch());
assertEquals(4095, node4.getCharno());
assertFalse(node4.isHook());
assertFalse(node4.isNot());
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNumber());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetProp());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isContinue());
assertFalse(node4.isCast());
assertFalse(node4.hasMoreThanOneChild());
assertEquals(254, node4.getType());
assertFalse(node4.isFunction());
assertFalse(node4.isThrow());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isParamList());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertEquals(37, node4.getLineno());
assertFalse(node4.isName());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isTry());
assertEquals(155647, node4.getSourcePosition());
assertFalse(node4.isRegExp());
assertFalse(node4.isDebugger());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isWhile());
assertFalse(node4.isGetterDef());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isReturn());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.isDelProp());
assertFalse(node4.isTypeOf());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetElem());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isVar());
assertFalse(node4.isTrue());
assertFalse(node4.isDo());
assertFalse(node4.isEmpty());
assertFalse(node4.isDefaultCase());

String string1 = node3.getString();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(string1.equals((Object)string0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals("(|", string1);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertSame(node3, node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertEquals(254, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertEquals(37, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());

boolean boolean1 = node3.isOptionalArg();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean1);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertSame(node3, node0);

node3.setQuotedString();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertSame(node3, node0);

boolean boolean2 = node0.isDebugger();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean2);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);

boolean boolean3 = node0.isDelProp();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean3);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);

boolean boolean4 = node0.isName();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean4);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);

boolean boolean5 = node3.isLabel();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean5);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node3, node2);
assertNotSame(node3, node4);
assertSame(node3, node0);


[MASTER] 18:02:44.180 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_76_1629223363647/com/google/javascript/rhino/Node_76_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_76_1629223363647/com/google/javascript/rhino/Node_76_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:44.180 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:44.180 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:44.181 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 161
[MASTER] 18:02:44.183 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_76_1629223363647/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_76_tmp__ESTest extends Node_76_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(254, "(|");
21:       assertEquals(57, Node.REFLECTED_OBJECT);
22:       assertEquals(52, Node.LENGTH);
23:       assertEquals(50, Node.FREE_CALL);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(49, Node.DIRECT_EVAL);
29:       assertEquals(40, Node.ORIGINALNAME_PROP);
30:       assertEquals(51, Node.STATIC_SOURCE_FILE);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(4095, Node.COLUMN_MASK);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
38:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
39:       assertEquals(47, Node.IS_DISPATCHER);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(37, Node.OPT_ARG_NAME);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(30, Node.VAR_ARGS_NAME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
49:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(29, Node.JSDOC_INFO_PROP);
54:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(39, Node.EMPTY_BLOCK);
57:       assertFalse(node0.isArrayLit());
58:       assertFalse(node0.isIf());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isSwitch());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isFalse());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isThis());
76:       assertFalse(node0.isBlock());
77:       assertEquals(254, node0.getType());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isContinue());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.hasOneChild());
88:       assertFalse(node0.hasChildren());
89:       assertFalse(node0.isExprResult());
90:       assertFalse(node0.isLabel());
91:       assertEquals((-1), node0.getLineno());
92:       assertFalse(node0.isDec());
93:       assertFalse(node0.isTypeOf());
94:       assertFalse(node0.isWith());
95:       assertFalse(node0.isCast());
96:       assertFalse(node0.hasMoreThanOneChild());
97:       assertFalse(node0.isObjectLit());
98:       assertFalse(node0.isNot());
99:       assertFalse(node0.isReturn());
100:       assertFalse(node0.isWhile());
101:       assertFalse(node0.isAnd());
102:       assertFalse(node0.isGetProp());
103:       assertEquals((-1), node0.getSourcePosition());
104:       assertFalse(node0.isNumber());
105:       assertFalse(node0.isScript());
106:       assertFalse(node0.isCall());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isNull());
109:       assertFalse(node0.isVar());
110:       assertFalse(node0.isParamList());
111:       assertFalse(node0.isStringKey());
112:       assertFalse(node0.isComma());
113:       assertEquals(0, node0.getChildCount());
114:       assertFalse(node0.isBreak());
115:       assertFalse(node0.isDo());
116:       assertFalse(node0.isDefaultCase());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isAdd());
119:       assertFalse(node0.isTrue());
120:       assertFalse(node0.isOr());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isEmpty());
123:       
124:       Iterable<Node> iterable0 = node0.children();
125:       assertEquals(57, Node.REFLECTED_OBJECT);
126:       assertEquals(52, Node.LENGTH);
127:       assertEquals(50, Node.FREE_CALL);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(4095, Node.COLUMN_MASK);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(47, Node.IS_DISPATCHER);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(56, Node.CHANGE_TIME);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(37, Node.OPT_ARG_NAME);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(57, Node.LAST_PROP);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(29, Node.JSDOC_INFO_PROP);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
160:       assertEquals(39, Node.EMPTY_BLOCK);
161:       assertFalse(iterable0.contains(node0));
162:       assertFalse(node0.isArrayLit());
163:       assertFalse(node0.isIf());
164:       assertFalse(node0.isDelProp());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isRegExp());
170:       assertFalse(node0.isCase());
171:       assertFalse(node0.isSwitch());
172:       assertEquals((-1), node0.getCharno());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isDebugger());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isString());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isFalse());
179:       assertFalse(node0.isHook());
180:       assertFalse(node0.isThis());
181:       assertFalse(node0.isBlock());
182:       assertEquals(254, node0.getType());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isContinue());
186:       assertFalse(node0.isSetterDef());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isGetElem());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.hasOneChild());
193:       assertFalse(node0.hasChildren());
194:       assertFalse(node0.isExprResult());
195:       assertFalse(node0.isLabel());
196:       assertEquals((-1), node0.getLineno());
197:       assertFalse(node0.isDec());
198:       assertFalse(node0.isTypeOf());
199:       assertFalse(node0.isWith());
200:       assertFalse(node0.isCast());
201:       assertFalse(node0.hasMoreThanOneChild());
202:       assertFalse(node0.isObjectLit());
203:       assertFalse(node0.isNot());
204:       assertFalse(node0.isReturn());
205:       assertFalse(node0.isWhile());
206:       assertFalse(node0.isAnd());
207:       assertFalse(node0.isGetProp());
208:       assertEquals((-1), node0.getSourcePosition());
209:       assertFalse(node0.isNumber());
210:       assertFalse(node0.isScript());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.isName());
213:       assertFalse(node0.isNull());
214:       assertFalse(node0.isVar());
215:       assertFalse(node0.isParamList());
216:       assertFalse(node0.isStringKey());
217:       assertFalse(node0.isComma());
218:       assertEquals(0, node0.getChildCount());
219:       assertFalse(node0.isBreak());
220:       assertFalse(node0.isDo());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isAssignAdd());
223:       assertFalse(node0.isAdd());
224:       assertFalse(node0.isTrue());
225:       assertFalse(node0.isOr());
226:       assertFalse(node0.isNew());
227:       assertFalse(node0.isEmpty());
228:       
229:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
230:       assertFalse(node1.equals((Object)node0));
231:       assertEquals(57, Node.REFLECTED_OBJECT);
232:       assertEquals(52, Node.LENGTH);
233:       assertEquals(50, Node.FREE_CALL);
234:       assertEquals(54, Node.SLASH_V);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
237:       assertEquals(48, Node.DIRECTIVES);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(4095, Node.COLUMN_MASK);
243:       assertEquals(32, Node.INCRDECR_PROP);
244:       assertEquals(46, Node.IS_NAMESPACE);
245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
246:       assertEquals(1, Node.DECR_FLAG);
247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(47, Node.IS_DISPATCHER);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(2, Node.POST_FLAG);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(36, Node.QUOTED_PROP);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(57, Node.LAST_PROP);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(39, Node.EMPTY_BLOCK);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertEquals(56, Node.CHANGE_TIME);
271:       assertEquals(46, Node.IS_NAMESPACE);
272:       assertEquals(47, Node.IS_DISPATCHER);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(1, Node.DECR_FLAG);
276:       assertEquals(32, Node.INCRDECR_PROP);
277:       assertEquals(29, Node.JSDOC_INFO_PROP);
278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
280:       assertEquals(53, Node.INPUT_ID);
281:       assertEquals(43, Node.IS_CONSTANT_NAME);
282:       assertEquals(57, Node.LAST_PROP);
283:       assertEquals(30, Node.VAR_ARGS_NAME);
284:       assertEquals(54, Node.SLASH_V);
285:       assertEquals(40, Node.ORIGINALNAME_PROP);
286:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
287:       assertEquals(8, Node.FLAG_NO_THROWS);
288:       assertEquals(39, Node.EMPTY_BLOCK);
289:       assertEquals(48, Node.DIRECTIVES);
290:       assertEquals(50, Node.FREE_CALL);
291:       assertEquals(55, Node.INFERRED_FUNCTION);
292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
293:       assertEquals(52, Node.LENGTH);
294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
295:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
296:       assertEquals(36, Node.QUOTED_PROP);
297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
298:       assertEquals(57, Node.REFLECTED_OBJECT);
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertFalse(node0.isArrayLit());
304:       assertFalse(node0.isIf());
305:       assertFalse(node0.isDelProp());
306:       assertFalse(node0.isFor());
307:       assertFalse(node0.isNE());
308:       assertFalse(node0.isVoid());
309:       assertFalse(node0.isFunction());
310:       assertFalse(node0.isRegExp());
311:       assertFalse(node0.isCase());
312:       assertFalse(node0.isSwitch());
313:       assertEquals((-1), node0.getCharno());
314:       assertFalse(node0.isTry());
315:       assertFalse(node0.isDebugger());
316:       assertFalse(node0.isGetterDef());
317:       assertFalse(node0.isString());
318:       assertFalse(node0.isThrow());
319:       assertFalse(node0.isFalse());
320:       assertFalse(node0.isHook());
321:       assertFalse(node0.isThis());
322:       assertFalse(node0.isBlock());
323:       assertEquals(254, node0.getType());
324:       assertFalse(node0.isCatch());
325:       assertFalse(node0.isInstanceOf());
326:       assertFalse(node0.isContinue());
327:       assertFalse(node0.isSetterDef());
328:       assertFalse(node0.isInc());
329:       assertFalse(node0.isIn());
330:       assertFalse(node0.isGetElem());
331:       assertFalse(node0.isAssign());
332:       assertFalse(node0.isLabelName());
333:       assertFalse(node0.hasOneChild());
334:       assertFalse(node0.hasChildren());
335:       assertFalse(node0.isExprResult());
336:       assertFalse(node0.isLabel());
337:       assertEquals((-1), node0.getLineno());
338:       assertFalse(node0.isDec());
339:       assertFalse(node0.isTypeOf());
340:       assertFalse(node0.isWith());
341:       assertFalse(node0.isCast());
342:       assertFalse(node0.hasMoreThanOneChild());
343:       assertFalse(node0.isObjectLit());
344:       assertFalse(node0.isNot());
345:       assertFalse(node0.isReturn());
346:       assertFalse(node0.isWhile());
347:       assertFalse(node0.isAnd());
348:       assertFalse(node0.isGetProp());
349:       assertEquals((-1), node0.getSourcePosition());
350:       assertFalse(node0.isNumber());
351:       assertFalse(node0.isScript());
352:       assertFalse(node0.isCall());
353:       assertFalse(node0.isName());
354:       assertFalse(node0.isNull());
355:       assertFalse(node0.isVar());
356:       assertFalse(node0.isParamList());
357:       assertFalse(node0.isStringKey());
358:       assertFalse(node0.isComma());
359:       assertEquals(0, node0.getChildCount());
360:       assertFalse(node0.isBreak());
361:       assertFalse(node0.isDo());
362:       assertFalse(node0.isDefaultCase());
363:       assertFalse(node0.isAssignAdd());
364:       assertFalse(node0.isAdd());
365:       assertFalse(node0.isTrue());
366:       assertFalse(node0.isOr());
367:       assertFalse(node0.isNew());
368:       assertFalse(node0.isEmpty());
369:       assertFalse(node1.isThis());
370:       assertFalse(node1.isComma());
371:       assertFalse(node1.isGetProp());
372:       assertFalse(node1.isAnd());
373:       assertFalse(node1.isNot());
374:       assertFalse(node1.isScript());
375:       assertFalse(node1.isObjectLit());
376:       assertFalse(node1.isInc());
377:       assertFalse(node1.isSwitch());
378:       assertFalse(node1.isFalse());
379:       assertFalse(node1.isLabelName());
380:       assertFalse(node1.isThrow());
381:       assertFalse(node1.isCast());
382:       assertTrue(node1.hasChildren());
383:       assertEquals(1, node1.getChildCount());
384:       assertFalse(node1.isNE());
385:       assertFalse(node1.isIf());
386:       assertFalse(node1.isCase());
387:       assertFalse(node1.isNumber());
388:       assertFalse(node1.isGetterDef());
389:       assertEquals(4095, node1.getCharno());
390:       assertFalse(node1.isIn());
391:       assertFalse(node1.isBlock());
392:       assertFalse(node1.isTry());
393:       assertEquals((-2145), node1.getType());
394:       assertFalse(node1.isHook());
395:       assertEquals(155647, node1.getSourcePosition());
396:       assertFalse(node1.isFor());
397:       assertFalse(node1.isInstanceOf());
398:       assertFalse(node1.isRegExp());
399:       assertFalse(node1.isCatch());
400:       assertFalse(node1.isWith());
401:       assertFalse(node1.hasMoreThanOneChild());
402:       assertFalse(node1.isSetterDef());
403:       assertFalse(node1.isNull());
404:       assertFalse(node1.isParamList());
405:       assertFalse(node1.isStringKey());
406:       assertFalse(node1.isAdd());
407:       assertFalse(node1.isNew());
408:       assertFalse(node1.isDebugger());
409:       assertFalse(node1.isArrayLit());
410:       assertFalse(node1.isVar());
411:       assertFalse(node1.isDefaultCase());
412:       assertEquals(37, node1.getLineno());
413:       assertFalse(node1.isFunction());
414:       assertFalse(node1.isContinue());
415:       assertFalse(node1.isOr());
416:       assertFalse(node1.isReturn());
417:       assertFalse(node1.isLabel());
418:       assertFalse(node1.isDelProp());
419:       assertFalse(node1.isAssignAdd());
420:       assertFalse(node1.isDo());
421:       assertFalse(node1.isEmpty());
422:       assertFalse(node1.isString());
423:       assertFalse(node1.isVoid());
424:       assertFalse(node1.isExprResult());
425:       assertFalse(node1.isTrue());
426:       assertFalse(node1.isWhile());
427:       assertFalse(node1.isGetElem());
428:       assertFalse(node1.isName());
429:       assertFalse(node1.isAssign());
430:       assertTrue(node1.hasOneChild());
431:       assertFalse(node1.isCall());
432:       assertFalse(node1.isBreak());
433:       assertFalse(node1.isDec());
434:       assertFalse(node1.isTypeOf());
435:       
436:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
437:       assertFalse(node2.equals((Object)node0));
438:       assertFalse(node2.equals((Object)node1));
439:       assertEquals(1, Node.DECR_FLAG);
440:       assertEquals(30, Node.VAR_ARGS_NAME);
441:       assertEquals(49, Node.DIRECT_EVAL);
442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
443:       assertEquals(37, Node.OPT_ARG_NAME);
444:       assertEquals(52, Node.LENGTH);
445:       assertEquals(56, Node.CHANGE_TIME);
446:       assertEquals(57, Node.REFLECTED_OBJECT);
447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
451:       assertEquals(50, Node.FREE_CALL);
452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
456:       assertEquals(32, Node.INCRDECR_PROP);
457:       assertEquals(12, Node.COLUMN_BITS);
458:       assertEquals(4095, Node.COLUMN_MASK);
459:       assertEquals(55, Node.INFERRED_FUNCTION);
460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
461:       assertEquals(48, Node.DIRECTIVES);
462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(43, Node.IS_CONSTANT_NAME);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
467:       assertEquals(39, Node.EMPTY_BLOCK);
468:       assertEquals(40, Node.ORIGINALNAME_PROP);
469:       assertEquals(29, Node.JSDOC_INFO_PROP);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(2, Node.POST_FLAG);
472:       assertEquals(57, Node.LAST_PROP);
473:       assertEquals(47, Node.IS_DISPATCHER);
474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
475:       assertNotSame(node2, node0);
476:       assertFalse(node2.isNot());
477:       assertFalse(node2.isScript());
478:       assertFalse(node2.isExprResult());
479:       assertFalse(node2.isObjectLit());
480:       assertFalse(node2.isWith());
481:       assertFalse(node2.isInstanceOf());
482:       assertFalse(node2.isAnd());
483:       assertFalse(node2.isAssign());
484:       assertFalse(node2.isDec());
485:       assertEquals((-1), node2.getSourcePosition());
486:       assertFalse(node2.isThis());
487:       assertFalse(node2.isBreak());
488:       assertFalse(node2.isGetElem());
489:       assertFalse(node2.hasChildren());
490:       assertFalse(node2.isComma());
491:       assertFalse(node2.isTypeOf());
492:       assertFalse(node2.isNumber());
493:       assertFalse(node2.hasOneChild());
494:       assertFalse(node2.isHook());
495:       assertFalse(node2.isReturn());
496:       assertFalse(node2.isGetProp());
497:       assertFalse(node2.isWhile());
498:       assertFalse(node2.isDo());
499:       assertFalse(node2.isCase());
500:       assertEquals((-1), node2.getCharno());
501:       assertFalse(node2.isOr());
502:       assertFalse(node2.isStringKey());
503:       assertFalse(node2.isName());
504:       assertFalse(node2.isSwitch());
505:       assertFalse(node2.isLabelName());
506:       assertFalse(node2.isNull());
507:       assertFalse(node2.isEmpty());
508:       assertEquals(0, node2.getChildCount());
509:       assertFalse(node2.isAdd());
510:       assertFalse(node2.isNew());
511:       assertFalse(node2.isLabel());
512:       assertFalse(node2.isVar());
513:       assertFalse(node2.isAssignAdd());
514:       assertFalse(node2.isDefaultCase());
515:       assertEquals(40, node2.getType());
516:       assertFalse(node2.isFunction());
517:       assertFalse(node2.isDebugger());
518:       assertFalse(node2.isCatch());
519:       assertFalse(node2.isRegExp());
520:       assertFalse(node2.isArrayLit());
521:       assertFalse(node2.isParamList());
522:       assertFalse(node2.isVoid());
523:       assertFalse(node2.isTrue());
524:       assertFalse(node2.isGetterDef());
525:       assertFalse(node2.isDelProp());
526:       assertFalse(node2.isFor());
527:       assertFalse(node2.isCall());
528:       assertFalse(node2.isBlock());
529:       assertFalse(node2.isTry());
530:       assertTrue(node2.isString());
531:       assertFalse(node2.isInc());
532:       assertFalse(node2.isContinue());
533:       assertFalse(node2.hasMoreThanOneChild());
534:       assertFalse(node2.isIn());
535:       assertEquals((-1), node2.getLineno());
536:       assertFalse(node2.isNE());
537:       assertFalse(node2.isIf());
538:       assertFalse(node2.isSetterDef());
539:       assertFalse(node2.isCast());
540:       assertFalse(node2.isFalse());
541:       assertFalse(node2.isThrow());
542:       
543:       String string0 = node2.toStringTree();
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node2.equals((Object)node1));
546:       assertEquals(1, Node.DECR_FLAG);
547:       assertEquals(30, Node.VAR_ARGS_NAME);
548:       assertEquals(49, Node.DIRECT_EVAL);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(37, Node.OPT_ARG_NAME);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(57, Node.REFLECTED_OBJECT);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
558:       assertEquals(50, Node.FREE_CALL);
559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
562:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
563:       assertEquals(32, Node.INCRDECR_PROP);
564:       assertEquals(12, Node.COLUMN_BITS);
565:       assertEquals(4095, Node.COLUMN_MASK);
566:       assertEquals(55, Node.INFERRED_FUNCTION);
567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
568:       assertEquals(48, Node.DIRECTIVES);
569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(36, Node.QUOTED_PROP);
573:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
574:       assertEquals(39, Node.EMPTY_BLOCK);
575:       assertEquals(40, Node.ORIGINALNAME_PROP);
576:       assertEquals(29, Node.JSDOC_INFO_PROP);
577:       assertEquals(53, Node.INPUT_ID);
578:       assertEquals(2, Node.POST_FLAG);
579:       assertEquals(57, Node.LAST_PROP);
580:       assertEquals(47, Node.IS_DISPATCHER);
581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
582:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
583:       assertNotSame(node2, node0);
584:       assertFalse(node2.isNot());
585:       assertFalse(node2.isScript());
586:       assertFalse(node2.isExprResult());
587:       assertFalse(node2.isObjectLit());
588:       assertFalse(node2.isWith());
589:       assertFalse(node2.isInstanceOf());
590:       assertFalse(node2.isAnd());
591:       assertFalse(node2.isAssign());
592:       assertFalse(node2.isDec());
593:       assertEquals((-1), node2.getSourcePosition());
594:       assertFalse(node2.isThis());
595:       assertFalse(node2.isBreak());
596:       assertFalse(node2.isGetElem());
597:       assertFalse(node2.hasChildren());
598:       assertFalse(node2.isComma());
599:       assertFalse(node2.isTypeOf());
600:       assertFalse(node2.isNumber());
601:       assertFalse(node2.hasOneChild());
602:       assertFalse(node2.isHook());
603:       assertFalse(node2.isReturn());
604:       assertFalse(node2.isGetProp());
605:       assertFalse(node2.isWhile());
606:       assertFalse(node2.isDo());
607:       assertFalse(node2.isCase());
608:       assertEquals((-1), node2.getCharno());
609:       assertFalse(node2.isOr());
610:       assertFalse(node2.isStringKey());
611:       assertFalse(node2.isName());
612:       assertFalse(node2.isSwitch());
613:       assertFalse(node2.isLabelName());
614:       assertFalse(node2.isNull());
615:       assertFalse(node2.isEmpty());
616:       assertEquals(0, node2.getChildCount());
617:       assertFalse(node2.isAdd());
618:       assertFalse(node2.isNew());
619:       assertFalse(node2.isLabel());
620:       assertFalse(node2.isVar());
621:       assertFalse(node2.isAssignAdd());
622:       assertFalse(node2.isDefaultCase());
623:       assertEquals(40, node2.getType());
624:       assertFalse(node2.isFunction());
625:       assertFalse(node2.isDebugger());
626:       assertFalse(node2.isCatch());
627:       assertFalse(node2.isRegExp());
628:       assertFalse(node2.isArrayLit());
629:       assertFalse(node2.isParamList());
630:       assertFalse(node2.isVoid());
631:       assertFalse(node2.isTrue());
632:       assertFalse(node2.isGetterDef());
633:       assertFalse(node2.isDelProp());
634:       assertFalse(node2.isFor());
635:       assertFalse(node2.isCall());
636:       assertFalse(node2.isBlock());
637:       assertFalse(node2.isTry());
638:       assertTrue(node2.isString());
639:       assertFalse(node2.isInc());
640:       assertFalse(node2.isContinue());
641:       assertFalse(node2.hasMoreThanOneChild());
642:       assertFalse(node2.isIn());
643:       assertEquals((-1), node2.getLineno());
644:       assertFalse(node2.isNE());
645:       assertFalse(node2.isIf());
646:       assertFalse(node2.isSetterDef());
647:       assertFalse(node2.isCast());
648:       assertFalse(node2.isFalse());
649:       assertFalse(node2.isThrow());
650:       
651:       int int0 = node1.getIntProp(254);
652:       assertFalse(node0.equals((Object)node1));
653:       assertFalse(node0.equals((Object)node2));
654:       assertFalse(node1.equals((Object)node2));
655:       assertFalse(node1.equals((Object)node0));
656:       assertEquals(57, Node.REFLECTED_OBJECT);
657:       assertEquals(52, Node.LENGTH);
658:       assertEquals(50, Node.FREE_CALL);
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
662:       assertEquals(48, Node.DIRECTIVES);
663:       assertEquals(49, Node.DIRECT_EVAL);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(51, Node.STATIC_SOURCE_FILE);
666:       assertEquals(12, Node.COLUMN_BITS);
667:       assertEquals(4095, Node.COLUMN_MASK);
668:       assertEquals(32, Node.INCRDECR_PROP);
669:       assertEquals(46, Node.IS_NAMESPACE);
670:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
671:       assertEquals(1, Node.DECR_FLAG);
672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(47, Node.IS_DISPATCHER);
675:       assertEquals(43, Node.IS_CONSTANT_NAME);
676:       assertEquals(56, Node.CHANGE_TIME);
677:       assertEquals(2, Node.POST_FLAG);
678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
679:       assertEquals(37, Node.OPT_ARG_NAME);
680:       assertEquals(55, Node.INFERRED_FUNCTION);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
684:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
685:       assertEquals(8, Node.FLAG_NO_THROWS);
686:       assertEquals(57, Node.LAST_PROP);
687:       assertEquals(53, Node.INPUT_ID);
688:       assertEquals(29, Node.JSDOC_INFO_PROP);
689:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
691:       assertEquals(39, Node.EMPTY_BLOCK);
692:       assertEquals(2, Node.POST_FLAG);
693:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
694:       assertEquals(37, Node.OPT_ARG_NAME);
695:       assertEquals(56, Node.CHANGE_TIME);
696:       assertEquals(46, Node.IS_NAMESPACE);
697:       assertEquals(47, Node.IS_DISPATCHER);
698:       assertEquals(12, Node.COLUMN_BITS);
699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
700:       assertEquals(1, Node.DECR_FLAG);
701:       assertEquals(32, Node.INCRDECR_PROP);
702:       assertEquals(29, Node.JSDOC_INFO_PROP);
703:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
704:       assertEquals(15, Node.NO_SIDE_EFFECTS);
705:       assertEquals(53, Node.INPUT_ID);
706:       assertEquals(43, Node.IS_CONSTANT_NAME);
707:       assertEquals(57, Node.LAST_PROP);
708:       assertEquals(30, Node.VAR_ARGS_NAME);
709:       assertEquals(54, Node.SLASH_V);
710:       assertEquals(40, Node.ORIGINALNAME_PROP);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(8, Node.FLAG_NO_THROWS);
713:       assertEquals(39, Node.EMPTY_BLOCK);
714:       assertEquals(48, Node.DIRECTIVES);
715:       assertEquals(50, Node.FREE_CALL);
716:       assertEquals(55, Node.INFERRED_FUNCTION);
717:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
718:       assertEquals(52, Node.LENGTH);
719:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
720:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
721:       assertEquals(36, Node.QUOTED_PROP);
722:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
723:       assertEquals(57, Node.REFLECTED_OBJECT);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(49, Node.DIRECT_EVAL);
727:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
728:       assertEquals(0, int0);
729:       assertNotSame(node0, node2);
730:       assertFalse(node0.isArrayLit());
731:       assertFalse(node0.isIf());
732:       assertFalse(node0.isDelProp());
733:       assertFalse(node0.isFor());
734:       assertFalse(node0.isNE());
735:       assertFalse(node0.isVoid());
736:       assertFalse(node0.isFunction());
737:       assertFalse(node0.isRegExp());
738:       assertFalse(node0.isCase());
739:       assertFalse(node0.isSwitch());
740:       assertEquals((-1), node0.getCharno());
741:       assertFalse(node0.isTry());
742:       assertFalse(node0.isDebugger());
743:       assertFalse(node0.isGetterDef());
744:       assertFalse(node0.isString());
745:       assertFalse(node0.isThrow());
746:       assertFalse(node0.isFalse());
747:       assertFalse(node0.isHook());
748:       assertFalse(node0.isThis());
749:       assertFalse(node0.isBlock());
750:       assertEquals(254, node0.getType());
751:       assertFalse(node0.isCatch());
752:       assertFalse(node0.isInstanceOf());
753:       assertFalse(node0.isContinue());
754:       assertFalse(node0.isSetterDef());
755:       assertFalse(node0.isInc());
756:       assertFalse(node0.isIn());
757:       assertFalse(node0.isGetElem());
758:       assertFalse(node0.isAssign());
759:       assertFalse(node0.isLabelName());
760:       assertFalse(node0.hasOneChild());
761:       assertFalse(node0.hasChildren());
762:       assertFalse(node0.isExprResult());
763:       assertFalse(node0.isLabel());
764:       assertEquals((-1), node0.getLineno());
765:       assertFalse(node0.isDec());
766:       assertFalse(node0.isTypeOf());
767:       assertFalse(node0.isWith());
768:       assertFalse(node0.isCast());
769:       assertFalse(node0.hasMoreThanOneChild());
770:       assertFalse(node0.isObjectLit());
771:       assertFalse(node0.isNot());
772:       assertFalse(node0.isReturn());
773:       assertFalse(node0.isWhile());
774:       assertFalse(node0.isAnd());
775:       assertFalse(node0.isGetProp());
776:       assertEquals((-1), node0.getSourcePosition());
777:       assertFalse(node0.isNumber());
778:       assertFalse(node0.isScript());
779:       assertFalse(node0.isCall());
780:       assertFalse(node0.isName());
781:       assertFalse(node0.isNull());
782:       assertFalse(node0.isVar());
783:       assertFalse(node0.isParamList());
784:       assertFalse(node0.isStringKey());
785:       assertFalse(node0.isComma());
786:       assertEquals(0, node0.getChildCount());
787:       assertFalse(node0.isBreak());
788:       assertFalse(node0.isDo());
789:       assertFalse(node0.isDefaultCase());
790:       assertFalse(node0.isAssignAdd());
791:       assertFalse(node0.isAdd());
792:       assertFalse(node0.isTrue());
793:       assertFalse(node0.isOr());
794:       assertFalse(node0.isNew());
795:       assertFalse(node0.isEmpty());
796:       assertFalse(node1.isThis());
797:       assertFalse(node1.isComma());
798:       assertFalse(node1.isGetProp());
799:       assertFalse(node1.isAnd());
800:       assertFalse(node1.isNot());
801:       assertFalse(node1.isScript());
802:       assertFalse(node1.isObjectLit());
803:       assertFalse(node1.isInc());
804:       assertFalse(node1.isSwitch());
805:       assertFalse(node1.isFalse());
806:       assertFalse(node1.isLabelName());
807:       assertFalse(node1.isThrow());
808:       assertFalse(node1.isCast());
809:       assertTrue(node1.hasChildren());
810:       assertEquals(1, node1.getChildCount());
811:       assertFalse(node1.isNE());
812:       assertFalse(node1.isIf());
813:       assertFalse(node1.isCase());
814:       assertFalse(node1.isNumber());
815:       assertFalse(node1.isGetterDef());
816:       assertEquals(4095, node1.getCharno());
817:       assertFalse(node1.isIn());
818:       assertFalse(node1.isBlock());
819:       assertFalse(node1.isTry());
820:       assertEquals((-2145), node1.getType());
821:       assertFalse(node1.isHook());
822:       assertEquals(155647, node1.getSourcePosition());
823:       assertFalse(node1.isFor());
824:       assertFalse(node1.isInstanceOf());
825:       assertFalse(node1.isRegExp());
826:       assertFalse(node1.isCatch());
827:       assertFalse(node1.isWith());
828:       assertFalse(node1.hasMoreThanOneChild());
829:       assertFalse(node1.isSetterDef());
830:       assertFalse(node1.isNull());
831:       assertFalse(node1.isParamList());
832:       assertFalse(node1.isStringKey());
833:       assertFalse(node1.isAdd());
834:       assertFalse(node1.isNew());
835:       assertFalse(node1.isDebugger());
836:       assertFalse(node1.isArrayLit());
837:       assertFalse(node1.isVar());
838:       assertFalse(node1.isDefaultCase());
839:       assertEquals(37, node1.getLineno());
840:       assertFalse(node1.isFunction());
841:       assertFalse(node1.isContinue());
842:       assertFalse(node1.isOr());
843:       assertFalse(node1.isReturn());
844:       assertFalse(node1.isLabel());
845:       assertFalse(node1.isDelProp());
846:       assertFalse(node1.isAssignAdd());
847:       assertFalse(node1.isDo());
848:       assertFalse(node1.isEmpty());
849:       assertFalse(node1.isString());
850:       assertFalse(node1.isVoid());
851:       assertFalse(node1.isExprResult());
852:       assertFalse(node1.isTrue());
853:       assertFalse(node1.isWhile());
854:       assertFalse(node1.isGetElem());
855:       assertFalse(node1.isName());
856:       assertFalse(node1.isAssign());
857:       assertTrue(node1.hasOneChild());
858:       assertFalse(node1.isCall());
859:       assertFalse(node1.isBreak());
860:       assertFalse(node1.isDec());
861:       assertFalse(node1.isTypeOf());
862:       
863:       boolean boolean0 = node1.isEquivalentToShallow(node0);
864:       assertFalse(node0.equals((Object)node1));
865:       assertFalse(node0.equals((Object)node2));
866:       assertFalse(node1.equals((Object)node2));
867:       assertFalse(node1.equals((Object)node0));
868:       assertEquals(57, Node.REFLECTED_OBJECT);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(50, Node.FREE_CALL);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
874:       assertEquals(48, Node.DIRECTIVES);
875:       assertEquals(49, Node.DIRECT_EVAL);
876:       assertEquals(40, Node.ORIGINALNAME_PROP);
877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
878:       assertEquals(12, Node.COLUMN_BITS);
879:       assertEquals(4095, Node.COLUMN_MASK);
880:       assertEquals(32, Node.INCRDECR_PROP);
881:       assertEquals(46, Node.IS_NAMESPACE);
882:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
883:       assertEquals(1, Node.DECR_FLAG);
884:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(43, Node.IS_CONSTANT_NAME);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(2, Node.POST_FLAG);
890:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
891:       assertEquals(37, Node.OPT_ARG_NAME);
892:       assertEquals(55, Node.INFERRED_FUNCTION);
893:       assertEquals(30, Node.VAR_ARGS_NAME);
894:       assertEquals(36, Node.QUOTED_PROP);
895:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
896:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
897:       assertEquals(8, Node.FLAG_NO_THROWS);
898:       assertEquals(57, Node.LAST_PROP);
899:       assertEquals(53, Node.INPUT_ID);
900:       assertEquals(29, Node.JSDOC_INFO_PROP);
901:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
902:       assertEquals(15, Node.NO_SIDE_EFFECTS);
903:       assertEquals(39, Node.EMPTY_BLOCK);
904:       assertEquals(2, Node.POST_FLAG);
905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
906:       assertEquals(37, Node.OPT_ARG_NAME);
907:       assertEquals(56, Node.CHANGE_TIME);
908:       assertEquals(46, Node.IS_NAMESPACE);
909:       assertEquals(47, Node.IS_DISPATCHER);
910:       assertEquals(12, Node.COLUMN_BITS);
911:       assertEquals(51, Node.STATIC_SOURCE_FILE);
912:       assertEquals(1, Node.DECR_FLAG);
913:       assertEquals(32, Node.INCRDECR_PROP);
914:       assertEquals(29, Node.JSDOC_INFO_PROP);
915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
917:       assertEquals(53, Node.INPUT_ID);
918:       assertEquals(43, Node.IS_CONSTANT_NAME);
919:       assertEquals(57, Node.LAST_PROP);
920:       assertEquals(30, Node.VAR_ARGS_NAME);
921:       assertEquals(54, Node.SLASH_V);
922:       assertEquals(40, Node.ORIGINALNAME_PROP);
923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
924:       assertEquals(8, Node.FLAG_NO_THROWS);
925:       assertEquals(39, Node.EMPTY_BLOCK);
926:       assertEquals(48, Node.DIRECTIVES);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(55, Node.INFERRED_FUNCTION);
929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
930:       assertEquals(52, Node.LENGTH);
931:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
932:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
935:       assertEquals(57, Node.REFLECTED_OBJECT);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(4095, Node.COLUMN_MASK);
938:       assertEquals(49, Node.DIRECT_EVAL);
939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
940:       assertFalse(boolean0);
941:       assertNotSame(node0, node2);
942:       assertFalse(node0.isArrayLit());
943:       assertFalse(node0.isIf());
944:       assertFalse(node0.isDelProp());
945:       assertFalse(node0.isFor());
946:       assertFalse(node0.isNE());
947:       assertFalse(node0.isVoid());
948:       assertFalse(node0.isFunction());
949:       assertFalse(node0.isRegExp());
950:       assertFalse(node0.isCase());
951:       assertFalse(node0.isSwitch());
952:       assertEquals((-1), node0.getCharno());
953:       assertFalse(node0.isTry());
954:       assertFalse(node0.isDebugger());
955:       assertFalse(node0.isGetterDef());
956:       assertFalse(node0.isString());
957:       assertFalse(node0.isThrow());
958:       assertFalse(node0.isFalse());
959:       assertFalse(node0.isHook());
960:       assertFalse(node0.isThis());
961:       assertFalse(node0.isBlock());
962:       assertEquals(254, node0.getType());
963:       assertFalse(node0.isCatch());
964:       assertFalse(node0.isInstanceOf());
965:       assertFalse(node0.isContinue());
966:       assertFalse(node0.isSetterDef());
967:       assertFalse(node0.isInc());
968:       assertFalse(node0.isIn());
969:       assertFalse(node0.isGetElem());
970:       assertFalse(node0.isAssign());
971:       assertFalse(node0.isLabelName());
972:       assertFalse(node0.hasOneChild());
973:       assertFalse(node0.hasChildren());
974:       assertFalse(node0.isExprResult());
975:       assertFalse(node0.isLabel());
976:       assertEquals((-1), node0.getLineno());
977:       assertFalse(node0.isDec());
978:       assertFalse(node0.isTypeOf());
979:       assertFalse(node0.isWith());
980:       assertFalse(node0.isCast());
981:       assertFalse(node0.hasMoreThanOneChild());
982:       assertFalse(node0.isObjectLit());
983:       assertFalse(node0.isNot());
984:       assertFalse(node0.isReturn());
985:       assertFalse(node0.isWhile());
986:       assertFalse(node0.isAnd());
987:       assertFalse(node0.isGetProp());
988:       assertEquals((-1), node0.getSourcePosition());
989:       assertFalse(node0.isNumber());
990:       assertFalse(node0.isScript());
991:       assertFalse(node0.isCall());
992:       assertFalse(node0.isName());
993:       assertFalse(node0.isNull());
994:       assertFalse(node0.isVar());
995:       assertFalse(node0.isParamList());
996:       assertFalse(node0.isStringKey());
997:       assertFalse(node0.isComma());
998:       assertEquals(0, node0.getChildCount());
999:       assertFalse(node0.isBreak());
1000:       assertFalse(node0.isDo());
1001:       assertFalse(node0.isDefaultCase());
1002:       assertFalse(node0.isAssignAdd());
1003:       assertFalse(node0.isAdd());
1004:       assertFalse(node0.isTrue());
1005:       assertFalse(node0.isOr());
1006:       assertFalse(node0.isNew());
1007:       assertFalse(node0.isEmpty());
1008:       assertFalse(node1.isThis());
1009:       assertFalse(node1.isComma());
1010:       assertFalse(node1.isGetProp());
1011:       assertFalse(node1.isAnd());
1012:       assertFalse(node1.isNot());
1013:       assertFalse(node1.isScript());
1014:       assertFalse(node1.isObjectLit());
1015:       assertFalse(node1.isInc());
1016:       assertFalse(node1.isSwitch());
1017:       assertFalse(node1.isFalse());
1018:       assertFalse(node1.isLabelName());
1019:       assertFalse(node1.isThrow());
1020:       assertFalse(node1.isCast());
1021:       assertTrue(node1.hasChildren());
1022:       assertEquals(1, node1.getChildCount());
1023:       assertFalse(node1.isNE());
1024:       assertFalse(node1.isIf());
1025:       assertFalse(node1.isCase());
1026:       assertFalse(node1.isNumber());
1027:       assertFalse(node1.isGetterDef());
1028:       assertEquals(4095, node1.getCharno());
1029:       assertFalse(node1.isIn());
1030:       assertFalse(node1.isBlock());
1031:       assertFalse(node1.isTry());
1032:       assertEquals((-2145), node1.getType());
1033:       assertFalse(node1.isHook());
1034:       assertEquals(155647, node1.getSourcePosition());
1035:       assertFalse(node1.isFor());
1036:       assertFalse(node1.isInstanceOf());
1037:       assertFalse(node1.isRegExp());
1038:       assertFalse(node1.isCatch());
1039:       assertFalse(node1.isWith());
1040:       assertFalse(node1.hasMoreThanOneChild());
1041:       assertFalse(node1.isSetterDef());
1042:       assertFalse(node1.isNull());
1043:       assertFalse(node1.isParamList());
1044:       assertFalse(node1.isStringKey());
1045:       assertFalse(node1.isAdd());
1046:       assertFalse(node1.isNew());
1047:       assertFalse(node1.isDebugger());
1048:       assertFalse(node1.isArrayLit());
1049:       assertFalse(node1.isVar());
1050:       assertFalse(node1.isDefaultCase());
1051:       assertEquals(37, node1.getLineno());
1052:       assertFalse(node1.isFunction());
1053:       assertFalse(node1.isContinue());
1054:       assertFalse(node1.isOr());
1055:       assertFalse(node1.isReturn());
1056:       assertFalse(node1.isLabel());
1057:       assertFalse(node1.isDelProp());
1058:       assertFalse(node1.isAssignAdd());
1059:       assertFalse(node1.isDo());
1060:       assertFalse(node1.isEmpty());
1061:       assertFalse(node1.isString());
1062:       assertFalse(node1.isVoid());
1063:       assertFalse(node1.isExprResult());
1064:       assertFalse(node1.isTrue());
1065:       assertFalse(node1.isWhile());
1066:       assertFalse(node1.isGetElem());
1067:       assertFalse(node1.isName());
1068:       assertFalse(node1.isAssign());
1069:       assertTrue(node1.hasOneChild());
1070:       assertFalse(node1.isCall());
1071:       assertFalse(node1.isBreak());
1072:       assertFalse(node1.isDec());
1073:       assertFalse(node1.isTypeOf());
1074:       
1075:       Node node3 = node0.useSourceInfoFrom(node1);
1076:       assertFalse(node0.equals((Object)node1));
1077:       assertFalse(node0.equals((Object)node2));
1078:       assertFalse(node1.equals((Object)node2));
1079:       assertFalse(node1.equals((Object)node0));
1080:       assertFalse(node3.equals((Object)node2));
1081:       assertFalse(node3.equals((Object)node1));
1082:       assertEquals(57, Node.REFLECTED_OBJECT);
1083:       assertEquals(52, Node.LENGTH);
1084:       assertEquals(50, Node.FREE_CALL);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(49, Node.DIRECT_EVAL);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(12, Node.COLUMN_BITS);
1093:       assertEquals(4095, Node.COLUMN_MASK);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(46, Node.IS_NAMESPACE);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(1, Node.DECR_FLAG);
1098:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1099:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1100:       assertEquals(47, Node.IS_DISPATCHER);
1101:       assertEquals(43, Node.IS_CONSTANT_NAME);
1102:       assertEquals(56, Node.CHANGE_TIME);
1103:       assertEquals(2, Node.POST_FLAG);
1104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1105:       assertEquals(37, Node.OPT_ARG_NAME);
1106:       assertEquals(55, Node.INFERRED_FUNCTION);
1107:       assertEquals(30, Node.VAR_ARGS_NAME);
1108:       assertEquals(36, Node.QUOTED_PROP);
1109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1111:       assertEquals(8, Node.FLAG_NO_THROWS);
1112:       assertEquals(57, Node.LAST_PROP);
1113:       assertEquals(53, Node.INPUT_ID);
1114:       assertEquals(29, Node.JSDOC_INFO_PROP);
1115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1117:       assertEquals(39, Node.EMPTY_BLOCK);
1118:       assertEquals(2, Node.POST_FLAG);
1119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1120:       assertEquals(37, Node.OPT_ARG_NAME);
1121:       assertEquals(56, Node.CHANGE_TIME);
1122:       assertEquals(46, Node.IS_NAMESPACE);
1123:       assertEquals(47, Node.IS_DISPATCHER);
1124:       assertEquals(12, Node.COLUMN_BITS);
1125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1126:       assertEquals(1, Node.DECR_FLAG);
1127:       assertEquals(32, Node.INCRDECR_PROP);
1128:       assertEquals(29, Node.JSDOC_INFO_PROP);
1129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1131:       assertEquals(53, Node.INPUT_ID);
1132:       assertEquals(43, Node.IS_CONSTANT_NAME);
1133:       assertEquals(57, Node.LAST_PROP);
1134:       assertEquals(30, Node.VAR_ARGS_NAME);
1135:       assertEquals(54, Node.SLASH_V);
1136:       assertEquals(40, Node.ORIGINALNAME_PROP);
1137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1138:       assertEquals(8, Node.FLAG_NO_THROWS);
1139:       assertEquals(39, Node.EMPTY_BLOCK);
1140:       assertEquals(48, Node.DIRECTIVES);
1141:       assertEquals(50, Node.FREE_CALL);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1144:       assertEquals(52, Node.LENGTH);
1145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1147:       assertEquals(36, Node.QUOTED_PROP);
1148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1149:       assertEquals(57, Node.REFLECTED_OBJECT);
1150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1151:       assertEquals(4095, Node.COLUMN_MASK);
1152:       assertEquals(49, Node.DIRECT_EVAL);
1153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1155:       assertEquals(36, Node.QUOTED_PROP);
1156:       assertEquals(53, Node.INPUT_ID);
1157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1159:       assertEquals(55, Node.INFERRED_FUNCTION);
1160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1161:       assertEquals(29, Node.JSDOC_INFO_PROP);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1165:       assertEquals(47, Node.IS_DISPATCHER);
1166:       assertEquals(50, Node.FREE_CALL);
1167:       assertEquals(40, Node.ORIGINALNAME_PROP);
1168:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1169:       assertEquals(46, Node.IS_NAMESPACE);
1170:       assertEquals(43, Node.IS_CONSTANT_NAME);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1174:       assertEquals(30, Node.VAR_ARGS_NAME);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(1, Node.DECR_FLAG);
1177:       assertEquals(12, Node.COLUMN_BITS);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(37, Node.OPT_ARG_NAME);
1181:       assertEquals(48, Node.DIRECTIVES);
1182:       assertEquals(39, Node.EMPTY_BLOCK);
1183:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1184:       assertEquals(4095, Node.COLUMN_MASK);
1185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1186:       assertEquals(8, Node.FLAG_NO_THROWS);
1187:       assertEquals(57, Node.REFLECTED_OBJECT);
1188:       assertEquals(56, Node.CHANGE_TIME);
1189:       assertEquals(49, Node.DIRECT_EVAL);
1190:       assertSame(node0, node3);
1191:       assertNotSame(node0, node2);
1192:       assertNotSame(node3, node2);
1193:       assertSame(node3, node0);
1194:       assertFalse(node0.isArrayLit());
1195:       assertFalse(node0.isIf());
1196:       assertEquals(155647, node0.getSourcePosition());
1197:       assertFalse(node0.isDelProp());
1198:       assertFalse(node0.isFor());
1199:       assertFalse(node0.isNE());
1200:       assertFalse(node0.isVoid());
1201:       assertFalse(node0.isFunction());
1202:       assertFalse(node0.isRegExp());
1203:       assertFalse(node0.isCase());
1204:       assertFalse(node0.isSwitch());
1205:       assertFalse(node0.isTry());
1206:       assertEquals(4095, node0.getCharno());
1207:       assertFalse(node0.isDebugger());
1208:       assertFalse(node0.isGetterDef());
1209:       assertFalse(node0.isString());
1210:       assertFalse(node0.isThrow());
1211:       assertFalse(node0.isFalse());
1212:       assertFalse(node0.isHook());
1213:       assertFalse(node0.isThis());
1214:       assertFalse(node0.isBlock());
1215:       assertEquals(254, node0.getType());
1216:       assertEquals(37, node0.getLineno());
1217:       assertFalse(node0.isCatch());
1218:       assertFalse(node0.isInstanceOf());
1219:       assertFalse(node0.isContinue());
1220:       assertFalse(node0.isSetterDef());
1221:       assertFalse(node0.isInc());
1222:       assertFalse(node0.isIn());
1223:       assertFalse(node0.isGetElem());
1224:       assertFalse(node0.isAssign());
1225:       assertFalse(node0.isLabelName());
1226:       assertFalse(node0.hasOneChild());
1227:       assertFalse(node0.hasChildren());
1228:       assertFalse(node0.isExprResult());
1229:       assertFalse(node0.isLabel());
1230:       assertFalse(node0.isDec());
1231:       assertFalse(node0.isTypeOf());
1232:       assertFalse(node0.isWith());
1233:       assertFalse(node0.isCast());
1234:       assertFalse(node0.hasMoreThanOneChild());
1235:       assertFalse(node0.isObjectLit());
1236:       assertFalse(node0.isNot());
1237:       assertFalse(node0.isReturn());
1238:       assertFalse(node0.isWhile());
1239:       assertFalse(node0.isAnd());
1240:       assertFalse(node0.isGetProp());
1241:       assertFalse(node0.isNumber());
1242:       assertFalse(node0.isScript());
1243:       assertFalse(node0.isCall());
1244:       assertFalse(node0.isName());
1245:       assertFalse(node0.isNull());
1246:       assertFalse(node0.isVar());
1247:       assertFalse(node0.isParamList());
1248:       assertFalse(node0.isStringKey());
1249:       assertFalse(node0.isComma());
1250:       assertEquals(0, node0.getChildCount());
1251:       assertFalse(node0.isBreak());
1252:       assertFalse(node0.isDo());
1253:       assertFalse(node0.isDefaultCase());
1254:       assertFalse(node0.isAssignAdd());
1255:       assertFalse(node0.isAdd());
1256:       assertFalse(node0.isTrue());
1257:       assertFalse(node0.isOr());
1258:       assertFalse(node0.isNew());
1259:       assertFalse(node0.isEmpty());
1260:       assertFalse(node1.isThis());
1261:       assertFalse(node1.isComma());
1262:       assertFalse(node1.isGetProp());
1263:       assertFalse(node1.isAnd());
1264:       assertFalse(node1.isNot());
1265:       assertFalse(node1.isScript());
1266:       assertFalse(node1.isObjectLit());
1267:       assertFalse(node1.isInc());
1268:       assertFalse(node1.isSwitch());
1269:       assertFalse(node1.isFalse());
1270:       assertFalse(node1.isLabelName());
1271:       assertFalse(node1.isThrow());
1272:       assertFalse(node1.isCast());
1273:       assertTrue(node1.hasChildren());
1274:       assertEquals(1, node1.getChildCount());
1275:       assertFalse(node1.isNE());
1276:       assertFalse(node1.isIf());
1277:       assertFalse(node1.isCase());
1278:       assertFalse(node1.isNumber());
1279:       assertFalse(node1.isGetterDef());
1280:       assertEquals(4095, node1.getCharno());
1281:       assertFalse(node1.isIn());
1282:       assertFalse(node1.isBlock());
1283:       assertFalse(node1.isTry());
1284:       assertEquals((-2145), node1.getType());
1285:       assertFalse(node1.isHook());
1286:       assertEquals(155647, node1.getSourcePosition());
1287:       assertFalse(node1.isFor());
1288:       assertFalse(node1.isInstanceOf());
1289:       assertFalse(node1.isRegExp());
1290:       assertFalse(node1.isCatch());
1291:       assertFalse(node1.isWith());
1292:       assertFalse(node1.hasMoreThanOneChild());
1293:       assertFalse(node1.isSetterDef());
1294:       assertFalse(node1.isNull());
1295:       assertFalse(node1.isParamList());
1296:       assertFalse(node1.isStringKey());
1297:       assertFalse(node1.isAdd());
1298:       assertFalse(node1.isNew());
1299:       assertFalse(node1.isDebugger());
1300:       assertFalse(node1.isArrayLit());
1301:       assertFalse(node1.isVar());
1302:       assertFalse(node1.isDefaultCase());
1303:       assertEquals(37, node1.getLineno());
1304:       assertFalse(node1.isFunction());
1305:       assertFalse(node1.isContinue());
1306:       assertFalse(node1.isOr());
1307:       assertFalse(node1.isReturn());
1308:       assertFalse(node1.isLabel());
1309:       assertFalse(node1.isDelProp());
1310:       assertFalse(node1.isAssignAdd());
1311:       assertFalse(node1.isDo());
1312:       assertFalse(node1.isEmpty());
1313:       assertFalse(node1.isString());
1314:       assertFalse(node1.isVoid());
1315:       assertFalse(node1.isExprResult());
1316:       assertFalse(node1.isTrue());
1317:       assertFalse(node1.isWhile());
1318:       assertFalse(node1.isGetElem());
1319:       assertFalse(node1.isName());
1320:       assertFalse(node1.isAssign());
1321:       assertTrue(node1.hasOneChild());
1322:       assertFalse(node1.isCall());
1323:       assertFalse(node1.isBreak());
1324:       assertFalse(node1.isDec());
1325:       assertFalse(node1.isTypeOf());
1326:       assertEquals(4095, node3.getCharno());
1327:       assertFalse(node3.isHook());
1328:       assertFalse(node3.isThrow());
1329:       assertFalse(node3.isString());
1330:       assertFalse(node3.isInc());
1331:       assertFalse(node3.isGetProp());
1332:       assertFalse(node3.isCase());
1333:       assertFalse(node3.isObjectLit());
1334:       assertFalse(node3.isFalse());
1335:       assertFalse(node3.isAnd());
1336:       assertFalse(node3.isSwitch());
1337:       assertFalse(node3.isArrayLit());
1338:       assertFalse(node3.isTry());
1339:       assertEquals(155647, node3.getSourcePosition());
1340:       assertFalse(node3.isRegExp());
1341:       assertFalse(node3.isFunction());
1342:       assertFalse(node3.isGetterDef());
1343:       assertFalse(node3.isFor());
1344:       assertFalse(node3.isNumber());
1345:       assertFalse(node3.isScript());
1346:       assertFalse(node3.hasOneChild());
1347:       assertFalse(node3.isInstanceOf());
1348:       assertFalse(node3.isIn());
1349:       assertFalse(node3.hasMoreThanOneChild());
1350:       assertFalse(node3.isNE());
1351:       assertFalse(node3.isThis());
1352:       assertFalse(node3.isWith());
1353:       assertFalse(node3.isIf());
1354:       assertFalse(node3.isCatch());
1355:       assertEquals(254, node3.getType());
1356:       assertFalse(node3.isAdd());
1357:       assertFalse(node3.isBlock());
1358:       assertFalse(node3.isVar());
1359:       assertFalse(node3.isDo());
1360:       assertFalse(node3.isWhile());
1361:       assertFalse(node3.isSetterDef());
1362:       assertFalse(node3.isNew());
1363:       assertFalse(node3.isAssignAdd());
1364:       assertFalse(node3.isLabel());
1365:       assertFalse(node3.isParamList());
1366:       assertEquals(37, node3.getLineno());
1367:       assertEquals(0, node3.getChildCount());
1368:       assertFalse(node3.isLabelName());
1369:       assertFalse(node3.isStringKey());
1370:       assertFalse(node3.isContinue());
1371:       assertFalse(node3.isCast());
1372:       assertFalse(node3.isTrue());
1373:       assertFalse(node3.isDebugger());
1374:       assertFalse(node3.isEmpty());
1375:       assertFalse(node3.isNot());
1376:       assertFalse(node3.isDefaultCase());
1377:       assertFalse(node3.isOr());
1378:       assertFalse(node3.isReturn());
1379:       assertFalse(node3.isComma());
1380:       assertFalse(node3.isTypeOf());
1381:       assertFalse(node3.isNull());
1382:       assertFalse(node3.isDec());
1383:       assertFalse(node3.hasChildren());
1384:       assertFalse(node3.isAssign());
1385:       assertFalse(node3.isGetElem());
1386:       assertFalse(node3.isDelProp());
1387:       assertFalse(node3.isName());
1388:       assertFalse(node3.isExprResult());
1389:       assertFalse(node3.isCall());
1390:       assertFalse(node3.isBreak());
1391:       assertFalse(node3.isVoid());
1392:       
1393:       Node node4 = node3.cloneTree();
1394:       assertFalse(node0.equals((Object)node1));
1395:       assertFalse(node0.equals((Object)node2));
1396:       assertFalse(node1.equals((Object)node2));
1397:       assertFalse(node1.equals((Object)node3));
1398:       assertFalse(node1.equals((Object)node0));
1399:       assertFalse(node3.equals((Object)node2));
1400:       assertFalse(node3.equals((Object)node1));
1401:       assertFalse(node4.equals((Object)node2));
1402:       assertFalse(node4.equals((Object)node3));
1403:       assertFalse(node4.equals((Object)node0));
1404:       assertFalse(node4.equals((Object)node1));
1405:       assertEquals(57, Node.REFLECTED_OBJECT);
1406:       assertEquals(52, Node.LENGTH);
1407:       assertEquals(50, Node.FREE_CALL);
1408:       assertEquals(54, Node.SLASH_V);
1409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1411:       assertEquals(48, Node.DIRECTIVES);
1412:       assertEquals(49, Node.DIRECT_EVAL);
1413:       assertEquals(40, Node.ORIGINALNAME_PROP);
1414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1415:       assertEquals(12, Node.COLUMN_BITS);
1416:       assertEquals(4095, Node.COLUMN_MASK);
1417:       assertEquals(32, Node.INCRDECR_PROP);
1418:       assertEquals(46, Node.IS_NAMESPACE);
1419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1420:       assertEquals(1, Node.DECR_FLAG);
1421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1423:       assertEquals(47, Node.IS_DISPATCHER);
1424:       assertEquals(43, Node.IS_CONSTANT_NAME);
1425:       assertEquals(56, Node.CHANGE_TIME);
1426:       assertEquals(2, Node.POST_FLAG);
1427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1428:       assertEquals(37, Node.OPT_ARG_NAME);
1429:       assertEquals(55, Node.INFERRED_FUNCTION);
1430:       assertEquals(30, Node.VAR_ARGS_NAME);
1431:       assertEquals(36, Node.QUOTED_PROP);
1432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1434:       assertEquals(8, Node.FLAG_NO_THROWS);
1435:       assertEquals(57, Node.LAST_PROP);
1436:       assertEquals(53, Node.INPUT_ID);
1437:       assertEquals(29, Node.JSDOC_INFO_PROP);
1438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1440:       assertEquals(39, Node.EMPTY_BLOCK);
1441:       assertEquals(2, Node.POST_FLAG);
1442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1443:       assertEquals(37, Node.OPT_ARG_NAME);
1444:       assertEquals(56, Node.CHANGE_TIME);
1445:       assertEquals(46, Node.IS_NAMESPACE);
1446:       assertEquals(47, Node.IS_DISPATCHER);
1447:       assertEquals(12, Node.COLUMN_BITS);
1448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1449:       assertEquals(1, Node.DECR_FLAG);
1450:       assertEquals(32, Node.INCRDECR_PROP);
1451:       assertEquals(29, Node.JSDOC_INFO_PROP);
1452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1454:       assertEquals(53, Node.INPUT_ID);
1455:       assertEquals(43, Node.IS_CONSTANT_NAME);
1456:       assertEquals(57, Node.LAST_PROP);
1457:       assertEquals(30, Node.VAR_ARGS_NAME);
1458:       assertEquals(54, Node.SLASH_V);
1459:       assertEquals(40, Node.ORIGINALNAME_PROP);
1460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1461:       assertEquals(8, Node.FLAG_NO_THROWS);
1462:       assertEquals(39, Node.EMPTY_BLOCK);
1463:       assertEquals(48, Node.DIRECTIVES);
1464:       assertEquals(50, Node.FREE_CALL);
1465:       assertEquals(55, Node.INFERRED_FUNCTION);
1466:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1467:       assertEquals(52, Node.LENGTH);
1468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1470:       assertEquals(36, Node.QUOTED_PROP);
1471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1472:       assertEquals(57, Node.REFLECTED_OBJECT);
1473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1474:       assertEquals(4095, Node.COLUMN_MASK);
1475:       assertEquals(49, Node.DIRECT_EVAL);
1476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1478:       assertEquals(36, Node.QUOTED_PROP);
1479:       assertEquals(53, Node.INPUT_ID);
1480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1481:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1484:       assertEquals(29, Node.JSDOC_INFO_PROP);
1485:       assertEquals(2, Node.POST_FLAG);
1486:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1487:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1488:       assertEquals(47, Node.IS_DISPATCHER);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(40, Node.ORIGINALNAME_PROP);
1491:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1492:       assertEquals(46, Node.IS_NAMESPACE);
1493:       assertEquals(43, Node.IS_CONSTANT_NAME);
1494:       assertEquals(54, Node.SLASH_V);
1495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1497:       assertEquals(30, Node.VAR_ARGS_NAME);
1498:       assertEquals(52, Node.LENGTH);
1499:       assertEquals(1, Node.DECR_FLAG);
1500:       assertEquals(12, Node.COLUMN_BITS);
1501:       assertEquals(32, Node.INCRDECR_PROP);
1502:       assertEquals(57, Node.LAST_PROP);
1503:       assertEquals(37, Node.OPT_ARG_NAME);
1504:       assertEquals(48, Node.DIRECTIVES);
1505:       assertEquals(39, Node.EMPTY_BLOCK);
1506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1507:       assertEquals(4095, Node.COLUMN_MASK);
1508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1509:       assertEquals(8, Node.FLAG_NO_THROWS);
1510:       assertEquals(57, Node.REFLECTED_OBJECT);
1511:       assertEquals(56, Node.CHANGE_TIME);
1512:       assertEquals(49, Node.DIRECT_EVAL);
1513:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1514:       assertEquals(57, Node.LAST_PROP);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(49, Node.DIRECT_EVAL);
1517:       assertEquals(1, Node.DECR_FLAG);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1520:       assertEquals(56, Node.CHANGE_TIME);
1521:       assertEquals(57, Node.REFLECTED_OBJECT);
1522:       assertEquals(46, Node.IS_NAMESPACE);
1523:       assertEquals(54, Node.SLASH_V);
1524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1525:       assertEquals(47, Node.IS_DISPATCHER);
1526:       assertEquals(2, Node.POST_FLAG);
1527:       assertEquals(40, Node.ORIGINALNAME_PROP);
1528:       assertEquals(8, Node.FLAG_NO_THROWS);
1529:       assertEquals(39, Node.EMPTY_BLOCK);
1530:       assertEquals(29, Node.JSDOC_INFO_PROP);
1531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1532:       assertEquals(36, Node.QUOTED_PROP);
1533:       assertEquals(4095, Node.COLUMN_MASK);
1534:       assertEquals(53, Node.INPUT_ID);
1535:       assertEquals(55, Node.INFERRED_FUNCTION);
1536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1537:       assertEquals(48, Node.DIRECTIVES);
1538:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1539:       assertEquals(43, Node.IS_CONSTANT_NAME);
1540:       assertEquals(50, Node.FREE_CALL);
1541:       assertEquals(37, Node.OPT_ARG_NAME);
1542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1543:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1544:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1545:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1546:       assertEquals(32, Node.INCRDECR_PROP);
1547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1548:       assertEquals(12, Node.COLUMN_BITS);
1549:       assertNotSame(node0, node4);
1550:       assertSame(node0, node3);
1551:       assertNotSame(node0, node2);
1552:       assertNotSame(node3, node4);
1553:       assertNotSame(node3, node2);
1554:       assertSame(node3, node0);
1555:       assertNotSame(node4, node2);
1556:       assertNotSame(node4, node3);
1557:       assertNotSame(node4, node0);
1558:       assertFalse(node0.isArrayLit());
1559:       assertFalse(node0.isIf());
1560:       assertEquals(155647, node0.getSourcePosition());
1561:       assertFalse(node0.isDelProp());
1562:       assertFalse(node0.isFor());
1563:       assertFalse(node0.isNE());
1564:       assertFalse(node0.isVoid());
1565:       assertFalse(node0.isFunction());
1566:       assertFalse(node0.isRegExp());
1567:       assertFalse(node0.isCase());
1568:       assertFalse(node0.isSwitch());
1569:       assertFalse(node0.isTry());
1570:       assertEquals(4095, node0.getCharno());
1571:       assertFalse(node0.isDebugger());
1572:       assertFalse(node0.isGetterDef());
1573:       assertFalse(node0.isString());
1574:       assertFalse(node0.isThrow());
1575:       assertFalse(node0.isFalse());
1576:       assertFalse(node0.isHook());
1577:       assertFalse(node0.isThis());
1578:       assertFalse(node0.isBlock());
1579:       assertEquals(254, node0.getType());
1580:       assertEquals(37, node0.getLineno());
1581:       assertFalse(node0.isCatch());
1582:       assertFalse(node0.isInstanceOf());
1583:       assertFalse(node0.isContinue());
1584:       assertFalse(node0.isSetterDef());
1585:       assertFalse(node0.isInc());
1586:       assertFalse(node0.isIn());
1587:       assertFalse(node0.isGetElem());
1588:       assertFalse(node0.isAssign());
1589:       assertFalse(node0.isLabelName());
1590:       assertFalse(node0.hasOneChild());
1591:       assertFalse(node0.hasChildren());
1592:       assertFalse(node0.isExprResult());
1593:       assertFalse(node0.isLabel());
1594:       assertFalse(node0.isDec());
1595:       assertFalse(node0.isTypeOf());
1596:       assertFalse(node0.isWith());
1597:       assertFalse(node0.isCast());
1598:       assertFalse(node0.hasMoreThanOneChild());
1599:       assertFalse(node0.isObjectLit());
1600:       assertFalse(node0.isNot());
1601:       assertFalse(node0.isReturn());
1602:       assertFalse(node0.isWhile());
1603:       assertFalse(node0.isAnd());
1604:       assertFalse(node0.isGetProp());
1605:       assertFalse(node0.isNumber());
1606:       assertFalse(node0.isScript());
1607:       assertFalse(node0.isCall());
1608:       assertFalse(node0.isName());
1609:       assertFalse(node0.isNull());
1610:       assertFalse(node0.isVar());
1611:       assertFalse(node0.isParamList());
1612:       assertFalse(node0.isStringKey());
1613:       assertFalse(node0.isComma());
1614:       assertEquals(0, node0.getChildCount());
1615:       assertFalse(node0.isBreak());
1616:       assertFalse(node0.isDo());
1617:       assertFalse(node0.isDefaultCase());
1618:       assertFalse(node0.isAssignAdd());
1619:       assertFalse(node0.isAdd());
1620:       assertFalse(node0.isTrue());
1621:       assertFalse(node0.isOr());
1622:       assertFalse(node0.isNew());
1623:       assertFalse(node0.isEmpty());
1624:       assertFalse(node1.isThis());
1625:       assertFalse(node1.isComma());
1626:       assertFalse(node1.isGetProp());
1627:       assertFalse(node1.isAnd());
1628:       assertFalse(node1.isNot());
1629:       assertFalse(node1.isScript());
1630:       assertFalse(node1.isObjectLit());
1631:       assertFalse(node1.isInc());
1632:       assertFalse(node1.isSwitch());
1633:       assertFalse(node1.isFalse());
1634:       assertFalse(node1.isLabelName());
1635:       assertFalse(node1.isThrow());
1636:       assertFalse(node1.isCast());
1637:       assertTrue(node1.hasChildren());
1638:       assertEquals(1, node1.getChildCount());
1639:       assertFalse(node1.isNE());
1640:       assertFalse(node1.isIf());
1641:       assertFalse(node1.isCase());
1642:       assertFalse(node1.isNumber());
1643:       assertFalse(node1.isGetterDef());
1644:       assertEquals(4095, node1.getCharno());
1645:       assertFalse(node1.isIn());
1646:       assertFalse(node1.isBlock());
1647:       assertFalse(node1.isTry());
1648:       assertEquals((-2145), node1.getType());
1649:       assertFalse(node1.isHook());
1650:       assertEquals(155647, node1.getSourcePosition());
1651:       assertFalse(node1.isFor());
1652:       assertFalse(node1.isInstanceOf());
1653:       assertFalse(node1.isRegExp());
1654:       assertFalse(node1.isCatch());
1655:       assertFalse(node1.isWith());
1656:       assertFalse(node1.hasMoreThanOneChild());
1657:       assertFalse(node1.isSetterDef());
1658:       assertFalse(node1.isNull());
1659:       assertFalse(node1.isParamList());
1660:       assertFalse(node1.isStringKey());
1661:       assertFalse(node1.isAdd());
1662:       assertFalse(node1.isNew());
1663:       assertFalse(node1.isDebugger());
1664:       assertFalse(node1.isArrayLit());
1665:       assertFalse(node1.isVar());
1666:       assertFalse(node1.isDefaultCase());
1667:       assertEquals(37, node1.getLineno());
1668:       assertFalse(node1.isFunction());
1669:       assertFalse(node1.isContinue());
1670:       assertFalse(node1.isOr());
1671:       assertFalse(node1.isReturn());
1672:       assertFalse(node1.isLabel());
1673:       assertFalse(node1.isDelProp());
1674:       assertFalse(node1.isAssignAdd());
1675:       assertFalse(node1.isDo());
1676:       assertFalse(node1.isEmpty());
1677:       assertFalse(node1.isString());
1678:       assertFalse(node1.isVoid());
1679:       assertFalse(node1.isExprResult());
1680:       assertFalse(node1.isTrue());
1681:       assertFalse(node1.isWhile());
1682:       assertFalse(node1.isGetElem());
1683:       assertFalse(node1.isName());
1684:       assertFalse(node1.isAssign());
1685:       assertTrue(node1.hasOneChild());
1686:       assertFalse(node1.isCall());
1687:       assertFalse(node1.isBreak());
1688:       assertFalse(node1.isDec());
1689:       assertFalse(node1.isTypeOf());
1690:       assertEquals(4095, node3.getCharno());
1691:       assertFalse(node3.isHook());
1692:       assertFalse(node3.isThrow());
1693:       assertFalse(node3.isString());
1694:       assertFalse(node3.isInc());
1695:       assertFalse(node3.isGetProp());
1696:       assertFalse(node3.isCase());
1697:       assertFalse(node3.isObjectLit());
1698:       assertFalse(node3.isFalse());
1699:       assertFalse(node3.isAnd());
1700:       assertFalse(node3.isSwitch());
1701:       assertFalse(node3.isArrayLit());
1702:       assertFalse(node3.isTry());
1703:       assertEquals(155647, node3.getSourcePosition());
1704:       assertFalse(node3.isRegExp());
1705:       assertFalse(node3.isFunction());
1706:       assertFalse(node3.isGetterDef());
1707:       assertFalse(node3.isFor());
1708:       assertFalse(node3.isNumber());
1709:       assertFalse(node3.isScript());
1710:       assertFalse(node3.hasOneChild());
1711:       assertFalse(node3.isInstanceOf());
1712:       assertFalse(node3.isIn());
1713:       assertFalse(node3.hasMoreThanOneChild());
1714:       assertFalse(node3.isNE());
1715:       assertFalse(node3.isThis());
1716:       assertFalse(node3.isWith());
1717:       assertFalse(node3.isIf());
1718:       assertFalse(node3.isCatch());
1719:       assertEquals(254, node3.getType());
1720:       assertFalse(node3.isAdd());
1721:       assertFalse(node3.isBlock());
1722:       assertFalse(node3.isVar());
1723:       assertFalse(node3.isDo());
1724:       assertFalse(node3.isWhile());
1725:       assertFalse(node3.isSetterDef());
1726:       assertFalse(node3.isNew());
1727:       assertFalse(node3.isAssignAdd());
1728:       assertFalse(node3.isLabel());
1729:       assertFalse(node3.isParamList());
1730:       assertEquals(37, node3.getLineno());
1731:       assertEquals(0, node3.getChildCount());
1732:       assertFalse(node3.isLabelName());
1733:       assertFalse(node3.isStringKey());
1734:       assertFalse(node3.isContinue());
1735:       assertFalse(node3.isCast());
1736:       assertFalse(node3.isTrue());
1737:       assertFalse(node3.isDebugger());
1738:       assertFalse(node3.isEmpty());
1739:       assertFalse(node3.isNot());
1740:       assertFalse(node3.isDefaultCase());
1741:       assertFalse(node3.isOr());
1742:       assertFalse(node3.isReturn());
1743:       assertFalse(node3.isComma());
1744:       assertFalse(node3.isTypeOf());
1745:       assertFalse(node3.isNull());
1746:       assertFalse(node3.isDec());
1747:       assertFalse(node3.hasChildren());
1748:       assertFalse(node3.isAssign());
1749:       assertFalse(node3.isGetElem());
1750:       assertFalse(node3.isDelProp());
1751:       assertFalse(node3.isName());
1752:       assertFalse(node3.isExprResult());
1753:       assertFalse(node3.isCall());
1754:       assertFalse(node3.isBreak());
1755:       assertFalse(node3.isVoid());
1756:       assertFalse(node4.isScript());
1757:       assertFalse(node4.isExprResult());
1758:       assertFalse(node4.isNot());
1759:       assertFalse(node4.isObjectLit());
1760:       assertFalse(node4.isWith());
1761:       assertFalse(node4.isCast());
1762:       assertFalse(node4.isInstanceOf());
1763:       assertFalse(node4.isGetElem());
1764:       assertFalse(node4.isLabelName());
1765:       assertFalse(node4.isAnd());
1766:       assertFalse(node4.isOr());
1767:       assertFalse(node4.isLabel());
1768:       assertFalse(node4.isFalse());
1769:       assertFalse(node4.isThrow());
1770:       assertFalse(node4.isDo());
1771:       assertFalse(node4.isAssignAdd());
1772:       assertFalse(node4.isAdd());
1773:       assertFalse(node4.isString());
1774:       assertFalse(node4.isContinue());
1775:       assertFalse(node4.isCall());
1776:       assertFalse(node4.isName());
1777:       assertFalse(node4.isComma());
1778:       assertFalse(node4.isDec());
1779:       assertFalse(node4.isBreak());
1780:       assertFalse(node4.hasChildren());
1781:       assertFalse(node4.isGetProp());
1782:       assertFalse(node4.isAssign());
1783:       assertFalse(node4.isTypeOf());
1784:       assertFalse(node4.isReturn());
1785:       assertFalse(node4.isWhile());
1786:       assertFalse(node4.isRegExp());
1787:       assertFalse(node4.isDebugger());
1788:       assertFalse(node4.isTrue());
1789:       assertFalse(node4.isFunction());
1790:       assertFalse(node4.isArrayLit());
1791:       assertFalse(node4.isCatch());
1792:       assertFalse(node4.isVoid());
1793:       assertFalse(node4.isIf());
1794:       assertFalse(node4.isDelProp());
1795:       assertFalse(node4.isNE());
1796:       assertFalse(node4.isNull());
1797:       assertFalse(node4.isSetterDef());
1798:       assertFalse(node4.isEmpty());
1799:       assertEquals(0, node4.getChildCount());
1800:       assertFalse(node4.isIn());
1801:       assertEquals(37, node4.getLineno());
1802:       assertFalse(node4.isVar());
1803:       assertFalse(node4.isNew());
1804:       assertFalse(node4.isDefaultCase());
1805:       assertFalse(node4.isSwitch());
1806:       assertEquals(4095, node4.getCharno());
1807:       assertFalse(node4.isBlock());
1808:       assertFalse(node4.isInc());
1809:       assertFalse(node4.hasMoreThanOneChild());
1810:       assertFalse(node4.isStringKey());
1811:       assertEquals(254, node4.getType());
1812:       assertFalse(node4.isParamList());
1813:       assertFalse(node4.isThis());
1814:       assertFalse(node4.isGetterDef());
1815:       assertFalse(node4.isNumber());
1816:       assertFalse(node4.hasOneChild());
1817:       assertFalse(node4.isHook());
1818:       assertFalse(node4.isTry());
1819:       assertFalse(node4.isFor());
1820:       assertFalse(node4.isCase());
1821:       assertEquals(155647, node4.getSourcePosition());
1822:       
1823:       String string1 = node3.getString();
1824:       assertFalse(node0.equals((Object)node1));
1825:       assertFalse(node0.equals((Object)node4));
1826:       assertFalse(node0.equals((Object)node2));
1827:       assertFalse(node1.equals((Object)node2));
1828:       assertFalse(node1.equals((Object)node4));
1829:       assertFalse(node1.equals((Object)node3));
1830:       assertFalse(node1.equals((Object)node0));
1831:       assertFalse(node3.equals((Object)node4));
1832:       assertFalse(node3.equals((Object)node2));
1833:       assertFalse(node3.equals((Object)node1));
1834:       assertFalse(string1.equals((Object)string0));
1835:       assertEquals(57, Node.REFLECTED_OBJECT);
1836:       assertEquals(52, Node.LENGTH);
1837:       assertEquals(50, Node.FREE_CALL);
1838:       assertEquals(54, Node.SLASH_V);
1839:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1840:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1841:       assertEquals(48, Node.DIRECTIVES);
1842:       assertEquals(49, Node.DIRECT_EVAL);
1843:       assertEquals(40, Node.ORIGINALNAME_PROP);
1844:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1845:       assertEquals(12, Node.COLUMN_BITS);
1846:       assertEquals(4095, Node.COLUMN_MASK);
1847:       assertEquals(32, Node.INCRDECR_PROP);
1848:       assertEquals(46, Node.IS_NAMESPACE);
1849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1850:       assertEquals(1, Node.DECR_FLAG);
1851:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1853:       assertEquals(47, Node.IS_DISPATCHER);
1854:       assertEquals(43, Node.IS_CONSTANT_NAME);
1855:       assertEquals(56, Node.CHANGE_TIME);
1856:       assertEquals(2, Node.POST_FLAG);
1857:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1858:       assertEquals(37, Node.OPT_ARG_NAME);
1859:       assertEquals(55, Node.INFERRED_FUNCTION);
1860:       assertEquals(30, Node.VAR_ARGS_NAME);
1861:       assertEquals(36, Node.QUOTED_PROP);
1862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1864:       assertEquals(8, Node.FLAG_NO_THROWS);
1865:       assertEquals(57, Node.LAST_PROP);
1866:       assertEquals(53, Node.INPUT_ID);
1867:       assertEquals(29, Node.JSDOC_INFO_PROP);
1868:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1869:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1870:       assertEquals(39, Node.EMPTY_BLOCK);
1871:       assertEquals(2, Node.POST_FLAG);
1872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1873:       assertEquals(37, Node.OPT_ARG_NAME);
1874:       assertEquals(56, Node.CHANGE_TIME);
1875:       assertEquals(46, Node.IS_NAMESPACE);
1876:       assertEquals(47, Node.IS_DISPATCHER);
1877:       assertEquals(12, Node.COLUMN_BITS);
1878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1879:       assertEquals(1, Node.DECR_FLAG);
1880:       assertEquals(32, Node.INCRDECR_PROP);
1881:       assertEquals(29, Node.JSDOC_INFO_PROP);
1882:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1883:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1884:       assertEquals(53, Node.INPUT_ID);
1885:       assertEquals(43, Node.IS_CONSTANT_NAME);
1886:       assertEquals(57, Node.LAST_PROP);
1887:       assertEquals(30, Node.VAR_ARGS_NAME);
1888:       assertEquals(54, Node.SLASH_V);
1889:       assertEquals(40, Node.ORIGINALNAME_PROP);
1890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1891:       assertEquals(8, Node.FLAG_NO_THROWS);
1892:       assertEquals(39, Node.EMPTY_BLOCK);
1893:       assertEquals(48, Node.DIRECTIVES);
1894:       assertEquals(50, Node.FREE_CALL);
1895:       assertEquals(55, Node.INFERRED_FUNCTION);
1896:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1897:       assertEquals(52, Node.LENGTH);
1898:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1900:       assertEquals(36, Node.QUOTED_PROP);
1901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1902:       assertEquals(57, Node.REFLECTED_OBJECT);
1903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1904:       assertEquals(4095, Node.COLUMN_MASK);
1905:       assertEquals(49, Node.DIRECT_EVAL);
1906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1907:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1908:       assertEquals(36, Node.QUOTED_PROP);
1909:       assertEquals(53, Node.INPUT_ID);
1910:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1912:       assertEquals(55, Node.INFERRED_FUNCTION);
1913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1914:       assertEquals(29, Node.JSDOC_INFO_PROP);
1915:       assertEquals(2, Node.POST_FLAG);
1916:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1917:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1918:       assertEquals(47, Node.IS_DISPATCHER);
1919:       assertEquals(50, Node.FREE_CALL);
1920:       assertEquals(40, Node.ORIGINALNAME_PROP);
1921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1922:       assertEquals(46, Node.IS_NAMESPACE);
1923:       assertEquals(43, Node.IS_CONSTANT_NAME);
1924:       assertEquals(54, Node.SLASH_V);
1925:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1926:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1927:       assertEquals(30, Node.VAR_ARGS_NAME);
1928:       assertEquals(52, Node.LENGTH);
1929:       assertEquals(1, Node.DECR_FLAG);
1930:       assertEquals(12, Node.COLUMN_BITS);
1931:       assertEquals(32, Node.INCRDECR_PROP);
1932:       assertEquals(57, Node.LAST_PROP);
1933:       assertEquals(37, Node.OPT_ARG_NAME);
1934:       assertEquals(48, Node.DIRECTIVES);
1935:       assertEquals(39, Node.EMPTY_BLOCK);
1936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1937:       assertEquals(4095, Node.COLUMN_MASK);
1938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1939:       assertEquals(8, Node.FLAG_NO_THROWS);
1940:       assertEquals(57, Node.REFLECTED_OBJECT);
1941:       assertEquals(56, Node.CHANGE_TIME);
1942:       assertEquals(49, Node.DIRECT_EVAL);
1943:       assertEquals("(|", string1);
1944:       assertNotSame(node0, node4);
1945:       assertSame(node0, node3);
1946:       assertNotSame(node0, node2);
1947:       assertNotSame(node3, node4);
1948:       assertNotSame(node3, node2);
1949:       assertSame(node3, node0);
1950:       assertFalse(node0.isArrayLit());
1951:       assertFalse(node0.isIf());
1952:       assertEquals(155647, node0.getSourcePosition());
1953:       assertFalse(node0.isDelProp());
1954:       assertFalse(node0.isFor());
1955:       assertFalse(node0.isNE());
1956:       assertFalse(node0.isVoid());
1957:       assertFalse(node0.isFunction());
1958:       assertFalse(node0.isRegExp());
1959:       assertFalse(node0.isCase());
1960:       assertFalse(node0.isSwitch());
1961:       
1962:       boolean boolean1 = node3.isOptionalArg();
1963:       assertFalse(node0.equals((Object)node1));
1964:       assertFalse(node0.equals((Object)node4));
1965:       assertFalse(node0.equals((Object)node2));
1966:       assertFalse(node1.equals((Object)node2));
1967:       assertFalse(node1.equals((Object)node4));
1968:       assertFalse(node1.equals((Object)node3));
1969:       assertFalse(node1.equals((Object)node0));
1970:       assertFalse(node3.equals((Object)node4));
1971:       assertFalse(node3.equals((Object)node2));
1972:       assertFalse(node3.equals((Object)node1));
1973:       assertTrue(boolean1 == boolean0);
1974:       assertEquals(57, Node.REFLECTED_OBJECT);
1975:       assertEquals(52, Node.LENGTH);
1976:       assertEquals(50, Node.FREE_CALL);
1977:       assertEquals(54, Node.SLASH_V);
1978:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1979:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1980:       assertEquals(48, Node.DIRECTIVES);
1981:       assertEquals(49, Node.DIRECT_EVAL);
1982:       assertEquals(40, Node.ORIGINALNAME_PROP);
1983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1984:       assertEquals(12, Node.COLUMN_BITS);
1985:       assertEquals(4095, Node.COLUMN_MASK);
1986:       assertEquals(32, Node.INCRDECR_PROP);
1987:       assertEquals(46, Node.IS_NAMESPACE);
1988:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1989:       assertEquals(1, Node.DECR_FLAG);
1990:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1991:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1992:       assertEquals(47, Node.IS_DISPATCHER);
1993:       assertEquals(43, Node.IS_CONSTANT_NAME);
1994:       assertEquals(56, Node.CHANGE_TIME);
1995:       assertEquals(2, Node.POST_FLAG);
1996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1997:       assertEquals(37, Node.OPT_ARG_NAME);
1998:       assertEquals(55, Node.INFERRED_FUNCTION);
1999:       assertEquals(30, Node.VAR_ARGS_NAME);
2000:       assertEquals(36, Node.QUOTED_PROP);
2001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2002:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2003:       assertEquals(8, Node.FLAG_NO_THROWS);
2004:       assertEquals(57, Node.LAST_PROP);
2005:       assertEquals(53, Node.INPUT_ID);
2006:       assertEquals(29, Node.JSDOC_INFO_PROP);
2007:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2008:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2009:       assertEquals(39, Node.EMPTY_BLOCK);
2010:       assertEquals(2, Node.POST_FLAG);
2011:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2012:       assertEquals(37, Node.OPT_ARG_NAME);
2013:       assertEquals(56, Node.CHANGE_TIME);
2014:       assertEquals(46, Node.IS_NAMESPACE);
2015:       assertEquals(47, Node.IS_DISPATCHER);
2016:       assertEquals(12, Node.COLUMN_BITS);
2017:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2018:       assertEquals(1, Node.DECR_FLAG);
2019:       assertEquals(32, Node.INCRDECR_PROP);
2020:       assertEquals(29, Node.JSDOC_INFO_PROP);
2021:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2022:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2023:       assertEquals(53, Node.INPUT_ID);
2024:       assertEquals(43, Node.IS_CONSTANT_NAME);
2025:       assertEquals(57, Node.LAST_PROP);
2026:       assertEquals(30, Node.VAR_ARGS_NAME);
2027:       assertEquals(54, Node.SLASH_V);
2028:       assertEquals(40, Node.ORIGINALNAME_PROP);
2029:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2030:       assertEquals(8, Node.FLAG_NO_THROWS);
2031:       assertEquals(39, Node.EMPTY_BLOCK);
2032:       assertEquals(48, Node.DIRECTIVES);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(55, Node.INFERRED_FUNCTION);
2035:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2036:       assertEquals(52, Node.LENGTH);
2037:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2038:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2039:       assertEquals(36, Node.QUOTED_PROP);
2040:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2041:       assertEquals(57, Node.REFLECTED_OBJECT);
2042:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2043:       assertEquals(4095, Node.COLUMN_MASK);
2044:       assertEquals(49, Node.DIRECT_EVAL);
2045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2047:       assertEquals(36, Node.QUOTED_PROP);
2048:       assertEquals(53, Node.INPUT_ID);
2049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2050:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2051:       assertEquals(55, Node.INFERRED_FUNCTION);
2052:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2053:       assertEquals(29, Node.JSDOC_INFO_PROP);
2054:       assertEquals(2, Node.POST_FLAG);
2055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2057:       assertEquals(47, Node.IS_DISPATCHER);
2058:       assertEquals(50, Node.FREE_CALL);
2059:       assertEquals(40, Node.ORIGINALNAME_PROP);
2060:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2061:       assertEquals(46, Node.IS_NAMESPACE);
2062:       assertEquals(43, Node.IS_CONSTANT_NAME);
2063:       assertEquals(54, Node.SLASH_V);
2064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2065:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2066:       assertEquals(30, Node.VAR_ARGS_NAME);
2067:       assertEquals(52, Node.LENGTH);
2068:       assertEquals(1, Node.DECR_FLAG);
2069:       assertEquals(12, Node.COLUMN_BITS);
2070:       assertEquals(32, Node.INCRDECR_PROP);
2071:       assertEquals(57, Node.LAST_PROP);
2072:       assertEquals(37, Node.OPT_ARG_NAME);
2073:       assertEquals(48, Node.DIRECTIVES);
2074:       assertEquals(39, Node.EMPTY_BLOCK);
2075:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2076:       assertEquals(4095, Node.COLUMN_MASK);
2077:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2078:       assertEquals(8, Node.FLAG_NO_THROWS);
2079:       assertEquals(57, Node.REFLECTED_OBJECT);
2080:       assertEquals(56, Node.CHANGE_TIME);
2081:       assertEquals(49, Node.DIRECT_EVAL);
2082:       assertFalse(boolean1);
2083:       assertNotSame(node0, node4);
2084:       assertSame(node0, node3);
2085:       assertNotSame(node0, node2);
2086:       assertNotSame(node3, node4);
2087:       assertNotSame(node3, node2);
2088:       assertSame(node3, node0);
2089:       
2090:       node3.setQuotedString();
2091:       assertFalse(node0.equals((Object)node1));
2092:       assertFalse(node0.equals((Object)node4));
2093:       assertFalse(node0.equals((Object)node2));
2094:       assertFalse(node1.equals((Object)node2));
2095:       assertFalse(node1.equals((Object)node4));
2096:       assertFalse(node1.equals((Object)node3));
2097:       assertFalse(node1.equals((Object)node0));
2098:       assertFalse(node3.equals((Object)node4));
2099:       assertFalse(node3.equals((Object)node2));
2100:       assertFalse(node3.equals((Object)node1));
2101:       assertEquals(57, Node.REFLECTED_OBJECT);
2102:       assertEquals(52, Node.LENGTH);
2103:       assertEquals(50, Node.FREE_CALL);
2104:       assertEquals(54, Node.SLASH_V);
2105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2107:       assertEquals(48, Node.DIRECTIVES);
2108:       assertEquals(49, Node.DIRECT_EVAL);
2109:       assertEquals(40, Node.ORIGINALNAME_PROP);
2110:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2111:       assertEquals(12, Node.COLUMN_BITS);
2112:       assertEquals(4095, Node.COLUMN_MASK);
2113:       assertEquals(32, Node.INCRDECR_PROP);
2114:       assertEquals(46, Node.IS_NAMESPACE);
2115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2116:       assertEquals(1, Node.DECR_FLAG);
2117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2119:       assertEquals(47, Node.IS_DISPATCHER);
2120:       assertEquals(43, Node.IS_CONSTANT_NAME);
2121:       assertEquals(56, Node.CHANGE_TIME);
2122:       assertEquals(2, Node.POST_FLAG);
2123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2124:       assertEquals(37, Node.OPT_ARG_NAME);
2125:       assertEquals(55, Node.INFERRED_FUNCTION);
2126:       assertEquals(30, Node.VAR_ARGS_NAME);
2127:       assertEquals(36, Node.QUOTED_PROP);
2128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2130:       assertEquals(8, Node.FLAG_NO_THROWS);
2131:       assertEquals(57, Node.LAST_PROP);
2132:       assertEquals(53, Node.INPUT_ID);
2133:       assertEquals(29, Node.JSDOC_INFO_PROP);
2134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2136:       assertEquals(39, Node.EMPTY_BLOCK);
2137:       assertEquals(2, Node.POST_FLAG);
2138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2139:       assertEquals(37, Node.OPT_ARG_NAME);
2140:       assertEquals(56, Node.CHANGE_TIME);
2141:       assertEquals(46, Node.IS_NAMESPACE);
2142:       assertEquals(47, Node.IS_DISPATCHER);
2143:       assertEquals(12, Node.COLUMN_BITS);
2144:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2145:       assertEquals(1, Node.DECR_FLAG);
2146:       assertEquals(32, Node.INCRDECR_PROP);
2147:       assertEquals(29, Node.JSDOC_INFO_PROP);
2148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2150:       assertEquals(53, Node.INPUT_ID);
2151:       assertEquals(43, Node.IS_CONSTANT_NAME);
2152:       assertEquals(57, Node.LAST_PROP);
2153:       assertEquals(30, Node.VAR_ARGS_NAME);
2154:       assertEquals(54, Node.SLASH_V);
2155:       assertEquals(40, Node.ORIGINALNAME_PROP);
2156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2157:       assertEquals(8, Node.FLAG_NO_THROWS);
2158:       assertEquals(39, Node.EMPTY_BLOCK);
2159:       assertEquals(48, Node.DIRECTIVES);
2160:       assertEquals(50, Node.FREE_CALL);
2161:       assertEquals(55, Node.INFERRED_FUNCTION);
2162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2163:       assertEquals(52, Node.LENGTH);
2164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2166:       assertEquals(36, Node.QUOTED_PROP);
2167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2168:       assertEquals(57, Node.REFLECTED_OBJECT);
2169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2170:       assertEquals(4095, Node.COLUMN_MASK);
2171:       assertEquals(49, Node.DIRECT_EVAL);
2172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2174:       assertEquals(36, Node.QUOTED_PROP);
2175:       assertEquals(53, Node.INPUT_ID);
2176:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2177:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2178:       assertEquals(55, Node.INFERRED_FUNCTION);
2179:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2180:       assertEquals(29, Node.JSDOC_INFO_PROP);
2181:       assertEquals(2, Node.POST_FLAG);
2182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2183:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2184:       assertEquals(47, Node.IS_DISPATCHER);
2185:       assertEquals(50, Node.FREE_CALL);
2186:       assertEquals(40, Node.ORIGINALNAME_PROP);
2187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2188:       assertEquals(46, Node.IS_NAMESPACE);
2189:       assertEquals(43, Node.IS_CONSTANT_NAME);
2190:       assertEquals(54, Node.SLASH_V);
2191:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2192:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2193:       assertEquals(30, Node.VAR_ARGS_NAME);
2194:       assertEquals(52, Node.LENGTH);
2195:       assertEquals(1, Node.DECR_FLAG);
2196:       assertEquals(12, Node.COLUMN_BITS);
2197:       assertEquals(32, Node.INCRDECR_PROP);
2198:       assertEquals(57, Node.LAST_PROP);
2199:       assertEquals(37, Node.OPT_ARG_NAME);
2200:       assertEquals(48, Node.DIRECTIVES);
2201:       assertEquals(39, Node.EMPTY_BLOCK);
2202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2203:       assertEquals(4095, Node.COLUMN_MASK);
2204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2205:       assertEquals(8, Node.FLAG_NO_THROWS);
2206:       assertEquals(57, Node.REFLECTED_OBJECT);
2207:       assertEquals(56, Node.CHANGE_TIME);
2208:       assertEquals(49, Node.DIRECT_EVAL);
2209:       assertNotSame(node0, node4);
2210:       assertSame(node0, node3);
2211:       assertNotSame(node0, node2);
2212:       assertNotSame(node3, node4);
2213:       assertNotSame(node3, node2);
2214:       assertSame(node3, node0);
2215:       
2216:       boolean boolean2 = node0.isDebugger();
2217:       assertFalse(node0.equals((Object)node1));
2218:       assertFalse(node0.equals((Object)node4));
2219:       assertFalse(node0.equals((Object)node2));
2220:       assertTrue(boolean2 == boolean0);
2221:       assertTrue(boolean2 == boolean1);
2222:       assertEquals(57, Node.REFLECTED_OBJECT);
2223:       assertEquals(52, Node.LENGTH);
2224:       assertEquals(50, Node.FREE_CALL);
2225:       assertEquals(54, Node.SLASH_V);
2226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2228:       assertEquals(48, Node.DIRECTIVES);
2229:       assertEquals(49, Node.DIRECT_EVAL);
2230:       assertEquals(40, Node.ORIGINALNAME_PROP);
2231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2232:       assertEquals(12, Node.COLUMN_BITS);
2233:       assertEquals(4095, Node.COLUMN_MASK);
2234:       assertEquals(32, Node.INCRDECR_PROP);
2235:       assertEquals(46, Node.IS_NAMESPACE);
2236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2237:       assertEquals(1, Node.DECR_FLAG);
2238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2240:       assertEquals(47, Node.IS_DISPATCHER);
2241:       assertEquals(43, Node.IS_CONSTANT_NAME);
2242:       assertEquals(56, Node.CHANGE_TIME);
2243:       assertEquals(2, Node.POST_FLAG);
2244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2245:       assertEquals(37, Node.OPT_ARG_NAME);
2246:       assertEquals(55, Node.INFERRED_FUNCTION);
2247:       assertEquals(30, Node.VAR_ARGS_NAME);
2248:       assertEquals(36, Node.QUOTED_PROP);
2249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2250:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2251:       assertEquals(8, Node.FLAG_NO_THROWS);
2252:       assertEquals(57, Node.LAST_PROP);
2253:       assertEquals(53, Node.INPUT_ID);
2254:       assertEquals(29, Node.JSDOC_INFO_PROP);
2255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2257:       assertEquals(39, Node.EMPTY_BLOCK);
2258:       assertFalse(boolean2);
2259:       assertNotSame(node0, node4);
2260:       assertSame(node0, node3);
2261:       assertNotSame(node0, node2);
2262:       
2263:       boolean boolean3 = node0.isDelProp();
2264:       assertFalse(node0.equals((Object)node1));
2265:       assertFalse(node0.equals((Object)node4));
2266:       assertFalse(node0.equals((Object)node2));
2267:       assertTrue(boolean3 == boolean0);
2268:       assertTrue(boolean3 == boolean1);
2269:       assertTrue(boolean3 == boolean2);
2270:       assertEquals(57, Node.REFLECTED_OBJECT);
2271:       assertEquals(52, Node.LENGTH);
2272:       assertEquals(50, Node.FREE_CALL);
2273:       assertEquals(54, Node.SLASH_V);
2274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2276:       assertEquals(48, Node.DIRECTIVES);
2277:       assertEquals(49, Node.DIRECT_EVAL);
2278:       assertEquals(40, Node.ORIGINALNAME_PROP);
2279:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2280:       assertEquals(12, Node.COLUMN_BITS);
2281:       assertEquals(4095, Node.COLUMN_MASK);
2282:       assertEquals(32, Node.INCRDECR_PROP);
2283:       assertEquals(46, Node.IS_NAMESPACE);
2284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2285:       assertEquals(1, Node.DECR_FLAG);
2286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2287:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2288:       assertEquals(47, Node.IS_DISPATCHER);
2289:       assertEquals(43, Node.IS_CONSTANT_NAME);
2290:       assertEquals(56, Node.CHANGE_TIME);
2291:       assertEquals(2, Node.POST_FLAG);
2292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2293:       assertEquals(37, Node.OPT_ARG_NAME);
2294:       assertEquals(55, Node.INFERRED_FUNCTION);
2295:       assertEquals(30, Node.VAR_ARGS_NAME);
2296:       assertEquals(36, Node.QUOTED_PROP);
2297:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2299:       assertEquals(8, Node.FLAG_NO_THROWS);
2300:       assertEquals(57, Node.LAST_PROP);
2301:       assertEquals(53, Node.INPUT_ID);
2302:       assertEquals(29, Node.JSDOC_INFO_PROP);
2303:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2305:       assertEquals(39, Node.EMPTY_BLOCK);
2306:       assertFalse(boolean3);
2307:       assertNotSame(node0, node4);
2308:       assertSame(node0, node3);
2309:       assertNotSame(node0, node2);
2310:       
2311:       boolean boolean4 = node0.isName();
2312:       assertFalse(node0.equals((Object)node1));
2313:       assertFalse(node0.equals((Object)node4));
2314:       assertFalse(node0.equals((Object)node2));
2315:       assertTrue(boolean4 == boolean2);
2316:       assertTrue(boolean4 == boolean3);
2317:       assertTrue(boolean4 == boolean0);
2318:       assertTrue(boolean4 == boolean1);
2319:       assertEquals(57, Node.REFLECTED_OBJECT);
2320:       assertEquals(52, Node.LENGTH);
2321:       assertEquals(50, Node.FREE_CALL);
2322:       assertEquals(54, Node.SLASH_V);
2323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2325:       assertEquals(48, Node.DIRECTIVES);
2326:       assertEquals(49, Node.DIRECT_EVAL);
2327:       assertEquals(40, Node.ORIGINALNAME_PROP);
2328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2329:       assertEquals(12, Node.COLUMN_BITS);
2330:       assertEquals(4095, Node.COLUMN_MASK);
2331:       assertEquals(32, Node.INCRDECR_PROP);
2332:       assertEquals(46, Node.IS_NAMESPACE);
2333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2334:       assertEquals(1, Node.DECR_FLAG);
2335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2336:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2337:       assertEquals(47, Node.IS_DISPATCHER);
2338:       assertEquals(43, Node.IS_CONSTANT_NAME);
2339:       assertEquals(56, Node.CHANGE_TIME);
2340:       assertEquals(2, Node.POST_FLAG);
2341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2342:       assertEquals(37, Node.OPT_ARG_NAME);
2343:       assertEquals(55, Node.INFERRED_FUNCTION);
2344:       assertEquals(30, Node.VAR_ARGS_NAME);
2345:       assertEquals(36, Node.QUOTED_PROP);
2346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2348:       assertEquals(8, Node.FLAG_NO_THROWS);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertEquals(53, Node.INPUT_ID);
2351:       assertEquals(29, Node.JSDOC_INFO_PROP);
2352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2353:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2354:       assertEquals(39, Node.EMPTY_BLOCK);
2355:       assertFalse(boolean4);
2356:       assertNotSame(node0, node4);
2357:       assertSame(node0, node3);
2358:       assertNotSame(node0, node2);
2359:       
2360:       boolean boolean5 = node3.isLabel();
2361:       assertFalse(node0.equals((Object)node1));
2362:       assertFalse(node0.equals((Object)node4));
2363:       assertFalse(node0.equals((Object)node2));
2364:       assertFalse(node1.equals((Object)node2));
2365:       assertFalse(node1.equals((Object)node4));
2366:       assertFalse(node1.equals((Object)node3));
2367:       assertFalse(node1.equals((Object)node0));
2368:       assertFalse(node3.equals((Object)node4));
2369:       assertFalse(node3.equals((Object)node2));
2370:       assertFalse(node3.equals((Object)node1));
2371:       assertTrue(boolean5 == boolean1);
2372:       assertTrue(boolean5 == boolean2);
2373:       assertTrue(boolean5 == boolean0);
2374:       assertTrue(boolean5 == boolean4);
2375:       assertTrue(boolean5 == boolean3);
2376:       assertEquals(57, Node.REFLECTED_OBJECT);
2377:       assertEquals(52, Node.LENGTH);
2378:       assertEquals(50, Node.FREE_CALL);
2379:       assertEquals(54, Node.SLASH_V);
2380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2381:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2382:       assertEquals(48, Node.DIRECTIVES);
2383:       assertEquals(49, Node.DIRECT_EVAL);
2384:       assertEquals(40, Node.ORIGINALNAME_PROP);
2385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2386:       assertEquals(12, Node.COLUMN_BITS);
2387:       assertEquals(4095, Node.COLUMN_MASK);
2388:       assertEquals(32, Node.INCRDECR_PROP);
2389:       assertEquals(46, Node.IS_NAMESPACE);
2390:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2391:       assertEquals(1, Node.DECR_FLAG);
2392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2393:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2394:       assertEquals(47, Node.IS_DISPATCHER);
2395:       assertEquals(43, Node.IS_CONSTANT_NAME);
2396:       assertEquals(56, Node.CHANGE_TIME);
2397:       assertEquals(2, Node.POST_FLAG);
2398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2399:       assertEquals(37, Node.OPT_ARG_NAME);
2400:       assertEquals(55, Node.INFERRED_FUNCTION);
2401:       assertEquals(30, Node.VAR_ARGS_NAME);
2402:       assertEquals(36, Node.QUOTED_PROP);
2403:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2404:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2405:       assertEquals(8, Node.FLAG_NO_THROWS);
2406:       assertEquals(57, Node.LAST_PROP);
2407:       assertEquals(53, Node.INPUT_ID);
2408:       assertEquals(29, Node.JSDOC_INFO_PROP);
2409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2411:       assertEquals(39, Node.EMPTY_BLOCK);
2412:       assertEquals(2, Node.POST_FLAG);
2413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2414:       assertEquals(37, Node.OPT_ARG_NAME);
2415:       assertEquals(56, Node.CHANGE_TIME);
2416:       assertEquals(46, Node.IS_NAMESPACE);
2417:       assertEquals(47, Node.IS_DISPATCHER);
2418:       assertEquals(12, Node.COLUMN_BITS);
2419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2420:       assertEquals(1, Node.DECR_FLAG);
2421:       assertEquals(32, Node.INCRDECR_PROP);
2422:       assertEquals(29, Node.JSDOC_INFO_PROP);
2423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2425:       assertEquals(53, Node.INPUT_ID);
2426:       assertEquals(43, Node.IS_CONSTANT_NAME);
2427:       assertEquals(57, Node.LAST_PROP);
2428:       assertEquals(30, Node.VAR_ARGS_NAME);
2429:       assertEquals(54, Node.SLASH_V);
2430:       assertEquals(40, Node.ORIGINALNAME_PROP);
2431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2432:       assertEquals(8, Node.FLAG_NO_THROWS);
2433:       assertEquals(39, Node.EMPTY_BLOCK);
2434:       assertEquals(48, Node.DIRECTIVES);
2435:       assertEquals(50, Node.FREE_CALL);
2436:       assertEquals(55, Node.INFERRED_FUNCTION);
2437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2438:       assertEquals(52, Node.LENGTH);
2439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2441:       assertEquals(36, Node.QUOTED_PROP);
2442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2443:       assertEquals(57, Node.REFLECTED_OBJECT);
2444:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2445:       assertEquals(4095, Node.COLUMN_MASK);
2446:       assertEquals(49, Node.DIRECT_EVAL);
2447:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2449:       assertEquals(36, Node.QUOTED_PROP);
2450:       assertEquals(53, Node.INPUT_ID);
2451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2452:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2453:       assertEquals(55, Node.INFERRED_FUNCTION);
2454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2455:       assertEquals(29, Node.JSDOC_INFO_PROP);
2456:       assertEquals(2, Node.POST_FLAG);
2457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2458:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2459:       assertEquals(47, Node.IS_DISPATCHER);
2460:       assertEquals(50, Node.FREE_CALL);
2461:       assertEquals(40, Node.ORIGINALNAME_PROP);
2462:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2463:       assertEquals(46, Node.IS_NAMESPACE);
2464:       assertEquals(43, Node.IS_CONSTANT_NAME);
2465:       assertEquals(54, Node.SLASH_V);
2466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2468:       assertEquals(30, Node.VAR_ARGS_NAME);
2469:       assertEquals(52, Node.LENGTH);
2470:       assertEquals(1, Node.DECR_FLAG);
2471:       assertEquals(12, Node.COLUMN_BITS);
2472:       assertEquals(32, Node.INCRDECR_PROP);
2473:       assertEquals(57, Node.LAST_PROP);
2474:       assertEquals(37, Node.OPT_ARG_NAME);
2475:       assertEquals(48, Node.DIRECTIVES);
2476:       assertEquals(39, Node.EMPTY_BLOCK);
2477:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2478:       assertEquals(4095, Node.COLUMN_MASK);
2479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2480:       assertEquals(8, Node.FLAG_NO_THROWS);
2481:       assertEquals(57, Node.REFLECTED_OBJECT);
2482:       assertEquals(56, Node.CHANGE_TIME);
2483:       assertEquals(49, Node.DIRECT_EVAL);
2484:       assertFalse(boolean5);
2485:       assertNotSame(node0, node4);
2486:       assertSame(node0, node3);
2487:       assertNotSame(node0, node2);
2488:       assertNotSame(node3, node4);
2489:       assertNotSame(node3, node2);
2490:       assertSame(node3, node0);
2491:       
2492:       node2.setVarArgs(false);
2493:       assertFalse(node2.equals((Object)node3));
2494:       assertFalse(node2.equals((Object)node0));
2495:       assertFalse(node2.equals((Object)node1));
2496:       assertFalse(node2.equals((Object)node4));
2497:       assertEquals(1, Node.DECR_FLAG);
2498:       assertEquals(30, Node.VAR_ARGS_NAME);
2499:       assertEquals(49, Node.DIRECT_EVAL);
2500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2501:       assertEquals(37, Node.OPT_ARG_NAME);
2502:       assertEquals(52, Node.LENGTH);
2503:       assertEquals(56, Node.CHANGE_TIME);
2504:       assertEquals(57, Node.REFLECTED_OBJECT);
2505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2506:       assertEquals(46, Node.IS_NAMESPACE);
2507:       assertEquals(54, Node.SLASH_V);
2508:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2509:       assertEquals(50, Node.FREE_CALL);
2510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2513:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2514:       assertEquals(32, Node.INCRDECR_PROP);
2515:       assertEquals(12, Node.COLUMN_BITS);
2516:       assertEquals(4095, Node.COLUMN_MASK);
2517:       assertEquals(55, Node.INFERRED_FUNCTION);
2518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2519:       assertEquals(48, Node.DIRECTIVES);
2520:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2521:       assertEquals(8, Node.FLAG_NO_THROWS);
2522:       assertEquals(43, Node.IS_CONSTANT_NAME);
2523:       assertEquals(36, Node.QUOTED_PROP);
2524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2525:       assertEquals(39, Node.EMPTY_BLOCK);
2526:       assertEquals(40, Node.ORIGINALNAME_PROP);
2527:       assertEquals(29, Node.JSDOC_INFO_PROP);
2528:       assertEquals(53, Node.INPUT_ID);
2529:       assertEquals(2, Node.POST_FLAG);
2530:       assertEquals(57, Node.LAST_PROP);
2531:       assertEquals(47, Node.IS_DISPATCHER);
2532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2533:       assertNotSame(node2, node3);
2534:       assertNotSame(node2, node0);
2535:       assertNotSame(node2, node4);
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_76_1629223363647/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_76_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_76_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_76_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:44.384 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node2, node0);
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isNull());
assertFalse(node2.isEmpty());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotSame(node2, node0);
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isOr());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isNull());
assertFalse(node2.isEmpty());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, int0);
assertNotSame(node0, node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean0);
assertNotSame(node0, node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());

Node node3 = node0.useSourceInfoFrom(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node3, node2);
assertSame(node3, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertEquals(37, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isCatch());
assertEquals(254, node3.getType());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertEquals(37, node3.getLineno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isEmpty());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());

Node node4 = node3.cloneTree();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertSame(node3, node0);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertNotSame(node4, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(254, node0.getType());
assertEquals(37, node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertEquals((-2145), node1.getType());
assertFalse(node1.isHook());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isCatch());
assertEquals(254, node3.getType());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertEquals(37, node3.getLineno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isEmpty());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isWith());
assertFalse(node4.isCast());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isAnd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isAdd());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isComma());
assertFalse(node4.isDec());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetProp());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isRegExp());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCatch());
assertFalse(node4.isVoid());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isSetterDef());
assertFalse(node4.isEmpty());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isIn());
assertEquals(37, node4.getLineno());
assertFalse(node4.isVar());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSwitch());
assertEquals(4095, node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isInc());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isStringKey());
assertEquals(254, node4.getType());
assertFalse(node4.isParamList());
assertFalse(node4.isThis());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.hasOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isTry());
assertFalse(node4.isFor());
assertFalse(node4.isCase());
assertEquals(155647, node4.getSourcePosition());

String string1 = node3.getString();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(string1.equals((Object)string0));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals("(|", string1);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertSame(node3, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());

boolean boolean1 = node3.isOptionalArg();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(boolean1);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertSame(node3, node0);

node3.setQuotedString();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertSame(node3, node0);

boolean boolean2 = node0.isDebugger();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean2);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);

boolean boolean3 = node0.isDelProp();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean3);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);

boolean boolean4 = node0.isName();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean4);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);

boolean boolean5 = node3.isLabel();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(boolean5);
assertNotSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node3, node4);
assertNotSame(node3, node2);
assertSame(node3, node0);

node2.setVarArgs(false);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node2, node3);
assertNotSame(node2, node0);
assertNotSame(node2, node4);


[MASTER] 18:02:49.314 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1629223369186/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1629223369186/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:49.314 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:49.314 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:49.314 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 18:02:49.316 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1629223369186/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(254, "(|");
22:       assertEquals(40, Node.ORIGINALNAME_PROP);
23:       assertEquals(50, Node.FREE_CALL);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(57, Node.REFLECTED_OBJECT);
26:       assertEquals(48, Node.DIRECTIVES);
27:       assertEquals(54, Node.SLASH_V);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(36, Node.QUOTED_PROP);
34:       assertEquals(53, Node.INPUT_ID);
35:       assertEquals(52, Node.LENGTH);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(8, Node.FLAG_NO_THROWS);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(2, Node.POST_FLAG);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(1, Node.DECR_FLAG);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(51, Node.STATIC_SOURCE_FILE);
53:       assertEquals(12, Node.COLUMN_BITS);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
56:       assertEquals(32, Node.INCRDECR_PROP);
57:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
58:       assertFalse(node0.isGetterDef());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isIf());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isVoid());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isThis());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isStringKey());
76:       assertEquals(254, node0.getType());
77:       assertFalse(node0.isHook());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isRegExp());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isTry());
88:       assertFalse(node0.hasOneChild());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.isNumber());
91:       assertFalse(node0.hasChildren());
92:       assertEquals((-1), node0.getSourcePosition());
93:       assertFalse(node0.isTypeOf());
94:       assertFalse(node0.isAssign());
95:       assertFalse(node0.isDec());
96:       assertFalse(node0.isLabelName());
97:       assertFalse(node0.isReturn());
98:       assertFalse(node0.isLabel());
99:       assertEquals((-1), node0.getLineno());
100:       assertFalse(node0.isExprResult());
101:       assertFalse(node0.isContinue());
102:       assertFalse(node0.isGetElem());
103:       assertFalse(node0.hasMoreThanOneChild());
104:       assertFalse(node0.isCast());
105:       assertFalse(node0.isDo());
106:       assertFalse(node0.isAssignAdd());
107:       assertFalse(node0.isNew());
108:       assertFalse(node0.isOr());
109:       assertFalse(node0.isAdd());
110:       assertFalse(node0.isBreak());
111:       assertFalse(node0.isName());
112:       assertFalse(node0.isComma());
113:       assertFalse(node0.isNull());
114:       assertFalse(node0.isThrow());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isFalse());
117:       assertFalse(node0.isString());
118:       assertFalse(node0.isWhile());
119:       assertFalse(node0.isNot());
120:       assertFalse(node0.isAnd());
121:       assertFalse(node0.isDebugger());
122:       assertFalse(node0.isObjectLit());
123:       assertFalse(node0.isGetProp());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(50, Node.FREE_CALL);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(54, Node.SLASH_V);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(36, Node.QUOTED_PROP);
139:       assertEquals(53, Node.INPUT_ID);
140:       assertEquals(52, Node.LENGTH);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(8, Node.FLAG_NO_THROWS);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(39, Node.EMPTY_BLOCK);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(29, Node.JSDOC_INFO_PROP);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(56, Node.CHANGE_TIME);
150:       assertEquals(47, Node.IS_DISPATCHER);
151:       assertEquals(2, Node.POST_FLAG);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(1, Node.DECR_FLAG);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(43, Node.IS_CONSTANT_NAME);
157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(32, Node.INCRDECR_PROP);
162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isDelProp());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isFor());
168:       assertFalse(node0.isNE());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isFunction());
171:       assertFalse(node0.isDefaultCase());
172:       assertFalse(node0.isVoid());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isInc());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isParamList());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isVar());
181:       assertFalse(node0.isStringKey());
182:       assertEquals(254, node0.getType());
183:       assertFalse(node0.isHook());
184:       assertEquals(0, node0.getChildCount());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isCase());
189:       assertFalse(node0.isRegExp());
190:       assertEquals((-1), node0.getCharno());
191:       assertFalse(node0.isSwitch());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isTry());
194:       assertFalse(node0.hasOneChild());
195:       assertFalse(node0.isScript());
196:       assertFalse(node0.isNumber());
197:       assertFalse(node0.hasChildren());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.isAssign());
201:       assertFalse(node0.isDec());
202:       assertFalse(node0.isLabelName());
203:       assertFalse(node0.isReturn());
204:       assertFalse(node0.isLabel());
205:       assertEquals((-1), node0.getLineno());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.isContinue());
208:       assertFalse(node0.isGetElem());
209:       assertFalse(node0.hasMoreThanOneChild());
210:       assertFalse(node0.isCast());
211:       assertFalse(node0.isDo());
212:       assertFalse(node0.isAssignAdd());
213:       assertFalse(node0.isNew());
214:       assertFalse(node0.isOr());
215:       assertFalse(node0.isAdd());
216:       assertFalse(node0.isBreak());
217:       assertFalse(node0.isName());
218:       assertFalse(node0.isComma());
219:       assertFalse(node0.isNull());
220:       assertFalse(node0.isThrow());
221:       assertFalse(node0.isCall());
222:       assertFalse(node0.isFalse());
223:       assertFalse(node0.isString());
224:       assertFalse(node0.isWhile());
225:       assertFalse(node0.isNot());
226:       assertFalse(node0.isAnd());
227:       assertFalse(node0.isDebugger());
228:       assertFalse(node0.isObjectLit());
229:       assertFalse(node0.isGetProp());
230:       assertNotNull(iterable0);
231:       
232:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
233:       assertFalse(node1.equals((Object)node0));
234:       assertEquals(40, Node.ORIGINALNAME_PROP);
235:       assertEquals(50, Node.FREE_CALL);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(57, Node.REFLECTED_OBJECT);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(54, Node.SLASH_V);
240:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(55, Node.INFERRED_FUNCTION);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(53, Node.INPUT_ID);
247:       assertEquals(52, Node.LENGTH);
248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(2, Node.POST_FLAG);
259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(4095, Node.COLUMN_MASK);
263:       assertEquals(43, Node.IS_CONSTANT_NAME);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(32, Node.INCRDECR_PROP);
269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
270:       assertEquals(37, Node.OPT_ARG_NAME);
271:       assertEquals(56, Node.CHANGE_TIME);
272:       assertEquals(32, Node.INCRDECR_PROP);
273:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
275:       assertEquals(12, Node.COLUMN_BITS);
276:       assertEquals(47, Node.IS_DISPATCHER);
277:       assertEquals(2, Node.POST_FLAG);
278:       assertEquals(30, Node.VAR_ARGS_NAME);
279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
280:       assertEquals(53, Node.INPUT_ID);
281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
282:       assertEquals(57, Node.LAST_PROP);
283:       assertEquals(49, Node.DIRECT_EVAL);
284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
285:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
286:       assertEquals(29, Node.JSDOC_INFO_PROP);
287:       assertEquals(55, Node.INFERRED_FUNCTION);
288:       assertEquals(52, Node.LENGTH);
289:       assertEquals(57, Node.REFLECTED_OBJECT);
290:       assertEquals(36, Node.QUOTED_PROP);
291:       assertEquals(8, Node.FLAG_NO_THROWS);
292:       assertEquals(39, Node.EMPTY_BLOCK);
293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
295:       assertEquals(48, Node.DIRECTIVES);
296:       assertEquals(40, Node.ORIGINALNAME_PROP);
297:       assertEquals(4095, Node.COLUMN_MASK);
298:       assertEquals(54, Node.SLASH_V);
299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(1, Node.DECR_FLAG);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(46, Node.IS_NAMESPACE);
304:       assertEquals(50, Node.FREE_CALL);
305:       assertEquals(51, Node.STATIC_SOURCE_FILE);
306:       assertFalse(node0.isGetterDef());
307:       assertFalse(node0.isDelProp());
308:       assertFalse(node0.isIf());
309:       assertFalse(node0.isFor());
310:       assertFalse(node0.isNE());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isFunction());
313:       assertFalse(node0.isDefaultCase());
314:       assertFalse(node0.isVoid());
315:       assertFalse(node0.isTrue());
316:       assertFalse(node0.isIn());
317:       assertFalse(node0.isSetterDef());
318:       assertFalse(node0.isInc());
319:       assertFalse(node0.isEmpty());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isThis());
322:       assertFalse(node0.isVar());
323:       assertFalse(node0.isStringKey());
324:       assertEquals(254, node0.getType());
325:       assertFalse(node0.isHook());
326:       assertEquals(0, node0.getChildCount());
327:       assertFalse(node0.isInstanceOf());
328:       assertFalse(node0.isCatch());
329:       assertFalse(node0.isWith());
330:       assertFalse(node0.isCase());
331:       assertFalse(node0.isRegExp());
332:       assertEquals((-1), node0.getCharno());
333:       assertFalse(node0.isSwitch());
334:       assertFalse(node0.isBlock());
335:       assertFalse(node0.isTry());
336:       assertFalse(node0.hasOneChild());
337:       assertFalse(node0.isScript());
338:       assertFalse(node0.isNumber());
339:       assertFalse(node0.hasChildren());
340:       assertEquals((-1), node0.getSourcePosition());
341:       assertFalse(node0.isTypeOf());
342:       assertFalse(node0.isAssign());
343:       assertFalse(node0.isDec());
344:       assertFalse(node0.isLabelName());
345:       assertFalse(node0.isReturn());
346:       assertFalse(node0.isLabel());
347:       assertEquals((-1), node0.getLineno());
348:       assertFalse(node0.isExprResult());
349:       assertFalse(node0.isContinue());
350:       assertFalse(node0.isGetElem());
351:       assertFalse(node0.hasMoreThanOneChild());
352:       assertFalse(node0.isCast());
353:       assertFalse(node0.isDo());
354:       assertFalse(node0.isAssignAdd());
355:       assertFalse(node0.isNew());
356:       assertFalse(node0.isOr());
357:       assertFalse(node0.isAdd());
358:       assertFalse(node0.isBreak());
359:       assertFalse(node0.isName());
360:       assertFalse(node0.isComma());
361:       assertFalse(node0.isNull());
362:       assertFalse(node0.isThrow());
363:       assertFalse(node0.isCall());
364:       assertFalse(node0.isFalse());
365:       assertFalse(node0.isString());
366:       assertFalse(node0.isWhile());
367:       assertFalse(node0.isNot());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isDebugger());
370:       assertFalse(node0.isObjectLit());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node1.isInstanceOf());
373:       assertFalse(node1.isGetProp());
374:       assertFalse(node1.isWith());
375:       assertFalse(node1.isFalse());
376:       assertFalse(node1.isThis());
377:       assertFalse(node1.isComma());
378:       assertFalse(node1.isHook());
379:       assertFalse(node1.isThrow());
380:       assertFalse(node1.isInc());
381:       assertFalse(node1.isGetElem());
382:       assertFalse(node1.isExprResult());
383:       assertFalse(node1.isBreak());
384:       assertFalse(node1.isOr());
385:       assertFalse(node1.isAssignAdd());
386:       assertTrue(node1.hasChildren());
387:       assertEquals(1, node1.getChildCount());
388:       assertFalse(node1.isLabel());
389:       assertFalse(node1.hasMoreThanOneChild());
390:       assertFalse(node1.isDo());
391:       assertFalse(node1.isCase());
392:       assertFalse(node1.isBlock());
393:       assertFalse(node1.isFor());
394:       assertEquals(155647, node1.getSourcePosition());
395:       assertFalse(node1.isTry());
396:       assertFalse(node1.isArrayLit());
397:       assertFalse(node1.isScript());
398:       assertFalse(node1.isLabelName());
399:       assertFalse(node1.isNumber());
400:       assertFalse(node1.isGetterDef());
401:       assertEquals(4095, node1.getCharno());
402:       assertFalse(node1.isSwitch());
403:       assertFalse(node1.isParamList());
404:       assertFalse(node1.isStringKey());
405:       assertFalse(node1.isCatch());
406:       assertFalse(node1.isSetterDef());
407:       assertEquals(37, node1.getLineno());
408:       assertFalse(node1.isDefaultCase());
409:       assertFalse(node1.isRegExp());
410:       assertFalse(node1.isVar());
411:       assertFalse(node1.isNew());
412:       assertFalse(node1.isVoid());
413:       assertFalse(node1.isAdd());
414:       assertEquals((-2145), node1.getType());
415:       assertFalse(node1.isEmpty());
416:       assertFalse(node1.isCall());
417:       assertFalse(node1.isIf());
418:       assertFalse(node1.isDelProp());
419:       assertFalse(node1.isName());
420:       assertFalse(node1.isNE());
421:       assertFalse(node1.isNull());
422:       assertFalse(node1.isTrue());
423:       assertFalse(node1.isReturn());
424:       assertFalse(node1.isIn());
425:       assertFalse(node1.isContinue());
426:       assertFalse(node1.isAssign());
427:       assertTrue(node1.hasOneChild());
428:       assertFalse(node1.isWhile());
429:       assertFalse(node1.isDec());
430:       assertFalse(node1.isTypeOf());
431:       assertFalse(node1.isFunction());
432:       assertFalse(node1.isCast());
433:       assertFalse(node1.isNot());
434:       assertFalse(node1.isString());
435:       assertFalse(node1.isObjectLit());
436:       assertFalse(node1.isAnd());
437:       assertFalse(node1.isDebugger());
438:       assertNotNull(node1);
439:       
440:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
441:       assertFalse(node2.equals((Object)node1));
442:       assertFalse(node2.equals((Object)node0));
443:       assertEquals(37, Node.OPT_ARG_NAME);
444:       assertEquals(2, Node.POST_FLAG);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
447:       assertEquals(29, Node.JSDOC_INFO_PROP);
448:       assertEquals(1, Node.DECR_FLAG);
449:       assertEquals(30, Node.VAR_ARGS_NAME);
450:       assertEquals(57, Node.LAST_PROP);
451:       assertEquals(47, Node.IS_DISPATCHER);
452:       assertEquals(12, Node.COLUMN_BITS);
453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
454:       assertEquals(53, Node.INPUT_ID);
455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
456:       assertEquals(52, Node.LENGTH);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
460:       assertEquals(49, Node.DIRECT_EVAL);
461:       assertEquals(56, Node.CHANGE_TIME);
462:       assertEquals(36, Node.QUOTED_PROP);
463:       assertEquals(57, Node.REFLECTED_OBJECT);
464:       assertEquals(8, Node.FLAG_NO_THROWS);
465:       assertEquals(48, Node.DIRECTIVES);
466:       assertEquals(4095, Node.COLUMN_MASK);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
472:       assertEquals(40, Node.ORIGINALNAME_PROP);
473:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
474:       assertEquals(50, Node.FREE_CALL);
475:       assertEquals(43, Node.IS_CONSTANT_NAME);
476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
477:       assertEquals(46, Node.IS_NAMESPACE);
478:       assertEquals(54, Node.SLASH_V);
479:       assertNotSame(node2, node0);
480:       assertFalse(node2.isInstanceOf());
481:       assertFalse(node2.isObjectLit());
482:       assertFalse(node2.isComma());
483:       assertFalse(node2.isNot());
484:       assertFalse(node2.isWith());
485:       assertFalse(node2.isScript());
486:       assertFalse(node2.isThis());
487:       assertFalse(node2.isThrow());
488:       assertFalse(node2.isGetProp());
489:       assertFalse(node2.isHook());
490:       assertFalse(node2.isExprResult());
491:       assertFalse(node2.isAssign());
492:       assertFalse(node2.isBreak());
493:       assertFalse(node2.isGetElem());
494:       assertEquals((-1), node2.getLineno());
495:       assertFalse(node2.isLabel());
496:       assertFalse(node2.isOr());
497:       assertFalse(node2.hasMoreThanOneChild());
498:       assertFalse(node2.isNumber());
499:       assertFalse(node2.isFor());
500:       assertFalse(node2.isEmpty());
501:       assertFalse(node2.isCase());
502:       assertFalse(node2.isNew());
503:       assertFalse(node2.isDo());
504:       assertFalse(node2.isAssignAdd());
505:       assertTrue(node2.isString());
506:       assertFalse(node2.hasOneChild());
507:       assertFalse(node2.isVar());
508:       assertFalse(node2.isArrayLit());
509:       assertEquals((-1), node2.getCharno());
510:       assertFalse(node2.isGetterDef());
511:       assertFalse(node2.isParamList());
512:       assertFalse(node2.isStringKey());
513:       assertFalse(node2.isLabelName());
514:       assertFalse(node2.isSwitch());
515:       assertEquals(0, node2.getChildCount());
516:       assertFalse(node2.isCatch());
517:       assertFalse(node2.isDefaultCase());
518:       assertEquals(40, node2.getType());
519:       assertFalse(node2.isSetterDef());
520:       assertFalse(node2.isTry());
521:       assertFalse(node2.isAdd());
522:       assertFalse(node2.isBlock());
523:       assertFalse(node2.isCall());
524:       assertFalse(node2.isRegExp());
525:       assertFalse(node2.isIf());
526:       assertFalse(node2.isDelProp());
527:       assertFalse(node2.isNull());
528:       assertFalse(node2.isNE());
529:       assertFalse(node2.isTrue());
530:       assertFalse(node2.isVoid());
531:       assertFalse(node2.isName());
532:       assertFalse(node2.isIn());
533:       assertFalse(node2.isReturn());
534:       assertFalse(node2.isContinue());
535:       assertFalse(node2.isTypeOf());
536:       assertFalse(node2.hasChildren());
537:       assertFalse(node2.isDec());
538:       assertFalse(node2.isWhile());
539:       assertFalse(node2.isInc());
540:       assertFalse(node2.isCast());
541:       assertFalse(node2.isDebugger());
542:       assertFalse(node2.isFunction());
543:       assertFalse(node2.isFalse());
544:       assertEquals((-1), node2.getSourcePosition());
545:       assertFalse(node2.isAnd());
546:       assertNotNull(node2);
547:       
548:       String string0 = node2.toStringTree();
549:       assertFalse(node2.equals((Object)node1));
550:       assertFalse(node2.equals((Object)node0));
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(2, Node.POST_FLAG);
553:       assertEquals(32, Node.INCRDECR_PROP);
554:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
555:       assertEquals(29, Node.JSDOC_INFO_PROP);
556:       assertEquals(1, Node.DECR_FLAG);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(57, Node.LAST_PROP);
559:       assertEquals(47, Node.IS_DISPATCHER);
560:       assertEquals(12, Node.COLUMN_BITS);
561:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
562:       assertEquals(53, Node.INPUT_ID);
563:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
564:       assertEquals(52, Node.LENGTH);
565:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(49, Node.DIRECT_EVAL);
569:       assertEquals(56, Node.CHANGE_TIME);
570:       assertEquals(36, Node.QUOTED_PROP);
571:       assertEquals(57, Node.REFLECTED_OBJECT);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(4095, Node.COLUMN_MASK);
575:       assertEquals(55, Node.INFERRED_FUNCTION);
576:       assertEquals(39, Node.EMPTY_BLOCK);
577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
579:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
582:       assertEquals(50, Node.FREE_CALL);
583:       assertEquals(43, Node.IS_CONSTANT_NAME);
584:       assertEquals(51, Node.STATIC_SOURCE_FILE);
585:       assertEquals(46, Node.IS_NAMESPACE);
586:       assertEquals(54, Node.SLASH_V);
587:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
588:       assertNotSame(node2, node0);
589:       assertFalse(node2.isInstanceOf());
590:       assertFalse(node2.isObjectLit());
591:       assertFalse(node2.isComma());
592:       assertFalse(node2.isNot());
593:       assertFalse(node2.isWith());
594:       assertFalse(node2.isScript());
595:       assertFalse(node2.isThis());
596:       assertFalse(node2.isThrow());
597:       assertFalse(node2.isGetProp());
598:       assertFalse(node2.isHook());
599:       assertFalse(node2.isExprResult());
600:       assertFalse(node2.isAssign());
601:       assertFalse(node2.isBreak());
602:       assertFalse(node2.isGetElem());
603:       assertEquals((-1), node2.getLineno());
604:       assertFalse(node2.isLabel());
605:       assertFalse(node2.isOr());
606:       assertFalse(node2.hasMoreThanOneChild());
607:       assertFalse(node2.isNumber());
608:       assertFalse(node2.isFor());
609:       assertFalse(node2.isEmpty());
610:       assertFalse(node2.isCase());
611:       assertFalse(node2.isNew());
612:       assertFalse(node2.isDo());
613:       assertFalse(node2.isAssignAdd());
614:       assertTrue(node2.isString());
615:       assertFalse(node2.hasOneChild());
616:       assertFalse(node2.isVar());
617:       assertFalse(node2.isArrayLit());
618:       assertEquals((-1), node2.getCharno());
619:       assertFalse(node2.isGetterDef());
620:       assertFalse(node2.isParamList());
621:       assertFalse(node2.isStringKey());
622:       assertFalse(node2.isLabelName());
623:       assertFalse(node2.isSwitch());
624:       assertEquals(0, node2.getChildCount());
625:       assertFalse(node2.isCatch());
626:       assertFalse(node2.isDefaultCase());
627:       assertEquals(40, node2.getType());
628:       assertFalse(node2.isSetterDef());
629:       assertFalse(node2.isTry());
630:       assertFalse(node2.isAdd());
631:       assertFalse(node2.isBlock());
632:       assertFalse(node2.isCall());
633:       assertFalse(node2.isRegExp());
634:       assertFalse(node2.isIf());
635:       assertFalse(node2.isDelProp());
636:       assertFalse(node2.isNull());
637:       assertFalse(node2.isNE());
638:       assertFalse(node2.isTrue());
639:       assertFalse(node2.isVoid());
640:       assertFalse(node2.isName());
641:       assertFalse(node2.isIn());
642:       assertFalse(node2.isReturn());
643:       assertFalse(node2.isContinue());
644:       assertFalse(node2.isTypeOf());
645:       assertFalse(node2.hasChildren());
646:       assertFalse(node2.isDec());
647:       assertFalse(node2.isWhile());
648:       assertFalse(node2.isInc());
649:       assertFalse(node2.isCast());
650:       assertFalse(node2.isDebugger());
651:       assertFalse(node2.isFunction());
652:       assertFalse(node2.isFalse());
653:       assertEquals((-1), node2.getSourcePosition());
654:       assertFalse(node2.isAnd());
655:       assertNotNull(string0);
656:       
657:       int int0 = node1.getIntProp(254);
658:       assertFalse(node0.equals((Object)node2));
659:       assertFalse(node0.equals((Object)node1));
660:       assertFalse(node1.equals((Object)node0));
661:       assertFalse(node1.equals((Object)node2));
662:       assertEquals(40, Node.ORIGINALNAME_PROP);
663:       assertEquals(50, Node.FREE_CALL);
664:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
665:       assertEquals(57, Node.REFLECTED_OBJECT);
666:       assertEquals(48, Node.DIRECTIVES);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
670:       assertEquals(49, Node.DIRECT_EVAL);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(36, Node.QUOTED_PROP);
674:       assertEquals(53, Node.INPUT_ID);
675:       assertEquals(52, Node.LENGTH);
676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
677:       assertEquals(8, Node.FLAG_NO_THROWS);
678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(39, Node.EMPTY_BLOCK);
681:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(43, Node.IS_CONSTANT_NAME);
692:       assertEquals(51, Node.STATIC_SOURCE_FILE);
693:       assertEquals(12, Node.COLUMN_BITS);
694:       assertEquals(46, Node.IS_NAMESPACE);
695:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
696:       assertEquals(32, Node.INCRDECR_PROP);
697:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
698:       assertEquals(37, Node.OPT_ARG_NAME);
699:       assertEquals(56, Node.CHANGE_TIME);
700:       assertEquals(32, Node.INCRDECR_PROP);
701:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
702:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
703:       assertEquals(12, Node.COLUMN_BITS);
704:       assertEquals(47, Node.IS_DISPATCHER);
705:       assertEquals(2, Node.POST_FLAG);
706:       assertEquals(30, Node.VAR_ARGS_NAME);
707:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
708:       assertEquals(53, Node.INPUT_ID);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(57, Node.LAST_PROP);
711:       assertEquals(49, Node.DIRECT_EVAL);
712:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
713:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
714:       assertEquals(29, Node.JSDOC_INFO_PROP);
715:       assertEquals(55, Node.INFERRED_FUNCTION);
716:       assertEquals(52, Node.LENGTH);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(36, Node.QUOTED_PROP);
719:       assertEquals(8, Node.FLAG_NO_THROWS);
720:       assertEquals(39, Node.EMPTY_BLOCK);
721:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
722:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
723:       assertEquals(48, Node.DIRECTIVES);
724:       assertEquals(40, Node.ORIGINALNAME_PROP);
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(54, Node.SLASH_V);
727:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
728:       assertEquals(43, Node.IS_CONSTANT_NAME);
729:       assertEquals(1, Node.DECR_FLAG);
730:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(50, Node.FREE_CALL);
733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
734:       assertEquals(0, int0);
735:       assertNotSame(node0, node2);
736:       assertFalse(node0.isGetterDef());
737:       assertFalse(node0.isDelProp());
738:       assertFalse(node0.isIf());
739:       assertFalse(node0.isFor());
740:       assertFalse(node0.isNE());
741:       assertFalse(node0.isArrayLit());
742:       assertFalse(node0.isFunction());
743:       assertFalse(node0.isDefaultCase());
744:       assertFalse(node0.isVoid());
745:       assertFalse(node0.isTrue());
746:       assertFalse(node0.isIn());
747:       assertFalse(node0.isSetterDef());
748:       assertFalse(node0.isInc());
749:       assertFalse(node0.isEmpty());
750:       assertFalse(node0.isParamList());
751:       assertFalse(node0.isThis());
752:       assertFalse(node0.isVar());
753:       assertFalse(node0.isStringKey());
754:       assertEquals(254, node0.getType());
755:       assertFalse(node0.isHook());
756:       assertEquals(0, node0.getChildCount());
757:       assertFalse(node0.isInstanceOf());
758:       assertFalse(node0.isCatch());
759:       assertFalse(node0.isWith());
760:       assertFalse(node0.isCase());
761:       assertFalse(node0.isRegExp());
762:       assertEquals((-1), node0.getCharno());
763:       assertFalse(node0.isSwitch());
764:       assertFalse(node0.isBlock());
765:       assertFalse(node0.isTry());
766:       assertFalse(node0.hasOneChild());
767:       assertFalse(node0.isScript());
768:       assertFalse(node0.isNumber());
769:       assertFalse(node0.hasChildren());
770:       assertEquals((-1), node0.getSourcePosition());
771:       assertFalse(node0.isTypeOf());
772:       assertFalse(node0.isAssign());
773:       assertFalse(node0.isDec());
774:       assertFalse(node0.isLabelName());
775:       assertFalse(node0.isReturn());
776:       assertFalse(node0.isLabel());
777:       assertEquals((-1), node0.getLineno());
778:       assertFalse(node0.isExprResult());
779:       assertFalse(node0.isContinue());
780:       assertFalse(node0.isGetElem());
781:       assertFalse(node0.hasMoreThanOneChild());
782:       assertFalse(node0.isCast());
783:       assertFalse(node0.isDo());
784:       assertFalse(node0.isAssignAdd());
785:       assertFalse(node0.isNew());
786:       assertFalse(node0.isOr());
787:       assertFalse(node0.isAdd());
788:       assertFalse(node0.isBreak());
789:       assertFalse(node0.isName());
790:       assertFalse(node0.isComma());
791:       assertFalse(node0.isNull());
792:       assertFalse(node0.isThrow());
793:       assertFalse(node0.isCall());
794:       assertFalse(node0.isFalse());
795:       assertFalse(node0.isString());
796:       assertFalse(node0.isWhile());
797:       assertFalse(node0.isNot());
798:       assertFalse(node0.isAnd());
799:       assertFalse(node0.isDebugger());
800:       assertFalse(node0.isObjectLit());
801:       assertFalse(node0.isGetProp());
802:       assertFalse(node1.isInstanceOf());
803:       assertFalse(node1.isGetProp());
804:       assertFalse(node1.isWith());
805:       assertFalse(node1.isFalse());
806:       assertFalse(node1.isThis());
807:       assertFalse(node1.isComma());
808:       assertFalse(node1.isHook());
809:       assertFalse(node1.isThrow());
810:       assertFalse(node1.isInc());
811:       assertFalse(node1.isGetElem());
812:       assertFalse(node1.isExprResult());
813:       assertFalse(node1.isBreak());
814:       assertFalse(node1.isOr());
815:       assertFalse(node1.isAssignAdd());
816:       assertTrue(node1.hasChildren());
817:       assertEquals(1, node1.getChildCount());
818:       assertFalse(node1.isLabel());
819:       assertFalse(node1.hasMoreThanOneChild());
820:       assertFalse(node1.isDo());
821:       assertFalse(node1.isCase());
822:       assertFalse(node1.isBlock());
823:       assertFalse(node1.isFor());
824:       assertEquals(155647, node1.getSourcePosition());
825:       assertFalse(node1.isTry());
826:       assertFalse(node1.isArrayLit());
827:       assertFalse(node1.isScript());
828:       assertFalse(node1.isLabelName());
829:       assertFalse(node1.isNumber());
830:       assertFalse(node1.isGetterDef());
831:       assertEquals(4095, node1.getCharno());
832:       assertFalse(node1.isSwitch());
833:       assertFalse(node1.isParamList());
834:       assertFalse(node1.isStringKey());
835:       assertFalse(node1.isCatch());
836:       assertFalse(node1.isSetterDef());
837:       assertEquals(37, node1.getLineno());
838:       assertFalse(node1.isDefaultCase());
839:       assertFalse(node1.isRegExp());
840:       assertFalse(node1.isVar());
841:       assertFalse(node1.isNew());
842:       assertFalse(node1.isVoid());
843:       assertFalse(node1.isAdd());
844:       assertEquals((-2145), node1.getType());
845:       assertFalse(node1.isEmpty());
846:       assertFalse(node1.isCall());
847:       assertFalse(node1.isIf());
848:       assertFalse(node1.isDelProp());
849:       assertFalse(node1.isName());
850:       assertFalse(node1.isNE());
851:       assertFalse(node1.isNull());
852:       assertFalse(node1.isTrue());
853:       assertFalse(node1.isReturn());
854:       assertFalse(node1.isIn());
855:       assertFalse(node1.isContinue());
856:       assertFalse(node1.isAssign());
857:       assertTrue(node1.hasOneChild());
858:       assertFalse(node1.isWhile());
859:       assertFalse(node1.isDec());
860:       assertFalse(node1.isTypeOf());
861:       assertFalse(node1.isFunction());
862:       assertFalse(node1.isCast());
863:       assertFalse(node1.isNot());
864:       assertFalse(node1.isString());
865:       assertFalse(node1.isObjectLit());
866:       assertFalse(node1.isAnd());
867:       assertFalse(node1.isDebugger());
868:       
869:       boolean boolean0 = node1.isLocalResultCall();
870:       assertFalse(node0.equals((Object)node2));
871:       assertFalse(node0.equals((Object)node1));
872:       assertFalse(node1.equals((Object)node0));
873:       assertFalse(node1.equals((Object)node2));
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(50, Node.FREE_CALL);
876:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
877:       assertEquals(57, Node.REFLECTED_OBJECT);
878:       assertEquals(48, Node.DIRECTIVES);
879:       assertEquals(54, Node.SLASH_V);
880:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
881:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
882:       assertEquals(49, Node.DIRECT_EVAL);
883:       assertEquals(55, Node.INFERRED_FUNCTION);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(36, Node.QUOTED_PROP);
886:       assertEquals(53, Node.INPUT_ID);
887:       assertEquals(52, Node.LENGTH);
888:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
889:       assertEquals(8, Node.FLAG_NO_THROWS);
890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(39, Node.EMPTY_BLOCK);
893:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
894:       assertEquals(29, Node.JSDOC_INFO_PROP);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(56, Node.CHANGE_TIME);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(1, Node.DECR_FLAG);
902:       assertEquals(4095, Node.COLUMN_MASK);
903:       assertEquals(43, Node.IS_CONSTANT_NAME);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(12, Node.COLUMN_BITS);
906:       assertEquals(46, Node.IS_NAMESPACE);
907:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(56, Node.CHANGE_TIME);
912:       assertEquals(32, Node.INCRDECR_PROP);
913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
914:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
915:       assertEquals(12, Node.COLUMN_BITS);
916:       assertEquals(47, Node.IS_DISPATCHER);
917:       assertEquals(2, Node.POST_FLAG);
918:       assertEquals(30, Node.VAR_ARGS_NAME);
919:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
920:       assertEquals(53, Node.INPUT_ID);
921:       assertEquals(15, Node.NO_SIDE_EFFECTS);
922:       assertEquals(57, Node.LAST_PROP);
923:       assertEquals(49, Node.DIRECT_EVAL);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(55, Node.INFERRED_FUNCTION);
928:       assertEquals(52, Node.LENGTH);
929:       assertEquals(57, Node.REFLECTED_OBJECT);
930:       assertEquals(36, Node.QUOTED_PROP);
931:       assertEquals(8, Node.FLAG_NO_THROWS);
932:       assertEquals(39, Node.EMPTY_BLOCK);
933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
935:       assertEquals(48, Node.DIRECTIVES);
936:       assertEquals(40, Node.ORIGINALNAME_PROP);
937:       assertEquals(4095, Node.COLUMN_MASK);
938:       assertEquals(54, Node.SLASH_V);
939:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
940:       assertEquals(43, Node.IS_CONSTANT_NAME);
941:       assertEquals(1, Node.DECR_FLAG);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(46, Node.IS_NAMESPACE);
944:       assertEquals(50, Node.FREE_CALL);
945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
946:       assertFalse(boolean0);
947:       assertNotSame(node0, node2);
948:       assertFalse(node0.isGetterDef());
949:       assertFalse(node0.isDelProp());
950:       assertFalse(node0.isIf());
951:       assertFalse(node0.isFor());
952:       assertFalse(node0.isNE());
953:       assertFalse(node0.isArrayLit());
954:       assertFalse(node0.isFunction());
955:       assertFalse(node0.isDefaultCase());
956:       assertFalse(node0.isVoid());
957:       assertFalse(node0.isTrue());
958:       assertFalse(node0.isIn());
959:       assertFalse(node0.isSetterDef());
960:       assertFalse(node0.isInc());
961:       assertFalse(node0.isEmpty());
962:       assertFalse(node0.isParamList());
963:       assertFalse(node0.isThis());
964:       assertFalse(node0.isVar());
965:       assertFalse(node0.isStringKey());
966:       assertEquals(254, node0.getType());
967:       assertFalse(node0.isHook());
968:       assertEquals(0, node0.getChildCount());
969:       assertFalse(node0.isInstanceOf());
970:       assertFalse(node0.isCatch());
971:       assertFalse(node0.isWith());
972:       assertFalse(node0.isCase());
973:       assertFalse(node0.isRegExp());
974:       assertEquals((-1), node0.getCharno());
975:       assertFalse(node0.isSwitch());
976:       assertFalse(node0.isBlock());
977:       assertFalse(node0.isTry());
978:       assertFalse(node0.hasOneChild());
979:       assertFalse(node0.isScript());
980:       assertFalse(node0.isNumber());
981:       assertFalse(node0.hasChildren());
982:       assertEquals((-1), node0.getSourcePosition());
983:       assertFalse(node0.isTypeOf());
984:       assertFalse(node0.isAssign());
985:       assertFalse(node0.isDec());
986:       assertFalse(node0.isLabelName());
987:       assertFalse(node0.isReturn());
988:       assertFalse(node0.isLabel());
989:       assertEquals((-1), node0.getLineno());
990:       assertFalse(node0.isExprResult());
991:       assertFalse(node0.isContinue());
992:       assertFalse(node0.isGetElem());
993:       assertFalse(node0.hasMoreThanOneChild());
994:       assertFalse(node0.isCast());
995:       assertFalse(node0.isDo());
996:       assertFalse(node0.isAssignAdd());
997:       assertFalse(node0.isNew());
998:       assertFalse(node0.isOr());
999:       assertFalse(node0.isAdd());
1000:       assertFalse(node0.isBreak());
1001:       assertFalse(node0.isName());
1002:       assertFalse(node0.isComma());
1003:       assertFalse(node0.isNull());
1004:       assertFalse(node0.isThrow());
1005:       assertFalse(node0.isCall());
1006:       assertFalse(node0.isFalse());
1007:       assertFalse(node0.isString());
1008:       assertFalse(node0.isWhile());
1009:       assertFalse(node0.isNot());
1010:       assertFalse(node0.isAnd());
1011:       assertFalse(node0.isDebugger());
1012:       assertFalse(node0.isObjectLit());
1013:       assertFalse(node0.isGetProp());
1014:       assertFalse(node1.isInstanceOf());
1015:       assertFalse(node1.isGetProp());
1016:       assertFalse(node1.isWith());
1017:       assertFalse(node1.isFalse());
1018:       assertFalse(node1.isThis());
1019:       assertFalse(node1.isComma());
1020:       assertFalse(node1.isHook());
1021:       assertFalse(node1.isThrow());
1022:       assertFalse(node1.isInc());
1023:       assertFalse(node1.isGetElem());
1024:       assertFalse(node1.isExprResult());
1025:       assertFalse(node1.isBreak());
1026:       assertFalse(node1.isOr());
1027:       assertFalse(node1.isAssignAdd());
1028:       assertTrue(node1.hasChildren());
1029:       assertEquals(1, node1.getChildCount());
1030:       assertFalse(node1.isLabel());
1031:       assertFalse(node1.hasMoreThanOneChild());
1032:       assertFalse(node1.isDo());
1033:       assertFalse(node1.isCase());
1034:       assertFalse(node1.isBlock());
1035:       assertFalse(node1.isFor());
1036:       assertEquals(155647, node1.getSourcePosition());
1037:       assertFalse(node1.isTry());
1038:       assertFalse(node1.isArrayLit());
1039:       assertFalse(node1.isScript());
1040:       assertFalse(node1.isLabelName());
1041:       assertFalse(node1.isNumber());
1042:       assertFalse(node1.isGetterDef());
1043:       assertEquals(4095, node1.getCharno());
1044:       assertFalse(node1.isSwitch());
1045:       assertFalse(node1.isParamList());
1046:       assertFalse(node1.isStringKey());
1047:       assertFalse(node1.isCatch());
1048:       assertFalse(node1.isSetterDef());
1049:       assertEquals(37, node1.getLineno());
1050:       assertFalse(node1.isDefaultCase());
1051:       assertFalse(node1.isRegExp());
1052:       assertFalse(node1.isVar());
1053:       assertFalse(node1.isNew());
1054:       assertFalse(node1.isVoid());
1055:       assertFalse(node1.isAdd());
1056:       assertEquals((-2145), node1.getType());
1057:       assertFalse(node1.isEmpty());
1058:       assertFalse(node1.isCall());
1059:       assertFalse(node1.isIf());
1060:       assertFalse(node1.isDelProp());
1061:       assertFalse(node1.isName());
1062:       assertFalse(node1.isNE());
1063:       assertFalse(node1.isNull());
1064:       assertFalse(node1.isTrue());
1065:       assertFalse(node1.isReturn());
1066:       assertFalse(node1.isIn());
1067:       assertFalse(node1.isContinue());
1068:       assertFalse(node1.isAssign());
1069:       assertTrue(node1.hasOneChild());
1070:       assertFalse(node1.isWhile());
1071:       assertFalse(node1.isDec());
1072:       assertFalse(node1.isTypeOf());
1073:       assertFalse(node1.isFunction());
1074:       assertFalse(node1.isCast());
1075:       assertFalse(node1.isNot());
1076:       assertFalse(node1.isString());
1077:       assertFalse(node1.isObjectLit());
1078:       assertFalse(node1.isAnd());
1079:       assertFalse(node1.isDebugger());
1080:       
1081:       boolean boolean1 = node2.isLocalResultCall();
1082:       assertFalse(node2.equals((Object)node1));
1083:       assertFalse(node2.equals((Object)node0));
1084:       assertTrue(boolean1 == boolean0);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(2, Node.POST_FLAG);
1087:       assertEquals(32, Node.INCRDECR_PROP);
1088:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1089:       assertEquals(29, Node.JSDOC_INFO_PROP);
1090:       assertEquals(1, Node.DECR_FLAG);
1091:       assertEquals(30, Node.VAR_ARGS_NAME);
1092:       assertEquals(57, Node.LAST_PROP);
1093:       assertEquals(47, Node.IS_DISPATCHER);
1094:       assertEquals(12, Node.COLUMN_BITS);
1095:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1096:       assertEquals(53, Node.INPUT_ID);
1097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1098:       assertEquals(52, Node.LENGTH);
1099:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1102:       assertEquals(49, Node.DIRECT_EVAL);
1103:       assertEquals(56, Node.CHANGE_TIME);
1104:       assertEquals(36, Node.QUOTED_PROP);
1105:       assertEquals(57, Node.REFLECTED_OBJECT);
1106:       assertEquals(8, Node.FLAG_NO_THROWS);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(4095, Node.COLUMN_MASK);
1109:       assertEquals(55, Node.INFERRED_FUNCTION);
1110:       assertEquals(39, Node.EMPTY_BLOCK);
1111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(40, Node.ORIGINALNAME_PROP);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(50, Node.FREE_CALL);
1117:       assertEquals(43, Node.IS_CONSTANT_NAME);
1118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1119:       assertEquals(46, Node.IS_NAMESPACE);
1120:       assertEquals(54, Node.SLASH_V);
1121:       assertFalse(boolean1);
1122:       assertNotSame(node2, node0);
1123:       assertFalse(node2.isInstanceOf());
1124:       assertFalse(node2.isObjectLit());
1125:       assertFalse(node2.isComma());
1126:       assertFalse(node2.isNot());
1127:       assertFalse(node2.isWith());
1128:       assertFalse(node2.isScript());
1129:       assertFalse(node2.isThis());
1130:       assertFalse(node2.isThrow());
1131:       assertFalse(node2.isGetProp());
1132:       assertFalse(node2.isHook());
1133:       assertFalse(node2.isExprResult());
1134:       assertFalse(node2.isAssign());
1135:       assertFalse(node2.isBreak());
1136:       assertFalse(node2.isGetElem());
1137:       assertEquals((-1), node2.getLineno());
1138:       assertFalse(node2.isLabel());
1139:       assertFalse(node2.isOr());
1140:       assertFalse(node2.hasMoreThanOneChild());
1141:       assertFalse(node2.isNumber());
1142:       assertFalse(node2.isFor());
1143:       assertFalse(node2.isEmpty());
1144:       assertFalse(node2.isCase());
1145:       assertFalse(node2.isNew());
1146:       assertFalse(node2.isDo());
1147:       assertFalse(node2.isAssignAdd());
1148:       assertTrue(node2.isString());
1149:       assertFalse(node2.hasOneChild());
1150:       assertFalse(node2.isVar());
1151:       assertFalse(node2.isArrayLit());
1152:       assertEquals((-1), node2.getCharno());
1153:       assertFalse(node2.isGetterDef());
1154:       assertFalse(node2.isParamList());
1155:       assertFalse(node2.isStringKey());
1156:       assertFalse(node2.isLabelName());
1157:       assertFalse(node2.isSwitch());
1158:       assertEquals(0, node2.getChildCount());
1159:       assertFalse(node2.isCatch());
1160:       assertFalse(node2.isDefaultCase());
1161:       assertEquals(40, node2.getType());
1162:       assertFalse(node2.isSetterDef());
1163:       assertFalse(node2.isTry());
1164:       assertFalse(node2.isAdd());
1165:       assertFalse(node2.isBlock());
1166:       assertFalse(node2.isCall());
1167:       assertFalse(node2.isRegExp());
1168:       assertFalse(node2.isIf());
1169:       assertFalse(node2.isDelProp());
1170:       assertFalse(node2.isNull());
1171:       assertFalse(node2.isNE());
1172:       assertFalse(node2.isTrue());
1173:       assertFalse(node2.isVoid());
1174:       assertFalse(node2.isName());
1175:       assertFalse(node2.isIn());
1176:       assertFalse(node2.isReturn());
1177:       assertFalse(node2.isContinue());
1178:       assertFalse(node2.isTypeOf());
1179:       assertFalse(node2.hasChildren());
1180:       assertFalse(node2.isDec());
1181:       assertFalse(node2.isWhile());
1182:       assertFalse(node2.isInc());
1183:       assertFalse(node2.isCast());
1184:       assertFalse(node2.isDebugger());
1185:       assertFalse(node2.isFunction());
1186:       assertFalse(node2.isFalse());
1187:       assertEquals((-1), node2.getSourcePosition());
1188:       assertFalse(node2.isAnd());
1189:       
1190:       // Undeclared exception!
1191:       try { 
1192:         node1.getString();
1193:         fail("Expecting exception: IllegalStateException");
1194:       
1195:       } catch(IllegalStateException e) {
1196:          //
1197:          // -2145
1198:          //
1199:          verifyException("com.google.javascript.rhino.Token", e);
1200:       }
1201:   }
1202: }
RegularFileObject[/tmp/EvoSuite_100_1629223369186/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:49.349 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(254, node0.getType());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(254, node0.getType());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(iterable0);

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(254, node0.getType());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertEquals(37, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertEquals((-2145), node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertNotNull(node1);

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node2, node0);
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertNotNull(node2);

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotSame(node2, node0);
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertNotNull(string0);

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, int0);
assertNotSame(node0, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(254, node0.getType());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertEquals(37, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertEquals((-2145), node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());

boolean boolean0 = node1.isLocalResultCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(boolean0);
assertNotSame(node0, node2);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(254, node0.getType());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertEquals(37, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertEquals((-2145), node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());

boolean boolean1 = node2.isLocalResultCall();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean1);
assertNotSame(node2, node0);
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());

node1.getString();

[MASTER] 18:02:53.818 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1629223373331/com/google/javascript/rhino/Node_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1629223373331/com/google/javascript/rhino/Node_119_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:53.819 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:53.819 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:53.820 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 18:02:53.822 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1629223373331/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_119_tmp__ESTest extends Node_119_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("(|", 254, 0);
22:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
23:       assertEquals(55, Node.INFERRED_FUNCTION);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
26:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(40, Node.ORIGINALNAME_PROP);
30:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(15, Node.NO_SIDE_EFFECTS);
37:       assertEquals(57, Node.LAST_PROP);
38:       assertEquals(32, Node.INCRDECR_PROP);
39:       assertEquals(1, Node.DECR_FLAG);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(12, Node.COLUMN_BITS);
43:       assertEquals(47, Node.IS_DISPATCHER);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
46:       assertEquals(29, Node.JSDOC_INFO_PROP);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(48, Node.DIRECTIVES);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(52, Node.LENGTH);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertFalse(node0.isWhile());
59:       assertFalse(node0.isDo());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isContinue());
62:       assertFalse(node0.isAdd());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isAssignAdd());
65:       assertTrue(node0.isString());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isBlock());
70:       assertFalse(node0.isNumber());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isCast());
73:       assertFalse(node0.isStringKey());
74:       assertFalse(node0.isParamList());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isFunction());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isFor());
85:       assertEquals(40, node0.getType());
86:       assertFalse(node0.isIf());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isIn());
89:       assertFalse(node0.isNE());
90:       assertEquals(0, node0.getCharno());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isCase());
93:       assertFalse(node0.isInc());
94:       assertFalse(node0.isHook());
95:       assertFalse(node0.isThrow());
96:       assertFalse(node0.isGetterDef());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isGetProp());
99:       assertFalse(node0.isArrayLit());
100:       assertEquals(254, node0.getLineno());
101:       assertFalse(node0.isObjectLit());
102:       assertFalse(node0.isAnd());
103:       assertFalse(node0.isDebugger());
104:       assertFalse(node0.isDefaultCase());
105:       assertFalse(node0.isVoid());
106:       assertFalse(node0.isNot());
107:       assertFalse(node0.isExprResult());
108:       assertEquals(0, node0.getChildCount());
109:       assertEquals(1040384, node0.getSourcePosition());
110:       assertFalse(node0.isDec());
111:       assertFalse(node0.isBreak());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isAssign());
114:       assertFalse(node0.isComma());
115:       assertFalse(node0.isTypeOf());
116:       assertFalse(node0.isDelProp());
117:       assertFalse(node0.isName());
118:       assertFalse(node0.isGetElem());
119:       assertFalse(node0.isEmpty());
120:       assertFalse(node0.isCall());
121:       assertFalse(node0.isOr());
122:       assertFalse(node0.isNull());
123:       assertFalse(node0.isTrue());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
127:       assertEquals(55, Node.INFERRED_FUNCTION);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
130:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
131:       assertEquals(4095, Node.COLUMN_MASK);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(54, Node.SLASH_V);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(49, Node.DIRECT_EVAL);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(57, Node.LAST_PROP);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(29, Node.JSDOC_INFO_PROP);
151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(8, Node.FLAG_NO_THROWS);
160:       assertEquals(57, Node.REFLECTED_OBJECT);
161:       assertEquals(36, Node.QUOTED_PROP);
162:       assertFalse(iterable0.contains(node0));
163:       assertFalse(node0.isWhile());
164:       assertFalse(node0.isDo());
165:       assertFalse(node0.isNew());
166:       assertFalse(node0.isContinue());
167:       assertFalse(node0.isAdd());
168:       assertFalse(node0.hasMoreThanOneChild());
169:       assertFalse(node0.isAssignAdd());
170:       assertTrue(node0.isString());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isReturn());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isNumber());
176:       assertFalse(node0.isLabelName());
177:       assertFalse(node0.isCast());
178:       assertFalse(node0.isStringKey());
179:       assertFalse(node0.isParamList());
180:       assertFalse(node0.isWith());
181:       assertFalse(node0.isFunction());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isScript());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isTry());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isFor());
190:       assertEquals(40, node0.getType());
191:       assertFalse(node0.isIf());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isIn());
194:       assertFalse(node0.isNE());
195:       assertEquals(0, node0.getCharno());
196:       assertFalse(node0.isSwitch());
197:       assertFalse(node0.isCase());
198:       assertFalse(node0.isInc());
199:       assertFalse(node0.isHook());
200:       assertFalse(node0.isThrow());
201:       assertFalse(node0.isGetterDef());
202:       assertFalse(node0.isFalse());
203:       assertFalse(node0.isGetProp());
204:       assertFalse(node0.isArrayLit());
205:       assertEquals(254, node0.getLineno());
206:       assertFalse(node0.isObjectLit());
207:       assertFalse(node0.isAnd());
208:       assertFalse(node0.isDebugger());
209:       assertFalse(node0.isDefaultCase());
210:       assertFalse(node0.isVoid());
211:       assertFalse(node0.isNot());
212:       assertFalse(node0.isExprResult());
213:       assertEquals(0, node0.getChildCount());
214:       assertEquals(1040384, node0.getSourcePosition());
215:       assertFalse(node0.isDec());
216:       assertFalse(node0.isBreak());
217:       assertFalse(node0.hasChildren());
218:       assertFalse(node0.isAssign());
219:       assertFalse(node0.isComma());
220:       assertFalse(node0.isTypeOf());
221:       assertFalse(node0.isDelProp());
222:       assertFalse(node0.isName());
223:       assertFalse(node0.isGetElem());
224:       assertFalse(node0.isEmpty());
225:       assertFalse(node0.isCall());
226:       assertFalse(node0.isOr());
227:       assertFalse(node0.isNull());
228:       assertFalse(node0.isTrue());
229:       
230:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
231:       assertFalse(node1.equals((Object)node0));
232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(43, Node.IS_CONSTANT_NAME);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
237:       assertEquals(4095, Node.COLUMN_MASK);
238:       assertEquals(50, Node.FREE_CALL);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
245:       assertEquals(49, Node.DIRECT_EVAL);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(1, Node.DECR_FLAG);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(2, Node.POST_FLAG);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(47, Node.IS_DISPATCHER);
254:       assertEquals(30, Node.VAR_ARGS_NAME);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(39, Node.EMPTY_BLOCK);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(8, Node.FLAG_NO_THROWS);
266:       assertEquals(57, Node.REFLECTED_OBJECT);
267:       assertEquals(36, Node.QUOTED_PROP);
268:       assertEquals(56, Node.CHANGE_TIME);
269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
270:       assertEquals(47, Node.IS_DISPATCHER);
271:       assertEquals(29, Node.JSDOC_INFO_PROP);
272:       assertEquals(37, Node.OPT_ARG_NAME);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
277:       assertEquals(43, Node.IS_CONSTANT_NAME);
278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
279:       assertEquals(57, Node.LAST_PROP);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(53, Node.INPUT_ID);
282:       assertEquals(40, Node.ORIGINALNAME_PROP);
283:       assertEquals(2, Node.POST_FLAG);
284:       assertEquals(30, Node.VAR_ARGS_NAME);
285:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
286:       assertEquals(39, Node.EMPTY_BLOCK);
287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
288:       assertEquals(48, Node.DIRECTIVES);
289:       assertEquals(57, Node.REFLECTED_OBJECT);
290:       assertEquals(55, Node.INFERRED_FUNCTION);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
293:       assertEquals(52, Node.LENGTH);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(50, Node.FREE_CALL);
296:       assertEquals(36, Node.QUOTED_PROP);
297:       assertEquals(1, Node.DECR_FLAG);
298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
299:       assertEquals(49, Node.DIRECT_EVAL);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(12, Node.COLUMN_BITS);
303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
304:       assertFalse(node0.isWhile());
305:       assertFalse(node0.isDo());
306:       assertFalse(node0.isNew());
307:       assertFalse(node0.isContinue());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.hasMoreThanOneChild());
310:       assertFalse(node0.isAssignAdd());
311:       assertTrue(node0.isString());
312:       assertFalse(node0.isLabel());
313:       assertFalse(node0.isReturn());
314:       assertFalse(node0.isVar());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.isNumber());
317:       assertFalse(node0.isLabelName());
318:       assertFalse(node0.isCast());
319:       assertFalse(node0.isStringKey());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isWith());
322:       assertFalse(node0.isFunction());
323:       assertFalse(node0.isRegExp());
324:       assertFalse(node0.isCatch());
325:       assertFalse(node0.isScript());
326:       assertFalse(node0.isInstanceOf());
327:       assertFalse(node0.hasOneChild());
328:       assertFalse(node0.isTry());
329:       assertFalse(node0.isThis());
330:       assertFalse(node0.isFor());
331:       assertEquals(40, node0.getType());
332:       assertFalse(node0.isIf());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isIn());
335:       assertFalse(node0.isNE());
336:       assertEquals(0, node0.getCharno());
337:       assertFalse(node0.isSwitch());
338:       assertFalse(node0.isCase());
339:       assertFalse(node0.isInc());
340:       assertFalse(node0.isHook());
341:       assertFalse(node0.isThrow());
342:       assertFalse(node0.isGetterDef());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isGetProp());
345:       assertFalse(node0.isArrayLit());
346:       assertEquals(254, node0.getLineno());
347:       assertFalse(node0.isObjectLit());
348:       assertFalse(node0.isAnd());
349:       assertFalse(node0.isDebugger());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isVoid());
352:       assertFalse(node0.isNot());
353:       assertFalse(node0.isExprResult());
354:       assertEquals(0, node0.getChildCount());
355:       assertEquals(1040384, node0.getSourcePosition());
356:       assertFalse(node0.isDec());
357:       assertFalse(node0.isBreak());
358:       assertFalse(node0.hasChildren());
359:       assertFalse(node0.isAssign());
360:       assertFalse(node0.isComma());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.isDelProp());
363:       assertFalse(node0.isName());
364:       assertFalse(node0.isGetElem());
365:       assertFalse(node0.isEmpty());
366:       assertFalse(node0.isCall());
367:       assertFalse(node0.isOr());
368:       assertFalse(node0.isNull());
369:       assertFalse(node0.isTrue());
370:       assertFalse(node1.isComma());
371:       assertFalse(node1.isBreak());
372:       assertFalse(node1.isInstanceOf());
373:       assertFalse(node1.isGetProp());
374:       assertFalse(node1.isAnd());
375:       assertFalse(node1.isObjectLit());
376:       assertFalse(node1.isNot());
377:       assertFalse(node1.isSwitch());
378:       assertFalse(node1.isInc());
379:       assertFalse(node1.isCast());
380:       assertFalse(node1.isThrow());
381:       assertFalse(node1.isFalse());
382:       assertFalse(node1.isTypeOf());
383:       assertFalse(node1.isOr());
384:       assertFalse(node1.isAssignAdd());
385:       assertFalse(node1.isDelProp());
386:       assertFalse(node1.isEmpty());
387:       assertFalse(node1.isGetElem());
388:       assertFalse(node1.isExprResult());
389:       assertFalse(node1.isVoid());
390:       assertFalse(node1.isTrue());
391:       assertFalse(node1.isDebugger());
392:       assertFalse(node1.isString());
393:       assertFalse(node1.isCall());
394:       assertFalse(node1.isAssign());
395:       assertFalse(node1.isDec());
396:       assertFalse(node1.isWhile());
397:       assertTrue(node1.hasOneChild());
398:       assertFalse(node1.isReturn());
399:       assertFalse(node1.isParamList());
400:       assertEquals(37, node1.getLineno());
401:       assertFalse(node1.isSetterDef());
402:       assertFalse(node1.isStringKey());
403:       assertFalse(node1.isName());
404:       assertFalse(node1.isNull());
405:       assertFalse(node1.isNew());
406:       assertFalse(node1.isDefaultCase());
407:       assertFalse(node1.isFunction());
408:       assertFalse(node1.isAdd());
409:       assertFalse(node1.isArrayLit());
410:       assertFalse(node1.isContinue());
411:       assertFalse(node1.isDo());
412:       assertFalse(node1.isVar());
413:       assertFalse(node1.isLabel());
414:       assertFalse(node1.isNumber());
415:       assertFalse(node1.isIn());
416:       assertTrue(node1.hasChildren());
417:       assertFalse(node1.isLabelName());
418:       assertFalse(node1.isGetterDef());
419:       assertFalse(node1.isIf());
420:       assertFalse(node1.isNE());
421:       assertFalse(node1.isRegExp());
422:       assertFalse(node1.isTry());
423:       assertEquals(4095, node1.getCharno());
424:       assertEquals(155647, node1.getSourcePosition());
425:       assertEquals((-2145), node1.getType());
426:       assertFalse(node1.isScript());
427:       assertFalse(node1.isCase());
428:       assertFalse(node1.isCatch());
429:       assertFalse(node1.isWith());
430:       assertFalse(node1.hasMoreThanOneChild());
431:       assertEquals(1, node1.getChildCount());
432:       assertFalse(node1.isFor());
433:       assertFalse(node1.isThis());
434:       assertFalse(node1.isHook());
435:       assertFalse(node1.isBlock());
436:       
437:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
438:       assertFalse(node2.equals((Object)node0));
439:       assertFalse(node2.equals((Object)node1));
440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
441:       assertEquals(43, Node.IS_CONSTANT_NAME);
442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
443:       assertEquals(53, Node.INPUT_ID);
444:       assertEquals(55, Node.INFERRED_FUNCTION);
445:       assertEquals(8, Node.FLAG_NO_THROWS);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(47, Node.IS_DISPATCHER);
448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
449:       assertEquals(29, Node.JSDOC_INFO_PROP);
450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
451:       assertEquals(40, Node.ORIGINALNAME_PROP);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(2, Node.POST_FLAG);
454:       assertEquals(30, Node.VAR_ARGS_NAME);
455:       assertEquals(15, Node.NO_SIDE_EFFECTS);
456:       assertEquals(57, Node.LAST_PROP);
457:       assertEquals(1, Node.DECR_FLAG);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(46, Node.IS_NAMESPACE);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(52, Node.LENGTH);
462:       assertEquals(54, Node.SLASH_V);
463:       assertEquals(50, Node.FREE_CALL);
464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
465:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
467:       assertEquals(56, Node.CHANGE_TIME);
468:       assertEquals(48, Node.DIRECTIVES);
469:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
470:       assertEquals(37, Node.OPT_ARG_NAME);
471:       assertEquals(32, Node.INCRDECR_PROP);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
476:       assertNotSame(node2, node0);
477:       assertFalse(node2.isInc());
478:       assertFalse(node2.isSwitch());
479:       assertEquals((-1), node2.getCharno());
480:       assertFalse(node2.isIn());
481:       assertFalse(node2.isEmpty());
482:       assertFalse(node2.isFalse());
483:       assertFalse(node2.isThrow());
484:       assertFalse(node2.isRegExp());
485:       assertFalse(node2.isTry());
486:       assertFalse(node2.isWith());
487:       assertFalse(node2.isScript());
488:       assertFalse(node2.isArrayLit());
489:       assertFalse(node2.isLabelName());
490:       assertFalse(node2.isIf());
491:       assertFalse(node2.isNE());
492:       assertFalse(node2.isThis());
493:       assertFalse(node2.isNumber());
494:       assertFalse(node2.isGetterDef());
495:       assertEquals((-1), node2.getLineno());
496:       assertFalse(node2.isInstanceOf());
497:       assertFalse(node2.hasMoreThanOneChild());
498:       assertFalse(node2.isCatch());
499:       assertFalse(node2.isCase());
500:       assertFalse(node2.hasOneChild());
501:       assertFalse(node2.isHook());
502:       assertFalse(node2.isBlock());
503:       assertFalse(node2.isFor());
504:       assertFalse(node2.isNew());
505:       assertTrue(node2.isString());
506:       assertFalse(node2.isAdd());
507:       assertFalse(node2.isCall());
508:       assertFalse(node2.isName());
509:       assertFalse(node2.isStringKey());
510:       assertFalse(node2.isNull());
511:       assertFalse(node2.isParamList());
512:       assertFalse(node2.isSetterDef());
513:       assertFalse(node2.isOr());
514:       assertFalse(node2.isContinue());
515:       assertEquals(0, node2.getChildCount());
516:       assertFalse(node2.isDo());
517:       assertFalse(node2.isAssignAdd());
518:       assertFalse(node2.isLabel());
519:       assertFalse(node2.isDefaultCase());
520:       assertEquals(40, node2.getType());
521:       assertFalse(node2.isVar());
522:       assertFalse(node2.isExprResult());
523:       assertFalse(node2.isFunction());
524:       assertFalse(node2.isTrue());
525:       assertFalse(node2.isDebugger());
526:       assertFalse(node2.isVoid());
527:       assertFalse(node2.isCast());
528:       assertFalse(node2.isAnd());
529:       assertFalse(node2.isObjectLit());
530:       assertFalse(node2.isNot());
531:       assertFalse(node2.isComma());
532:       assertFalse(node2.isGetProp());
533:       assertEquals((-1), node2.getSourcePosition());
534:       assertFalse(node2.isDec());
535:       assertFalse(node2.isTypeOf());
536:       assertFalse(node2.isDelProp());
537:       assertFalse(node2.isBreak());
538:       assertFalse(node2.isGetElem());
539:       assertFalse(node2.isAssign());
540:       assertFalse(node2.isWhile());
541:       assertFalse(node2.isReturn());
542:       assertFalse(node2.hasChildren());
543:       
544:       Node node3 = node2.useSourceInfoFromForTree(node1);
545:       assertFalse(node0.equals((Object)node1));
546:       assertFalse(node0.equals((Object)node2));
547:       assertFalse(node1.equals((Object)node0));
548:       assertFalse(node1.equals((Object)node2));
549:       assertFalse(node2.equals((Object)node0));
550:       assertFalse(node2.equals((Object)node1));
551:       assertFalse(node3.equals((Object)node1));
552:       assertFalse(node3.equals((Object)node0));
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(43, Node.IS_CONSTANT_NAME);
556:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
557:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
558:       assertEquals(4095, Node.COLUMN_MASK);
559:       assertEquals(50, Node.FREE_CALL);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
562:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
563:       assertEquals(46, Node.IS_NAMESPACE);
564:       assertEquals(54, Node.SLASH_V);
565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(15, Node.NO_SIDE_EFFECTS);
568:       assertEquals(57, Node.LAST_PROP);
569:       assertEquals(32, Node.INCRDECR_PROP);
570:       assertEquals(1, Node.DECR_FLAG);
571:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
572:       assertEquals(2, Node.POST_FLAG);
573:       assertEquals(12, Node.COLUMN_BITS);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(30, Node.VAR_ARGS_NAME);
576:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
577:       assertEquals(29, Node.JSDOC_INFO_PROP);
578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
579:       assertEquals(56, Node.CHANGE_TIME);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(53, Node.INPUT_ID);
584:       assertEquals(52, Node.LENGTH);
585:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
586:       assertEquals(8, Node.FLAG_NO_THROWS);
587:       assertEquals(57, Node.REFLECTED_OBJECT);
588:       assertEquals(36, Node.QUOTED_PROP);
589:       assertEquals(56, Node.CHANGE_TIME);
590:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
591:       assertEquals(47, Node.IS_DISPATCHER);
592:       assertEquals(29, Node.JSDOC_INFO_PROP);
593:       assertEquals(37, Node.OPT_ARG_NAME);
594:       assertEquals(32, Node.INCRDECR_PROP);
595:       assertEquals(51, Node.STATIC_SOURCE_FILE);
596:       assertEquals(46, Node.IS_NAMESPACE);
597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
598:       assertEquals(43, Node.IS_CONSTANT_NAME);
599:       assertEquals(15, Node.NO_SIDE_EFFECTS);
600:       assertEquals(57, Node.LAST_PROP);
601:       assertEquals(54, Node.SLASH_V);
602:       assertEquals(53, Node.INPUT_ID);
603:       assertEquals(40, Node.ORIGINALNAME_PROP);
604:       assertEquals(2, Node.POST_FLAG);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
607:       assertEquals(39, Node.EMPTY_BLOCK);
608:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
609:       assertEquals(48, Node.DIRECTIVES);
610:       assertEquals(57, Node.REFLECTED_OBJECT);
611:       assertEquals(55, Node.INFERRED_FUNCTION);
612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
614:       assertEquals(52, Node.LENGTH);
615:       assertEquals(8, Node.FLAG_NO_THROWS);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(36, Node.QUOTED_PROP);
618:       assertEquals(1, Node.DECR_FLAG);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(49, Node.DIRECT_EVAL);
621:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
622:       assertEquals(4095, Node.COLUMN_MASK);
623:       assertEquals(12, Node.COLUMN_BITS);
624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
625:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
626:       assertEquals(43, Node.IS_CONSTANT_NAME);
627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
628:       assertEquals(53, Node.INPUT_ID);
629:       assertEquals(55, Node.INFERRED_FUNCTION);
630:       assertEquals(8, Node.FLAG_NO_THROWS);
631:       assertEquals(36, Node.QUOTED_PROP);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(29, Node.JSDOC_INFO_PROP);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(2, Node.POST_FLAG);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(15, Node.NO_SIDE_EFFECTS);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(1, Node.DECR_FLAG);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(46, Node.IS_NAMESPACE);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(52, Node.LENGTH);
647:       assertEquals(54, Node.SLASH_V);
648:       assertEquals(50, Node.FREE_CALL);
649:       assertEquals(51, Node.STATIC_SOURCE_FILE);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
652:       assertEquals(56, Node.CHANGE_TIME);
653:       assertEquals(48, Node.DIRECTIVES);
654:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
655:       assertEquals(37, Node.OPT_ARG_NAME);
656:       assertEquals(32, Node.INCRDECR_PROP);
657:       assertEquals(12, Node.COLUMN_BITS);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(43, Node.IS_CONSTANT_NAME);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(55, Node.INFERRED_FUNCTION);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(53, Node.INPUT_ID);
669:       assertEquals(39, Node.EMPTY_BLOCK);
670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
671:       assertEquals(56, Node.CHANGE_TIME);
672:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
673:       assertEquals(8, Node.FLAG_NO_THROWS);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
676:       assertEquals(4095, Node.COLUMN_MASK);
677:       assertEquals(37, Node.OPT_ARG_NAME);
678:       assertEquals(48, Node.DIRECTIVES);
679:       assertEquals(30, Node.VAR_ARGS_NAME);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(57, Node.LAST_PROP);
682:       assertEquals(54, Node.SLASH_V);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(51, Node.STATIC_SOURCE_FILE);
687:       assertEquals(52, Node.LENGTH);
688:       assertEquals(1, Node.DECR_FLAG);
689:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
691:       assertEquals(2, Node.POST_FLAG);
692:       assertEquals(50, Node.FREE_CALL);
693:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
694:       assertEquals(47, Node.IS_DISPATCHER);
695:       assertEquals(46, Node.IS_NAMESPACE);
696:       assertEquals(40, Node.ORIGINALNAME_PROP);
697:       assertNotSame(node0, node2);
698:       assertNotSame(node0, node3);
699:       assertSame(node2, node3);
700:       assertNotSame(node2, node0);
701:       assertNotSame(node3, node0);
702:       assertSame(node3, node2);
703:       assertFalse(node0.isWhile());
704:       assertFalse(node0.isDo());
705:       assertFalse(node0.isNew());
706:       assertFalse(node0.isContinue());
707:       assertFalse(node0.isAdd());
708:       assertFalse(node0.hasMoreThanOneChild());
709:       assertFalse(node0.isAssignAdd());
710:       assertTrue(node0.isString());
711:       assertFalse(node0.isLabel());
712:       assertFalse(node0.isReturn());
713:       assertFalse(node0.isVar());
714:       assertFalse(node0.isBlock());
715:       assertFalse(node0.isNumber());
716:       assertFalse(node0.isLabelName());
717:       assertFalse(node0.isCast());
718:       assertFalse(node0.isStringKey());
719:       assertFalse(node0.isParamList());
720:       assertFalse(node0.isWith());
721:       assertFalse(node0.isFunction());
722:       assertFalse(node0.isRegExp());
723:       assertFalse(node0.isCatch());
724:       assertFalse(node0.isScript());
725:       assertFalse(node0.isInstanceOf());
726:       assertFalse(node0.hasOneChild());
727:       assertFalse(node0.isTry());
728:       assertFalse(node0.isThis());
729:       assertFalse(node0.isFor());
730:       assertEquals(40, node0.getType());
731:       assertFalse(node0.isIf());
732:       assertFalse(node0.isSetterDef());
733:       assertFalse(node0.isIn());
734:       assertFalse(node0.isNE());
735:       assertEquals(0, node0.getCharno());
736:       assertFalse(node0.isSwitch());
737:       assertFalse(node0.isCase());
738:       assertFalse(node0.isInc());
739:       assertFalse(node0.isHook());
740:       assertFalse(node0.isThrow());
741:       assertFalse(node0.isGetterDef());
742:       assertFalse(node0.isFalse());
743:       assertFalse(node0.isGetProp());
744:       assertFalse(node0.isArrayLit());
745:       assertEquals(254, node0.getLineno());
746:       assertFalse(node0.isObjectLit());
747:       assertFalse(node0.isAnd());
748:       assertFalse(node0.isDebugger());
749:       assertFalse(node0.isDefaultCase());
750:       assertFalse(node0.isVoid());
751:       assertFalse(node0.isNot());
752:       assertFalse(node0.isExprResult());
753:       assertEquals(0, node0.getChildCount());
754:       assertEquals(1040384, node0.getSourcePosition());
755:       assertFalse(node0.isDec());
756:       assertFalse(node0.isBreak());
757:       assertFalse(node0.hasChildren());
758:       assertFalse(node0.isAssign());
759:       assertFalse(node0.isComma());
760:       assertFalse(node0.isTypeOf());
761:       assertFalse(node0.isDelProp());
762:       assertFalse(node0.isName());
763:       assertFalse(node0.isGetElem());
764:       assertFalse(node0.isEmpty());
765:       assertFalse(node0.isCall());
766:       assertFalse(node0.isOr());
767:       assertFalse(node0.isNull());
768:       assertFalse(node0.isTrue());
769:       assertFalse(node1.isComma());
770:       assertFalse(node1.isBreak());
771:       assertFalse(node1.isInstanceOf());
772:       assertFalse(node1.isGetProp());
773:       assertFalse(node1.isAnd());
774:       assertFalse(node1.isObjectLit());
775:       assertFalse(node1.isNot());
776:       assertFalse(node1.isSwitch());
777:       assertFalse(node1.isInc());
778:       assertFalse(node1.isCast());
779:       assertFalse(node1.isThrow());
780:       assertFalse(node1.isFalse());
781:       assertFalse(node1.isTypeOf());
782:       assertFalse(node1.isOr());
783:       assertFalse(node1.isAssignAdd());
784:       assertFalse(node1.isDelProp());
785:       assertFalse(node1.isEmpty());
786:       assertFalse(node1.isGetElem());
787:       assertFalse(node1.isExprResult());
788:       assertFalse(node1.isVoid());
789:       assertFalse(node1.isTrue());
790:       assertFalse(node1.isDebugger());
791:       assertFalse(node1.isString());
792:       assertFalse(node1.isCall());
793:       assertFalse(node1.isAssign());
794:       assertFalse(node1.isDec());
795:       assertFalse(node1.isWhile());
796:       assertTrue(node1.hasOneChild());
797:       assertFalse(node1.isReturn());
798:       assertFalse(node1.isParamList());
799:       assertEquals(37, node1.getLineno());
800:       assertFalse(node1.isSetterDef());
801:       assertFalse(node1.isStringKey());
802:       assertFalse(node1.isName());
803:       assertFalse(node1.isNull());
804:       assertFalse(node1.isNew());
805:       assertFalse(node1.isDefaultCase());
806:       assertFalse(node1.isFunction());
807:       assertFalse(node1.isAdd());
808:       assertFalse(node1.isArrayLit());
809:       assertFalse(node1.isContinue());
810:       assertFalse(node1.isDo());
811:       assertFalse(node1.isVar());
812:       assertFalse(node1.isLabel());
813:       assertFalse(node1.isNumber());
814:       assertFalse(node1.isIn());
815:       assertTrue(node1.hasChildren());
816:       assertFalse(node1.isLabelName());
817:       assertFalse(node1.isGetterDef());
818:       assertFalse(node1.isIf());
819:       assertFalse(node1.isNE());
820:       assertFalse(node1.isRegExp());
821:       assertFalse(node1.isTry());
822:       assertEquals(4095, node1.getCharno());
823:       assertEquals(155647, node1.getSourcePosition());
824:       assertEquals((-2145), node1.getType());
825:       assertFalse(node1.isScript());
826:       assertFalse(node1.isCase());
827:       assertFalse(node1.isCatch());
828:       assertFalse(node1.isWith());
829:       assertFalse(node1.hasMoreThanOneChild());
830:       assertEquals(1, node1.getChildCount());
831:       assertFalse(node1.isFor());
832:       assertFalse(node1.isThis());
833:       assertFalse(node1.isHook());
834:       assertFalse(node1.isBlock());
835:       assertFalse(node2.isInc());
836:       assertFalse(node2.isSwitch());
837:       assertEquals(4095, node2.getCharno());
838:       assertFalse(node2.isIn());
839:       assertFalse(node2.isEmpty());
840:       assertFalse(node2.isFalse());
841:       assertFalse(node2.isThrow());
842:       assertFalse(node2.isRegExp());
843:       assertFalse(node2.isTry());
844:       assertFalse(node2.isWith());
845:       assertFalse(node2.isScript());
846:       assertFalse(node2.isArrayLit());
847:       assertFalse(node2.isLabelName());
848:       assertFalse(node2.isIf());
849:       assertFalse(node2.isNE());
850:       assertFalse(node2.isThis());
851:       assertFalse(node2.isNumber());
852:       assertFalse(node2.isGetterDef());
853:       assertFalse(node2.isInstanceOf());
854:       assertFalse(node2.hasMoreThanOneChild());
855:       assertFalse(node2.isCatch());
856:       assertFalse(node2.isCase());
857:       assertFalse(node2.hasOneChild());
858:       assertEquals(155647, node2.getSourcePosition());
859:       assertFalse(node2.isHook());
860:       assertFalse(node2.isBlock());
861:       assertFalse(node2.isFor());
862:       assertFalse(node2.isNew());
863:       assertTrue(node2.isString());
864:       assertFalse(node2.isAdd());
865:       assertFalse(node2.isCall());
866:       assertFalse(node2.isName());
867:       assertFalse(node2.isStringKey());
868:       assertFalse(node2.isNull());
869:       assertFalse(node2.isParamList());
870:       assertFalse(node2.isSetterDef());
871:       assertEquals(37, node2.getLineno());
872:       assertFalse(node2.isOr());
873:       assertFalse(node2.isContinue());
874:       assertEquals(0, node2.getChildCount());
875:       assertFalse(node2.isDo());
876:       assertFalse(node2.isAssignAdd());
877:       assertFalse(node2.isLabel());
878:       assertFalse(node2.isDefaultCase());
879:       assertEquals(40, node2.getType());
880:       assertFalse(node2.isVar());
881:       assertFalse(node2.isExprResult());
882:       assertFalse(node2.isFunction());
883:       assertFalse(node2.isTrue());
884:       assertFalse(node2.isDebugger());
885:       assertFalse(node2.isVoid());
886:       assertFalse(node2.isCast());
887:       assertFalse(node2.isAnd());
888:       assertFalse(node2.isObjectLit());
889:       assertFalse(node2.isNot());
890:       assertFalse(node2.isComma());
891:       assertFalse(node2.isGetProp());
892:       assertFalse(node2.isDec());
893:       assertFalse(node2.isTypeOf());
894:       assertFalse(node2.isDelProp());
895:       assertFalse(node2.isBreak());
896:       assertFalse(node2.isGetElem());
897:       assertFalse(node2.isAssign());
898:       assertFalse(node2.isWhile());
899:       assertFalse(node2.isReturn());
900:       assertFalse(node2.hasChildren());
901:       assertFalse(node3.isNew());
902:       assertFalse(node3.isDo());
903:       assertFalse(node3.isBlock());
904:       assertTrue(node3.isString());
905:       assertFalse(node3.isWhile());
906:       assertFalse(node3.isOr());
907:       assertFalse(node3.isAdd());
908:       assertFalse(node3.isTypeOf());
909:       assertFalse(node3.isNull());
910:       assertFalse(node3.isDec());
911:       assertFalse(node3.hasChildren());
912:       assertFalse(node3.isReturn());
913:       assertFalse(node3.isName());
914:       assertFalse(node3.hasMoreThanOneChild());
915:       assertFalse(node3.isCatch());
916:       assertFalse(node3.isCall());
917:       assertFalse(node3.isGetElem());
918:       assertFalse(node3.isAssign());
919:       assertFalse(node3.isFunction());
920:       assertFalse(node3.isDebugger());
921:       assertEquals(40, node3.getType());
922:       assertFalse(node3.isAnd());
923:       assertFalse(node3.isObjectLit());
924:       assertFalse(node3.isNot());
925:       assertFalse(node3.isSetterDef());
926:       assertFalse(node3.isThrow());
927:       assertFalse(node3.isCast());
928:       assertEquals(37, node3.getLineno());
929:       assertFalse(node3.isFalse());
930:       assertFalse(node3.isContinue());
931:       assertFalse(node3.isSwitch());
932:       assertFalse(node3.isInc());
933:       assertEquals(4095, node3.getCharno());
934:       assertFalse(node3.isCase());
935:       assertFalse(node3.isIn());
936:       assertFalse(node3.isThis());
937:       assertFalse(node3.isComma());
938:       assertFalse(node3.isNE());
939:       assertFalse(node3.isGetProp());
940:       assertFalse(node3.isBreak());
941:       assertFalse(node3.isFor());
942:       assertFalse(node3.isDelProp());
943:       assertFalse(node3.isIf());
944:       assertFalse(node3.isHook());
945:       assertFalse(node3.isWith());
946:       assertFalse(node3.isInstanceOf());
947:       assertFalse(node3.isScript());
948:       assertFalse(node3.isExprResult());
949:       assertFalse(node3.isRegExp());
950:       assertFalse(node3.isVoid());
951:       assertFalse(node3.isTrue());
952:       assertEquals(155647, node3.getSourcePosition());
953:       assertFalse(node3.isTry());
954:       assertFalse(node3.isDefaultCase());
955:       assertFalse(node3.hasOneChild());
956:       assertFalse(node3.isGetterDef());
957:       assertFalse(node3.isEmpty());
958:       assertFalse(node3.isNumber());
959:       assertFalse(node3.isLabel());
960:       assertFalse(node3.isLabelName());
961:       assertFalse(node3.isStringKey());
962:       assertFalse(node3.isAssignAdd());
963:       assertFalse(node3.isParamList());
964:       assertFalse(node3.isVar());
965:       assertEquals(0, node3.getChildCount());
966:       assertFalse(node3.isArrayLit());
967:       
968:       String string0 = node2.toStringTree();
969:       assertFalse(node2.equals((Object)node0));
970:       assertFalse(node2.equals((Object)node1));
971:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
972:       assertEquals(43, Node.IS_CONSTANT_NAME);
973:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
974:       assertEquals(53, Node.INPUT_ID);
975:       assertEquals(55, Node.INFERRED_FUNCTION);
976:       assertEquals(8, Node.FLAG_NO_THROWS);
977:       assertEquals(36, Node.QUOTED_PROP);
978:       assertEquals(47, Node.IS_DISPATCHER);
979:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
980:       assertEquals(29, Node.JSDOC_INFO_PROP);
981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
982:       assertEquals(40, Node.ORIGINALNAME_PROP);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(2, Node.POST_FLAG);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(57, Node.LAST_PROP);
988:       assertEquals(1, Node.DECR_FLAG);
989:       assertEquals(49, Node.DIRECT_EVAL);
990:       assertEquals(46, Node.IS_NAMESPACE);
991:       assertEquals(57, Node.REFLECTED_OBJECT);
992:       assertEquals(52, Node.LENGTH);
993:       assertEquals(54, Node.SLASH_V);
994:       assertEquals(50, Node.FREE_CALL);
995:       assertEquals(51, Node.STATIC_SOURCE_FILE);
996:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(56, Node.CHANGE_TIME);
999:       assertEquals(48, Node.DIRECTIVES);
1000:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1001:       assertEquals(37, Node.OPT_ARG_NAME);
1002:       assertEquals(32, Node.INCRDECR_PROP);
1003:       assertEquals(12, Node.COLUMN_BITS);
1004:       assertEquals(4095, Node.COLUMN_MASK);
1005:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1006:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1007:       assertEquals("STRING ^T bi6mc\"24m1h|@{G 37\n", string0);
1008:       assertSame(node2, node3);
1009:       assertNotSame(node2, node0);
1010:       assertFalse(node2.isInc());
1011:       assertFalse(node2.isSwitch());
1012:       assertEquals(4095, node2.getCharno());
1013:       assertFalse(node2.isIn());
1014:       assertFalse(node2.isEmpty());
1015:       assertFalse(node2.isFalse());
1016:       assertFalse(node2.isThrow());
1017:       assertFalse(node2.isRegExp());
1018:       assertFalse(node2.isTry());
1019:       assertFalse(node2.isWith());
1020:       assertFalse(node2.isScript());
1021:       assertFalse(node2.isArrayLit());
1022:       assertFalse(node2.isLabelName());
1023:       assertFalse(node2.isIf());
1024:       assertFalse(node2.isNE());
1025:       assertFalse(node2.isThis());
1026:       assertFalse(node2.isNumber());
1027:       assertFalse(node2.isGetterDef());
1028:       assertFalse(node2.isInstanceOf());
1029:       assertFalse(node2.hasMoreThanOneChild());
1030:       assertFalse(node2.isCatch());
1031:       assertFalse(node2.isCase());
1032:       assertFalse(node2.hasOneChild());
1033:       assertEquals(155647, node2.getSourcePosition());
1034:       assertFalse(node2.isHook());
1035:       assertFalse(node2.isBlock());
1036:       assertFalse(node2.isFor());
1037:       assertFalse(node2.isNew());
1038:       assertTrue(node2.isString());
1039:       assertFalse(node2.isAdd());
1040:       assertFalse(node2.isCall());
1041:       assertFalse(node2.isName());
1042:       assertFalse(node2.isStringKey());
1043:       assertFalse(node2.isNull());
1044:       assertFalse(node2.isParamList());
1045:       assertFalse(node2.isSetterDef());
1046:       assertEquals(37, node2.getLineno());
1047:       assertFalse(node2.isOr());
1048:       assertFalse(node2.isContinue());
1049:       assertEquals(0, node2.getChildCount());
1050:       assertFalse(node2.isDo());
1051:       assertFalse(node2.isAssignAdd());
1052:       assertFalse(node2.isLabel());
1053:       assertFalse(node2.isDefaultCase());
1054:       assertEquals(40, node2.getType());
1055:       assertFalse(node2.isVar());
1056:       assertFalse(node2.isExprResult());
1057:       assertFalse(node2.isFunction());
1058:       assertFalse(node2.isTrue());
1059:       assertFalse(node2.isDebugger());
1060:       assertFalse(node2.isVoid());
1061:       assertFalse(node2.isCast());
1062:       assertFalse(node2.isAnd());
1063:       assertFalse(node2.isObjectLit());
1064:       assertFalse(node2.isNot());
1065:       assertFalse(node2.isComma());
1066:       assertFalse(node2.isGetProp());
1067:       assertFalse(node2.isDec());
1068:       assertFalse(node2.isTypeOf());
1069:       assertFalse(node2.isDelProp());
1070:       assertFalse(node2.isBreak());
1071:       assertFalse(node2.isGetElem());
1072:       assertFalse(node2.isAssign());
1073:       assertFalse(node2.isWhile());
1074:       assertFalse(node2.isReturn());
1075:       assertFalse(node2.hasChildren());
1076:       
1077:       int int0 = node1.getIntProp(254);
1078:       assertFalse(node0.equals((Object)node1));
1079:       assertFalse(node0.equals((Object)node2));
1080:       assertFalse(node0.equals((Object)node3));
1081:       assertFalse(node1.equals((Object)node3));
1082:       assertFalse(node1.equals((Object)node2));
1083:       assertFalse(node1.equals((Object)node0));
1084:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1085:       assertEquals(55, Node.INFERRED_FUNCTION);
1086:       assertEquals(43, Node.IS_CONSTANT_NAME);
1087:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(40, Node.ORIGINALNAME_PROP);
1092:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1093:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1094:       assertEquals(46, Node.IS_NAMESPACE);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1097:       assertEquals(49, Node.DIRECT_EVAL);
1098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1099:       assertEquals(57, Node.LAST_PROP);
1100:       assertEquals(32, Node.INCRDECR_PROP);
1101:       assertEquals(1, Node.DECR_FLAG);
1102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1103:       assertEquals(2, Node.POST_FLAG);
1104:       assertEquals(12, Node.COLUMN_BITS);
1105:       assertEquals(47, Node.IS_DISPATCHER);
1106:       assertEquals(30, Node.VAR_ARGS_NAME);
1107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1108:       assertEquals(29, Node.JSDOC_INFO_PROP);
1109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1110:       assertEquals(56, Node.CHANGE_TIME);
1111:       assertEquals(39, Node.EMPTY_BLOCK);
1112:       assertEquals(37, Node.OPT_ARG_NAME);
1113:       assertEquals(48, Node.DIRECTIVES);
1114:       assertEquals(53, Node.INPUT_ID);
1115:       assertEquals(52, Node.LENGTH);
1116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1117:       assertEquals(8, Node.FLAG_NO_THROWS);
1118:       assertEquals(57, Node.REFLECTED_OBJECT);
1119:       assertEquals(36, Node.QUOTED_PROP);
1120:       assertEquals(56, Node.CHANGE_TIME);
1121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1122:       assertEquals(47, Node.IS_DISPATCHER);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(37, Node.OPT_ARG_NAME);
1125:       assertEquals(32, Node.INCRDECR_PROP);
1126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1127:       assertEquals(46, Node.IS_NAMESPACE);
1128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1129:       assertEquals(43, Node.IS_CONSTANT_NAME);
1130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1131:       assertEquals(57, Node.LAST_PROP);
1132:       assertEquals(54, Node.SLASH_V);
1133:       assertEquals(53, Node.INPUT_ID);
1134:       assertEquals(40, Node.ORIGINALNAME_PROP);
1135:       assertEquals(2, Node.POST_FLAG);
1136:       assertEquals(30, Node.VAR_ARGS_NAME);
1137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1138:       assertEquals(39, Node.EMPTY_BLOCK);
1139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1140:       assertEquals(48, Node.DIRECTIVES);
1141:       assertEquals(57, Node.REFLECTED_OBJECT);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1145:       assertEquals(52, Node.LENGTH);
1146:       assertEquals(8, Node.FLAG_NO_THROWS);
1147:       assertEquals(50, Node.FREE_CALL);
1148:       assertEquals(36, Node.QUOTED_PROP);
1149:       assertEquals(1, Node.DECR_FLAG);
1150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1156:       assertEquals(0, int0);
1157:       assertNotSame(node0, node2);
1158:       assertNotSame(node0, node3);
1159:       assertFalse(node0.isWhile());
1160:       assertFalse(node0.isDo());
1161:       assertFalse(node0.isNew());
1162:       assertFalse(node0.isContinue());
1163:       assertFalse(node0.isAdd());
1164:       assertFalse(node0.hasMoreThanOneChild());
1165:       assertFalse(node0.isAssignAdd());
1166:       assertTrue(node0.isString());
1167:       assertFalse(node0.isLabel());
1168:       assertFalse(node0.isReturn());
1169:       assertFalse(node0.isVar());
1170:       assertFalse(node0.isBlock());
1171:       assertFalse(node0.isNumber());
1172:       assertFalse(node0.isLabelName());
1173:       assertFalse(node0.isCast());
1174:       assertFalse(node0.isStringKey());
1175:       assertFalse(node0.isParamList());
1176:       assertFalse(node0.isWith());
1177:       assertFalse(node0.isFunction());
1178:       assertFalse(node0.isRegExp());
1179:       assertFalse(node0.isCatch());
1180:       assertFalse(node0.isScript());
1181:       assertFalse(node0.isInstanceOf());
1182:       assertFalse(node0.hasOneChild());
1183:       assertFalse(node0.isTry());
1184:       assertFalse(node0.isThis());
1185:       assertFalse(node0.isFor());
1186:       assertEquals(40, node0.getType());
1187:       assertFalse(node0.isIf());
1188:       assertFalse(node0.isSetterDef());
1189:       assertFalse(node0.isIn());
1190:       assertFalse(node0.isNE());
1191:       assertEquals(0, node0.getCharno());
1192:       assertFalse(node0.isSwitch());
1193:       assertFalse(node0.isCase());
1194:       assertFalse(node0.isInc());
1195:       assertFalse(node0.isHook());
1196:       assertFalse(node0.isThrow());
1197:       assertFalse(node0.isGetterDef());
1198:       assertFalse(node0.isFalse());
1199:       assertFalse(node0.isGetProp());
1200:       assertFalse(node0.isArrayLit());
1201:       assertEquals(254, node0.getLineno());
1202:       assertFalse(node0.isObjectLit());
1203:       assertFalse(node0.isAnd());
1204:       assertFalse(node0.isDebugger());
1205:       assertFalse(node0.isDefaultCase());
1206:       assertFalse(node0.isVoid());
1207:       assertFalse(node0.isNot());
1208:       assertFalse(node0.isExprResult());
1209:       assertEquals(0, node0.getChildCount());
1210:       assertEquals(1040384, node0.getSourcePosition());
1211:       assertFalse(node0.isDec());
1212:       assertFalse(node0.isBreak());
1213:       assertFalse(node0.hasChildren());
1214:       assertFalse(node0.isAssign());
1215:       assertFalse(node0.isComma());
1216:       assertFalse(node0.isTypeOf());
1217:       assertFalse(node0.isDelProp());
1218:       assertFalse(node0.isName());
1219:       assertFalse(node0.isGetElem());
1220:       assertFalse(node0.isEmpty());
1221:       assertFalse(node0.isCall());
1222:       assertFalse(node0.isOr());
1223:       assertFalse(node0.isNull());
1224:       assertFalse(node0.isTrue());
1225:       assertFalse(node1.isComma());
1226:       assertFalse(node1.isBreak());
1227:       assertFalse(node1.isInstanceOf());
1228:       assertFalse(node1.isGetProp());
1229:       assertFalse(node1.isAnd());
1230:       assertFalse(node1.isObjectLit());
1231:       assertFalse(node1.isNot());
1232:       assertFalse(node1.isSwitch());
1233:       assertFalse(node1.isInc());
1234:       assertFalse(node1.isCast());
1235:       assertFalse(node1.isThrow());
1236:       assertFalse(node1.isFalse());
1237:       assertFalse(node1.isTypeOf());
1238:       assertFalse(node1.isOr());
1239:       assertFalse(node1.isAssignAdd());
1240:       assertFalse(node1.isDelProp());
1241:       assertFalse(node1.isEmpty());
1242:       assertFalse(node1.isGetElem());
1243:       assertFalse(node1.isExprResult());
1244:       assertFalse(node1.isVoid());
1245:       assertFalse(node1.isTrue());
1246:       assertFalse(node1.isDebugger());
1247:       assertFalse(node1.isString());
1248:       assertFalse(node1.isCall());
1249:       assertFalse(node1.isAssign());
1250:       assertFalse(node1.isDec());
1251:       assertFalse(node1.isWhile());
1252:       assertTrue(node1.hasOneChild());
1253:       assertFalse(node1.isReturn());
1254:       assertFalse(node1.isParamList());
1255:       assertEquals(37, node1.getLineno());
1256:       assertFalse(node1.isSetterDef());
1257:       assertFalse(node1.isStringKey());
1258:       assertFalse(node1.isName());
1259:       assertFalse(node1.isNull());
1260:       assertFalse(node1.isNew());
1261:       assertFalse(node1.isDefaultCase());
1262:       assertFalse(node1.isFunction());
1263:       assertFalse(node1.isAdd());
1264:       assertFalse(node1.isArrayLit());
1265:       assertFalse(node1.isContinue());
1266:       assertFalse(node1.isDo());
1267:       assertFalse(node1.isVar());
1268:       assertFalse(node1.isLabel());
1269:       assertFalse(node1.isNumber());
1270:       assertFalse(node1.isIn());
1271:       assertTrue(node1.hasChildren());
1272:       assertFalse(node1.isLabelName());
1273:       assertFalse(node1.isGetterDef());
1274:       assertFalse(node1.isIf());
1275:       assertFalse(node1.isNE());
1276:       assertFalse(node1.isRegExp());
1277:       assertFalse(node1.isTry());
1278:       assertEquals(4095, node1.getCharno());
1279:       assertEquals(155647, node1.getSourcePosition());
1280:       assertEquals((-2145), node1.getType());
1281:       assertFalse(node1.isScript());
1282:       assertFalse(node1.isCase());
1283:       assertFalse(node1.isCatch());
1284:       assertFalse(node1.isWith());
1285:       assertFalse(node1.hasMoreThanOneChild());
1286:       assertEquals(1, node1.getChildCount());
1287:       assertFalse(node1.isFor());
1288:       assertFalse(node1.isThis());
1289:       assertFalse(node1.isHook());
1290:       assertFalse(node1.isBlock());
1291:       
1292:       boolean boolean0 = node1.isEquivalentToShallow(node0);
1293:       assertFalse(node0.equals((Object)node1));
1294:       assertFalse(node0.equals((Object)node2));
1295:       assertFalse(node0.equals((Object)node3));
1296:       assertFalse(node1.equals((Object)node3));
1297:       assertFalse(node1.equals((Object)node2));
1298:       assertFalse(node1.equals((Object)node0));
1299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1300:       assertEquals(55, Node.INFERRED_FUNCTION);
1301:       assertEquals(43, Node.IS_CONSTANT_NAME);
1302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(4095, Node.COLUMN_MASK);
1305:       assertEquals(50, Node.FREE_CALL);
1306:       assertEquals(40, Node.ORIGINALNAME_PROP);
1307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1309:       assertEquals(46, Node.IS_NAMESPACE);
1310:       assertEquals(54, Node.SLASH_V);
1311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1312:       assertEquals(49, Node.DIRECT_EVAL);
1313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1314:       assertEquals(57, Node.LAST_PROP);
1315:       assertEquals(32, Node.INCRDECR_PROP);
1316:       assertEquals(1, Node.DECR_FLAG);
1317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1318:       assertEquals(2, Node.POST_FLAG);
1319:       assertEquals(12, Node.COLUMN_BITS);
1320:       assertEquals(47, Node.IS_DISPATCHER);
1321:       assertEquals(30, Node.VAR_ARGS_NAME);
1322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1323:       assertEquals(29, Node.JSDOC_INFO_PROP);
1324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1325:       assertEquals(56, Node.CHANGE_TIME);
1326:       assertEquals(39, Node.EMPTY_BLOCK);
1327:       assertEquals(37, Node.OPT_ARG_NAME);
1328:       assertEquals(48, Node.DIRECTIVES);
1329:       assertEquals(53, Node.INPUT_ID);
1330:       assertEquals(52, Node.LENGTH);
1331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1332:       assertEquals(8, Node.FLAG_NO_THROWS);
1333:       assertEquals(57, Node.REFLECTED_OBJECT);
1334:       assertEquals(36, Node.QUOTED_PROP);
1335:       assertEquals(56, Node.CHANGE_TIME);
1336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1337:       assertEquals(47, Node.IS_DISPATCHER);
1338:       assertEquals(29, Node.JSDOC_INFO_PROP);
1339:       assertEquals(37, Node.OPT_ARG_NAME);
1340:       assertEquals(32, Node.INCRDECR_PROP);
1341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1342:       assertEquals(46, Node.IS_NAMESPACE);
1343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1344:       assertEquals(43, Node.IS_CONSTANT_NAME);
1345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1346:       assertEquals(57, Node.LAST_PROP);
1347:       assertEquals(54, Node.SLASH_V);
1348:       assertEquals(53, Node.INPUT_ID);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       assertEquals(2, Node.POST_FLAG);
1351:       assertEquals(30, Node.VAR_ARGS_NAME);
1352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1353:       assertEquals(39, Node.EMPTY_BLOCK);
1354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1355:       assertEquals(48, Node.DIRECTIVES);
1356:       assertEquals(57, Node.REFLECTED_OBJECT);
1357:       assertEquals(55, Node.INFERRED_FUNCTION);
1358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1360:       assertEquals(52, Node.LENGTH);
1361:       assertEquals(8, Node.FLAG_NO_THROWS);
1362:       assertEquals(50, Node.FREE_CALL);
1363:       assertEquals(36, Node.QUOTED_PROP);
1364:       assertEquals(1, Node.DECR_FLAG);
1365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1366:       assertEquals(49, Node.DIRECT_EVAL);
1367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1368:       assertEquals(4095, Node.COLUMN_MASK);
1369:       assertEquals(12, Node.COLUMN_BITS);
1370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1371:       assertFalse(boolean0);
1372:       assertNotSame(node0, node2);
1373:       assertNotSame(node0, node3);
1374:       assertFalse(node0.isWhile());
1375:       assertFalse(node0.isDo());
1376:       assertFalse(node0.isNew());
1377:       assertFalse(node0.isContinue());
1378:       assertFalse(node0.isAdd());
1379:       assertFalse(node0.hasMoreThanOneChild());
1380:       assertFalse(node0.isAssignAdd());
1381:       assertTrue(node0.isString());
1382:       assertFalse(node0.isLabel());
1383:       assertFalse(node0.isReturn());
1384:       assertFalse(node0.isVar());
1385:       assertFalse(node0.isBlock());
1386:       assertFalse(node0.isNumber());
1387:       assertFalse(node0.isLabelName());
1388:       assertFalse(node0.isCast());
1389:       assertFalse(node0.isStringKey());
1390:       assertFalse(node0.isParamList());
1391:       assertFalse(node0.isWith());
1392:       assertFalse(node0.isFunction());
1393:       assertFalse(node0.isRegExp());
1394:       assertFalse(node0.isCatch());
1395:       assertFalse(node0.isScript());
1396:       assertFalse(node0.isInstanceOf());
1397:       assertFalse(node0.hasOneChild());
1398:       assertFalse(node0.isTry());
1399:       assertFalse(node0.isThis());
1400:       assertFalse(node0.isFor());
1401:       assertEquals(40, node0.getType());
1402:       assertFalse(node0.isIf());
1403:       assertFalse(node0.isSetterDef());
1404:       assertFalse(node0.isIn());
1405:       assertFalse(node0.isNE());
1406:       assertEquals(0, node0.getCharno());
1407:       assertFalse(node0.isSwitch());
1408:       assertFalse(node0.isCase());
1409:       assertFalse(node0.isInc());
1410:       assertFalse(node0.isHook());
1411:       assertFalse(node0.isThrow());
1412:       assertFalse(node0.isGetterDef());
1413:       assertFalse(node0.isFalse());
1414:       assertFalse(node0.isGetProp());
1415:       assertFalse(node0.isArrayLit());
1416:       assertEquals(254, node0.getLineno());
1417:       assertFalse(node0.isObjectLit());
1418:       assertFalse(node0.isAnd());
1419:       assertFalse(node0.isDebugger());
1420:       assertFalse(node0.isDefaultCase());
1421:       assertFalse(node0.isVoid());
1422:       assertFalse(node0.isNot());
1423:       assertFalse(node0.isExprResult());
1424:       assertEquals(0, node0.getChildCount());
1425:       assertEquals(1040384, node0.getSourcePosition());
1426:       assertFalse(node0.isDec());
1427:       assertFalse(node0.isBreak());
1428:       assertFalse(node0.hasChildren());
1429:       assertFalse(node0.isAssign());
1430:       assertFalse(node0.isComma());
1431:       assertFalse(node0.isTypeOf());
1432:       assertFalse(node0.isDelProp());
1433:       assertFalse(node0.isName());
1434:       assertFalse(node0.isGetElem());
1435:       assertFalse(node0.isEmpty());
1436:       assertFalse(node0.isCall());
1437:       assertFalse(node0.isOr());
1438:       assertFalse(node0.isNull());
1439:       assertFalse(node0.isTrue());
1440:       assertFalse(node1.isComma());
1441:       assertFalse(node1.isBreak());
1442:       assertFalse(node1.isInstanceOf());
1443:       assertFalse(node1.isGetProp());
1444:       assertFalse(node1.isAnd());
1445:       assertFalse(node1.isObjectLit());
1446:       assertFalse(node1.isNot());
1447:       assertFalse(node1.isSwitch());
1448:       assertFalse(node1.isInc());
1449:       assertFalse(node1.isCast());
1450:       assertFalse(node1.isThrow());
1451:       assertFalse(node1.isFalse());
1452:       assertFalse(node1.isTypeOf());
1453:       assertFalse(node1.isOr());
1454:       assertFalse(node1.isAssignAdd());
1455:       assertFalse(node1.isDelProp());
1456:       assertFalse(node1.isEmpty());
1457:       assertFalse(node1.isGetElem());
1458:       assertFalse(node1.isExprResult());
1459:       assertFalse(node1.isVoid());
1460:       assertFalse(node1.isTrue());
1461:       assertFalse(node1.isDebugger());
1462:       assertFalse(node1.isString());
1463:       assertFalse(node1.isCall());
1464:       assertFalse(node1.isAssign());
1465:       assertFalse(node1.isDec());
1466:       assertFalse(node1.isWhile());
1467:       assertTrue(node1.hasOneChild());
1468:       assertFalse(node1.isReturn());
1469:       assertFalse(node1.isParamList());
1470:       assertEquals(37, node1.getLineno());
1471:       assertFalse(node1.isSetterDef());
1472:       assertFalse(node1.isStringKey());
1473:       assertFalse(node1.isName());
1474:       assertFalse(node1.isNull());
1475:       assertFalse(node1.isNew());
1476:       assertFalse(node1.isDefaultCase());
1477:       assertFalse(node1.isFunction());
1478:       assertFalse(node1.isAdd());
1479:       assertFalse(node1.isArrayLit());
1480:       assertFalse(node1.isContinue());
1481:       assertFalse(node1.isDo());
1482:       assertFalse(node1.isVar());
1483:       assertFalse(node1.isLabel());
1484:       assertFalse(node1.isNumber());
1485:       assertFalse(node1.isIn());
1486:       assertTrue(node1.hasChildren());
1487:       assertFalse(node1.isLabelName());
1488:       assertFalse(node1.isGetterDef());
1489:       assertFalse(node1.isIf());
1490:       assertFalse(node1.isNE());
1491:       assertFalse(node1.isRegExp());
1492:       assertFalse(node1.isTry());
1493:       assertEquals(4095, node1.getCharno());
1494:       assertEquals(155647, node1.getSourcePosition());
1495:       assertEquals((-2145), node1.getType());
1496:       assertFalse(node1.isScript());
1497:       assertFalse(node1.isCase());
1498:       assertFalse(node1.isCatch());
1499:       assertFalse(node1.isWith());
1500:       assertFalse(node1.hasMoreThanOneChild());
1501:       assertEquals(1, node1.getChildCount());
1502:       assertFalse(node1.isFor());
1503:       assertFalse(node1.isThis());
1504:       assertFalse(node1.isHook());
1505:       assertFalse(node1.isBlock());
1506:       
1507:       Node node4 = node0.useSourceInfoFrom(node1);
1508:       assertFalse(node0.equals((Object)node1));
1509:       assertFalse(node0.equals((Object)node2));
1510:       assertFalse(node0.equals((Object)node3));
1511:       assertFalse(node1.equals((Object)node3));
1512:       assertFalse(node1.equals((Object)node2));
1513:       assertFalse(node1.equals((Object)node0));
1514:       assertFalse(node4.equals((Object)node3));
1515:       assertFalse(node4.equals((Object)node1));
1516:       assertFalse(node4.equals((Object)node2));
1517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1518:       assertEquals(55, Node.INFERRED_FUNCTION);
1519:       assertEquals(43, Node.IS_CONSTANT_NAME);
1520:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1522:       assertEquals(4095, Node.COLUMN_MASK);
1523:       assertEquals(50, Node.FREE_CALL);
1524:       assertEquals(40, Node.ORIGINALNAME_PROP);
1525:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1526:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1527:       assertEquals(46, Node.IS_NAMESPACE);
1528:       assertEquals(54, Node.SLASH_V);
1529:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1530:       assertEquals(49, Node.DIRECT_EVAL);
1531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1532:       assertEquals(57, Node.LAST_PROP);
1533:       assertEquals(32, Node.INCRDECR_PROP);
1534:       assertEquals(1, Node.DECR_FLAG);
1535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(12, Node.COLUMN_BITS);
1538:       assertEquals(47, Node.IS_DISPATCHER);
1539:       assertEquals(30, Node.VAR_ARGS_NAME);
1540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1541:       assertEquals(29, Node.JSDOC_INFO_PROP);
1542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1543:       assertEquals(56, Node.CHANGE_TIME);
1544:       assertEquals(39, Node.EMPTY_BLOCK);
1545:       assertEquals(37, Node.OPT_ARG_NAME);
1546:       assertEquals(48, Node.DIRECTIVES);
1547:       assertEquals(53, Node.INPUT_ID);
1548:       assertEquals(52, Node.LENGTH);
1549:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1550:       assertEquals(8, Node.FLAG_NO_THROWS);
1551:       assertEquals(57, Node.REFLECTED_OBJECT);
1552:       assertEquals(36, Node.QUOTED_PROP);
1553:       assertEquals(56, Node.CHANGE_TIME);
1554:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1555:       assertEquals(47, Node.IS_DISPATCHER);
1556:       assertEquals(29, Node.JSDOC_INFO_PROP);
1557:       assertEquals(37, Node.OPT_ARG_NAME);
1558:       assertEquals(32, Node.INCRDECR_PROP);
1559:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1560:       assertEquals(46, Node.IS_NAMESPACE);
1561:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1562:       assertEquals(43, Node.IS_CONSTANT_NAME);
1563:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1564:       assertEquals(57, Node.LAST_PROP);
1565:       assertEquals(54, Node.SLASH_V);
1566:       assertEquals(53, Node.INPUT_ID);
1567:       assertEquals(40, Node.ORIGINALNAME_PROP);
1568:       assertEquals(2, Node.POST_FLAG);
1569:       assertEquals(30, Node.VAR_ARGS_NAME);
1570:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1571:       assertEquals(39, Node.EMPTY_BLOCK);
1572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1573:       assertEquals(48, Node.DIRECTIVES);
1574:       assertEquals(57, Node.REFLECTED_OBJECT);
1575:       assertEquals(55, Node.INFERRED_FUNCTION);
1576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1577:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1578:       assertEquals(52, Node.LENGTH);
1579:       assertEquals(8, Node.FLAG_NO_THROWS);
1580:       assertEquals(50, Node.FREE_CALL);
1581:       assertEquals(36, Node.QUOTED_PROP);
1582:       assertEquals(1, Node.DECR_FLAG);
1583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1584:       assertEquals(49, Node.DIRECT_EVAL);
1585:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1586:       assertEquals(4095, Node.COLUMN_MASK);
1587:       assertEquals(12, Node.COLUMN_BITS);
1588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1589:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1590:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1591:       assertEquals(43, Node.IS_CONSTANT_NAME);
1592:       assertEquals(56, Node.CHANGE_TIME);
1593:       assertEquals(36, Node.QUOTED_PROP);
1594:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1595:       assertEquals(37, Node.OPT_ARG_NAME);
1596:       assertEquals(55, Node.INFERRED_FUNCTION);
1597:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1598:       assertEquals(8, Node.FLAG_NO_THROWS);
1599:       assertEquals(2, Node.POST_FLAG);
1600:       assertEquals(30, Node.VAR_ARGS_NAME);
1601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1602:       assertEquals(57, Node.LAST_PROP);
1603:       assertEquals(47, Node.IS_DISPATCHER);
1604:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1605:       assertEquals(39, Node.EMPTY_BLOCK);
1606:       assertEquals(29, Node.JSDOC_INFO_PROP);
1607:       assertEquals(53, Node.INPUT_ID);
1608:       assertEquals(57, Node.REFLECTED_OBJECT);
1609:       assertEquals(40, Node.ORIGINALNAME_PROP);
1610:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1611:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1612:       assertEquals(52, Node.LENGTH);
1613:       assertEquals(50, Node.FREE_CALL);
1614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1615:       assertEquals(54, Node.SLASH_V);
1616:       assertEquals(48, Node.DIRECTIVES);
1617:       assertEquals(49, Node.DIRECT_EVAL);
1618:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1619:       assertEquals(4095, Node.COLUMN_MASK);
1620:       assertEquals(12, Node.COLUMN_BITS);
1621:       assertEquals(46, Node.IS_NAMESPACE);
1622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1623:       assertEquals(1, Node.DECR_FLAG);
1624:       assertEquals(32, Node.INCRDECR_PROP);
1625:       assertNotSame(node0, node2);
1626:       assertSame(node0, node4);
1627:       assertNotSame(node0, node3);
1628:       assertNotSame(node4, node3);
1629:       assertNotSame(node4, node2);
1630:       assertSame(node4, node0);
1631:       assertFalse(node0.isWhile());
1632:       assertFalse(node0.isDo());
1633:       assertFalse(node0.isNew());
1634:       assertFalse(node0.isContinue());
1635:       assertFalse(node0.isAdd());
1636:       assertFalse(node0.hasMoreThanOneChild());
1637:       assertFalse(node0.isAssignAdd());
1638:       assertTrue(node0.isString());
1639:       assertFalse(node0.isLabel());
1640:       assertFalse(node0.isReturn());
1641:       assertFalse(node0.isVar());
1642:       assertFalse(node0.isBlock());
1643:       assertEquals(37, node0.getLineno());
1644:       assertFalse(node0.isNumber());
1645:       assertFalse(node0.isLabelName());
1646:       assertFalse(node0.isCast());
1647:       assertFalse(node0.isStringKey());
1648:       assertFalse(node0.isParamList());
1649:       assertFalse(node0.isWith());
1650:       assertFalse(node0.isFunction());
1651:       assertFalse(node0.isRegExp());
1652:       assertFalse(node0.isCatch());
1653:       assertFalse(node0.isScript());
1654:       assertFalse(node0.isInstanceOf());
1655:       assertFalse(node0.hasOneChild());
1656:       assertEquals(155647, node0.getSourcePosition());
1657:       assertFalse(node0.isTry());
1658:       assertFalse(node0.isThis());
1659:       assertFalse(node0.isFor());
1660:       assertEquals(40, node0.getType());
1661:       assertFalse(node0.isIf());
1662:       assertFalse(node0.isSetterDef());
1663:       assertFalse(node0.isIn());
1664:       assertFalse(node0.isNE());
1665:       assertFalse(node0.isSwitch());
1666:       assertEquals(4095, node0.getCharno());
1667:       assertFalse(node0.isCase());
1668:       assertFalse(node0.isInc());
1669:       assertFalse(node0.isHook());
1670:       assertFalse(node0.isThrow());
1671:       assertFalse(node0.isGetterDef());
1672:       assertFalse(node0.isFalse());
1673:       assertFalse(node0.isGetProp());
1674:       assertFalse(node0.isArrayLit());
1675:       assertFalse(node0.isObjectLit());
1676:       assertFalse(node0.isAnd());
1677:       assertFalse(node0.isDebugger());
1678:       assertFalse(node0.isDefaultCase());
1679:       assertFalse(node0.isVoid());
1680:       assertFalse(node0.isNot());
1681:       assertFalse(node0.isExprResult());
1682:       assertEquals(0, node0.getChildCount());
1683:       assertFalse(node0.isDec());
1684:       assertFalse(node0.isBreak());
1685:       assertFalse(node0.hasChildren());
1686:       assertFalse(node0.isAssign());
1687:       assertFalse(node0.isComma());
1688:       assertFalse(node0.isTypeOf());
1689:       assertFalse(node0.isDelProp());
1690:       assertFalse(node0.isName());
1691:       assertFalse(node0.isGetElem());
1692:       assertFalse(node0.isEmpty());
1693:       assertFalse(node0.isCall());
1694:       assertFalse(node0.isOr());
1695:       assertFalse(node0.isNull());
1696:       assertFalse(node0.isTrue());
1697:       assertFalse(node1.isComma());
1698:       assertFalse(node1.isBreak());
1699:       assertFalse(node1.isInstanceOf());
1700:       assertFalse(node1.isGetProp());
1701:       assertFalse(node1.isAnd());
1702:       assertFalse(node1.isObjectLit());
1703:       assertFalse(node1.isNot());
1704:       assertFalse(node1.isSwitch());
1705:       assertFalse(node1.isInc());
1706:       assertFalse(node1.isCast());
1707:       assertFalse(node1.isThrow());
1708:       assertFalse(node1.isFalse());
1709:       assertFalse(node1.isTypeOf());
1710:       assertFalse(node1.isOr());
1711:       assertFalse(node1.isAssignAdd());
1712:       assertFalse(node1.isDelProp());
1713:       assertFalse(node1.isEmpty());
1714:       assertFalse(node1.isGetElem());
1715:       assertFalse(node1.isExprResult());
1716:       assertFalse(node1.isVoid());
1717:       assertFalse(node1.isTrue());
1718:       assertFalse(node1.isDebugger());
1719:       assertFalse(node1.isString());
1720:       assertFalse(node1.isCall());
1721:       assertFalse(node1.isAssign());
1722:       assertFalse(node1.isDec());
1723:       assertFalse(node1.isWhile());
1724:       assertTrue(node1.hasOneChild());
1725:       assertFalse(node1.isReturn());
1726:       assertFalse(node1.isParamList());
1727:       assertEquals(37, node1.getLineno());
1728:       assertFalse(node1.isSetterDef());
1729:       assertFalse(node1.isStringKey());
1730:       assertFalse(node1.isName());
1731:       assertFalse(node1.isNull());
1732:       assertFalse(node1.isNew());
1733:       assertFalse(node1.isDefaultCase());
1734:       assertFalse(node1.isFunction());
1735:       assertFalse(node1.isAdd());
1736:       assertFalse(node1.isArrayLit());
1737:       assertFalse(node1.isContinue());
1738:       assertFalse(node1.isDo());
1739:       assertFalse(node1.isVar());
1740:       assertFalse(node1.isLabel());
1741:       assertFalse(node1.isNumber());
1742:       assertFalse(node1.isIn());
1743:       assertTrue(node1.hasChildren());
1744:       assertFalse(node1.isLabelName());
1745:       assertFalse(node1.isGetterDef());
1746:       assertFalse(node1.isIf());
1747:       assertFalse(node1.isNE());
1748:       assertFalse(node1.isRegExp());
1749:       assertFalse(node1.isTry());
1750:       assertEquals(4095, node1.getCharno());
1751:       assertEquals(155647, node1.getSourcePosition());
1752:       assertEquals((-2145), node1.getType());
1753:       assertFalse(node1.isScript());
1754:       assertFalse(node1.isCase());
1755:       assertFalse(node1.isCatch());
1756:       assertFalse(node1.isWith());
1757:       assertFalse(node1.hasMoreThanOneChild());
1758:       assertEquals(1, node1.getChildCount());
1759:       assertFalse(node1.isFor());
1760:       assertFalse(node1.isThis());
1761:       assertFalse(node1.isHook());
1762:       assertFalse(node1.isBlock());
1763:       assertFalse(node4.isThrow());
1764:       assertFalse(node4.isFalse());
1765:       assertFalse(node4.isThis());
1766:       assertFalse(node4.isHook());
1767:       assertFalse(node4.isComma());
1768:       assertFalse(node4.isSwitch());
1769:       assertFalse(node4.isBreak());
1770:       assertFalse(node4.isInstanceOf());
1771:       assertFalse(node4.isIn());
1772:       assertFalse(node4.isEmpty());
1773:       assertFalse(node4.isInc());
1774:       assertFalse(node4.isLabelName());
1775:       assertFalse(node4.isGetterDef());
1776:       assertFalse(node4.isIf());
1777:       assertFalse(node4.isFor());
1778:       assertFalse(node4.isNE());
1779:       assertFalse(node4.isRegExp());
1780:       assertFalse(node4.isArrayLit());
1781:       assertFalse(node4.isCatch());
1782:       assertFalse(node4.isWith());
1783:       assertFalse(node4.hasMoreThanOneChild());
1784:       assertFalse(node4.isTry());
1785:       assertEquals(4095, node4.getCharno());
1786:       assertTrue(node4.isString());
1787:       assertFalse(node4.isNumber());
1788:       assertEquals(155647, node4.getSourcePosition());
1789:       assertFalse(node4.hasOneChild());
1790:       assertFalse(node4.isScript());
1791:       assertFalse(node4.isCase());
1792:       assertFalse(node4.isCall());
1793:       assertFalse(node4.isStringKey());
1794:       assertFalse(node4.isName());
1795:       assertFalse(node4.isVar());
1796:       assertFalse(node4.isNull());
1797:       assertFalse(node4.isBlock());
1798:       assertFalse(node4.isParamList());
1799:       assertEquals(37, node4.getLineno());
1800:       assertFalse(node4.isContinue());
1801:       assertFalse(node4.isDo());
1802:       assertEquals(0, node4.getChildCount());
1803:       assertFalse(node4.isLabel());
1804:       assertEquals(40, node4.getType());
1805:       assertFalse(node4.isNew());
1806:       assertFalse(node4.isOr());
1807:       assertFalse(node4.isAssignAdd());
1808:       assertFalse(node4.isDefaultCase());
1809:       assertFalse(node4.isAdd());
1810:       assertFalse(node4.isSetterDef());
1811:       assertFalse(node4.isCast());
1812:       assertFalse(node4.isAssign());
1813:       assertFalse(node4.hasChildren());
1814:       assertFalse(node4.isDec());
1815:       assertFalse(node4.isExprResult());
1816:       assertFalse(node4.isVoid());
1817:       assertFalse(node4.isTrue());
1818:       assertFalse(node4.isTypeOf());
1819:       assertFalse(node4.isFunction());
1820:       assertFalse(node4.isDelProp());
1821:       assertFalse(node4.isGetElem());
1822:       assertFalse(node4.isAnd());
1823:       assertFalse(node4.isObjectLit());
1824:       assertFalse(node4.isNot());
1825:       assertFalse(node4.isWhile());
1826:       assertFalse(node4.isReturn());
1827:       assertFalse(node4.isGetProp());
1828:       assertFalse(node4.isDebugger());
1829:       
1830:       Node node5 = node4.cloneTree();
1831:       assertFalse(node0.equals((Object)node1));
1832:       assertFalse(node0.equals((Object)node2));
1833:       assertFalse(node0.equals((Object)node3));
1834:       assertFalse(node1.equals((Object)node3));
1835:       assertFalse(node1.equals((Object)node4));
1836:       assertFalse(node1.equals((Object)node2));
1837:       assertFalse(node1.equals((Object)node0));
1838:       assertFalse(node4.equals((Object)node3));
1839:       assertFalse(node4.equals((Object)node1));
1840:       assertFalse(node4.equals((Object)node2));
1841:       assertFalse(node5.equals((Object)node1));
1842:       assertFalse(node5.equals((Object)node2));
1843:       assertFalse(node5.equals((Object)node0));
1844:       assertFalse(node5.equals((Object)node3));
1845:       assertFalse(node5.equals((Object)node4));
1846:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1847:       assertEquals(55, Node.INFERRED_FUNCTION);
1848:       assertEquals(43, Node.IS_CONSTANT_NAME);
1849:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1850:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1851:       assertEquals(4095, Node.COLUMN_MASK);
1852:       assertEquals(50, Node.FREE_CALL);
1853:       assertEquals(40, Node.ORIGINALNAME_PROP);
1854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1855:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1856:       assertEquals(46, Node.IS_NAMESPACE);
1857:       assertEquals(54, Node.SLASH_V);
1858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1859:       assertEquals(49, Node.DIRECT_EVAL);
1860:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1861:       assertEquals(57, Node.LAST_PROP);
1862:       assertEquals(32, Node.INCRDECR_PROP);
1863:       assertEquals(1, Node.DECR_FLAG);
1864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1865:       assertEquals(2, Node.POST_FLAG);
1866:       assertEquals(12, Node.COLUMN_BITS);
1867:       assertEquals(47, Node.IS_DISPATCHER);
1868:       assertEquals(30, Node.VAR_ARGS_NAME);
1869:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1870:       assertEquals(29, Node.JSDOC_INFO_PROP);
1871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1872:       assertEquals(56, Node.CHANGE_TIME);
1873:       assertEquals(39, Node.EMPTY_BLOCK);
1874:       assertEquals(37, Node.OPT_ARG_NAME);
1875:       assertEquals(48, Node.DIRECTIVES);
1876:       assertEquals(53, Node.INPUT_ID);
1877:       assertEquals(52, Node.LENGTH);
1878:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1879:       assertEquals(8, Node.FLAG_NO_THROWS);
1880:       assertEquals(57, Node.REFLECTED_OBJECT);
1881:       assertEquals(36, Node.QUOTED_PROP);
1882:       assertEquals(56, Node.CHANGE_TIME);
1883:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1884:       assertEquals(47, Node.IS_DISPATCHER);
1885:       assertEquals(29, Node.JSDOC_INFO_PROP);
1886:       assertEquals(37, Node.OPT_ARG_NAME);
1887:       assertEquals(32, Node.INCRDECR_PROP);
1888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1889:       assertEquals(46, Node.IS_NAMESPACE);
1890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1891:       assertEquals(43, Node.IS_CONSTANT_NAME);
1892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1893:       assertEquals(57, Node.LAST_PROP);
1894:       assertEquals(54, Node.SLASH_V);
1895:       assertEquals(53, Node.INPUT_ID);
1896:       assertEquals(40, Node.ORIGINALNAME_PROP);
1897:       assertEquals(2, Node.POST_FLAG);
1898:       assertEquals(30, Node.VAR_ARGS_NAME);
1899:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1900:       assertEquals(39, Node.EMPTY_BLOCK);
1901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1902:       assertEquals(48, Node.DIRECTIVES);
1903:       assertEquals(57, Node.REFLECTED_OBJECT);
1904:       assertEquals(55, Node.INFERRED_FUNCTION);
1905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1906:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1907:       assertEquals(52, Node.LENGTH);
1908:       assertEquals(8, Node.FLAG_NO_THROWS);
1909:       assertEquals(50, Node.FREE_CALL);
1910:       assertEquals(36, Node.QUOTED_PROP);
1911:       assertEquals(1, Node.DECR_FLAG);
1912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1913:       assertEquals(49, Node.DIRECT_EVAL);
1914:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1915:       assertEquals(4095, Node.COLUMN_MASK);
1916:       assertEquals(12, Node.COLUMN_BITS);
1917:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1918:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1919:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1920:       assertEquals(43, Node.IS_CONSTANT_NAME);
1921:       assertEquals(56, Node.CHANGE_TIME);
1922:       assertEquals(36, Node.QUOTED_PROP);
1923:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1924:       assertEquals(37, Node.OPT_ARG_NAME);
1925:       assertEquals(55, Node.INFERRED_FUNCTION);
1926:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1927:       assertEquals(8, Node.FLAG_NO_THROWS);
1928:       assertEquals(2, Node.POST_FLAG);
1929:       assertEquals(30, Node.VAR_ARGS_NAME);
1930:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1931:       assertEquals(57, Node.LAST_PROP);
1932:       assertEquals(47, Node.IS_DISPATCHER);
1933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1934:       assertEquals(39, Node.EMPTY_BLOCK);
1935:       assertEquals(29, Node.JSDOC_INFO_PROP);
1936:       assertEquals(53, Node.INPUT_ID);
1937:       assertEquals(57, Node.REFLECTED_OBJECT);
1938:       assertEquals(40, Node.ORIGINALNAME_PROP);
1939:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1940:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1941:       assertEquals(52, Node.LENGTH);
1942:       assertEquals(50, Node.FREE_CALL);
1943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1944:       assertEquals(54, Node.SLASH_V);
1945:       assertEquals(48, Node.DIRECTIVES);
1946:       assertEquals(49, Node.DIRECT_EVAL);
1947:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1948:       assertEquals(4095, Node.COLUMN_MASK);
1949:       assertEquals(12, Node.COLUMN_BITS);
1950:       assertEquals(46, Node.IS_NAMESPACE);
1951:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1952:       assertEquals(1, Node.DECR_FLAG);
1953:       assertEquals(32, Node.INCRDECR_PROP);
1954:       assertEquals(56, Node.CHANGE_TIME);
1955:       assertEquals(47, Node.IS_DISPATCHER);
1956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1957:       assertEquals(29, Node.JSDOC_INFO_PROP);
1958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1959:       assertEquals(2, Node.POST_FLAG);
1960:       assertEquals(12, Node.COLUMN_BITS);
1961:       assertEquals(1, Node.DECR_FLAG);
1962:       assertEquals(53, Node.INPUT_ID);
1963:       assertEquals(32, Node.INCRDECR_PROP);
1964:       assertEquals(43, Node.IS_CONSTANT_NAME);
1965:       assertEquals(57, Node.LAST_PROP);
1966:       assertEquals(54, Node.SLASH_V);
1967:       assertEquals(30, Node.VAR_ARGS_NAME);
1968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1969:       assertEquals(40, Node.ORIGINALNAME_PROP);
1970:       assertEquals(46, Node.IS_NAMESPACE);
1971:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1972:       assertEquals(39, Node.EMPTY_BLOCK);
1973:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1974:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1975:       assertEquals(8, Node.FLAG_NO_THROWS);
1976:       assertEquals(50, Node.FREE_CALL);
1977:       assertEquals(55, Node.INFERRED_FUNCTION);
1978:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1979:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1980:       assertEquals(36, Node.QUOTED_PROP);
1981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1982:       assertEquals(52, Node.LENGTH);
1983:       assertEquals(57, Node.REFLECTED_OBJECT);
1984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1985:       assertEquals(4095, Node.COLUMN_MASK);
1986:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1987:       assertEquals(37, Node.OPT_ARG_NAME);
1988:       assertEquals(48, Node.DIRECTIVES);
1989:       assertEquals(49, Node.DIRECT_EVAL);
1990:       assertNotSame(node0, node2);
1991:       assertSame(node0, node4);
1992:       assertNotSame(node0, node5);
1993:       assertNotSame(node0, node3);
1994:       assertNotSame(node4, node3);
1995:       assertNotSame(node4, node2);
1996:       assertNotSame(node4, node5);
1997:       assertSame(node4, node0);
1998:       assertNotSame(node5, node2);
1999:       assertNotSame(node5, node0);
2000:       assertNotSame(node5, node3);
2001:       assertNotSame(node5, node4);
2002:       assertFalse(node0.isWhile());
2003:       assertFalse(node0.isDo());
2004:       assertFalse(node0.isNew());
2005:       assertFalse(node0.isContinue());
2006:       assertFalse(node0.isAdd());
2007:       assertFalse(node0.hasMoreThanOneChild());
2008:       assertFalse(node0.isAssignAdd());
2009:       assertTrue(node0.isString());
2010:       assertFalse(node0.isLabel());
2011:       assertFalse(node0.isReturn());
2012:       assertFalse(node0.isVar());
2013:       assertFalse(node0.isBlock());
2014:       assertEquals(37, node0.getLineno());
2015:       assertFalse(node0.isNumber());
2016:       assertFalse(node0.isLabelName());
2017:       assertFalse(node0.isCast());
2018:       assertFalse(node0.isStringKey());
2019:       assertFalse(node0.isParamList());
2020:       assertFalse(node0.isWith());
2021:       assertFalse(node0.isFunction());
2022:       assertFalse(node0.isRegExp());
2023:       assertFalse(node0.isCatch());
2024:       assertFalse(node0.isScript());
2025:       assertFalse(node0.isInstanceOf());
2026:       assertFalse(node0.hasOneChild());
2027:       assertEquals(155647, node0.getSourcePosition());
2028:       assertFalse(node0.isTry());
2029:       assertFalse(node0.isThis());
2030:       assertFalse(node0.isFor());
2031:       assertEquals(40, node0.getType());
2032:       assertFalse(node0.isIf());
2033:       assertFalse(node0.isSetterDef());
2034:       assertFalse(node0.isIn());
2035:       
2036:       String string1 = node4.getString();
2037:       assertFalse(node0.equals((Object)node1));
2038:       assertFalse(node0.equals((Object)node2));
2039:       assertFalse(node0.equals((Object)node5));
2040:       assertFalse(node0.equals((Object)node3));
2041:       assertFalse(node1.equals((Object)node5));
2042:       assertFalse(node1.equals((Object)node3));
2043:       assertFalse(node1.equals((Object)node4));
2044:       assertFalse(node1.equals((Object)node2));
2045:       assertFalse(node1.equals((Object)node0));
2046:       assertFalse(node4.equals((Object)node3));
2047:       assertFalse(node4.equals((Object)node1));
2048:       assertFalse(node4.equals((Object)node2));
2049:       assertFalse(node4.equals((Object)node5));
2050:       assertFalse(string1.equals((Object)string0));
2051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2052:       assertEquals(55, Node.INFERRED_FUNCTION);
2053:       assertEquals(43, Node.IS_CONSTANT_NAME);
2054:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2056:       assertEquals(4095, Node.COLUMN_MASK);
2057:       assertEquals(50, Node.FREE_CALL);
2058:       assertEquals(40, Node.ORIGINALNAME_PROP);
2059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2060:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2061:       assertEquals(46, Node.IS_NAMESPACE);
2062:       assertEquals(54, Node.SLASH_V);
2063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2064:       assertEquals(49, Node.DIRECT_EVAL);
2065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2066:       assertEquals(57, Node.LAST_PROP);
2067:       assertEquals(32, Node.INCRDECR_PROP);
2068:       assertEquals(1, Node.DECR_FLAG);
2069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2070:       assertEquals(2, Node.POST_FLAG);
2071:       assertEquals(12, Node.COLUMN_BITS);
2072:       assertEquals(47, Node.IS_DISPATCHER);
2073:       assertEquals(30, Node.VAR_ARGS_NAME);
2074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2075:       assertEquals(29, Node.JSDOC_INFO_PROP);
2076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2077:       assertEquals(56, Node.CHANGE_TIME);
2078:       assertEquals(39, Node.EMPTY_BLOCK);
2079:       assertEquals(37, Node.OPT_ARG_NAME);
2080:       assertEquals(48, Node.DIRECTIVES);
2081:       assertEquals(53, Node.INPUT_ID);
2082:       assertEquals(52, Node.LENGTH);
2083:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2084:       assertEquals(8, Node.FLAG_NO_THROWS);
2085:       assertEquals(57, Node.REFLECTED_OBJECT);
2086:       assertEquals(36, Node.QUOTED_PROP);
2087:       assertEquals(56, Node.CHANGE_TIME);
2088:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2089:       assertEquals(47, Node.IS_DISPATCHER);
2090:       assertEquals(29, Node.JSDOC_INFO_PROP);
2091:       assertEquals(37, Node.OPT_ARG_NAME);
2092:       assertEquals(32, Node.INCRDECR_PROP);
2093:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2094:       assertEquals(46, Node.IS_NAMESPACE);
2095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2096:       assertEquals(43, Node.IS_CONSTANT_NAME);
2097:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2098:       assertEquals(57, Node.LAST_PROP);
2099:       assertEquals(54, Node.SLASH_V);
2100:       assertEquals(53, Node.INPUT_ID);
2101:       assertEquals(40, Node.ORIGINALNAME_PROP);
2102:       assertEquals(2, Node.POST_FLAG);
2103:       assertEquals(30, Node.VAR_ARGS_NAME);
2104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2105:       assertEquals(39, Node.EMPTY_BLOCK);
2106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2107:       assertEquals(48, Node.DIRECTIVES);
2108:       assertEquals(57, Node.REFLECTED_OBJECT);
2109:       assertEquals(55, Node.INFERRED_FUNCTION);
2110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2112:       assertEquals(52, Node.LENGTH);
2113:       assertEquals(8, Node.FLAG_NO_THROWS);
2114:       assertEquals(50, Node.FREE_CALL);
2115:       assertEquals(36, Node.QUOTED_PROP);
2116:       assertEquals(1, Node.DECR_FLAG);
2117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2118:       assertEquals(49, Node.DIRECT_EVAL);
2119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2120:       assertEquals(4095, Node.COLUMN_MASK);
2121:       assertEquals(12, Node.COLUMN_BITS);
2122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2125:       assertEquals(43, Node.IS_CONSTANT_NAME);
2126:       assertEquals(56, Node.CHANGE_TIME);
2127:       assertEquals(36, Node.QUOTED_PROP);
2128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2129:       assertEquals(37, Node.OPT_ARG_NAME);
2130:       assertEquals(55, Node.INFERRED_FUNCTION);
2131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2132:       assertEquals(8, Node.FLAG_NO_THROWS);
2133:       assertEquals(2, Node.POST_FLAG);
2134:       assertEquals(30, Node.VAR_ARGS_NAME);
2135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2136:       assertEquals(57, Node.LAST_PROP);
2137:       assertEquals(47, Node.IS_DISPATCHER);
2138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2139:       assertEquals(39, Node.EMPTY_BLOCK);
2140:       assertEquals(29, Node.JSDOC_INFO_PROP);
2141:       assertEquals(53, Node.INPUT_ID);
2142:       assertEquals(57, Node.REFLECTED_OBJECT);
2143:       assertEquals(40, Node.ORIGINALNAME_PROP);
2144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2146:       assertEquals(52, Node.LENGTH);
2147:       assertEquals(50, Node.FREE_CALL);
2148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2149:       assertEquals(54, Node.SLASH_V);
2150:       assertEquals(48, Node.DIRECTIVES);
2151:       assertEquals(49, Node.DIRECT_EVAL);
2152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2153:       assertEquals(4095, Node.COLUMN_MASK);
2154:       assertEquals(12, Node.COLUMN_BITS);
2155:       assertEquals(46, Node.IS_NAMESPACE);
2156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2157:       assertEquals(1, Node.DECR_FLAG);
2158:       assertEquals(32, Node.INCRDECR_PROP);
2159:       assertEquals("(|", string1);
2160:       assertNotSame(node0, node2);
2161:       assertSame(node0, node4);
2162:       assertNotSame(node0, node5);
2163:       assertNotSame(node0, node3);
2164:       assertNotSame(node4, node3);
2165:       assertNotSame(node4, node2);
2166:       assertNotSame(node4, node5);
2167:       assertSame(node4, node0);
2168:       
2169:       int int1 = Node.extractLineno(37);
2170:       assertTrue(int1 == int0);
2171:       assertEquals(0, int1);
2172:       
2173:       boolean boolean1 = node2.isLabel();
2174:       assertFalse(node2.equals((Object)node5));
2175:       assertFalse(node2.equals((Object)node4));
2176:       assertFalse(node2.equals((Object)node0));
2177:       assertFalse(node2.equals((Object)node1));
2178:       assertTrue(boolean1 == boolean0);
2179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2180:       assertEquals(43, Node.IS_CONSTANT_NAME);
2181:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2182:       assertEquals(53, Node.INPUT_ID);
2183:       assertEquals(55, Node.INFERRED_FUNCTION);
2184:       assertEquals(8, Node.FLAG_NO_THROWS);
2185:       assertEquals(36, Node.QUOTED_PROP);
2186:       assertEquals(47, Node.IS_DISPATCHER);
2187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2188:       assertEquals(29, Node.JSDOC_INFO_PROP);
2189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2190:       assertEquals(40, Node.ORIGINALNAME_PROP);
2191:       assertEquals(39, Node.EMPTY_BLOCK);
2192:       assertEquals(2, Node.POST_FLAG);
2193:       assertEquals(30, Node.VAR_ARGS_NAME);
2194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2195:       assertEquals(57, Node.LAST_PROP);
2196:       assertEquals(1, Node.DECR_FLAG);
2197:       assertEquals(49, Node.DIRECT_EVAL);
2198:       assertEquals(46, Node.IS_NAMESPACE);
2199:       assertEquals(57, Node.REFLECTED_OBJECT);
2200:       assertEquals(52, Node.LENGTH);
2201:       assertEquals(54, Node.SLASH_V);
2202:       assertEquals(50, Node.FREE_CALL);
2203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2206:       assertEquals(56, Node.CHANGE_TIME);
2207:       assertEquals(48, Node.DIRECTIVES);
2208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2209:       assertEquals(37, Node.OPT_ARG_NAME);
2210:       assertEquals(32, Node.INCRDECR_PROP);
2211:       assertEquals(12, Node.COLUMN_BITS);
2212:       assertEquals(4095, Node.COLUMN_MASK);
2213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2215:       assertFalse(boolean1);
2216:       assertNotSame(node2, node5);
2217:       assertSame(node2, node3);
2218:       assertNotSame(node2, node4);
2219:       assertNotSame(node2, node0);
2220:       
2221:       node4.getAncestors();
2222:       assertFalse(node0.equals((Object)node1));
2223:       assertFalse(node0.equals((Object)node2));
2224:       assertFalse(node0.equals((Object)node5));
2225:       assertFalse(node0.equals((Object)node3));
2226:       assertFalse(node1.equals((Object)node5));
2227:       assertFalse(node1.equals((Object)node3));
2228:       assertFalse(node1.equals((Object)node4));
2229:       assertFalse(node1.equals((Object)node2));
2230:       assertFalse(node1.equals((Object)node0));
2231:       assertFalse(node4.equals((Object)node3));
2232:       assertFalse(node4.equals((Object)node1));
2233:       assertFalse(node4.equals((Object)node2));
2234:       assertFalse(node4.equals((Object)node5));
2235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2236:       assertEquals(55, Node.INFERRED_FUNCTION);
2237:       assertEquals(43, Node.IS_CONSTANT_NAME);
2238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2240:       assertEquals(4095, Node.COLUMN_MASK);
2241:       assertEquals(50, Node.FREE_CALL);
2242:       assertEquals(40, Node.ORIGINALNAME_PROP);
2243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2245:       assertEquals(46, Node.IS_NAMESPACE);
2246:       assertEquals(54, Node.SLASH_V);
2247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2248:       assertEquals(49, Node.DIRECT_EVAL);
2249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2250:       assertEquals(57, Node.LAST_PROP);
2251:       assertEquals(32, Node.INCRDECR_PROP);
2252:       assertEquals(1, Node.DECR_FLAG);
2253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2254:       assertEquals(2, Node.POST_FLAG);
2255:       assertEquals(12, Node.COLUMN_BITS);
2256:       assertEquals(47, Node.IS_DISPATCHER);
2257:       assertEquals(30, Node.VAR_ARGS_NAME);
2258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2259:       assertEquals(29, Node.JSDOC_INFO_PROP);
2260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2261:       assertEquals(56, Node.CHANGE_TIME);
2262:       assertEquals(39, Node.EMPTY_BLOCK);
2263:       assertEquals(37, Node.OPT_ARG_NAME);
2264:       assertEquals(48, Node.DIRECTIVES);
2265:       assertEquals(53, Node.INPUT_ID);
2266:       assertEquals(52, Node.LENGTH);
2267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2268:       assertEquals(8, Node.FLAG_NO_THROWS);
2269:       assertEquals(57, Node.REFLECTED_OBJECT);
2270:       assertEquals(36, Node.QUOTED_PROP);
2271:       assertEquals(56, Node.CHANGE_TIME);
2272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2273:       assertEquals(47, Node.IS_DISPATCHER);
2274:       assertEquals(29, Node.JSDOC_INFO_PROP);
2275:       assertEquals(37, Node.OPT_ARG_NAME);
2276:       assertEquals(32, Node.INCRDECR_PROP);
2277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2278:       assertEquals(46, Node.IS_NAMESPACE);
2279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2280:       assertEquals(43, Node.IS_CONSTANT_NAME);
2281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2282:       assertEquals(57, Node.LAST_PROP);
2283:       assertEquals(54, Node.SLASH_V);
2284:       assertEquals(53, Node.INPUT_ID);
2285:       assertEquals(40, Node.ORIGINALNAME_PROP);
2286:       assertEquals(2, Node.POST_FLAG);
2287:       assertEquals(30, Node.VAR_ARGS_NAME);
2288:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2289:       assertEquals(39, Node.EMPTY_BLOCK);
2290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2291:       assertEquals(48, Node.DIRECTIVES);
2292:       assertEquals(57, Node.REFLECTED_OBJECT);
2293:       assertEquals(55, Node.INFERRED_FUNCTION);
2294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2296:       assertEquals(52, Node.LENGTH);
2297:       assertEquals(8, Node.FLAG_NO_THROWS);
2298:       assertEquals(50, Node.FREE_CALL);
2299:       assertEquals(36, Node.QUOTED_PROP);
2300:       assertEquals(1, Node.DECR_FLAG);
2301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2302:       assertEquals(49, Node.DIRECT_EVAL);
2303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2304:       assertEquals(4095, Node.COLUMN_MASK);
2305:       assertEquals(12, Node.COLUMN_BITS);
2306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2307:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2309:       assertEquals(43, Node.IS_CONSTANT_NAME);
2310:       assertEquals(56, Node.CHANGE_TIME);
2311:       assertEquals(36, Node.QUOTED_PROP);
2312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2313:       assertEquals(37, Node.OPT_ARG_NAME);
2314:       assertEquals(55, Node.INFERRED_FUNCTION);
2315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2316:       assertEquals(8, Node.FLAG_NO_THROWS);
2317:       assertEquals(2, Node.POST_FLAG);
2318:       assertEquals(30, Node.VAR_ARGS_NAME);
2319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2320:       assertEquals(57, Node.LAST_PROP);
2321:       assertEquals(47, Node.IS_DISPATCHER);
2322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2323:       assertEquals(39, Node.EMPTY_BLOCK);
2324:       assertEquals(29, Node.JSDOC_INFO_PROP);
2325:       assertEquals(53, Node.INPUT_ID);
2326:       assertEquals(57, Node.REFLECTED_OBJECT);
2327:       assertEquals(40, Node.ORIGINALNAME_PROP);
2328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2330:       assertEquals(52, Node.LENGTH);
2331:       assertEquals(50, Node.FREE_CALL);
2332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2333:       assertEquals(54, Node.SLASH_V);
2334:       assertEquals(48, Node.DIRECTIVES);
2335:       assertEquals(49, Node.DIRECT_EVAL);
2336:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2337:       assertEquals(4095, Node.COLUMN_MASK);
2338:       assertEquals(12, Node.COLUMN_BITS);
2339:       assertEquals(46, Node.IS_NAMESPACE);
2340:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2341:       assertEquals(1, Node.DECR_FLAG);
2342:       assertEquals(32, Node.INCRDECR_PROP);
2343:       assertNotSame(node0, node2);
2344:       assertSame(node0, node4);
2345:       assertNotSame(node0, node5);
2346:       assertNotSame(node0, node3);
2347:       assertNotSame(node4, node3);
2348:       assertNotSame(node4, node2);
2349:       assertNotSame(node4, node5);
2350:       assertSame(node4, node0);
2351:       
2352:       Node node6 = node1.srcref(node2);
2353:       assertFalse(node0.equals((Object)node1));
2354:       assertFalse(node0.equals((Object)node2));
2355:       assertFalse(node0.equals((Object)node5));
2356:       assertFalse(node0.equals((Object)node3));
2357:       assertFalse(node1.equals((Object)node5));
2358:       assertFalse(node1.equals((Object)node3));
2359:       assertFalse(node1.equals((Object)node4));
2360:       assertFalse(node1.equals((Object)node2));
2361:       assertFalse(node1.equals((Object)node0));
2362:       assertFalse(node2.equals((Object)node5));
2363:       assertFalse(node2.equals((Object)node4));
2364:       assertFalse(node2.equals((Object)node0));
2365:       assertFalse(node2.equals((Object)node1));
2366:       assertFalse(node6.equals((Object)node3));
2367:       assertFalse(node6.equals((Object)node4));
2368:       assertFalse(node6.equals((Object)node0));
2369:       assertFalse(node6.equals((Object)node5));
2370:       assertFalse(node6.equals((Object)node2));
2371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2372:       assertEquals(55, Node.INFERRED_FUNCTION);
2373:       assertEquals(43, Node.IS_CONSTANT_NAME);
2374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2375:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2376:       assertEquals(4095, Node.COLUMN_MASK);
2377:       assertEquals(50, Node.FREE_CALL);
2378:       assertEquals(40, Node.ORIGINALNAME_PROP);
2379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(46, Node.IS_NAMESPACE);
2382:       assertEquals(54, Node.SLASH_V);
2383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2384:       assertEquals(49, Node.DIRECT_EVAL);
2385:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2386:       assertEquals(57, Node.LAST_PROP);
2387:       assertEquals(32, Node.INCRDECR_PROP);
2388:       assertEquals(1, Node.DECR_FLAG);
2389:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2390:       assertEquals(2, Node.POST_FLAG);
2391:       assertEquals(12, Node.COLUMN_BITS);
2392:       assertEquals(47, Node.IS_DISPATCHER);
2393:       assertEquals(30, Node.VAR_ARGS_NAME);
2394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2395:       assertEquals(29, Node.JSDOC_INFO_PROP);
2396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2397:       assertEquals(56, Node.CHANGE_TIME);
2398:       assertEquals(39, Node.EMPTY_BLOCK);
2399:       assertEquals(37, Node.OPT_ARG_NAME);
2400:       assertEquals(48, Node.DIRECTIVES);
2401:       assertEquals(53, Node.INPUT_ID);
2402:       assertEquals(52, Node.LENGTH);
2403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2404:       assertEquals(8, Node.FLAG_NO_THROWS);
2405:       assertEquals(57, Node.REFLECTED_OBJECT);
2406:       assertEquals(36, Node.QUOTED_PROP);
2407:       assertEquals(56, Node.CHANGE_TIME);
2408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2409:       assertEquals(47, Node.IS_DISPATCHER);
2410:       assertEquals(29, Node.JSDOC_INFO_PROP);
2411:       assertEquals(37, Node.OPT_ARG_NAME);
2412:       assertEquals(32, Node.INCRDECR_PROP);
2413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2414:       assertEquals(46, Node.IS_NAMESPACE);
2415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2416:       assertEquals(43, Node.IS_CONSTANT_NAME);
2417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2418:       assertEquals(57, Node.LAST_PROP);
2419:       assertEquals(54, Node.SLASH_V);
2420:       assertEquals(53, Node.INPUT_ID);
2421:       assertEquals(40, Node.ORIGINALNAME_PROP);
2422:       assertEquals(2, Node.POST_FLAG);
2423:       assertEquals(30, Node.VAR_ARGS_NAME);
2424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2425:       assertEquals(39, Node.EMPTY_BLOCK);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(48, Node.DIRECTIVES);
2428:       assertEquals(57, Node.REFLECTED_OBJECT);
2429:       assertEquals(55, Node.INFERRED_FUNCTION);
2430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2432:       assertEquals(52, Node.LENGTH);
2433:       assertEquals(8, Node.FLAG_NO_THROWS);
2434:       assertEquals(50, Node.FREE_CALL);
2435:       assertEquals(36, Node.QUOTED_PROP);
2436:       assertEquals(1, Node.DECR_FLAG);
2437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2438:       assertEquals(49, Node.DIRECT_EVAL);
2439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2440:       assertEquals(4095, Node.COLUMN_MASK);
2441:       assertEquals(12, Node.COLUMN_BITS);
2442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2444:       assertEquals(43, Node.IS_CONSTANT_NAME);
2445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2446:       assertEquals(53, Node.INPUT_ID);
2447:       assertEquals(55, Node.INFERRED_FUNCTION);
2448:       assertEquals(8, Node.FLAG_NO_THROWS);
2449:       assertEquals(36, Node.QUOTED_PROP);
2450:       assertEquals(47, Node.IS_DISPATCHER);
2451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2452:       assertEquals(29, Node.JSDOC_INFO_PROP);
2453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2454:       assertEquals(40, Node.ORIGINALNAME_PROP);
2455:       assertEquals(39, Node.EMPTY_BLOCK);
2456:       assertEquals(2, Node.POST_FLAG);
2457:       assertEquals(30, Node.VAR_ARGS_NAME);
2458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2459:       assertEquals(57, Node.LAST_PROP);
2460:       assertEquals(1, Node.DECR_FLAG);
2461:       assertEquals(49, Node.DIRECT_EVAL);
2462:       assertEquals(46, Node.IS_NAMESPACE);
2463:       assertEquals(57, Node.REFLECTED_OBJECT);
2464:       assertEquals(52, Node.LENGTH);
2465:       assertEquals(54, Node.SLASH_V);
2466:       assertEquals(50, Node.FREE_CALL);
2467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2468:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2469:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2470:       assertEquals(56, Node.CHANGE_TIME);
2471:       assertEquals(48, Node.DIRECTIVES);
2472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2473:       assertEquals(37, Node.OPT_ARG_NAME);
2474:       assertEquals(32, Node.INCRDECR_PROP);
2475:       assertEquals(12, Node.COLUMN_BITS);
2476:       assertEquals(4095, Node.COLUMN_MASK);
2477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2478:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2479:       assertEquals(57, Node.REFLECTED_OBJECT);
2480:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2481:       assertEquals(52, Node.LENGTH);
2482:       assertEquals(40, Node.ORIGINALNAME_PROP);
2483:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2484:       assertEquals(8, Node.FLAG_NO_THROWS);
2485:       assertEquals(48, Node.DIRECTIVES);
2486:       assertEquals(49, Node.DIRECT_EVAL);
2487:       assertEquals(50, Node.FREE_CALL);
2488:       assertEquals(54, Node.SLASH_V);
2489:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2490:       assertEquals(4095, Node.COLUMN_MASK);
2491:       assertEquals(32, Node.INCRDECR_PROP);
2492:       assertEquals(1, Node.DECR_FLAG);
2493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2494:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2495:       assertEquals(12, Node.COLUMN_BITS);
2496:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2497:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2498:       assertEquals(53, Node.INPUT_ID);
2499:       assertEquals(29, Node.JSDOC_INFO_PROP);
2500:       assertEquals(43, Node.IS_CONSTANT_NAME);
2501:       assertEquals(56, Node.CHANGE_TIME);
2502:       assertEquals(36, Node.QUOTED_PROP);
2503:       assertEquals(37, Node.OPT_ARG_NAME);
2504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2505:       assertEquals(46, Node.IS_NAMESPACE);
2506:       assertEquals(39, Node.EMPTY_BLOCK);
2507:       assertEquals(55, Node.INFERRED_FUNCTION);
2508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2510:       assertEquals(57, Node.LAST_PROP);
2511:       assertEquals(47, Node.IS_DISPATCHER);
2512:       assertEquals(2, Node.POST_FLAG);
2513:       assertEquals(30, Node.VAR_ARGS_NAME);
2514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2515:       assertNotSame(node0, node2);
2516:       assertSame(node0, node4);
2517:       assertNotSame(node0, node5);
2518:       assertNotSame(node0, node3);
2519:       assertSame(node1, node6);
2520:       assertNotSame(node2, node5);
2521:       assertSame(node2, node3);
2522:       assertNotSame(node2, node4);
2523:       assertNotSame(node2, node0);
2524:       assertSame(node6, node1);
2525:       
2526:       Node node7 = null;
2527:       // Undeclared exception!
2528:       try { 
2529:         node2.addChildToFront((Node) null);
2530:         fail("Expecting exception: NullPointerException");
2531:       
2532:       } catch(NullPointerException e) {
2533:          //
2534:          // no message in exception (getMessage() returned null)
2535:          //
2536:          verifyException("com.google.javascript.rhino.Node", e);
2537:       }
2538:   }
2539: }
RegularFileObject[/tmp/EvoSuite_119_1629223373331/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_119_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:54.018 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("(|", 254, 0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertEquals(254, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());

Iterable<Node> iterable0 = node0.children();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertEquals(254, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertEquals(254, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotSame(node2, node0);
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());

Node node3 = node2.useSourceInfoFromForTree(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertNotSame(node3, node0);
assertSame(node3, node2);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertEquals(254, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(37, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isBlock());
assertTrue(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertEquals(37, node3.getLineno());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertEquals(4095, node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isNE());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isHook());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertEquals(155647, node3.getSourcePosition());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isNumber());
assertFalse(node3.isLabel());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals("STRING ^T bi6mc\"24m1h|@{G 37\n", string0);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(37, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, int0);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertEquals(254, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean0);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertEquals(254, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertEquals(1040384, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());

Node node4 = node0.useSourceInfoFrom(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node3);
assertNotSame(node4, node3);
assertNotSame(node4, node2);
assertSame(node4, node0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isParamList());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(4095, node1.getCharno());
assertEquals(155647, node1.getSourcePosition());
assertEquals((-2145), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isComma());
assertFalse(node4.isSwitch());
assertFalse(node4.isBreak());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isRegExp());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTry());
assertEquals(4095, node4.getCharno());
assertTrue(node4.isString());
assertFalse(node4.isNumber());
assertEquals(155647, node4.getSourcePosition());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.isCall());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertFalse(node4.isBlock());
assertFalse(node4.isParamList());
assertEquals(37, node4.getLineno());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertEquals(40, node4.getType());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAdd());
assertFalse(node4.isSetterDef());
assertFalse(node4.isCast());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isTypeOf());
assertFalse(node4.isFunction());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isDebugger());

Node node5 = node4.cloneTree();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node3);
assertNotSame(node4, node3);
assertNotSame(node4, node2);
assertNotSame(node4, node5);
assertSame(node4, node0);
assertNotSame(node5, node2);
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

String string1 = node4.getString();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertFalse(string1.equals((Object)string0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals("(|", string1);
assertNotSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node3);
assertNotSame(node4, node3);
assertNotSame(node4, node2);
assertNotSame(node4, node5);
assertSame(node4, node0);

int int1 = Node.extractLineno(37);
assertTrue(int1 == int0);
assertEquals(0, int1);

boolean boolean1 = node2.isLabel();
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean1);
assertNotSame(node2, node5);
assertSame(node2, node3);
assertNotSame(node2, node4);
assertNotSame(node2, node0);

node4.getAncestors();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node3);
assertNotSame(node4, node3);
assertNotSame(node4, node2);
assertNotSame(node4, node5);
assertSame(node4, node0);

Node node6 = node1.srcref(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node0, node2);
assertSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node3);
assertSame(node1, node6);
assertNotSame(node2, node5);
assertSame(node2, node3);
assertNotSame(node2, node4);
assertNotSame(node2, node0);
assertSame(node6, node1);

Node node7 = null;
node2.addChildToFront((Node) null);

[MASTER] 18:02:57.587 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1629223377139/com/google/javascript/rhino/Node_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1629223377139/com/google/javascript/rhino/Node_130_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:57.587 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:57.587 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:57.587 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 18:02:57.589 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1629223377139/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:57 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.SimpleSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_130_tmp__ESTest extends Node_130_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(254, "(|");
23:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
26:       assertEquals(47, Node.IS_DISPATCHER);
27:       assertEquals(2, Node.POST_FLAG);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(50, Node.FREE_CALL);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(49, Node.DIRECT_EVAL);
51:       assertEquals(56, Node.CHANGE_TIME);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(36, Node.QUOTED_PROP);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(52, Node.LENGTH);
58:       assertEquals(8, Node.FLAG_NO_THROWS);
59:       assertFalse(node0.isCall());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isName());
63:       assertEquals(254, node0.getType());
64:       assertFalse(node0.isAdd());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isWhile());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isBlock());
70:       assertFalse(node0.isContinue());
71:       assertFalse(node0.isParamList());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isNumber());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isFunction());
79:       assertFalse(node0.isRegExp());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isIn());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isInc());
88:       assertFalse(node0.isNE());
89:       assertFalse(node0.isIf());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.isBreak());
93:       assertFalse(node0.isThis());
94:       assertFalse(node0.isComma());
95:       assertFalse(node0.isHook());
96:       assertFalse(node0.isAnd());
97:       assertFalse(node0.isObjectLit());
98:       assertFalse(node0.isString());
99:       assertFalse(node0.isScript());
100:       assertFalse(node0.isCase());
101:       assertFalse(node0.isGetProp());
102:       assertFalse(node0.isSwitch());
103:       assertFalse(node0.isGetterDef());
104:       assertFalse(node0.isNot());
105:       assertEquals((-1), node0.getCharno());
106:       assertFalse(node0.isDelProp());
107:       assertFalse(node0.isLabelName());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isGetElem());
110:       assertFalse(node0.isArrayLit());
111:       assertFalse(node0.isExprResult());
112:       assertFalse(node0.isTypeOf());
113:       assertFalse(node0.isAssignAdd());
114:       assertFalse(node0.isDefaultCase());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isDec());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.hasChildren());
120:       assertFalse(node0.isDo());
121:       assertFalse(node0.isTrue());
122:       assertFalse(node0.isVoid());
123:       assertFalse(node0.isOr());
124:       assertFalse(node0.isNull());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(2, Node.POST_FLAG);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(12, Node.COLUMN_BITS);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
141:       assertEquals(50, Node.FREE_CALL);
142:       assertEquals(40, Node.ORIGINALNAME_PROP);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(57, Node.LAST_PROP);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(48, Node.DIRECTIVES);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(49, Node.DIRECT_EVAL);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(36, Node.QUOTED_PROP);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(29, Node.JSDOC_INFO_PROP);
160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
161:       assertEquals(52, Node.LENGTH);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isCall());
165:       assertFalse(node0.isVar());
166:       assertFalse(node0.isStringKey());
167:       assertFalse(node0.isName());
168:       assertEquals(254, node0.getType());
169:       assertFalse(node0.isAdd());
170:       assertFalse(node0.isNew());
171:       assertFalse(node0.isSetterDef());
172:       assertFalse(node0.isWhile());
173:       assertEquals(0, node0.getChildCount());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isContinue());
176:       assertFalse(node0.isParamList());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isNumber());
179:       assertEquals((-1), node0.getSourcePosition());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isFunction());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isIn());
190:       assertEquals((-1), node0.getLineno());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isNE());
194:       assertFalse(node0.isIf());
195:       assertFalse(node0.isThrow());
196:       assertFalse(node0.isFalse());
197:       assertFalse(node0.isBreak());
198:       assertFalse(node0.isThis());
199:       assertFalse(node0.isComma());
200:       assertFalse(node0.isHook());
201:       assertFalse(node0.isAnd());
202:       assertFalse(node0.isObjectLit());
203:       assertFalse(node0.isString());
204:       assertFalse(node0.isScript());
205:       assertFalse(node0.isCase());
206:       assertFalse(node0.isGetProp());
207:       assertFalse(node0.isSwitch());
208:       assertFalse(node0.isGetterDef());
209:       assertFalse(node0.isNot());
210:       assertEquals((-1), node0.getCharno());
211:       assertFalse(node0.isDelProp());
212:       assertFalse(node0.isLabelName());
213:       assertFalse(node0.isEmpty());
214:       assertFalse(node0.isGetElem());
215:       assertFalse(node0.isArrayLit());
216:       assertFalse(node0.isExprResult());
217:       assertFalse(node0.isTypeOf());
218:       assertFalse(node0.isAssignAdd());
219:       assertFalse(node0.isDefaultCase());
220:       assertFalse(node0.isReturn());
221:       assertFalse(node0.isAssign());
222:       assertFalse(node0.isDec());
223:       assertFalse(node0.isLabel());
224:       assertFalse(node0.hasChildren());
225:       assertFalse(node0.isDo());
226:       assertFalse(node0.isTrue());
227:       assertFalse(node0.isVoid());
228:       assertFalse(node0.isOr());
229:       assertFalse(node0.isNull());
230:       
231:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
232:       assertFalse(node1.equals((Object)node0));
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(47, Node.IS_DISPATCHER);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(12, Node.COLUMN_BITS);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(1, Node.DECR_FLAG);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(43, Node.IS_CONSTANT_NAME);
244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
247:       assertEquals(50, Node.FREE_CALL);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
254:       assertEquals(30, Node.VAR_ARGS_NAME);
255:       assertEquals(4095, Node.COLUMN_MASK);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(49, Node.DIRECT_EVAL);
261:       assertEquals(56, Node.CHANGE_TIME);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(36, Node.QUOTED_PROP);
264:       assertEquals(39, Node.EMPTY_BLOCK);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(46, Node.IS_NAMESPACE);
271:       assertEquals(12, Node.COLUMN_BITS);
272:       assertEquals(30, Node.VAR_ARGS_NAME);
273:       assertEquals(2, Node.POST_FLAG);
274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
276:       assertEquals(47, Node.IS_DISPATCHER);
277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
278:       assertEquals(57, Node.LAST_PROP);
279:       assertEquals(1, Node.DECR_FLAG);
280:       assertEquals(32, Node.INCRDECR_PROP);
281:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
282:       assertEquals(57, Node.REFLECTED_OBJECT);
283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
284:       assertEquals(29, Node.JSDOC_INFO_PROP);
285:       assertEquals(52, Node.LENGTH);
286:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
287:       assertEquals(37, Node.OPT_ARG_NAME);
288:       assertEquals(56, Node.CHANGE_TIME);
289:       assertEquals(36, Node.QUOTED_PROP);
290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
291:       assertEquals(49, Node.DIRECT_EVAL);
292:       assertEquals(48, Node.DIRECTIVES);
293:       assertEquals(55, Node.INFERRED_FUNCTION);
294:       assertEquals(4095, Node.COLUMN_MASK);
295:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
296:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
297:       assertEquals(8, Node.FLAG_NO_THROWS);
298:       assertEquals(39, Node.EMPTY_BLOCK);
299:       assertEquals(53, Node.INPUT_ID);
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(43, Node.IS_CONSTANT_NAME);
304:       assertEquals(54, Node.SLASH_V);
305:       assertFalse(node0.isCall());
306:       assertFalse(node0.isVar());
307:       assertFalse(node0.isStringKey());
308:       assertFalse(node0.isName());
309:       assertEquals(254, node0.getType());
310:       assertFalse(node0.isAdd());
311:       assertFalse(node0.isNew());
312:       assertFalse(node0.isSetterDef());
313:       assertFalse(node0.isWhile());
314:       assertEquals(0, node0.getChildCount());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.isContinue());
317:       assertFalse(node0.isParamList());
318:       assertFalse(node0.isDebugger());
319:       assertFalse(node0.isNumber());
320:       assertEquals((-1), node0.getSourcePosition());
321:       assertFalse(node0.isCast());
322:       assertFalse(node0.isTry());
323:       assertFalse(node0.hasOneChild());
324:       assertFalse(node0.isFunction());
325:       assertFalse(node0.isRegExp());
326:       assertFalse(node0.isFor());
327:       assertFalse(node0.isCatch());
328:       assertFalse(node0.isWith());
329:       assertFalse(node0.hasMoreThanOneChild());
330:       assertFalse(node0.isIn());
331:       assertEquals((-1), node0.getLineno());
332:       assertFalse(node0.isInstanceOf());
333:       assertFalse(node0.isInc());
334:       assertFalse(node0.isNE());
335:       assertFalse(node0.isIf());
336:       assertFalse(node0.isThrow());
337:       assertFalse(node0.isFalse());
338:       assertFalse(node0.isBreak());
339:       assertFalse(node0.isThis());
340:       assertFalse(node0.isComma());
341:       assertFalse(node0.isHook());
342:       assertFalse(node0.isAnd());
343:       assertFalse(node0.isObjectLit());
344:       assertFalse(node0.isString());
345:       assertFalse(node0.isScript());
346:       assertFalse(node0.isCase());
347:       assertFalse(node0.isGetProp());
348:       assertFalse(node0.isSwitch());
349:       assertFalse(node0.isGetterDef());
350:       assertFalse(node0.isNot());
351:       assertEquals((-1), node0.getCharno());
352:       assertFalse(node0.isDelProp());
353:       assertFalse(node0.isLabelName());
354:       assertFalse(node0.isEmpty());
355:       assertFalse(node0.isGetElem());
356:       assertFalse(node0.isArrayLit());
357:       assertFalse(node0.isExprResult());
358:       assertFalse(node0.isTypeOf());
359:       assertFalse(node0.isAssignAdd());
360:       assertFalse(node0.isDefaultCase());
361:       assertFalse(node0.isReturn());
362:       assertFalse(node0.isAssign());
363:       assertFalse(node0.isDec());
364:       assertFalse(node0.isLabel());
365:       assertFalse(node0.hasChildren());
366:       assertFalse(node0.isDo());
367:       assertFalse(node0.isTrue());
368:       assertFalse(node0.isVoid());
369:       assertFalse(node0.isOr());
370:       assertFalse(node0.isNull());
371:       assertFalse(node1.isNot());
372:       assertFalse(node1.isObjectLit());
373:       assertFalse(node1.isWith());
374:       assertFalse(node1.isAnd());
375:       assertFalse(node1.isScript());
376:       assertFalse(node1.isGetProp());
377:       assertFalse(node1.isGetElem());
378:       assertFalse(node1.isAssign());
379:       assertFalse(node1.isDec());
380:       assertFalse(node1.isTypeOf());
381:       assertFalse(node1.isHook());
382:       assertFalse(node1.isThis());
383:       assertFalse(node1.isComma());
384:       assertFalse(node1.isInstanceOf());
385:       assertFalse(node1.isExprResult());
386:       assertFalse(node1.isBreak());
387:       assertFalse(node1.isCase());
388:       assertFalse(node1.isDo());
389:       assertFalse(node1.hasMoreThanOneChild());
390:       assertEquals(4095, node1.getCharno());
391:       assertEquals(1, node1.getChildCount());
392:       assertFalse(node1.isLabel());
393:       assertFalse(node1.isAdd());
394:       assertFalse(node1.isNew());
395:       assertFalse(node1.isBlock());
396:       assertFalse(node1.isOr());
397:       assertFalse(node1.isAssignAdd());
398:       assertFalse(node1.isStringKey());
399:       assertFalse(node1.isLabelName());
400:       assertFalse(node1.isNumber());
401:       assertFalse(node1.isVar());
402:       assertFalse(node1.isGetterDef());
403:       assertFalse(node1.isParamList());
404:       assertFalse(node1.isSwitch());
405:       assertFalse(node1.isArrayLit());
406:       assertFalse(node1.isDefaultCase());
407:       assertFalse(node1.isRegExp());
408:       assertFalse(node1.isTrue());
409:       assertFalse(node1.isDebugger());
410:       assertFalse(node1.isTry());
411:       assertEquals(155647, node1.getSourcePosition());
412:       assertFalse(node1.isSetterDef());
413:       assertFalse(node1.isName());
414:       assertFalse(node1.isFor());
415:       assertFalse(node1.isEmpty());
416:       assertFalse(node1.isDelProp());
417:       assertFalse(node1.isIf());
418:       assertFalse(node1.isNull());
419:       assertFalse(node1.isNE());
420:       assertTrue(node1.hasOneChild());
421:       assertFalse(node1.isVoid());
422:       assertTrue(node1.hasChildren());
423:       assertFalse(node1.isCatch());
424:       assertEquals((-2145), node1.getType());
425:       assertFalse(node1.isCall());
426:       assertFalse(node1.isString());
427:       assertFalse(node1.isWhile());
428:       assertFalse(node1.isContinue());
429:       assertFalse(node1.isReturn());
430:       assertFalse(node1.isIn());
431:       assertFalse(node1.isInc());
432:       assertFalse(node1.isFalse());
433:       assertFalse(node1.isThrow());
434:       assertEquals(37, node1.getLineno());
435:       assertFalse(node1.isFunction());
436:       assertFalse(node1.isCast());
437:       
438:       Node node2 = node0.copyInformationFrom(node1);
439:       assertFalse(node0.equals((Object)node1));
440:       assertFalse(node1.equals((Object)node0));
441:       assertFalse(node2.equals((Object)node1));
442:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
443:       assertEquals(53, Node.INPUT_ID);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(2, Node.POST_FLAG);
447:       assertEquals(51, Node.STATIC_SOURCE_FILE);
448:       assertEquals(12, Node.COLUMN_BITS);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(32, Node.INCRDECR_PROP);
452:       assertEquals(43, Node.IS_CONSTANT_NAME);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
456:       assertEquals(50, Node.FREE_CALL);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(57, Node.LAST_PROP);
461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
462:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(4095, Node.COLUMN_MASK);
465:       assertEquals(55, Node.INFERRED_FUNCTION);
466:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
467:       assertEquals(48, Node.DIRECTIVES);
468:       assertEquals(37, Node.OPT_ARG_NAME);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(56, Node.CHANGE_TIME);
471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
472:       assertEquals(36, Node.QUOTED_PROP);
473:       assertEquals(39, Node.EMPTY_BLOCK);
474:       assertEquals(29, Node.JSDOC_INFO_PROP);
475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
476:       assertEquals(52, Node.LENGTH);
477:       assertEquals(8, Node.FLAG_NO_THROWS);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(46, Node.IS_NAMESPACE);
480:       assertEquals(12, Node.COLUMN_BITS);
481:       assertEquals(30, Node.VAR_ARGS_NAME);
482:       assertEquals(2, Node.POST_FLAG);
483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
487:       assertEquals(57, Node.LAST_PROP);
488:       assertEquals(1, Node.DECR_FLAG);
489:       assertEquals(32, Node.INCRDECR_PROP);
490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
491:       assertEquals(57, Node.REFLECTED_OBJECT);
492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
493:       assertEquals(29, Node.JSDOC_INFO_PROP);
494:       assertEquals(52, Node.LENGTH);
495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(56, Node.CHANGE_TIME);
498:       assertEquals(36, Node.QUOTED_PROP);
499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
500:       assertEquals(49, Node.DIRECT_EVAL);
501:       assertEquals(48, Node.DIRECTIVES);
502:       assertEquals(55, Node.INFERRED_FUNCTION);
503:       assertEquals(4095, Node.COLUMN_MASK);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
506:       assertEquals(8, Node.FLAG_NO_THROWS);
507:       assertEquals(39, Node.EMPTY_BLOCK);
508:       assertEquals(53, Node.INPUT_ID);
509:       assertEquals(40, Node.ORIGINALNAME_PROP);
510:       assertEquals(50, Node.FREE_CALL);
511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
512:       assertEquals(43, Node.IS_CONSTANT_NAME);
513:       assertEquals(54, Node.SLASH_V);
514:       assertEquals(12, Node.COLUMN_BITS);
515:       assertEquals(30, Node.VAR_ARGS_NAME);
516:       assertEquals(46, Node.IS_NAMESPACE);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(57, Node.LAST_PROP);
519:       assertEquals(29, Node.JSDOC_INFO_PROP);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(40, Node.ORIGINALNAME_PROP);
525:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(47, Node.IS_DISPATCHER);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(43, Node.IS_CONSTANT_NAME);
531:       assertEquals(55, Node.INFERRED_FUNCTION);
532:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
533:       assertEquals(4095, Node.COLUMN_MASK);
534:       assertEquals(36, Node.QUOTED_PROP);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(53, Node.INPUT_ID);
539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
540:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
541:       assertEquals(52, Node.LENGTH);
542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(49, Node.DIRECT_EVAL);
549:       assertEquals(37, Node.OPT_ARG_NAME);
550:       assertSame(node0, node2);
551:       assertSame(node2, node0);
552:       assertFalse(node0.isCall());
553:       assertFalse(node0.isVar());
554:       assertFalse(node0.isStringKey());
555:       assertFalse(node0.isName());
556:       assertEquals(254, node0.getType());
557:       assertFalse(node0.isAdd());
558:       assertFalse(node0.isNew());
559:       assertFalse(node0.isSetterDef());
560:       assertEquals(37, node0.getLineno());
561:       assertFalse(node0.isWhile());
562:       assertEquals(0, node0.getChildCount());
563:       assertFalse(node0.isBlock());
564:       assertFalse(node0.isContinue());
565:       assertFalse(node0.isParamList());
566:       assertFalse(node0.isDebugger());
567:       assertFalse(node0.isNumber());
568:       assertFalse(node0.isCast());
569:       assertEquals(155647, node0.getSourcePosition());
570:       assertFalse(node0.isTry());
571:       assertFalse(node0.hasOneChild());
572:       assertFalse(node0.isFunction());
573:       assertFalse(node0.isRegExp());
574:       assertFalse(node0.isFor());
575:       assertFalse(node0.isCatch());
576:       assertFalse(node0.isWith());
577:       assertFalse(node0.hasMoreThanOneChild());
578:       assertFalse(node0.isIn());
579:       assertFalse(node0.isInstanceOf());
580:       assertFalse(node0.isInc());
581:       assertFalse(node0.isNE());
582:       assertFalse(node0.isIf());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isFalse());
585:       assertFalse(node0.isBreak());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isHook());
589:       assertFalse(node0.isAnd());
590:       assertFalse(node0.isObjectLit());
591:       assertFalse(node0.isString());
592:       assertFalse(node0.isScript());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.isGetProp());
595:       assertEquals(4095, node0.getCharno());
596:       assertFalse(node0.isSwitch());
597:       assertFalse(node0.isGetterDef());
598:       assertFalse(node0.isNot());
599:       assertFalse(node0.isDelProp());
600:       assertFalse(node0.isLabelName());
601:       assertFalse(node0.isEmpty());
602:       assertFalse(node0.isGetElem());
603:       assertFalse(node0.isArrayLit());
604:       assertFalse(node0.isExprResult());
605:       assertFalse(node0.isTypeOf());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.isDefaultCase());
608:       assertFalse(node0.isReturn());
609:       assertFalse(node0.isAssign());
610:       assertFalse(node0.isDec());
611:       assertFalse(node0.isLabel());
612:       assertFalse(node0.hasChildren());
613:       assertFalse(node0.isDo());
614:       assertFalse(node0.isTrue());
615:       assertFalse(node0.isVoid());
616:       assertFalse(node0.isOr());
617:       assertFalse(node0.isNull());
618:       assertFalse(node1.isNot());
619:       assertFalse(node1.isObjectLit());
620:       assertFalse(node1.isWith());
621:       assertFalse(node1.isAnd());
622:       assertFalse(node1.isScript());
623:       assertFalse(node1.isGetProp());
624:       assertFalse(node1.isGetElem());
625:       assertFalse(node1.isAssign());
626:       assertFalse(node1.isDec());
627:       assertFalse(node1.isTypeOf());
628:       assertFalse(node1.isHook());
629:       assertFalse(node1.isThis());
630:       assertFalse(node1.isComma());
631:       assertFalse(node1.isInstanceOf());
632:       assertFalse(node1.isExprResult());
633:       assertFalse(node1.isBreak());
634:       assertFalse(node1.isCase());
635:       assertFalse(node1.isDo());
636:       assertFalse(node1.hasMoreThanOneChild());
637:       assertEquals(4095, node1.getCharno());
638:       assertEquals(1, node1.getChildCount());
639:       assertFalse(node1.isLabel());
640:       assertFalse(node1.isAdd());
641:       assertFalse(node1.isNew());
642:       assertFalse(node1.isBlock());
643:       assertFalse(node1.isOr());
644:       assertFalse(node1.isAssignAdd());
645:       assertFalse(node1.isStringKey());
646:       assertFalse(node1.isLabelName());
647:       assertFalse(node1.isNumber());
648:       assertFalse(node1.isVar());
649:       assertFalse(node1.isGetterDef());
650:       assertFalse(node1.isParamList());
651:       assertFalse(node1.isSwitch());
652:       assertFalse(node1.isArrayLit());
653:       assertFalse(node1.isDefaultCase());
654:       assertFalse(node1.isRegExp());
655:       assertFalse(node1.isTrue());
656:       assertFalse(node1.isDebugger());
657:       assertFalse(node1.isTry());
658:       assertEquals(155647, node1.getSourcePosition());
659:       assertFalse(node1.isSetterDef());
660:       assertFalse(node1.isName());
661:       assertFalse(node1.isFor());
662:       assertFalse(node1.isEmpty());
663:       assertFalse(node1.isDelProp());
664:       assertFalse(node1.isIf());
665:       assertFalse(node1.isNull());
666:       assertFalse(node1.isNE());
667:       assertTrue(node1.hasOneChild());
668:       assertFalse(node1.isVoid());
669:       assertTrue(node1.hasChildren());
670:       assertFalse(node1.isCatch());
671:       assertEquals((-2145), node1.getType());
672:       assertFalse(node1.isCall());
673:       assertFalse(node1.isString());
674:       assertFalse(node1.isWhile());
675:       assertFalse(node1.isContinue());
676:       assertFalse(node1.isReturn());
677:       assertFalse(node1.isIn());
678:       assertFalse(node1.isInc());
679:       assertFalse(node1.isFalse());
680:       assertFalse(node1.isThrow());
681:       assertEquals(37, node1.getLineno());
682:       assertFalse(node1.isFunction());
683:       assertFalse(node1.isCast());
684:       assertFalse(node2.isNot());
685:       assertFalse(node2.isWith());
686:       assertFalse(node2.isObjectLit());
687:       assertFalse(node2.isAnd());
688:       assertFalse(node2.isGetProp());
689:       assertFalse(node2.hasOneChild());
690:       assertFalse(node2.isScript());
691:       assertFalse(node2.isLabelName());
692:       assertFalse(node2.isFalse());
693:       assertFalse(node2.isThrow());
694:       assertFalse(node2.isLabel());
695:       assertFalse(node2.isContinue());
696:       assertFalse(node2.isCast());
697:       assertFalse(node2.isDo());
698:       assertFalse(node2.isWhile());
699:       assertFalse(node2.isOr());
700:       assertFalse(node2.isAdd());
701:       assertFalse(node2.isAssignAdd());
702:       assertFalse(node2.isNew());
703:       assertFalse(node2.isString());
704:       assertFalse(node2.isAssign());
705:       assertFalse(node2.isName());
706:       assertFalse(node2.isGetElem());
707:       assertFalse(node2.isBreak());
708:       assertFalse(node2.isDelProp());
709:       assertFalse(node2.hasChildren());
710:       assertFalse(node2.isDec());
711:       assertFalse(node2.isNull());
712:       assertFalse(node2.isReturn());
713:       assertFalse(node2.isVoid());
714:       assertFalse(node2.isComma());
715:       assertFalse(node2.isTypeOf());
716:       assertFalse(node2.isExprResult());
717:       assertFalse(node2.isCall());
718:       assertFalse(node2.isDefaultCase());
719:       assertFalse(node2.isTrue());
720:       assertFalse(node2.isTry());
721:       assertEquals(155647, node2.getSourcePosition());
722:       assertFalse(node2.isDebugger());
723:       assertFalse(node2.isSetterDef());
724:       assertFalse(node2.isEmpty());
725:       assertFalse(node2.isGetterDef());
726:       assertFalse(node2.isVar());
727:       assertFalse(node2.isParamList());
728:       assertFalse(node2.isStringKey());
729:       assertEquals(0, node2.getChildCount());
730:       assertFalse(node2.isArrayLit());
731:       assertEquals(37, node2.getLineno());
732:       assertFalse(node2.isFunction());
733:       assertFalse(node2.isCase());
734:       assertFalse(node2.isSwitch());
735:       assertEquals(4095, node2.getCharno());
736:       assertFalse(node2.isNumber());
737:       assertFalse(node2.isInc());
738:       assertFalse(node2.isIn());
739:       assertFalse(node2.isFor());
740:       assertFalse(node2.isNE());
741:       assertFalse(node2.isThis());
742:       assertFalse(node2.isHook());
743:       assertFalse(node2.isIf());
744:       assertFalse(node2.isBlock());
745:       assertEquals(254, node2.getType());
746:       assertFalse(node2.isRegExp());
747:       assertFalse(node2.hasMoreThanOneChild());
748:       assertFalse(node2.isInstanceOf());
749:       assertFalse(node2.isCatch());
750:       
751:       node0.detachChildren();
752:       assertFalse(node0.equals((Object)node1));
753:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
754:       assertEquals(53, Node.INPUT_ID);
755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(2, Node.POST_FLAG);
758:       assertEquals(51, Node.STATIC_SOURCE_FILE);
759:       assertEquals(12, Node.COLUMN_BITS);
760:       assertEquals(46, Node.IS_NAMESPACE);
761:       assertEquals(1, Node.DECR_FLAG);
762:       assertEquals(32, Node.INCRDECR_PROP);
763:       assertEquals(43, Node.IS_CONSTANT_NAME);
764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
767:       assertEquals(50, Node.FREE_CALL);
768:       assertEquals(40, Node.ORIGINALNAME_PROP);
769:       assertEquals(57, Node.REFLECTED_OBJECT);
770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
771:       assertEquals(57, Node.LAST_PROP);
772:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
774:       assertEquals(30, Node.VAR_ARGS_NAME);
775:       assertEquals(4095, Node.COLUMN_MASK);
776:       assertEquals(55, Node.INFERRED_FUNCTION);
777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
778:       assertEquals(48, Node.DIRECTIVES);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(49, Node.DIRECT_EVAL);
781:       assertEquals(56, Node.CHANGE_TIME);
782:       assertEquals(15, Node.NO_SIDE_EFFECTS);
783:       assertEquals(36, Node.QUOTED_PROP);
784:       assertEquals(39, Node.EMPTY_BLOCK);
785:       assertEquals(29, Node.JSDOC_INFO_PROP);
786:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertSame(node0, node2);
790:       assertFalse(node0.isCall());
791:       assertFalse(node0.isVar());
792:       assertFalse(node0.isStringKey());
793:       assertFalse(node0.isName());
794:       assertEquals(254, node0.getType());
795:       assertFalse(node0.isAdd());
796:       assertFalse(node0.isNew());
797:       assertFalse(node0.isSetterDef());
798:       assertEquals(37, node0.getLineno());
799:       assertFalse(node0.isWhile());
800:       assertEquals(0, node0.getChildCount());
801:       assertFalse(node0.isBlock());
802:       assertFalse(node0.isContinue());
803:       assertFalse(node0.isParamList());
804:       assertFalse(node0.isDebugger());
805:       assertFalse(node0.isNumber());
806:       assertFalse(node0.isCast());
807:       assertEquals(155647, node0.getSourcePosition());
808:       assertFalse(node0.isTry());
809:       assertFalse(node0.hasOneChild());
810:       assertFalse(node0.isFunction());
811:       assertFalse(node0.isRegExp());
812:       assertFalse(node0.isFor());
813:       assertFalse(node0.isCatch());
814:       assertFalse(node0.isWith());
815:       assertFalse(node0.hasMoreThanOneChild());
816:       assertFalse(node0.isIn());
817:       assertFalse(node0.isInstanceOf());
818:       assertFalse(node0.isInc());
819:       assertFalse(node0.isNE());
820:       assertFalse(node0.isIf());
821:       assertFalse(node0.isThrow());
822:       assertFalse(node0.isFalse());
823:       assertFalse(node0.isBreak());
824:       assertFalse(node0.isThis());
825:       assertFalse(node0.isComma());
826:       assertFalse(node0.isHook());
827:       assertFalse(node0.isAnd());
828:       assertFalse(node0.isObjectLit());
829:       assertFalse(node0.isString());
830:       assertFalse(node0.isScript());
831:       assertFalse(node0.isCase());
832:       assertFalse(node0.isGetProp());
833:       assertEquals(4095, node0.getCharno());
834:       assertFalse(node0.isSwitch());
835:       assertFalse(node0.isGetterDef());
836:       assertFalse(node0.isNot());
837:       assertFalse(node0.isDelProp());
838:       assertFalse(node0.isLabelName());
839:       assertFalse(node0.isEmpty());
840:       assertFalse(node0.isGetElem());
841:       assertFalse(node0.isArrayLit());
842:       assertFalse(node0.isExprResult());
843:       assertFalse(node0.isTypeOf());
844:       assertFalse(node0.isAssignAdd());
845:       assertFalse(node0.isDefaultCase());
846:       assertFalse(node0.isReturn());
847:       assertFalse(node0.isAssign());
848:       assertFalse(node0.isDec());
849:       assertFalse(node0.isLabel());
850:       assertFalse(node0.hasChildren());
851:       assertFalse(node0.isDo());
852:       assertFalse(node0.isTrue());
853:       assertFalse(node0.isVoid());
854:       assertFalse(node0.isOr());
855:       assertFalse(node0.isNull());
856:       
857:       int int0 = node1.getLength();
858:       assertFalse(node0.equals((Object)node1));
859:       assertFalse(node1.equals((Object)node0));
860:       assertFalse(node1.equals((Object)node2));
861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
862:       assertEquals(53, Node.INPUT_ID);
863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
864:       assertEquals(47, Node.IS_DISPATCHER);
865:       assertEquals(2, Node.POST_FLAG);
866:       assertEquals(51, Node.STATIC_SOURCE_FILE);
867:       assertEquals(12, Node.COLUMN_BITS);
868:       assertEquals(46, Node.IS_NAMESPACE);
869:       assertEquals(1, Node.DECR_FLAG);
870:       assertEquals(32, Node.INCRDECR_PROP);
871:       assertEquals(43, Node.IS_CONSTANT_NAME);
872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
873:       assertEquals(54, Node.SLASH_V);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(50, Node.FREE_CALL);
876:       assertEquals(40, Node.ORIGINALNAME_PROP);
877:       assertEquals(57, Node.REFLECTED_OBJECT);
878:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
879:       assertEquals(57, Node.LAST_PROP);
880:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
881:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
882:       assertEquals(30, Node.VAR_ARGS_NAME);
883:       assertEquals(4095, Node.COLUMN_MASK);
884:       assertEquals(55, Node.INFERRED_FUNCTION);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(48, Node.DIRECTIVES);
887:       assertEquals(37, Node.OPT_ARG_NAME);
888:       assertEquals(49, Node.DIRECT_EVAL);
889:       assertEquals(56, Node.CHANGE_TIME);
890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
891:       assertEquals(36, Node.QUOTED_PROP);
892:       assertEquals(39, Node.EMPTY_BLOCK);
893:       assertEquals(29, Node.JSDOC_INFO_PROP);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(52, Node.LENGTH);
896:       assertEquals(8, Node.FLAG_NO_THROWS);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertEquals(30, Node.VAR_ARGS_NAME);
901:       assertEquals(2, Node.POST_FLAG);
902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
903:       assertEquals(15, Node.NO_SIDE_EFFECTS);
904:       assertEquals(47, Node.IS_DISPATCHER);
905:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
906:       assertEquals(57, Node.LAST_PROP);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(52, Node.LENGTH);
914:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
915:       assertEquals(37, Node.OPT_ARG_NAME);
916:       assertEquals(56, Node.CHANGE_TIME);
917:       assertEquals(36, Node.QUOTED_PROP);
918:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
919:       assertEquals(49, Node.DIRECT_EVAL);
920:       assertEquals(48, Node.DIRECTIVES);
921:       assertEquals(55, Node.INFERRED_FUNCTION);
922:       assertEquals(4095, Node.COLUMN_MASK);
923:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
924:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
925:       assertEquals(8, Node.FLAG_NO_THROWS);
926:       assertEquals(39, Node.EMPTY_BLOCK);
927:       assertEquals(53, Node.INPUT_ID);
928:       assertEquals(40, Node.ORIGINALNAME_PROP);
929:       assertEquals(50, Node.FREE_CALL);
930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
931:       assertEquals(43, Node.IS_CONSTANT_NAME);
932:       assertEquals(54, Node.SLASH_V);
933:       assertEquals(0, int0);
934:       assertSame(node0, node2);
935:       assertFalse(node0.isCall());
936:       assertFalse(node0.isVar());
937:       assertFalse(node0.isStringKey());
938:       assertFalse(node0.isName());
939:       assertEquals(254, node0.getType());
940:       assertFalse(node0.isAdd());
941:       assertFalse(node0.isNew());
942:       assertFalse(node0.isSetterDef());
943:       assertEquals(37, node0.getLineno());
944:       assertFalse(node0.isWhile());
945:       assertEquals(0, node0.getChildCount());
946:       assertFalse(node0.isBlock());
947:       assertFalse(node0.isContinue());
948:       assertFalse(node0.isParamList());
949:       assertFalse(node0.isDebugger());
950:       assertFalse(node0.isNumber());
951:       assertFalse(node0.isCast());
952:       assertEquals(155647, node0.getSourcePosition());
953:       assertFalse(node0.isTry());
954:       assertFalse(node0.hasOneChild());
955:       assertFalse(node0.isFunction());
956:       assertFalse(node0.isRegExp());
957:       assertFalse(node0.isFor());
958:       assertFalse(node0.isCatch());
959:       assertFalse(node0.isWith());
960:       assertFalse(node0.hasMoreThanOneChild());
961:       assertFalse(node0.isIn());
962:       assertFalse(node0.isInstanceOf());
963:       assertFalse(node0.isInc());
964:       assertFalse(node0.isNE());
965:       assertFalse(node0.isIf());
966:       assertFalse(node0.isThrow());
967:       assertFalse(node0.isFalse());
968:       assertFalse(node0.isBreak());
969:       assertFalse(node0.isThis());
970:       assertFalse(node0.isComma());
971:       assertFalse(node0.isHook());
972:       assertFalse(node0.isAnd());
973:       assertFalse(node0.isObjectLit());
974:       assertFalse(node0.isString());
975:       assertFalse(node0.isScript());
976:       assertFalse(node0.isCase());
977:       assertFalse(node0.isGetProp());
978:       assertEquals(4095, node0.getCharno());
979:       assertFalse(node0.isSwitch());
980:       assertFalse(node0.isGetterDef());
981:       assertFalse(node0.isNot());
982:       assertFalse(node0.isDelProp());
983:       assertFalse(node0.isLabelName());
984:       assertFalse(node0.isEmpty());
985:       assertFalse(node0.isGetElem());
986:       assertFalse(node0.isArrayLit());
987:       assertFalse(node0.isExprResult());
988:       assertFalse(node0.isTypeOf());
989:       assertFalse(node0.isAssignAdd());
990:       assertFalse(node0.isDefaultCase());
991:       assertFalse(node0.isReturn());
992:       assertFalse(node0.isAssign());
993:       assertFalse(node0.isDec());
994:       assertFalse(node0.isLabel());
995:       assertFalse(node0.hasChildren());
996:       assertFalse(node0.isDo());
997:       assertFalse(node0.isTrue());
998:       assertFalse(node0.isVoid());
999:       assertFalse(node0.isOr());
1000:       assertFalse(node0.isNull());
1001:       assertFalse(node1.isNot());
1002:       assertFalse(node1.isObjectLit());
1003:       assertFalse(node1.isWith());
1004:       assertFalse(node1.isAnd());
1005:       assertFalse(node1.isScript());
1006:       assertFalse(node1.isGetProp());
1007:       assertFalse(node1.isGetElem());
1008:       assertFalse(node1.isAssign());
1009:       assertFalse(node1.isDec());
1010:       assertFalse(node1.isTypeOf());
1011:       assertFalse(node1.isHook());
1012:       assertFalse(node1.isThis());
1013:       assertFalse(node1.isComma());
1014:       assertFalse(node1.isInstanceOf());
1015:       assertFalse(node1.isExprResult());
1016:       assertFalse(node1.isBreak());
1017:       assertFalse(node1.isCase());
1018:       assertFalse(node1.isDo());
1019:       assertFalse(node1.hasMoreThanOneChild());
1020:       assertEquals(4095, node1.getCharno());
1021:       assertEquals(1, node1.getChildCount());
1022:       assertFalse(node1.isLabel());
1023:       assertFalse(node1.isAdd());
1024:       assertFalse(node1.isNew());
1025:       assertFalse(node1.isBlock());
1026:       assertFalse(node1.isOr());
1027:       assertFalse(node1.isAssignAdd());
1028:       assertFalse(node1.isStringKey());
1029:       assertFalse(node1.isLabelName());
1030:       assertFalse(node1.isNumber());
1031:       assertFalse(node1.isVar());
1032:       assertFalse(node1.isGetterDef());
1033:       assertFalse(node1.isParamList());
1034:       assertFalse(node1.isSwitch());
1035:       assertFalse(node1.isArrayLit());
1036:       assertFalse(node1.isDefaultCase());
1037:       assertFalse(node1.isRegExp());
1038:       assertFalse(node1.isTrue());
1039:       assertFalse(node1.isDebugger());
1040:       assertFalse(node1.isTry());
1041:       assertEquals(155647, node1.getSourcePosition());
1042:       assertFalse(node1.isSetterDef());
1043:       assertFalse(node1.isName());
1044:       assertFalse(node1.isFor());
1045:       assertFalse(node1.isEmpty());
1046:       assertFalse(node1.isDelProp());
1047:       assertFalse(node1.isIf());
1048:       assertFalse(node1.isNull());
1049:       assertFalse(node1.isNE());
1050:       assertTrue(node1.hasOneChild());
1051:       assertFalse(node1.isVoid());
1052:       assertTrue(node1.hasChildren());
1053:       assertFalse(node1.isCatch());
1054:       assertEquals((-2145), node1.getType());
1055:       assertFalse(node1.isCall());
1056:       assertFalse(node1.isString());
1057:       assertFalse(node1.isWhile());
1058:       assertFalse(node1.isContinue());
1059:       assertFalse(node1.isReturn());
1060:       assertFalse(node1.isIn());
1061:       assertFalse(node1.isInc());
1062:       assertFalse(node1.isFalse());
1063:       assertFalse(node1.isThrow());
1064:       assertEquals(37, node1.getLineno());
1065:       assertFalse(node1.isFunction());
1066:       assertFalse(node1.isCast());
1067:       
1068:       boolean boolean0 = node2.getBooleanProp(9);
1069:       assertFalse(node0.equals((Object)node1));
1070:       assertFalse(node1.equals((Object)node0));
1071:       assertFalse(node1.equals((Object)node2));
1072:       assertFalse(node2.equals((Object)node1));
1073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(47, Node.IS_DISPATCHER);
1077:       assertEquals(2, Node.POST_FLAG);
1078:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(1, Node.DECR_FLAG);
1082:       assertEquals(32, Node.INCRDECR_PROP);
1083:       assertEquals(43, Node.IS_CONSTANT_NAME);
1084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(40, Node.ORIGINALNAME_PROP);
1089:       assertEquals(57, Node.REFLECTED_OBJECT);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(57, Node.LAST_PROP);
1092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(4095, Node.COLUMN_MASK);
1096:       assertEquals(55, Node.INFERRED_FUNCTION);
1097:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1098:       assertEquals(48, Node.DIRECTIVES);
1099:       assertEquals(37, Node.OPT_ARG_NAME);
1100:       assertEquals(49, Node.DIRECT_EVAL);
1101:       assertEquals(56, Node.CHANGE_TIME);
1102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1103:       assertEquals(36, Node.QUOTED_PROP);
1104:       assertEquals(39, Node.EMPTY_BLOCK);
1105:       assertEquals(29, Node.JSDOC_INFO_PROP);
1106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1107:       assertEquals(52, Node.LENGTH);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1110:       assertEquals(46, Node.IS_NAMESPACE);
1111:       assertEquals(12, Node.COLUMN_BITS);
1112:       assertEquals(30, Node.VAR_ARGS_NAME);
1113:       assertEquals(2, Node.POST_FLAG);
1114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1116:       assertEquals(47, Node.IS_DISPATCHER);
1117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1118:       assertEquals(57, Node.LAST_PROP);
1119:       assertEquals(1, Node.DECR_FLAG);
1120:       assertEquals(32, Node.INCRDECR_PROP);
1121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1122:       assertEquals(57, Node.REFLECTED_OBJECT);
1123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1124:       assertEquals(29, Node.JSDOC_INFO_PROP);
1125:       assertEquals(52, Node.LENGTH);
1126:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1127:       assertEquals(37, Node.OPT_ARG_NAME);
1128:       assertEquals(56, Node.CHANGE_TIME);
1129:       assertEquals(36, Node.QUOTED_PROP);
1130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1131:       assertEquals(49, Node.DIRECT_EVAL);
1132:       assertEquals(48, Node.DIRECTIVES);
1133:       assertEquals(55, Node.INFERRED_FUNCTION);
1134:       assertEquals(4095, Node.COLUMN_MASK);
1135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1137:       assertEquals(8, Node.FLAG_NO_THROWS);
1138:       assertEquals(39, Node.EMPTY_BLOCK);
1139:       assertEquals(53, Node.INPUT_ID);
1140:       assertEquals(40, Node.ORIGINALNAME_PROP);
1141:       assertEquals(50, Node.FREE_CALL);
1142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1143:       assertEquals(43, Node.IS_CONSTANT_NAME);
1144:       assertEquals(54, Node.SLASH_V);
1145:       assertEquals(12, Node.COLUMN_BITS);
1146:       assertEquals(30, Node.VAR_ARGS_NAME);
1147:       assertEquals(46, Node.IS_NAMESPACE);
1148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1149:       assertEquals(57, Node.LAST_PROP);
1150:       assertEquals(29, Node.JSDOC_INFO_PROP);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1153:       assertEquals(1, Node.DECR_FLAG);
1154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1155:       assertEquals(40, Node.ORIGINALNAME_PROP);
1156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1157:       assertEquals(50, Node.FREE_CALL);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(2, Node.POST_FLAG);
1160:       assertEquals(54, Node.SLASH_V);
1161:       assertEquals(43, Node.IS_CONSTANT_NAME);
1162:       assertEquals(55, Node.INFERRED_FUNCTION);
1163:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1164:       assertEquals(4095, Node.COLUMN_MASK);
1165:       assertEquals(36, Node.QUOTED_PROP);
1166:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1167:       assertEquals(8, Node.FLAG_NO_THROWS);
1168:       assertEquals(39, Node.EMPTY_BLOCK);
1169:       assertEquals(53, Node.INPUT_ID);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1172:       assertEquals(52, Node.LENGTH);
1173:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1174:       assertEquals(57, Node.REFLECTED_OBJECT);
1175:       assertEquals(48, Node.DIRECTIVES);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(49, Node.DIRECT_EVAL);
1180:       assertEquals(37, Node.OPT_ARG_NAME);
1181:       assertFalse(boolean0);
1182:       assertSame(node0, node2);
1183:       assertSame(node2, node0);
1184:       assertFalse(node0.isCall());
1185:       assertFalse(node0.isVar());
1186:       assertFalse(node0.isStringKey());
1187:       assertFalse(node0.isName());
1188:       assertEquals(254, node0.getType());
1189:       assertFalse(node0.isAdd());
1190:       assertFalse(node0.isNew());
1191:       assertFalse(node0.isSetterDef());
1192:       assertEquals(37, node0.getLineno());
1193:       assertFalse(node0.isWhile());
1194:       assertEquals(0, node0.getChildCount());
1195:       assertFalse(node0.isBlock());
1196:       assertFalse(node0.isContinue());
1197:       assertFalse(node0.isParamList());
1198:       assertFalse(node0.isDebugger());
1199:       assertFalse(node0.isNumber());
1200:       assertFalse(node0.isCast());
1201:       assertEquals(155647, node0.getSourcePosition());
1202:       assertFalse(node0.isTry());
1203:       assertFalse(node0.hasOneChild());
1204:       assertFalse(node0.isFunction());
1205:       assertFalse(node0.isRegExp());
1206:       assertFalse(node0.isFor());
1207:       assertFalse(node0.isCatch());
1208:       assertFalse(node0.isWith());
1209:       assertFalse(node0.hasMoreThanOneChild());
1210:       assertFalse(node0.isIn());
1211:       assertFalse(node0.isInstanceOf());
1212:       assertFalse(node0.isInc());
1213:       assertFalse(node0.isNE());
1214:       assertFalse(node0.isIf());
1215:       assertFalse(node0.isThrow());
1216:       assertFalse(node0.isFalse());
1217:       assertFalse(node0.isBreak());
1218:       assertFalse(node0.isThis());
1219:       assertFalse(node0.isComma());
1220:       assertFalse(node0.isHook());
1221:       assertFalse(node0.isAnd());
1222:       assertFalse(node0.isObjectLit());
1223:       assertFalse(node0.isString());
1224:       assertFalse(node0.isScript());
1225:       assertFalse(node0.isCase());
1226:       assertFalse(node0.isGetProp());
1227:       assertEquals(4095, node0.getCharno());
1228:       assertFalse(node0.isSwitch());
1229:       assertFalse(node0.isGetterDef());
1230:       assertFalse(node0.isNot());
1231:       assertFalse(node0.isDelProp());
1232:       assertFalse(node0.isLabelName());
1233:       assertFalse(node0.isEmpty());
1234:       assertFalse(node0.isGetElem());
1235:       assertFalse(node0.isArrayLit());
1236:       assertFalse(node0.isExprResult());
1237:       assertFalse(node0.isTypeOf());
1238:       assertFalse(node0.isAssignAdd());
1239:       assertFalse(node0.isDefaultCase());
1240:       assertFalse(node0.isReturn());
1241:       assertFalse(node0.isAssign());
1242:       assertFalse(node0.isDec());
1243:       assertFalse(node0.isLabel());
1244:       assertFalse(node0.hasChildren());
1245:       assertFalse(node0.isDo());
1246:       assertFalse(node0.isTrue());
1247:       assertFalse(node0.isVoid());
1248:       assertFalse(node0.isOr());
1249:       assertFalse(node0.isNull());
1250:       assertFalse(node1.isNot());
1251:       assertFalse(node1.isObjectLit());
1252:       assertFalse(node1.isWith());
1253:       assertFalse(node1.isAnd());
1254:       assertFalse(node1.isScript());
1255:       assertFalse(node1.isGetProp());
1256:       assertFalse(node1.isGetElem());
1257:       assertFalse(node1.isAssign());
1258:       assertFalse(node1.isDec());
1259:       assertFalse(node1.isTypeOf());
1260:       assertFalse(node1.isHook());
1261:       assertFalse(node1.isThis());
1262:       assertFalse(node1.isComma());
1263:       assertFalse(node1.isInstanceOf());
1264:       assertFalse(node1.isExprResult());
1265:       assertFalse(node1.isBreak());
1266:       assertFalse(node1.isCase());
1267:       assertFalse(node1.isDo());
1268:       assertFalse(node1.hasMoreThanOneChild());
1269:       assertEquals(4095, node1.getCharno());
1270:       assertEquals(1, node1.getChildCount());
1271:       assertFalse(node1.isLabel());
1272:       assertFalse(node1.isAdd());
1273:       assertFalse(node1.isNew());
1274:       assertFalse(node1.isBlock());
1275:       assertFalse(node1.isOr());
1276:       assertFalse(node1.isAssignAdd());
1277:       assertFalse(node1.isStringKey());
1278:       assertFalse(node1.isLabelName());
1279:       assertFalse(node1.isNumber());
1280:       assertFalse(node1.isVar());
1281:       assertFalse(node1.isGetterDef());
1282:       assertFalse(node1.isParamList());
1283:       assertFalse(node1.isSwitch());
1284:       assertFalse(node1.isArrayLit());
1285:       assertFalse(node1.isDefaultCase());
1286:       assertFalse(node1.isRegExp());
1287:       assertFalse(node1.isTrue());
1288:       assertFalse(node1.isDebugger());
1289:       assertFalse(node1.isTry());
1290:       assertEquals(155647, node1.getSourcePosition());
1291:       assertFalse(node1.isSetterDef());
1292:       assertFalse(node1.isName());
1293:       assertFalse(node1.isFor());
1294:       assertFalse(node1.isEmpty());
1295:       assertFalse(node1.isDelProp());
1296:       assertFalse(node1.isIf());
1297:       assertFalse(node1.isNull());
1298:       assertFalse(node1.isNE());
1299:       assertTrue(node1.hasOneChild());
1300:       assertFalse(node1.isVoid());
1301:       assertTrue(node1.hasChildren());
1302:       assertFalse(node1.isCatch());
1303:       assertEquals((-2145), node1.getType());
1304:       assertFalse(node1.isCall());
1305:       assertFalse(node1.isString());
1306:       assertFalse(node1.isWhile());
1307:       assertFalse(node1.isContinue());
1308:       assertFalse(node1.isReturn());
1309:       assertFalse(node1.isIn());
1310:       assertFalse(node1.isInc());
1311:       assertFalse(node1.isFalse());
1312:       assertFalse(node1.isThrow());
1313:       assertEquals(37, node1.getLineno());
1314:       assertFalse(node1.isFunction());
1315:       assertFalse(node1.isCast());
1316:       assertFalse(node2.isNot());
1317:       assertFalse(node2.isWith());
1318:       assertFalse(node2.isObjectLit());
1319:       assertFalse(node2.isAnd());
1320:       assertFalse(node2.isGetProp());
1321:       assertFalse(node2.hasOneChild());
1322:       assertFalse(node2.isScript());
1323:       assertFalse(node2.isLabelName());
1324:       assertFalse(node2.isFalse());
1325:       assertFalse(node2.isThrow());
1326:       assertFalse(node2.isLabel());
1327:       assertFalse(node2.isContinue());
1328:       assertFalse(node2.isCast());
1329:       assertFalse(node2.isDo());
1330:       assertFalse(node2.isWhile());
1331:       assertFalse(node2.isOr());
1332:       assertFalse(node2.isAdd());
1333:       assertFalse(node2.isAssignAdd());
1334:       assertFalse(node2.isNew());
1335:       assertFalse(node2.isString());
1336:       assertFalse(node2.isAssign());
1337:       assertFalse(node2.isName());
1338:       assertFalse(node2.isGetElem());
1339:       assertFalse(node2.isBreak());
1340:       assertFalse(node2.isDelProp());
1341:       assertFalse(node2.hasChildren());
1342:       assertFalse(node2.isDec());
1343:       assertFalse(node2.isNull());
1344:       assertFalse(node2.isReturn());
1345:       assertFalse(node2.isVoid());
1346:       assertFalse(node2.isComma());
1347:       assertFalse(node2.isTypeOf());
1348:       assertFalse(node2.isExprResult());
1349:       assertFalse(node2.isCall());
1350:       assertFalse(node2.isDefaultCase());
1351:       assertFalse(node2.isTrue());
1352:       assertFalse(node2.isTry());
1353:       assertEquals(155647, node2.getSourcePosition());
1354:       assertFalse(node2.isDebugger());
1355:       assertFalse(node2.isSetterDef());
1356:       assertFalse(node2.isEmpty());
1357:       assertFalse(node2.isGetterDef());
1358:       assertFalse(node2.isVar());
1359:       assertFalse(node2.isParamList());
1360:       assertFalse(node2.isStringKey());
1361:       assertEquals(0, node2.getChildCount());
1362:       assertFalse(node2.isArrayLit());
1363:       assertEquals(37, node2.getLineno());
1364:       assertFalse(node2.isFunction());
1365:       assertFalse(node2.isCase());
1366:       assertFalse(node2.isSwitch());
1367:       assertEquals(4095, node2.getCharno());
1368:       assertFalse(node2.isNumber());
1369:       assertFalse(node2.isInc());
1370:       assertFalse(node2.isIn());
1371:       assertFalse(node2.isFor());
1372:       assertFalse(node2.isNE());
1373:       assertFalse(node2.isThis());
1374:       assertFalse(node2.isHook());
1375:       assertFalse(node2.isIf());
1376:       assertFalse(node2.isBlock());
1377:       assertEquals(254, node2.getType());
1378:       assertFalse(node2.isRegExp());
1379:       assertFalse(node2.hasMoreThanOneChild());
1380:       assertFalse(node2.isInstanceOf());
1381:       assertFalse(node2.isCatch());
1382:       
1383:       Node node3 = Node.newString("^T bi6mc\"24m1h|@{G");
1384:       assertFalse(node3.equals((Object)node0));
1385:       assertFalse(node3.equals((Object)node2));
1386:       assertFalse(node3.equals((Object)node1));
1387:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1388:       assertEquals(48, Node.DIRECTIVES);
1389:       assertEquals(8, Node.FLAG_NO_THROWS);
1390:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1391:       assertEquals(40, Node.ORIGINALNAME_PROP);
1392:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1393:       assertEquals(39, Node.EMPTY_BLOCK);
1394:       assertEquals(4095, Node.COLUMN_MASK);
1395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1396:       assertEquals(43, Node.IS_CONSTANT_NAME);
1397:       assertEquals(1, Node.DECR_FLAG);
1398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1399:       assertEquals(50, Node.FREE_CALL);
1400:       assertEquals(46, Node.IS_NAMESPACE);
1401:       assertEquals(54, Node.SLASH_V);
1402:       assertEquals(2, Node.POST_FLAG);
1403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1404:       assertEquals(56, Node.CHANGE_TIME);
1405:       assertEquals(29, Node.JSDOC_INFO_PROP);
1406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1407:       assertEquals(37, Node.OPT_ARG_NAME);
1408:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1409:       assertEquals(12, Node.COLUMN_BITS);
1410:       assertEquals(32, Node.INCRDECR_PROP);
1411:       assertEquals(30, Node.VAR_ARGS_NAME);
1412:       assertEquals(47, Node.IS_DISPATCHER);
1413:       assertEquals(36, Node.QUOTED_PROP);
1414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1415:       assertEquals(57, Node.LAST_PROP);
1416:       assertEquals(49, Node.DIRECT_EVAL);
1417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1419:       assertEquals(53, Node.INPUT_ID);
1420:       assertEquals(55, Node.INFERRED_FUNCTION);
1421:       assertEquals(52, Node.LENGTH);
1422:       assertEquals(57, Node.REFLECTED_OBJECT);
1423:       assertNotSame(node3, node0);
1424:       assertNotSame(node3, node2);
1425:       assertFalse(node3.isGetterDef());
1426:       assertFalse(node3.isIn());
1427:       assertFalse(node3.isFor());
1428:       assertFalse(node3.isEmpty());
1429:       assertFalse(node3.isCase());
1430:       assertFalse(node3.isTry());
1431:       assertEquals((-1), node3.getCharno());
1432:       assertFalse(node3.isDebugger());
1433:       assertFalse(node3.isFunction());
1434:       assertFalse(node3.isArrayLit());
1435:       assertFalse(node3.isSwitch());
1436:       assertFalse(node3.isGetProp());
1437:       assertFalse(node3.isComma());
1438:       assertEquals(0, node3.getChildCount());
1439:       assertFalse(node3.isDefaultCase());
1440:       assertFalse(node3.isVar());
1441:       assertFalse(node3.isNew());
1442:       assertFalse(node3.isExprResult());
1443:       assertFalse(node3.isAdd());
1444:       assertFalse(node3.isVoid());
1445:       assertFalse(node3.isTrue());
1446:       assertFalse(node3.isGetElem());
1447:       assertFalse(node3.isCall());
1448:       assertFalse(node3.isName());
1449:       assertFalse(node3.isBreak());
1450:       assertFalse(node3.isDelProp());
1451:       assertFalse(node3.isNull());
1452:       assertEquals((-1), node3.getLineno());
1453:       assertFalse(node3.isOr());
1454:       assertFalse(node3.isReturn());
1455:       assertEquals((-1), node3.getSourcePosition());
1456:       assertFalse(node3.isLabel());
1457:       assertFalse(node3.isDec());
1458:       assertFalse(node3.isNumber());
1459:       assertFalse(node3.isTypeOf());
1460:       assertFalse(node3.hasMoreThanOneChild());
1461:       assertFalse(node3.isContinue());
1462:       assertFalse(node3.isAssign());
1463:       assertFalse(node3.isDo());
1464:       assertFalse(node3.hasChildren());
1465:       assertFalse(node3.hasOneChild());
1466:       assertFalse(node3.isAssignAdd());
1467:       assertFalse(node3.isWhile());
1468:       assertTrue(node3.isString());
1469:       assertFalse(node3.isScript());
1470:       assertFalse(node3.isCast());
1471:       assertFalse(node3.isStringKey());
1472:       assertFalse(node3.isLabelName());
1473:       assertFalse(node3.isObjectLit());
1474:       assertFalse(node3.isNot());
1475:       assertFalse(node3.isParamList());
1476:       assertFalse(node3.isAnd());
1477:       assertFalse(node3.isThis());
1478:       assertFalse(node3.isSetterDef());
1479:       assertFalse(node3.isInstanceOf());
1480:       assertFalse(node3.isCatch());
1481:       assertFalse(node3.isThrow());
1482:       assertFalse(node3.isFalse());
1483:       assertEquals(40, node3.getType());
1484:       assertFalse(node3.isHook());
1485:       assertFalse(node3.isBlock());
1486:       assertFalse(node3.isInc());
1487:       assertFalse(node3.isRegExp());
1488:       assertFalse(node3.isWith());
1489:       assertFalse(node3.isNE());
1490:       assertFalse(node3.isIf());
1491:       
1492:       Node node4 = Node.newString(38, "^T bi6mc\"24m1h|@{G", 15, 1679);
1493:       assertFalse(node4.equals((Object)node3));
1494:       assertFalse(node4.equals((Object)node0));
1495:       assertFalse(node4.equals((Object)node2));
1496:       assertFalse(node4.equals((Object)node1));
1497:       assertEquals(52, Node.LENGTH);
1498:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1499:       assertEquals(40, Node.ORIGINALNAME_PROP);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1502:       assertEquals(57, Node.LAST_PROP);
1503:       assertEquals(30, Node.VAR_ARGS_NAME);
1504:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1505:       assertEquals(4095, Node.COLUMN_MASK);
1506:       assertEquals(55, Node.INFERRED_FUNCTION);
1507:       assertEquals(49, Node.DIRECT_EVAL);
1508:       assertEquals(48, Node.DIRECTIVES);
1509:       assertEquals(37, Node.OPT_ARG_NAME);
1510:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1512:       assertEquals(39, Node.EMPTY_BLOCK);
1513:       assertEquals(36, Node.QUOTED_PROP);
1514:       assertEquals(56, Node.CHANGE_TIME);
1515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1516:       assertEquals(8, Node.FLAG_NO_THROWS);
1517:       assertEquals(57, Node.REFLECTED_OBJECT);
1518:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1519:       assertEquals(29, Node.JSDOC_INFO_PROP);
1520:       assertEquals(53, Node.INPUT_ID);
1521:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1522:       assertEquals(2, Node.POST_FLAG);
1523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1524:       assertEquals(47, Node.IS_DISPATCHER);
1525:       assertEquals(12, Node.COLUMN_BITS);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals(32, Node.INCRDECR_PROP);
1528:       assertEquals(1, Node.DECR_FLAG);
1529:       assertEquals(43, Node.IS_CONSTANT_NAME);
1530:       assertEquals(50, Node.FREE_CALL);
1531:       assertEquals(46, Node.IS_NAMESPACE);
1532:       assertEquals(54, Node.SLASH_V);
1533:       assertNotSame(node4, node3);
1534:       assertNotSame(node4, node0);
1535:       assertNotSame(node4, node2);
1536:       assertFalse(node4.isGetElem());
1537:       assertFalse(node4.isAssign());
1538:       assertFalse(node4.isLabelName());
1539:       assertFalse(node4.isDec());
1540:       assertFalse(node4.isNumber());
1541:       assertFalse(node4.isTypeOf());
1542:       assertFalse(node4.isCast());
1543:       assertEquals(15, node4.getLineno());
1544:       assertFalse(node4.isReturn());
1545:       assertFalse(node4.isLabel());
1546:       assertFalse(node4.hasOneChild());
1547:       assertFalse(node4.hasChildren());
1548:       assertFalse(node4.isAssignAdd());
1549:       assertFalse(node4.isDo());
1550:       assertFalse(node4.isInstanceOf());
1551:       assertFalse(node4.isWith());
1552:       assertFalse(node4.hasMoreThanOneChild());
1553:       assertFalse(node4.isExprResult());
1554:       assertFalse(node4.isOr());
1555:       assertTrue(node4.isName());
1556:       assertFalse(node4.isThrow());
1557:       assertFalse(node4.isFalse());
1558:       assertFalse(node4.isCall());
1559:       assertFalse(node4.isBreak());
1560:       assertFalse(node4.isGetProp());
1561:       assertEquals(63119, node4.getSourcePosition());
1562:       assertFalse(node4.isComma());
1563:       assertFalse(node4.isSetterDef());
1564:       assertFalse(node4.isInc());
1565:       assertFalse(node4.isWhile());
1566:       assertFalse(node4.isObjectLit());
1567:       assertFalse(node4.isNot());
1568:       assertFalse(node4.isString());
1569:       assertFalse(node4.isContinue());
1570:       assertFalse(node4.isDebugger());
1571:       assertFalse(node4.isAnd());
1572:       assertFalse(node4.isFor());
1573:       assertFalse(node4.isEmpty());
1574:       assertFalse(node4.isArrayLit());
1575:       assertFalse(node4.isGetterDef());
1576:       assertFalse(node4.isTry());
1577:       assertFalse(node4.isFunction());
1578:       assertEquals(1679, node4.getCharno());
1579:       assertFalse(node4.isDefaultCase());
1580:       assertFalse(node4.isIn());
1581:       assertFalse(node4.isRegExp());
1582:       assertFalse(node4.isCatch());
1583:       assertFalse(node4.isVoid());
1584:       assertFalse(node4.isTrue());
1585:       assertFalse(node4.isIf());
1586:       assertFalse(node4.isDelProp());
1587:       assertFalse(node4.isNull());
1588:       assertFalse(node4.isNE());
1589:       assertFalse(node4.isStringKey());
1590:       assertFalse(node4.isAdd());
1591:       assertFalse(node4.isBlock());
1592:       assertFalse(node4.isThis());
1593:       assertFalse(node4.isNew());
1594:       assertFalse(node4.isHook());
1595:       assertFalse(node4.isVar());
1596:       assertFalse(node4.isCase());
1597:       assertEquals(38, node4.getType());
1598:       assertEquals(0, node4.getChildCount());
1599:       assertFalse(node4.isScript());
1600:       assertFalse(node4.isSwitch());
1601:       assertFalse(node4.isParamList());
1602:       
1603:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("?0JftnD;'", false);
1604:       assertEquals("?0JftnD;'", simpleSourceFile0.getName());
1605:       assertEquals("?0JftnD;'", simpleSourceFile0.toString());
1606:       assertFalse(simpleSourceFile0.isExtern());
1607:       
1608:       int int1 = Node.CHANGE_TIME;
1609:       assertFalse(int1 == int0);
1610:       assertEquals(56, int1);
1611:       
1612:       node2.setStaticSourceFile(simpleSourceFile0);
1613:       assertFalse(node0.equals((Object)node1));
1614:       assertFalse(node0.equals((Object)node4));
1615:       assertFalse(node0.equals((Object)node3));
1616:       assertFalse(node1.equals((Object)node4));
1617:       assertFalse(node1.equals((Object)node3));
1618:       assertFalse(node1.equals((Object)node0));
1619:       assertFalse(node1.equals((Object)node2));
1620:       assertFalse(node2.equals((Object)node3));
1621:       assertFalse(node2.equals((Object)node1));
1622:       assertFalse(node2.equals((Object)node4));
1623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1624:       assertEquals(53, Node.INPUT_ID);
1625:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1626:       assertEquals(47, Node.IS_DISPATCHER);
1627:       assertEquals(2, Node.POST_FLAG);
1628:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1629:       assertEquals(12, Node.COLUMN_BITS);
1630:       assertEquals(46, Node.IS_NAMESPACE);
1631:       assertEquals(1, Node.DECR_FLAG);
1632:       assertEquals(32, Node.INCRDECR_PROP);
1633:       assertEquals(43, Node.IS_CONSTANT_NAME);
1634:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1635:       assertEquals(54, Node.SLASH_V);
1636:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1637:       assertEquals(50, Node.FREE_CALL);
1638:       assertEquals(40, Node.ORIGINALNAME_PROP);
1639:       assertEquals(57, Node.REFLECTED_OBJECT);
1640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1641:       assertEquals(57, Node.LAST_PROP);
1642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1643:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1644:       assertEquals(30, Node.VAR_ARGS_NAME);
1645:       assertEquals(4095, Node.COLUMN_MASK);
1646:       assertEquals(55, Node.INFERRED_FUNCTION);
1647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1648:       assertEquals(48, Node.DIRECTIVES);
1649:       assertEquals(37, Node.OPT_ARG_NAME);
1650:       assertEquals(49, Node.DIRECT_EVAL);
1651:       assertEquals(56, Node.CHANGE_TIME);
1652:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1653:       assertEquals(36, Node.QUOTED_PROP);
1654:       assertEquals(39, Node.EMPTY_BLOCK);
1655:       assertEquals(29, Node.JSDOC_INFO_PROP);
1656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1657:       assertEquals(52, Node.LENGTH);
1658:       assertEquals(8, Node.FLAG_NO_THROWS);
1659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1660:       assertEquals(46, Node.IS_NAMESPACE);
1661:       assertEquals(12, Node.COLUMN_BITS);
1662:       assertEquals(30, Node.VAR_ARGS_NAME);
1663:       assertEquals(2, Node.POST_FLAG);
1664:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1665:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1666:       assertEquals(47, Node.IS_DISPATCHER);
1667:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1668:       assertEquals(57, Node.LAST_PROP);
1669:       assertEquals(1, Node.DECR_FLAG);
1670:       assertEquals(32, Node.INCRDECR_PROP);
1671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1672:       assertEquals(57, Node.REFLECTED_OBJECT);
1673:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1674:       assertEquals(29, Node.JSDOC_INFO_PROP);
1675:       assertEquals(52, Node.LENGTH);
1676:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1677:       assertEquals(37, Node.OPT_ARG_NAME);
1678:       assertEquals(56, Node.CHANGE_TIME);
1679:       assertEquals(36, Node.QUOTED_PROP);
1680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1681:       assertEquals(49, Node.DIRECT_EVAL);
1682:       assertEquals(48, Node.DIRECTIVES);
1683:       assertEquals(55, Node.INFERRED_FUNCTION);
1684:       assertEquals(4095, Node.COLUMN_MASK);
1685:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1687:       assertEquals(8, Node.FLAG_NO_THROWS);
1688:       assertEquals(39, Node.EMPTY_BLOCK);
1689:       assertEquals(53, Node.INPUT_ID);
1690:       assertEquals(40, Node.ORIGINALNAME_PROP);
1691:       assertEquals(50, Node.FREE_CALL);
1692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1693:       assertEquals(43, Node.IS_CONSTANT_NAME);
1694:       assertEquals(54, Node.SLASH_V);
1695:       assertEquals(12, Node.COLUMN_BITS);
1696:       assertEquals(30, Node.VAR_ARGS_NAME);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1699:       assertEquals(57, Node.LAST_PROP);
1700:       assertEquals(29, Node.JSDOC_INFO_PROP);
1701:       assertEquals(32, Node.INCRDECR_PROP);
1702:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1703:       assertEquals(1, Node.DECR_FLAG);
1704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1705:       assertEquals(40, Node.ORIGINALNAME_PROP);
1706:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(47, Node.IS_DISPATCHER);
1709:       assertEquals(2, Node.POST_FLAG);
1710:       assertEquals(54, Node.SLASH_V);
1711:       assertEquals(43, Node.IS_CONSTANT_NAME);
1712:       assertEquals(55, Node.INFERRED_FUNCTION);
1713:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1714:       assertEquals(4095, Node.COLUMN_MASK);
1715:       assertEquals(36, Node.QUOTED_PROP);
1716:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1717:       assertEquals(8, Node.FLAG_NO_THROWS);
1718:       assertEquals(39, Node.EMPTY_BLOCK);
1719:       assertEquals(53, Node.INPUT_ID);
1720:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1721:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1722:       assertEquals(52, Node.LENGTH);
1723:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1724:       assertEquals(57, Node.REFLECTED_OBJECT);
1725:       assertEquals(48, Node.DIRECTIVES);
1726:       assertEquals(56, Node.CHANGE_TIME);
1727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1729:       assertEquals(49, Node.DIRECT_EVAL);
1730:       assertEquals(37, Node.OPT_ARG_NAME);
1731:       assertNotSame(node0, node4);
1732:       assertNotSame(node0, node3);
1733:       assertSame(node0, node2);
1734:       assertNotSame(node2, node3);
1735:       assertSame(node2, node0);
1736:       assertNotSame(node2, node4);
1737:       assertFalse(node0.isCall());
1738:       assertFalse(node0.isVar());
1739:       assertFalse(node0.isStringKey());
1740:       assertFalse(node0.isName());
1741:       assertEquals(254, node0.getType());
1742:       assertFalse(node0.isAdd());
1743:       assertFalse(node0.isNew());
1744:       assertFalse(node0.isSetterDef());
1745:       assertEquals(37, node0.getLineno());
1746:       assertFalse(node0.isWhile());
1747:       assertEquals(0, node0.getChildCount());
1748:       assertFalse(node0.isBlock());
1749:       assertFalse(node0.isContinue());
1750:       assertFalse(node0.isParamList());
1751:       assertFalse(node0.isDebugger());
1752:       assertFalse(node0.isNumber());
1753:       assertFalse(node0.isCast());
1754:       assertEquals(155647, node0.getSourcePosition());
1755:       assertFalse(node0.isTry());
1756:       assertFalse(node0.hasOneChild());
1757:       assertFalse(node0.isFunction());
1758:       assertFalse(node0.isRegExp());
1759:       assertFalse(node0.isFor());
1760:       assertFalse(node0.isCatch());
1761:       assertFalse(node0.isWith());
1762:       assertFalse(node0.hasMoreThanOneChild());
1763:       assertFalse(node0.isIn());
1764:       assertFalse(node0.isInstanceOf());
1765:       assertFalse(node0.isInc());
1766:       assertFalse(node0.isNE());
1767:       assertFalse(node0.isIf());
1768:       assertFalse(node0.isThrow());
1769:       assertFalse(node0.isFalse());
1770:       assertFalse(node0.isBreak());
1771:       assertFalse(node0.isThis());
1772:       assertFalse(node0.isComma());
1773:       assertFalse(node0.isHook());
1774:       assertFalse(node0.isAnd());
1775:       assertFalse(node0.isObjectLit());
1776:       assertFalse(node0.isString());
1777:       assertFalse(node0.isScript());
1778:       assertFalse(node0.isCase());
1779:       assertFalse(node0.isGetProp());
1780:       assertEquals(4095, node0.getCharno());
1781:       assertFalse(node0.isSwitch());
1782:       assertFalse(node0.isGetterDef());
1783:       assertFalse(node0.isNot());
1784:       assertFalse(node0.isDelProp());
1785:       assertFalse(node0.isLabelName());
1786:       assertFalse(node0.isEmpty());
1787:       assertFalse(node0.isGetElem());
1788:       assertFalse(node0.isArrayLit());
1789:       assertFalse(node0.isExprResult());
1790:       assertFalse(node0.isTypeOf());
1791:       assertFalse(node0.isAssignAdd());
1792:       assertFalse(node0.isDefaultCase());
1793:       assertFalse(node0.isReturn());
1794:       assertFalse(node0.isAssign());
1795:       assertFalse(node0.isDec());
1796:       assertFalse(node0.isLabel());
1797:       assertFalse(node0.hasChildren());
1798:       assertFalse(node0.isDo());
1799:       assertFalse(node0.isTrue());
1800:       assertFalse(node0.isVoid());
1801:       assertFalse(node0.isOr());
1802:       assertFalse(node0.isNull());
1803:       assertFalse(node1.isNot());
1804:       assertFalse(node1.isObjectLit());
1805:       assertFalse(node1.isWith());
1806:       assertFalse(node1.isAnd());
1807:       assertFalse(node1.isScript());
1808:       assertFalse(node1.isGetProp());
1809:       assertFalse(node1.isGetElem());
1810:       assertFalse(node1.isAssign());
1811:       assertFalse(node1.isDec());
1812:       assertFalse(node1.isTypeOf());
1813:       assertFalse(node1.isHook());
1814:       assertFalse(node1.isThis());
1815:       assertFalse(node1.isComma());
1816:       assertFalse(node1.isInstanceOf());
1817:       assertFalse(node1.isExprResult());
1818:       assertFalse(node1.isBreak());
1819:       assertFalse(node1.isCase());
1820:       assertFalse(node1.isDo());
1821:       assertFalse(node1.hasMoreThanOneChild());
1822:       assertEquals(4095, node1.getCharno());
1823:       assertEquals(1, node1.getChildCount());
1824:       assertFalse(node1.isLabel());
1825:       assertFalse(node1.isAdd());
1826:       assertFalse(node1.isNew());
1827:       assertFalse(node1.isBlock());
1828:       assertFalse(node1.isOr());
1829:       assertFalse(node1.isAssignAdd());
1830:       assertFalse(node1.isStringKey());
1831:       assertFalse(node1.isLabelName());
1832:       assertFalse(node1.isNumber());
1833:       assertFalse(node1.isVar());
1834:       assertFalse(node1.isGetterDef());
1835:       assertFalse(node1.isParamList());
1836:       assertFalse(node1.isSwitch());
1837:       assertFalse(node1.isArrayLit());
1838:       assertFalse(node1.isDefaultCase());
1839:       assertFalse(node1.isRegExp());
1840:       assertFalse(node1.isTrue());
1841:       assertFalse(node1.isDebugger());
1842:       assertFalse(node1.isTry());
1843:       assertEquals(155647, node1.getSourcePosition());
1844:       assertFalse(node1.isSetterDef());
1845:       assertFalse(node1.isName());
1846:       assertFalse(node1.isFor());
1847:       assertFalse(node1.isEmpty());
1848:       assertFalse(node1.isDelProp());
1849:       assertFalse(node1.isIf());
1850:       assertFalse(node1.isNull());
1851:       assertFalse(node1.isNE());
1852:       assertTrue(node1.hasOneChild());
1853:       assertFalse(node1.isVoid());
1854:       assertTrue(node1.hasChildren());
1855:       assertFalse(node1.isCatch());
1856:       assertEquals((-2145), node1.getType());
1857:       assertFalse(node1.isCall());
1858:       assertFalse(node1.isString());
1859:       assertFalse(node1.isWhile());
1860:       assertFalse(node1.isContinue());
1861:       assertFalse(node1.isReturn());
1862:       assertFalse(node1.isIn());
1863:       assertFalse(node1.isInc());
1864:       assertFalse(node1.isFalse());
1865:       assertFalse(node1.isThrow());
1866:       assertEquals(37, node1.getLineno());
1867:       assertFalse(node1.isFunction());
1868:       assertFalse(node1.isCast());
1869:       assertFalse(node2.isNot());
1870:       assertFalse(node2.isWith());
1871:       assertFalse(node2.isObjectLit());
1872:       assertFalse(node2.isAnd());
1873:       assertFalse(node2.isGetProp());
1874:       assertFalse(node2.hasOneChild());
1875:       assertFalse(node2.isScript());
1876:       assertFalse(node2.isLabelName());
1877:       assertFalse(node2.isFalse());
1878:       assertFalse(node2.isThrow());
1879:       assertFalse(node2.isLabel());
1880:       assertFalse(node2.isContinue());
1881:       assertFalse(node2.isCast());
1882:       assertFalse(node2.isDo());
1883:       assertFalse(node2.isWhile());
1884:       assertFalse(node2.isOr());
1885:       assertFalse(node2.isAdd());
1886:       assertFalse(node2.isAssignAdd());
1887:       assertFalse(node2.isNew());
1888:       assertFalse(node2.isString());
1889:       assertFalse(node2.isAssign());
1890:       assertFalse(node2.isName());
1891:       assertFalse(node2.isGetElem());
1892:       assertFalse(node2.isBreak());
1893:       assertFalse(node2.isDelProp());
1894:       assertFalse(node2.hasChildren());
1895:       assertFalse(node2.isDec());
1896:       assertFalse(node2.isNull());
1897:       assertFalse(node2.isReturn());
1898:       assertFalse(node2.isVoid());
1899:       assertFalse(node2.isComma());
1900:       assertFalse(node2.isTypeOf());
1901:       assertFalse(node2.isExprResult());
1902:       assertFalse(node2.isCall());
1903:       assertFalse(node2.isDefaultCase());
1904:       assertFalse(node2.isTrue());
1905:       assertFalse(node2.isTry());
1906:       assertEquals(155647, node2.getSourcePosition());
1907:       assertFalse(node2.isDebugger());
1908:       assertFalse(node2.isSetterDef());
1909:       assertFalse(node2.isEmpty());
1910:       assertFalse(node2.isGetterDef());
1911:       assertFalse(node2.isVar());
1912:       assertFalse(node2.isParamList());
1913:       assertFalse(node2.isStringKey());
1914:       assertEquals(0, node2.getChildCount());
1915:       assertFalse(node2.isArrayLit());
1916:       assertEquals(37, node2.getLineno());
1917:       assertFalse(node2.isFunction());
1918:       assertFalse(node2.isCase());
1919:       assertFalse(node2.isSwitch());
1920:       assertEquals(4095, node2.getCharno());
1921:       assertFalse(node2.isNumber());
1922:       assertFalse(node2.isInc());
1923:       assertFalse(node2.isIn());
1924:       assertFalse(node2.isFor());
1925:       assertFalse(node2.isNE());
1926:       assertFalse(node2.isThis());
1927:       assertFalse(node2.isHook());
1928:       assertFalse(node2.isIf());
1929:       assertFalse(node2.isBlock());
1930:       
1931:       Node node5 = Node.newString(16, "(|");
1932:       assertFalse(node5.equals((Object)node0));
1933:       assertFalse(node5.equals((Object)node3));
1934:       assertFalse(node5.equals((Object)node4));
1935:       assertFalse(node5.equals((Object)node1));
1936:       assertFalse(node5.equals((Object)node2));
1937:       assertEquals(32, Node.INCRDECR_PROP);
1938:       assertEquals(46, Node.IS_NAMESPACE);
1939:       assertEquals(2, Node.POST_FLAG);
1940:       assertEquals(12, Node.COLUMN_BITS);
1941:       assertEquals(47, Node.IS_DISPATCHER);
1942:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1943:       assertEquals(29, Node.JSDOC_INFO_PROP);
1944:       assertEquals(57, Node.LAST_PROP);
1945:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1946:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1947:       assertEquals(1, Node.DECR_FLAG);
1948:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1949:       assertEquals(54, Node.SLASH_V);
1950:       assertEquals(30, Node.VAR_ARGS_NAME);
1951:       assertEquals(43, Node.IS_CONSTANT_NAME);
1952:       assertEquals(40, Node.ORIGINALNAME_PROP);
1953:       assertEquals(4095, Node.COLUMN_MASK);
1954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1955:       assertEquals(8, Node.FLAG_NO_THROWS);
1956:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1957:       assertEquals(50, Node.FREE_CALL);
1958:       assertEquals(55, Node.INFERRED_FUNCTION);
1959:       assertEquals(39, Node.EMPTY_BLOCK);
1960:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1961:       assertEquals(52, Node.LENGTH);
1962:       assertEquals(53, Node.INPUT_ID);
1963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1964:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1966:       assertEquals(57, Node.REFLECTED_OBJECT);
1967:       assertEquals(36, Node.QUOTED_PROP);
1968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1969:       assertEquals(49, Node.DIRECT_EVAL);
1970:       assertEquals(56, Node.CHANGE_TIME);
1971:       assertEquals(48, Node.DIRECTIVES);
1972:       assertEquals(37, Node.OPT_ARG_NAME);
1973:       assertNotSame(node5, node0);
1974:       assertNotSame(node5, node3);
1975:       assertNotSame(node5, node4);
1976:       assertNotSame(node5, node2);
1977:       
1978:       Node node6 = node5.useSourceInfoFromForTree(node2);
1979:       assertFalse(node0.equals((Object)node1));
1980:       assertFalse(node0.equals((Object)node5));
1981:       assertFalse(node0.equals((Object)node4));
1982:       assertFalse(node0.equals((Object)node3));
1983:       assertFalse(node1.equals((Object)node5));
1984:       assertFalse(node1.equals((Object)node4));
1985:       assertFalse(node1.equals((Object)node3));
1986:       assertFalse(node1.equals((Object)node0));
1987:       assertFalse(node1.equals((Object)node2));
1988:       assertFalse(node2.equals((Object)node3));
1989:       assertFalse(node2.equals((Object)node1));
1990:       assertFalse(node2.equals((Object)node4));
1991:       assertFalse(node2.equals((Object)node5));
1992:       assertFalse(node5.equals((Object)node0));
1993:       assertFalse(node5.equals((Object)node3));
1994:       assertFalse(node5.equals((Object)node4));
1995:       assertFalse(node5.equals((Object)node1));
1996:       assertFalse(node5.equals((Object)node2));
1997:       assertFalse(node6.equals((Object)node4));
1998:       assertFalse(node6.equals((Object)node3));
1999:       assertFalse(node6.equals((Object)node1));
2000:       assertFalse(node6.equals((Object)node0));
2001:       assertFalse(node6.equals((Object)node2));
2002:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2003:       assertEquals(53, Node.INPUT_ID);
2004:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2005:       assertEquals(47, Node.IS_DISPATCHER);
2006:       assertEquals(2, Node.POST_FLAG);
2007:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2008:       assertEquals(12, Node.COLUMN_BITS);
2009:       assertEquals(46, Node.IS_NAMESPACE);
2010:       assertEquals(1, Node.DECR_FLAG);
2011:       assertEquals(32, Node.INCRDECR_PROP);
2012:       assertEquals(43, Node.IS_CONSTANT_NAME);
2013:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2014:       assertEquals(54, Node.SLASH_V);
2015:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2016:       assertEquals(50, Node.FREE_CALL);
2017:       assertEquals(40, Node.ORIGINALNAME_PROP);
2018:       assertEquals(57, Node.REFLECTED_OBJECT);
2019:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2020:       assertEquals(57, Node.LAST_PROP);
2021:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2022:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2023:       assertEquals(30, Node.VAR_ARGS_NAME);
2024:       assertEquals(4095, Node.COLUMN_MASK);
2025:       assertEquals(55, Node.INFERRED_FUNCTION);
2026:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2027:       assertEquals(48, Node.DIRECTIVES);
2028:       assertEquals(37, Node.OPT_ARG_NAME);
2029:       assertEquals(49, Node.DIRECT_EVAL);
2030:       assertEquals(56, Node.CHANGE_TIME);
2031:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2032:       assertEquals(36, Node.QUOTED_PROP);
2033:       assertEquals(39, Node.EMPTY_BLOCK);
2034:       assertEquals(29, Node.JSDOC_INFO_PROP);
2035:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2036:       assertEquals(52, Node.LENGTH);
2037:       assertEquals(8, Node.FLAG_NO_THROWS);
2038:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2039:       assertEquals(46, Node.IS_NAMESPACE);
2040:       assertEquals(12, Node.COLUMN_BITS);
2041:       assertEquals(30, Node.VAR_ARGS_NAME);
2042:       assertEquals(2, Node.POST_FLAG);
2043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2044:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2045:       assertEquals(47, Node.IS_DISPATCHER);
2046:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2047:       assertEquals(57, Node.LAST_PROP);
2048:       assertEquals(1, Node.DECR_FLAG);
2049:       assertEquals(32, Node.INCRDECR_PROP);
2050:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2051:       assertEquals(57, Node.REFLECTED_OBJECT);
2052:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2053:       assertEquals(29, Node.JSDOC_INFO_PROP);
2054:       assertEquals(52, Node.LENGTH);
2055:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2056:       assertEquals(37, Node.OPT_ARG_NAME);
2057:       assertEquals(56, Node.CHANGE_TIME);
2058:       assertEquals(36, Node.QUOTED_PROP);
2059:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2060:       assertEquals(49, Node.DIRECT_EVAL);
2061:       assertEquals(48, Node.DIRECTIVES);
2062:       assertEquals(55, Node.INFERRED_FUNCTION);
2063:       assertEquals(4095, Node.COLUMN_MASK);
2064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2066:       assertEquals(8, Node.FLAG_NO_THROWS);
2067:       assertEquals(39, Node.EMPTY_BLOCK);
2068:       assertEquals(53, Node.INPUT_ID);
2069:       assertEquals(40, Node.ORIGINALNAME_PROP);
2070:       assertEquals(50, Node.FREE_CALL);
2071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2072:       assertEquals(43, Node.IS_CONSTANT_NAME);
2073:       assertEquals(54, Node.SLASH_V);
2074:       assertEquals(12, Node.COLUMN_BITS);
2075:       assertEquals(30, Node.VAR_ARGS_NAME);
2076:       assertEquals(46, Node.IS_NAMESPACE);
2077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2078:       assertEquals(57, Node.LAST_PROP);
2079:       assertEquals(29, Node.JSDOC_INFO_PROP);
2080:       assertEquals(32, Node.INCRDECR_PROP);
2081:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2082:       assertEquals(1, Node.DECR_FLAG);
2083:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2084:       assertEquals(40, Node.ORIGINALNAME_PROP);
2085:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2086:       assertEquals(50, Node.FREE_CALL);
2087:       assertEquals(47, Node.IS_DISPATCHER);
2088:       assertEquals(2, Node.POST_FLAG);
2089:       assertEquals(54, Node.SLASH_V);
2090:       assertEquals(43, Node.IS_CONSTANT_NAME);
2091:       assertEquals(55, Node.INFERRED_FUNCTION);
2092:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2093:       assertEquals(4095, Node.COLUMN_MASK);
2094:       assertEquals(36, Node.QUOTED_PROP);
2095:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2096:       assertEquals(8, Node.FLAG_NO_THROWS);
2097:       assertEquals(39, Node.EMPTY_BLOCK);
2098:       assertEquals(53, Node.INPUT_ID);
2099:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2101:       assertEquals(52, Node.LENGTH);
2102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2103:       assertEquals(57, Node.REFLECTED_OBJECT);
2104:       assertEquals(48, Node.DIRECTIVES);
2105:       assertEquals(56, Node.CHANGE_TIME);
2106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2108:       assertEquals(49, Node.DIRECT_EVAL);
2109:       assertEquals(37, Node.OPT_ARG_NAME);
2110:       assertEquals(32, Node.INCRDECR_PROP);
2111:       assertEquals(46, Node.IS_NAMESPACE);
2112:       assertEquals(2, Node.POST_FLAG);
2113:       assertEquals(12, Node.COLUMN_BITS);
2114:       assertEquals(47, Node.IS_DISPATCHER);
2115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2116:       assertEquals(29, Node.JSDOC_INFO_PROP);
2117:       assertEquals(57, Node.LAST_PROP);
2118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2120:       assertEquals(1, Node.DECR_FLAG);
2121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2122:       assertEquals(54, Node.SLASH_V);
2123:       assertEquals(30, Node.VAR_ARGS_NAME);
2124:       assertEquals(43, Node.IS_CONSTANT_NAME);
2125:       assertEquals(40, Node.ORIGINALNAME_PROP);
2126:       assertEquals(4095, Node.COLUMN_MASK);
2127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2128:       assertEquals(8, Node.FLAG_NO_THROWS);
2129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2130:       assertEquals(50, Node.FREE_CALL);
2131:       assertEquals(55, Node.INFERRED_FUNCTION);
2132:       assertEquals(39, Node.EMPTY_BLOCK);
2133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2134:       assertEquals(52, Node.LENGTH);
2135:       assertEquals(53, Node.INPUT_ID);
2136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2139:       assertEquals(57, Node.REFLECTED_OBJECT);
2140:       assertEquals(36, Node.QUOTED_PROP);
2141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2142:       assertEquals(49, Node.DIRECT_EVAL);
2143:       assertEquals(56, Node.CHANGE_TIME);
2144:       assertEquals(48, Node.DIRECTIVES);
2145:       assertEquals(37, Node.OPT_ARG_NAME);
2146:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2147:       assertEquals(39, Node.EMPTY_BLOCK);
2148:       assertEquals(50, Node.FREE_CALL);
2149:       assertEquals(8, Node.FLAG_NO_THROWS);
2150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2151:       assertEquals(55, Node.INFERRED_FUNCTION);
2152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2153:       assertEquals(43, Node.IS_CONSTANT_NAME);
2154:       assertEquals(30, Node.VAR_ARGS_NAME);
2155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2156:       assertEquals(46, Node.IS_NAMESPACE);
2157:       assertEquals(40, Node.ORIGINALNAME_PROP);
2158:       assertEquals(54, Node.SLASH_V);
2159:       assertEquals(56, Node.CHANGE_TIME);
2160:       assertEquals(2, Node.POST_FLAG);
2161:       assertEquals(37, Node.OPT_ARG_NAME);
2162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2163:       assertEquals(47, Node.IS_DISPATCHER);
2164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2165:       assertEquals(29, Node.JSDOC_INFO_PROP);
2166:       assertEquals(12, Node.COLUMN_BITS);
2167:       assertEquals(32, Node.INCRDECR_PROP);
2168:       assertEquals(1, Node.DECR_FLAG);
2169:       assertEquals(57, Node.LAST_PROP);
2170:       assertEquals(36, Node.QUOTED_PROP);
2171:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2172:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2173:       assertEquals(53, Node.INPUT_ID);
2174:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2175:       assertEquals(52, Node.LENGTH);
2176:       assertEquals(4095, Node.COLUMN_MASK);
2177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2178:       assertEquals(57, Node.REFLECTED_OBJECT);
2179:       assertEquals(48, Node.DIRECTIVES);
2180:       assertEquals(49, Node.DIRECT_EVAL);
2181:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2182:       assertNotSame(node0, node5);
2183:       assertNotSame(node0, node4);
2184:       assertNotSame(node0, node3);
2185:       assertNotSame(node0, node6);
2186:       assertSame(node0, node2);
2187:       assertNotSame(node2, node3);
2188:       assertSame(node2, node0);
2189:       assertNotSame(node2, node6);
2190:       assertNotSame(node2, node4);
2191:       assertNotSame(node2, node5);
2192:       assertNotSame(node5, node0);
2193:       assertNotSame(node5, node3);
2194:       assertNotSame(node5, node4);
2195:       assertNotSame(node5, node2);
2196:       assertSame(node5, node6);
2197:       assertNotSame(node6, node4);
2198:       assertNotSame(node6, node3);
2199:       assertSame(node6, node5);
2200:       assertNotSame(node6, node0);
2201:       assertNotSame(node6, node2);
2202:       
2203:       boolean boolean1 = node5.getBooleanProp(118);
2204:       assertFalse(node5.equals((Object)node0));
2205:       assertFalse(node5.equals((Object)node3));
2206:       assertFalse(node5.equals((Object)node4));
2207:       assertFalse(node5.equals((Object)node1));
2208:       assertFalse(node5.equals((Object)node2));
2209:       assertTrue(boolean1 == boolean0);
2210:       assertEquals(32, Node.INCRDECR_PROP);
2211:       assertEquals(46, Node.IS_NAMESPACE);
2212:       assertEquals(2, Node.POST_FLAG);
2213:       assertEquals(12, Node.COLUMN_BITS);
2214:       assertEquals(47, Node.IS_DISPATCHER);
2215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2216:       assertEquals(29, Node.JSDOC_INFO_PROP);
2217:       assertEquals(57, Node.LAST_PROP);
2218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2220:       assertEquals(1, Node.DECR_FLAG);
2221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2222:       assertEquals(54, Node.SLASH_V);
2223:       assertEquals(30, Node.VAR_ARGS_NAME);
2224:       assertEquals(43, Node.IS_CONSTANT_NAME);
2225:       assertEquals(40, Node.ORIGINALNAME_PROP);
2226:       assertEquals(4095, Node.COLUMN_MASK);
2227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2228:       assertEquals(8, Node.FLAG_NO_THROWS);
2229:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2230:       assertEquals(50, Node.FREE_CALL);
2231:       assertEquals(55, Node.INFERRED_FUNCTION);
2232:       assertEquals(39, Node.EMPTY_BLOCK);
2233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2234:       assertEquals(52, Node.LENGTH);
2235:       assertEquals(53, Node.INPUT_ID);
2236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2237:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2238:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2239:       assertEquals(57, Node.REFLECTED_OBJECT);
2240:       assertEquals(36, Node.QUOTED_PROP);
2241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2242:       assertEquals(49, Node.DIRECT_EVAL);
2243:       assertEquals(56, Node.CHANGE_TIME);
2244:       assertEquals(48, Node.DIRECTIVES);
2245:       assertEquals(37, Node.OPT_ARG_NAME);
2246:       assertFalse(boolean1);
2247:       assertNotSame(node5, node0);
2248:       assertNotSame(node5, node3);
2249:       assertNotSame(node5, node4);
2250:       assertNotSame(node5, node2);
2251:       assertSame(node5, node6);
2252:       
2253:       boolean boolean2 = node6.isTypeOf();
2254:       assertFalse(node0.equals((Object)node1));
2255:       assertFalse(node0.equals((Object)node5));
2256:       assertFalse(node0.equals((Object)node4));
2257:       assertFalse(node0.equals((Object)node3));
2258:       assertFalse(node0.equals((Object)node6));
2259:       assertFalse(node1.equals((Object)node5));
2260:       assertFalse(node1.equals((Object)node6));
2261:       assertFalse(node1.equals((Object)node4));
2262:       assertFalse(node1.equals((Object)node3));
2263:       assertFalse(node1.equals((Object)node0));
2264:       assertFalse(node1.equals((Object)node2));
2265:       assertFalse(node2.equals((Object)node3));
2266:       assertFalse(node2.equals((Object)node1));
2267:       assertFalse(node2.equals((Object)node6));
2268:       assertFalse(node2.equals((Object)node4));
2269:       assertFalse(node2.equals((Object)node5));
2270:       assertFalse(node5.equals((Object)node0));
2271:       assertFalse(node5.equals((Object)node3));
2272:       assertFalse(node5.equals((Object)node4));
2273:       assertFalse(node5.equals((Object)node1));
2274:       assertFalse(node5.equals((Object)node2));
2275:       assertFalse(node6.equals((Object)node4));
2276:       assertFalse(node6.equals((Object)node3));
2277:       assertFalse(node6.equals((Object)node1));
2278:       assertFalse(node6.equals((Object)node0));
2279:       assertFalse(node6.equals((Object)node2));
2280:       assertTrue(boolean2 == boolean1);
2281:       assertTrue(boolean2 == boolean0);
2282:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2283:       assertEquals(53, Node.INPUT_ID);
2284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2285:       assertEquals(47, Node.IS_DISPATCHER);
2286:       assertEquals(2, Node.POST_FLAG);
2287:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2288:       assertEquals(12, Node.COLUMN_BITS);
2289:       assertEquals(46, Node.IS_NAMESPACE);
2290:       assertEquals(1, Node.DECR_FLAG);
2291:       assertEquals(32, Node.INCRDECR_PROP);
2292:       assertEquals(43, Node.IS_CONSTANT_NAME);
2293:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2294:       assertEquals(54, Node.SLASH_V);
2295:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2296:       assertEquals(50, Node.FREE_CALL);
2297:       assertEquals(40, Node.ORIGINALNAME_PROP);
2298:       assertEquals(57, Node.REFLECTED_OBJECT);
2299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2300:       assertEquals(57, Node.LAST_PROP);
2301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2303:       assertEquals(30, Node.VAR_ARGS_NAME);
2304:       assertEquals(4095, Node.COLUMN_MASK);
2305:       assertEquals(55, Node.INFERRED_FUNCTION);
2306:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2307:       assertEquals(48, Node.DIRECTIVES);
2308:       assertEquals(37, Node.OPT_ARG_NAME);
2309:       assertEquals(49, Node.DIRECT_EVAL);
2310:       assertEquals(56, Node.CHANGE_TIME);
2311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2312:       assertEquals(36, Node.QUOTED_PROP);
2313:       assertEquals(39, Node.EMPTY_BLOCK);
2314:       assertEquals(29, Node.JSDOC_INFO_PROP);
2315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2316:       assertEquals(52, Node.LENGTH);
2317:       assertEquals(8, Node.FLAG_NO_THROWS);
2318:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2319:       assertEquals(46, Node.IS_NAMESPACE);
2320:       assertEquals(12, Node.COLUMN_BITS);
2321:       assertEquals(30, Node.VAR_ARGS_NAME);
2322:       assertEquals(2, Node.POST_FLAG);
2323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2324:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2325:       assertEquals(47, Node.IS_DISPATCHER);
2326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2327:       assertEquals(57, Node.LAST_PROP);
2328:       assertEquals(1, Node.DECR_FLAG);
2329:       assertEquals(32, Node.INCRDECR_PROP);
2330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2331:       assertEquals(57, Node.REFLECTED_OBJECT);
2332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2333:       assertEquals(29, Node.JSDOC_INFO_PROP);
2334:       assertEquals(52, Node.LENGTH);
2335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2336:       assertEquals(37, Node.OPT_ARG_NAME);
2337:       assertEquals(56, Node.CHANGE_TIME);
2338:       assertEquals(36, Node.QUOTED_PROP);
2339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2340:       assertEquals(49, Node.DIRECT_EVAL);
2341:       assertEquals(48, Node.DIRECTIVES);
2342:       assertEquals(55, Node.INFERRED_FUNCTION);
2343:       assertEquals(4095, Node.COLUMN_MASK);
2344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2345:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2346:       assertEquals(8, Node.FLAG_NO_THROWS);
2347:       assertEquals(39, Node.EMPTY_BLOCK);
2348:       assertEquals(53, Node.INPUT_ID);
2349:       assertEquals(40, Node.ORIGINALNAME_PROP);
2350:       assertEquals(50, Node.FREE_CALL);
2351:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2352:       assertEquals(43, Node.IS_CONSTANT_NAME);
2353:       assertEquals(54, Node.SLASH_V);
2354:       assertEquals(12, Node.COLUMN_BITS);
2355:       assertEquals(30, Node.VAR_ARGS_NAME);
2356:       assertEquals(46, Node.IS_NAMESPACE);
2357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2358:       assertEquals(57, Node.LAST_PROP);
2359:       assertEquals(29, Node.JSDOC_INFO_PROP);
2360:       assertEquals(32, Node.INCRDECR_PROP);
2361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2362:       assertEquals(1, Node.DECR_FLAG);
2363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2364:       assertEquals(40, Node.ORIGINALNAME_PROP);
2365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2366:       assertEquals(50, Node.FREE_CALL);
2367:       assertEquals(47, Node.IS_DISPATCHER);
2368:       assertEquals(2, Node.POST_FLAG);
2369:       assertEquals(54, Node.SLASH_V);
2370:       assertEquals(43, Node.IS_CONSTANT_NAME);
2371:       assertEquals(55, Node.INFERRED_FUNCTION);
2372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2373:       assertEquals(4095, Node.COLUMN_MASK);
2374:       assertEquals(36, Node.QUOTED_PROP);
2375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2376:       assertEquals(8, Node.FLAG_NO_THROWS);
2377:       assertEquals(39, Node.EMPTY_BLOCK);
2378:       assertEquals(53, Node.INPUT_ID);
2379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2381:       assertEquals(52, Node.LENGTH);
2382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2383:       assertEquals(57, Node.REFLECTED_OBJECT);
2384:       assertEquals(48, Node.DIRECTIVES);
2385:       assertEquals(56, Node.CHANGE_TIME);
2386:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2388:       assertEquals(49, Node.DIRECT_EVAL);
2389:       assertEquals(37, Node.OPT_ARG_NAME);
2390:       assertEquals(32, Node.INCRDECR_PROP);
2391:       assertEquals(46, Node.IS_NAMESPACE);
2392:       assertEquals(2, Node.POST_FLAG);
2393:       assertEquals(12, Node.COLUMN_BITS);
2394:       assertEquals(47, Node.IS_DISPATCHER);
2395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2396:       assertEquals(29, Node.JSDOC_INFO_PROP);
2397:       assertEquals(57, Node.LAST_PROP);
2398:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2400:       assertEquals(1, Node.DECR_FLAG);
2401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2402:       assertEquals(54, Node.SLASH_V);
2403:       assertEquals(30, Node.VAR_ARGS_NAME);
2404:       assertEquals(43, Node.IS_CONSTANT_NAME);
2405:       assertEquals(40, Node.ORIGINALNAME_PROP);
2406:       assertEquals(4095, Node.COLUMN_MASK);
2407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2408:       assertEquals(8, Node.FLAG_NO_THROWS);
2409:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2410:       assertEquals(50, Node.FREE_CALL);
2411:       assertEquals(55, Node.INFERRED_FUNCTION);
2412:       assertEquals(39, Node.EMPTY_BLOCK);
2413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2414:       assertEquals(52, Node.LENGTH);
2415:       assertEquals(53, Node.INPUT_ID);
2416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2419:       assertEquals(57, Node.REFLECTED_OBJECT);
2420:       assertEquals(36, Node.QUOTED_PROP);
2421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2422:       assertEquals(49, Node.DIRECT_EVAL);
2423:       assertEquals(56, Node.CHANGE_TIME);
2424:       assertEquals(48, Node.DIRECTIVES);
2425:       assertEquals(37, Node.OPT_ARG_NAME);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(39, Node.EMPTY_BLOCK);
2428:       assertEquals(50, Node.FREE_CALL);
2429:       assertEquals(8, Node.FLAG_NO_THROWS);
2430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2431:       assertEquals(55, Node.INFERRED_FUNCTION);
2432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2433:       assertEquals(43, Node.IS_CONSTANT_NAME);
2434:       assertEquals(30, Node.VAR_ARGS_NAME);
2435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2436:       assertEquals(46, Node.IS_NAMESPACE);
2437:       assertEquals(40, Node.ORIGINALNAME_PROP);
2438:       assertEquals(54, Node.SLASH_V);
2439:       assertEquals(56, Node.CHANGE_TIME);
2440:       assertEquals(2, Node.POST_FLAG);
2441:       assertEquals(37, Node.OPT_ARG_NAME);
2442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2443:       assertEquals(47, Node.IS_DISPATCHER);
2444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2445:       assertEquals(29, Node.JSDOC_INFO_PROP);
2446:       assertEquals(12, Node.COLUMN_BITS);
2447:       assertEquals(32, Node.INCRDECR_PROP);
2448:       assertEquals(1, Node.DECR_FLAG);
2449:       assertEquals(57, Node.LAST_PROP);
2450:       assertEquals(36, Node.QUOTED_PROP);
2451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2453:       assertEquals(53, Node.INPUT_ID);
2454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2455:       assertEquals(52, Node.LENGTH);
2456:       assertEquals(4095, Node.COLUMN_MASK);
2457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2458:       assertEquals(57, Node.REFLECTED_OBJECT);
2459:       assertEquals(48, Node.DIRECTIVES);
2460:       assertEquals(49, Node.DIRECT_EVAL);
2461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2462:       assertFalse(boolean2);
2463:       assertNotSame(node0, node5);
2464:       assertNotSame(node0, node4);
2465:       assertNotSame(node0, node3);
2466:       assertNotSame(node0, node6);
2467:       assertSame(node0, node2);
2468:       assertNotSame(node2, node3);
2469:       assertSame(node2, node0);
2470:       assertNotSame(node2, node6);
2471:       assertNotSame(node2, node4);
2472:       assertNotSame(node2, node5);
2473:       assertNotSame(node5, node0);
2474:       assertNotSame(node5, node3);
2475:       assertNotSame(node5, node4);
2476:       assertNotSame(node5, node2);
2477:       assertSame(node5, node6);
2478:       assertNotSame(node6, node4);
2479:       assertNotSame(node6, node3);
2480:       assertSame(node6, node5);
2481:       assertNotSame(node6, node0);
2482:       assertNotSame(node6, node2);
2483:       
2484:       Node node7 = Node.newString("h!2n*fI,O3C", 147, 30);
2485:       assertFalse(node7.equals((Object)node4));
2486:       assertFalse(node7.equals((Object)node0));
2487:       assertFalse(node7.equals((Object)node1));
2488:       assertFalse(node7.equals((Object)node2));
2489:       assertFalse(node7.equals((Object)node3));
2490:       assertFalse(node7.equals((Object)node6));
2491:       assertFalse(node7.equals((Object)node5));
2492:       assertEquals(54, Node.SLASH_V);
2493:       assertEquals(52, Node.LENGTH);
2494:       assertEquals(57, Node.REFLECTED_OBJECT);
2495:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2496:       assertEquals(50, Node.FREE_CALL);
2497:       assertEquals(1, Node.DECR_FLAG);
2498:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2499:       assertEquals(57, Node.LAST_PROP);
2500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2501:       assertEquals(39, Node.EMPTY_BLOCK);
2502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2503:       assertEquals(2, Node.POST_FLAG);
2504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2505:       assertEquals(46, Node.IS_NAMESPACE);
2506:       assertEquals(47, Node.IS_DISPATCHER);
2507:       assertEquals(30, Node.VAR_ARGS_NAME);
2508:       assertEquals(40, Node.ORIGINALNAME_PROP);
2509:       assertEquals(53, Node.INPUT_ID);
2510:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2511:       assertEquals(43, Node.IS_CONSTANT_NAME);
2512:       assertEquals(36, Node.QUOTED_PROP);
2513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2514:       assertEquals(29, Node.JSDOC_INFO_PROP);
2515:       assertEquals(55, Node.INFERRED_FUNCTION);
2516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2518:       assertEquals(48, Node.DIRECTIVES);
2519:       assertEquals(32, Node.INCRDECR_PROP);
2520:       assertEquals(8, Node.FLAG_NO_THROWS);
2521:       assertEquals(12, Node.COLUMN_BITS);
2522:       assertEquals(56, Node.CHANGE_TIME);
2523:       assertEquals(49, Node.DIRECT_EVAL);
2524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2525:       assertEquals(4095, Node.COLUMN_MASK);
2526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2527:       assertEquals(37, Node.OPT_ARG_NAME);
2528:       assertNotSame(node7, node4);
2529:       assertNotSame(node7, node0);
2530:       assertNotSame(node7, node2);
2531:       assertNotSame(node7, node3);
2532:       assertNotSame(node7, node6);
2533:       assertNotSame(node7, node5);
2534:       
2535:       // Undeclared exception!
2536:       try { 
2537:         node5.clonePropsFrom(node7);
2538:         fail("Expecting exception: IllegalStateException");
2539:       
2540:       } catch(IllegalStateException e) {
2541:          //
2542:          // Node has existing properties.
2543:          //
2544:          verifyException("com.google.common.base.Preconditions", e);
2545:       }
2546:   }
2547: }
RegularFileObject[/tmp/EvoSuite_130_1629223377139/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:57 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_130_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:58.031 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4095, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isVoid());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4095, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isVoid());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isString());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertEquals(254, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());

node0.detachChildren();
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertSame(node0, node2);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());

int int0 = node1.getLength();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, int0);
assertSame(node0, node2);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4095, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isVoid());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());

boolean boolean0 = node2.getBooleanProp(9);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(boolean0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4095, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isVoid());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isString());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertEquals(254, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());

Node node3 = Node.newString("^T bi6mc\"24m1h|@{G");
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isExprResult());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isAssign());
assertFalse(node3.isDo());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isParamList());
assertFalse(node3.isAnd());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals(40, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isNE());
assertFalse(node3.isIf());

Node node4 = Node.newString(38, "^T bi6mc\"24m1h|@{G", 15, 1679);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node4, node3);
assertNotSame(node4, node0);
assertNotSame(node4, node2);
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.isDec());
assertFalse(node4.isNumber());
assertFalse(node4.isTypeOf());
assertFalse(node4.isCast());
assertEquals(15, node4.getLineno());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.hasOneChild());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isExprResult());
assertFalse(node4.isOr());
assertTrue(node4.isName());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals(63119, node4.getSourcePosition());
assertFalse(node4.isComma());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAnd());
assertFalse(node4.isFor());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isTry());
assertFalse(node4.isFunction());
assertEquals(1679, node4.getCharno());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isIn());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isNull());
assertFalse(node4.isNE());
assertFalse(node4.isStringKey());
assertFalse(node4.isAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isThis());
assertFalse(node4.isNew());
assertFalse(node4.isHook());
assertFalse(node4.isVar());
assertFalse(node4.isCase());
assertEquals(38, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isScript());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("?0JftnD;'", false);
assertEquals("?0JftnD;'", simpleSourceFile0.getName());
assertEquals("?0JftnD;'", simpleSourceFile0.toString());
assertFalse(simpleSourceFile0.isExtern());

int int1 = Node.CHANGE_TIME;
assertFalse(int1 == int0);
assertEquals(56, int1);

node2.setStaticSourceFile(simpleSourceFile0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node0, node4);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertNotSame(node2, node4);
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(254, node0.getType());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isWhile());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertEquals(155647, node0.getSourcePosition());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4095, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isVoid());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertEquals((-2145), node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isString());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertEquals(155647, node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals(4095, node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());

Node node5 = Node.newString(16, "(|");
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertNotSame(node5, node2);

Node node6 = node5.useSourceInfoFromForTree(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotSame(node0, node5);
assertNotSame(node0, node4);
assertNotSame(node0, node3);
assertNotSame(node0, node6);
assertSame(node0, node2);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertNotSame(node2, node6);
assertNotSame(node2, node4);
assertNotSame(node2, node5);
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertNotSame(node5, node2);
assertSame(node5, node6);
assertNotSame(node6, node4);
assertNotSame(node6, node3);
assertSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node2);

boolean boolean1 = node5.getBooleanProp(118);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(boolean1);
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertNotSame(node5, node2);
assertSame(node5, node6);

boolean boolean2 = node6.isTypeOf();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(boolean2);
assertNotSame(node0, node5);
assertNotSame(node0, node4);
assertNotSame(node0, node3);
assertNotSame(node0, node6);
assertSame(node0, node2);
assertNotSame(node2, node3);
assertSame(node2, node0);
assertNotSame(node2, node6);
assertNotSame(node2, node4);
assertNotSame(node2, node5);
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertNotSame(node5, node2);
assertSame(node5, node6);
assertNotSame(node6, node4);
assertNotSame(node6, node3);
assertSame(node6, node5);
assertNotSame(node6, node0);
assertNotSame(node6, node2);

Node node7 = Node.newString("h!2n*fI,O3C", 147, 30);
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node1));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node3));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node5));
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node7, node4);
assertNotSame(node7, node0);
assertNotSame(node7, node2);
assertNotSame(node7, node3);
assertNotSame(node7, node6);
assertNotSame(node7, node5);

node5.clonePropsFrom(node7);

[MASTER] 18:02:59.217 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_133_1629223378576/com/google/javascript/rhino/Node_133_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_133_1629223378576/com/google/javascript/rhino/Node_133_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:59.217 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:59.217 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:59.218 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 161
[MASTER] 18:02:59.219 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_133_1629223378576/com/google/javascript/rhino/Node_133_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_133_tmp__ESTest extends Node_133_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(254, "(|");
21:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
22:       assertEquals(39, Node.EMPTY_BLOCK);
23:       assertEquals(48, Node.DIRECTIVES);
24:       assertEquals(40, Node.ORIGINALNAME_PROP);
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(4095, Node.COLUMN_MASK);
27:       assertEquals(53, Node.INPUT_ID);
28:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
29:       assertEquals(15, Node.NO_SIDE_EFFECTS);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
33:       assertEquals(55, Node.INFERRED_FUNCTION);
34:       assertEquals(29, Node.JSDOC_INFO_PROP);
35:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
36:       assertEquals(36, Node.QUOTED_PROP);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(46, Node.IS_NAMESPACE);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(12, Node.COLUMN_BITS);
46:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
47:       assertEquals(47, Node.IS_DISPATCHER);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(30, Node.VAR_ARGS_NAME);
50:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
51:       assertEquals(54, Node.SLASH_V);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertFalse(node0.isIn());
58:       assertFalse(node0.isCase());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isGetProp());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isFalse());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isCast());
75:       assertEquals((-1), node0.getSourcePosition());
76:       assertFalse(node0.isString());
77:       assertFalse(node0.isNot());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isDebugger());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.isWhile());
89:       assertFalse(node0.isAssign());
90:       assertFalse(node0.isTypeOf());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isLabel());
93:       assertFalse(node0.isBlock());
94:       assertFalse(node0.isReturn());
95:       assertEquals(254, node0.getType());
96:       assertFalse(node0.isExprResult());
97:       assertFalse(node0.isCall());
98:       assertFalse(node0.isNew());
99:       assertFalse(node0.isAdd());
100:       assertFalse(node0.isGetElem());
101:       assertFalse(node0.isName());
102:       assertFalse(node0.isNull());
103:       assertEquals(0, node0.getChildCount());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isCatch());
106:       assertFalse(node0.isRegExp());
107:       assertFalse(node0.isWith());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isVar());
110:       assertFalse(node0.isThis());
111:       assertFalse(node0.isHook());
112:       assertFalse(node0.hasOneChild());
113:       assertFalse(node0.isTry());
114:       assertFalse(node0.isScript());
115:       assertFalse(node0.isArrayLit());
116:       assertFalse(node0.isGetterDef());
117:       assertFalse(node0.isLabelName());
118:       assertFalse(node0.isSwitch());
119:       assertFalse(node0.isNumber());
120:       assertEquals((-1), node0.getCharno());
121:       assertFalse(node0.isParamList());
122:       assertFalse(node0.isStringKey());
123:       
124:       Iterable<Node> iterable0 = node0.children();
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       assertEquals(39, Node.EMPTY_BLOCK);
127:       assertEquals(48, Node.DIRECTIVES);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(55, Node.INFERRED_FUNCTION);
138:       assertEquals(29, Node.JSDOC_INFO_PROP);
139:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(8, Node.FLAG_NO_THROWS);
144:       assertEquals(46, Node.IS_NAMESPACE);
145:       assertEquals(56, Node.CHANGE_TIME);
146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(32, Node.INCRDECR_PROP);
149:       assertEquals(12, Node.COLUMN_BITS);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(2, Node.POST_FLAG);
153:       assertEquals(30, Node.VAR_ARGS_NAME);
154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
155:       assertEquals(54, Node.SLASH_V);
156:       assertEquals(43, Node.IS_CONSTANT_NAME);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(1, Node.DECR_FLAG);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertFalse(iterable0.contains(node0));
162:       assertFalse(node0.isIn());
163:       assertFalse(node0.isCase());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isVoid());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isDelProp());
171:       assertFalse(node0.isNE());
172:       assertFalse(node0.isTrue());
173:       assertFalse(node0.isGetProp());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isFunction());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isComma());
179:       assertFalse(node0.isCast());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isNot());
183:       assertFalse(node0.isAnd());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isDebugger());
186:       assertEquals((-1), node0.getLineno());
187:       assertFalse(node0.isOr());
188:       assertFalse(node0.isAssignAdd());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isDec());
193:       assertFalse(node0.isWhile());
194:       assertFalse(node0.isAssign());
195:       assertFalse(node0.isTypeOf());
196:       assertFalse(node0.isDo());
197:       assertFalse(node0.isLabel());
198:       assertFalse(node0.isBlock());
199:       assertFalse(node0.isReturn());
200:       assertEquals(254, node0.getType());
201:       assertFalse(node0.isExprResult());
202:       assertFalse(node0.isCall());
203:       assertFalse(node0.isNew());
204:       assertFalse(node0.isAdd());
205:       assertFalse(node0.isGetElem());
206:       assertFalse(node0.isName());
207:       assertFalse(node0.isNull());
208:       assertEquals(0, node0.getChildCount());
209:       assertFalse(node0.isInstanceOf());
210:       assertFalse(node0.isCatch());
211:       assertFalse(node0.isRegExp());
212:       assertFalse(node0.isWith());
213:       assertFalse(node0.isDefaultCase());
214:       assertFalse(node0.isVar());
215:       assertFalse(node0.isThis());
216:       assertFalse(node0.isHook());
217:       assertFalse(node0.hasOneChild());
218:       assertFalse(node0.isTry());
219:       assertFalse(node0.isScript());
220:       assertFalse(node0.isArrayLit());
221:       assertFalse(node0.isGetterDef());
222:       assertFalse(node0.isLabelName());
223:       assertFalse(node0.isSwitch());
224:       assertFalse(node0.isNumber());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isParamList());
227:       assertFalse(node0.isStringKey());
228:       
229:       Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
230:       assertFalse(node1.equals((Object)node0));
231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
232:       assertEquals(39, Node.EMPTY_BLOCK);
233:       assertEquals(48, Node.DIRECTIVES);
234:       assertEquals(40, Node.ORIGINALNAME_PROP);
235:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
236:       assertEquals(4095, Node.COLUMN_MASK);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
239:       assertEquals(15, Node.NO_SIDE_EFFECTS);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(49, Node.DIRECT_EVAL);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(55, Node.INFERRED_FUNCTION);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
246:       assertEquals(36, Node.QUOTED_PROP);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(52, Node.LENGTH);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(46, Node.IS_NAMESPACE);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
253:       assertEquals(37, Node.OPT_ARG_NAME);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(12, Node.COLUMN_BITS);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(2, Node.POST_FLAG);
259:       assertEquals(30, Node.VAR_ARGS_NAME);
260:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
261:       assertEquals(54, Node.SLASH_V);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(1, Node.DECR_FLAG);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(12, Node.COLUMN_BITS);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(49, Node.DIRECT_EVAL);
270:       assertEquals(37, Node.OPT_ARG_NAME);
271:       assertEquals(32, Node.INCRDECR_PROP);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(2, Node.POST_FLAG);
274:       assertEquals(57, Node.LAST_PROP);
275:       assertEquals(47, Node.IS_DISPATCHER);
276:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
277:       assertEquals(30, Node.VAR_ARGS_NAME);
278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
279:       assertEquals(57, Node.REFLECTED_OBJECT);
280:       assertEquals(29, Node.JSDOC_INFO_PROP);
281:       assertEquals(53, Node.INPUT_ID);
282:       assertEquals(36, Node.QUOTED_PROP);
283:       assertEquals(15, Node.NO_SIDE_EFFECTS);
284:       assertEquals(8, Node.FLAG_NO_THROWS);
285:       assertEquals(39, Node.EMPTY_BLOCK);
286:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
287:       assertEquals(56, Node.CHANGE_TIME);
288:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
289:       assertEquals(52, Node.LENGTH);
290:       assertEquals(4095, Node.COLUMN_MASK);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(55, Node.INFERRED_FUNCTION);
293:       assertEquals(48, Node.DIRECTIVES);
294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(40, Node.ORIGINALNAME_PROP);
297:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
298:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
299:       assertEquals(54, Node.SLASH_V);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
303:       assertFalse(node0.isIn());
304:       assertFalse(node0.isCase());
305:       assertFalse(node0.isFor());
306:       assertFalse(node0.isVoid());
307:       assertFalse(node0.isEmpty());
308:       assertFalse(node0.isInc());
309:       assertFalse(node0.isBreak());
310:       assertFalse(node0.isIf());
311:       assertFalse(node0.isDelProp());
312:       assertFalse(node0.isNE());
313:       assertFalse(node0.isTrue());
314:       assertFalse(node0.isGetProp());
315:       assertFalse(node0.isSetterDef());
316:       assertFalse(node0.isFunction());
317:       assertFalse(node0.isFalse());
318:       assertFalse(node0.isThrow());
319:       assertFalse(node0.isComma());
320:       assertFalse(node0.isCast());
321:       assertEquals((-1), node0.getSourcePosition());
322:       assertFalse(node0.isString());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isAnd());
325:       assertFalse(node0.isObjectLit());
326:       assertFalse(node0.isDebugger());
327:       assertEquals((-1), node0.getLineno());
328:       assertFalse(node0.isOr());
329:       assertFalse(node0.isAssignAdd());
330:       assertFalse(node0.hasMoreThanOneChild());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.hasChildren());
333:       assertFalse(node0.isDec());
334:       assertFalse(node0.isWhile());
335:       assertFalse(node0.isAssign());
336:       assertFalse(node0.isTypeOf());
337:       assertFalse(node0.isDo());
338:       assertFalse(node0.isLabel());
339:       assertFalse(node0.isBlock());
340:       assertFalse(node0.isReturn());
341:       assertEquals(254, node0.getType());
342:       assertFalse(node0.isExprResult());
343:       assertFalse(node0.isCall());
344:       assertFalse(node0.isNew());
345:       assertFalse(node0.isAdd());
346:       assertFalse(node0.isGetElem());
347:       assertFalse(node0.isName());
348:       assertFalse(node0.isNull());
349:       assertEquals(0, node0.getChildCount());
350:       assertFalse(node0.isInstanceOf());
351:       assertFalse(node0.isCatch());
352:       assertFalse(node0.isRegExp());
353:       assertFalse(node0.isWith());
354:       assertFalse(node0.isDefaultCase());
355:       assertFalse(node0.isVar());
356:       assertFalse(node0.isThis());
357:       assertFalse(node0.isHook());
358:       assertFalse(node0.hasOneChild());
359:       assertFalse(node0.isTry());
360:       assertFalse(node0.isScript());
361:       assertFalse(node0.isArrayLit());
362:       assertFalse(node0.isGetterDef());
363:       assertFalse(node0.isLabelName());
364:       assertFalse(node0.isSwitch());
365:       assertFalse(node0.isNumber());
366:       assertEquals((-1), node0.getCharno());
367:       assertFalse(node0.isParamList());
368:       assertFalse(node0.isStringKey());
369:       assertFalse(node1.isAnd());
370:       assertFalse(node1.isWith());
371:       assertFalse(node1.isNot());
372:       assertFalse(node1.isObjectLit());
373:       assertFalse(node1.isInstanceOf());
374:       assertFalse(node1.isScript());
375:       assertFalse(node1.isExprResult());
376:       assertFalse(node1.isGetProp());
377:       assertFalse(node1.isComma());
378:       assertFalse(node1.isThis());
379:       assertFalse(node1.isGetElem());
380:       assertFalse(node1.isThrow());
381:       assertFalse(node1.isAssign());
382:       assertFalse(node1.isBreak());
383:       assertFalse(node1.isOr());
384:       assertFalse(node1.isCase());
385:       assertFalse(node1.isDo());
386:       assertFalse(node1.hasMoreThanOneChild());
387:       assertTrue(node1.hasChildren());
388:       assertFalse(node1.isNew());
389:       assertFalse(node1.isLabel());
390:       assertFalse(node1.isAssignAdd());
391:       assertFalse(node1.isHook());
392:       assertEquals(1, node1.getChildCount());
393:       assertFalse(node1.isVar());
394:       assertFalse(node1.isBlock());
395:       assertFalse(node1.isFor());
396:       assertFalse(node1.isStringKey());
397:       assertFalse(node1.isLabelName());
398:       assertFalse(node1.isGetterDef());
399:       assertFalse(node1.isNumber());
400:       assertFalse(node1.isArrayLit());
401:       assertFalse(node1.isParamList());
402:       assertFalse(node1.isSwitch());
403:       assertEquals(4095, node1.getCharno());
404:       assertFalse(node1.isCatch());
405:       assertEquals(155647, node1.getSourcePosition());
406:       assertFalse(node1.isRegExp());
407:       assertFalse(node1.isTry());
408:       assertFalse(node1.isFunction());
409:       assertFalse(node1.isDefaultCase());
410:       assertFalse(node1.isDelProp());
411:       assertFalse(node1.isName());
412:       assertFalse(node1.isSetterDef());
413:       assertFalse(node1.isAdd());
414:       assertEquals((-2145), node1.getType());
415:       assertFalse(node1.isEmpty());
416:       assertFalse(node1.isCall());
417:       assertFalse(node1.isVoid());
418:       assertFalse(node1.isIf());
419:       assertFalse(node1.isNE());
420:       assertFalse(node1.isNull());
421:       assertFalse(node1.isTrue());
422:       assertFalse(node1.isContinue());
423:       assertFalse(node1.isIn());
424:       assertFalse(node1.isString());
425:       assertFalse(node1.isInc());
426:       assertFalse(node1.isTypeOf());
427:       assertFalse(node1.isDec());
428:       assertFalse(node1.isWhile());
429:       assertTrue(node1.hasOneChild());
430:       assertFalse(node1.isReturn());
431:       assertFalse(node1.isFalse());
432:       assertEquals(37, node1.getLineno());
433:       assertFalse(node1.isCast());
434:       assertFalse(node1.isDebugger());
435:       
436:       Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
437:       assertFalse(node2.equals((Object)node0));
438:       assertFalse(node2.equals((Object)node1));
439:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
440:       assertEquals(43, Node.IS_CONSTANT_NAME);
441:       assertEquals(2, Node.POST_FLAG);
442:       assertEquals(37, Node.OPT_ARG_NAME);
443:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
444:       assertEquals(4095, Node.COLUMN_MASK);
445:       assertEquals(48, Node.DIRECTIVES);
446:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
447:       assertEquals(56, Node.CHANGE_TIME);
448:       assertEquals(47, Node.IS_DISPATCHER);
449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
450:       assertEquals(57, Node.LAST_PROP);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(55, Node.INFERRED_FUNCTION);
453:       assertEquals(8, Node.FLAG_NO_THROWS);
454:       assertEquals(39, Node.EMPTY_BLOCK);
455:       assertEquals(15, Node.NO_SIDE_EFFECTS);
456:       assertEquals(29, Node.JSDOC_INFO_PROP);
457:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
458:       assertEquals(53, Node.INPUT_ID);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
461:       assertEquals(57, Node.REFLECTED_OBJECT);
462:       assertEquals(54, Node.SLASH_V);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(40, Node.ORIGINALNAME_PROP);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
468:       assertEquals(32, Node.INCRDECR_PROP);
469:       assertEquals(12, Node.COLUMN_BITS);
470:       assertEquals(46, Node.IS_NAMESPACE);
471:       assertEquals(1, Node.DECR_FLAG);
472:       assertEquals(50, Node.FREE_CALL);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
475:       assertNotSame(node2, node0);
476:       assertFalse(node2.isHook());
477:       assertFalse(node2.isThrow());
478:       assertFalse(node2.isSwitch());
479:       assertFalse(node2.isComma());
480:       assertFalse(node2.isBreak());
481:       assertFalse(node2.isThis());
482:       assertFalse(node2.isFalse());
483:       assertFalse(node2.isInstanceOf());
484:       assertFalse(node2.isNE());
485:       assertFalse(node2.isInc());
486:       assertFalse(node2.isEmpty());
487:       assertFalse(node2.isIn());
488:       assertFalse(node2.isCast());
489:       assertFalse(node2.isGetElem());
490:       assertFalse(node2.isVoid());
491:       assertFalse(node2.isDelProp());
492:       assertFalse(node2.isTypeOf());
493:       assertFalse(node2.isDec());
494:       assertFalse(node2.isExprResult());
495:       assertFalse(node2.hasChildren());
496:       assertFalse(node2.isAssign());
497:       assertFalse(node2.isFunction());
498:       assertFalse(node2.isReturn());
499:       assertFalse(node2.isWhile());
500:       assertFalse(node2.isAnd());
501:       assertEquals((-1), node2.getSourcePosition());
502:       assertFalse(node2.isDebugger());
503:       assertFalse(node2.isGetProp());
504:       assertFalse(node2.isNot());
505:       assertFalse(node2.isObjectLit());
506:       assertFalse(node2.isVar());
507:       assertFalse(node2.isCall());
508:       assertFalse(node2.isBlock());
509:       assertFalse(node2.isName());
510:       assertTrue(node2.isString());
511:       assertFalse(node2.isNew());
512:       assertFalse(node2.isStringKey());
513:       assertFalse(node2.isContinue());
514:       assertFalse(node2.hasMoreThanOneChild());
515:       assertEquals(0, node2.getChildCount());
516:       assertFalse(node2.isCatch());
517:       assertFalse(node2.isAssignAdd());
518:       assertEquals(40, node2.getType());
519:       assertEquals((-1), node2.getLineno());
520:       assertFalse(node2.isDo());
521:       assertFalse(node2.isDefaultCase());
522:       assertFalse(node2.isNull());
523:       assertFalse(node2.isTrue());
524:       assertFalse(node2.isSetterDef());
525:       assertFalse(node2.isAdd());
526:       assertFalse(node2.isOr());
527:       assertFalse(node2.isArrayLit());
528:       assertFalse(node2.hasOneChild());
529:       assertFalse(node2.isLabelName());
530:       assertFalse(node2.isTry());
531:       assertFalse(node2.isFor());
532:       assertFalse(node2.isIf());
533:       assertFalse(node2.isRegExp());
534:       assertFalse(node2.isLabel());
535:       assertFalse(node2.isWith());
536:       assertFalse(node2.isCase());
537:       assertFalse(node2.isParamList());
538:       assertFalse(node2.isScript());
539:       assertEquals((-1), node2.getCharno());
540:       assertFalse(node2.isGetterDef());
541:       assertFalse(node2.isNumber());
542:       
543:       String string0 = node2.toStringTree();
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node2.equals((Object)node1));
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(43, Node.IS_CONSTANT_NAME);
548:       assertEquals(2, Node.POST_FLAG);
549:       assertEquals(37, Node.OPT_ARG_NAME);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       assertEquals(56, Node.CHANGE_TIME);
555:       assertEquals(47, Node.IS_DISPATCHER);
556:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
557:       assertEquals(57, Node.LAST_PROP);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(29, Node.JSDOC_INFO_PROP);
564:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
565:       assertEquals(53, Node.INPUT_ID);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(57, Node.REFLECTED_OBJECT);
569:       assertEquals(54, Node.SLASH_V);
570:       assertEquals(30, Node.VAR_ARGS_NAME);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(40, Node.ORIGINALNAME_PROP);
573:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
575:       assertEquals(32, Node.INCRDECR_PROP);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
582:       assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
583:       assertNotSame(node2, node0);
584:       assertFalse(node2.isHook());
585:       assertFalse(node2.isThrow());
586:       assertFalse(node2.isSwitch());
587:       assertFalse(node2.isComma());
588:       assertFalse(node2.isBreak());
589:       assertFalse(node2.isThis());
590:       assertFalse(node2.isFalse());
591:       assertFalse(node2.isInstanceOf());
592:       assertFalse(node2.isNE());
593:       assertFalse(node2.isInc());
594:       assertFalse(node2.isEmpty());
595:       assertFalse(node2.isIn());
596:       assertFalse(node2.isCast());
597:       assertFalse(node2.isGetElem());
598:       assertFalse(node2.isVoid());
599:       assertFalse(node2.isDelProp());
600:       assertFalse(node2.isTypeOf());
601:       assertFalse(node2.isDec());
602:       assertFalse(node2.isExprResult());
603:       assertFalse(node2.hasChildren());
604:       assertFalse(node2.isAssign());
605:       assertFalse(node2.isFunction());
606:       assertFalse(node2.isReturn());
607:       assertFalse(node2.isWhile());
608:       assertFalse(node2.isAnd());
609:       assertEquals((-1), node2.getSourcePosition());
610:       assertFalse(node2.isDebugger());
611:       assertFalse(node2.isGetProp());
612:       assertFalse(node2.isNot());
613:       assertFalse(node2.isObjectLit());
614:       assertFalse(node2.isVar());
615:       assertFalse(node2.isCall());
616:       assertFalse(node2.isBlock());
617:       assertFalse(node2.isName());
618:       assertTrue(node2.isString());
619:       assertFalse(node2.isNew());
620:       assertFalse(node2.isStringKey());
621:       assertFalse(node2.isContinue());
622:       assertFalse(node2.hasMoreThanOneChild());
623:       assertEquals(0, node2.getChildCount());
624:       assertFalse(node2.isCatch());
625:       assertFalse(node2.isAssignAdd());
626:       assertEquals(40, node2.getType());
627:       assertEquals((-1), node2.getLineno());
628:       assertFalse(node2.isDo());
629:       assertFalse(node2.isDefaultCase());
630:       assertFalse(node2.isNull());
631:       assertFalse(node2.isTrue());
632:       assertFalse(node2.isSetterDef());
633:       assertFalse(node2.isAdd());
634:       assertFalse(node2.isOr());
635:       assertFalse(node2.isArrayLit());
636:       assertFalse(node2.hasOneChild());
637:       assertFalse(node2.isLabelName());
638:       assertFalse(node2.isTry());
639:       assertFalse(node2.isFor());
640:       assertFalse(node2.isIf());
641:       
642:       int int0 = node1.getIntProp(254);
643:       assertFalse(node0.equals((Object)node2));
644:       assertFalse(node0.equals((Object)node1));
645:       assertFalse(node1.equals((Object)node0));
646:       assertFalse(node1.equals((Object)node2));
647:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
648:       assertEquals(39, Node.EMPTY_BLOCK);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(40, Node.ORIGINALNAME_PROP);
651:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
652:       assertEquals(4095, Node.COLUMN_MASK);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
656:       assertEquals(57, Node.LAST_PROP);
657:       assertEquals(49, Node.DIRECT_EVAL);
658:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
659:       assertEquals(55, Node.INFERRED_FUNCTION);
660:       assertEquals(29, Node.JSDOC_INFO_PROP);
661:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(52, Node.LENGTH);
665:       assertEquals(8, Node.FLAG_NO_THROWS);
666:       assertEquals(46, Node.IS_NAMESPACE);
667:       assertEquals(56, Node.CHANGE_TIME);
668:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
669:       assertEquals(37, Node.OPT_ARG_NAME);
670:       assertEquals(32, Node.INCRDECR_PROP);
671:       assertEquals(12, Node.COLUMN_BITS);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
677:       assertEquals(54, Node.SLASH_V);
678:       assertEquals(43, Node.IS_CONSTANT_NAME);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(1, Node.DECR_FLAG);
681:       assertEquals(51, Node.STATIC_SOURCE_FILE);
682:       assertEquals(50, Node.FREE_CALL);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(46, Node.IS_NAMESPACE);
685:       assertEquals(49, Node.DIRECT_EVAL);
686:       assertEquals(37, Node.OPT_ARG_NAME);
687:       assertEquals(32, Node.INCRDECR_PROP);
688:       assertEquals(1, Node.DECR_FLAG);
689:       assertEquals(2, Node.POST_FLAG);
690:       assertEquals(57, Node.LAST_PROP);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
693:       assertEquals(30, Node.VAR_ARGS_NAME);
694:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
695:       assertEquals(57, Node.REFLECTED_OBJECT);
696:       assertEquals(29, Node.JSDOC_INFO_PROP);
697:       assertEquals(53, Node.INPUT_ID);
698:       assertEquals(36, Node.QUOTED_PROP);
699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
700:       assertEquals(8, Node.FLAG_NO_THROWS);
701:       assertEquals(39, Node.EMPTY_BLOCK);
702:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
703:       assertEquals(56, Node.CHANGE_TIME);
704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
705:       assertEquals(52, Node.LENGTH);
706:       assertEquals(4095, Node.COLUMN_MASK);
707:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
708:       assertEquals(55, Node.INFERRED_FUNCTION);
709:       assertEquals(48, Node.DIRECTIVES);
710:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(40, Node.ORIGINALNAME_PROP);
713:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
714:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
715:       assertEquals(54, Node.SLASH_V);
716:       assertEquals(43, Node.IS_CONSTANT_NAME);
717:       assertEquals(50, Node.FREE_CALL);
718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
719:       assertEquals(0, int0);
720:       assertNotSame(node0, node2);
721:       
722:       boolean boolean0 = node1.isEquivalentToShallow(node0);
723:       assertFalse(node0.equals((Object)node2));
724:       assertFalse(node0.equals((Object)node1));
725:       assertFalse(node1.equals((Object)node0));
726:       assertFalse(node1.equals((Object)node2));
727:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
728:       assertEquals(39, Node.EMPTY_BLOCK);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(40, Node.ORIGINALNAME_PROP);
731:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
732:       assertEquals(4095, Node.COLUMN_MASK);
733:       assertEquals(53, Node.INPUT_ID);
734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
735:       assertEquals(15, Node.NO_SIDE_EFFECTS);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(49, Node.DIRECT_EVAL);
738:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
739:       assertEquals(55, Node.INFERRED_FUNCTION);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(57, Node.REFLECTED_OBJECT);
744:       assertEquals(52, Node.LENGTH);
745:       assertEquals(8, Node.FLAG_NO_THROWS);
746:       assertEquals(46, Node.IS_NAMESPACE);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
749:       assertEquals(37, Node.OPT_ARG_NAME);
750:       assertEquals(32, Node.INCRDECR_PROP);
751:       assertEquals(12, Node.COLUMN_BITS);
752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
753:       assertEquals(47, Node.IS_DISPATCHER);
754:       assertEquals(2, Node.POST_FLAG);
755:       assertEquals(30, Node.VAR_ARGS_NAME);
756:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
757:       assertEquals(54, Node.SLASH_V);
758:       assertEquals(43, Node.IS_CONSTANT_NAME);
759:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
760:       assertEquals(1, Node.DECR_FLAG);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(50, Node.FREE_CALL);
763:       assertEquals(12, Node.COLUMN_BITS);
764:       assertEquals(46, Node.IS_NAMESPACE);
765:       assertEquals(49, Node.DIRECT_EVAL);
766:       assertEquals(37, Node.OPT_ARG_NAME);
767:       assertEquals(32, Node.INCRDECR_PROP);
768:       assertEquals(1, Node.DECR_FLAG);
769:       assertEquals(2, Node.POST_FLAG);
770:       assertEquals(57, Node.LAST_PROP);
771:       assertEquals(47, Node.IS_DISPATCHER);
772:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
773:       assertEquals(30, Node.VAR_ARGS_NAME);
774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
775:       assertEquals(57, Node.REFLECTED_OBJECT);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(53, Node.INPUT_ID);
778:       assertEquals(36, Node.QUOTED_PROP);
779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
780:       assertEquals(8, Node.FLAG_NO_THROWS);
781:       assertEquals(39, Node.EMPTY_BLOCK);
782:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
783:       assertEquals(56, Node.CHANGE_TIME);
784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
785:       assertEquals(52, Node.LENGTH);
786:       assertEquals(4095, Node.COLUMN_MASK);
787:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
788:       assertEquals(55, Node.INFERRED_FUNCTION);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
792:       assertEquals(40, Node.ORIGINALNAME_PROP);
793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(54, Node.SLASH_V);
796:       assertEquals(43, Node.IS_CONSTANT_NAME);
797:       assertEquals(50, Node.FREE_CALL);
798:       assertEquals(51, Node.STATIC_SOURCE_FILE);
799:       assertFalse(boolean0);
800:       assertNotSame(node0, node2);
801:       
802:       Node node3 = new Node(516, 48, 38);
803:       assertFalse(node3.equals((Object)node0));
804:       assertFalse(node3.equals((Object)node2));
805:       assertFalse(node3.equals((Object)node1));
806:       assertEquals(40, Node.ORIGINALNAME_PROP);
807:       assertEquals(57, Node.REFLECTED_OBJECT);
808:       assertEquals(48, Node.DIRECTIVES);
809:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
810:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(30, Node.VAR_ARGS_NAME);
813:       assertEquals(4095, Node.COLUMN_MASK);
814:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
815:       assertEquals(55, Node.INFERRED_FUNCTION);
816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
817:       assertEquals(57, Node.LAST_PROP);
818:       assertEquals(49, Node.DIRECT_EVAL);
819:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
820:       assertEquals(39, Node.EMPTY_BLOCK);
821:       assertEquals(53, Node.INPUT_ID);
822:       assertEquals(36, Node.QUOTED_PROP);
823:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
824:       assertEquals(52, Node.LENGTH);
825:       assertEquals(8, Node.FLAG_NO_THROWS);
826:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
827:       assertEquals(29, Node.JSDOC_INFO_PROP);
828:       assertEquals(56, Node.CHANGE_TIME);
829:       assertEquals(37, Node.OPT_ARG_NAME);
830:       assertEquals(47, Node.IS_DISPATCHER);
831:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(1, Node.DECR_FLAG);
834:       assertEquals(12, Node.COLUMN_BITS);
835:       assertEquals(32, Node.INCRDECR_PROP);
836:       assertEquals(46, Node.IS_NAMESPACE);
837:       assertEquals(43, Node.IS_CONSTANT_NAME);
838:       assertEquals(54, Node.SLASH_V);
839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
840:       assertEquals(51, Node.STATIC_SOURCE_FILE);
841:       assertEquals(50, Node.FREE_CALL);
842:       
843:       boolean boolean1 = node2.isQuotedString();
844:       assertFalse(node2.equals((Object)node3));
845:       assertFalse(node2.equals((Object)node0));
846:       assertFalse(node2.equals((Object)node1));
847:       assertTrue(boolean1 == boolean0);
848:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(2, Node.POST_FLAG);
851:       assertEquals(37, Node.OPT_ARG_NAME);
852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
853:       assertEquals(4095, Node.COLUMN_MASK);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertEquals(47, Node.IS_DISPATCHER);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(57, Node.LAST_PROP);
860:       assertEquals(36, Node.QUOTED_PROP);
861:       assertEquals(55, Node.INFERRED_FUNCTION);
862:       assertEquals(8, Node.FLAG_NO_THROWS);
863:       assertEquals(39, Node.EMPTY_BLOCK);
864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
865:       assertEquals(29, Node.JSDOC_INFO_PROP);
866:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
867:       assertEquals(53, Node.INPUT_ID);
868:       assertEquals(52, Node.LENGTH);
869:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(30, Node.VAR_ARGS_NAME);
873:       assertEquals(49, Node.DIRECT_EVAL);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
877:       assertEquals(32, Node.INCRDECR_PROP);
878:       assertEquals(12, Node.COLUMN_BITS);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(1, Node.DECR_FLAG);
881:       assertEquals(50, Node.FREE_CALL);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
884:       assertFalse(boolean1);
885:       assertNotSame(node2, node0);
886:       
887:       boolean boolean2 = node2.isQuotedString();
888:       assertFalse(node2.equals((Object)node3));
889:       assertFalse(node2.equals((Object)node0));
890:       assertFalse(node2.equals((Object)node1));
891:       assertTrue(boolean2 == boolean1);
892:       assertTrue(boolean2 == boolean0);
893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
894:       assertEquals(43, Node.IS_CONSTANT_NAME);
895:       assertEquals(2, Node.POST_FLAG);
896:       assertEquals(37, Node.OPT_ARG_NAME);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(4095, Node.COLUMN_MASK);
899:       assertEquals(48, Node.DIRECTIVES);
900:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
901:       assertEquals(56, Node.CHANGE_TIME);
902:       assertEquals(47, Node.IS_DISPATCHER);
903:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
904:       assertEquals(57, Node.LAST_PROP);
905:       assertEquals(36, Node.QUOTED_PROP);
906:       assertEquals(55, Node.INFERRED_FUNCTION);
907:       assertEquals(8, Node.FLAG_NO_THROWS);
908:       assertEquals(39, Node.EMPTY_BLOCK);
909:       assertEquals(15, Node.NO_SIDE_EFFECTS);
910:       assertEquals(29, Node.JSDOC_INFO_PROP);
911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(52, Node.LENGTH);
914:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
915:       assertEquals(57, Node.REFLECTED_OBJECT);
916:       assertEquals(54, Node.SLASH_V);
917:       assertEquals(30, Node.VAR_ARGS_NAME);
918:       assertEquals(49, Node.DIRECT_EVAL);
919:       assertEquals(40, Node.ORIGINALNAME_PROP);
920:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
922:       assertEquals(32, Node.INCRDECR_PROP);
923:       assertEquals(12, Node.COLUMN_BITS);
924:       assertEquals(46, Node.IS_NAMESPACE);
925:       assertEquals(1, Node.DECR_FLAG);
926:       assertEquals(50, Node.FREE_CALL);
927:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
928:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
929:       assertFalse(boolean2);
930:       assertNotSame(node2, node0);
931:       
932:       Node node4 = new Node(30, node1, node3, 43, 4095);
933:       assertFalse(node0.equals((Object)node2));
934:       assertFalse(node0.equals((Object)node3));
935:       assertFalse(node0.equals((Object)node1));
936:       assertFalse(node1.equals((Object)node0));
937:       assertFalse(node1.equals((Object)node3));
938:       assertFalse(node1.equals((Object)node2));
939:       assertFalse(node3.equals((Object)node0));
940:       assertFalse(node3.equals((Object)node2));
941:       assertFalse(node3.equals((Object)node1));
942:       assertFalse(node4.equals((Object)node3));
943:       assertFalse(node4.equals((Object)node1));
944:       assertFalse(node4.equals((Object)node2));
945:       assertFalse(node4.equals((Object)node0));
946:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
947:       assertEquals(39, Node.EMPTY_BLOCK);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(40, Node.ORIGINALNAME_PROP);
950:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
951:       assertEquals(4095, Node.COLUMN_MASK);
952:       assertEquals(53, Node.INPUT_ID);
953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
955:       assertEquals(57, Node.LAST_PROP);
956:       assertEquals(49, Node.DIRECT_EVAL);
957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(29, Node.JSDOC_INFO_PROP);
960:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
961:       assertEquals(36, Node.QUOTED_PROP);
962:       assertEquals(57, Node.REFLECTED_OBJECT);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertEquals(56, Node.CHANGE_TIME);
967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
968:       assertEquals(37, Node.OPT_ARG_NAME);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(2, Node.POST_FLAG);
974:       assertEquals(30, Node.VAR_ARGS_NAME);
975:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
976:       assertEquals(54, Node.SLASH_V);
977:       assertEquals(43, Node.IS_CONSTANT_NAME);
978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
979:       assertEquals(1, Node.DECR_FLAG);
980:       assertEquals(51, Node.STATIC_SOURCE_FILE);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(46, Node.IS_NAMESPACE);
984:       assertEquals(49, Node.DIRECT_EVAL);
985:       assertEquals(37, Node.OPT_ARG_NAME);
986:       assertEquals(32, Node.INCRDECR_PROP);
987:       assertEquals(1, Node.DECR_FLAG);
988:       assertEquals(2, Node.POST_FLAG);
989:       assertEquals(57, Node.LAST_PROP);
990:       assertEquals(47, Node.IS_DISPATCHER);
991:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
992:       assertEquals(30, Node.VAR_ARGS_NAME);
993:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
994:       assertEquals(57, Node.REFLECTED_OBJECT);
995:       assertEquals(29, Node.JSDOC_INFO_PROP);
996:       assertEquals(53, Node.INPUT_ID);
997:       assertEquals(36, Node.QUOTED_PROP);
998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
999:       assertEquals(8, Node.FLAG_NO_THROWS);
1000:       assertEquals(39, Node.EMPTY_BLOCK);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1004:       assertEquals(52, Node.LENGTH);
1005:       assertEquals(4095, Node.COLUMN_MASK);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(55, Node.INFERRED_FUNCTION);
1008:       assertEquals(48, Node.DIRECTIVES);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1011:       assertEquals(40, Node.ORIGINALNAME_PROP);
1012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1013:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1014:       assertEquals(54, Node.SLASH_V);
1015:       assertEquals(43, Node.IS_CONSTANT_NAME);
1016:       assertEquals(50, Node.FREE_CALL);
1017:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1018:       assertEquals(40, Node.ORIGINALNAME_PROP);
1019:       assertEquals(57, Node.REFLECTED_OBJECT);
1020:       assertEquals(48, Node.DIRECTIVES);
1021:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1022:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1023:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1024:       assertEquals(30, Node.VAR_ARGS_NAME);
1025:       assertEquals(4095, Node.COLUMN_MASK);
1026:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1027:       assertEquals(55, Node.INFERRED_FUNCTION);
1028:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1029:       assertEquals(57, Node.LAST_PROP);
1030:       assertEquals(49, Node.DIRECT_EVAL);
1031:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1032:       assertEquals(39, Node.EMPTY_BLOCK);
1033:       assertEquals(53, Node.INPUT_ID);
1034:       assertEquals(36, Node.QUOTED_PROP);
1035:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1036:       assertEquals(52, Node.LENGTH);
1037:       assertEquals(8, Node.FLAG_NO_THROWS);
1038:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1039:       assertEquals(29, Node.JSDOC_INFO_PROP);
1040:       assertEquals(56, Node.CHANGE_TIME);
1041:       assertEquals(37, Node.OPT_ARG_NAME);
1042:       assertEquals(47, Node.IS_DISPATCHER);
1043:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1044:       assertEquals(2, Node.POST_FLAG);
1045:       assertEquals(1, Node.DECR_FLAG);
1046:       assertEquals(12, Node.COLUMN_BITS);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(46, Node.IS_NAMESPACE);
1049:       assertEquals(43, Node.IS_CONSTANT_NAME);
1050:       assertEquals(54, Node.SLASH_V);
1051:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(50, Node.FREE_CALL);
1054:       assertEquals(57, Node.REFLECTED_OBJECT);
1055:       assertEquals(52, Node.LENGTH);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1058:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1059:       assertEquals(57, Node.LAST_PROP);
1060:       assertEquals(30, Node.VAR_ARGS_NAME);
1061:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1062:       assertEquals(4095, Node.COLUMN_MASK);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(49, Node.DIRECT_EVAL);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(37, Node.OPT_ARG_NAME);
1067:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(39, Node.EMPTY_BLOCK);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(56, Node.CHANGE_TIME);
1072:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1074:       assertEquals(8, Node.FLAG_NO_THROWS);
1075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1076:       assertEquals(29, Node.JSDOC_INFO_PROP);
1077:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1078:       assertEquals(53, Node.INPUT_ID);
1079:       assertEquals(2, Node.POST_FLAG);
1080:       assertEquals(47, Node.IS_DISPATCHER);
1081:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1082:       assertEquals(12, Node.COLUMN_BITS);
1083:       assertEquals(32, Node.INCRDECR_PROP);
1084:       assertEquals(1, Node.DECR_FLAG);
1085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1086:       assertEquals(43, Node.IS_CONSTANT_NAME);
1087:       assertEquals(50, Node.FREE_CALL);
1088:       assertEquals(46, Node.IS_NAMESPACE);
1089:       assertEquals(54, Node.SLASH_V);
1090:       
1091:       Node node5 = node4.cloneTree();
1092:       assertFalse(node0.equals((Object)node2));
1093:       assertFalse(node0.equals((Object)node3));
1094:       assertFalse(node0.equals((Object)node1));
1095:       assertFalse(node0.equals((Object)node4));
1096:       assertFalse(node1.equals((Object)node0));
1097:       assertFalse(node1.equals((Object)node3));
1098:       assertFalse(node1.equals((Object)node2));
1099:       assertFalse(node1.equals((Object)node4));
1100:       assertFalse(node3.equals((Object)node0));
1101:       assertFalse(node3.equals((Object)node2));
1102:       assertFalse(node3.equals((Object)node1));
1103:       assertFalse(node3.equals((Object)node4));
1104:       assertFalse(node4.equals((Object)node3));
1105:       assertFalse(node4.equals((Object)node1));
1106:       assertFalse(node4.equals((Object)node2));
1107:       assertFalse(node4.equals((Object)node0));
1108:       assertFalse(node5.equals((Object)node0));
1109:       assertFalse(node5.equals((Object)node3));
1110:       assertFalse(node5.equals((Object)node1));
1111:       assertFalse(node5.equals((Object)node2));
1112:       assertFalse(node5.equals((Object)node4));
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(39, Node.EMPTY_BLOCK);
1115:       assertEquals(48, Node.DIRECTIVES);
1116:       assertEquals(40, Node.ORIGINALNAME_PROP);
1117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1118:       assertEquals(4095, Node.COLUMN_MASK);
1119:       assertEquals(53, Node.INPUT_ID);
1120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1122:       assertEquals(57, Node.LAST_PROP);
1123:       assertEquals(49, Node.DIRECT_EVAL);
1124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1125:       assertEquals(55, Node.INFERRED_FUNCTION);
1126:       assertEquals(29, Node.JSDOC_INFO_PROP);
1127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1128:       assertEquals(36, Node.QUOTED_PROP);
1129:       assertEquals(57, Node.REFLECTED_OBJECT);
1130:       assertEquals(52, Node.LENGTH);
1131:       assertEquals(8, Node.FLAG_NO_THROWS);
1132:       assertEquals(46, Node.IS_NAMESPACE);
1133:       assertEquals(56, Node.CHANGE_TIME);
1134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1135:       assertEquals(37, Node.OPT_ARG_NAME);
1136:       assertEquals(32, Node.INCRDECR_PROP);
1137:       assertEquals(12, Node.COLUMN_BITS);
1138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1139:       assertEquals(47, Node.IS_DISPATCHER);
1140:       assertEquals(2, Node.POST_FLAG);
1141:       assertEquals(30, Node.VAR_ARGS_NAME);
1142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1143:       assertEquals(54, Node.SLASH_V);
1144:       assertEquals(43, Node.IS_CONSTANT_NAME);
1145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1146:       assertEquals(1, Node.DECR_FLAG);
1147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1148:       assertEquals(50, Node.FREE_CALL);
1149:       assertEquals(12, Node.COLUMN_BITS);
1150:       assertEquals(46, Node.IS_NAMESPACE);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(37, Node.OPT_ARG_NAME);
1153:       assertEquals(32, Node.INCRDECR_PROP);
1154:       assertEquals(1, Node.DECR_FLAG);
1155:       assertEquals(2, Node.POST_FLAG);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(47, Node.IS_DISPATCHER);
1158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1159:       assertEquals(30, Node.VAR_ARGS_NAME);
1160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1161:       assertEquals(57, Node.REFLECTED_OBJECT);
1162:       assertEquals(29, Node.JSDOC_INFO_PROP);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(36, Node.QUOTED_PROP);
1165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1166:       assertEquals(8, Node.FLAG_NO_THROWS);
1167:       assertEquals(39, Node.EMPTY_BLOCK);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(56, Node.CHANGE_TIME);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(52, Node.LENGTH);
1172:       assertEquals(4095, Node.COLUMN_MASK);
1173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1174:       assertEquals(55, Node.INFERRED_FUNCTION);
1175:       assertEquals(48, Node.DIRECTIVES);
1176:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1178:       assertEquals(40, Node.ORIGINALNAME_PROP);
1179:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1180:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1181:       assertEquals(54, Node.SLASH_V);
1182:       assertEquals(43, Node.IS_CONSTANT_NAME);
1183:       assertEquals(50, Node.FREE_CALL);
1184:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1185:       assertEquals(40, Node.ORIGINALNAME_PROP);
1186:       assertEquals(57, Node.REFLECTED_OBJECT);
1187:       assertEquals(48, Node.DIRECTIVES);
1188:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(4095, Node.COLUMN_MASK);
1193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1194:       assertEquals(55, Node.INFERRED_FUNCTION);
1195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1196:       assertEquals(57, Node.LAST_PROP);
1197:       assertEquals(49, Node.DIRECT_EVAL);
1198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1199:       assertEquals(39, Node.EMPTY_BLOCK);
1200:       assertEquals(53, Node.INPUT_ID);
1201:       assertEquals(36, Node.QUOTED_PROP);
1202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1203:       assertEquals(52, Node.LENGTH);
1204:       assertEquals(8, Node.FLAG_NO_THROWS);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(29, Node.JSDOC_INFO_PROP);
1207:       assertEquals(56, Node.CHANGE_TIME);
1208:       assertEquals(37, Node.OPT_ARG_NAME);
1209:       assertEquals(47, Node.IS_DISPATCHER);
1210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1211:       assertEquals(2, Node.POST_FLAG);
1212:       assertEquals(1, Node.DECR_FLAG);
1213:       assertEquals(12, Node.COLUMN_BITS);
1214:       assertEquals(32, Node.INCRDECR_PROP);
1215:       assertEquals(46, Node.IS_NAMESPACE);
1216:       assertEquals(43, Node.IS_CONSTANT_NAME);
1217:       assertEquals(54, Node.SLASH_V);
1218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1220:       assertEquals(50, Node.FREE_CALL);
1221:       assertEquals(57, Node.REFLECTED_OBJECT);
1222:       assertEquals(52, Node.LENGTH);
1223:       assertEquals(40, Node.ORIGINALNAME_PROP);
1224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1226:       assertEquals(57, Node.LAST_PROP);
1227:       assertEquals(30, Node.VAR_ARGS_NAME);
1228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1229:       assertEquals(4095, Node.COLUMN_MASK);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(49, Node.DIRECT_EVAL);
1232:       assertEquals(48, Node.DIRECTIVES);
1233:       assertEquals(37, Node.OPT_ARG_NAME);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1236:       assertEquals(39, Node.EMPTY_BLOCK);
1237:       assertEquals(36, Node.QUOTED_PROP);
1238:       assertEquals(56, Node.CHANGE_TIME);
1239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1241:       assertEquals(8, Node.FLAG_NO_THROWS);
1242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1243:       assertEquals(29, Node.JSDOC_INFO_PROP);
1244:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1245:       assertEquals(53, Node.INPUT_ID);
1246:       assertEquals(2, Node.POST_FLAG);
1247:       assertEquals(47, Node.IS_DISPATCHER);
1248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1249:       assertEquals(12, Node.COLUMN_BITS);
1250:       assertEquals(32, Node.INCRDECR_PROP);
1251:       assertEquals(1, Node.DECR_FLAG);
1252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1253:       assertEquals(43, Node.IS_CONSTANT_NAME);
1254:       assertEquals(50, Node.FREE_CALL);
1255:       assertEquals(46, Node.IS_NAMESPACE);
1256:       assertEquals(54, Node.SLASH_V);
1257:       assertEquals(4095, Node.COLUMN_MASK);
1258:       assertEquals(55, Node.INFERRED_FUNCTION);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(39, Node.EMPTY_BLOCK);
1261:       assertEquals(48, Node.DIRECTIVES);
1262:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1263:       assertEquals(43, Node.IS_CONSTANT_NAME);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(36, Node.QUOTED_PROP);
1266:       assertEquals(50, Node.FREE_CALL);
1267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1268:       assertEquals(57, Node.REFLECTED_OBJECT);
1269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(32, Node.INCRDECR_PROP);
1273:       assertEquals(12, Node.COLUMN_BITS);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(37, Node.OPT_ARG_NAME);
1276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1277:       assertEquals(49, Node.DIRECT_EVAL);
1278:       assertEquals(1, Node.DECR_FLAG);
1279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1281:       assertEquals(56, Node.CHANGE_TIME);
1282:       assertEquals(29, Node.JSDOC_INFO_PROP);
1283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1284:       assertEquals(52, Node.LENGTH);
1285:       assertEquals(53, Node.INPUT_ID);
1286:       assertEquals(54, Node.SLASH_V);
1287:       assertEquals(40, Node.ORIGINALNAME_PROP);
1288:       assertEquals(57, Node.LAST_PROP);
1289:       assertEquals(47, Node.IS_DISPATCHER);
1290:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1291:       assertEquals(2, Node.POST_FLAG);
1292:       assertEquals(30, Node.VAR_ARGS_NAME);
1293:       assertNotSame(node0, node2);
1294:       assertNotSame(node1, node5);
1295:       assertNotSame(node1, node3);
1296:       assertNotSame(node1, node4);
1297:       assertNotSame(node3, node5);
1298:       assertNotSame(node3, node1);
1299:       assertNotSame(node3, node4);
1300:       assertNotSame(node4, node5);
1301:       assertNotSame(node4, node3);
1302:       assertNotSame(node4, node1);
1303:       assertNotSame(node5, node3);
1304:       assertNotSame(node5, node1);
1305:       assertNotSame(node5, node4);
1306:       
1307:       boolean boolean3 = node5.isHook();
1308:       assertFalse(node0.equals((Object)node2));
1309:       assertFalse(node0.equals((Object)node5));
1310:       assertFalse(node0.equals((Object)node3));
1311:       assertFalse(node0.equals((Object)node1));
1312:       assertFalse(node0.equals((Object)node4));
1313:       assertFalse(node1.equals((Object)node5));
1314:       assertFalse(node1.equals((Object)node0));
1315:       assertFalse(node1.equals((Object)node3));
1316:       assertFalse(node1.equals((Object)node2));
1317:       assertFalse(node1.equals((Object)node4));
1318:       assertFalse(node3.equals((Object)node0));
1319:       assertFalse(node3.equals((Object)node5));
1320:       assertFalse(node3.equals((Object)node2));
1321:       assertFalse(node3.equals((Object)node1));
1322:       assertFalse(node3.equals((Object)node4));
1323:       assertFalse(node4.equals((Object)node5));
1324:       assertFalse(node4.equals((Object)node3));
1325:       assertFalse(node4.equals((Object)node1));
1326:       assertFalse(node4.equals((Object)node2));
1327:       assertFalse(node4.equals((Object)node0));
1328:       assertFalse(node5.equals((Object)node0));
1329:       assertFalse(node5.equals((Object)node3));
1330:       assertFalse(node5.equals((Object)node1));
1331:       assertFalse(node5.equals((Object)node2));
1332:       assertFalse(node5.equals((Object)node4));
1333:       assertTrue(boolean3 == boolean0);
1334:       assertTrue(boolean3 == boolean1);
1335:       assertTrue(boolean3 == boolean2);
1336:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1337:       assertEquals(39, Node.EMPTY_BLOCK);
1338:       assertEquals(48, Node.DIRECTIVES);
1339:       assertEquals(40, Node.ORIGINALNAME_PROP);
1340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1341:       assertEquals(4095, Node.COLUMN_MASK);
1342:       assertEquals(53, Node.INPUT_ID);
1343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1344:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1345:       assertEquals(57, Node.LAST_PROP);
1346:       assertEquals(49, Node.DIRECT_EVAL);
1347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1348:       assertEquals(55, Node.INFERRED_FUNCTION);
1349:       assertEquals(29, Node.JSDOC_INFO_PROP);
1350:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1351:       assertEquals(36, Node.QUOTED_PROP);
1352:       assertEquals(57, Node.REFLECTED_OBJECT);
1353:       assertEquals(52, Node.LENGTH);
1354:       assertEquals(8, Node.FLAG_NO_THROWS);
1355:       assertEquals(46, Node.IS_NAMESPACE);
1356:       assertEquals(56, Node.CHANGE_TIME);
1357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1358:       assertEquals(37, Node.OPT_ARG_NAME);
1359:       assertEquals(32, Node.INCRDECR_PROP);
1360:       assertEquals(12, Node.COLUMN_BITS);
1361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1362:       assertEquals(47, Node.IS_DISPATCHER);
1363:       assertEquals(2, Node.POST_FLAG);
1364:       assertEquals(30, Node.VAR_ARGS_NAME);
1365:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1366:       assertEquals(54, Node.SLASH_V);
1367:       assertEquals(43, Node.IS_CONSTANT_NAME);
1368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1369:       assertEquals(1, Node.DECR_FLAG);
1370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1371:       assertEquals(50, Node.FREE_CALL);
1372:       assertEquals(12, Node.COLUMN_BITS);
1373:       assertEquals(46, Node.IS_NAMESPACE);
1374:       assertEquals(49, Node.DIRECT_EVAL);
1375:       assertEquals(37, Node.OPT_ARG_NAME);
1376:       assertEquals(32, Node.INCRDECR_PROP);
1377:       assertEquals(1, Node.DECR_FLAG);
1378:       assertEquals(2, Node.POST_FLAG);
1379:       assertEquals(57, Node.LAST_PROP);
1380:       assertEquals(47, Node.IS_DISPATCHER);
1381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1382:       assertEquals(30, Node.VAR_ARGS_NAME);
1383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1384:       assertEquals(57, Node.REFLECTED_OBJECT);
1385:       assertEquals(29, Node.JSDOC_INFO_PROP);
1386:       assertEquals(53, Node.INPUT_ID);
1387:       assertEquals(36, Node.QUOTED_PROP);
1388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1389:       assertEquals(8, Node.FLAG_NO_THROWS);
1390:       assertEquals(39, Node.EMPTY_BLOCK);
1391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1392:       assertEquals(56, Node.CHANGE_TIME);
1393:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1394:       assertEquals(52, Node.LENGTH);
1395:       assertEquals(4095, Node.COLUMN_MASK);
1396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1397:       assertEquals(55, Node.INFERRED_FUNCTION);
1398:       assertEquals(48, Node.DIRECTIVES);
1399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1400:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1401:       assertEquals(40, Node.ORIGINALNAME_PROP);
1402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1404:       assertEquals(54, Node.SLASH_V);
1405:       assertEquals(43, Node.IS_CONSTANT_NAME);
1406:       assertEquals(50, Node.FREE_CALL);
1407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1408:       assertEquals(40, Node.ORIGINALNAME_PROP);
1409:       assertEquals(57, Node.REFLECTED_OBJECT);
1410:       assertEquals(48, Node.DIRECTIVES);
1411:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1412:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1414:       assertEquals(30, Node.VAR_ARGS_NAME);
1415:       assertEquals(4095, Node.COLUMN_MASK);
1416:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1417:       assertEquals(55, Node.INFERRED_FUNCTION);
1418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1419:       assertEquals(57, Node.LAST_PROP);
1420:       assertEquals(49, Node.DIRECT_EVAL);
1421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1422:       assertEquals(39, Node.EMPTY_BLOCK);
1423:       assertEquals(53, Node.INPUT_ID);
1424:       assertEquals(36, Node.QUOTED_PROP);
1425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1426:       assertEquals(52, Node.LENGTH);
1427:       assertEquals(8, Node.FLAG_NO_THROWS);
1428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1429:       assertEquals(29, Node.JSDOC_INFO_PROP);
1430:       assertEquals(56, Node.CHANGE_TIME);
1431:       assertEquals(37, Node.OPT_ARG_NAME);
1432:       assertEquals(47, Node.IS_DISPATCHER);
1433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1434:       assertEquals(2, Node.POST_FLAG);
1435:       assertEquals(1, Node.DECR_FLAG);
1436:       assertEquals(12, Node.COLUMN_BITS);
1437:       assertEquals(32, Node.INCRDECR_PROP);
1438:       assertEquals(46, Node.IS_NAMESPACE);
1439:       assertEquals(43, Node.IS_CONSTANT_NAME);
1440:       assertEquals(54, Node.SLASH_V);
1441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1443:       assertEquals(50, Node.FREE_CALL);
1444:       assertEquals(57, Node.REFLECTED_OBJECT);
1445:       assertEquals(52, Node.LENGTH);
1446:       assertEquals(40, Node.ORIGINALNAME_PROP);
1447:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1449:       assertEquals(57, Node.LAST_PROP);
1450:       assertEquals(30, Node.VAR_ARGS_NAME);
1451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1452:       assertEquals(4095, Node.COLUMN_MASK);
1453:       assertEquals(55, Node.INFERRED_FUNCTION);
1454:       assertEquals(49, Node.DIRECT_EVAL);
1455:       assertEquals(48, Node.DIRECTIVES);
1456:       assertEquals(37, Node.OPT_ARG_NAME);
1457:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1459:       assertEquals(39, Node.EMPTY_BLOCK);
1460:       assertEquals(36, Node.QUOTED_PROP);
1461:       assertEquals(56, Node.CHANGE_TIME);
1462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1463:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1464:       assertEquals(8, Node.FLAG_NO_THROWS);
1465:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1466:       assertEquals(29, Node.JSDOC_INFO_PROP);
1467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1468:       assertEquals(53, Node.INPUT_ID);
1469:       assertEquals(2, Node.POST_FLAG);
1470:       assertEquals(47, Node.IS_DISPATCHER);
1471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1472:       assertEquals(12, Node.COLUMN_BITS);
1473:       assertEquals(32, Node.INCRDECR_PROP);
1474:       assertEquals(1, Node.DECR_FLAG);
1475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1476:       assertEquals(43, Node.IS_CONSTANT_NAME);
1477:       assertEquals(50, Node.FREE_CALL);
1478:       assertEquals(46, Node.IS_NAMESPACE);
1479:       assertEquals(54, Node.SLASH_V);
1480:       assertEquals(4095, Node.COLUMN_MASK);
1481:       assertEquals(55, Node.INFERRED_FUNCTION);
1482:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1483:       assertEquals(39, Node.EMPTY_BLOCK);
1484:       assertEquals(48, Node.DIRECTIVES);
1485:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1486:       assertEquals(43, Node.IS_CONSTANT_NAME);
1487:       assertEquals(8, Node.FLAG_NO_THROWS);
1488:       assertEquals(36, Node.QUOTED_PROP);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(57, Node.REFLECTED_OBJECT);
1492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1493:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1494:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1495:       assertEquals(32, Node.INCRDECR_PROP);
1496:       assertEquals(12, Node.COLUMN_BITS);
1497:       assertEquals(46, Node.IS_NAMESPACE);
1498:       assertEquals(37, Node.OPT_ARG_NAME);
1499:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1500:       assertEquals(49, Node.DIRECT_EVAL);
1501:       assertEquals(1, Node.DECR_FLAG);
1502:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(29, Node.JSDOC_INFO_PROP);
1506:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1507:       assertEquals(52, Node.LENGTH);
1508:       assertEquals(53, Node.INPUT_ID);
1509:       assertEquals(54, Node.SLASH_V);
1510:       assertEquals(40, Node.ORIGINALNAME_PROP);
1511:       assertEquals(57, Node.LAST_PROP);
1512:       assertEquals(47, Node.IS_DISPATCHER);
1513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1514:       assertEquals(2, Node.POST_FLAG);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertFalse(boolean3);
1517:       assertNotSame(node0, node2);
1518:       assertNotSame(node1, node5);
1519:       assertNotSame(node1, node3);
1520:       assertNotSame(node1, node4);
1521:       assertNotSame(node3, node5);
1522:       assertNotSame(node3, node1);
1523:       assertNotSame(node3, node4);
1524:       assertNotSame(node4, node5);
1525:       assertNotSame(node4, node3);
1526:       assertNotSame(node4, node1);
1527:       assertNotSame(node5, node3);
1528:       assertNotSame(node5, node1);
1529:       assertNotSame(node5, node4);
1530:       
1531:       Node node6 = node1.cloneNode();
1532:       assertFalse(node0.equals((Object)node2));
1533:       assertFalse(node0.equals((Object)node5));
1534:       assertFalse(node0.equals((Object)node3));
1535:       assertFalse(node0.equals((Object)node1));
1536:       assertFalse(node0.equals((Object)node4));
1537:       assertFalse(node1.equals((Object)node5));
1538:       assertFalse(node1.equals((Object)node0));
1539:       assertFalse(node1.equals((Object)node3));
1540:       assertFalse(node1.equals((Object)node2));
1541:       assertFalse(node1.equals((Object)node4));
1542:       assertFalse(node6.equals((Object)node3));
1543:       assertFalse(node6.equals((Object)node5));
1544:       assertFalse(node6.equals((Object)node2));
1545:       assertFalse(node6.equals((Object)node0));
1546:       assertFalse(node6.equals((Object)node1));
1547:       assertFalse(node6.equals((Object)node4));
1548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1549:       assertEquals(39, Node.EMPTY_BLOCK);
1550:       assertEquals(48, Node.DIRECTIVES);
1551:       assertEquals(40, Node.ORIGINALNAME_PROP);
1552:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1553:       assertEquals(4095, Node.COLUMN_MASK);
1554:       assertEquals(53, Node.INPUT_ID);
1555:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1556:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1557:       assertEquals(57, Node.LAST_PROP);
1558:       assertEquals(49, Node.DIRECT_EVAL);
1559:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1560:       assertEquals(55, Node.INFERRED_FUNCTION);
1561:       assertEquals(29, Node.JSDOC_INFO_PROP);
1562:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1563:       assertEquals(36, Node.QUOTED_PROP);
1564:       assertEquals(57, Node.REFLECTED_OBJECT);
1565:       assertEquals(52, Node.LENGTH);
1566:       assertEquals(8, Node.FLAG_NO_THROWS);
1567:       assertEquals(46, Node.IS_NAMESPACE);
1568:       assertEquals(56, Node.CHANGE_TIME);
1569:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1570:       assertEquals(37, Node.OPT_ARG_NAME);
1571:       assertEquals(32, Node.INCRDECR_PROP);
1572:       assertEquals(12, Node.COLUMN_BITS);
1573:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1574:       assertEquals(47, Node.IS_DISPATCHER);
1575:       assertEquals(2, Node.POST_FLAG);
1576:       assertEquals(30, Node.VAR_ARGS_NAME);
1577:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1578:       assertEquals(54, Node.SLASH_V);
1579:       assertEquals(43, Node.IS_CONSTANT_NAME);
1580:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1581:       assertEquals(1, Node.DECR_FLAG);
1582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1583:       assertEquals(50, Node.FREE_CALL);
1584:       assertEquals(12, Node.COLUMN_BITS);
1585:       assertEquals(46, Node.IS_NAMESPACE);
1586:       assertEquals(49, Node.DIRECT_EVAL);
1587:       assertEquals(37, Node.OPT_ARG_NAME);
1588:       assertEquals(32, Node.INCRDECR_PROP);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(2, Node.POST_FLAG);
1591:       assertEquals(57, Node.LAST_PROP);
1592:       assertEquals(47, Node.IS_DISPATCHER);
1593:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1594:       assertEquals(30, Node.VAR_ARGS_NAME);
1595:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1596:       assertEquals(57, Node.REFLECTED_OBJECT);
1597:       assertEquals(29, Node.JSDOC_INFO_PROP);
1598:       assertEquals(53, Node.INPUT_ID);
1599:       assertEquals(36, Node.QUOTED_PROP);
1600:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1601:       assertEquals(8, Node.FLAG_NO_THROWS);
1602:       assertEquals(39, Node.EMPTY_BLOCK);
1603:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1604:       assertEquals(56, Node.CHANGE_TIME);
1605:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1606:       assertEquals(52, Node.LENGTH);
1607:       assertEquals(4095, Node.COLUMN_MASK);
1608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1609:       assertEquals(55, Node.INFERRED_FUNCTION);
1610:       assertEquals(48, Node.DIRECTIVES);
1611:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1612:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1613:       assertEquals(40, Node.ORIGINALNAME_PROP);
1614:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1615:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1616:       assertEquals(54, Node.SLASH_V);
1617:       assertEquals(43, Node.IS_CONSTANT_NAME);
1618:       assertEquals(50, Node.FREE_CALL);
1619:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1621:       assertEquals(43, Node.IS_CONSTANT_NAME);
1622:       assertEquals(36, Node.QUOTED_PROP);
1623:       assertEquals(4095, Node.COLUMN_MASK);
1624:       assertEquals(37, Node.OPT_ARG_NAME);
1625:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1626:       assertEquals(32, Node.INCRDECR_PROP);
1627:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1628:       assertEquals(46, Node.IS_NAMESPACE);
1629:       assertEquals(12, Node.COLUMN_BITS);
1630:       assertEquals(50, Node.FREE_CALL);
1631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1632:       assertEquals(1, Node.DECR_FLAG);
1633:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1634:       assertEquals(52, Node.LENGTH);
1635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1636:       assertEquals(54, Node.SLASH_V);
1637:       assertEquals(57, Node.REFLECTED_OBJECT);
1638:       assertEquals(30, Node.VAR_ARGS_NAME);
1639:       assertEquals(49, Node.DIRECT_EVAL);
1640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1641:       assertEquals(40, Node.ORIGINALNAME_PROP);
1642:       assertEquals(48, Node.DIRECTIVES);
1643:       assertEquals(8, Node.FLAG_NO_THROWS);
1644:       assertEquals(2, Node.POST_FLAG);
1645:       assertEquals(56, Node.CHANGE_TIME);
1646:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1647:       assertEquals(47, Node.IS_DISPATCHER);
1648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1649:       assertEquals(29, Node.JSDOC_INFO_PROP);
1650:       assertEquals(57, Node.LAST_PROP);
1651:       assertEquals(55, Node.INFERRED_FUNCTION);
1652:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1654:       assertEquals(39, Node.EMPTY_BLOCK);
1655:       assertEquals(53, Node.INPUT_ID);
1656:       assertNotSame(node0, node2);
1657:       assertNotSame(node1, node5);
1658:       assertNotSame(node1, node3);
1659:       assertNotSame(node1, node4);
1660:       assertNotSame(node1, node6);
1661:       assertNotSame(node6, node3);
1662:       assertNotSame(node6, node5);
1663:       assertNotSame(node6, node1);
1664:       assertNotSame(node6, node4);
1665:       
1666:       boolean boolean4 = node5.isThrow();
1667:       assertFalse(node0.equals((Object)node2));
1668:       assertFalse(node0.equals((Object)node5));
1669:       assertFalse(node0.equals((Object)node3));
1670:       assertFalse(node0.equals((Object)node1));
1671:       assertFalse(node0.equals((Object)node4));
1672:       assertFalse(node0.equals((Object)node6));
1673:       assertFalse(node1.equals((Object)node5));
1674:       assertFalse(node1.equals((Object)node0));
1675:       assertFalse(node1.equals((Object)node3));
1676:       assertFalse(node1.equals((Object)node2));
1677:       assertFalse(node1.equals((Object)node4));
1678:       assertFalse(node1.equals((Object)node6));
1679:       assertFalse(node3.equals((Object)node0));
1680:       assertFalse(node3.equals((Object)node5));
1681:       assertFalse(node3.equals((Object)node2));
1682:       assertFalse(node3.equals((Object)node1));
1683:       assertFalse(node3.equals((Object)node4));
1684:       assertFalse(node3.equals((Object)node6));
1685:       assertFalse(node4.equals((Object)node5));
1686:       assertFalse(node4.equals((Object)node3));
1687:       assertFalse(node4.equals((Object)node1));
1688:       assertFalse(node4.equals((Object)node6));
1689:       assertFalse(node4.equals((Object)node0));
1690:       assertFalse(node4.equals((Object)node2));
1691:       assertFalse(node5.equals((Object)node0));
1692:       assertFalse(node5.equals((Object)node3));
1693:       assertFalse(node5.equals((Object)node1));
1694:       assertFalse(node5.equals((Object)node6));
1695:       assertFalse(node5.equals((Object)node2));
1696:       assertFalse(node5.equals((Object)node4));
1697:       assertTrue(boolean4 == boolean1);
1698:       assertTrue(boolean4 == boolean2);
1699:       assertTrue(boolean4 == boolean3);
1700:       assertTrue(boolean4 == boolean0);
1701:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1702:       assertEquals(39, Node.EMPTY_BLOCK);
1703:       assertEquals(48, Node.DIRECTIVES);
1704:       assertEquals(40, Node.ORIGINALNAME_PROP);
1705:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1706:       assertEquals(4095, Node.COLUMN_MASK);
1707:       assertEquals(53, Node.INPUT_ID);
1708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1710:       assertEquals(57, Node.LAST_PROP);
1711:       assertEquals(49, Node.DIRECT_EVAL);
1712:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1713:       assertEquals(55, Node.INFERRED_FUNCTION);
1714:       assertEquals(29, Node.JSDOC_INFO_PROP);
1715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1716:       assertEquals(36, Node.QUOTED_PROP);
1717:       assertEquals(57, Node.REFLECTED_OBJECT);
1718:       assertEquals(52, Node.LENGTH);
1719:       assertEquals(8, Node.FLAG_NO_THROWS);
1720:       assertEquals(46, Node.IS_NAMESPACE);
1721:       assertEquals(56, Node.CHANGE_TIME);
1722:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1723:       assertEquals(37, Node.OPT_ARG_NAME);
1724:       assertEquals(32, Node.INCRDECR_PROP);
1725:       assertEquals(12, Node.COLUMN_BITS);
1726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1727:       assertEquals(47, Node.IS_DISPATCHER);
1728:       assertEquals(2, Node.POST_FLAG);
1729:       assertEquals(30, Node.VAR_ARGS_NAME);
1730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1731:       assertEquals(54, Node.SLASH_V);
1732:       assertEquals(43, Node.IS_CONSTANT_NAME);
1733:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1734:       assertEquals(1, Node.DECR_FLAG);
1735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1736:       assertEquals(50, Node.FREE_CALL);
1737:       assertEquals(12, Node.COLUMN_BITS);
1738:       assertEquals(46, Node.IS_NAMESPACE);
1739:       assertEquals(49, Node.DIRECT_EVAL);
1740:       assertEquals(37, Node.OPT_ARG_NAME);
1741:       assertEquals(32, Node.INCRDECR_PROP);
1742:       assertEquals(1, Node.DECR_FLAG);
1743:       assertEquals(2, Node.POST_FLAG);
1744:       assertEquals(57, Node.LAST_PROP);
1745:       assertEquals(47, Node.IS_DISPATCHER);
1746:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1747:       assertEquals(30, Node.VAR_ARGS_NAME);
1748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1749:       assertEquals(57, Node.REFLECTED_OBJECT);
1750:       assertEquals(29, Node.JSDOC_INFO_PROP);
1751:       assertEquals(53, Node.INPUT_ID);
1752:       assertEquals(36, Node.QUOTED_PROP);
1753:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1754:       assertEquals(8, Node.FLAG_NO_THROWS);
1755:       assertEquals(39, Node.EMPTY_BLOCK);
1756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1757:       assertEquals(56, Node.CHANGE_TIME);
1758:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1759:       assertEquals(52, Node.LENGTH);
1760:       assertEquals(4095, Node.COLUMN_MASK);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(55, Node.INFERRED_FUNCTION);
1763:       assertEquals(48, Node.DIRECTIVES);
1764:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1765:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1766:       assertEquals(40, Node.ORIGINALNAME_PROP);
1767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1768:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1769:       assertEquals(54, Node.SLASH_V);
1770:       assertEquals(43, Node.IS_CONSTANT_NAME);
1771:       assertEquals(50, Node.FREE_CALL);
1772:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1773:       assertEquals(40, Node.ORIGINALNAME_PROP);
1774:       assertEquals(57, Node.REFLECTED_OBJECT);
1775:       assertEquals(48, Node.DIRECTIVES);
1776:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1778:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1779:       assertEquals(30, Node.VAR_ARGS_NAME);
1780:       assertEquals(4095, Node.COLUMN_MASK);
1781:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1782:       assertEquals(55, Node.INFERRED_FUNCTION);
1783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1784:       assertEquals(57, Node.LAST_PROP);
1785:       assertEquals(49, Node.DIRECT_EVAL);
1786:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1787:       assertEquals(39, Node.EMPTY_BLOCK);
1788:       assertEquals(53, Node.INPUT_ID);
1789:       assertEquals(36, Node.QUOTED_PROP);
1790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1791:       assertEquals(52, Node.LENGTH);
1792:       assertEquals(8, Node.FLAG_NO_THROWS);
1793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1794:       assertEquals(29, Node.JSDOC_INFO_PROP);
1795:       assertEquals(56, Node.CHANGE_TIME);
1796:       assertEquals(37, Node.OPT_ARG_NAME);
1797:       assertEquals(47, Node.IS_DISPATCHER);
1798:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1799:       assertEquals(2, Node.POST_FLAG);
1800:       assertEquals(1, Node.DECR_FLAG);
1801:       assertEquals(12, Node.COLUMN_BITS);
1802:       assertEquals(32, Node.INCRDECR_PROP);
1803:       assertEquals(46, Node.IS_NAMESPACE);
1804:       assertEquals(43, Node.IS_CONSTANT_NAME);
1805:       assertEquals(54, Node.SLASH_V);
1806:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1808:       assertEquals(50, Node.FREE_CALL);
1809:       assertEquals(57, Node.REFLECTED_OBJECT);
1810:       assertEquals(52, Node.LENGTH);
1811:       assertEquals(40, Node.ORIGINALNAME_PROP);
1812:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1814:       assertEquals(57, Node.LAST_PROP);
1815:       assertEquals(30, Node.VAR_ARGS_NAME);
1816:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1817:       assertEquals(4095, Node.COLUMN_MASK);
1818:       assertEquals(55, Node.INFERRED_FUNCTION);
1819:       assertEquals(49, Node.DIRECT_EVAL);
1820:       assertEquals(48, Node.DIRECTIVES);
1821:       assertEquals(37, Node.OPT_ARG_NAME);
1822:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(39, Node.EMPTY_BLOCK);
1825:       assertEquals(36, Node.QUOTED_PROP);
1826:       assertEquals(56, Node.CHANGE_TIME);
1827:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1828:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1829:       assertEquals(8, Node.FLAG_NO_THROWS);
1830:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1831:       assertEquals(29, Node.JSDOC_INFO_PROP);
1832:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1833:       assertEquals(53, Node.INPUT_ID);
1834:       assertEquals(2, Node.POST_FLAG);
1835:       assertEquals(47, Node.IS_DISPATCHER);
1836:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1837:       assertEquals(12, Node.COLUMN_BITS);
1838:       assertEquals(32, Node.INCRDECR_PROP);
1839:       assertEquals(1, Node.DECR_FLAG);
1840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1841:       assertEquals(43, Node.IS_CONSTANT_NAME);
1842:       assertEquals(50, Node.FREE_CALL);
1843:       assertEquals(46, Node.IS_NAMESPACE);
1844:       assertEquals(54, Node.SLASH_V);
1845:       assertEquals(4095, Node.COLUMN_MASK);
1846:       assertEquals(55, Node.INFERRED_FUNCTION);
1847:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1848:       assertEquals(39, Node.EMPTY_BLOCK);
1849:       assertEquals(48, Node.DIRECTIVES);
1850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1851:       assertEquals(43, Node.IS_CONSTANT_NAME);
1852:       assertEquals(8, Node.FLAG_NO_THROWS);
1853:       assertEquals(36, Node.QUOTED_PROP);
1854:       assertEquals(50, Node.FREE_CALL);
1855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1856:       assertEquals(57, Node.REFLECTED_OBJECT);
1857:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1858:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1860:       assertEquals(32, Node.INCRDECR_PROP);
1861:       assertEquals(12, Node.COLUMN_BITS);
1862:       assertEquals(46, Node.IS_NAMESPACE);
1863:       assertEquals(37, Node.OPT_ARG_NAME);
1864:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1865:       assertEquals(49, Node.DIRECT_EVAL);
1866:       assertEquals(1, Node.DECR_FLAG);
1867:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1869:       assertEquals(56, Node.CHANGE_TIME);
1870:       assertEquals(29, Node.JSDOC_INFO_PROP);
1871:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1872:       assertEquals(52, Node.LENGTH);
1873:       assertEquals(53, Node.INPUT_ID);
1874:       assertEquals(54, Node.SLASH_V);
1875:       assertEquals(40, Node.ORIGINALNAME_PROP);
1876:       assertEquals(57, Node.LAST_PROP);
1877:       assertEquals(47, Node.IS_DISPATCHER);
1878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1879:       assertEquals(2, Node.POST_FLAG);
1880:       assertEquals(30, Node.VAR_ARGS_NAME);
1881:       assertFalse(boolean4);
1882:       assertNotSame(node0, node2);
1883:       assertNotSame(node1, node5);
1884:       assertNotSame(node1, node3);
1885:       assertNotSame(node1, node4);
1886:       assertNotSame(node1, node6);
1887:       assertNotSame(node3, node5);
1888:       assertNotSame(node3, node1);
1889:       assertNotSame(node3, node4);
1890:       assertNotSame(node3, node6);
1891:       assertNotSame(node4, node5);
1892:       assertNotSame(node4, node3);
1893:       assertNotSame(node4, node1);
1894:       assertNotSame(node4, node6);
1895:       assertNotSame(node5, node3);
1896:       assertNotSame(node5, node1);
1897:       assertNotSame(node5, node6);
1898:       assertNotSame(node5, node4);
1899:       
1900:       Node node7 = new Node(1, node6, node5, 15, 2207);
1901:       assertFalse(node0.equals((Object)node2));
1902:       assertFalse(node0.equals((Object)node5));
1903:       assertFalse(node0.equals((Object)node3));
1904:       assertFalse(node0.equals((Object)node1));
1905:       assertFalse(node0.equals((Object)node4));
1906:       assertFalse(node0.equals((Object)node6));
1907:       assertFalse(node1.equals((Object)node5));
1908:       assertFalse(node1.equals((Object)node0));
1909:       assertFalse(node1.equals((Object)node3));
1910:       assertFalse(node1.equals((Object)node2));
1911:       assertFalse(node1.equals((Object)node4));
1912:       assertFalse(node1.equals((Object)node6));
1913:       assertFalse(node3.equals((Object)node0));
1914:       assertFalse(node3.equals((Object)node5));
1915:       assertFalse(node3.equals((Object)node2));
1916:       assertFalse(node3.equals((Object)node1));
1917:       assertFalse(node3.equals((Object)node4));
1918:       assertFalse(node3.equals((Object)node6));
1919:       assertFalse(node4.equals((Object)node5));
1920:       assertFalse(node4.equals((Object)node3));
1921:       assertFalse(node4.equals((Object)node1));
1922:       assertFalse(node4.equals((Object)node6));
1923:       assertFalse(node4.equals((Object)node0));
1924:       assertFalse(node4.equals((Object)node2));
1925:       assertFalse(node5.equals((Object)node0));
1926:       assertFalse(node5.equals((Object)node3));
1927:       assertFalse(node5.equals((Object)node1));
1928:       assertFalse(node5.equals((Object)node6));
1929:       assertFalse(node5.equals((Object)node2));
1930:       assertFalse(node5.equals((Object)node4));
1931:       assertFalse(node6.equals((Object)node3));
1932:       assertFalse(node6.equals((Object)node5));
1933:       assertFalse(node6.equals((Object)node2));
1934:       assertFalse(node6.equals((Object)node0));
1935:       assertFalse(node6.equals((Object)node1));
1936:       assertFalse(node6.equals((Object)node4));
1937:       assertFalse(node7.equals((Object)node5));
1938:       assertFalse(node7.equals((Object)node1));
1939:       assertFalse(node7.equals((Object)node0));
1940:       assertFalse(node7.equals((Object)node6));
1941:       assertFalse(node7.equals((Object)node2));
1942:       assertFalse(node7.equals((Object)node4));
1943:       assertFalse(node7.equals((Object)node3));
1944:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1945:       assertEquals(39, Node.EMPTY_BLOCK);
1946:       assertEquals(48, Node.DIRECTIVES);
1947:       assertEquals(40, Node.ORIGINALNAME_PROP);
1948:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1949:       assertEquals(4095, Node.COLUMN_MASK);
1950:       assertEquals(53, Node.INPUT_ID);
1951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1952:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1953:       assertEquals(57, Node.LAST_PROP);
1954:       assertEquals(49, Node.DIRECT_EVAL);
1955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1956:       assertEquals(55, Node.INFERRED_FUNCTION);
1957:       assertEquals(29, Node.JSDOC_INFO_PROP);
1958:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1959:       assertEquals(36, Node.QUOTED_PROP);
1960:       assertEquals(57, Node.REFLECTED_OBJECT);
1961:       assertEquals(52, Node.LENGTH);
1962:       assertEquals(8, Node.FLAG_NO_THROWS);
1963:       assertEquals(46, Node.IS_NAMESPACE);
1964:       assertEquals(56, Node.CHANGE_TIME);
1965:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1966:       assertEquals(37, Node.OPT_ARG_NAME);
1967:       assertEquals(32, Node.INCRDECR_PROP);
1968:       assertEquals(12, Node.COLUMN_BITS);
1969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1970:       assertEquals(47, Node.IS_DISPATCHER);
1971:       assertEquals(2, Node.POST_FLAG);
1972:       assertEquals(30, Node.VAR_ARGS_NAME);
1973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1974:       assertEquals(54, Node.SLASH_V);
1975:       assertEquals(43, Node.IS_CONSTANT_NAME);
1976:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1977:       assertEquals(1, Node.DECR_FLAG);
1978:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1979:       assertEquals(50, Node.FREE_CALL);
1980:       assertEquals(12, Node.COLUMN_BITS);
1981:       assertEquals(46, Node.IS_NAMESPACE);
1982:       assertEquals(49, Node.DIRECT_EVAL);
1983:       assertEquals(37, Node.OPT_ARG_NAME);
1984:       assertEquals(32, Node.INCRDECR_PROP);
1985:       assertEquals(1, Node.DECR_FLAG);
1986:       assertEquals(2, Node.POST_FLAG);
1987:       assertEquals(57, Node.LAST_PROP);
1988:       assertEquals(47, Node.IS_DISPATCHER);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertEquals(30, Node.VAR_ARGS_NAME);
1991:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1992:       assertEquals(57, Node.REFLECTED_OBJECT);
1993:       assertEquals(29, Node.JSDOC_INFO_PROP);
1994:       assertEquals(53, Node.INPUT_ID);
1995:       assertEquals(36, Node.QUOTED_PROP);
1996:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1997:       assertEquals(8, Node.FLAG_NO_THROWS);
1998:       assertEquals(39, Node.EMPTY_BLOCK);
1999:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2000:       assertEquals(56, Node.CHANGE_TIME);
2001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2002:       assertEquals(52, Node.LENGTH);
2003:       assertEquals(4095, Node.COLUMN_MASK);
2004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2005:       assertEquals(55, Node.INFERRED_FUNCTION);
2006:       assertEquals(48, Node.DIRECTIVES);
2007:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2008:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2009:       assertEquals(40, Node.ORIGINALNAME_PROP);
2010:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2011:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2012:       assertEquals(54, Node.SLASH_V);
2013:       assertEquals(43, Node.IS_CONSTANT_NAME);
2014:       assertEquals(50, Node.FREE_CALL);
2015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2016:       assertEquals(40, Node.ORIGINALNAME_PROP);
2017:       assertEquals(57, Node.REFLECTED_OBJECT);
2018:       assertEquals(48, Node.DIRECTIVES);
2019:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2021:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2022:       assertEquals(30, Node.VAR_ARGS_NAME);
2023:       assertEquals(4095, Node.COLUMN_MASK);
2024:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2025:       assertEquals(55, Node.INFERRED_FUNCTION);
2026:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2027:       assertEquals(57, Node.LAST_PROP);
2028:       assertEquals(49, Node.DIRECT_EVAL);
2029:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2030:       assertEquals(39, Node.EMPTY_BLOCK);
2031:       assertEquals(53, Node.INPUT_ID);
2032:       assertEquals(36, Node.QUOTED_PROP);
2033:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2034:       assertEquals(52, Node.LENGTH);
2035:       assertEquals(8, Node.FLAG_NO_THROWS);
2036:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2037:       assertEquals(29, Node.JSDOC_INFO_PROP);
2038:       assertEquals(56, Node.CHANGE_TIME);
2039:       assertEquals(37, Node.OPT_ARG_NAME);
2040:       assertEquals(47, Node.IS_DISPATCHER);
2041:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2042:       assertEquals(2, Node.POST_FLAG);
2043:       assertEquals(1, Node.DECR_FLAG);
2044:       assertEquals(12, Node.COLUMN_BITS);
2045:       assertEquals(32, Node.INCRDECR_PROP);
2046:       assertEquals(46, Node.IS_NAMESPACE);
2047:       assertEquals(43, Node.IS_CONSTANT_NAME);
2048:       assertEquals(54, Node.SLASH_V);
2049:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2050:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2051:       assertEquals(50, Node.FREE_CALL);
2052:       assertEquals(57, Node.REFLECTED_OBJECT);
2053:       assertEquals(52, Node.LENGTH);
2054:       assertEquals(40, Node.ORIGINALNAME_PROP);
2055:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2056:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2057:       assertEquals(57, Node.LAST_PROP);
2058:       assertEquals(30, Node.VAR_ARGS_NAME);
2059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2060:       assertEquals(4095, Node.COLUMN_MASK);
2061:       assertEquals(55, Node.INFERRED_FUNCTION);
2062:       assertEquals(49, Node.DIRECT_EVAL);
2063:       assertEquals(48, Node.DIRECTIVES);
2064:       assertEquals(37, Node.OPT_ARG_NAME);
2065:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2066:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2067:       assertEquals(39, Node.EMPTY_BLOCK);
2068:       assertEquals(36, Node.QUOTED_PROP);
2069:       assertEquals(56, Node.CHANGE_TIME);
2070:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2071:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2072:       assertEquals(8, Node.FLAG_NO_THROWS);
2073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2074:       assertEquals(29, Node.JSDOC_INFO_PROP);
2075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2076:       assertEquals(53, Node.INPUT_ID);
2077:       assertEquals(2, Node.POST_FLAG);
2078:       assertEquals(47, Node.IS_DISPATCHER);
2079:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2080:       assertEquals(12, Node.COLUMN_BITS);
2081:       assertEquals(32, Node.INCRDECR_PROP);
2082:       assertEquals(1, Node.DECR_FLAG);
2083:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2084:       assertEquals(43, Node.IS_CONSTANT_NAME);
2085:       assertEquals(50, Node.FREE_CALL);
2086:       assertEquals(46, Node.IS_NAMESPACE);
2087:       assertEquals(54, Node.SLASH_V);
2088:       assertEquals(4095, Node.COLUMN_MASK);
2089:       assertEquals(55, Node.INFERRED_FUNCTION);
2090:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2091:       assertEquals(39, Node.EMPTY_BLOCK);
2092:       assertEquals(48, Node.DIRECTIVES);
2093:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2094:       assertEquals(43, Node.IS_CONSTANT_NAME);
2095:       assertEquals(8, Node.FLAG_NO_THROWS);
2096:       assertEquals(36, Node.QUOTED_PROP);
2097:       assertEquals(50, Node.FREE_CALL);
2098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2099:       assertEquals(57, Node.REFLECTED_OBJECT);
2100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2103:       assertEquals(32, Node.INCRDECR_PROP);
2104:       assertEquals(12, Node.COLUMN_BITS);
2105:       assertEquals(46, Node.IS_NAMESPACE);
2106:       assertEquals(37, Node.OPT_ARG_NAME);
2107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2108:       assertEquals(49, Node.DIRECT_EVAL);
2109:       assertEquals(1, Node.DECR_FLAG);
2110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2112:       assertEquals(56, Node.CHANGE_TIME);
2113:       assertEquals(29, Node.JSDOC_INFO_PROP);
2114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2115:       assertEquals(52, Node.LENGTH);
2116:       assertEquals(53, Node.INPUT_ID);
2117:       assertEquals(54, Node.SLASH_V);
2118:       assertEquals(40, Node.ORIGINALNAME_PROP);
2119:       assertEquals(57, Node.LAST_PROP);
2120:       assertEquals(47, Node.IS_DISPATCHER);
2121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2122:       assertEquals(2, Node.POST_FLAG);
2123:       assertEquals(30, Node.VAR_ARGS_NAME);
2124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2125:       assertEquals(43, Node.IS_CONSTANT_NAME);
2126:       assertEquals(36, Node.QUOTED_PROP);
2127:       assertEquals(4095, Node.COLUMN_MASK);
2128:       assertEquals(37, Node.OPT_ARG_NAME);
2129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2130:       assertEquals(32, Node.INCRDECR_PROP);
2131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2132:       assertEquals(46, Node.IS_NAMESPACE);
2133:       assertEquals(12, Node.COLUMN_BITS);
2134:       assertEquals(50, Node.FREE_CALL);
2135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2136:       assertEquals(1, Node.DECR_FLAG);
2137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2138:       assertEquals(52, Node.LENGTH);
2139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2140:       assertEquals(54, Node.SLASH_V);
2141:       assertEquals(57, Node.REFLECTED_OBJECT);
2142:       assertEquals(30, Node.VAR_ARGS_NAME);
2143:       assertEquals(49, Node.DIRECT_EVAL);
2144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2145:       assertEquals(40, Node.ORIGINALNAME_PROP);
2146:       assertEquals(48, Node.DIRECTIVES);
2147:       assertEquals(8, Node.FLAG_NO_THROWS);
2148:       assertEquals(2, Node.POST_FLAG);
2149:       assertEquals(56, Node.CHANGE_TIME);
2150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2151:       assertEquals(47, Node.IS_DISPATCHER);
2152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2153:       assertEquals(29, Node.JSDOC_INFO_PROP);
2154:       assertEquals(57, Node.LAST_PROP);
2155:       assertEquals(55, Node.INFERRED_FUNCTION);
2156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2158:       assertEquals(39, Node.EMPTY_BLOCK);
2159:       assertEquals(53, Node.INPUT_ID);
2160:       assertEquals(29, Node.JSDOC_INFO_PROP);
2161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2163:       assertEquals(47, Node.IS_DISPATCHER);
2164:       assertEquals(2, Node.POST_FLAG);
2165:       assertEquals(53, Node.INPUT_ID);
2166:       assertEquals(32, Node.INCRDECR_PROP);
2167:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2168:       assertEquals(46, Node.IS_NAMESPACE);
2169:       assertEquals(30, Node.VAR_ARGS_NAME);
2170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2171:       assertEquals(54, Node.SLASH_V);
2172:       assertEquals(43, Node.IS_CONSTANT_NAME);
2173:       assertEquals(40, Node.ORIGINALNAME_PROP);
2174:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2175:       assertEquals(52, Node.LENGTH);
2176:       assertEquals(57, Node.REFLECTED_OBJECT);
2177:       assertEquals(50, Node.FREE_CALL);
2178:       assertEquals(8, Node.FLAG_NO_THROWS);
2179:       assertEquals(39, Node.EMPTY_BLOCK);
2180:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2182:       assertEquals(57, Node.LAST_PROP);
2183:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2184:       assertEquals(1, Node.DECR_FLAG);
2185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2186:       assertEquals(12, Node.COLUMN_BITS);
2187:       assertEquals(4095, Node.COLUMN_MASK);
2188:       assertEquals(55, Node.INFERRED_FUNCTION);
2189:       assertEquals(36, Node.QUOTED_PROP);
2190:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2191:       assertEquals(48, Node.DIRECTIVES);
2192:       assertEquals(56, Node.CHANGE_TIME);
2193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2194:       assertEquals(49, Node.DIRECT_EVAL);
2195:       assertEquals(37, Node.OPT_ARG_NAME);
2196:       
2197:       boolean boolean5 = node7.isFromExterns();
2198:       assertTrue(boolean5 == boolean1);
2199:       assertTrue(boolean5 == boolean0);
2200:       assertTrue(boolean5 == boolean2);
2201:       assertTrue(boolean5 == boolean3);
2202:       assertTrue(boolean5 == boolean4);
2203:       assertFalse(node0.equals((Object)node2));
2204:       assertFalse(node0.equals((Object)node7));
2205:       assertFalse(node0.equals((Object)node5));
2206:       assertFalse(node0.equals((Object)node3));
2207:       assertFalse(node0.equals((Object)node1));
2208:       assertFalse(node0.equals((Object)node4));
2209:       assertFalse(node0.equals((Object)node6));
2210:       assertFalse(node1.equals((Object)node5));
2211:       assertFalse(node1.equals((Object)node0));
2212:       assertFalse(node1.equals((Object)node3));
2213:       assertFalse(node1.equals((Object)node2));
2214:       assertFalse(node1.equals((Object)node7));
2215:       assertFalse(node1.equals((Object)node4));
2216:       assertFalse(node1.equals((Object)node6));
2217:       assertFalse(node3.equals((Object)node0));
2218:       assertFalse(node3.equals((Object)node5));
2219:       assertFalse(node3.equals((Object)node2));
2220:       assertFalse(node3.equals((Object)node7));
2221:       assertFalse(node3.equals((Object)node1));
2222:       assertFalse(node3.equals((Object)node4));
2223:       assertFalse(node3.equals((Object)node6));
2224:       assertFalse(node4.equals((Object)node5));
2225:       assertFalse(node4.equals((Object)node3));
2226:       assertFalse(node4.equals((Object)node7));
2227:       assertFalse(node4.equals((Object)node1));
2228:       assertFalse(node4.equals((Object)node6));
2229:       assertFalse(node4.equals((Object)node0));
2230:       assertFalse(node4.equals((Object)node2));
2231:       assertFalse(node5.equals((Object)node0));
2232:       assertFalse(node5.equals((Object)node7));
2233:       assertFalse(node5.equals((Object)node3));
2234:       assertFalse(node5.equals((Object)node1));
2235:       assertFalse(node5.equals((Object)node6));
2236:       assertFalse(node5.equals((Object)node2));
2237:       assertFalse(node5.equals((Object)node4));
2238:       assertFalse(node6.equals((Object)node3));
2239:       assertFalse(node6.equals((Object)node5));
2240:       assertFalse(node6.equals((Object)node2));
2241:       assertFalse(node6.equals((Object)node0));
2242:       assertFalse(node6.equals((Object)node1));
2243:       assertFalse(node6.equals((Object)node7));
2244:       assertFalse(node6.equals((Object)node4));
2245:       assertFalse(node7.equals((Object)node5));
2246:       assertFalse(node7.equals((Object)node1));
2247:       assertFalse(node7.equals((Object)node0));
2248:       assertFalse(node7.equals((Object)node6));
2249:       assertFalse(node7.equals((Object)node2));
2250:       assertFalse(node7.equals((Object)node4));
2251:       assertFalse(node7.equals((Object)node3));
2252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2253:       assertEquals(39, Node.EMPTY_BLOCK);
2254:       assertEquals(48, Node.DIRECTIVES);
2255:       assertEquals(40, Node.ORIGINALNAME_PROP);
2256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2257:       assertEquals(4095, Node.COLUMN_MASK);
2258:       assertEquals(53, Node.INPUT_ID);
2259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2261:       assertEquals(57, Node.LAST_PROP);
2262:       assertEquals(49, Node.DIRECT_EVAL);
2263:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2264:       assertEquals(55, Node.INFERRED_FUNCTION);
2265:       assertEquals(29, Node.JSDOC_INFO_PROP);
2266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2267:       assertEquals(36, Node.QUOTED_PROP);
2268:       assertEquals(57, Node.REFLECTED_OBJECT);
2269:       assertEquals(52, Node.LENGTH);
2270:       assertEquals(8, Node.FLAG_NO_THROWS);
2271:       assertEquals(46, Node.IS_NAMESPACE);
2272:       assertEquals(56, Node.CHANGE_TIME);
2273:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2274:       assertEquals(37, Node.OPT_ARG_NAME);
2275:       assertEquals(32, Node.INCRDECR_PROP);
2276:       assertEquals(12, Node.COLUMN_BITS);
2277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2278:       assertEquals(47, Node.IS_DISPATCHER);
2279:       assertEquals(2, Node.POST_FLAG);
2280:       assertEquals(30, Node.VAR_ARGS_NAME);
2281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2282:       assertEquals(54, Node.SLASH_V);
2283:       assertEquals(43, Node.IS_CONSTANT_NAME);
2284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2285:       assertEquals(1, Node.DECR_FLAG);
2286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2287:       assertEquals(50, Node.FREE_CALL);
2288:       assertEquals(12, Node.COLUMN_BITS);
2289:       assertEquals(46, Node.IS_NAMESPACE);
2290:       assertEquals(49, Node.DIRECT_EVAL);
2291:       assertEquals(37, Node.OPT_ARG_NAME);
2292:       assertEquals(32, Node.INCRDECR_PROP);
2293:       assertEquals(1, Node.DECR_FLAG);
2294:       assertEquals(2, Node.POST_FLAG);
2295:       assertEquals(57, Node.LAST_PROP);
2296:       assertEquals(47, Node.IS_DISPATCHER);
2297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2298:       assertEquals(30, Node.VAR_ARGS_NAME);
2299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2300:       assertEquals(57, Node.REFLECTED_OBJECT);
2301:       assertEquals(29, Node.JSDOC_INFO_PROP);
2302:       assertEquals(53, Node.INPUT_ID);
2303:       assertEquals(36, Node.QUOTED_PROP);
2304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2305:       assertEquals(8, Node.FLAG_NO_THROWS);
2306:       assertEquals(39, Node.EMPTY_BLOCK);
2307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2308:       assertEquals(56, Node.CHANGE_TIME);
2309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2310:       assertEquals(52, Node.LENGTH);
2311:       assertEquals(4095, Node.COLUMN_MASK);
2312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2313:       assertEquals(55, Node.INFERRED_FUNCTION);
2314:       assertEquals(48, Node.DIRECTIVES);
2315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2317:       assertEquals(40, Node.ORIGINALNAME_PROP);
2318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2320:       assertEquals(54, Node.SLASH_V);
2321:       assertEquals(43, Node.IS_CONSTANT_NAME);
2322:       assertEquals(50, Node.FREE_CALL);
2323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2324:       assertEquals(40, Node.ORIGINALNAME_PROP);
2325:       assertEquals(57, Node.REFLECTED_OBJECT);
2326:       assertEquals(48, Node.DIRECTIVES);
2327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2330:       assertEquals(30, Node.VAR_ARGS_NAME);
2331:       assertEquals(4095, Node.COLUMN_MASK);
2332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2333:       assertEquals(55, Node.INFERRED_FUNCTION);
2334:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2335:       assertEquals(57, Node.LAST_PROP);
2336:       assertEquals(49, Node.DIRECT_EVAL);
2337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2338:       assertEquals(39, Node.EMPTY_BLOCK);
2339:       assertEquals(53, Node.INPUT_ID);
2340:       assertEquals(36, Node.QUOTED_PROP);
2341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2342:       assertEquals(52, Node.LENGTH);
2343:       assertEquals(8, Node.FLAG_NO_THROWS);
2344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2345:       assertEquals(29, Node.JSDOC_INFO_PROP);
2346:       assertEquals(56, Node.CHANGE_TIME);
2347:       assertEquals(37, Node.OPT_ARG_NAME);
2348:       assertEquals(47, Node.IS_DISPATCHER);
2349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2350:       assertEquals(2, Node.POST_FLAG);
2351:       assertEquals(1, Node.DECR_FLAG);
2352:       assertEquals(12, Node.COLUMN_BITS);
2353:       assertEquals(32, Node.INCRDECR_PROP);
2354:       assertEquals(46, Node.IS_NAMESPACE);
2355:       assertEquals(43, Node.IS_CONSTANT_NAME);
2356:       assertEquals(54, Node.SLASH_V);
2357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2359:       assertEquals(50, Node.FREE_CALL);
2360:       assertEquals(57, Node.REFLECTED_OBJECT);
2361:       assertEquals(52, Node.LENGTH);
2362:       assertEquals(40, Node.ORIGINALNAME_PROP);
2363:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2365:       assertEquals(57, Node.LAST_PROP);
2366:       assertEquals(30, Node.VAR_ARGS_NAME);
2367:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2368:       assertEquals(4095, Node.COLUMN_MASK);
2369:       assertEquals(55, Node.INFERRED_FUNCTION);
2370:       assertEquals(49, Node.DIRECT_EVAL);
2371:       assertEquals(48, Node.DIRECTIVES);
2372:       assertEquals(37, Node.OPT_ARG_NAME);
2373:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2375:       assertEquals(39, Node.EMPTY_BLOCK);
2376:       assertEquals(36, Node.QUOTED_PROP);
2377:       assertEquals(56, Node.CHANGE_TIME);
2378:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2380:       assertEquals(8, Node.FLAG_NO_THROWS);
2381:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2382:       assertEquals(29, Node.JSDOC_INFO_PROP);
2383:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2384:       assertEquals(53, Node.INPUT_ID);
2385:       assertEquals(2, Node.POST_FLAG);
2386:       assertEquals(47, Node.IS_DISPATCHER);
2387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2388:       assertEquals(12, Node.COLUMN_BITS);
2389:       assertEquals(32, Node.INCRDECR_PROP);
2390:       assertEquals(1, Node.DECR_FLAG);
2391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2392:       assertEquals(43, Node.IS_CONSTANT_NAME);
2393:       assertEquals(50, Node.FREE_CALL);
2394:       assertEquals(46, Node.IS_NAMESPACE);
2395:       assertEquals(54, Node.SLASH_V);
2396:       assertEquals(4095, Node.COLUMN_MASK);
2397:       assertEquals(55, Node.INFERRED_FUNCTION);
2398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2399:       assertEquals(39, Node.EMPTY_BLOCK);
2400:       assertEquals(48, Node.DIRECTIVES);
2401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2402:       assertEquals(43, Node.IS_CONSTANT_NAME);
2403:       assertEquals(8, Node.FLAG_NO_THROWS);
2404:       assertEquals(36, Node.QUOTED_PROP);
2405:       assertEquals(50, Node.FREE_CALL);
2406:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2407:       assertEquals(57, Node.REFLECTED_OBJECT);
2408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2411:       assertEquals(32, Node.INCRDECR_PROP);
2412:       assertEquals(12, Node.COLUMN_BITS);
2413:       assertEquals(46, Node.IS_NAMESPACE);
2414:       assertEquals(37, Node.OPT_ARG_NAME);
2415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2416:       assertEquals(49, Node.DIRECT_EVAL);
2417:       assertEquals(1, Node.DECR_FLAG);
2418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2420:       assertEquals(56, Node.CHANGE_TIME);
2421:       assertEquals(29, Node.JSDOC_INFO_PROP);
2422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2423:       assertEquals(52, Node.LENGTH);
2424:       assertEquals(53, Node.INPUT_ID);
2425:       assertEquals(54, Node.SLASH_V);
2426:       assertEquals(40, Node.ORIGINALNAME_PROP);
2427:       assertEquals(57, Node.LAST_PROP);
2428:       assertEquals(47, Node.IS_DISPATCHER);
2429:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2430:       assertEquals(2, Node.POST_FLAG);
2431:       assertEquals(30, Node.VAR_ARGS_NAME);
2432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2433:       assertEquals(43, Node.IS_CONSTANT_NAME);
2434:       assertEquals(36, Node.QUOTED_PROP);
2435:       assertEquals(4095, Node.COLUMN_MASK);
2436:       assertEquals(37, Node.OPT_ARG_NAME);
2437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2438:       assertEquals(32, Node.INCRDECR_PROP);
2439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2440:       assertEquals(46, Node.IS_NAMESPACE);
2441:       assertEquals(12, Node.COLUMN_BITS);
2442:       assertEquals(50, Node.FREE_CALL);
2443:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2444:       assertEquals(1, Node.DECR_FLAG);
2445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2446:       assertEquals(52, Node.LENGTH);
2447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2448:       assertEquals(54, Node.SLASH_V);
2449:       assertEquals(57, Node.REFLECTED_OBJECT);
2450:       assertEquals(30, Node.VAR_ARGS_NAME);
2451:       assertEquals(49, Node.DIRECT_EVAL);
2452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2453:       assertEquals(40, Node.ORIGINALNAME_PROP);
2454:       assertEquals(48, Node.DIRECTIVES);
2455:       assertEquals(8, Node.FLAG_NO_THROWS);
2456:       assertEquals(2, Node.POST_FLAG);
2457:       assertEquals(56, Node.CHANGE_TIME);
2458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2459:       assertEquals(47, Node.IS_DISPATCHER);
2460:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2461:       assertEquals(29, Node.JSDOC_INFO_PROP);
2462:       assertEquals(57, Node.LAST_PROP);
2463:       assertEquals(55, Node.INFERRED_FUNCTION);
2464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2466:       assertEquals(39, Node.EMPTY_BLOCK);
2467:       assertEquals(53, Node.INPUT_ID);
2468:       assertEquals(29, Node.JSDOC_INFO_PROP);
2469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2471:       assertEquals(47, Node.IS_DISPATCHER);
2472:       assertEquals(2, Node.POST_FLAG);
2473:       assertEquals(53, Node.INPUT_ID);
2474:       assertEquals(32, Node.INCRDECR_PROP);
2475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2476:       assertEquals(46, Node.IS_NAMESPACE);
2477:       assertEquals(30, Node.VAR_ARGS_NAME);
2478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2479:       assertEquals(54, Node.SLASH_V);
2480:       assertEquals(43, Node.IS_CONSTANT_NAME);
2481:       assertEquals(40, Node.ORIGINALNAME_PROP);
2482:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2483:       assertEquals(52, Node.LENGTH);
2484:       assertEquals(57, Node.REFLECTED_OBJECT);
2485:       assertEquals(50, Node.FREE_CALL);
2486:       assertEquals(8, Node.FLAG_NO_THROWS);
2487:       assertEquals(39, Node.EMPTY_BLOCK);
2488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2490:       assertEquals(57, Node.LAST_PROP);
2491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2492:       assertEquals(1, Node.DECR_FLAG);
2493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2494:       assertEquals(12, Node.COLUMN_BITS);
2495:       assertEquals(4095, Node.COLUMN_MASK);
2496:       assertEquals(55, Node.INFERRED_FUNCTION);
2497:       assertEquals(36, Node.QUOTED_PROP);
2498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2499:       assertEquals(48, Node.DIRECTIVES);
2500:       assertEquals(56, Node.CHANGE_TIME);
2501:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2502:       assertEquals(49, Node.DIRECT_EVAL);
2503:       assertEquals(37, Node.OPT_ARG_NAME);
2504:       assertFalse(boolean5);
2505:       assertNotSame(node0, node2);
2506:       assertNotSame(node1, node5);
2507:       assertNotSame(node1, node3);
2508:       assertNotSame(node1, node7);
2509:       assertNotSame(node1, node4);
2510:       assertNotSame(node1, node6);
2511:       assertNotSame(node3, node5);
2512:       assertNotSame(node3, node7);
2513:       assertNotSame(node3, node1);
2514:       assertNotSame(node3, node4);
2515:       assertNotSame(node3, node6);
2516:       assertNotSame(node4, node5);
2517:       assertNotSame(node4, node3);
2518:       assertNotSame(node4, node7);
2519:       assertNotSame(node4, node1);
2520:       assertNotSame(node4, node6);
2521:       assertNotSame(node5, node7);
2522:       assertNotSame(node5, node3);
2523:       assertNotSame(node5, node1);
2524:       assertNotSame(node5, node6);
2525:       assertNotSame(node5, node4);
2526:       assertNotSame(node6, node3);
2527:       assertNotSame(node6, node5);
2528:       assertNotSame(node6, node1);
2529:       assertNotSame(node6, node7);
2530:       assertNotSame(node6, node4);
2531:       assertNotSame(node7, node5);
2532:       assertNotSame(node7, node1);
2533:       assertNotSame(node7, node6);
2534:       assertNotSame(node7, node4);
2535:       assertNotSame(node7, node3);
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_133_1629223378576/com/google/javascript/rhino/Node_133_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:59 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_133_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_133_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_133_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.JSDocInfo",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.Node$AncestorIterable$1",
337:       "com.google.common.collect.Iterables",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.javascript.rhino.JSTypeExpression",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.JSDocInfo$Marker",
361:       "com.google.common.collect.Platform"
362:     );
363:   }
364: }

[MASTER] 18:02:59.439 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(254, "(|");
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals(254, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals(254, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Node node1 = new Node((-2145), node0, node0, node0, 37, 4095);
assertFalse(node1.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertEquals(254, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isCatch());
assertEquals(155647, node1.getSourcePosition());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals((-2145), node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertEquals(37, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());

Node node2 = Node.newString("^T bi6mc\"24m1h|@{G", 4351, (-668));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotSame(node2, node0);
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isLabel());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());

String string0 = node2.toStringTree();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals("STRING ^T bi6mc\"24m1h|@{G\n", string0);
assertNotSame(node2, node0);
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isIf());

int int0 = node1.getIntProp(254);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, int0);
assertNotSame(node0, node2);

boolean boolean0 = node1.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(boolean0);
assertNotSame(node0, node2);

Node node3 = new Node(516, 48, 38);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean1 = node2.isQuotedString();
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean1);
assertNotSame(node2, node0);

boolean boolean2 = node2.isQuotedString();
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean2);
assertNotSame(node2, node0);

Node node4 = new Node(30, node1, node3, 43, 4095);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node5 = node4.cloneTree();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node0, node2);
assertNotSame(node1, node5);
assertNotSame(node1, node3);
assertNotSame(node1, node4);
assertNotSame(node3, node5);
assertNotSame(node3, node1);
assertNotSame(node3, node4);
assertNotSame(node4, node5);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertNotSame(node5, node4);

boolean boolean3 = node5.isHook();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean3);
assertNotSame(node0, node2);
assertNotSame(node1, node5);
assertNotSame(node1, node3);
assertNotSame(node1, node4);
assertNotSame(node3, node5);
assertNotSame(node3, node1);
assertNotSame(node3, node4);
assertNotSame(node4, node5);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertNotSame(node5, node4);

Node node6 = node1.cloneNode();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node2);
assertNotSame(node1, node5);
assertNotSame(node1, node3);
assertNotSame(node1, node4);
assertNotSame(node1, node6);
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node1);
assertNotSame(node6, node4);

boolean boolean4 = node5.isThrow();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node6));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node6));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean4);
assertNotSame(node0, node2);
assertNotSame(node1, node5);
assertNotSame(node1, node3);
assertNotSame(node1, node4);
assertNotSame(node1, node6);
assertNotSame(node3, node5);
assertNotSame(node3, node1);
assertNotSame(node3, node4);
assertNotSame(node3, node6);
assertNotSame(node4, node5);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertNotSame(node4, node6);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertNotSame(node5, node6);
assertNotSame(node5, node4);

Node node7 = new Node(1, node6, node5, 15, 2207);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node6));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node6));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node7.equals((Object)node5));
assertFalse(node7.equals((Object)node1));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node3));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean5 = node7.isFromExterns();
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node7));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node7));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node6));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node7));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node6));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node7));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node7));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node7));
assertFalse(node6.equals((Object)node4));
assertFalse(node7.equals((Object)node5));
assertFalse(node7.equals((Object)node1));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node3));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(boolean5);
assertNotSame(node0, node2);
assertNotSame(node1, node5);
assertNotSame(node1, node3);
assertNotSame(node1, node7);
assertNotSame(node1, node4);
assertNotSame(node1, node6);
assertNotSame(node3, node5);
assertNotSame(node3, node7);
assertNotSame(node3, node1);
assertNotSame(node3, node4);
assertNotSame(node3, node6);
assertNotSame(node4, node5);
assertNotSame(node4, node3);
assertNotSame(node4, node7);
assertNotSame(node4, node1);
assertNotSame(node4, node6);
assertNotSame(node5, node7);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertNotSame(node5, node6);
assertNotSame(node5, node4);
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node1);
assertNotSame(node6, node7);
assertNotSame(node6, node4);
assertNotSame(node7, node5);
assertNotSame(node7, node1);
assertNotSame(node7, node6);
assertNotSame(node7, node4);
assertNotSame(node7, node3);


[MASTER] 18:03:22.728 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:23.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:23.419 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:23.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:24.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:24.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:24.586 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:24.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:24.972 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:25.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:25.417 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:25.607 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:25.840 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:26.062 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:26.349 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:26.560 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:26.795 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:27.045 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:27.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:28.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:28.752 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:28.952 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:29.146 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/27
* Done!

* Computation finished
