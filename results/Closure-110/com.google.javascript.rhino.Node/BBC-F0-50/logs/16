* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14063
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3946817594
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:20:55.116 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:21:09.151 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:21:30.163 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:27:17.114 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 611
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 1450
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 40240
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 1450
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 1450
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 231
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 12132
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 40
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 985
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 4221
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 116
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 11464
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 2100
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 289
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 289
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 490
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 289
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 2365
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 29235
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 289
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 289
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 282
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 3560
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 4969
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 26447
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 611
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 2661
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 788
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 2765
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 116
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 23094
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 3830
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 470
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 88
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 4799
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 11546
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 611
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1152
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1125
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 230
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 40
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 2421
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 2263
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 16407
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 848
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2363
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 25965
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2100
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 733
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2806
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 193
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 3912
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 40
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 18264
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 39924
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 819
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 115
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 25474
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 40
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 431
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 289
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2268
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 3495
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 386
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 101
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 3081
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 386
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 691
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 691
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 15843
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 19147
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 34703
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 115
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 115
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 2330
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 289
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 39724
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2875
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 871
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 5621
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 1601
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 4625
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 2875
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 86440
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 386
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 7553
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 53032
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 11150
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 388
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 3109
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 116646
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 92
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 2597
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 3830
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3403
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1428
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 202
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3967
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 7255
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 3771
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 2097
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 748
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 115
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 23063
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 8764
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 3126
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 1081
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 31374
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 4042
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 202
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 4156
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 1601
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 2364
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4107
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 4413
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 3443
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 9554
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 96714
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 4248
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 2661
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 86440
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 2056
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 3495
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 2493
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 17817
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1388
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 3309
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 8296
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 2263
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 55
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 733
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 386
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 386
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 5901
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 1601
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 55093
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 3674
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4634
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 4625
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 460
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 6255
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 4779
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 289
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2734
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 5664
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 3674
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1257
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 7922
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 27836
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 7387
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 86781
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 2875
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 2875
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 86440
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 40
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 4485
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 202
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 96714
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 871
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 116646
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 86440
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 3736
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 611
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 34942
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 733
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 25730
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 212
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 3309
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 3736
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 25
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1674
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 226
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 201
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1871
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 65614
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 72
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 40
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 25474
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 157
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1450
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 8296
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 23066
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 115
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 4779
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 13295
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 7297
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 4200
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 289
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 236
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 757
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 258
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3955
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 202
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 386
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 338
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4458
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 2768
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 998
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 2192
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 669: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 115
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 928
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 386
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 263
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 2703
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 202
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 528
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 8276
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 1636
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 9098
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 30510
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 8276
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 40
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 1152
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 11451
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 115
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 611
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 944
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 6662
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 2920
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 4969
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 1764
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 116
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 657
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 4248
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 289
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 893
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 115
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 116
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 657
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 611
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 202
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 40
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 202
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 61110
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 611
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 12912
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 40
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 611
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 611
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 286
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 611
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 40
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 289
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 3674
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 7110
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 202
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 6043
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 6751
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 490
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 202
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 40
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 202
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1498
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 39960
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 5990
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 6536
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 4085
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 3126
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 193
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 3997
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 14163
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 73
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 24306
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 6414
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1901
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 18516
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 490
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 2263
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 1764
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 4101
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 40
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 386
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1152
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 871
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1011
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1150
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 86440
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 5047
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 40
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 3012
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 32333
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 604
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 24058
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 96
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 3448
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 1360
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 115
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 289
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 21141
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 22569
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 490
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 887
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1310
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 25800
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 7110
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 33149
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 29906
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 2597
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 3640
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 506
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 386
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 173
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 24357
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 733
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 2060
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1501
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 611
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 1601
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 289
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 23313
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 51
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 117
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 11964
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 3711
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 109
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 33
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5397
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 5233
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 386
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2734
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2734
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2734
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 18242
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 367
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2734
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 23369
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2734
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2734
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 38
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 419
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 871
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 12658
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 12658
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 289
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 25229
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 40
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 40
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2536
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 39960
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 367
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 202
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 2730
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 372
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 733
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 96
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 489
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 11247
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 38553
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 289
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 733
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 1450
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 3861
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 51
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 2097
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2097
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 118
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 9087
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 2251
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 24207
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 506
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 8215
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 4101
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 12100
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 4101
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 313
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 40
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1011
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 2369
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 24
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 23150
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 733
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 11396
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 3684
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 733
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 2364
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 3557
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 4828
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 70
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1295
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 405
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 23912
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 2097
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4124
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 13544
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 10630
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 115
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 25876
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 40
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 40
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 386
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 490
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 372
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 7736
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 1317
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 733
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 2947
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 1175
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 803
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 40
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 648
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 7055
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 40
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 62
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 720
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 29430
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1387
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1128
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 6662
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 810
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 2744
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 147
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 113
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 3861
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 3830
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 490
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 15914
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 4389
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 35053
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 65914
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 3012
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 65914
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 2768
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 202
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 35053
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 35053
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 44712
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 733
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 386
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 256
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 386
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2100
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 16104
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 386
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 386
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 386
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 386
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 386
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 115
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 16104
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 31965
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 86440
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 32075
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 1152
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 733
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 913
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 733
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 33005
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 39433
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 38362
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 40
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1931
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 386
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 11744
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 4413
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 139
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 33059
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 12148
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 5325
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 637
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 202
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 6934
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 376
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 26998
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 3674
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 4372
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 386
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 676
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 1358
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 835
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 5371
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 3169
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 21830
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 115
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 202
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 334
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 1145
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 386
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 8381
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 115
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 1117
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 386
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 38967
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 611
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 739
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 334
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 334
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 139
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 7129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 417
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 202
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 1201
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 2947
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 23338
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 61110
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 2947
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 202
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 14277
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 286
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2829
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 733
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 43296
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1470
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 116646
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 16661
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 11
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 611
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 78
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2097
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 40
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 2097
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 40
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 40
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1931
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 2263
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 1319
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 310
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 5220
Number of times BBC is called in total: 6230701
* Search finished after 605s and 699 generations, 277153 statements, best individual has fitness: 2868.0
* Minimizing test suite
[MASTER] 10:32:13.025 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 804
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 629
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2159
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 583
* Generated 769 tests with total length 9485
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:33:17.237 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67625% of time used, but only 48/769 tests minimized), falling back to using all assertions
[MASTER] 10:33:36.726 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 10:33:45.309 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 10:33:54.757 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1628159634649/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1628159634649/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:54.757 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:54.757 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:54.761 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 858
[MASTER] 10:33:54.763 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1628159634649/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(0.0, 1255, 1255);
21:       assertEquals(51, Node.STATIC_SOURCE_FILE);
22:       assertEquals(46, Node.IS_NAMESPACE);
23:       assertEquals(12, Node.COLUMN_BITS);
24:       assertEquals(49, Node.DIRECT_EVAL);
25:       assertEquals(57, Node.LAST_PROP);
26:       assertEquals(32, Node.INCRDECR_PROP);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(2, Node.POST_FLAG);
29:       assertEquals(37, Node.OPT_ARG_NAME);
30:       assertEquals(47, Node.IS_DISPATCHER);
31:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(56, Node.CHANGE_TIME);
37:       assertEquals(36, Node.QUOTED_PROP);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(40, Node.ORIGINALNAME_PROP);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertNotNull(node0);
58:       assertFalse(node0.hasMoreThanOneChild());
59:       assertFalse(node0.isContinue());
60:       assertFalse(node0.isOr());
61:       assertEquals(39, node0.getType());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.isReturn());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isGetElem());
67:       assertEquals(5141735, node0.getSourcePosition());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isCast());
70:       assertEquals(1255, node0.getLineno());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isObjectLit());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isFunction());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isName());
85:       assertFalse(node0.isBreak());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isCall());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.hasChildren());
90:       assertFalse(node0.isDebugger());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.isString());
93:       assertFalse(node0.isWhile());
94:       assertFalse(node0.isGetProp());
95:       assertTrue(node0.isNumber());
96:       assertFalse(node0.isIn());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isSwitch());
99:       assertFalse(node0.isIf());
100:       assertFalse(node0.isDelProp());
101:       assertFalse(node0.isThrow());
102:       assertFalse(node0.isFalse());
103:       assertFalse(node0.isInc());
104:       assertFalse(node0.isDefaultCase());
105:       assertFalse(node0.isEmpty());
106:       assertFalse(node0.isCatch());
107:       assertFalse(node0.isInstanceOf());
108:       assertFalse(node0.isWith());
109:       assertEquals(0, node0.getChildCount());
110:       assertFalse(node0.isRegExp());
111:       assertFalse(node0.isParamList());
112:       assertEquals(1255, node0.getCharno());
113:       assertFalse(node0.isArrayLit());
114:       assertFalse(node0.isHook());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isFor());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isGetterDef());
119:       assertFalse(node0.isScript());
120:       assertFalse(node0.isThis());
121:       assertFalse(node0.isTry());
122:       assertFalse(node0.isCase());
123:       assertFalse(node0.hasOneChild());
124:       
125:       String string0 = node0.getSourceFileName();
126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(12, Node.COLUMN_BITS);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(57, Node.LAST_PROP);
131:       assertEquals(32, Node.INCRDECR_PROP);
132:       assertEquals(1, Node.DECR_FLAG);
133:       assertEquals(2, Node.POST_FLAG);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(47, Node.IS_DISPATCHER);
136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
141:       assertEquals(56, Node.CHANGE_TIME);
142:       assertEquals(36, Node.QUOTED_PROP);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(39, Node.EMPTY_BLOCK);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(29, Node.JSDOC_INFO_PROP);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(40, Node.ORIGINALNAME_PROP);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
162:       assertNull(string0);
163:       assertFalse(node0.hasMoreThanOneChild());
164:       assertFalse(node0.isContinue());
165:       assertFalse(node0.isOr());
166:       assertEquals(39, node0.getType());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isReturn());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isGetElem());
172:       assertEquals(5141735, node0.getSourcePosition());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isCast());
175:       assertEquals(1255, node0.getLineno());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isObjectLit());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isNot());
184:       assertFalse(node0.isComma());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isBreak());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isCall());
193:       assertFalse(node0.isAssign());
194:       assertFalse(node0.hasChildren());
195:       assertFalse(node0.isDebugger());
196:       assertFalse(node0.isDec());
197:       assertFalse(node0.isString());
198:       assertFalse(node0.isWhile());
199:       assertFalse(node0.isGetProp());
200:       assertTrue(node0.isNumber());
201:       assertFalse(node0.isIn());
202:       assertFalse(node0.isNE());
203:       assertFalse(node0.isSwitch());
204:       assertFalse(node0.isIf());
205:       assertFalse(node0.isDelProp());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.isFalse());
208:       assertFalse(node0.isInc());
209:       assertFalse(node0.isDefaultCase());
210:       assertFalse(node0.isEmpty());
211:       assertFalse(node0.isCatch());
212:       assertFalse(node0.isInstanceOf());
213:       assertFalse(node0.isWith());
214:       assertEquals(0, node0.getChildCount());
215:       assertFalse(node0.isRegExp());
216:       assertFalse(node0.isParamList());
217:       assertEquals(1255, node0.getCharno());
218:       assertFalse(node0.isArrayLit());
219:       assertFalse(node0.isHook());
220:       assertFalse(node0.isStringKey());
221:       assertFalse(node0.isFor());
222:       assertFalse(node0.isBlock());
223:       assertFalse(node0.isGetterDef());
224:       assertFalse(node0.isScript());
225:       assertFalse(node0.isThis());
226:       assertFalse(node0.isTry());
227:       assertFalse(node0.isCase());
228:       assertFalse(node0.hasOneChild());
229:       
230:       node0.detachChildren();
231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
232:       assertEquals(46, Node.IS_NAMESPACE);
233:       assertEquals(12, Node.COLUMN_BITS);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(57, Node.LAST_PROP);
236:       assertEquals(32, Node.INCRDECR_PROP);
237:       assertEquals(1, Node.DECR_FLAG);
238:       assertEquals(2, Node.POST_FLAG);
239:       assertEquals(37, Node.OPT_ARG_NAME);
240:       assertEquals(47, Node.IS_DISPATCHER);
241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
242:       assertEquals(30, Node.VAR_ARGS_NAME);
243:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(56, Node.CHANGE_TIME);
247:       assertEquals(36, Node.QUOTED_PROP);
248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
249:       assertEquals(39, Node.EMPTY_BLOCK);
250:       assertEquals(53, Node.INPUT_ID);
251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
252:       assertEquals(29, Node.JSDOC_INFO_PROP);
253:       assertEquals(52, Node.LENGTH);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(4095, Node.COLUMN_MASK);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(40, Node.ORIGINALNAME_PROP);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(43, Node.IS_CONSTANT_NAME);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertFalse(node0.hasMoreThanOneChild());
268:       assertFalse(node0.isContinue());
269:       assertFalse(node0.isOr());
270:       assertEquals(39, node0.getType());
271:       assertFalse(node0.isLabel());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.isTypeOf());
274:       assertFalse(node0.isLabelName());
275:       assertFalse(node0.isGetElem());
276:       assertEquals(5141735, node0.getSourcePosition());
277:       assertFalse(node0.isVar());
278:       assertFalse(node0.isCast());
279:       assertEquals(1255, node0.getLineno());
280:       assertFalse(node0.isSetterDef());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isDo());
284:       assertFalse(node0.isNew());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isAnd());
287:       assertFalse(node0.isNot());
288:       assertFalse(node0.isComma());
289:       assertFalse(node0.isNull());
290:       assertFalse(node0.isFunction());
291:       assertFalse(node0.isExprResult());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isName());
294:       assertFalse(node0.isBreak());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isCall());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.hasChildren());
299:       assertFalse(node0.isDebugger());
300:       assertFalse(node0.isDec());
301:       assertFalse(node0.isString());
302:       assertFalse(node0.isWhile());
303:       assertFalse(node0.isGetProp());
304:       assertTrue(node0.isNumber());
305:       assertFalse(node0.isIn());
306:       assertFalse(node0.isNE());
307:       assertFalse(node0.isSwitch());
308:       assertFalse(node0.isIf());
309:       assertFalse(node0.isDelProp());
310:       assertFalse(node0.isThrow());
311:       assertFalse(node0.isFalse());
312:       assertFalse(node0.isInc());
313:       assertFalse(node0.isDefaultCase());
314:       assertFalse(node0.isEmpty());
315:       assertFalse(node0.isCatch());
316:       assertFalse(node0.isInstanceOf());
317:       assertFalse(node0.isWith());
318:       assertEquals(0, node0.getChildCount());
319:       assertFalse(node0.isRegExp());
320:       assertFalse(node0.isParamList());
321:       assertEquals(1255, node0.getCharno());
322:       assertFalse(node0.isArrayLit());
323:       assertFalse(node0.isHook());
324:       assertFalse(node0.isStringKey());
325:       assertFalse(node0.isFor());
326:       assertFalse(node0.isBlock());
327:       assertFalse(node0.isGetterDef());
328:       assertFalse(node0.isScript());
329:       assertFalse(node0.isThis());
330:       assertFalse(node0.isTry());
331:       assertFalse(node0.isCase());
332:       assertFalse(node0.hasOneChild());
333:       
334:       boolean boolean0 = node0.isInc();
335:       assertFalse(boolean0);
336:       assertEquals(51, Node.STATIC_SOURCE_FILE);
337:       assertEquals(46, Node.IS_NAMESPACE);
338:       assertEquals(12, Node.COLUMN_BITS);
339:       assertEquals(49, Node.DIRECT_EVAL);
340:       assertEquals(57, Node.LAST_PROP);
341:       assertEquals(32, Node.INCRDECR_PROP);
342:       assertEquals(1, Node.DECR_FLAG);
343:       assertEquals(2, Node.POST_FLAG);
344:       assertEquals(37, Node.OPT_ARG_NAME);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
351:       assertEquals(56, Node.CHANGE_TIME);
352:       assertEquals(36, Node.QUOTED_PROP);
353:       assertEquals(15, Node.NO_SIDE_EFFECTS);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(53, Node.INPUT_ID);
356:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
357:       assertEquals(29, Node.JSDOC_INFO_PROP);
358:       assertEquals(52, Node.LENGTH);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(4095, Node.COLUMN_MASK);
362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
363:       assertEquals(48, Node.DIRECTIVES);
364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(40, Node.ORIGINALNAME_PROP);
367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(54, Node.SLASH_V);
370:       assertEquals(50, Node.FREE_CALL);
371:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
372:       assertFalse(node0.hasMoreThanOneChild());
373:       assertFalse(node0.isContinue());
374:       assertFalse(node0.isOr());
375:       assertEquals(39, node0.getType());
376:       assertFalse(node0.isLabel());
377:       assertFalse(node0.isReturn());
378:       assertFalse(node0.isTypeOf());
379:       assertFalse(node0.isLabelName());
380:       assertFalse(node0.isGetElem());
381:       assertEquals(5141735, node0.getSourcePosition());
382:       assertFalse(node0.isVar());
383:       assertFalse(node0.isCast());
384:       assertEquals(1255, node0.getLineno());
385:       assertFalse(node0.isSetterDef());
386:       assertFalse(node0.isAdd());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isDo());
389:       assertFalse(node0.isNew());
390:       assertFalse(node0.isObjectLit());
391:       assertFalse(node0.isAnd());
392:       assertFalse(node0.isNot());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isNull());
395:       assertFalse(node0.isFunction());
396:       assertFalse(node0.isExprResult());
397:       assertFalse(node0.isTrue());
398:       assertFalse(node0.isName());
399:       assertFalse(node0.isBreak());
400:       assertFalse(node0.isVoid());
401:       assertFalse(node0.isCall());
402:       assertFalse(node0.isAssign());
403:       assertFalse(node0.hasChildren());
404:       assertFalse(node0.isDebugger());
405:       assertFalse(node0.isDec());
406:       assertFalse(node0.isString());
407:       assertFalse(node0.isWhile());
408:       assertFalse(node0.isGetProp());
409:       assertTrue(node0.isNumber());
410:       assertFalse(node0.isIn());
411:       assertFalse(node0.isNE());
412:       assertFalse(node0.isSwitch());
413:       assertFalse(node0.isIf());
414:       assertFalse(node0.isDelProp());
415:       assertFalse(node0.isThrow());
416:       assertFalse(node0.isFalse());
417:       assertFalse(node0.isInc());
418:       assertFalse(node0.isDefaultCase());
419:       assertFalse(node0.isEmpty());
420:       assertFalse(node0.isCatch());
421:       assertFalse(node0.isInstanceOf());
422:       assertFalse(node0.isWith());
423:       assertEquals(0, node0.getChildCount());
424:       assertFalse(node0.isRegExp());
425:       assertFalse(node0.isParamList());
426:       assertEquals(1255, node0.getCharno());
427:       assertFalse(node0.isArrayLit());
428:       assertFalse(node0.isHook());
429:       assertFalse(node0.isStringKey());
430:       assertFalse(node0.isFor());
431:       assertFalse(node0.isBlock());
432:       assertFalse(node0.isGetterDef());
433:       assertFalse(node0.isScript());
434:       assertFalse(node0.isThis());
435:       assertFalse(node0.isTry());
436:       assertFalse(node0.isCase());
437:       assertFalse(node0.hasOneChild());
438:       
439:       Node node1 = new Node(3102, 64, 36);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
442:       assertEquals(57, Node.REFLECTED_OBJECT);
443:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
444:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
445:       assertEquals(48, Node.DIRECTIVES);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(40, Node.ORIGINALNAME_PROP);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertEquals(49, Node.DIRECT_EVAL);
450:       assertEquals(30, Node.VAR_ARGS_NAME);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(57, Node.LAST_PROP);
453:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
454:       assertEquals(53, Node.INPUT_ID);
455:       assertEquals(52, Node.LENGTH);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(8, Node.FLAG_NO_THROWS);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
460:       assertEquals(55, Node.INFERRED_FUNCTION);
461:       assertEquals(29, Node.JSDOC_INFO_PROP);
462:       assertEquals(47, Node.IS_DISPATCHER);
463:       assertEquals(56, Node.CHANGE_TIME);
464:       assertEquals(37, Node.OPT_ARG_NAME);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(1, Node.DECR_FLAG);
468:       assertEquals(43, Node.IS_CONSTANT_NAME);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(46, Node.IS_NAMESPACE);
472:       assertEquals(54, Node.SLASH_V);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
476:       assertNotNull(node1);
477:       assertFalse(node1.isName());
478:       assertFalse(node1.isStringKey());
479:       assertFalse(node1.isCall());
480:       assertFalse(node1.isNull());
481:       assertFalse(node1.isParamList());
482:       assertFalse(node1.isDo());
483:       assertEquals(0, node1.getChildCount());
484:       assertFalse(node1.isContinue());
485:       assertFalse(node1.isFunction());
486:       assertFalse(node1.isLabel());
487:       assertFalse(node1.isAdd());
488:       assertFalse(node1.isNew());
489:       assertFalse(node1.isSetterDef());
490:       assertFalse(node1.isVar());
491:       assertFalse(node1.isDefaultCase());
492:       assertFalse(node1.isAssignAdd());
493:       assertFalse(node1.isEmpty());
494:       assertFalse(node1.isAssign());
495:       assertEquals(262180, node1.getSourcePosition());
496:       assertFalse(node1.isGetElem());
497:       assertFalse(node1.hasChildren());
498:       assertFalse(node1.isTypeOf());
499:       assertFalse(node1.isCast());
500:       assertFalse(node1.isDec());
501:       assertFalse(node1.isOr());
502:       assertFalse(node1.isDebugger());
503:       assertFalse(node1.isExprResult());
504:       assertFalse(node1.isTrue());
505:       assertFalse(node1.isDelProp());
506:       assertFalse(node1.isVoid());
507:       assertFalse(node1.isNot());
508:       assertFalse(node1.isString());
509:       assertFalse(node1.isObjectLit());
510:       assertFalse(node1.isReturn());
511:       assertFalse(node1.isGetProp());
512:       assertFalse(node1.isWhile());
513:       assertFalse(node1.isThrow());
514:       assertFalse(node1.isBreak());
515:       assertFalse(node1.isComma());
516:       assertFalse(node1.isFalse());
517:       assertEquals(64, node1.getLineno());
518:       assertFalse(node1.isAnd());
519:       assertFalse(node1.isSwitch());
520:       assertEquals(36, node1.getCharno());
521:       assertFalse(node1.isIn());
522:       assertFalse(node1.isInc());
523:       assertFalse(node1.isFor());
524:       assertFalse(node1.isLabelName());
525:       assertFalse(node1.isGetterDef());
526:       assertFalse(node1.isNumber());
527:       assertEquals(3102, node1.getType());
528:       assertFalse(node1.isArrayLit());
529:       assertFalse(node1.isNE());
530:       assertFalse(node1.isIf());
531:       assertFalse(node1.isCase());
532:       assertFalse(node1.isRegExp());
533:       assertFalse(node1.isScript());
534:       assertFalse(node1.isCatch());
535:       assertFalse(node1.isInstanceOf());
536:       assertFalse(node1.isWith());
537:       assertFalse(node1.hasMoreThanOneChild());
538:       assertFalse(node1.isBlock());
539:       assertFalse(node1.isTry());
540:       assertFalse(node1.isHook());
541:       assertFalse(node1.isThis());
542:       assertFalse(node1.hasOneChild());
543:       assertFalse(node1.equals((Object)node0));
544:       
545:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
546:       assertEquals(51, Node.STATIC_SOURCE_FILE);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(12, Node.COLUMN_BITS);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(57, Node.LAST_PROP);
551:       assertEquals(32, Node.INCRDECR_PROP);
552:       assertEquals(1, Node.DECR_FLAG);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(37, Node.OPT_ARG_NAME);
555:       assertEquals(47, Node.IS_DISPATCHER);
556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
561:       assertEquals(56, Node.CHANGE_TIME);
562:       assertEquals(36, Node.QUOTED_PROP);
563:       assertEquals(15, Node.NO_SIDE_EFFECTS);
564:       assertEquals(39, Node.EMPTY_BLOCK);
565:       assertEquals(53, Node.INPUT_ID);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(8, Node.FLAG_NO_THROWS);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(4095, Node.COLUMN_MASK);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
578:       assertEquals(43, Node.IS_CONSTANT_NAME);
579:       assertEquals(54, Node.SLASH_V);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
582:       assertEquals(50, Node.FREE_CALL);
583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
584:       assertEquals(57, Node.REFLECTED_OBJECT);
585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
586:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(4095, Node.COLUMN_MASK);
589:       assertEquals(40, Node.ORIGINALNAME_PROP);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(49, Node.DIRECT_EVAL);
592:       assertEquals(30, Node.VAR_ARGS_NAME);
593:       assertEquals(36, Node.QUOTED_PROP);
594:       assertEquals(57, Node.LAST_PROP);
595:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(52, Node.LENGTH);
598:       assertEquals(15, Node.NO_SIDE_EFFECTS);
599:       assertEquals(8, Node.FLAG_NO_THROWS);
600:       assertEquals(39, Node.EMPTY_BLOCK);
601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
602:       assertEquals(55, Node.INFERRED_FUNCTION);
603:       assertEquals(29, Node.JSDOC_INFO_PROP);
604:       assertEquals(47, Node.IS_DISPATCHER);
605:       assertEquals(56, Node.CHANGE_TIME);
606:       assertEquals(37, Node.OPT_ARG_NAME);
607:       assertEquals(2, Node.POST_FLAG);
608:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
609:       assertEquals(1, Node.DECR_FLAG);
610:       assertEquals(43, Node.IS_CONSTANT_NAME);
611:       assertEquals(51, Node.STATIC_SOURCE_FILE);
612:       assertEquals(12, Node.COLUMN_BITS);
613:       assertEquals(46, Node.IS_NAMESPACE);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(32, Node.INCRDECR_PROP);
616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
617:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
618:       assertNotNull(node_NodeMismatch0);
619:       assertFalse(node0.hasMoreThanOneChild());
620:       assertFalse(node0.isContinue());
621:       assertFalse(node0.isOr());
622:       assertEquals(39, node0.getType());
623:       assertFalse(node0.isLabel());
624:       assertFalse(node0.isReturn());
625:       assertFalse(node0.isTypeOf());
626:       assertFalse(node0.isLabelName());
627:       assertFalse(node0.isGetElem());
628:       assertEquals(5141735, node0.getSourcePosition());
629:       assertFalse(node0.isVar());
630:       assertFalse(node0.isCast());
631:       assertEquals(1255, node0.getLineno());
632:       assertFalse(node0.isSetterDef());
633:       assertFalse(node0.isAdd());
634:       assertFalse(node0.isAssignAdd());
635:       assertFalse(node0.isDo());
636:       assertFalse(node0.isNew());
637:       assertFalse(node0.isObjectLit());
638:       assertFalse(node0.isAnd());
639:       assertFalse(node0.isNot());
640:       assertFalse(node0.isComma());
641:       assertFalse(node0.isNull());
642:       assertFalse(node0.isFunction());
643:       assertFalse(node0.isExprResult());
644:       assertFalse(node0.isTrue());
645:       assertFalse(node0.isName());
646:       assertFalse(node0.isBreak());
647:       assertFalse(node0.isVoid());
648:       assertFalse(node0.isCall());
649:       assertFalse(node0.isAssign());
650:       assertFalse(node0.hasChildren());
651:       assertFalse(node0.isDebugger());
652:       assertFalse(node0.isDec());
653:       assertFalse(node0.isString());
654:       assertFalse(node0.isWhile());
655:       assertFalse(node0.isGetProp());
656:       assertTrue(node0.isNumber());
657:       assertFalse(node0.isIn());
658:       assertFalse(node0.isNE());
659:       assertFalse(node0.isSwitch());
660:       assertFalse(node0.isIf());
661:       assertFalse(node0.isDelProp());
662:       assertFalse(node0.isThrow());
663:       assertFalse(node0.isFalse());
664:       assertFalse(node0.isInc());
665:       assertFalse(node0.isDefaultCase());
666:       assertFalse(node0.isEmpty());
667:       assertFalse(node0.isCatch());
668:       assertFalse(node0.isInstanceOf());
669:       assertFalse(node0.isWith());
670:       assertEquals(0, node0.getChildCount());
671:       assertFalse(node0.isRegExp());
672:       assertFalse(node0.isParamList());
673:       assertEquals(1255, node0.getCharno());
674:       assertFalse(node0.isArrayLit());
675:       assertFalse(node0.isHook());
676:       assertFalse(node0.isStringKey());
677:       assertFalse(node0.isFor());
678:       assertFalse(node0.isBlock());
679:       assertFalse(node0.isGetterDef());
680:       assertFalse(node0.isScript());
681:       assertFalse(node0.isThis());
682:       assertFalse(node0.isTry());
683:       assertFalse(node0.isCase());
684:       assertFalse(node0.hasOneChild());
685:       assertFalse(node1.isName());
686:       assertFalse(node1.isStringKey());
687:       assertFalse(node1.isCall());
688:       assertFalse(node1.isNull());
689:       assertFalse(node1.isParamList());
690:       assertFalse(node1.isDo());
691:       assertEquals(0, node1.getChildCount());
692:       assertFalse(node1.isContinue());
693:       assertFalse(node1.isFunction());
694:       assertFalse(node1.isLabel());
695:       assertFalse(node1.isAdd());
696:       assertFalse(node1.isNew());
697:       assertFalse(node1.isSetterDef());
698:       assertFalse(node1.isVar());
699:       assertFalse(node1.isDefaultCase());
700:       assertFalse(node1.isAssignAdd());
701:       assertFalse(node1.isEmpty());
702:       assertFalse(node1.isAssign());
703:       assertEquals(262180, node1.getSourcePosition());
704:       assertFalse(node1.isGetElem());
705:       assertFalse(node1.hasChildren());
706:       assertFalse(node1.isTypeOf());
707:       assertFalse(node1.isCast());
708:       assertFalse(node1.isDec());
709:       assertFalse(node1.isOr());
710:       assertFalse(node1.isDebugger());
711:       assertFalse(node1.isExprResult());
712:       assertFalse(node1.isTrue());
713:       assertFalse(node1.isDelProp());
714:       assertFalse(node1.isVoid());
715:       assertFalse(node1.isNot());
716:       assertFalse(node1.isString());
717:       assertFalse(node1.isObjectLit());
718:       assertFalse(node1.isReturn());
719:       assertFalse(node1.isGetProp());
720:       assertFalse(node1.isWhile());
721:       assertFalse(node1.isThrow());
722:       assertFalse(node1.isBreak());
723:       assertFalse(node1.isComma());
724:       assertFalse(node1.isFalse());
725:       assertEquals(64, node1.getLineno());
726:       assertFalse(node1.isAnd());
727:       assertFalse(node1.isSwitch());
728:       assertEquals(36, node1.getCharno());
729:       assertFalse(node1.isIn());
730:       assertFalse(node1.isInc());
731:       assertFalse(node1.isFor());
732:       assertFalse(node1.isLabelName());
733:       assertFalse(node1.isGetterDef());
734:       assertFalse(node1.isNumber());
735:       assertEquals(3102, node1.getType());
736:       assertFalse(node1.isArrayLit());
737:       assertFalse(node1.isNE());
738:       assertFalse(node1.isIf());
739:       assertFalse(node1.isCase());
740:       assertFalse(node1.isRegExp());
741:       assertFalse(node1.isScript());
742:       assertFalse(node1.isCatch());
743:       assertFalse(node1.isInstanceOf());
744:       assertFalse(node1.isWith());
745:       assertFalse(node1.hasMoreThanOneChild());
746:       assertFalse(node1.isBlock());
747:       assertFalse(node1.isTry());
748:       assertFalse(node1.isHook());
749:       assertFalse(node1.isThis());
750:       assertFalse(node1.hasOneChild());
751:       assertFalse(node0.equals((Object)node1));
752:       assertFalse(node1.equals((Object)node0));
753:       
754:       Iterable<Node> iterable0 = node0.children();
755:       assertEquals(51, Node.STATIC_SOURCE_FILE);
756:       assertEquals(46, Node.IS_NAMESPACE);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(49, Node.DIRECT_EVAL);
759:       assertEquals(57, Node.LAST_PROP);
760:       assertEquals(32, Node.INCRDECR_PROP);
761:       assertEquals(1, Node.DECR_FLAG);
762:       assertEquals(2, Node.POST_FLAG);
763:       assertEquals(37, Node.OPT_ARG_NAME);
764:       assertEquals(47, Node.IS_DISPATCHER);
765:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
766:       assertEquals(30, Node.VAR_ARGS_NAME);
767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
768:       assertEquals(57, Node.REFLECTED_OBJECT);
769:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
770:       assertEquals(56, Node.CHANGE_TIME);
771:       assertEquals(36, Node.QUOTED_PROP);
772:       assertEquals(15, Node.NO_SIDE_EFFECTS);
773:       assertEquals(39, Node.EMPTY_BLOCK);
774:       assertEquals(53, Node.INPUT_ID);
775:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(52, Node.LENGTH);
778:       assertEquals(8, Node.FLAG_NO_THROWS);
779:       assertEquals(55, Node.INFERRED_FUNCTION);
780:       assertEquals(4095, Node.COLUMN_MASK);
781:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
782:       assertEquals(48, Node.DIRECTIVES);
783:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
785:       assertEquals(40, Node.ORIGINALNAME_PROP);
786:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
787:       assertEquals(43, Node.IS_CONSTANT_NAME);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(50, Node.FREE_CALL);
790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
791:       assertNotNull(iterable0);
792:       assertFalse(node0.hasMoreThanOneChild());
793:       assertFalse(node0.isContinue());
794:       assertFalse(node0.isOr());
795:       assertEquals(39, node0.getType());
796:       assertFalse(node0.isLabel());
797:       assertFalse(node0.isReturn());
798:       assertFalse(node0.isTypeOf());
799:       assertFalse(node0.isLabelName());
800:       assertFalse(node0.isGetElem());
801:       assertEquals(5141735, node0.getSourcePosition());
802:       assertFalse(node0.isVar());
803:       assertFalse(node0.isCast());
804:       assertEquals(1255, node0.getLineno());
805:       assertFalse(node0.isSetterDef());
806:       assertFalse(node0.isAdd());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isDo());
809:       assertFalse(node0.isNew());
810:       assertFalse(node0.isObjectLit());
811:       assertFalse(node0.isAnd());
812:       assertFalse(node0.isNot());
813:       assertFalse(node0.isComma());
814:       assertFalse(node0.isNull());
815:       assertFalse(node0.isFunction());
816:       assertFalse(node0.isExprResult());
817:       assertFalse(node0.isTrue());
818:       assertFalse(node0.isName());
819:       assertFalse(node0.isBreak());
820:       assertFalse(node0.isVoid());
821:       assertFalse(node0.isCall());
822:       assertFalse(node0.isAssign());
823:       assertFalse(node0.hasChildren());
824:       assertFalse(node0.isDebugger());
825:       assertFalse(node0.isDec());
826:       assertFalse(node0.isString());
827:       assertFalse(node0.isWhile());
828:       assertFalse(node0.isGetProp());
829:       assertTrue(node0.isNumber());
830:       assertFalse(node0.isIn());
831:       assertFalse(node0.isNE());
832:       assertFalse(node0.isSwitch());
833:       assertFalse(node0.isIf());
834:       assertFalse(node0.isDelProp());
835:       assertFalse(node0.isThrow());
836:       assertFalse(node0.isFalse());
837:       assertFalse(node0.isInc());
838:       assertFalse(node0.isDefaultCase());
839:       assertFalse(node0.isEmpty());
840:       assertFalse(node0.isCatch());
841:       assertFalse(node0.isInstanceOf());
842:       assertFalse(node0.isWith());
843:       assertEquals(0, node0.getChildCount());
844:       assertFalse(node0.isRegExp());
845:       assertFalse(node0.isParamList());
846:       assertEquals(1255, node0.getCharno());
847:       assertFalse(node0.isArrayLit());
848:       assertFalse(node0.isHook());
849:       assertFalse(node0.isStringKey());
850:       assertFalse(node0.isFor());
851:       assertFalse(node0.isBlock());
852:       assertFalse(node0.isGetterDef());
853:       assertFalse(node0.isScript());
854:       assertFalse(node0.isThis());
855:       assertFalse(node0.isTry());
856:       assertFalse(node0.isCase());
857:       assertFalse(node0.hasOneChild());
858:       assertFalse(iterable0.contains(node0));
859:       assertFalse(node0.equals((Object)node1));
860:       
861:       boolean boolean1 = node0.isQualifiedName();
862:       assertFalse(boolean1);
863:       assertEquals(51, Node.STATIC_SOURCE_FILE);
864:       assertEquals(46, Node.IS_NAMESPACE);
865:       assertEquals(12, Node.COLUMN_BITS);
866:       assertEquals(49, Node.DIRECT_EVAL);
867:       assertEquals(57, Node.LAST_PROP);
868:       assertEquals(32, Node.INCRDECR_PROP);
869:       assertEquals(1, Node.DECR_FLAG);
870:       assertEquals(2, Node.POST_FLAG);
871:       assertEquals(37, Node.OPT_ARG_NAME);
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
874:       assertEquals(30, Node.VAR_ARGS_NAME);
875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
876:       assertEquals(57, Node.REFLECTED_OBJECT);
877:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
878:       assertEquals(56, Node.CHANGE_TIME);
879:       assertEquals(36, Node.QUOTED_PROP);
880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
881:       assertEquals(39, Node.EMPTY_BLOCK);
882:       assertEquals(53, Node.INPUT_ID);
883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
884:       assertEquals(29, Node.JSDOC_INFO_PROP);
885:       assertEquals(52, Node.LENGTH);
886:       assertEquals(8, Node.FLAG_NO_THROWS);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(4095, Node.COLUMN_MASK);
889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
890:       assertEquals(48, Node.DIRECTIVES);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       assertEquals(43, Node.IS_CONSTANT_NAME);
896:       assertEquals(54, Node.SLASH_V);
897:       assertEquals(50, Node.FREE_CALL);
898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
899:       assertFalse(node0.hasMoreThanOneChild());
900:       assertFalse(node0.isContinue());
901:       assertFalse(node0.isOr());
902:       assertEquals(39, node0.getType());
903:       assertFalse(node0.isLabel());
904:       assertFalse(node0.isReturn());
905:       assertFalse(node0.isTypeOf());
906:       assertFalse(node0.isLabelName());
907:       assertFalse(node0.isGetElem());
908:       assertEquals(5141735, node0.getSourcePosition());
909:       assertFalse(node0.isVar());
910:       assertFalse(node0.isCast());
911:       assertEquals(1255, node0.getLineno());
912:       assertFalse(node0.isSetterDef());
913:       assertFalse(node0.isAdd());
914:       assertFalse(node0.isAssignAdd());
915:       assertFalse(node0.isDo());
916:       assertFalse(node0.isNew());
917:       assertFalse(node0.isObjectLit());
918:       assertFalse(node0.isAnd());
919:       assertFalse(node0.isNot());
920:       assertFalse(node0.isComma());
921:       assertFalse(node0.isNull());
922:       assertFalse(node0.isFunction());
923:       assertFalse(node0.isExprResult());
924:       assertFalse(node0.isTrue());
925:       assertFalse(node0.isName());
926:       assertFalse(node0.isBreak());
927:       assertFalse(node0.isVoid());
928:       assertFalse(node0.isCall());
929:       assertFalse(node0.isAssign());
930:       assertFalse(node0.hasChildren());
931:       assertFalse(node0.isDebugger());
932:       assertFalse(node0.isDec());
933:       assertFalse(node0.isString());
934:       assertFalse(node0.isWhile());
935:       assertFalse(node0.isGetProp());
936:       assertTrue(node0.isNumber());
937:       assertFalse(node0.isIn());
938:       assertFalse(node0.isNE());
939:       assertFalse(node0.isSwitch());
940:       assertFalse(node0.isIf());
941:       assertFalse(node0.isDelProp());
942:       assertFalse(node0.isThrow());
943:       assertFalse(node0.isFalse());
944:       assertFalse(node0.isInc());
945:       assertFalse(node0.isDefaultCase());
946:       assertFalse(node0.isEmpty());
947:       assertFalse(node0.isCatch());
948:       assertFalse(node0.isInstanceOf());
949:       assertFalse(node0.isWith());
950:       assertEquals(0, node0.getChildCount());
951:       assertFalse(node0.isRegExp());
952:       assertFalse(node0.isParamList());
953:       assertEquals(1255, node0.getCharno());
954:       assertFalse(node0.isArrayLit());
955:       assertFalse(node0.isHook());
956:       assertFalse(node0.isStringKey());
957:       assertFalse(node0.isFor());
958:       assertFalse(node0.isBlock());
959:       assertFalse(node0.isGetterDef());
960:       assertFalse(node0.isScript());
961:       assertFalse(node0.isThis());
962:       assertFalse(node0.isTry());
963:       assertFalse(node0.isCase());
964:       assertFalse(node0.hasOneChild());
965:       assertFalse(node0.equals((Object)node1));
966:       assertTrue(boolean1 == boolean0);
967:       
968:       node0.setSourceEncodedPosition(1255);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(46, Node.IS_NAMESPACE);
971:       assertEquals(12, Node.COLUMN_BITS);
972:       assertEquals(49, Node.DIRECT_EVAL);
973:       assertEquals(57, Node.LAST_PROP);
974:       assertEquals(32, Node.INCRDECR_PROP);
975:       assertEquals(1, Node.DECR_FLAG);
976:       assertEquals(2, Node.POST_FLAG);
977:       assertEquals(37, Node.OPT_ARG_NAME);
978:       assertEquals(47, Node.IS_DISPATCHER);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
982:       assertEquals(57, Node.REFLECTED_OBJECT);
983:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
984:       assertEquals(56, Node.CHANGE_TIME);
985:       assertEquals(36, Node.QUOTED_PROP);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(39, Node.EMPTY_BLOCK);
988:       assertEquals(53, Node.INPUT_ID);
989:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
990:       assertEquals(29, Node.JSDOC_INFO_PROP);
991:       assertEquals(52, Node.LENGTH);
992:       assertEquals(8, Node.FLAG_NO_THROWS);
993:       assertEquals(55, Node.INFERRED_FUNCTION);
994:       assertEquals(4095, Node.COLUMN_MASK);
995:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
996:       assertEquals(48, Node.DIRECTIVES);
997:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
998:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1001:       assertEquals(43, Node.IS_CONSTANT_NAME);
1002:       assertEquals(54, Node.SLASH_V);
1003:       assertEquals(50, Node.FREE_CALL);
1004:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1005:       assertFalse(node0.hasMoreThanOneChild());
1006:       assertFalse(node0.isContinue());
1007:       assertFalse(node0.isOr());
1008:       assertEquals(39, node0.getType());
1009:       assertFalse(node0.isLabel());
1010:       assertFalse(node0.isReturn());
1011:       assertFalse(node0.isTypeOf());
1012:       assertFalse(node0.isLabelName());
1013:       assertFalse(node0.isGetElem());
1014:       assertEquals(1255, node0.getSourcePosition());
1015:       assertFalse(node0.isVar());
1016:       assertFalse(node0.isCast());
1017:       assertFalse(node0.isSetterDef());
1018:       assertFalse(node0.isAdd());
1019:       assertFalse(node0.isAssignAdd());
1020:       assertFalse(node0.isDo());
1021:       assertFalse(node0.isNew());
1022:       assertFalse(node0.isObjectLit());
1023:       assertFalse(node0.isAnd());
1024:       assertFalse(node0.isNot());
1025:       assertFalse(node0.isComma());
1026:       assertFalse(node0.isNull());
1027:       assertFalse(node0.isFunction());
1028:       assertFalse(node0.isExprResult());
1029:       assertFalse(node0.isTrue());
1030:       assertEquals(0, node0.getLineno());
1031:       assertFalse(node0.isName());
1032:       assertFalse(node0.isBreak());
1033:       assertFalse(node0.isVoid());
1034:       assertFalse(node0.isCall());
1035:       assertFalse(node0.isAssign());
1036:       assertFalse(node0.hasChildren());
1037:       assertFalse(node0.isDebugger());
1038:       assertFalse(node0.isDec());
1039:       assertFalse(node0.isString());
1040:       assertFalse(node0.isWhile());
1041:       assertFalse(node0.isGetProp());
1042:       assertTrue(node0.isNumber());
1043:       assertFalse(node0.isIn());
1044:       assertFalse(node0.isNE());
1045:       assertFalse(node0.isSwitch());
1046:       assertFalse(node0.isIf());
1047:       assertFalse(node0.isDelProp());
1048:       assertFalse(node0.isThrow());
1049:       assertFalse(node0.isFalse());
1050:       assertFalse(node0.isInc());
1051:       assertFalse(node0.isDefaultCase());
1052:       assertFalse(node0.isEmpty());
1053:       assertFalse(node0.isCatch());
1054:       assertFalse(node0.isInstanceOf());
1055:       assertFalse(node0.isWith());
1056:       assertEquals(0, node0.getChildCount());
1057:       assertFalse(node0.isRegExp());
1058:       assertFalse(node0.isParamList());
1059:       assertEquals(1255, node0.getCharno());
1060:       assertFalse(node0.isArrayLit());
1061:       assertFalse(node0.isHook());
1062:       assertFalse(node0.isStringKey());
1063:       assertFalse(node0.isFor());
1064:       assertFalse(node0.isBlock());
1065:       assertFalse(node0.isGetterDef());
1066:       assertFalse(node0.isScript());
1067:       assertFalse(node0.isThis());
1068:       assertFalse(node0.isTry());
1069:       assertFalse(node0.isCase());
1070:       assertFalse(node0.hasOneChild());
1071:       assertFalse(node0.equals((Object)node1));
1072:   }
1073: }
RegularFileObject[/tmp/EvoSuite_100_1628159634649/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:33:54.795 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 1255, 1255);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

String string0 = node0.getSourceFileName();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNull(string0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

node0.detachChildren();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

boolean boolean0 = node0.isInc();
assertFalse(boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());

Node node1 = new Node(3102, 64, 36);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertEquals(262180, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(64, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(3102, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.equals((Object)node0));

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertEquals(262180, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(64, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(3102, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node0.children();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));

boolean boolean1 = node0.isQualifiedName();
assertFalse(boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);

node0.setSourceEncodedPosition(1255);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertEquals(1255, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(0, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.equals((Object)node1));


[MASTER] 10:33:56.301 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_117_1628159636192/com/google/javascript/rhino/Node_117_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_117_1628159636192/com/google/javascript/rhino/Node_117_tmp__ESTest_scaffolding.java]]
[MASTER] 10:33:56.301 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:56.301 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:33:56.302 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 440
[MASTER] 10:33:56.303 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_117_1628159636192/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:56 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_117_tmp__ESTest extends Node_117_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(199.2059217532582);
21:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
22:       assertEquals(50, Node.FREE_CALL);
23:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
24:       assertEquals(57, Node.REFLECTED_OBJECT);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(4095, Node.COLUMN_MASK);
30:       assertEquals(1, Node.DECR_FLAG);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(54, Node.SLASH_V);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(32, Node.INCRDECR_PROP);
35:       assertEquals(46, Node.IS_NAMESPACE);
36:       assertEquals(51, Node.STATIC_SOURCE_FILE);
37:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
38:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(37, Node.OPT_ARG_NAME);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(57, Node.LAST_PROP);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(52, Node.LENGTH);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(55, Node.INFERRED_FUNCTION);
54:       assertEquals(8, Node.FLAG_NO_THROWS);
55:       assertEquals(39, Node.EMPTY_BLOCK);
56:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
57:       assertNotNull(node0);
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isSwitch());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isNot());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isString());
70:       assertFalse(node0.isScript());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isObjectLit());
73:       assertTrue(node0.isNumber());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isEmpty());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isDec());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isOr());
86:       assertFalse(node0.isExprResult());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isArrayLit());
89:       assertFalse(node0.isDelProp());
90:       assertFalse(node0.isVoid());
91:       assertFalse(node0.isDo());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isAssignAdd());
94:       assertFalse(node0.isLabel());
95:       assertFalse(node0.isNew());
96:       assertFalse(node0.isAdd());
97:       assertFalse(node0.isVar());
98:       assertFalse(node0.isDefaultCase());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isNull());
101:       assertFalse(node0.isCall());
102:       assertFalse(node0.isParamList());
103:       assertFalse(node0.isName());
104:       assertEquals(39, node0.getType());
105:       assertFalse(node0.isWhile());
106:       assertFalse(node0.isCatch());
107:       assertFalse(node0.hasMoreThanOneChild());
108:       assertFalse(node0.isDebugger());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isTry());
111:       assertFalse(node0.isReturn());
112:       assertFalse(node0.isBlock());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isCast());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isNE());
118:       assertFalse(node0.isIf());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isIn());
121:       assertFalse(node0.isFunction());
122:       assertFalse(node0.isInc());
123:       assertFalse(node0.isSetterDef());
124:       
125:       String string0 = node0.toString();
126:       assertEquals("NUMBER 199.2059217532582", string0);
127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
128:       assertEquals(50, Node.FREE_CALL);
129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(43, Node.IS_CONSTANT_NAME);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
143:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
144:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
145:       assertEquals(29, Node.JSDOC_INFO_PROP);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(37, Node.OPT_ARG_NAME);
149:       assertEquals(2, Node.POST_FLAG);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(30, Node.VAR_ARGS_NAME);
152:       assertEquals(49, Node.DIRECT_EVAL);
153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(57, Node.LAST_PROP);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(8, Node.FLAG_NO_THROWS);
161:       assertEquals(39, Node.EMPTY_BLOCK);
162:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
163:       assertNotNull(string0);
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isBreak());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isFalse());
169:       assertFalse(node0.isInstanceOf());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isWith());
173:       assertFalse(node0.isNot());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isString());
176:       assertFalse(node0.isScript());
177:       assertEquals((-1), node0.getCharno());
178:       assertFalse(node0.isObjectLit());
179:       assertTrue(node0.isNumber());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isLabelName());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isEmpty());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.isGetterDef());
190:       assertFalse(node0.isTypeOf());
191:       assertFalse(node0.isOr());
192:       assertFalse(node0.isExprResult());
193:       assertFalse(node0.isTrue());
194:       assertFalse(node0.isArrayLit());
195:       assertFalse(node0.isDelProp());
196:       assertFalse(node0.isVoid());
197:       assertFalse(node0.isDo());
198:       assertEquals(0, node0.getChildCount());
199:       assertFalse(node0.isAssignAdd());
200:       assertFalse(node0.isLabel());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isVar());
204:       assertFalse(node0.isDefaultCase());
205:       assertFalse(node0.isStringKey());
206:       assertFalse(node0.isNull());
207:       assertFalse(node0.isCall());
208:       assertFalse(node0.isParamList());
209:       assertFalse(node0.isName());
210:       assertEquals(39, node0.getType());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isCatch());
213:       assertFalse(node0.hasMoreThanOneChild());
214:       assertFalse(node0.isDebugger());
215:       assertFalse(node0.isRegExp());
216:       assertFalse(node0.isTry());
217:       assertFalse(node0.isReturn());
218:       assertFalse(node0.isBlock());
219:       assertFalse(node0.isFor());
220:       assertFalse(node0.isCast());
221:       assertEquals((-1), node0.getSourcePosition());
222:       assertEquals((-1), node0.getLineno());
223:       assertFalse(node0.isNE());
224:       assertFalse(node0.isIf());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isIn());
227:       assertFalse(node0.isFunction());
228:       assertFalse(node0.isInc());
229:       assertFalse(node0.isSetterDef());
230:       
231:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
232:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
233:       assertEquals(50, Node.FREE_CALL);
234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
235:       assertEquals(57, Node.REFLECTED_OBJECT);
236:       assertEquals(48, Node.DIRECTIVES);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(4095, Node.COLUMN_MASK);
241:       assertEquals(1, Node.DECR_FLAG);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(32, Node.INCRDECR_PROP);
246:       assertEquals(46, Node.IS_NAMESPACE);
247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
248:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(56, Node.CHANGE_TIME);
253:       assertEquals(37, Node.OPT_ARG_NAME);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(36, Node.QUOTED_PROP);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(52, Node.LENGTH);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(55, Node.INFERRED_FUNCTION);
265:       assertEquals(8, Node.FLAG_NO_THROWS);
266:       assertEquals(39, Node.EMPTY_BLOCK);
267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
268:       assertNotNull(node_FileLevelJsDocBuilder0);
269:       assertFalse(node0.isThrow());
270:       assertFalse(node0.isBreak());
271:       assertFalse(node0.isThis());
272:       assertFalse(node0.isComma());
273:       assertFalse(node0.isFalse());
274:       assertFalse(node0.isInstanceOf());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isAnd());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isNot());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isString());
281:       assertFalse(node0.isScript());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isObjectLit());
284:       assertTrue(node0.isNumber());
285:       assertFalse(node0.isHook());
286:       assertFalse(node0.isGetProp());
287:       assertFalse(node0.hasOneChild());
288:       assertFalse(node0.isLabelName());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isEmpty());
292:       assertFalse(node0.isGetElem());
293:       assertFalse(node0.isDec());
294:       assertFalse(node0.isGetterDef());
295:       assertFalse(node0.isTypeOf());
296:       assertFalse(node0.isOr());
297:       assertFalse(node0.isExprResult());
298:       assertFalse(node0.isTrue());
299:       assertFalse(node0.isArrayLit());
300:       assertFalse(node0.isDelProp());
301:       assertFalse(node0.isVoid());
302:       assertFalse(node0.isDo());
303:       assertEquals(0, node0.getChildCount());
304:       assertFalse(node0.isAssignAdd());
305:       assertFalse(node0.isLabel());
306:       assertFalse(node0.isNew());
307:       assertFalse(node0.isAdd());
308:       assertFalse(node0.isVar());
309:       assertFalse(node0.isDefaultCase());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isNull());
312:       assertFalse(node0.isCall());
313:       assertFalse(node0.isParamList());
314:       assertFalse(node0.isName());
315:       assertEquals(39, node0.getType());
316:       assertFalse(node0.isWhile());
317:       assertFalse(node0.isCatch());
318:       assertFalse(node0.hasMoreThanOneChild());
319:       assertFalse(node0.isDebugger());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.isTry());
322:       assertFalse(node0.isReturn());
323:       assertFalse(node0.isBlock());
324:       assertFalse(node0.isFor());
325:       assertFalse(node0.isCast());
326:       assertEquals((-1), node0.getSourcePosition());
327:       assertEquals((-1), node0.getLineno());
328:       assertFalse(node0.isNE());
329:       assertFalse(node0.isIf());
330:       assertFalse(node0.isContinue());
331:       assertFalse(node0.isIn());
332:       assertFalse(node0.isFunction());
333:       assertFalse(node0.isInc());
334:       assertFalse(node0.isSetterDef());
335:       
336:       Iterable<Node> iterable0 = node0.children();
337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
338:       assertEquals(50, Node.FREE_CALL);
339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
340:       assertEquals(57, Node.REFLECTED_OBJECT);
341:       assertEquals(48, Node.DIRECTIVES);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(40, Node.ORIGINALNAME_PROP);
344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
345:       assertEquals(4095, Node.COLUMN_MASK);
346:       assertEquals(1, Node.DECR_FLAG);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(54, Node.SLASH_V);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(46, Node.IS_NAMESPACE);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
355:       assertEquals(29, Node.JSDOC_INFO_PROP);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(37, Node.OPT_ARG_NAME);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
367:       assertEquals(52, Node.LENGTH);
368:       assertEquals(53, Node.INPUT_ID);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(39, Node.EMPTY_BLOCK);
372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
373:       assertNotNull(iterable0);
374:       assertFalse(node0.isThrow());
375:       assertFalse(node0.isBreak());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isComma());
378:       assertFalse(node0.isFalse());
379:       assertFalse(node0.isInstanceOf());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isAnd());
382:       assertFalse(node0.isWith());
383:       assertFalse(node0.isNot());
384:       assertFalse(node0.isCase());
385:       assertFalse(node0.isString());
386:       assertFalse(node0.isScript());
387:       assertEquals((-1), node0.getCharno());
388:       assertFalse(node0.isObjectLit());
389:       assertTrue(node0.isNumber());
390:       assertFalse(node0.isHook());
391:       assertFalse(node0.isGetProp());
392:       assertFalse(node0.hasOneChild());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.hasChildren());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isGetElem());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.isGetterDef());
400:       assertFalse(node0.isTypeOf());
401:       assertFalse(node0.isOr());
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isTrue());
404:       assertFalse(node0.isArrayLit());
405:       assertFalse(node0.isDelProp());
406:       assertFalse(node0.isVoid());
407:       assertFalse(node0.isDo());
408:       assertEquals(0, node0.getChildCount());
409:       assertFalse(node0.isAssignAdd());
410:       assertFalse(node0.isLabel());
411:       assertFalse(node0.isNew());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isVar());
414:       assertFalse(node0.isDefaultCase());
415:       assertFalse(node0.isStringKey());
416:       assertFalse(node0.isNull());
417:       assertFalse(node0.isCall());
418:       assertFalse(node0.isParamList());
419:       assertFalse(node0.isName());
420:       assertEquals(39, node0.getType());
421:       assertFalse(node0.isWhile());
422:       assertFalse(node0.isCatch());
423:       assertFalse(node0.hasMoreThanOneChild());
424:       assertFalse(node0.isDebugger());
425:       assertFalse(node0.isRegExp());
426:       assertFalse(node0.isTry());
427:       assertFalse(node0.isReturn());
428:       assertFalse(node0.isBlock());
429:       assertFalse(node0.isFor());
430:       assertFalse(node0.isCast());
431:       assertEquals((-1), node0.getSourcePosition());
432:       assertEquals((-1), node0.getLineno());
433:       assertFalse(node0.isNE());
434:       assertFalse(node0.isIf());
435:       assertFalse(node0.isContinue());
436:       assertFalse(node0.isIn());
437:       assertFalse(node0.isFunction());
438:       assertFalse(node0.isInc());
439:       assertFalse(node0.isSetterDef());
440:       assertFalse(iterable0.contains(node0));
441:       
442:       boolean boolean0 = node0.isBreak();
443:       assertFalse(boolean0);
444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
445:       assertEquals(50, Node.FREE_CALL);
446:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
447:       assertEquals(57, Node.REFLECTED_OBJECT);
448:       assertEquals(48, Node.DIRECTIVES);
449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
452:       assertEquals(4095, Node.COLUMN_MASK);
453:       assertEquals(1, Node.DECR_FLAG);
454:       assertEquals(12, Node.COLUMN_BITS);
455:       assertEquals(54, Node.SLASH_V);
456:       assertEquals(43, Node.IS_CONSTANT_NAME);
457:       assertEquals(32, Node.INCRDECR_PROP);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(47, Node.IS_DISPATCHER);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(37, Node.OPT_ARG_NAME);
466:       assertEquals(2, Node.POST_FLAG);
467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
468:       assertEquals(30, Node.VAR_ARGS_NAME);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(57, Node.LAST_PROP);
473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
474:       assertEquals(52, Node.LENGTH);
475:       assertEquals(53, Node.INPUT_ID);
476:       assertEquals(55, Node.INFERRED_FUNCTION);
477:       assertEquals(8, Node.FLAG_NO_THROWS);
478:       assertEquals(39, Node.EMPTY_BLOCK);
479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
480:       assertFalse(node0.isThrow());
481:       assertFalse(node0.isBreak());
482:       assertFalse(node0.isThis());
483:       assertFalse(node0.isComma());
484:       assertFalse(node0.isFalse());
485:       assertFalse(node0.isInstanceOf());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isAnd());
488:       assertFalse(node0.isWith());
489:       assertFalse(node0.isNot());
490:       assertFalse(node0.isCase());
491:       assertFalse(node0.isString());
492:       assertFalse(node0.isScript());
493:       assertEquals((-1), node0.getCharno());
494:       assertFalse(node0.isObjectLit());
495:       assertTrue(node0.isNumber());
496:       assertFalse(node0.isHook());
497:       assertFalse(node0.isGetProp());
498:       assertFalse(node0.hasOneChild());
499:       assertFalse(node0.isLabelName());
500:       assertFalse(node0.isAssign());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isEmpty());
503:       assertFalse(node0.isGetElem());
504:       assertFalse(node0.isDec());
505:       assertFalse(node0.isGetterDef());
506:       assertFalse(node0.isTypeOf());
507:       assertFalse(node0.isOr());
508:       assertFalse(node0.isExprResult());
509:       assertFalse(node0.isTrue());
510:       assertFalse(node0.isArrayLit());
511:       assertFalse(node0.isDelProp());
512:       assertFalse(node0.isVoid());
513:       assertFalse(node0.isDo());
514:       assertEquals(0, node0.getChildCount());
515:       assertFalse(node0.isAssignAdd());
516:       assertFalse(node0.isLabel());
517:       assertFalse(node0.isNew());
518:       assertFalse(node0.isAdd());
519:       assertFalse(node0.isVar());
520:       assertFalse(node0.isDefaultCase());
521:       assertFalse(node0.isStringKey());
522:       assertFalse(node0.isNull());
523:       assertFalse(node0.isCall());
524:       assertFalse(node0.isParamList());
525:       assertFalse(node0.isName());
526:       assertEquals(39, node0.getType());
527:       assertFalse(node0.isWhile());
528:       assertFalse(node0.isCatch());
529:       assertFalse(node0.hasMoreThanOneChild());
530:       assertFalse(node0.isDebugger());
531:       assertFalse(node0.isRegExp());
532:       assertFalse(node0.isTry());
533:       assertFalse(node0.isReturn());
534:       assertFalse(node0.isBlock());
535:       assertFalse(node0.isFor());
536:       assertFalse(node0.isCast());
537:       assertEquals((-1), node0.getSourcePosition());
538:       assertEquals((-1), node0.getLineno());
539:       assertFalse(node0.isNE());
540:       assertFalse(node0.isIf());
541:       assertFalse(node0.isContinue());
542:       assertFalse(node0.isIn());
543:       assertFalse(node0.isFunction());
544:       assertFalse(node0.isInc());
545:       assertFalse(node0.isSetterDef());
546:       
547:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
548:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
549:       assertEquals(50, Node.FREE_CALL);
550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(40, Node.ORIGINALNAME_PROP);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(4095, Node.COLUMN_MASK);
557:       assertEquals(1, Node.DECR_FLAG);
558:       assertEquals(12, Node.COLUMN_BITS);
559:       assertEquals(54, Node.SLASH_V);
560:       assertEquals(43, Node.IS_CONSTANT_NAME);
561:       assertEquals(32, Node.INCRDECR_PROP);
562:       assertEquals(46, Node.IS_NAMESPACE);
563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
564:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
565:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
566:       assertEquals(29, Node.JSDOC_INFO_PROP);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(56, Node.CHANGE_TIME);
569:       assertEquals(37, Node.OPT_ARG_NAME);
570:       assertEquals(2, Node.POST_FLAG);
571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(49, Node.DIRECT_EVAL);
574:       assertEquals(15, Node.NO_SIDE_EFFECTS);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(57, Node.LAST_PROP);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(52, Node.LENGTH);
579:       assertEquals(53, Node.INPUT_ID);
580:       assertEquals(55, Node.INFERRED_FUNCTION);
581:       assertEquals(8, Node.FLAG_NO_THROWS);
582:       assertEquals(39, Node.EMPTY_BLOCK);
583:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
584:       assertNotNull(node_NodeMismatch0);
585:       assertFalse(node0.isThrow());
586:       assertFalse(node0.isBreak());
587:       assertFalse(node0.isThis());
588:       assertFalse(node0.isComma());
589:       assertFalse(node0.isFalse());
590:       assertFalse(node0.isInstanceOf());
591:       assertFalse(node0.isSwitch());
592:       assertFalse(node0.isAnd());
593:       assertFalse(node0.isWith());
594:       assertFalse(node0.isNot());
595:       assertFalse(node0.isCase());
596:       assertFalse(node0.isString());
597:       assertFalse(node0.isScript());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isObjectLit());
600:       assertTrue(node0.isNumber());
601:       assertFalse(node0.isHook());
602:       assertFalse(node0.isGetProp());
603:       assertFalse(node0.hasOneChild());
604:       assertFalse(node0.isLabelName());
605:       assertFalse(node0.isAssign());
606:       assertFalse(node0.hasChildren());
607:       assertFalse(node0.isEmpty());
608:       assertFalse(node0.isGetElem());
609:       assertFalse(node0.isDec());
610:       assertFalse(node0.isGetterDef());
611:       assertFalse(node0.isTypeOf());
612:       assertFalse(node0.isOr());
613:       assertFalse(node0.isExprResult());
614:       assertFalse(node0.isTrue());
615:       assertFalse(node0.isArrayLit());
616:       assertFalse(node0.isDelProp());
617:       assertFalse(node0.isVoid());
618:       assertFalse(node0.isDo());
619:       assertEquals(0, node0.getChildCount());
620:       assertFalse(node0.isAssignAdd());
621:       assertFalse(node0.isLabel());
622:       assertFalse(node0.isNew());
623:       assertFalse(node0.isAdd());
624:       assertFalse(node0.isVar());
625:       assertFalse(node0.isDefaultCase());
626:       assertFalse(node0.isStringKey());
627:       assertFalse(node0.isNull());
628:       assertFalse(node0.isCall());
629:       assertFalse(node0.isParamList());
630:       assertFalse(node0.isName());
631:       assertEquals(39, node0.getType());
632:       assertFalse(node0.isWhile());
633:       assertFalse(node0.isCatch());
634:       assertFalse(node0.hasMoreThanOneChild());
635:       assertFalse(node0.isDebugger());
636:       assertFalse(node0.isRegExp());
637:       assertFalse(node0.isTry());
638:       assertFalse(node0.isReturn());
639:       assertFalse(node0.isBlock());
640:       assertFalse(node0.isFor());
641:       assertFalse(node0.isCast());
642:       assertEquals((-1), node0.getSourcePosition());
643:       assertEquals((-1), node0.getLineno());
644:       assertFalse(node0.isNE());
645:       assertFalse(node0.isIf());
646:       assertFalse(node0.isContinue());
647:       assertFalse(node0.isIn());
648:       assertFalse(node0.isFunction());
649:       assertFalse(node0.isInc());
650:       assertFalse(node0.isSetterDef());
651:       
652:       Node node1 = new Node(30, (-3923), 1186);
653:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
654:       assertEquals(8, Node.FLAG_NO_THROWS);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertEquals(48, Node.DIRECTIVES);
657:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(40, Node.ORIGINALNAME_PROP);
660:       assertEquals(55, Node.INFERRED_FUNCTION);
661:       assertEquals(50, Node.FREE_CALL);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(54, Node.SLASH_V);
665:       assertEquals(36, Node.QUOTED_PROP);
666:       assertEquals(52, Node.LENGTH);
667:       assertEquals(15, Node.NO_SIDE_EFFECTS);
668:       assertEquals(53, Node.INPUT_ID);
669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
670:       assertEquals(30, Node.VAR_ARGS_NAME);
671:       assertEquals(57, Node.LAST_PROP);
672:       assertEquals(47, Node.IS_DISPATCHER);
673:       assertEquals(37, Node.OPT_ARG_NAME);
674:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
675:       assertEquals(2, Node.POST_FLAG);
676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(51, Node.STATIC_SOURCE_FILE);
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(56, Node.CHANGE_TIME);
681:       assertEquals(46, Node.IS_NAMESPACE);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
684:       assertEquals(4095, Node.COLUMN_MASK);
685:       assertEquals(1, Node.DECR_FLAG);
686:       assertEquals(32, Node.INCRDECR_PROP);
687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertNotNull(node1);
690:       assertFalse(node1.isParamList());
691:       assertFalse(node1.isSetterDef());
692:       assertFalse(node1.isNull());
693:       assertFalse(node1.isStringKey());
694:       assertFalse(node1.isName());
695:       assertFalse(node1.isAdd());
696:       assertFalse(node1.isFunction());
697:       assertFalse(node1.isDebugger());
698:       assertFalse(node1.isDo());
699:       assertFalse(node1.isDefaultCase());
700:       assertFalse(node1.isVar());
701:       assertFalse(node1.isArrayLit());
702:       assertEquals(0, node1.getChildCount());
703:       assertFalse(node1.isContinue());
704:       assertFalse(node1.isNE());
705:       assertEquals((-1), node1.getLineno());
706:       assertFalse(node1.isFor());
707:       assertFalse(node1.isLabelName());
708:       assertFalse(node1.isIf());
709:       assertFalse(node1.isCase());
710:       assertFalse(node1.hasOneChild());
711:       assertFalse(node1.isGetterDef());
712:       assertFalse(node1.isNumber());
713:       assertFalse(node1.isIn());
714:       assertFalse(node1.isRegExp());
715:       assertFalse(node1.isScript());
716:       assertFalse(node1.isBlock());
717:       assertFalse(node1.isTry());
718:       assertFalse(node1.isCatch());
719:       assertFalse(node1.isHook());
720:       assertFalse(node1.isWith());
721:       assertFalse(node1.isInstanceOf());
722:       assertFalse(node1.hasMoreThanOneChild());
723:       assertFalse(node1.isThis());
724:       assertFalse(node1.isComma());
725:       assertFalse(node1.isBreak());
726:       assertFalse(node1.isGetProp());
727:       assertFalse(node1.isObjectLit());
728:       assertFalse(node1.isNot());
729:       assertFalse(node1.isInc());
730:       assertEquals((-1), node1.getCharno());
731:       assertEquals(30, node1.getType());
732:       assertFalse(node1.isSwitch());
733:       assertFalse(node1.isAnd());
734:       assertTrue(node1.isNew());
735:       assertFalse(node1.isThrow());
736:       assertFalse(node1.isCast());
737:       assertFalse(node1.isFalse());
738:       assertEquals((-1), node1.getSourcePosition());
739:       assertFalse(node1.isDec());
740:       assertFalse(node1.isLabel());
741:       assertFalse(node1.hasChildren());
742:       assertFalse(node1.isReturn());
743:       assertFalse(node1.isDelProp());
744:       assertFalse(node1.isAssignAdd());
745:       assertFalse(node1.isString());
746:       assertFalse(node1.isEmpty());
747:       assertFalse(node1.isOr());
748:       assertFalse(node1.isExprResult());
749:       assertFalse(node1.isTrue());
750:       assertFalse(node1.isVoid());
751:       assertFalse(node1.isWhile());
752:       assertFalse(node1.isCall());
753:       assertFalse(node1.isGetElem());
754:       assertFalse(node1.isAssign());
755:       assertFalse(node1.isTypeOf());
756:       assertFalse(node1.equals((Object)node0));
757:       
758:       Node node2 = Node.newNumber((-3729.022741313));
759:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
762:       assertEquals(40, Node.ORIGINALNAME_PROP);
763:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
764:       assertEquals(48, Node.DIRECTIVES);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(39, Node.EMPTY_BLOCK);
767:       assertEquals(57, Node.REFLECTED_OBJECT);
768:       assertEquals(55, Node.INFERRED_FUNCTION);
769:       assertEquals(52, Node.LENGTH);
770:       assertEquals(8, Node.FLAG_NO_THROWS);
771:       assertEquals(30, Node.VAR_ARGS_NAME);
772:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
773:       assertEquals(15, Node.NO_SIDE_EFFECTS);
774:       assertEquals(43, Node.IS_CONSTANT_NAME);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(2, Node.POST_FLAG);
777:       assertEquals(29, Node.JSDOC_INFO_PROP);
778:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
781:       assertEquals(37, Node.OPT_ARG_NAME);
782:       assertEquals(56, Node.CHANGE_TIME);
783:       assertEquals(46, Node.IS_NAMESPACE);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(51, Node.STATIC_SOURCE_FILE);
786:       assertEquals(36, Node.QUOTED_PROP);
787:       assertEquals(49, Node.DIRECT_EVAL);
788:       assertEquals(1, Node.DECR_FLAG);
789:       assertEquals(12, Node.COLUMN_BITS);
790:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
793:       assertEquals(4095, Node.COLUMN_MASK);
794:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
795:       assertNotNull(node2);
796:       assertNotSame(node2, node0);
797:       assertFalse(node2.isFalse());
798:       assertFalse(node2.isThrow());
799:       assertFalse(node2.isHook());
800:       assertFalse(node2.isThis());
801:       assertFalse(node2.isComma());
802:       assertFalse(node2.isInc());
803:       assertFalse(node2.isGetProp());
804:       assertFalse(node2.isNot());
805:       assertFalse(node2.isAnd());
806:       assertFalse(node2.isString());
807:       assertEquals((-1), node2.getCharno());
808:       assertFalse(node2.isObjectLit());
809:       assertFalse(node2.isSwitch());
810:       assertFalse(node2.isCast());
811:       assertFalse(node2.isEmpty());
812:       assertFalse(node2.isAssign());
813:       assertFalse(node2.isGetElem());
814:       assertFalse(node2.isTypeOf());
815:       assertFalse(node2.hasChildren());
816:       assertEquals((-1), node2.getSourcePosition());
817:       assertFalse(node2.isDec());
818:       assertFalse(node2.isOr());
819:       assertFalse(node2.isLabel());
820:       assertFalse(node2.isAssignAdd());
821:       assertFalse(node2.isReturn());
822:       assertTrue(node2.isNumber());
823:       assertFalse(node2.isWhile());
824:       assertFalse(node2.isTrue());
825:       assertFalse(node2.isExprResult());
826:       assertFalse(node2.isCall());
827:       assertFalse(node2.isDelProp());
828:       assertFalse(node2.isBreak());
829:       assertFalse(node2.isVoid());
830:       assertFalse(node2.isName());
831:       assertFalse(node2.isStringKey());
832:       assertFalse(node2.isVar());
833:       assertFalse(node2.isNull());
834:       assertFalse(node2.isAdd());
835:       assertFalse(node2.isBlock());
836:       assertFalse(node2.isSetterDef());
837:       assertFalse(node2.isNew());
838:       assertFalse(node2.isDo());
839:       assertFalse(node2.isDefaultCase());
840:       assertFalse(node2.isContinue());
841:       assertFalse(node2.isFunction());
842:       assertFalse(node2.isDebugger());
843:       assertEquals(0, node2.getChildCount());
844:       assertFalse(node2.isParamList());
845:       assertFalse(node2.isArrayLit());
846:       assertFalse(node2.isFor());
847:       assertFalse(node2.isLabelName());
848:       assertFalse(node2.isIf());
849:       assertFalse(node2.isNE());
850:       assertFalse(node2.isGetterDef());
851:       assertFalse(node2.isTry());
852:       assertFalse(node2.isIn());
853:       assertFalse(node2.isScript());
854:       assertFalse(node2.isCase());
855:       assertFalse(node2.hasOneChild());
856:       assertEquals(39, node2.getType());
857:       assertFalse(node2.isWith());
858:       assertFalse(node2.isCatch());
859:       assertFalse(node2.isRegExp());
860:       assertFalse(node2.hasMoreThanOneChild());
861:       assertFalse(node2.isInstanceOf());
862:       assertEquals((-1), node2.getLineno());
863:       assertFalse(node2.equals((Object)node0));
864:       assertFalse(node2.equals((Object)node1));
865:       
866:       boolean boolean1 = node2.isEquivalentTo(node0);
867:       assertFalse(boolean1);
868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
869:       assertEquals(50, Node.FREE_CALL);
870:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
871:       assertEquals(57, Node.REFLECTED_OBJECT);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
876:       assertEquals(4095, Node.COLUMN_MASK);
877:       assertEquals(1, Node.DECR_FLAG);
878:       assertEquals(12, Node.COLUMN_BITS);
879:       assertEquals(54, Node.SLASH_V);
880:       assertEquals(43, Node.IS_CONSTANT_NAME);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(46, Node.IS_NAMESPACE);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
885:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
886:       assertEquals(29, Node.JSDOC_INFO_PROP);
887:       assertEquals(47, Node.IS_DISPATCHER);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(37, Node.OPT_ARG_NAME);
890:       assertEquals(2, Node.POST_FLAG);
891:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(49, Node.DIRECT_EVAL);
894:       assertEquals(15, Node.NO_SIDE_EFFECTS);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(57, Node.LAST_PROP);
897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
898:       assertEquals(52, Node.LENGTH);
899:       assertEquals(53, Node.INPUT_ID);
900:       assertEquals(55, Node.INFERRED_FUNCTION);
901:       assertEquals(8, Node.FLAG_NO_THROWS);
902:       assertEquals(39, Node.EMPTY_BLOCK);
903:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
904:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
905:       assertEquals(50, Node.FREE_CALL);
906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
907:       assertEquals(40, Node.ORIGINALNAME_PROP);
908:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
909:       assertEquals(48, Node.DIRECTIVES);
910:       assertEquals(54, Node.SLASH_V);
911:       assertEquals(39, Node.EMPTY_BLOCK);
912:       assertEquals(57, Node.REFLECTED_OBJECT);
913:       assertEquals(55, Node.INFERRED_FUNCTION);
914:       assertEquals(52, Node.LENGTH);
915:       assertEquals(8, Node.FLAG_NO_THROWS);
916:       assertEquals(30, Node.VAR_ARGS_NAME);
917:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
918:       assertEquals(15, Node.NO_SIDE_EFFECTS);
919:       assertEquals(43, Node.IS_CONSTANT_NAME);
920:       assertEquals(57, Node.LAST_PROP);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(29, Node.JSDOC_INFO_PROP);
923:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
924:       assertEquals(47, Node.IS_DISPATCHER);
925:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
926:       assertEquals(37, Node.OPT_ARG_NAME);
927:       assertEquals(56, Node.CHANGE_TIME);
928:       assertEquals(46, Node.IS_NAMESPACE);
929:       assertEquals(53, Node.INPUT_ID);
930:       assertEquals(51, Node.STATIC_SOURCE_FILE);
931:       assertEquals(36, Node.QUOTED_PROP);
932:       assertEquals(49, Node.DIRECT_EVAL);
933:       assertEquals(1, Node.DECR_FLAG);
934:       assertEquals(12, Node.COLUMN_BITS);
935:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
936:       assertEquals(32, Node.INCRDECR_PROP);
937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
940:       assertNotSame(node0, node2);
941:       assertNotSame(node2, node0);
942:       assertFalse(node0.isThrow());
943:       assertFalse(node0.isBreak());
944:       assertFalse(node0.isThis());
945:       assertFalse(node0.isComma());
946:       assertFalse(node0.isFalse());
947:       assertFalse(node0.isInstanceOf());
948:       assertFalse(node0.isSwitch());
949:       assertFalse(node0.isAnd());
950:       assertFalse(node0.isWith());
951:       assertFalse(node0.isNot());
952:       assertFalse(node0.isCase());
953:       assertFalse(node0.isString());
954:       assertFalse(node0.isScript());
955:       assertEquals((-1), node0.getCharno());
956:       assertFalse(node0.isObjectLit());
957:       assertTrue(node0.isNumber());
958:       assertFalse(node0.isHook());
959:       assertFalse(node0.isGetProp());
960:       assertFalse(node0.hasOneChild());
961:       assertFalse(node0.isLabelName());
962:       assertFalse(node0.isAssign());
963:       assertFalse(node0.hasChildren());
964:       assertFalse(node0.isEmpty());
965:       assertFalse(node0.isGetElem());
966:       assertFalse(node0.isDec());
967:       assertFalse(node0.isGetterDef());
968:       assertFalse(node0.isTypeOf());
969:       assertFalse(node0.isOr());
970:       assertFalse(node0.isExprResult());
971:       assertFalse(node0.isTrue());
972:       assertFalse(node0.isArrayLit());
973:       assertFalse(node0.isDelProp());
974:       assertFalse(node0.isVoid());
975:       assertFalse(node0.isDo());
976:       assertEquals(0, node0.getChildCount());
977:       assertFalse(node0.isAssignAdd());
978:       assertFalse(node0.isLabel());
979:       assertFalse(node0.isNew());
980:       assertFalse(node0.isAdd());
981:       assertFalse(node0.isVar());
982:       assertFalse(node0.isDefaultCase());
983:       assertFalse(node0.isStringKey());
984:       assertFalse(node0.isNull());
985:       assertFalse(node0.isCall());
986:       assertFalse(node0.isParamList());
987:       assertFalse(node0.isName());
988:       assertEquals(39, node0.getType());
989:       assertFalse(node0.isWhile());
990:       assertFalse(node0.isCatch());
991:       assertFalse(node0.hasMoreThanOneChild());
992:       assertFalse(node0.isDebugger());
993:       assertFalse(node0.isRegExp());
994:       assertFalse(node0.isTry());
995:       assertFalse(node0.isReturn());
996:       assertFalse(node0.isBlock());
997:       assertFalse(node0.isFor());
998:       assertFalse(node0.isCast());
999:       assertEquals((-1), node0.getSourcePosition());
1000:       assertEquals((-1), node0.getLineno());
1001:       assertFalse(node0.isNE());
1002:       assertFalse(node0.isIf());
1003:       assertFalse(node0.isContinue());
1004:       assertFalse(node0.isIn());
1005:       assertFalse(node0.isFunction());
1006:       assertFalse(node0.isInc());
1007:       assertFalse(node0.isSetterDef());
1008:       assertFalse(node2.isFalse());
1009:       assertFalse(node2.isThrow());
1010:       assertFalse(node2.isHook());
1011:       assertFalse(node2.isThis());
1012:       assertFalse(node2.isComma());
1013:       assertFalse(node2.isInc());
1014:       assertFalse(node2.isGetProp());
1015:       assertFalse(node2.isNot());
1016:       assertFalse(node2.isAnd());
1017:       assertFalse(node2.isString());
1018:       assertEquals((-1), node2.getCharno());
1019:       assertFalse(node2.isObjectLit());
1020:       assertFalse(node2.isSwitch());
1021:       assertFalse(node2.isCast());
1022:       assertFalse(node2.isEmpty());
1023:       assertFalse(node2.isAssign());
1024:       assertFalse(node2.isGetElem());
1025:       assertFalse(node2.isTypeOf());
1026:       assertFalse(node2.hasChildren());
1027:       assertEquals((-1), node2.getSourcePosition());
1028:       assertFalse(node2.isDec());
1029:       assertFalse(node2.isOr());
1030:       assertFalse(node2.isLabel());
1031:       assertFalse(node2.isAssignAdd());
1032:       assertFalse(node2.isReturn());
1033:       assertTrue(node2.isNumber());
1034:       assertFalse(node2.isWhile());
1035:       assertFalse(node2.isTrue());
1036:       assertFalse(node2.isExprResult());
1037:       assertFalse(node2.isCall());
1038:       assertFalse(node2.isDelProp());
1039:       assertFalse(node2.isBreak());
1040:       assertFalse(node2.isVoid());
1041:       assertFalse(node2.isName());
1042:       assertFalse(node2.isStringKey());
1043:       assertFalse(node2.isVar());
1044:       assertFalse(node2.isNull());
1045:       assertFalse(node2.isAdd());
1046:       assertFalse(node2.isBlock());
1047:       assertFalse(node2.isSetterDef());
1048:       assertFalse(node2.isNew());
1049:       assertFalse(node2.isDo());
1050:       assertFalse(node2.isDefaultCase());
1051:       assertFalse(node2.isContinue());
1052:       assertFalse(node2.isFunction());
1053:       assertFalse(node2.isDebugger());
1054:       assertEquals(0, node2.getChildCount());
1055:       assertFalse(node2.isParamList());
1056:       assertFalse(node2.isArrayLit());
1057:       assertFalse(node2.isFor());
1058:       assertFalse(node2.isLabelName());
1059:       assertFalse(node2.isIf());
1060:       assertFalse(node2.isNE());
1061:       assertFalse(node2.isGetterDef());
1062:       assertFalse(node2.isTry());
1063:       assertFalse(node2.isIn());
1064:       assertFalse(node2.isScript());
1065:       assertFalse(node2.isCase());
1066:       assertFalse(node2.hasOneChild());
1067:       assertEquals(39, node2.getType());
1068:       assertFalse(node2.isWith());
1069:       assertFalse(node2.isCatch());
1070:       assertFalse(node2.isRegExp());
1071:       assertFalse(node2.hasMoreThanOneChild());
1072:       assertFalse(node2.isInstanceOf());
1073:       assertEquals((-1), node2.getLineno());
1074:       assertFalse(node0.equals((Object)node2));
1075:       assertFalse(node0.equals((Object)node1));
1076:       assertFalse(node2.equals((Object)node0));
1077:       assertFalse(node2.equals((Object)node1));
1078:       assertTrue(boolean1 == boolean0);
1079:       
1080:       boolean boolean2 = node1.isReturn();
1081:       assertFalse(boolean2);
1082:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1083:       assertEquals(8, Node.FLAG_NO_THROWS);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(40, Node.ORIGINALNAME_PROP);
1089:       assertEquals(55, Node.INFERRED_FUNCTION);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(43, Node.IS_CONSTANT_NAME);
1092:       assertEquals(57, Node.REFLECTED_OBJECT);
1093:       assertEquals(54, Node.SLASH_V);
1094:       assertEquals(36, Node.QUOTED_PROP);
1095:       assertEquals(52, Node.LENGTH);
1096:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1097:       assertEquals(53, Node.INPUT_ID);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(30, Node.VAR_ARGS_NAME);
1100:       assertEquals(57, Node.LAST_PROP);
1101:       assertEquals(47, Node.IS_DISPATCHER);
1102:       assertEquals(37, Node.OPT_ARG_NAME);
1103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1104:       assertEquals(2, Node.POST_FLAG);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(29, Node.JSDOC_INFO_PROP);
1107:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1108:       assertEquals(49, Node.DIRECT_EVAL);
1109:       assertEquals(56, Node.CHANGE_TIME);
1110:       assertEquals(46, Node.IS_NAMESPACE);
1111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1113:       assertEquals(4095, Node.COLUMN_MASK);
1114:       assertEquals(1, Node.DECR_FLAG);
1115:       assertEquals(32, Node.INCRDECR_PROP);
1116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1117:       assertEquals(12, Node.COLUMN_BITS);
1118:       assertFalse(node1.isParamList());
1119:       assertFalse(node1.isSetterDef());
1120:       assertFalse(node1.isNull());
1121:       assertFalse(node1.isStringKey());
1122:       assertFalse(node1.isName());
1123:       assertFalse(node1.isAdd());
1124:       assertFalse(node1.isFunction());
1125:       assertFalse(node1.isDebugger());
1126:       assertFalse(node1.isDo());
1127:       assertFalse(node1.isDefaultCase());
1128:       assertFalse(node1.isVar());
1129:       assertFalse(node1.isArrayLit());
1130:       assertEquals(0, node1.getChildCount());
1131:       assertFalse(node1.isContinue());
1132:       assertFalse(node1.isNE());
1133:       assertEquals((-1), node1.getLineno());
1134:       assertFalse(node1.isFor());
1135:       assertFalse(node1.isLabelName());
1136:       assertFalse(node1.isIf());
1137:       assertFalse(node1.isCase());
1138:       assertFalse(node1.hasOneChild());
1139:       assertFalse(node1.isGetterDef());
1140:       assertFalse(node1.isNumber());
1141:       assertFalse(node1.isIn());
1142:       assertFalse(node1.isRegExp());
1143:       assertFalse(node1.isScript());
1144:       assertFalse(node1.isBlock());
1145:       assertFalse(node1.isTry());
1146:       assertFalse(node1.isCatch());
1147:       assertFalse(node1.isHook());
1148:       assertFalse(node1.isWith());
1149:       assertFalse(node1.isInstanceOf());
1150:       assertFalse(node1.hasMoreThanOneChild());
1151:       assertFalse(node1.isThis());
1152:       assertFalse(node1.isComma());
1153:       assertFalse(node1.isBreak());
1154:       assertFalse(node1.isGetProp());
1155:       assertFalse(node1.isObjectLit());
1156:       assertFalse(node1.isNot());
1157:       assertFalse(node1.isInc());
1158:       assertEquals((-1), node1.getCharno());
1159:       assertEquals(30, node1.getType());
1160:       assertFalse(node1.isSwitch());
1161:       assertFalse(node1.isAnd());
1162:       assertTrue(node1.isNew());
1163:       assertFalse(node1.isThrow());
1164:       assertFalse(node1.isCast());
1165:       assertFalse(node1.isFalse());
1166:       assertEquals((-1), node1.getSourcePosition());
1167:       assertFalse(node1.isDec());
1168:       assertFalse(node1.isLabel());
1169:       assertFalse(node1.hasChildren());
1170:       assertFalse(node1.isReturn());
1171:       assertFalse(node1.isDelProp());
1172:       assertFalse(node1.isAssignAdd());
1173:       assertFalse(node1.isString());
1174:       assertFalse(node1.isEmpty());
1175:       assertFalse(node1.isOr());
1176:       assertFalse(node1.isExprResult());
1177:       assertFalse(node1.isTrue());
1178:       assertFalse(node1.isVoid());
1179:       assertFalse(node1.isWhile());
1180:       assertFalse(node1.isCall());
1181:       assertFalse(node1.isGetElem());
1182:       assertFalse(node1.isAssign());
1183:       assertFalse(node1.isTypeOf());
1184:       assertFalse(node1.equals((Object)node0));
1185:       assertFalse(node1.equals((Object)node2));
1186:       assertTrue(boolean2 == boolean0);
1187:       assertTrue(boolean2 == boolean1);
1188:   }
1189: }
RegularFileObject[/tmp/EvoSuite_117_1628159636192/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:33:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_117_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_117_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_117_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:33:56.330 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(199.2059217532582);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

String string0 = node0.toString();
assertEquals("NUMBER 199.2059217532582", string0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(string0);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Iterable<Node> iterable0 = node0.children();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isBreak();
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node node1 = new Node(30, (-3923), 1186);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node1);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertEquals(30, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertTrue(node1.isNew());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newNumber((-3729.022741313));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertNotNull(node2);
assertNotSame(node2, node0);
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node2.isEquivalentTo(node0);
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node1.isReturn();
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertEquals(30, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertTrue(node1.isNew());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);


[MASTER] 10:34:00.051 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1628159639959/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1628159639959/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 10:34:00.051 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:00.051 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:00.052 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 440
[MASTER] 10:34:00.053 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1628159639959/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:33:59 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(199.2059217532582);
21:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
22:       assertEquals(29, Node.JSDOC_INFO_PROP);
23:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
24:       assertEquals(56, Node.CHANGE_TIME);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(43, Node.IS_CONSTANT_NAME);
29:       assertEquals(37, Node.OPT_ARG_NAME);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(55, Node.INFERRED_FUNCTION);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(53, Node.INPUT_ID);
36:       assertEquals(52, Node.LENGTH);
37:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
38:       assertEquals(8, Node.FLAG_NO_THROWS);
39:       assertEquals(15, Node.NO_SIDE_EFFECTS);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(40, Node.ORIGINALNAME_PROP);
43:       assertEquals(50, Node.FREE_CALL);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(48, Node.DIRECTIVES);
47:       assertEquals(54, Node.SLASH_V);
48:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
49:       assertEquals(1, Node.DECR_FLAG);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertNotNull(node0);
58:       assertFalse(node0.isGetElem());
59:       assertFalse(node0.isLabelName());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isCast());
63:       assertEquals((-1), node0.getLineno());
64:       assertFalse(node0.isOr());
65:       assertEquals((-1), node0.getSourcePosition());
66:       assertFalse(node0.isContinue());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isVar());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isSetterDef());
76:       assertEquals((-1), node0.getCharno());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isCase());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isScript());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isTry());
87:       assertFalse(node0.isHook());
88:       assertFalse(node0.isThis());
89:       assertEquals(39, node0.getType());
90:       assertFalse(node0.isFor());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isDelProp());
93:       assertFalse(node0.isGetterDef());
94:       assertFalse(node0.isArrayLit());
95:       assertFalse(node0.isEmpty());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isIf());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isTrue());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isInc());
103:       assertFalse(node0.isFunction());
104:       assertFalse(node0.isDefaultCase());
105:       assertEquals(0, node0.getChildCount());
106:       assertFalse(node0.isFalse());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isBreak());
109:       assertFalse(node0.isAdd());
110:       assertFalse(node0.isCall());
111:       assertFalse(node0.isNull());
112:       assertFalse(node0.isNot());
113:       assertFalse(node0.isObjectLit());
114:       assertFalse(node0.isString());
115:       assertFalse(node0.isExprResult());
116:       assertFalse(node0.isGetProp());
117:       assertTrue(node0.isNumber());
118:       assertFalse(node0.isComma());
119:       assertFalse(node0.isTypeOf());
120:       assertFalse(node0.hasChildren());
121:       assertFalse(node0.isDec());
122:       assertFalse(node0.isWhile());
123:       assertFalse(node0.isReturn());
124:       
125:       String string0 = node0.toString();
126:       assertEquals("NUMBER 199.2059217532582", string0);
127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
128:       assertEquals(29, Node.JSDOC_INFO_PROP);
129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
130:       assertEquals(56, Node.CHANGE_TIME);
131:       assertEquals(47, Node.IS_DISPATCHER);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       assertEquals(43, Node.IS_CONSTANT_NAME);
135:       assertEquals(37, Node.OPT_ARG_NAME);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(55, Node.INFERRED_FUNCTION);
139:       assertEquals(30, Node.VAR_ARGS_NAME);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(53, Node.INPUT_ID);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(50, Node.FREE_CALL);
150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(48, Node.DIRECTIVES);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(1, Node.DECR_FLAG);
156:       assertEquals(4095, Node.COLUMN_MASK);
157:       assertEquals(12, Node.COLUMN_BITS);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(32, Node.INCRDECR_PROP);
162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
163:       assertNotNull(string0);
164:       assertFalse(node0.isGetElem());
165:       assertFalse(node0.isLabelName());
166:       assertFalse(node0.isAssign());
167:       assertFalse(node0.hasOneChild());
168:       assertFalse(node0.isCast());
169:       assertEquals((-1), node0.getLineno());
170:       assertFalse(node0.isOr());
171:       assertEquals((-1), node0.getSourcePosition());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isDo());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isVar());
179:       assertFalse(node0.isThrow());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isSetterDef());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.isParamList());
184:       assertFalse(node0.isSwitch());
185:       assertFalse(node0.isCase());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isInstanceOf());
189:       assertFalse(node0.isCatch());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isTry());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.isThis());
195:       assertEquals(39, node0.getType());
196:       assertFalse(node0.isFor());
197:       assertFalse(node0.isBlock());
198:       assertFalse(node0.isDelProp());
199:       assertFalse(node0.isGetterDef());
200:       assertFalse(node0.isArrayLit());
201:       assertFalse(node0.isEmpty());
202:       assertFalse(node0.isDebugger());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isIf());
205:       assertFalse(node0.isNE());
206:       assertFalse(node0.isTrue());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isInc());
209:       assertFalse(node0.isFunction());
210:       assertFalse(node0.isDefaultCase());
211:       assertEquals(0, node0.getChildCount());
212:       assertFalse(node0.isFalse());
213:       assertFalse(node0.isName());
214:       assertFalse(node0.isBreak());
215:       assertFalse(node0.isAdd());
216:       assertFalse(node0.isCall());
217:       assertFalse(node0.isNull());
218:       assertFalse(node0.isNot());
219:       assertFalse(node0.isObjectLit());
220:       assertFalse(node0.isString());
221:       assertFalse(node0.isExprResult());
222:       assertFalse(node0.isGetProp());
223:       assertTrue(node0.isNumber());
224:       assertFalse(node0.isComma());
225:       assertFalse(node0.isTypeOf());
226:       assertFalse(node0.hasChildren());
227:       assertFalse(node0.isDec());
228:       assertFalse(node0.isWhile());
229:       assertFalse(node0.isReturn());
230:       
231:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
233:       assertEquals(29, Node.JSDOC_INFO_PROP);
234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
235:       assertEquals(56, Node.CHANGE_TIME);
236:       assertEquals(47, Node.IS_DISPATCHER);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
239:       assertEquals(43, Node.IS_CONSTANT_NAME);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(55, Node.INFERRED_FUNCTION);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(53, Node.INPUT_ID);
247:       assertEquals(52, Node.LENGTH);
248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(40, Node.ORIGINALNAME_PROP);
254:       assertEquals(50, Node.FREE_CALL);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(57, Node.REFLECTED_OBJECT);
257:       assertEquals(48, Node.DIRECTIVES);
258:       assertEquals(54, Node.SLASH_V);
259:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
260:       assertEquals(1, Node.DECR_FLAG);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(32, Node.INCRDECR_PROP);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertNotNull(node_FileLevelJsDocBuilder0);
269:       assertFalse(node0.isGetElem());
270:       assertFalse(node0.isLabelName());
271:       assertFalse(node0.isAssign());
272:       assertFalse(node0.hasOneChild());
273:       assertFalse(node0.isCast());
274:       assertEquals((-1), node0.getLineno());
275:       assertFalse(node0.isOr());
276:       assertEquals((-1), node0.getSourcePosition());
277:       assertFalse(node0.isContinue());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isDo());
280:       assertFalse(node0.isLabel());
281:       assertFalse(node0.isNew());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isVar());
284:       assertFalse(node0.isThrow());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isSetterDef());
287:       assertEquals((-1), node0.getCharno());
288:       assertFalse(node0.isParamList());
289:       assertFalse(node0.isSwitch());
290:       assertFalse(node0.isCase());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.hasMoreThanOneChild());
293:       assertFalse(node0.isInstanceOf());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isRegExp());
297:       assertFalse(node0.isTry());
298:       assertFalse(node0.isHook());
299:       assertFalse(node0.isThis());
300:       assertEquals(39, node0.getType());
301:       assertFalse(node0.isFor());
302:       assertFalse(node0.isBlock());
303:       assertFalse(node0.isDelProp());
304:       assertFalse(node0.isGetterDef());
305:       assertFalse(node0.isArrayLit());
306:       assertFalse(node0.isEmpty());
307:       assertFalse(node0.isDebugger());
308:       assertFalse(node0.isVoid());
309:       assertFalse(node0.isIf());
310:       assertFalse(node0.isNE());
311:       assertFalse(node0.isTrue());
312:       assertFalse(node0.isIn());
313:       assertFalse(node0.isInc());
314:       assertFalse(node0.isFunction());
315:       assertFalse(node0.isDefaultCase());
316:       assertEquals(0, node0.getChildCount());
317:       assertFalse(node0.isFalse());
318:       assertFalse(node0.isName());
319:       assertFalse(node0.isBreak());
320:       assertFalse(node0.isAdd());
321:       assertFalse(node0.isCall());
322:       assertFalse(node0.isNull());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isObjectLit());
325:       assertFalse(node0.isString());
326:       assertFalse(node0.isExprResult());
327:       assertFalse(node0.isGetProp());
328:       assertTrue(node0.isNumber());
329:       assertFalse(node0.isComma());
330:       assertFalse(node0.isTypeOf());
331:       assertFalse(node0.hasChildren());
332:       assertFalse(node0.isDec());
333:       assertFalse(node0.isWhile());
334:       assertFalse(node0.isReturn());
335:       
336:       Iterable<Node> iterable0 = node0.children();
337:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
340:       assertEquals(56, Node.CHANGE_TIME);
341:       assertEquals(47, Node.IS_DISPATCHER);
342:       assertEquals(2, Node.POST_FLAG);
343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
344:       assertEquals(43, Node.IS_CONSTANT_NAME);
345:       assertEquals(37, Node.OPT_ARG_NAME);
346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(55, Node.INFERRED_FUNCTION);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(36, Node.QUOTED_PROP);
351:       assertEquals(53, Node.INPUT_ID);
352:       assertEquals(52, Node.LENGTH);
353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
354:       assertEquals(8, Node.FLAG_NO_THROWS);
355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(39, Node.EMPTY_BLOCK);
358:       assertEquals(40, Node.ORIGINALNAME_PROP);
359:       assertEquals(50, Node.FREE_CALL);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(57, Node.REFLECTED_OBJECT);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(54, Node.SLASH_V);
364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
365:       assertEquals(1, Node.DECR_FLAG);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(12, Node.COLUMN_BITS);
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(32, Node.INCRDECR_PROP);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertNotNull(iterable0);
374:       assertFalse(node0.isGetElem());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isAssign());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node0.isCast());
379:       assertEquals((-1), node0.getLineno());
380:       assertFalse(node0.isOr());
381:       assertEquals((-1), node0.getSourcePosition());
382:       assertFalse(node0.isContinue());
383:       assertFalse(node0.isAnd());
384:       assertFalse(node0.isDo());
385:       assertFalse(node0.isLabel());
386:       assertFalse(node0.isNew());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isVar());
389:       assertFalse(node0.isThrow());
390:       assertFalse(node0.isStringKey());
391:       assertFalse(node0.isSetterDef());
392:       assertEquals((-1), node0.getCharno());
393:       assertFalse(node0.isParamList());
394:       assertFalse(node0.isSwitch());
395:       assertFalse(node0.isCase());
396:       assertFalse(node0.isWith());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(node0.isTry());
403:       assertFalse(node0.isHook());
404:       assertFalse(node0.isThis());
405:       assertEquals(39, node0.getType());
406:       assertFalse(node0.isFor());
407:       assertFalse(node0.isBlock());
408:       assertFalse(node0.isDelProp());
409:       assertFalse(node0.isGetterDef());
410:       assertFalse(node0.isArrayLit());
411:       assertFalse(node0.isEmpty());
412:       assertFalse(node0.isDebugger());
413:       assertFalse(node0.isVoid());
414:       assertFalse(node0.isIf());
415:       assertFalse(node0.isNE());
416:       assertFalse(node0.isTrue());
417:       assertFalse(node0.isIn());
418:       assertFalse(node0.isInc());
419:       assertFalse(node0.isFunction());
420:       assertFalse(node0.isDefaultCase());
421:       assertEquals(0, node0.getChildCount());
422:       assertFalse(node0.isFalse());
423:       assertFalse(node0.isName());
424:       assertFalse(node0.isBreak());
425:       assertFalse(node0.isAdd());
426:       assertFalse(node0.isCall());
427:       assertFalse(node0.isNull());
428:       assertFalse(node0.isNot());
429:       assertFalse(node0.isObjectLit());
430:       assertFalse(node0.isString());
431:       assertFalse(node0.isExprResult());
432:       assertFalse(node0.isGetProp());
433:       assertTrue(node0.isNumber());
434:       assertFalse(node0.isComma());
435:       assertFalse(node0.isTypeOf());
436:       assertFalse(node0.hasChildren());
437:       assertFalse(node0.isDec());
438:       assertFalse(node0.isWhile());
439:       assertFalse(node0.isReturn());
440:       assertFalse(iterable0.contains(node0));
441:       
442:       boolean boolean0 = node0.isBreak();
443:       assertFalse(boolean0);
444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
447:       assertEquals(56, Node.CHANGE_TIME);
448:       assertEquals(47, Node.IS_DISPATCHER);
449:       assertEquals(2, Node.POST_FLAG);
450:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
451:       assertEquals(43, Node.IS_CONSTANT_NAME);
452:       assertEquals(37, Node.OPT_ARG_NAME);
453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
454:       assertEquals(49, Node.DIRECT_EVAL);
455:       assertEquals(55, Node.INFERRED_FUNCTION);
456:       assertEquals(30, Node.VAR_ARGS_NAME);
457:       assertEquals(36, Node.QUOTED_PROP);
458:       assertEquals(53, Node.INPUT_ID);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(8, Node.FLAG_NO_THROWS);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(57, Node.LAST_PROP);
464:       assertEquals(39, Node.EMPTY_BLOCK);
465:       assertEquals(40, Node.ORIGINALNAME_PROP);
466:       assertEquals(50, Node.FREE_CALL);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(57, Node.REFLECTED_OBJECT);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(54, Node.SLASH_V);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(1, Node.DECR_FLAG);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(46, Node.IS_NAMESPACE);
476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
478:       assertEquals(32, Node.INCRDECR_PROP);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertFalse(node0.isGetElem());
481:       assertFalse(node0.isLabelName());
482:       assertFalse(node0.isAssign());
483:       assertFalse(node0.hasOneChild());
484:       assertFalse(node0.isCast());
485:       assertEquals((-1), node0.getLineno());
486:       assertFalse(node0.isOr());
487:       assertEquals((-1), node0.getSourcePosition());
488:       assertFalse(node0.isContinue());
489:       assertFalse(node0.isAnd());
490:       assertFalse(node0.isDo());
491:       assertFalse(node0.isLabel());
492:       assertFalse(node0.isNew());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isVar());
495:       assertFalse(node0.isThrow());
496:       assertFalse(node0.isStringKey());
497:       assertFalse(node0.isSetterDef());
498:       assertEquals((-1), node0.getCharno());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isSwitch());
501:       assertFalse(node0.isCase());
502:       assertFalse(node0.isWith());
503:       assertFalse(node0.hasMoreThanOneChild());
504:       assertFalse(node0.isInstanceOf());
505:       assertFalse(node0.isCatch());
506:       assertFalse(node0.isScript());
507:       assertFalse(node0.isRegExp());
508:       assertFalse(node0.isTry());
509:       assertFalse(node0.isHook());
510:       assertFalse(node0.isThis());
511:       assertEquals(39, node0.getType());
512:       assertFalse(node0.isFor());
513:       assertFalse(node0.isBlock());
514:       assertFalse(node0.isDelProp());
515:       assertFalse(node0.isGetterDef());
516:       assertFalse(node0.isArrayLit());
517:       assertFalse(node0.isEmpty());
518:       assertFalse(node0.isDebugger());
519:       assertFalse(node0.isVoid());
520:       assertFalse(node0.isIf());
521:       assertFalse(node0.isNE());
522:       assertFalse(node0.isTrue());
523:       assertFalse(node0.isIn());
524:       assertFalse(node0.isInc());
525:       assertFalse(node0.isFunction());
526:       assertFalse(node0.isDefaultCase());
527:       assertEquals(0, node0.getChildCount());
528:       assertFalse(node0.isFalse());
529:       assertFalse(node0.isName());
530:       assertFalse(node0.isBreak());
531:       assertFalse(node0.isAdd());
532:       assertFalse(node0.isCall());
533:       assertFalse(node0.isNull());
534:       assertFalse(node0.isNot());
535:       assertFalse(node0.isObjectLit());
536:       assertFalse(node0.isString());
537:       assertFalse(node0.isExprResult());
538:       assertFalse(node0.isGetProp());
539:       assertTrue(node0.isNumber());
540:       assertFalse(node0.isComma());
541:       assertFalse(node0.isTypeOf());
542:       assertFalse(node0.hasChildren());
543:       assertFalse(node0.isDec());
544:       assertFalse(node0.isWhile());
545:       assertFalse(node0.isReturn());
546:       
547:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
548:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
549:       assertEquals(29, Node.JSDOC_INFO_PROP);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(56, Node.CHANGE_TIME);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
555:       assertEquals(43, Node.IS_CONSTANT_NAME);
556:       assertEquals(37, Node.OPT_ARG_NAME);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(36, Node.QUOTED_PROP);
562:       assertEquals(53, Node.INPUT_ID);
563:       assertEquals(52, Node.LENGTH);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(8, Node.FLAG_NO_THROWS);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(57, Node.LAST_PROP);
568:       assertEquals(39, Node.EMPTY_BLOCK);
569:       assertEquals(40, Node.ORIGINALNAME_PROP);
570:       assertEquals(50, Node.FREE_CALL);
571:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
572:       assertEquals(57, Node.REFLECTED_OBJECT);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(54, Node.SLASH_V);
575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
576:       assertEquals(1, Node.DECR_FLAG);
577:       assertEquals(4095, Node.COLUMN_MASK);
578:       assertEquals(12, Node.COLUMN_BITS);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
581:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
582:       assertEquals(32, Node.INCRDECR_PROP);
583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
584:       assertNotNull(node_NodeMismatch0);
585:       assertFalse(node0.isGetElem());
586:       assertFalse(node0.isLabelName());
587:       assertFalse(node0.isAssign());
588:       assertFalse(node0.hasOneChild());
589:       assertFalse(node0.isCast());
590:       assertEquals((-1), node0.getLineno());
591:       assertFalse(node0.isOr());
592:       assertEquals((-1), node0.getSourcePosition());
593:       assertFalse(node0.isContinue());
594:       assertFalse(node0.isAnd());
595:       assertFalse(node0.isDo());
596:       assertFalse(node0.isLabel());
597:       assertFalse(node0.isNew());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isVar());
600:       assertFalse(node0.isThrow());
601:       assertFalse(node0.isStringKey());
602:       assertFalse(node0.isSetterDef());
603:       assertEquals((-1), node0.getCharno());
604:       assertFalse(node0.isParamList());
605:       assertFalse(node0.isSwitch());
606:       assertFalse(node0.isCase());
607:       assertFalse(node0.isWith());
608:       assertFalse(node0.hasMoreThanOneChild());
609:       assertFalse(node0.isInstanceOf());
610:       assertFalse(node0.isCatch());
611:       assertFalse(node0.isScript());
612:       assertFalse(node0.isRegExp());
613:       assertFalse(node0.isTry());
614:       assertFalse(node0.isHook());
615:       assertFalse(node0.isThis());
616:       assertEquals(39, node0.getType());
617:       assertFalse(node0.isFor());
618:       assertFalse(node0.isBlock());
619:       assertFalse(node0.isDelProp());
620:       assertFalse(node0.isGetterDef());
621:       assertFalse(node0.isArrayLit());
622:       assertFalse(node0.isEmpty());
623:       assertFalse(node0.isDebugger());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isIf());
626:       assertFalse(node0.isNE());
627:       assertFalse(node0.isTrue());
628:       assertFalse(node0.isIn());
629:       assertFalse(node0.isInc());
630:       assertFalse(node0.isFunction());
631:       assertFalse(node0.isDefaultCase());
632:       assertEquals(0, node0.getChildCount());
633:       assertFalse(node0.isFalse());
634:       assertFalse(node0.isName());
635:       assertFalse(node0.isBreak());
636:       assertFalse(node0.isAdd());
637:       assertFalse(node0.isCall());
638:       assertFalse(node0.isNull());
639:       assertFalse(node0.isNot());
640:       assertFalse(node0.isObjectLit());
641:       assertFalse(node0.isString());
642:       assertFalse(node0.isExprResult());
643:       assertFalse(node0.isGetProp());
644:       assertTrue(node0.isNumber());
645:       assertFalse(node0.isComma());
646:       assertFalse(node0.isTypeOf());
647:       assertFalse(node0.hasChildren());
648:       assertFalse(node0.isDec());
649:       assertFalse(node0.isWhile());
650:       assertFalse(node0.isReturn());
651:       
652:       Node node1 = new Node(30, 1335, 1186);
653:       assertEquals(46, Node.IS_NAMESPACE);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
656:       assertEquals(37, Node.OPT_ARG_NAME);
657:       assertEquals(56, Node.CHANGE_TIME);
658:       assertEquals(1, Node.DECR_FLAG);
659:       assertEquals(32, Node.INCRDECR_PROP);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(49, Node.DIRECT_EVAL);
662:       assertEquals(47, Node.IS_DISPATCHER);
663:       assertEquals(2, Node.POST_FLAG);
664:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
665:       assertEquals(52, Node.LENGTH);
666:       assertEquals(53, Node.INPUT_ID);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
669:       assertEquals(57, Node.LAST_PROP);
670:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
671:       assertEquals(29, Node.JSDOC_INFO_PROP);
672:       assertEquals(15, Node.NO_SIDE_EFFECTS);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(55, Node.INFERRED_FUNCTION);
675:       assertEquals(8, Node.FLAG_NO_THROWS);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(48, Node.DIRECTIVES);
680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
681:       assertEquals(40, Node.ORIGINALNAME_PROP);
682:       assertEquals(4095, Node.COLUMN_MASK);
683:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
684:       assertEquals(54, Node.SLASH_V);
685:       assertEquals(43, Node.IS_CONSTANT_NAME);
686:       assertEquals(50, Node.FREE_CALL);
687:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
689:       assertNotNull(node1);
690:       assertFalse(node1.isOr());
691:       assertFalse(node1.isLabel());
692:       assertFalse(node1.isAssignAdd());
693:       assertFalse(node1.isReturn());
694:       assertFalse(node1.hasMoreThanOneChild());
695:       assertFalse(node1.isTypeOf());
696:       assertFalse(node1.hasChildren());
697:       assertFalse(node1.isDec());
698:       assertFalse(node1.isLabelName());
699:       assertFalse(node1.isAssign());
700:       assertFalse(node1.isGetElem());
701:       assertEquals(1186, node1.getCharno());
702:       assertFalse(node1.isContinue());
703:       assertFalse(node1.isCast());
704:       assertEquals(30, node1.getType());
705:       assertFalse(node1.isAdd());
706:       assertFalse(node1.isVar());
707:       assertFalse(node1.isDo());
708:       assertFalse(node1.isSetterDef());
709:       assertFalse(node1.isInstanceOf());
710:       assertFalse(node1.isParamList());
711:       assertFalse(node1.isThis());
712:       assertEquals(0, node1.getChildCount());
713:       assertFalse(node1.isWith());
714:       assertFalse(node1.isStringKey());
715:       assertFalse(node1.isCatch());
716:       assertEquals(5469346, node1.getSourcePosition());
717:       assertFalse(node1.isTry());
718:       assertFalse(node1.isBlock());
719:       assertFalse(node1.isRegExp());
720:       assertFalse(node1.isHook());
721:       assertFalse(node1.isFor());
722:       assertFalse(node1.isGetterDef());
723:       assertFalse(node1.isNumber());
724:       assertFalse(node1.isScript());
725:       assertFalse(node1.isCase());
726:       assertFalse(node1.hasOneChild());
727:       assertFalse(node1.isIn());
728:       assertFalse(node1.isNE());
729:       assertFalse(node1.isDelProp());
730:       assertFalse(node1.isIf());
731:       assertFalse(node1.isSwitch());
732:       assertFalse(node1.isArrayLit());
733:       assertTrue(node1.isNew());
734:       assertFalse(node1.isFunction());
735:       assertFalse(node1.isTrue());
736:       assertFalse(node1.isEmpty());
737:       assertEquals(1335, node1.getLineno());
738:       assertFalse(node1.isThrow());
739:       assertFalse(node1.isDefaultCase());
740:       assertFalse(node1.isInc());
741:       assertFalse(node1.isNull());
742:       assertFalse(node1.isObjectLit());
743:       assertFalse(node1.isComma());
744:       assertFalse(node1.isName());
745:       assertFalse(node1.isFalse());
746:       assertFalse(node1.isAnd());
747:       assertFalse(node1.isExprResult());
748:       assertFalse(node1.isCall());
749:       assertFalse(node1.isBreak());
750:       assertFalse(node1.isVoid());
751:       assertFalse(node1.isDebugger());
752:       assertFalse(node1.isNot());
753:       assertFalse(node1.isString());
754:       assertFalse(node1.isWhile());
755:       assertFalse(node1.isGetProp());
756:       assertFalse(node1.equals((Object)node0));
757:       
758:       Node node2 = Node.newNumber((-3729.022741313));
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(30, Node.VAR_ARGS_NAME);
761:       assertEquals(1, Node.DECR_FLAG);
762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
763:       assertEquals(52, Node.LENGTH);
764:       assertEquals(37, Node.OPT_ARG_NAME);
765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
766:       assertEquals(57, Node.REFLECTED_OBJECT);
767:       assertEquals(46, Node.IS_NAMESPACE);
768:       assertEquals(54, Node.SLASH_V);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
771:       assertEquals(29, Node.JSDOC_INFO_PROP);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(40, Node.ORIGINALNAME_PROP);
774:       assertEquals(8, Node.FLAG_NO_THROWS);
775:       assertEquals(39, Node.EMPTY_BLOCK);
776:       assertEquals(53, Node.INPUT_ID);
777:       assertEquals(47, Node.IS_DISPATCHER);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
780:       assertEquals(36, Node.QUOTED_PROP);
781:       assertEquals(4095, Node.COLUMN_MASK);
782:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
783:       assertEquals(55, Node.INFERRED_FUNCTION);
784:       assertEquals(48, Node.DIRECTIVES);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(43, Node.IS_CONSTANT_NAME);
787:       assertEquals(50, Node.FREE_CALL);
788:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
793:       assertEquals(32, Node.INCRDECR_PROP);
794:       assertEquals(12, Node.COLUMN_BITS);
795:       assertNotNull(node2);
796:       assertNotSame(node2, node0);
797:       assertEquals(39, node2.getType());
798:       assertFalse(node2.isDo());
799:       assertFalse(node2.isWhile());
800:       assertFalse(node2.isOr());
801:       assertFalse(node2.isAdd());
802:       assertFalse(node2.isNew());
803:       assertEquals((-1), node2.getSourcePosition());
804:       assertFalse(node2.isLabelName());
805:       assertFalse(node2.isStringKey());
806:       assertFalse(node2.isVar());
807:       assertFalse(node2.isParamList());
808:       assertFalse(node2.isLabel());
809:       assertFalse(node2.isAssignAdd());
810:       assertFalse(node2.isCast());
811:       assertFalse(node2.isContinue());
812:       assertEquals(0, node2.getChildCount());
813:       assertFalse(node2.isNot());
814:       assertFalse(node2.isDefaultCase());
815:       assertFalse(node2.isAnd());
816:       assertFalse(node2.isVoid());
817:       assertFalse(node2.isDebugger());
818:       assertFalse(node2.isGetProp());
819:       assertFalse(node2.isTrue());
820:       assertFalse(node2.isObjectLit());
821:       assertFalse(node2.isAssign());
822:       assertFalse(node2.isBreak());
823:       assertFalse(node2.hasChildren());
824:       assertFalse(node2.isNull());
825:       assertFalse(node2.isGetElem());
826:       assertFalse(node2.isCall());
827:       assertFalse(node2.isDelProp());
828:       assertFalse(node2.isName());
829:       assertFalse(node2.isExprResult());
830:       assertFalse(node2.isReturn());
831:       assertFalse(node2.isComma());
832:       assertFalse(node2.isDec());
833:       assertFalse(node2.isTypeOf());
834:       assertFalse(node2.isCase());
835:       assertFalse(node2.isString());
836:       assertFalse(node2.isSwitch());
837:       assertTrue(node2.isNumber());
838:       assertEquals((-1), node2.getCharno());
839:       assertFalse(node2.isInc());
840:       assertFalse(node2.isIn());
841:       assertFalse(node2.isGetterDef());
842:       assertFalse(node2.isEmpty());
843:       assertFalse(node2.isThrow());
844:       assertFalse(node2.isArrayLit());
845:       assertFalse(node2.isFalse());
846:       assertFalse(node2.isFunction());
847:       assertFalse(node2.isTry());
848:       assertFalse(node2.isSetterDef());
849:       assertFalse(node2.isScript());
850:       assertFalse(node2.isFor());
851:       assertFalse(node2.isNE());
852:       assertFalse(node2.hasOneChild());
853:       assertFalse(node2.isIf());
854:       assertEquals((-1), node2.getLineno());
855:       assertFalse(node2.isHook());
856:       assertFalse(node2.isThis());
857:       assertFalse(node2.isBlock());
858:       assertFalse(node2.isRegExp());
859:       assertFalse(node2.isCatch());
860:       assertFalse(node2.isInstanceOf());
861:       assertFalse(node2.isWith());
862:       assertFalse(node2.hasMoreThanOneChild());
863:       assertFalse(node2.equals((Object)node1));
864:       assertFalse(node2.equals((Object)node0));
865:       
866:       boolean boolean1 = node2.isEquivalentTo(node0);
867:       assertFalse(boolean1);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(29, Node.JSDOC_INFO_PROP);
870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(2, Node.POST_FLAG);
874:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
875:       assertEquals(43, Node.IS_CONSTANT_NAME);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
878:       assertEquals(49, Node.DIRECT_EVAL);
879:       assertEquals(55, Node.INFERRED_FUNCTION);
880:       assertEquals(30, Node.VAR_ARGS_NAME);
881:       assertEquals(36, Node.QUOTED_PROP);
882:       assertEquals(53, Node.INPUT_ID);
883:       assertEquals(52, Node.LENGTH);
884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
885:       assertEquals(8, Node.FLAG_NO_THROWS);
886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
887:       assertEquals(57, Node.LAST_PROP);
888:       assertEquals(39, Node.EMPTY_BLOCK);
889:       assertEquals(40, Node.ORIGINALNAME_PROP);
890:       assertEquals(50, Node.FREE_CALL);
891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
892:       assertEquals(57, Node.REFLECTED_OBJECT);
893:       assertEquals(48, Node.DIRECTIVES);
894:       assertEquals(54, Node.SLASH_V);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(1, Node.DECR_FLAG);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(46, Node.IS_NAMESPACE);
900:       assertEquals(51, Node.STATIC_SOURCE_FILE);
901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
902:       assertEquals(32, Node.INCRDECR_PROP);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(49, Node.DIRECT_EVAL);
905:       assertEquals(30, Node.VAR_ARGS_NAME);
906:       assertEquals(1, Node.DECR_FLAG);
907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(37, Node.OPT_ARG_NAME);
910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
911:       assertEquals(57, Node.REFLECTED_OBJECT);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(54, Node.SLASH_V);
914:       assertEquals(56, Node.CHANGE_TIME);
915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
916:       assertEquals(29, Node.JSDOC_INFO_PROP);
917:       assertEquals(2, Node.POST_FLAG);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertEquals(8, Node.FLAG_NO_THROWS);
920:       assertEquals(39, Node.EMPTY_BLOCK);
921:       assertEquals(53, Node.INPUT_ID);
922:       assertEquals(47, Node.IS_DISPATCHER);
923:       assertEquals(57, Node.LAST_PROP);
924:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
925:       assertEquals(36, Node.QUOTED_PROP);
926:       assertEquals(4095, Node.COLUMN_MASK);
927:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
928:       assertEquals(55, Node.INFERRED_FUNCTION);
929:       assertEquals(48, Node.DIRECTIVES);
930:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
931:       assertEquals(43, Node.IS_CONSTANT_NAME);
932:       assertEquals(50, Node.FREE_CALL);
933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
938:       assertEquals(32, Node.INCRDECR_PROP);
939:       assertEquals(12, Node.COLUMN_BITS);
940:       assertNotSame(node0, node2);
941:       assertNotSame(node2, node0);
942:       assertFalse(node0.isGetElem());
943:       assertFalse(node0.isLabelName());
944:       assertFalse(node0.isAssign());
945:       assertFalse(node0.hasOneChild());
946:       assertFalse(node0.isCast());
947:       assertEquals((-1), node0.getLineno());
948:       assertFalse(node0.isOr());
949:       assertEquals((-1), node0.getSourcePosition());
950:       assertFalse(node0.isContinue());
951:       assertFalse(node0.isAnd());
952:       assertFalse(node0.isDo());
953:       assertFalse(node0.isLabel());
954:       assertFalse(node0.isNew());
955:       assertFalse(node0.isAssignAdd());
956:       assertFalse(node0.isVar());
957:       assertFalse(node0.isThrow());
958:       assertFalse(node0.isStringKey());
959:       assertFalse(node0.isSetterDef());
960:       assertEquals((-1), node0.getCharno());
961:       assertFalse(node0.isParamList());
962:       assertFalse(node0.isSwitch());
963:       assertFalse(node0.isCase());
964:       assertFalse(node0.isWith());
965:       assertFalse(node0.hasMoreThanOneChild());
966:       assertFalse(node0.isInstanceOf());
967:       assertFalse(node0.isCatch());
968:       assertFalse(node0.isScript());
969:       assertFalse(node0.isRegExp());
970:       assertFalse(node0.isTry());
971:       assertFalse(node0.isHook());
972:       assertFalse(node0.isThis());
973:       assertEquals(39, node0.getType());
974:       assertFalse(node0.isFor());
975:       assertFalse(node0.isBlock());
976:       assertFalse(node0.isDelProp());
977:       assertFalse(node0.isGetterDef());
978:       assertFalse(node0.isArrayLit());
979:       assertFalse(node0.isEmpty());
980:       assertFalse(node0.isDebugger());
981:       assertFalse(node0.isVoid());
982:       assertFalse(node0.isIf());
983:       assertFalse(node0.isNE());
984:       assertFalse(node0.isTrue());
985:       assertFalse(node0.isIn());
986:       assertFalse(node0.isInc());
987:       assertFalse(node0.isFunction());
988:       assertFalse(node0.isDefaultCase());
989:       assertEquals(0, node0.getChildCount());
990:       assertFalse(node0.isFalse());
991:       assertFalse(node0.isName());
992:       assertFalse(node0.isBreak());
993:       assertFalse(node0.isAdd());
994:       assertFalse(node0.isCall());
995:       assertFalse(node0.isNull());
996:       assertFalse(node0.isNot());
997:       assertFalse(node0.isObjectLit());
998:       assertFalse(node0.isString());
999:       assertFalse(node0.isExprResult());
1000:       assertFalse(node0.isGetProp());
1001:       assertTrue(node0.isNumber());
1002:       assertFalse(node0.isComma());
1003:       assertFalse(node0.isTypeOf());
1004:       assertFalse(node0.hasChildren());
1005:       assertFalse(node0.isDec());
1006:       assertFalse(node0.isWhile());
1007:       assertFalse(node0.isReturn());
1008:       assertEquals(39, node2.getType());
1009:       assertFalse(node2.isDo());
1010:       assertFalse(node2.isWhile());
1011:       assertFalse(node2.isOr());
1012:       assertFalse(node2.isAdd());
1013:       assertFalse(node2.isNew());
1014:       assertEquals((-1), node2.getSourcePosition());
1015:       assertFalse(node2.isLabelName());
1016:       assertFalse(node2.isStringKey());
1017:       assertFalse(node2.isVar());
1018:       assertFalse(node2.isParamList());
1019:       assertFalse(node2.isLabel());
1020:       assertFalse(node2.isAssignAdd());
1021:       assertFalse(node2.isCast());
1022:       assertFalse(node2.isContinue());
1023:       assertEquals(0, node2.getChildCount());
1024:       assertFalse(node2.isNot());
1025:       assertFalse(node2.isDefaultCase());
1026:       assertFalse(node2.isAnd());
1027:       assertFalse(node2.isVoid());
1028:       assertFalse(node2.isDebugger());
1029:       assertFalse(node2.isGetProp());
1030:       assertFalse(node2.isTrue());
1031:       assertFalse(node2.isObjectLit());
1032:       assertFalse(node2.isAssign());
1033:       assertFalse(node2.isBreak());
1034:       assertFalse(node2.hasChildren());
1035:       assertFalse(node2.isNull());
1036:       assertFalse(node2.isGetElem());
1037:       assertFalse(node2.isCall());
1038:       assertFalse(node2.isDelProp());
1039:       assertFalse(node2.isName());
1040:       assertFalse(node2.isExprResult());
1041:       assertFalse(node2.isReturn());
1042:       assertFalse(node2.isComma());
1043:       assertFalse(node2.isDec());
1044:       assertFalse(node2.isTypeOf());
1045:       assertFalse(node2.isCase());
1046:       assertFalse(node2.isString());
1047:       assertFalse(node2.isSwitch());
1048:       assertTrue(node2.isNumber());
1049:       assertEquals((-1), node2.getCharno());
1050:       assertFalse(node2.isInc());
1051:       assertFalse(node2.isIn());
1052:       assertFalse(node2.isGetterDef());
1053:       assertFalse(node2.isEmpty());
1054:       assertFalse(node2.isThrow());
1055:       assertFalse(node2.isArrayLit());
1056:       assertFalse(node2.isFalse());
1057:       assertFalse(node2.isFunction());
1058:       assertFalse(node2.isTry());
1059:       assertFalse(node2.isSetterDef());
1060:       assertFalse(node2.isScript());
1061:       assertFalse(node2.isFor());
1062:       assertFalse(node2.isNE());
1063:       assertFalse(node2.hasOneChild());
1064:       assertFalse(node2.isIf());
1065:       assertEquals((-1), node2.getLineno());
1066:       assertFalse(node2.isHook());
1067:       assertFalse(node2.isThis());
1068:       assertFalse(node2.isBlock());
1069:       assertFalse(node2.isRegExp());
1070:       assertFalse(node2.isCatch());
1071:       assertFalse(node2.isInstanceOf());
1072:       assertFalse(node2.isWith());
1073:       assertFalse(node2.hasMoreThanOneChild());
1074:       assertFalse(node0.equals((Object)node1));
1075:       assertFalse(node0.equals((Object)node2));
1076:       assertFalse(node2.equals((Object)node1));
1077:       assertFalse(node2.equals((Object)node0));
1078:       assertTrue(boolean1 == boolean0);
1079:       
1080:       boolean boolean2 = node1.isReturn();
1081:       assertFalse(boolean2);
1082:       assertEquals(46, Node.IS_NAMESPACE);
1083:       assertEquals(12, Node.COLUMN_BITS);
1084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(56, Node.CHANGE_TIME);
1087:       assertEquals(1, Node.DECR_FLAG);
1088:       assertEquals(32, Node.INCRDECR_PROP);
1089:       assertEquals(30, Node.VAR_ARGS_NAME);
1090:       assertEquals(49, Node.DIRECT_EVAL);
1091:       assertEquals(47, Node.IS_DISPATCHER);
1092:       assertEquals(2, Node.POST_FLAG);
1093:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1094:       assertEquals(52, Node.LENGTH);
1095:       assertEquals(53, Node.INPUT_ID);
1096:       assertEquals(57, Node.REFLECTED_OBJECT);
1097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1098:       assertEquals(57, Node.LAST_PROP);
1099:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1100:       assertEquals(29, Node.JSDOC_INFO_PROP);
1101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1103:       assertEquals(55, Node.INFERRED_FUNCTION);
1104:       assertEquals(8, Node.FLAG_NO_THROWS);
1105:       assertEquals(36, Node.QUOTED_PROP);
1106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1107:       assertEquals(39, Node.EMPTY_BLOCK);
1108:       assertEquals(48, Node.DIRECTIVES);
1109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1110:       assertEquals(40, Node.ORIGINALNAME_PROP);
1111:       assertEquals(4095, Node.COLUMN_MASK);
1112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1113:       assertEquals(54, Node.SLASH_V);
1114:       assertEquals(43, Node.IS_CONSTANT_NAME);
1115:       assertEquals(50, Node.FREE_CALL);
1116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertFalse(node1.isOr());
1119:       assertFalse(node1.isLabel());
1120:       assertFalse(node1.isAssignAdd());
1121:       assertFalse(node1.isReturn());
1122:       assertFalse(node1.hasMoreThanOneChild());
1123:       assertFalse(node1.isTypeOf());
1124:       assertFalse(node1.hasChildren());
1125:       assertFalse(node1.isDec());
1126:       assertFalse(node1.isLabelName());
1127:       assertFalse(node1.isAssign());
1128:       assertFalse(node1.isGetElem());
1129:       assertEquals(1186, node1.getCharno());
1130:       assertFalse(node1.isContinue());
1131:       assertFalse(node1.isCast());
1132:       assertEquals(30, node1.getType());
1133:       assertFalse(node1.isAdd());
1134:       assertFalse(node1.isVar());
1135:       assertFalse(node1.isDo());
1136:       assertFalse(node1.isSetterDef());
1137:       assertFalse(node1.isInstanceOf());
1138:       assertFalse(node1.isParamList());
1139:       assertFalse(node1.isThis());
1140:       assertEquals(0, node1.getChildCount());
1141:       assertFalse(node1.isWith());
1142:       assertFalse(node1.isStringKey());
1143:       assertFalse(node1.isCatch());
1144:       assertEquals(5469346, node1.getSourcePosition());
1145:       assertFalse(node1.isTry());
1146:       assertFalse(node1.isBlock());
1147:       assertFalse(node1.isRegExp());
1148:       assertFalse(node1.isHook());
1149:       assertFalse(node1.isFor());
1150:       assertFalse(node1.isGetterDef());
1151:       assertFalse(node1.isNumber());
1152:       assertFalse(node1.isScript());
1153:       assertFalse(node1.isCase());
1154:       assertFalse(node1.hasOneChild());
1155:       assertFalse(node1.isIn());
1156:       assertFalse(node1.isNE());
1157:       assertFalse(node1.isDelProp());
1158:       assertFalse(node1.isIf());
1159:       assertFalse(node1.isSwitch());
1160:       assertFalse(node1.isArrayLit());
1161:       assertTrue(node1.isNew());
1162:       assertFalse(node1.isFunction());
1163:       assertFalse(node1.isTrue());
1164:       assertFalse(node1.isEmpty());
1165:       assertEquals(1335, node1.getLineno());
1166:       assertFalse(node1.isThrow());
1167:       assertFalse(node1.isDefaultCase());
1168:       assertFalse(node1.isInc());
1169:       assertFalse(node1.isNull());
1170:       assertFalse(node1.isObjectLit());
1171:       assertFalse(node1.isComma());
1172:       assertFalse(node1.isName());
1173:       assertFalse(node1.isFalse());
1174:       assertFalse(node1.isAnd());
1175:       assertFalse(node1.isExprResult());
1176:       assertFalse(node1.isCall());
1177:       assertFalse(node1.isBreak());
1178:       assertFalse(node1.isVoid());
1179:       assertFalse(node1.isDebugger());
1180:       assertFalse(node1.isNot());
1181:       assertFalse(node1.isString());
1182:       assertFalse(node1.isWhile());
1183:       assertFalse(node1.isGetProp());
1184:       assertFalse(node1.equals((Object)node2));
1185:       assertFalse(node1.equals((Object)node0));
1186:       assertTrue(boolean2 == boolean0);
1187:       assertTrue(boolean2 == boolean1);
1188:       
1189:       boolean boolean3 = node1.isTrue();
1190:       assertFalse(boolean3);
1191:       assertEquals(46, Node.IS_NAMESPACE);
1192:       assertEquals(12, Node.COLUMN_BITS);
1193:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1194:       assertEquals(37, Node.OPT_ARG_NAME);
1195:       assertEquals(56, Node.CHANGE_TIME);
1196:       assertEquals(1, Node.DECR_FLAG);
1197:       assertEquals(32, Node.INCRDECR_PROP);
1198:       assertEquals(30, Node.VAR_ARGS_NAME);
1199:       assertEquals(49, Node.DIRECT_EVAL);
1200:       assertEquals(47, Node.IS_DISPATCHER);
1201:       assertEquals(2, Node.POST_FLAG);
1202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1203:       assertEquals(52, Node.LENGTH);
1204:       assertEquals(53, Node.INPUT_ID);
1205:       assertEquals(57, Node.REFLECTED_OBJECT);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(57, Node.LAST_PROP);
1208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1209:       assertEquals(29, Node.JSDOC_INFO_PROP);
1210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1212:       assertEquals(55, Node.INFERRED_FUNCTION);
1213:       assertEquals(8, Node.FLAG_NO_THROWS);
1214:       assertEquals(36, Node.QUOTED_PROP);
1215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1216:       assertEquals(39, Node.EMPTY_BLOCK);
1217:       assertEquals(48, Node.DIRECTIVES);
1218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1219:       assertEquals(40, Node.ORIGINALNAME_PROP);
1220:       assertEquals(4095, Node.COLUMN_MASK);
1221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1222:       assertEquals(54, Node.SLASH_V);
1223:       assertEquals(43, Node.IS_CONSTANT_NAME);
1224:       assertEquals(50, Node.FREE_CALL);
1225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1227:       assertFalse(node1.isOr());
1228:       assertFalse(node1.isLabel());
1229:       assertFalse(node1.isAssignAdd());
1230:       assertFalse(node1.isReturn());
1231:       assertFalse(node1.hasMoreThanOneChild());
1232:       assertFalse(node1.isTypeOf());
1233:       assertFalse(node1.hasChildren());
1234:       assertFalse(node1.isDec());
1235:       assertFalse(node1.isLabelName());
1236:       assertFalse(node1.isAssign());
1237:       assertFalse(node1.isGetElem());
1238:       assertEquals(1186, node1.getCharno());
1239:       assertFalse(node1.isContinue());
1240:       assertFalse(node1.isCast());
1241:       assertEquals(30, node1.getType());
1242:       assertFalse(node1.isAdd());
1243:       assertFalse(node1.isVar());
1244:       assertFalse(node1.isDo());
1245:       assertFalse(node1.isSetterDef());
1246:       assertFalse(node1.isInstanceOf());
1247:       assertFalse(node1.isParamList());
1248:       assertFalse(node1.isThis());
1249:       assertEquals(0, node1.getChildCount());
1250:       assertFalse(node1.isWith());
1251:       assertFalse(node1.isStringKey());
1252:       assertFalse(node1.isCatch());
1253:       assertEquals(5469346, node1.getSourcePosition());
1254:       assertFalse(node1.isTry());
1255:       assertFalse(node1.isBlock());
1256:       assertFalse(node1.isRegExp());
1257:       assertFalse(node1.isHook());
1258:       assertFalse(node1.isFor());
1259:       assertFalse(node1.isGetterDef());
1260:       assertFalse(node1.isNumber());
1261:       assertFalse(node1.isScript());
1262:       assertFalse(node1.isCase());
1263:       assertFalse(node1.hasOneChild());
1264:       assertFalse(node1.isIn());
1265:       assertFalse(node1.isNE());
1266:       assertFalse(node1.isDelProp());
1267:       assertFalse(node1.isIf());
1268:       assertFalse(node1.isSwitch());
1269:       assertFalse(node1.isArrayLit());
1270:       assertTrue(node1.isNew());
1271:       assertFalse(node1.isFunction());
1272:       assertFalse(node1.isTrue());
1273:       assertFalse(node1.isEmpty());
1274:       assertEquals(1335, node1.getLineno());
1275:       assertFalse(node1.isThrow());
1276:       assertFalse(node1.isDefaultCase());
1277:       assertFalse(node1.isInc());
1278:       assertFalse(node1.isNull());
1279:       assertFalse(node1.isObjectLit());
1280:       assertFalse(node1.isComma());
1281:       assertFalse(node1.isName());
1282:       assertFalse(node1.isFalse());
1283:       assertFalse(node1.isAnd());
1284:       assertFalse(node1.isExprResult());
1285:       assertFalse(node1.isCall());
1286:       assertFalse(node1.isBreak());
1287:       assertFalse(node1.isVoid());
1288:       assertFalse(node1.isDebugger());
1289:       assertFalse(node1.isNot());
1290:       assertFalse(node1.isString());
1291:       assertFalse(node1.isWhile());
1292:       assertFalse(node1.isGetProp());
1293:       assertFalse(node1.equals((Object)node2));
1294:       assertFalse(node1.equals((Object)node0));
1295:       assertTrue(boolean3 == boolean2);
1296:       assertTrue(boolean3 == boolean1);
1297:       assertTrue(boolean3 == boolean0);
1298:   }
1299: }
RegularFileObject[/tmp/EvoSuite_144_1628159639959/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:34:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:34:00.140 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(199.2059217532582);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());

String string0 = node0.toString();
assertEquals("NUMBER 199.2059217532582", string0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(string0);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isBreak();
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());

Node node1 = new Node(30, 1335, 1186);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node1);
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(1186, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(30, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(5469346, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertTrue(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertEquals(1335, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newNumber((-3729.022741313));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node2);
assertNotSame(node2, node0);
assertEquals(39, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertTrue(node2.isNumber());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

boolean boolean1 = node2.isEquivalentTo(node0);
assertFalse(boolean1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(39, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertTrue(node2.isNumber());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node1.isReturn();
assertFalse(boolean2);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(1186, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(30, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(5469346, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertTrue(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertEquals(1335, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

boolean boolean3 = node1.isTrue();
assertFalse(boolean3);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(1186, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(30, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(5469346, node1.getSourcePosition());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertTrue(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertEquals(1335, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);


[MASTER] 10:34:06.907 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_190_1628159646781/com/google/javascript/rhino/Node_190_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_190_1628159646781/com/google/javascript/rhino/Node_190_tmp__ESTest_scaffolding.java]]
[MASTER] 10:34:06.907 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:06.907 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:06.907 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1400
[MASTER] 10:34:06.908 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_190_1628159646781/com/google/javascript/rhino/Node_190_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:34:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_190_tmp__ESTest extends Node_190_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node[] nodeArray0 = new Node[0];
22:       Node node0 = new Node(154, nodeArray0, 154, (-2313));
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(47, Node.IS_DISPATCHER);
25:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
26:       assertEquals(37, Node.OPT_ARG_NAME);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(56, Node.CHANGE_TIME);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(30, Node.VAR_ARGS_NAME);
32:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(40, Node.ORIGINALNAME_PROP);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(4095, Node.COLUMN_MASK);
52:       assertEquals(54, Node.SLASH_V);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(43, Node.IS_CONSTANT_NAME);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
59:       assertEquals(0, nodeArray0.length);
60:       assertNotNull(node0);
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isIn());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isFunction());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isDefaultCase());
74:       assertTrue(node0.isStringKey());
75:       assertFalse(node0.isComma());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isNull());
78:       assertFalse(node0.isFalse());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.isName());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isString());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isWhile());
89:       assertEquals((-1), node0.getSourcePosition());
90:       assertFalse(node0.isOr());
91:       assertFalse(node0.isAssign());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isLabel());
94:       assertFalse(node0.hasChildren());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isDec());
97:       assertFalse(node0.isTypeOf());
98:       assertFalse(node0.hasMoreThanOneChild());
99:       assertFalse(node0.isCast());
100:       assertFalse(node0.isContinue());
101:       assertEquals(154, node0.getType());
102:       assertFalse(node0.isGetElem());
103:       assertEquals((-1), node0.getLineno());
104:       assertFalse(node0.isLabelName());
105:       assertFalse(node0.isAdd());
106:       assertFalse(node0.isVar());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isNew());
110:       assertFalse(node0.isThis());
111:       assertFalse(node0.isSetterDef());
112:       assertFalse(node0.isParamList());
113:       assertEquals(0, node0.getChildCount());
114:       assertFalse(node0.isCatch());
115:       assertFalse(node0.isInstanceOf());
116:       assertFalse(node0.isSwitch());
117:       assertEquals((-1), node0.getCharno());
118:       assertFalse(node0.isBlock());
119:       assertFalse(node0.isScript());
120:       assertFalse(node0.isWith());
121:       assertFalse(node0.isRegExp());
122:       assertFalse(node0.isHook());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isCase());
125:       assertFalse(node0.hasOneChild());
126:       assertFalse(node0.isTry());
127:       
128:       Node node1 = new Node(102, node0, node0, node0, node0, 102, (-577));
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(32, Node.INCRDECR_PROP);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(56, Node.CHANGE_TIME);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertEquals(57, Node.LAST_PROP);
143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(57, Node.REFLECTED_OBJECT);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(40, Node.ORIGINALNAME_PROP);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
165:       assertEquals(40, Node.ORIGINALNAME_PROP);
166:       assertEquals(50, Node.FREE_CALL);
167:       assertEquals(57, Node.REFLECTED_OBJECT);
168:       assertEquals(54, Node.SLASH_V);
169:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
170:       assertEquals(48, Node.DIRECTIVES);
171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
172:       assertEquals(4095, Node.COLUMN_MASK);
173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
174:       assertEquals(1, Node.DECR_FLAG);
175:       assertEquals(32, Node.INCRDECR_PROP);
176:       assertEquals(43, Node.IS_CONSTANT_NAME);
177:       assertEquals(12, Node.COLUMN_BITS);
178:       assertEquals(46, Node.IS_NAMESPACE);
179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
181:       assertEquals(47, Node.IS_DISPATCHER);
182:       assertEquals(56, Node.CHANGE_TIME);
183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
184:       assertEquals(37, Node.OPT_ARG_NAME);
185:       assertEquals(2, Node.POST_FLAG);
186:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
187:       assertEquals(30, Node.VAR_ARGS_NAME);
188:       assertEquals(49, Node.DIRECT_EVAL);
189:       assertEquals(57, Node.LAST_PROP);
190:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
191:       assertEquals(8, Node.FLAG_NO_THROWS);
192:       assertEquals(39, Node.EMPTY_BLOCK);
193:       assertEquals(36, Node.QUOTED_PROP);
194:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
195:       assertEquals(52, Node.LENGTH);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
201:       assertEquals(0, nodeArray0.length);
202:       assertNotNull(node1);
203:       assertFalse(node0.isNE());
204:       assertFalse(node0.isIn());
205:       assertFalse(node0.isGetterDef());
206:       assertFalse(node0.isArrayLit());
207:       assertFalse(node0.isIf());
208:       assertFalse(node0.isDelProp());
209:       assertFalse(node0.isVoid());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isFunction());
212:       assertFalse(node0.isTrue());
213:       assertFalse(node0.isThrow());
214:       assertFalse(node0.isEmpty());
215:       assertFalse(node0.isDefaultCase());
216:       assertTrue(node0.isStringKey());
217:       assertFalse(node0.isComma());
218:       assertFalse(node0.isGetProp());
219:       assertFalse(node0.isNull());
220:       assertFalse(node0.isFalse());
221:       assertFalse(node0.isAnd());
222:       assertFalse(node0.isCall());
223:       assertFalse(node0.isBreak());
224:       assertFalse(node0.isName());
225:       assertFalse(node0.isDebugger());
226:       assertFalse(node0.isExprResult());
227:       assertFalse(node0.isString());
228:       assertFalse(node0.isObjectLit());
229:       assertFalse(node0.isNot());
230:       assertFalse(node0.isWhile());
231:       assertEquals((-1), node0.getSourcePosition());
232:       assertFalse(node0.isOr());
233:       assertFalse(node0.isAssign());
234:       assertFalse(node0.isReturn());
235:       assertFalse(node0.isLabel());
236:       assertFalse(node0.hasChildren());
237:       assertFalse(node0.isNumber());
238:       assertFalse(node0.isDec());
239:       assertFalse(node0.isTypeOf());
240:       assertFalse(node0.hasMoreThanOneChild());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isContinue());
243:       assertEquals(154, node0.getType());
244:       assertFalse(node0.isGetElem());
245:       assertEquals((-1), node0.getLineno());
246:       assertFalse(node0.isLabelName());
247:       assertFalse(node0.isAdd());
248:       assertFalse(node0.isVar());
249:       assertFalse(node0.isDo());
250:       assertFalse(node0.isAssignAdd());
251:       assertFalse(node0.isNew());
252:       assertFalse(node0.isThis());
253:       assertFalse(node0.isSetterDef());
254:       assertFalse(node0.isParamList());
255:       assertEquals(0, node0.getChildCount());
256:       assertFalse(node0.isCatch());
257:       assertFalse(node0.isInstanceOf());
258:       assertFalse(node0.isSwitch());
259:       assertEquals((-1), node0.getCharno());
260:       assertFalse(node0.isBlock());
261:       assertFalse(node0.isScript());
262:       assertFalse(node0.isWith());
263:       assertFalse(node0.isRegExp());
264:       assertFalse(node0.isHook());
265:       assertFalse(node0.isFor());
266:       assertFalse(node0.isCase());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isTry());
269:       assertFalse(node1.isThrow());
270:       assertFalse(node1.isHook());
271:       assertFalse(node1.isFalse());
272:       assertEquals((-1), node1.getCharno());
273:       assertFalse(node1.isBreak());
274:       assertFalse(node1.isSwitch());
275:       assertFalse(node1.isObjectLit());
276:       assertFalse(node1.isCase());
277:       assertFalse(node1.isString());
278:       assertEquals(1, node1.getChildCount());
279:       assertFalse(node1.isNot());
280:       assertTrue(node1.hasChildren());
281:       assertFalse(node1.isInstanceOf());
282:       assertFalse(node1.isWith());
283:       assertFalse(node1.isThis());
284:       assertFalse(node1.isComma());
285:       assertFalse(node1.isScript());
286:       assertFalse(node1.isGetProp());
287:       assertTrue(node1.hasOneChild());
288:       assertFalse(node1.isFor());
289:       assertFalse(node1.isArrayLit());
290:       assertFalse(node1.isGetElem());
291:       assertFalse(node1.isEmpty());
292:       assertFalse(node1.isGetterDef());
293:       assertFalse(node1.isAssign());
294:       assertFalse(node1.isNumber());
295:       assertFalse(node1.isTypeOf());
296:       assertFalse(node1.isExprResult());
297:       assertFalse(node1.isTrue());
298:       assertFalse(node1.isVoid());
299:       assertFalse(node1.isDelProp());
300:       assertFalse(node1.isLabelName());
301:       assertFalse(node1.isOr());
302:       assertFalse(node1.isAdd());
303:       assertFalse(node1.isNew());
304:       assertFalse(node1.isLabel());
305:       assertFalse(node1.isDo());
306:       assertTrue(node1.isInc());
307:       assertFalse(node1.isDefaultCase());
308:       assertFalse(node1.isAssignAdd());
309:       assertFalse(node1.isCall());
310:       assertFalse(node1.isVar());
311:       assertFalse(node1.isParamList());
312:       assertFalse(node1.isNull());
313:       assertFalse(node1.isStringKey());
314:       assertFalse(node1.isName());
315:       assertFalse(node1.isCatch());
316:       assertFalse(node1.isRegExp());
317:       assertFalse(node1.hasMoreThanOneChild());
318:       assertFalse(node1.isBlock());
319:       assertFalse(node1.isDec());
320:       assertFalse(node1.isWhile());
321:       assertFalse(node1.isReturn());
322:       assertFalse(node1.isTry());
323:       assertFalse(node1.isCast());
324:       assertFalse(node1.isDebugger());
325:       assertFalse(node1.isNE());
326:       assertEquals((-1), node1.getSourcePosition());
327:       assertEquals((-1), node1.getLineno());
328:       assertFalse(node1.isIf());
329:       assertFalse(node1.isAnd());
330:       assertEquals(102, node1.getType());
331:       assertFalse(node1.isIn());
332:       assertFalse(node1.isContinue());
333:       assertFalse(node1.isSetterDef());
334:       assertFalse(node1.isFunction());
335:       assertFalse(node1.equals((Object)node0));
336:       
337:       node1.putIntProp(16, 0);
338:       assertEquals(2, Node.POST_FLAG);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
341:       assertEquals(37, Node.OPT_ARG_NAME);
342:       assertEquals(32, Node.INCRDECR_PROP);
343:       assertEquals(46, Node.IS_NAMESPACE);
344:       assertEquals(56, Node.CHANGE_TIME);
345:       assertEquals(12, Node.COLUMN_BITS);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(36, Node.QUOTED_PROP);
350:       assertEquals(49, Node.DIRECT_EVAL);
351:       assertEquals(57, Node.LAST_PROP);
352:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
355:       assertEquals(57, Node.REFLECTED_OBJECT);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(29, Node.JSDOC_INFO_PROP);
358:       assertEquals(53, Node.INPUT_ID);
359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(39, Node.EMPTY_BLOCK);
363:       assertEquals(48, Node.DIRECTIVES);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(54, Node.SLASH_V);
368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
371:       assertEquals(1, Node.DECR_FLAG);
372:       assertEquals(50, Node.FREE_CALL);
373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
374:       assertEquals(40, Node.ORIGINALNAME_PROP);
375:       assertEquals(50, Node.FREE_CALL);
376:       assertEquals(57, Node.REFLECTED_OBJECT);
377:       assertEquals(54, Node.SLASH_V);
378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
379:       assertEquals(48, Node.DIRECTIVES);
380:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
381:       assertEquals(4095, Node.COLUMN_MASK);
382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
383:       assertEquals(1, Node.DECR_FLAG);
384:       assertEquals(32, Node.INCRDECR_PROP);
385:       assertEquals(43, Node.IS_CONSTANT_NAME);
386:       assertEquals(12, Node.COLUMN_BITS);
387:       assertEquals(46, Node.IS_NAMESPACE);
388:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
390:       assertEquals(47, Node.IS_DISPATCHER);
391:       assertEquals(56, Node.CHANGE_TIME);
392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
393:       assertEquals(37, Node.OPT_ARG_NAME);
394:       assertEquals(2, Node.POST_FLAG);
395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
396:       assertEquals(30, Node.VAR_ARGS_NAME);
397:       assertEquals(49, Node.DIRECT_EVAL);
398:       assertEquals(57, Node.LAST_PROP);
399:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
400:       assertEquals(8, Node.FLAG_NO_THROWS);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(36, Node.QUOTED_PROP);
403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
404:       assertEquals(52, Node.LENGTH);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(53, Node.INPUT_ID);
407:       assertEquals(55, Node.INFERRED_FUNCTION);
408:       assertEquals(29, Node.JSDOC_INFO_PROP);
409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
410:       assertEquals(0, nodeArray0.length);
411:       assertNotSame(node0, node1);
412:       assertNotSame(node1, node0);
413:       assertFalse(node0.isNE());
414:       assertFalse(node0.isIn());
415:       assertFalse(node0.isGetterDef());
416:       assertFalse(node0.isArrayLit());
417:       assertFalse(node0.isIf());
418:       assertFalse(node0.isDelProp());
419:       assertFalse(node0.isVoid());
420:       assertFalse(node0.isInc());
421:       assertFalse(node0.isFunction());
422:       assertFalse(node0.isTrue());
423:       assertFalse(node0.isThrow());
424:       assertFalse(node0.isEmpty());
425:       assertFalse(node0.isDefaultCase());
426:       assertTrue(node0.isStringKey());
427:       assertFalse(node0.isComma());
428:       assertFalse(node0.isGetProp());
429:       assertFalse(node0.isNull());
430:       assertFalse(node0.isFalse());
431:       assertFalse(node0.isAnd());
432:       assertFalse(node0.isCall());
433:       assertFalse(node0.isBreak());
434:       assertFalse(node0.isName());
435:       assertFalse(node0.isDebugger());
436:       assertFalse(node0.isExprResult());
437:       assertFalse(node0.isString());
438:       assertFalse(node0.isObjectLit());
439:       assertFalse(node0.isNot());
440:       assertFalse(node0.isWhile());
441:       assertEquals((-1), node0.getSourcePosition());
442:       assertFalse(node0.isOr());
443:       assertFalse(node0.isAssign());
444:       assertFalse(node0.isReturn());
445:       assertFalse(node0.isLabel());
446:       assertFalse(node0.hasChildren());
447:       assertFalse(node0.isNumber());
448:       assertFalse(node0.isDec());
449:       assertFalse(node0.isTypeOf());
450:       assertFalse(node0.hasMoreThanOneChild());
451:       assertFalse(node0.isCast());
452:       assertFalse(node0.isContinue());
453:       assertEquals(154, node0.getType());
454:       assertFalse(node0.isGetElem());
455:       assertEquals((-1), node0.getLineno());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.isAdd());
458:       assertFalse(node0.isVar());
459:       assertFalse(node0.isDo());
460:       assertFalse(node0.isAssignAdd());
461:       assertFalse(node0.isNew());
462:       assertFalse(node0.isThis());
463:       assertFalse(node0.isSetterDef());
464:       assertFalse(node0.isParamList());
465:       assertEquals(0, node0.getChildCount());
466:       assertFalse(node0.isCatch());
467:       assertFalse(node0.isInstanceOf());
468:       assertFalse(node0.isSwitch());
469:       assertEquals((-1), node0.getCharno());
470:       assertFalse(node0.isBlock());
471:       assertFalse(node0.isScript());
472:       assertFalse(node0.isWith());
473:       assertFalse(node0.isRegExp());
474:       assertFalse(node0.isHook());
475:       assertFalse(node0.isFor());
476:       assertFalse(node0.isCase());
477:       assertFalse(node0.hasOneChild());
478:       assertFalse(node0.isTry());
479:       assertFalse(node1.isThrow());
480:       assertFalse(node1.isHook());
481:       assertFalse(node1.isFalse());
482:       assertEquals((-1), node1.getCharno());
483:       assertFalse(node1.isBreak());
484:       assertFalse(node1.isSwitch());
485:       assertFalse(node1.isObjectLit());
486:       assertFalse(node1.isCase());
487:       assertFalse(node1.isString());
488:       assertEquals(1, node1.getChildCount());
489:       assertFalse(node1.isNot());
490:       assertTrue(node1.hasChildren());
491:       assertFalse(node1.isInstanceOf());
492:       assertFalse(node1.isWith());
493:       assertFalse(node1.isThis());
494:       assertFalse(node1.isComma());
495:       assertFalse(node1.isScript());
496:       assertFalse(node1.isGetProp());
497:       assertTrue(node1.hasOneChild());
498:       assertFalse(node1.isFor());
499:       assertFalse(node1.isArrayLit());
500:       assertFalse(node1.isGetElem());
501:       assertFalse(node1.isEmpty());
502:       assertFalse(node1.isGetterDef());
503:       assertFalse(node1.isAssign());
504:       assertFalse(node1.isNumber());
505:       assertFalse(node1.isTypeOf());
506:       assertFalse(node1.isExprResult());
507:       assertFalse(node1.isTrue());
508:       assertFalse(node1.isVoid());
509:       assertFalse(node1.isDelProp());
510:       assertFalse(node1.isLabelName());
511:       assertFalse(node1.isOr());
512:       assertFalse(node1.isAdd());
513:       assertFalse(node1.isNew());
514:       assertFalse(node1.isLabel());
515:       assertFalse(node1.isDo());
516:       assertTrue(node1.isInc());
517:       assertFalse(node1.isDefaultCase());
518:       assertFalse(node1.isAssignAdd());
519:       assertFalse(node1.isCall());
520:       assertFalse(node1.isVar());
521:       assertFalse(node1.isParamList());
522:       assertFalse(node1.isNull());
523:       assertFalse(node1.isStringKey());
524:       assertFalse(node1.isName());
525:       assertFalse(node1.isCatch());
526:       assertFalse(node1.isRegExp());
527:       assertFalse(node1.hasMoreThanOneChild());
528:       assertFalse(node1.isBlock());
529:       assertFalse(node1.isDec());
530:       assertFalse(node1.isWhile());
531:       assertFalse(node1.isReturn());
532:       assertFalse(node1.isTry());
533:       assertFalse(node1.isCast());
534:       assertFalse(node1.isDebugger());
535:       assertFalse(node1.isNE());
536:       assertEquals((-1), node1.getSourcePosition());
537:       assertEquals((-1), node1.getLineno());
538:       assertFalse(node1.isIf());
539:       assertFalse(node1.isAnd());
540:       assertEquals(102, node1.getType());
541:       assertFalse(node1.isIn());
542:       assertFalse(node1.isContinue());
543:       assertFalse(node1.isSetterDef());
544:       assertFalse(node1.isFunction());
545:       assertFalse(node0.equals((Object)node1));
546:       assertFalse(node1.equals((Object)node0));
547:       
548:       node0.setCharno(2970);
549:       assertEquals(2, Node.POST_FLAG);
550:       assertEquals(47, Node.IS_DISPATCHER);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(32, Node.INCRDECR_PROP);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(12, Node.COLUMN_BITS);
557:       assertEquals(30, Node.VAR_ARGS_NAME);
558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(36, Node.QUOTED_PROP);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(57, Node.LAST_PROP);
563:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
564:       assertEquals(55, Node.INFERRED_FUNCTION);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(52, Node.LENGTH);
568:       assertEquals(29, Node.JSDOC_INFO_PROP);
569:       assertEquals(53, Node.INPUT_ID);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(48, Node.DIRECTIVES);
575:       assertEquals(40, Node.ORIGINALNAME_PROP);
576:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
577:       assertEquals(4095, Node.COLUMN_MASK);
578:       assertEquals(54, Node.SLASH_V);
579:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
580:       assertEquals(43, Node.IS_CONSTANT_NAME);
581:       assertEquals(51, Node.STATIC_SOURCE_FILE);
582:       assertEquals(1, Node.DECR_FLAG);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
585:       assertEquals(0, nodeArray0.length);
586:       assertNotSame(node0, node1);
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isIn());
589:       assertFalse(node0.isGetterDef());
590:       assertFalse(node0.isArrayLit());
591:       assertFalse(node0.isIf());
592:       assertFalse(node0.isDelProp());
593:       assertFalse(node0.isVoid());
594:       assertFalse(node0.isInc());
595:       assertFalse(node0.isFunction());
596:       assertFalse(node0.isTrue());
597:       assertFalse(node0.isThrow());
598:       assertFalse(node0.isEmpty());
599:       assertFalse(node0.isDefaultCase());
600:       assertTrue(node0.isStringKey());
601:       assertFalse(node0.isComma());
602:       assertFalse(node0.isGetProp());
603:       assertFalse(node0.isNull());
604:       assertFalse(node0.isFalse());
605:       assertFalse(node0.isAnd());
606:       assertFalse(node0.isCall());
607:       assertFalse(node0.isBreak());
608:       assertFalse(node0.isName());
609:       assertFalse(node0.isDebugger());
610:       assertFalse(node0.isExprResult());
611:       assertFalse(node0.isString());
612:       assertFalse(node0.isObjectLit());
613:       assertFalse(node0.isNot());
614:       assertFalse(node0.isWhile());
615:       assertEquals((-1), node0.getSourcePosition());
616:       assertFalse(node0.isOr());
617:       assertFalse(node0.isAssign());
618:       assertFalse(node0.isReturn());
619:       assertFalse(node0.isLabel());
620:       assertFalse(node0.hasChildren());
621:       assertFalse(node0.isNumber());
622:       assertFalse(node0.isDec());
623:       assertFalse(node0.isTypeOf());
624:       assertFalse(node0.hasMoreThanOneChild());
625:       assertFalse(node0.isCast());
626:       assertFalse(node0.isContinue());
627:       assertEquals(154, node0.getType());
628:       assertFalse(node0.isGetElem());
629:       assertEquals((-1), node0.getLineno());
630:       assertFalse(node0.isLabelName());
631:       assertFalse(node0.isAdd());
632:       assertFalse(node0.isVar());
633:       assertFalse(node0.isDo());
634:       assertFalse(node0.isAssignAdd());
635:       assertFalse(node0.isNew());
636:       assertFalse(node0.isThis());
637:       assertFalse(node0.isSetterDef());
638:       assertFalse(node0.isParamList());
639:       assertEquals(0, node0.getChildCount());
640:       assertFalse(node0.isCatch());
641:       assertFalse(node0.isInstanceOf());
642:       assertFalse(node0.isSwitch());
643:       assertEquals((-1), node0.getCharno());
644:       assertFalse(node0.isBlock());
645:       assertFalse(node0.isScript());
646:       assertFalse(node0.isWith());
647:       assertFalse(node0.isRegExp());
648:       assertFalse(node0.isHook());
649:       assertFalse(node0.isFor());
650:       assertFalse(node0.isCase());
651:       assertFalse(node0.hasOneChild());
652:       assertFalse(node0.isTry());
653:       assertFalse(node0.equals((Object)node1));
654:       
655:       boolean boolean0 = node1.isVarArgs();
656:       assertFalse(boolean0);
657:       assertEquals(2, Node.POST_FLAG);
658:       assertEquals(47, Node.IS_DISPATCHER);
659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
660:       assertEquals(37, Node.OPT_ARG_NAME);
661:       assertEquals(32, Node.INCRDECR_PROP);
662:       assertEquals(46, Node.IS_NAMESPACE);
663:       assertEquals(56, Node.CHANGE_TIME);
664:       assertEquals(12, Node.COLUMN_BITS);
665:       assertEquals(30, Node.VAR_ARGS_NAME);
666:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
667:       assertEquals(15, Node.NO_SIDE_EFFECTS);
668:       assertEquals(36, Node.QUOTED_PROP);
669:       assertEquals(49, Node.DIRECT_EVAL);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
672:       assertEquals(55, Node.INFERRED_FUNCTION);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(52, Node.LENGTH);
676:       assertEquals(29, Node.JSDOC_INFO_PROP);
677:       assertEquals(53, Node.INPUT_ID);
678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
679:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
680:       assertEquals(8, Node.FLAG_NO_THROWS);
681:       assertEquals(39, Node.EMPTY_BLOCK);
682:       assertEquals(48, Node.DIRECTIVES);
683:       assertEquals(40, Node.ORIGINALNAME_PROP);
684:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
685:       assertEquals(4095, Node.COLUMN_MASK);
686:       assertEquals(54, Node.SLASH_V);
687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
688:       assertEquals(43, Node.IS_CONSTANT_NAME);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(1, Node.DECR_FLAG);
691:       assertEquals(50, Node.FREE_CALL);
692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
693:       assertEquals(40, Node.ORIGINALNAME_PROP);
694:       assertEquals(50, Node.FREE_CALL);
695:       assertEquals(57, Node.REFLECTED_OBJECT);
696:       assertEquals(54, Node.SLASH_V);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(48, Node.DIRECTIVES);
699:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
700:       assertEquals(4095, Node.COLUMN_MASK);
701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
702:       assertEquals(1, Node.DECR_FLAG);
703:       assertEquals(32, Node.INCRDECR_PROP);
704:       assertEquals(43, Node.IS_CONSTANT_NAME);
705:       assertEquals(12, Node.COLUMN_BITS);
706:       assertEquals(46, Node.IS_NAMESPACE);
707:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
709:       assertEquals(47, Node.IS_DISPATCHER);
710:       assertEquals(56, Node.CHANGE_TIME);
711:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
712:       assertEquals(37, Node.OPT_ARG_NAME);
713:       assertEquals(2, Node.POST_FLAG);
714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
715:       assertEquals(30, Node.VAR_ARGS_NAME);
716:       assertEquals(49, Node.DIRECT_EVAL);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
719:       assertEquals(8, Node.FLAG_NO_THROWS);
720:       assertEquals(39, Node.EMPTY_BLOCK);
721:       assertEquals(36, Node.QUOTED_PROP);
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(52, Node.LENGTH);
724:       assertEquals(15, Node.NO_SIDE_EFFECTS);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(55, Node.INFERRED_FUNCTION);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
729:       assertEquals(0, nodeArray0.length);
730:       assertNotSame(node0, node1);
731:       assertNotSame(node1, node0);
732:       assertFalse(node0.isNE());
733:       assertFalse(node0.isIn());
734:       assertFalse(node0.isGetterDef());
735:       assertFalse(node0.isArrayLit());
736:       assertFalse(node0.isIf());
737:       assertFalse(node0.isDelProp());
738:       assertFalse(node0.isVoid());
739:       assertFalse(node0.isInc());
740:       assertFalse(node0.isFunction());
741:       assertFalse(node0.isTrue());
742:       assertFalse(node0.isThrow());
743:       assertFalse(node0.isEmpty());
744:       assertFalse(node0.isDefaultCase());
745:       assertTrue(node0.isStringKey());
746:       assertFalse(node0.isComma());
747:       assertFalse(node0.isGetProp());
748:       assertFalse(node0.isNull());
749:       assertFalse(node0.isFalse());
750:       assertFalse(node0.isAnd());
751:       assertFalse(node0.isCall());
752:       assertFalse(node0.isBreak());
753:       assertFalse(node0.isName());
754:       assertFalse(node0.isDebugger());
755:       assertFalse(node0.isExprResult());
756:       assertFalse(node0.isString());
757:       assertFalse(node0.isObjectLit());
758:       assertFalse(node0.isNot());
759:       assertFalse(node0.isWhile());
760:       assertEquals((-1), node0.getSourcePosition());
761:       assertFalse(node0.isOr());
762:       assertFalse(node0.isAssign());
763:       assertFalse(node0.isReturn());
764:       assertFalse(node0.isLabel());
765:       assertFalse(node0.hasChildren());
766:       assertFalse(node0.isNumber());
767:       assertFalse(node0.isDec());
768:       assertFalse(node0.isTypeOf());
769:       assertFalse(node0.hasMoreThanOneChild());
770:       assertFalse(node0.isCast());
771:       assertFalse(node0.isContinue());
772:       assertEquals(154, node0.getType());
773:       assertFalse(node0.isGetElem());
774:       assertEquals((-1), node0.getLineno());
775:       assertFalse(node0.isLabelName());
776:       assertFalse(node0.isAdd());
777:       assertFalse(node0.isVar());
778:       assertFalse(node0.isDo());
779:       assertFalse(node0.isAssignAdd());
780:       assertFalse(node0.isNew());
781:       assertFalse(node0.isThis());
782:       assertFalse(node0.isSetterDef());
783:       assertFalse(node0.isParamList());
784:       assertEquals(0, node0.getChildCount());
785:       assertFalse(node0.isCatch());
786:       assertFalse(node0.isInstanceOf());
787:       assertFalse(node0.isSwitch());
788:       assertEquals((-1), node0.getCharno());
789:       assertFalse(node0.isBlock());
790:       assertFalse(node0.isScript());
791:       assertFalse(node0.isWith());
792:       assertFalse(node0.isRegExp());
793:       assertFalse(node0.isHook());
794:       assertFalse(node0.isFor());
795:       assertFalse(node0.isCase());
796:       assertFalse(node0.hasOneChild());
797:       assertFalse(node0.isTry());
798:       assertFalse(node1.isThrow());
799:       assertFalse(node1.isHook());
800:       assertFalse(node1.isFalse());
801:       assertEquals((-1), node1.getCharno());
802:       assertFalse(node1.isBreak());
803:       assertFalse(node1.isSwitch());
804:       assertFalse(node1.isObjectLit());
805:       assertFalse(node1.isCase());
806:       assertFalse(node1.isString());
807:       assertEquals(1, node1.getChildCount());
808:       assertFalse(node1.isNot());
809:       assertTrue(node1.hasChildren());
810:       assertFalse(node1.isInstanceOf());
811:       assertFalse(node1.isWith());
812:       assertFalse(node1.isThis());
813:       assertFalse(node1.isComma());
814:       assertFalse(node1.isScript());
815:       assertFalse(node1.isGetProp());
816:       assertTrue(node1.hasOneChild());
817:       assertFalse(node1.isFor());
818:       assertFalse(node1.isArrayLit());
819:       assertFalse(node1.isGetElem());
820:       assertFalse(node1.isEmpty());
821:       assertFalse(node1.isGetterDef());
822:       assertFalse(node1.isAssign());
823:       assertFalse(node1.isNumber());
824:       assertFalse(node1.isTypeOf());
825:       assertFalse(node1.isExprResult());
826:       assertFalse(node1.isTrue());
827:       assertFalse(node1.isVoid());
828:       assertFalse(node1.isDelProp());
829:       assertFalse(node1.isLabelName());
830:       assertFalse(node1.isOr());
831:       assertFalse(node1.isAdd());
832:       assertFalse(node1.isNew());
833:       assertFalse(node1.isLabel());
834:       assertFalse(node1.isDo());
835:       assertTrue(node1.isInc());
836:       assertFalse(node1.isDefaultCase());
837:       assertFalse(node1.isAssignAdd());
838:       assertFalse(node1.isCall());
839:       assertFalse(node1.isVar());
840:       assertFalse(node1.isParamList());
841:       assertFalse(node1.isNull());
842:       assertFalse(node1.isStringKey());
843:       assertFalse(node1.isName());
844:       assertFalse(node1.isCatch());
845:       assertFalse(node1.isRegExp());
846:       assertFalse(node1.hasMoreThanOneChild());
847:       assertFalse(node1.isBlock());
848:       assertFalse(node1.isDec());
849:       assertFalse(node1.isWhile());
850:       assertFalse(node1.isReturn());
851:       assertFalse(node1.isTry());
852:       assertFalse(node1.isCast());
853:       assertFalse(node1.isDebugger());
854:       assertFalse(node1.isNE());
855:       assertEquals((-1), node1.getSourcePosition());
856:       assertEquals((-1), node1.getLineno());
857:       assertFalse(node1.isIf());
858:       assertFalse(node1.isAnd());
859:       assertEquals(102, node1.getType());
860:       assertFalse(node1.isIn());
861:       assertFalse(node1.isContinue());
862:       assertFalse(node1.isSetterDef());
863:       assertFalse(node1.isFunction());
864:       assertFalse(node0.equals((Object)node1));
865:       assertFalse(node1.equals((Object)node0));
866:       
867:       boolean boolean1 = node1.isSyntheticBlock();
868:       assertFalse(boolean1);
869:       assertEquals(2, Node.POST_FLAG);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(32, Node.INCRDECR_PROP);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(56, Node.CHANGE_TIME);
876:       assertEquals(12, Node.COLUMN_BITS);
877:       assertEquals(30, Node.VAR_ARGS_NAME);
878:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
879:       assertEquals(15, Node.NO_SIDE_EFFECTS);
880:       assertEquals(36, Node.QUOTED_PROP);
881:       assertEquals(49, Node.DIRECT_EVAL);
882:       assertEquals(57, Node.LAST_PROP);
883:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
884:       assertEquals(55, Node.INFERRED_FUNCTION);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(57, Node.REFLECTED_OBJECT);
887:       assertEquals(52, Node.LENGTH);
888:       assertEquals(29, Node.JSDOC_INFO_PROP);
889:       assertEquals(53, Node.INPUT_ID);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(39, Node.EMPTY_BLOCK);
894:       assertEquals(48, Node.DIRECTIVES);
895:       assertEquals(40, Node.ORIGINALNAME_PROP);
896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(54, Node.SLASH_V);
899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
900:       assertEquals(43, Node.IS_CONSTANT_NAME);
901:       assertEquals(51, Node.STATIC_SOURCE_FILE);
902:       assertEquals(1, Node.DECR_FLAG);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
905:       assertEquals(40, Node.ORIGINALNAME_PROP);
906:       assertEquals(50, Node.FREE_CALL);
907:       assertEquals(57, Node.REFLECTED_OBJECT);
908:       assertEquals(54, Node.SLASH_V);
909:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
910:       assertEquals(48, Node.DIRECTIVES);
911:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
912:       assertEquals(4095, Node.COLUMN_MASK);
913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
914:       assertEquals(1, Node.DECR_FLAG);
915:       assertEquals(32, Node.INCRDECR_PROP);
916:       assertEquals(43, Node.IS_CONSTANT_NAME);
917:       assertEquals(12, Node.COLUMN_BITS);
918:       assertEquals(46, Node.IS_NAMESPACE);
919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
920:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
921:       assertEquals(47, Node.IS_DISPATCHER);
922:       assertEquals(56, Node.CHANGE_TIME);
923:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
924:       assertEquals(37, Node.OPT_ARG_NAME);
925:       assertEquals(2, Node.POST_FLAG);
926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
927:       assertEquals(30, Node.VAR_ARGS_NAME);
928:       assertEquals(49, Node.DIRECT_EVAL);
929:       assertEquals(57, Node.LAST_PROP);
930:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
931:       assertEquals(8, Node.FLAG_NO_THROWS);
932:       assertEquals(39, Node.EMPTY_BLOCK);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
935:       assertEquals(52, Node.LENGTH);
936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
937:       assertEquals(53, Node.INPUT_ID);
938:       assertEquals(55, Node.INFERRED_FUNCTION);
939:       assertEquals(29, Node.JSDOC_INFO_PROP);
940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
941:       assertEquals(0, nodeArray0.length);
942:       assertNotSame(node0, node1);
943:       assertNotSame(node1, node0);
944:       assertFalse(node0.isNE());
945:       assertFalse(node0.isIn());
946:       assertFalse(node0.isGetterDef());
947:       assertFalse(node0.isArrayLit());
948:       assertFalse(node0.isIf());
949:       assertFalse(node0.isDelProp());
950:       assertFalse(node0.isVoid());
951:       assertFalse(node0.isInc());
952:       assertFalse(node0.isFunction());
953:       assertFalse(node0.isTrue());
954:       assertFalse(node0.isThrow());
955:       assertFalse(node0.isEmpty());
956:       assertFalse(node0.isDefaultCase());
957:       assertTrue(node0.isStringKey());
958:       assertFalse(node0.isComma());
959:       assertFalse(node0.isGetProp());
960:       assertFalse(node0.isNull());
961:       assertFalse(node0.isFalse());
962:       assertFalse(node0.isAnd());
963:       assertFalse(node0.isCall());
964:       assertFalse(node0.isBreak());
965:       assertFalse(node0.isName());
966:       assertFalse(node0.isDebugger());
967:       assertFalse(node0.isExprResult());
968:       assertFalse(node0.isString());
969:       assertFalse(node0.isObjectLit());
970:       assertFalse(node0.isNot());
971:       assertFalse(node0.isWhile());
972:       assertEquals((-1), node0.getSourcePosition());
973:       assertFalse(node0.isOr());
974:       assertFalse(node0.isAssign());
975:       assertFalse(node0.isReturn());
976:       assertFalse(node0.isLabel());
977:       assertFalse(node0.hasChildren());
978:       assertFalse(node0.isNumber());
979:       assertFalse(node0.isDec());
980:       assertFalse(node0.isTypeOf());
981:       assertFalse(node0.hasMoreThanOneChild());
982:       assertFalse(node0.isCast());
983:       assertFalse(node0.isContinue());
984:       assertEquals(154, node0.getType());
985:       assertFalse(node0.isGetElem());
986:       assertEquals((-1), node0.getLineno());
987:       assertFalse(node0.isLabelName());
988:       assertFalse(node0.isAdd());
989:       assertFalse(node0.isVar());
990:       assertFalse(node0.isDo());
991:       assertFalse(node0.isAssignAdd());
992:       assertFalse(node0.isNew());
993:       assertFalse(node0.isThis());
994:       assertFalse(node0.isSetterDef());
995:       assertFalse(node0.isParamList());
996:       assertEquals(0, node0.getChildCount());
997:       assertFalse(node0.isCatch());
998:       assertFalse(node0.isInstanceOf());
999:       assertFalse(node0.isSwitch());
1000:       assertEquals((-1), node0.getCharno());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isScript());
1003:       assertFalse(node0.isWith());
1004:       assertFalse(node0.isRegExp());
1005:       assertFalse(node0.isHook());
1006:       assertFalse(node0.isFor());
1007:       assertFalse(node0.isCase());
1008:       assertFalse(node0.hasOneChild());
1009:       assertFalse(node0.isTry());
1010:       assertFalse(node1.isThrow());
1011:       assertFalse(node1.isHook());
1012:       assertFalse(node1.isFalse());
1013:       assertEquals((-1), node1.getCharno());
1014:       assertFalse(node1.isBreak());
1015:       assertFalse(node1.isSwitch());
1016:       assertFalse(node1.isObjectLit());
1017:       assertFalse(node1.isCase());
1018:       assertFalse(node1.isString());
1019:       assertEquals(1, node1.getChildCount());
1020:       assertFalse(node1.isNot());
1021:       assertTrue(node1.hasChildren());
1022:       assertFalse(node1.isInstanceOf());
1023:       assertFalse(node1.isWith());
1024:       assertFalse(node1.isThis());
1025:       assertFalse(node1.isComma());
1026:       assertFalse(node1.isScript());
1027:       assertFalse(node1.isGetProp());
1028:       assertTrue(node1.hasOneChild());
1029:       assertFalse(node1.isFor());
1030:       assertFalse(node1.isArrayLit());
1031:       assertFalse(node1.isGetElem());
1032:       assertFalse(node1.isEmpty());
1033:       assertFalse(node1.isGetterDef());
1034:       assertFalse(node1.isAssign());
1035:       assertFalse(node1.isNumber());
1036:       assertFalse(node1.isTypeOf());
1037:       assertFalse(node1.isExprResult());
1038:       assertFalse(node1.isTrue());
1039:       assertFalse(node1.isVoid());
1040:       assertFalse(node1.isDelProp());
1041:       assertFalse(node1.isLabelName());
1042:       assertFalse(node1.isOr());
1043:       assertFalse(node1.isAdd());
1044:       assertFalse(node1.isNew());
1045:       assertFalse(node1.isLabel());
1046:       assertFalse(node1.isDo());
1047:       assertTrue(node1.isInc());
1048:       assertFalse(node1.isDefaultCase());
1049:       assertFalse(node1.isAssignAdd());
1050:       assertFalse(node1.isCall());
1051:       assertFalse(node1.isVar());
1052:       assertFalse(node1.isParamList());
1053:       assertFalse(node1.isNull());
1054:       assertFalse(node1.isStringKey());
1055:       assertFalse(node1.isName());
1056:       assertFalse(node1.isCatch());
1057:       assertFalse(node1.isRegExp());
1058:       assertFalse(node1.hasMoreThanOneChild());
1059:       assertFalse(node1.isBlock());
1060:       assertFalse(node1.isDec());
1061:       assertFalse(node1.isWhile());
1062:       assertFalse(node1.isReturn());
1063:       assertFalse(node1.isTry());
1064:       assertFalse(node1.isCast());
1065:       assertFalse(node1.isDebugger());
1066:       assertFalse(node1.isNE());
1067:       assertEquals((-1), node1.getSourcePosition());
1068:       assertEquals((-1), node1.getLineno());
1069:       assertFalse(node1.isIf());
1070:       assertFalse(node1.isAnd());
1071:       assertEquals(102, node1.getType());
1072:       assertFalse(node1.isIn());
1073:       assertFalse(node1.isContinue());
1074:       assertFalse(node1.isSetterDef());
1075:       assertFalse(node1.isFunction());
1076:       assertFalse(node0.equals((Object)node1));
1077:       assertFalse(node1.equals((Object)node0));
1078:       assertTrue(boolean1 == boolean0);
1079:       
1080:       boolean boolean2 = node1.isDelProp();
1081:       assertFalse(boolean2);
1082:       assertEquals(2, Node.POST_FLAG);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(32, Node.INCRDECR_PROP);
1087:       assertEquals(46, Node.IS_NAMESPACE);
1088:       assertEquals(56, Node.CHANGE_TIME);
1089:       assertEquals(12, Node.COLUMN_BITS);
1090:       assertEquals(30, Node.VAR_ARGS_NAME);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(49, Node.DIRECT_EVAL);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1097:       assertEquals(55, Node.INFERRED_FUNCTION);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(57, Node.REFLECTED_OBJECT);
1100:       assertEquals(52, Node.LENGTH);
1101:       assertEquals(29, Node.JSDOC_INFO_PROP);
1102:       assertEquals(53, Node.INPUT_ID);
1103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1105:       assertEquals(8, Node.FLAG_NO_THROWS);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(40, Node.ORIGINALNAME_PROP);
1109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1110:       assertEquals(4095, Node.COLUMN_MASK);
1111:       assertEquals(54, Node.SLASH_V);
1112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1113:       assertEquals(43, Node.IS_CONSTANT_NAME);
1114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(50, Node.FREE_CALL);
1117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1118:       assertEquals(40, Node.ORIGINALNAME_PROP);
1119:       assertEquals(50, Node.FREE_CALL);
1120:       assertEquals(57, Node.REFLECTED_OBJECT);
1121:       assertEquals(54, Node.SLASH_V);
1122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1123:       assertEquals(48, Node.DIRECTIVES);
1124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1125:       assertEquals(4095, Node.COLUMN_MASK);
1126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1127:       assertEquals(1, Node.DECR_FLAG);
1128:       assertEquals(32, Node.INCRDECR_PROP);
1129:       assertEquals(43, Node.IS_CONSTANT_NAME);
1130:       assertEquals(12, Node.COLUMN_BITS);
1131:       assertEquals(46, Node.IS_NAMESPACE);
1132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1134:       assertEquals(47, Node.IS_DISPATCHER);
1135:       assertEquals(56, Node.CHANGE_TIME);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(37, Node.OPT_ARG_NAME);
1138:       assertEquals(2, Node.POST_FLAG);
1139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1140:       assertEquals(30, Node.VAR_ARGS_NAME);
1141:       assertEquals(49, Node.DIRECT_EVAL);
1142:       assertEquals(57, Node.LAST_PROP);
1143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1144:       assertEquals(8, Node.FLAG_NO_THROWS);
1145:       assertEquals(39, Node.EMPTY_BLOCK);
1146:       assertEquals(36, Node.QUOTED_PROP);
1147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1148:       assertEquals(52, Node.LENGTH);
1149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1150:       assertEquals(53, Node.INPUT_ID);
1151:       assertEquals(55, Node.INFERRED_FUNCTION);
1152:       assertEquals(29, Node.JSDOC_INFO_PROP);
1153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1154:       assertEquals(0, nodeArray0.length);
1155:       assertNotSame(node0, node1);
1156:       assertNotSame(node1, node0);
1157:       assertFalse(node0.isNE());
1158:       assertFalse(node0.isIn());
1159:       assertFalse(node0.isGetterDef());
1160:       assertFalse(node0.isArrayLit());
1161:       assertFalse(node0.isIf());
1162:       assertFalse(node0.isDelProp());
1163:       assertFalse(node0.isVoid());
1164:       assertFalse(node0.isInc());
1165:       assertFalse(node0.isFunction());
1166:       assertFalse(node0.isTrue());
1167:       assertFalse(node0.isThrow());
1168:       assertFalse(node0.isEmpty());
1169:       assertFalse(node0.isDefaultCase());
1170:       assertTrue(node0.isStringKey());
1171:       assertFalse(node0.isComma());
1172:       assertFalse(node0.isGetProp());
1173:       assertFalse(node0.isNull());
1174:       assertFalse(node0.isFalse());
1175:       assertFalse(node0.isAnd());
1176:       assertFalse(node0.isCall());
1177:       assertFalse(node0.isBreak());
1178:       assertFalse(node0.isName());
1179:       assertFalse(node0.isDebugger());
1180:       assertFalse(node0.isExprResult());
1181:       assertFalse(node0.isString());
1182:       assertFalse(node0.isObjectLit());
1183:       assertFalse(node0.isNot());
1184:       assertFalse(node0.isWhile());
1185:       assertEquals((-1), node0.getSourcePosition());
1186:       assertFalse(node0.isOr());
1187:       assertFalse(node0.isAssign());
1188:       assertFalse(node0.isReturn());
1189:       assertFalse(node0.isLabel());
1190:       assertFalse(node0.hasChildren());
1191:       assertFalse(node0.isNumber());
1192:       assertFalse(node0.isDec());
1193:       assertFalse(node0.isTypeOf());
1194:       assertFalse(node0.hasMoreThanOneChild());
1195:       assertFalse(node0.isCast());
1196:       assertFalse(node0.isContinue());
1197:       assertEquals(154, node0.getType());
1198:       assertFalse(node0.isGetElem());
1199:       assertEquals((-1), node0.getLineno());
1200:       assertFalse(node0.isLabelName());
1201:       assertFalse(node0.isAdd());
1202:       assertFalse(node0.isVar());
1203:       assertFalse(node0.isDo());
1204:       assertFalse(node0.isAssignAdd());
1205:       assertFalse(node0.isNew());
1206:       assertFalse(node0.isThis());
1207:       assertFalse(node0.isSetterDef());
1208:       assertFalse(node0.isParamList());
1209:       assertEquals(0, node0.getChildCount());
1210:       assertFalse(node0.isCatch());
1211:       assertFalse(node0.isInstanceOf());
1212:       assertFalse(node0.isSwitch());
1213:       assertEquals((-1), node0.getCharno());
1214:       assertFalse(node0.isBlock());
1215:       assertFalse(node0.isScript());
1216:       assertFalse(node0.isWith());
1217:       assertFalse(node0.isRegExp());
1218:       assertFalse(node0.isHook());
1219:       assertFalse(node0.isFor());
1220:       assertFalse(node0.isCase());
1221:       assertFalse(node0.hasOneChild());
1222:       assertFalse(node0.isTry());
1223:       assertFalse(node1.isThrow());
1224:       assertFalse(node1.isHook());
1225:       assertFalse(node1.isFalse());
1226:       assertEquals((-1), node1.getCharno());
1227:       assertFalse(node1.isBreak());
1228:       assertFalse(node1.isSwitch());
1229:       assertFalse(node1.isObjectLit());
1230:       assertFalse(node1.isCase());
1231:       assertFalse(node1.isString());
1232:       assertEquals(1, node1.getChildCount());
1233:       assertFalse(node1.isNot());
1234:       assertTrue(node1.hasChildren());
1235:       assertFalse(node1.isInstanceOf());
1236:       assertFalse(node1.isWith());
1237:       assertFalse(node1.isThis());
1238:       assertFalse(node1.isComma());
1239:       assertFalse(node1.isScript());
1240:       assertFalse(node1.isGetProp());
1241:       assertTrue(node1.hasOneChild());
1242:       assertFalse(node1.isFor());
1243:       assertFalse(node1.isArrayLit());
1244:       assertFalse(node1.isGetElem());
1245:       assertFalse(node1.isEmpty());
1246:       assertFalse(node1.isGetterDef());
1247:       assertFalse(node1.isAssign());
1248:       assertFalse(node1.isNumber());
1249:       assertFalse(node1.isTypeOf());
1250:       assertFalse(node1.isExprResult());
1251:       assertFalse(node1.isTrue());
1252:       assertFalse(node1.isVoid());
1253:       assertFalse(node1.isDelProp());
1254:       assertFalse(node1.isLabelName());
1255:       assertFalse(node1.isOr());
1256:       assertFalse(node1.isAdd());
1257:       assertFalse(node1.isNew());
1258:       assertFalse(node1.isLabel());
1259:       assertFalse(node1.isDo());
1260:       assertTrue(node1.isInc());
1261:       assertFalse(node1.isDefaultCase());
1262:       assertFalse(node1.isAssignAdd());
1263:       assertFalse(node1.isCall());
1264:       assertFalse(node1.isVar());
1265:       assertFalse(node1.isParamList());
1266:       assertFalse(node1.isNull());
1267:       assertFalse(node1.isStringKey());
1268:       assertFalse(node1.isName());
1269:       assertFalse(node1.isCatch());
1270:       assertFalse(node1.isRegExp());
1271:       assertFalse(node1.hasMoreThanOneChild());
1272:       assertFalse(node1.isBlock());
1273:       assertFalse(node1.isDec());
1274:       assertFalse(node1.isWhile());
1275:       assertFalse(node1.isReturn());
1276:       assertFalse(node1.isTry());
1277:       assertFalse(node1.isCast());
1278:       assertFalse(node1.isDebugger());
1279:       assertFalse(node1.isNE());
1280:       assertEquals((-1), node1.getSourcePosition());
1281:       assertEquals((-1), node1.getLineno());
1282:       assertFalse(node1.isIf());
1283:       assertFalse(node1.isAnd());
1284:       assertEquals(102, node1.getType());
1285:       assertFalse(node1.isIn());
1286:       assertFalse(node1.isContinue());
1287:       assertFalse(node1.isSetterDef());
1288:       assertFalse(node1.isFunction());
1289:       assertFalse(node0.equals((Object)node1));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertTrue(boolean2 == boolean1);
1292:       assertTrue(boolean2 == boolean0);
1293:       
1294:       Iterable<Node> iterable0 = node0.children();
1295:       assertEquals(2, Node.POST_FLAG);
1296:       assertEquals(47, Node.IS_DISPATCHER);
1297:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1298:       assertEquals(37, Node.OPT_ARG_NAME);
1299:       assertEquals(32, Node.INCRDECR_PROP);
1300:       assertEquals(46, Node.IS_NAMESPACE);
1301:       assertEquals(56, Node.CHANGE_TIME);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(30, Node.VAR_ARGS_NAME);
1304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1305:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1306:       assertEquals(36, Node.QUOTED_PROP);
1307:       assertEquals(49, Node.DIRECT_EVAL);
1308:       assertEquals(57, Node.LAST_PROP);
1309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1310:       assertEquals(55, Node.INFERRED_FUNCTION);
1311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1312:       assertEquals(57, Node.REFLECTED_OBJECT);
1313:       assertEquals(52, Node.LENGTH);
1314:       assertEquals(29, Node.JSDOC_INFO_PROP);
1315:       assertEquals(53, Node.INPUT_ID);
1316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1318:       assertEquals(8, Node.FLAG_NO_THROWS);
1319:       assertEquals(39, Node.EMPTY_BLOCK);
1320:       assertEquals(48, Node.DIRECTIVES);
1321:       assertEquals(40, Node.ORIGINALNAME_PROP);
1322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1323:       assertEquals(4095, Node.COLUMN_MASK);
1324:       assertEquals(54, Node.SLASH_V);
1325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1326:       assertEquals(43, Node.IS_CONSTANT_NAME);
1327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1328:       assertEquals(1, Node.DECR_FLAG);
1329:       assertEquals(50, Node.FREE_CALL);
1330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1331:       assertEquals(0, nodeArray0.length);
1332:       assertNotNull(iterable0);
1333:       assertNotSame(node0, node1);
1334:       assertFalse(node0.isNE());
1335:       assertFalse(node0.isIn());
1336:       assertFalse(node0.isGetterDef());
1337:       assertFalse(node0.isArrayLit());
1338:       assertFalse(node0.isIf());
1339:       assertFalse(node0.isDelProp());
1340:       assertFalse(node0.isVoid());
1341:       assertFalse(node0.isInc());
1342:       assertFalse(node0.isFunction());
1343:       assertFalse(node0.isTrue());
1344:       assertFalse(node0.isThrow());
1345:       assertFalse(node0.isEmpty());
1346:       assertFalse(node0.isDefaultCase());
1347:       assertTrue(node0.isStringKey());
1348:       assertFalse(node0.isComma());
1349:       assertFalse(node0.isGetProp());
1350:       assertFalse(node0.isNull());
1351:       assertFalse(node0.isFalse());
1352:       assertFalse(node0.isAnd());
1353:       assertFalse(node0.isCall());
1354:       assertFalse(node0.isBreak());
1355:       assertFalse(node0.isName());
1356:       assertFalse(node0.isDebugger());
1357:       assertFalse(node0.isExprResult());
1358:       assertFalse(node0.isString());
1359:       assertFalse(node0.isObjectLit());
1360:       assertFalse(node0.isNot());
1361:       assertFalse(node0.isWhile());
1362:       assertEquals((-1), node0.getSourcePosition());
1363:       assertFalse(node0.isOr());
1364:       assertFalse(node0.isAssign());
1365:       assertFalse(node0.isReturn());
1366:       assertFalse(node0.isLabel());
1367:       assertFalse(node0.hasChildren());
1368:       assertFalse(node0.isNumber());
1369:       assertFalse(node0.isDec());
1370:       assertFalse(node0.isTypeOf());
1371:       assertFalse(node0.hasMoreThanOneChild());
1372:       assertFalse(node0.isCast());
1373:       assertFalse(node0.isContinue());
1374:       assertEquals(154, node0.getType());
1375:       assertFalse(node0.isGetElem());
1376:       assertEquals((-1), node0.getLineno());
1377:       assertFalse(node0.isLabelName());
1378:       assertFalse(node0.isAdd());
1379:       assertFalse(node0.isVar());
1380:       assertFalse(node0.isDo());
1381:       assertFalse(node0.isAssignAdd());
1382:       assertFalse(node0.isNew());
1383:       assertFalse(node0.isThis());
1384:       assertFalse(node0.isSetterDef());
1385:       assertFalse(node0.isParamList());
1386:       assertEquals(0, node0.getChildCount());
1387:       assertFalse(node0.isCatch());
1388:       assertFalse(node0.isInstanceOf());
1389:       assertFalse(node0.isSwitch());
1390:       assertEquals((-1), node0.getCharno());
1391:       assertFalse(node0.isBlock());
1392:       assertFalse(node0.isScript());
1393:       assertFalse(node0.isWith());
1394:       assertFalse(node0.isRegExp());
1395:       assertFalse(node0.isHook());
1396:       assertFalse(node0.isFor());
1397:       assertFalse(node0.isCase());
1398:       assertFalse(node0.hasOneChild());
1399:       assertFalse(node0.isTry());
1400:       assertFalse(iterable0.contains(node0));
1401:       assertFalse(node0.equals((Object)node1));
1402:       
1403:       // Undeclared exception!
1404:       try { 
1405:         node0.removeChild(node1);
1406:         fail("Expecting exception: NullPointerException");
1407:       
1408:       } catch(NullPointerException e) {
1409:          //
1410:          // no message in exception (getMessage() returned null)
1411:          //
1412:          verifyException("com.google.javascript.rhino.Node", e);
1413:       }
1414:   }
1415: }
RegularFileObject[/tmp/EvoSuite_190_1628159646781/com/google/javascript/rhino/Node_190_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:34:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_190_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_190_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_190_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:34:06.946 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(154, nodeArray0, 154, (-2313));
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());

Node node1 = new Node(102, node0, node0, node0, node0, 102, (-577));
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotNull(node1);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNot());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertTrue(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertEquals(102, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));

node1.putIntProp(16, 0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNot());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertTrue(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertEquals(102, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node0.setCharno(2970);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.equals((Object)node1));

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNot());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertTrue(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertEquals(102, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node1.isSyntheticBlock();
assertFalse(boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNot());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertTrue(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertEquals(102, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node1.isDelProp();
assertFalse(boolean2);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isNot());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertTrue(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertEquals(102, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, nodeArray0.length);
assertNotNull(iterable0);
assertNotSame(node0, node1);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isStringKey());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(154, node0.getType());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));

node0.removeChild(node1);

[MASTER] 10:34:12.875 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_226_1628159652668/com/google/javascript/rhino/Node_226_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_226_1628159652668/com/google/javascript/rhino/Node_226_tmp__ESTest_scaffolding.java]]
[MASTER] 10:34:12.875 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:12.875 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:12.876 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 451
[MASTER] 10:34:12.876 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_226_1628159652668/com/google/javascript/rhino/Node_226_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:34:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.SimpleErrorReporter;
15: import com.google.javascript.rhino.jstype.EnumElementType;
16: import com.google.javascript.rhino.jstype.EnumType;
17: import com.google.javascript.rhino.jstype.FunctionType;
18: import com.google.javascript.rhino.jstype.JSType;
19: import com.google.javascript.rhino.jstype.JSTypeRegistry;
20: import com.google.javascript.rhino.jstype.ObjectType;
21: import com.google.javascript.rhino.jstype.TemplatizedType;
22: import org.evosuite.runtime.EvoRunner;
23: import org.evosuite.runtime.EvoRunnerParameters;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_226_tmp__ESTest extends Node_226_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       Node node0 = Node.newNumber(199.2059217532582);
32:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
33:       assertEquals(29, Node.JSDOC_INFO_PROP);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(2, Node.POST_FLAG);
36:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(37, Node.OPT_ARG_NAME);
39:       assertEquals(46, Node.IS_NAMESPACE);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(39, Node.EMPTY_BLOCK);
49:       assertEquals(53, Node.INPUT_ID);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(40, Node.ORIGINALNAME_PROP);
52:       assertEquals(57, Node.REFLECTED_OBJECT);
53:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(52, Node.LENGTH);
57:       assertEquals(8, Node.FLAG_NO_THROWS);
58:       assertEquals(48, Node.DIRECTIVES);
59:       assertEquals(54, Node.SLASH_V);
60:       assertEquals(49, Node.DIRECT_EVAL);
61:       assertEquals(1, Node.DECR_FLAG);
62:       assertEquals(12, Node.COLUMN_BITS);
63:       assertEquals(51, Node.STATIC_SOURCE_FILE);
64:       assertEquals(4095, Node.COLUMN_MASK);
65:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
66:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
67:       assertEquals(32, Node.INCRDECR_PROP);
68:       assertNotNull(node0);
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isDelProp());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isTry());
75:       assertFalse(node0.isDebugger());
76:       assertFalse(node0.isVoid());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isGetterDef());
81:       assertFalse(node0.isDefaultCase());
82:       assertFalse(node0.isFunction());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isFalse());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isBreak());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isGetProp());
91:       assertFalse(node0.isAdd());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isObjectLit());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isWhile());
96:       assertTrue(node0.isNumber());
97:       assertFalse(node0.isExprResult());
98:       assertFalse(node0.hasChildren());
99:       assertFalse(node0.isTypeOf());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isDec());
104:       assertFalse(node0.isGetElem());
105:       assertFalse(node0.isCast());
106:       assertFalse(node0.isLabelName());
107:       assertFalse(node0.hasOneChild());
108:       assertFalse(node0.isScript());
109:       assertFalse(node0.isOr());
110:       assertFalse(node0.isNot());
111:       assertEquals((-1), node0.getSourcePosition());
112:       assertFalse(node0.isContinue());
113:       assertFalse(node0.isAnd());
114:       assertFalse(node0.isDo());
115:       assertFalse(node0.isAssignAdd());
116:       assertFalse(node0.isLabel());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isStringKey());
119:       assertEquals((-1), node0.getCharno());
120:       assertFalse(node0.isInc());
121:       assertFalse(node0.isSetterDef());
122:       assertFalse(node0.isSwitch());
123:       assertFalse(node0.isParamList());
124:       assertFalse(node0.hasMoreThanOneChild());
125:       assertFalse(node0.isCatch());
126:       assertFalse(node0.isInstanceOf());
127:       assertFalse(node0.isCase());
128:       assertEquals((-1), node0.getLineno());
129:       assertFalse(node0.isThis());
130:       assertFalse(node0.isBlock());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isHook());
133:       assertFalse(node0.isRegExp());
134:       assertEquals(39, node0.getType());
135:       
136:       String string0 = node0.toString();
137:       assertEquals("NUMBER 199.2059217532582", string0);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(29, Node.JSDOC_INFO_PROP);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
144:       assertEquals(37, Node.OPT_ARG_NAME);
145:       assertEquals(46, Node.IS_NAMESPACE);
146:       assertEquals(43, Node.IS_CONSTANT_NAME);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(30, Node.VAR_ARGS_NAME);
152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
154:       assertEquals(39, Node.EMPTY_BLOCK);
155:       assertEquals(53, Node.INPUT_ID);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(40, Node.ORIGINALNAME_PROP);
158:       assertEquals(57, Node.REFLECTED_OBJECT);
159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
161:       assertEquals(50, Node.FREE_CALL);
162:       assertEquals(52, Node.LENGTH);
163:       assertEquals(8, Node.FLAG_NO_THROWS);
164:       assertEquals(48, Node.DIRECTIVES);
165:       assertEquals(54, Node.SLASH_V);
166:       assertEquals(49, Node.DIRECT_EVAL);
167:       assertEquals(1, Node.DECR_FLAG);
168:       assertEquals(12, Node.COLUMN_BITS);
169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
170:       assertEquals(4095, Node.COLUMN_MASK);
171:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
172:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
173:       assertEquals(32, Node.INCRDECR_PROP);
174:       assertNotNull(string0);
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isArrayLit());
180:       assertFalse(node0.isTry());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isTrue());
184:       assertFalse(node0.isNE());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.isDefaultCase());
188:       assertFalse(node0.isFunction());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isFalse());
191:       assertFalse(node0.isName());
192:       assertFalse(node0.isCall());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isBreak());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isGetProp());
197:       assertFalse(node0.isAdd());
198:       assertFalse(node0.isNull());
199:       assertFalse(node0.isObjectLit());
200:       assertFalse(node0.isString());
201:       assertFalse(node0.isWhile());
202:       assertTrue(node0.isNumber());
203:       assertFalse(node0.isExprResult());
204:       assertFalse(node0.hasChildren());
205:       assertFalse(node0.isTypeOf());
206:       assertFalse(node0.isReturn());
207:       assertFalse(node0.isAssign());
208:       assertFalse(node0.isComma());
209:       assertFalse(node0.isDec());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isLabelName());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isScript());
215:       assertFalse(node0.isOr());
216:       assertFalse(node0.isNot());
217:       assertEquals((-1), node0.getSourcePosition());
218:       assertFalse(node0.isContinue());
219:       assertFalse(node0.isAnd());
220:       assertFalse(node0.isDo());
221:       assertFalse(node0.isAssignAdd());
222:       assertFalse(node0.isLabel());
223:       assertFalse(node0.isThrow());
224:       assertFalse(node0.isStringKey());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isInc());
227:       assertFalse(node0.isSetterDef());
228:       assertFalse(node0.isSwitch());
229:       assertFalse(node0.isParamList());
230:       assertFalse(node0.hasMoreThanOneChild());
231:       assertFalse(node0.isCatch());
232:       assertFalse(node0.isInstanceOf());
233:       assertFalse(node0.isCase());
234:       assertEquals((-1), node0.getLineno());
235:       assertFalse(node0.isThis());
236:       assertFalse(node0.isBlock());
237:       assertFalse(node0.isWith());
238:       assertFalse(node0.isHook());
239:       assertFalse(node0.isRegExp());
240:       assertEquals(39, node0.getType());
241:       
242:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(47, Node.IS_DISPATCHER);
246:       assertEquals(2, Node.POST_FLAG);
247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
248:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
249:       assertEquals(37, Node.OPT_ARG_NAME);
250:       assertEquals(46, Node.IS_NAMESPACE);
251:       assertEquals(43, Node.IS_CONSTANT_NAME);
252:       assertEquals(56, Node.CHANGE_TIME);
253:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(39, Node.EMPTY_BLOCK);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(57, Node.LAST_PROP);
262:       assertEquals(40, Node.ORIGINALNAME_PROP);
263:       assertEquals(57, Node.REFLECTED_OBJECT);
264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(48, Node.DIRECTIVES);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(4095, Node.COLUMN_MASK);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertNotNull(node_FileLevelJsDocBuilder0);
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isFor());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isDelProp());
284:       assertFalse(node0.isArrayLit());
285:       assertFalse(node0.isTry());
286:       assertFalse(node0.isDebugger());
287:       assertFalse(node0.isVoid());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isNE());
290:       assertFalse(node0.isIn());
291:       assertFalse(node0.isGetterDef());
292:       assertFalse(node0.isDefaultCase());
293:       assertFalse(node0.isFunction());
294:       assertEquals(0, node0.getChildCount());
295:       assertFalse(node0.isFalse());
296:       assertFalse(node0.isName());
297:       assertFalse(node0.isCall());
298:       assertFalse(node0.isVar());
299:       assertFalse(node0.isBreak());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isGetProp());
302:       assertFalse(node0.isAdd());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isObjectLit());
305:       assertFalse(node0.isString());
306:       assertFalse(node0.isWhile());
307:       assertTrue(node0.isNumber());
308:       assertFalse(node0.isExprResult());
309:       assertFalse(node0.hasChildren());
310:       assertFalse(node0.isTypeOf());
311:       assertFalse(node0.isReturn());
312:       assertFalse(node0.isAssign());
313:       assertFalse(node0.isComma());
314:       assertFalse(node0.isDec());
315:       assertFalse(node0.isGetElem());
316:       assertFalse(node0.isCast());
317:       assertFalse(node0.isLabelName());
318:       assertFalse(node0.hasOneChild());
319:       assertFalse(node0.isScript());
320:       assertFalse(node0.isOr());
321:       assertFalse(node0.isNot());
322:       assertEquals((-1), node0.getSourcePosition());
323:       assertFalse(node0.isContinue());
324:       assertFalse(node0.isAnd());
325:       assertFalse(node0.isDo());
326:       assertFalse(node0.isAssignAdd());
327:       assertFalse(node0.isLabel());
328:       assertFalse(node0.isThrow());
329:       assertFalse(node0.isStringKey());
330:       assertEquals((-1), node0.getCharno());
331:       assertFalse(node0.isInc());
332:       assertFalse(node0.isSetterDef());
333:       assertFalse(node0.isSwitch());
334:       assertFalse(node0.isParamList());
335:       assertFalse(node0.hasMoreThanOneChild());
336:       assertFalse(node0.isCatch());
337:       assertFalse(node0.isInstanceOf());
338:       assertFalse(node0.isCase());
339:       assertEquals((-1), node0.getLineno());
340:       assertFalse(node0.isThis());
341:       assertFalse(node0.isBlock());
342:       assertFalse(node0.isWith());
343:       assertFalse(node0.isHook());
344:       assertFalse(node0.isRegExp());
345:       assertEquals(39, node0.getType());
346:       
347:       Iterable<Node> iterable0 = node0.children();
348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
349:       assertEquals(29, Node.JSDOC_INFO_PROP);
350:       assertEquals(47, Node.IS_DISPATCHER);
351:       assertEquals(2, Node.POST_FLAG);
352:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
353:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
354:       assertEquals(37, Node.OPT_ARG_NAME);
355:       assertEquals(46, Node.IS_NAMESPACE);
356:       assertEquals(43, Node.IS_CONSTANT_NAME);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(36, Node.QUOTED_PROP);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(39, Node.EMPTY_BLOCK);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(57, Node.LAST_PROP);
367:       assertEquals(40, Node.ORIGINALNAME_PROP);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
371:       assertEquals(50, Node.FREE_CALL);
372:       assertEquals(52, Node.LENGTH);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(48, Node.DIRECTIVES);
375:       assertEquals(54, Node.SLASH_V);
376:       assertEquals(49, Node.DIRECT_EVAL);
377:       assertEquals(1, Node.DECR_FLAG);
378:       assertEquals(12, Node.COLUMN_BITS);
379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
380:       assertEquals(4095, Node.COLUMN_MASK);
381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
383:       assertEquals(32, Node.INCRDECR_PROP);
384:       assertNotNull(iterable0);
385:       assertFalse(node0.isEmpty());
386:       assertFalse(node0.isFor());
387:       assertFalse(node0.isIf());
388:       assertFalse(node0.isDelProp());
389:       assertFalse(node0.isArrayLit());
390:       assertFalse(node0.isTry());
391:       assertFalse(node0.isDebugger());
392:       assertFalse(node0.isVoid());
393:       assertFalse(node0.isTrue());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isIn());
396:       assertFalse(node0.isGetterDef());
397:       assertFalse(node0.isDefaultCase());
398:       assertFalse(node0.isFunction());
399:       assertEquals(0, node0.getChildCount());
400:       assertFalse(node0.isFalse());
401:       assertFalse(node0.isName());
402:       assertFalse(node0.isCall());
403:       assertFalse(node0.isVar());
404:       assertFalse(node0.isBreak());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isGetProp());
407:       assertFalse(node0.isAdd());
408:       assertFalse(node0.isNull());
409:       assertFalse(node0.isObjectLit());
410:       assertFalse(node0.isString());
411:       assertFalse(node0.isWhile());
412:       assertTrue(node0.isNumber());
413:       assertFalse(node0.isExprResult());
414:       assertFalse(node0.hasChildren());
415:       assertFalse(node0.isTypeOf());
416:       assertFalse(node0.isReturn());
417:       assertFalse(node0.isAssign());
418:       assertFalse(node0.isComma());
419:       assertFalse(node0.isDec());
420:       assertFalse(node0.isGetElem());
421:       assertFalse(node0.isCast());
422:       assertFalse(node0.isLabelName());
423:       assertFalse(node0.hasOneChild());
424:       assertFalse(node0.isScript());
425:       assertFalse(node0.isOr());
426:       assertFalse(node0.isNot());
427:       assertEquals((-1), node0.getSourcePosition());
428:       assertFalse(node0.isContinue());
429:       assertFalse(node0.isAnd());
430:       assertFalse(node0.isDo());
431:       assertFalse(node0.isAssignAdd());
432:       assertFalse(node0.isLabel());
433:       assertFalse(node0.isThrow());
434:       assertFalse(node0.isStringKey());
435:       assertEquals((-1), node0.getCharno());
436:       assertFalse(node0.isInc());
437:       assertFalse(node0.isSetterDef());
438:       assertFalse(node0.isSwitch());
439:       assertFalse(node0.isParamList());
440:       assertFalse(node0.hasMoreThanOneChild());
441:       assertFalse(node0.isCatch());
442:       assertFalse(node0.isInstanceOf());
443:       assertFalse(node0.isCase());
444:       assertEquals((-1), node0.getLineno());
445:       assertFalse(node0.isThis());
446:       assertFalse(node0.isBlock());
447:       assertFalse(node0.isWith());
448:       assertFalse(node0.isHook());
449:       assertFalse(node0.isRegExp());
450:       assertEquals(39, node0.getType());
451:       assertFalse(iterable0.contains(node0));
452:       
453:       boolean boolean0 = node0.isBreak();
454:       assertFalse(boolean0);
455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
456:       assertEquals(29, Node.JSDOC_INFO_PROP);
457:       assertEquals(47, Node.IS_DISPATCHER);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
461:       assertEquals(37, Node.OPT_ARG_NAME);
462:       assertEquals(46, Node.IS_NAMESPACE);
463:       assertEquals(43, Node.IS_CONSTANT_NAME);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(36, Node.QUOTED_PROP);
468:       assertEquals(30, Node.VAR_ARGS_NAME);
469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(39, Node.EMPTY_BLOCK);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(57, Node.LAST_PROP);
474:       assertEquals(40, Node.ORIGINALNAME_PROP);
475:       assertEquals(57, Node.REFLECTED_OBJECT);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
478:       assertEquals(50, Node.FREE_CALL);
479:       assertEquals(52, Node.LENGTH);
480:       assertEquals(8, Node.FLAG_NO_THROWS);
481:       assertEquals(48, Node.DIRECTIVES);
482:       assertEquals(54, Node.SLASH_V);
483:       assertEquals(49, Node.DIRECT_EVAL);
484:       assertEquals(1, Node.DECR_FLAG);
485:       assertEquals(12, Node.COLUMN_BITS);
486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
490:       assertEquals(32, Node.INCRDECR_PROP);
491:       assertFalse(node0.isEmpty());
492:       assertFalse(node0.isFor());
493:       assertFalse(node0.isIf());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isArrayLit());
496:       assertFalse(node0.isTry());
497:       assertFalse(node0.isDebugger());
498:       assertFalse(node0.isVoid());
499:       assertFalse(node0.isTrue());
500:       assertFalse(node0.isNE());
501:       assertFalse(node0.isIn());
502:       assertFalse(node0.isGetterDef());
503:       assertFalse(node0.isDefaultCase());
504:       assertFalse(node0.isFunction());
505:       assertEquals(0, node0.getChildCount());
506:       assertFalse(node0.isFalse());
507:       assertFalse(node0.isName());
508:       assertFalse(node0.isCall());
509:       assertFalse(node0.isVar());
510:       assertFalse(node0.isBreak());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isGetProp());
513:       assertFalse(node0.isAdd());
514:       assertFalse(node0.isNull());
515:       assertFalse(node0.isObjectLit());
516:       assertFalse(node0.isString());
517:       assertFalse(node0.isWhile());
518:       assertTrue(node0.isNumber());
519:       assertFalse(node0.isExprResult());
520:       assertFalse(node0.hasChildren());
521:       assertFalse(node0.isTypeOf());
522:       assertFalse(node0.isReturn());
523:       assertFalse(node0.isAssign());
524:       assertFalse(node0.isComma());
525:       assertFalse(node0.isDec());
526:       assertFalse(node0.isGetElem());
527:       assertFalse(node0.isCast());
528:       assertFalse(node0.isLabelName());
529:       assertFalse(node0.hasOneChild());
530:       assertFalse(node0.isScript());
531:       assertFalse(node0.isOr());
532:       assertFalse(node0.isNot());
533:       assertEquals((-1), node0.getSourcePosition());
534:       assertFalse(node0.isContinue());
535:       assertFalse(node0.isAnd());
536:       assertFalse(node0.isDo());
537:       assertFalse(node0.isAssignAdd());
538:       assertFalse(node0.isLabel());
539:       assertFalse(node0.isThrow());
540:       assertFalse(node0.isStringKey());
541:       assertEquals((-1), node0.getCharno());
542:       assertFalse(node0.isInc());
543:       assertFalse(node0.isSetterDef());
544:       assertFalse(node0.isSwitch());
545:       assertFalse(node0.isParamList());
546:       assertFalse(node0.hasMoreThanOneChild());
547:       assertFalse(node0.isCatch());
548:       assertFalse(node0.isInstanceOf());
549:       assertFalse(node0.isCase());
550:       assertEquals((-1), node0.getLineno());
551:       assertFalse(node0.isThis());
552:       assertFalse(node0.isBlock());
553:       assertFalse(node0.isWith());
554:       assertFalse(node0.isHook());
555:       assertFalse(node0.isRegExp());
556:       assertEquals(39, node0.getType());
557:       
558:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
559:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
560:       assertEquals(29, Node.JSDOC_INFO_PROP);
561:       assertEquals(47, Node.IS_DISPATCHER);
562:       assertEquals(2, Node.POST_FLAG);
563:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(37, Node.OPT_ARG_NAME);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(43, Node.IS_CONSTANT_NAME);
568:       assertEquals(56, Node.CHANGE_TIME);
569:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(36, Node.QUOTED_PROP);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
574:       assertEquals(15, Node.NO_SIDE_EFFECTS);
575:       assertEquals(39, Node.EMPTY_BLOCK);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(57, Node.LAST_PROP);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
581:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
582:       assertEquals(50, Node.FREE_CALL);
583:       assertEquals(52, Node.LENGTH);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(48, Node.DIRECTIVES);
586:       assertEquals(54, Node.SLASH_V);
587:       assertEquals(49, Node.DIRECT_EVAL);
588:       assertEquals(1, Node.DECR_FLAG);
589:       assertEquals(12, Node.COLUMN_BITS);
590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
591:       assertEquals(4095, Node.COLUMN_MASK);
592:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
593:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
594:       assertEquals(32, Node.INCRDECR_PROP);
595:       assertNotNull(node_NodeMismatch0);
596:       assertFalse(node0.isEmpty());
597:       assertFalse(node0.isFor());
598:       assertFalse(node0.isIf());
599:       assertFalse(node0.isDelProp());
600:       assertFalse(node0.isArrayLit());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.isDebugger());
603:       assertFalse(node0.isVoid());
604:       assertFalse(node0.isTrue());
605:       assertFalse(node0.isNE());
606:       assertFalse(node0.isIn());
607:       assertFalse(node0.isGetterDef());
608:       assertFalse(node0.isDefaultCase());
609:       assertFalse(node0.isFunction());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isFalse());
612:       assertFalse(node0.isName());
613:       assertFalse(node0.isCall());
614:       assertFalse(node0.isVar());
615:       assertFalse(node0.isBreak());
616:       assertFalse(node0.isNew());
617:       assertFalse(node0.isGetProp());
618:       assertFalse(node0.isAdd());
619:       assertFalse(node0.isNull());
620:       assertFalse(node0.isObjectLit());
621:       assertFalse(node0.isString());
622:       assertFalse(node0.isWhile());
623:       assertTrue(node0.isNumber());
624:       assertFalse(node0.isExprResult());
625:       assertFalse(node0.hasChildren());
626:       assertFalse(node0.isTypeOf());
627:       assertFalse(node0.isReturn());
628:       assertFalse(node0.isAssign());
629:       assertFalse(node0.isComma());
630:       assertFalse(node0.isDec());
631:       assertFalse(node0.isGetElem());
632:       assertFalse(node0.isCast());
633:       assertFalse(node0.isLabelName());
634:       assertFalse(node0.hasOneChild());
635:       assertFalse(node0.isScript());
636:       assertFalse(node0.isOr());
637:       assertFalse(node0.isNot());
638:       assertEquals((-1), node0.getSourcePosition());
639:       assertFalse(node0.isContinue());
640:       assertFalse(node0.isAnd());
641:       assertFalse(node0.isDo());
642:       assertFalse(node0.isAssignAdd());
643:       assertFalse(node0.isLabel());
644:       assertFalse(node0.isThrow());
645:       assertFalse(node0.isStringKey());
646:       assertEquals((-1), node0.getCharno());
647:       assertFalse(node0.isInc());
648:       assertFalse(node0.isSetterDef());
649:       assertFalse(node0.isSwitch());
650:       assertFalse(node0.isParamList());
651:       assertFalse(node0.hasMoreThanOneChild());
652:       assertFalse(node0.isCatch());
653:       assertFalse(node0.isInstanceOf());
654:       assertFalse(node0.isCase());
655:       assertEquals((-1), node0.getLineno());
656:       assertFalse(node0.isThis());
657:       assertFalse(node0.isBlock());
658:       assertFalse(node0.isWith());
659:       assertFalse(node0.isHook());
660:       assertFalse(node0.isRegExp());
661:       assertEquals(39, node0.getType());
662:       
663:       Node node1 = new Node(30, (-3923), 1186);
664:       assertEquals(29, Node.JSDOC_INFO_PROP);
665:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
666:       assertEquals(56, Node.CHANGE_TIME);
667:       assertEquals(2, Node.POST_FLAG);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(46, Node.IS_NAMESPACE);
670:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
672:       assertEquals(37, Node.OPT_ARG_NAME);
673:       assertEquals(30, Node.VAR_ARGS_NAME);
674:       assertEquals(49, Node.DIRECT_EVAL);
675:       assertEquals(57, Node.LAST_PROP);
676:       assertEquals(36, Node.QUOTED_PROP);
677:       assertEquals(52, Node.LENGTH);
678:       assertEquals(53, Node.INPUT_ID);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(39, Node.EMPTY_BLOCK);
681:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
682:       assertEquals(15, Node.NO_SIDE_EFFECTS);
683:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
684:       assertEquals(50, Node.FREE_CALL);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(8, Node.FLAG_NO_THROWS);
688:       assertEquals(57, Node.REFLECTED_OBJECT);
689:       assertEquals(54, Node.SLASH_V);
690:       assertEquals(40, Node.ORIGINALNAME_PROP);
691:       assertEquals(48, Node.DIRECTIVES);
692:       assertEquals(43, Node.IS_CONSTANT_NAME);
693:       assertEquals(4095, Node.COLUMN_MASK);
694:       assertEquals(12, Node.COLUMN_BITS);
695:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
696:       assertEquals(51, Node.STATIC_SOURCE_FILE);
697:       assertEquals(32, Node.INCRDECR_PROP);
698:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
699:       assertEquals(1, Node.DECR_FLAG);
700:       assertNotNull(node1);
701:       assertFalse(node1.isEmpty());
702:       assertFalse(node1.isIf());
703:       assertFalse(node1.isGetterDef());
704:       assertFalse(node1.isDelProp());
705:       assertFalse(node1.isArrayLit());
706:       assertFalse(node1.isIn());
707:       assertFalse(node1.isVoid());
708:       assertFalse(node1.isNE());
709:       assertFalse(node1.isDebugger());
710:       assertFalse(node1.isTrue());
711:       assertFalse(node1.isDefaultCase());
712:       assertFalse(node1.isInc());
713:       assertEquals(0, node1.getChildCount());
714:       assertFalse(node1.isFunction());
715:       assertFalse(node1.isThrow());
716:       assertTrue(node1.isNew());
717:       assertFalse(node1.isFalse());
718:       assertFalse(node1.isName());
719:       assertFalse(node1.isBreak());
720:       assertFalse(node1.isGetProp());
721:       assertFalse(node1.isCall());
722:       assertFalse(node1.isAnd());
723:       assertFalse(node1.isNull());
724:       assertFalse(node1.isNot());
725:       assertFalse(node1.isString());
726:       assertFalse(node1.isWhile());
727:       assertFalse(node1.isObjectLit());
728:       assertFalse(node1.isExprResult());
729:       assertFalse(node1.isComma());
730:       assertFalse(node1.hasChildren());
731:       assertFalse(node1.isReturn());
732:       assertFalse(node1.isLabelName());
733:       assertFalse(node1.isAssign());
734:       assertFalse(node1.isDec());
735:       assertFalse(node1.isNumber());
736:       assertFalse(node1.isTypeOf());
737:       assertFalse(node1.isCast());
738:       assertFalse(node1.hasOneChild());
739:       assertFalse(node1.isGetElem());
740:       assertFalse(node1.isOr());
741:       assertEquals((-1), node1.getLineno());
742:       assertEquals(30, node1.getType());
743:       assertEquals((-1), node1.getSourcePosition());
744:       assertFalse(node1.isDo());
745:       assertFalse(node1.isContinue());
746:       assertFalse(node1.isAdd());
747:       assertFalse(node1.isLabel());
748:       assertFalse(node1.isAssignAdd());
749:       assertFalse(node1.isVar());
750:       assertFalse(node1.isSetterDef());
751:       assertFalse(node1.isSwitch());
752:       assertFalse(node1.isParamList());
753:       assertEquals((-1), node1.getCharno());
754:       assertFalse(node1.isStringKey());
755:       assertFalse(node1.isWith());
756:       assertFalse(node1.isCase());
757:       assertFalse(node1.isRegExp());
758:       assertFalse(node1.isCatch());
759:       assertFalse(node1.hasMoreThanOneChild());
760:       assertFalse(node1.isInstanceOf());
761:       assertFalse(node1.isScript());
762:       assertFalse(node1.isTry());
763:       assertFalse(node1.isFor());
764:       assertFalse(node1.isHook());
765:       assertFalse(node1.isThis());
766:       assertFalse(node1.isBlock());
767:       assertFalse(node1.equals((Object)node0));
768:       
769:       Node node2 = node1.copyInformationFromForTree(node0);
770:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
771:       assertEquals(29, Node.JSDOC_INFO_PROP);
772:       assertEquals(47, Node.IS_DISPATCHER);
773:       assertEquals(2, Node.POST_FLAG);
774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
775:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(46, Node.IS_NAMESPACE);
778:       assertEquals(43, Node.IS_CONSTANT_NAME);
779:       assertEquals(56, Node.CHANGE_TIME);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(55, Node.INFERRED_FUNCTION);
782:       assertEquals(36, Node.QUOTED_PROP);
783:       assertEquals(30, Node.VAR_ARGS_NAME);
784:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
785:       assertEquals(15, Node.NO_SIDE_EFFECTS);
786:       assertEquals(39, Node.EMPTY_BLOCK);
787:       assertEquals(53, Node.INPUT_ID);
788:       assertEquals(57, Node.LAST_PROP);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(57, Node.REFLECTED_OBJECT);
791:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
792:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
793:       assertEquals(50, Node.FREE_CALL);
794:       assertEquals(52, Node.LENGTH);
795:       assertEquals(8, Node.FLAG_NO_THROWS);
796:       assertEquals(48, Node.DIRECTIVES);
797:       assertEquals(54, Node.SLASH_V);
798:       assertEquals(49, Node.DIRECT_EVAL);
799:       assertEquals(1, Node.DECR_FLAG);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(51, Node.STATIC_SOURCE_FILE);
802:       assertEquals(4095, Node.COLUMN_MASK);
803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
805:       assertEquals(32, Node.INCRDECR_PROP);
806:       assertEquals(29, Node.JSDOC_INFO_PROP);
807:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertEquals(2, Node.POST_FLAG);
810:       assertEquals(47, Node.IS_DISPATCHER);
811:       assertEquals(46, Node.IS_NAMESPACE);
812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
813:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
814:       assertEquals(37, Node.OPT_ARG_NAME);
815:       assertEquals(30, Node.VAR_ARGS_NAME);
816:       assertEquals(49, Node.DIRECT_EVAL);
817:       assertEquals(57, Node.LAST_PROP);
818:       assertEquals(36, Node.QUOTED_PROP);
819:       assertEquals(52, Node.LENGTH);
820:       assertEquals(53, Node.INPUT_ID);
821:       assertEquals(55, Node.INFERRED_FUNCTION);
822:       assertEquals(39, Node.EMPTY_BLOCK);
823:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
824:       assertEquals(15, Node.NO_SIDE_EFFECTS);
825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
826:       assertEquals(50, Node.FREE_CALL);
827:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
828:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
829:       assertEquals(8, Node.FLAG_NO_THROWS);
830:       assertEquals(57, Node.REFLECTED_OBJECT);
831:       assertEquals(54, Node.SLASH_V);
832:       assertEquals(40, Node.ORIGINALNAME_PROP);
833:       assertEquals(48, Node.DIRECTIVES);
834:       assertEquals(43, Node.IS_CONSTANT_NAME);
835:       assertEquals(4095, Node.COLUMN_MASK);
836:       assertEquals(12, Node.COLUMN_BITS);
837:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
838:       assertEquals(51, Node.STATIC_SOURCE_FILE);
839:       assertEquals(32, Node.INCRDECR_PROP);
840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
841:       assertEquals(1, Node.DECR_FLAG);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
844:       assertEquals(36, Node.QUOTED_PROP);
845:       assertEquals(4095, Node.COLUMN_MASK);
846:       assertEquals(48, Node.DIRECTIVES);
847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(29, Node.JSDOC_INFO_PROP);
850:       assertEquals(40, Node.ORIGINALNAME_PROP);
851:       assertEquals(57, Node.REFLECTED_OBJECT);
852:       assertEquals(47, Node.IS_DISPATCHER);
853:       assertEquals(2, Node.POST_FLAG);
854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(8, Node.FLAG_NO_THROWS);
857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
858:       assertEquals(39, Node.EMPTY_BLOCK);
859:       assertEquals(53, Node.INPUT_ID);
860:       assertEquals(15, Node.NO_SIDE_EFFECTS);
861:       assertEquals(57, Node.LAST_PROP);
862:       assertEquals(1, Node.DECR_FLAG);
863:       assertEquals(12, Node.COLUMN_BITS);
864:       assertEquals(51, Node.STATIC_SOURCE_FILE);
865:       assertEquals(30, Node.VAR_ARGS_NAME);
866:       assertEquals(54, Node.SLASH_V);
867:       assertEquals(37, Node.OPT_ARG_NAME);
868:       assertEquals(46, Node.IS_NAMESPACE);
869:       assertEquals(56, Node.CHANGE_TIME);
870:       assertEquals(49, Node.DIRECT_EVAL);
871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
872:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
874:       assertEquals(50, Node.FREE_CALL);
875:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
876:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
877:       assertEquals(32, Node.INCRDECR_PROP);
878:       assertNotNull(node2);
879:       assertSame(node1, node2);
880:       assertSame(node2, node1);
881:       assertFalse(node0.isEmpty());
882:       assertFalse(node0.isFor());
883:       assertFalse(node0.isIf());
884:       assertFalse(node0.isDelProp());
885:       assertFalse(node0.isArrayLit());
886:       assertFalse(node0.isTry());
887:       assertFalse(node0.isDebugger());
888:       assertFalse(node0.isVoid());
889:       assertFalse(node0.isTrue());
890:       assertFalse(node0.isNE());
891:       assertFalse(node0.isIn());
892:       assertFalse(node0.isGetterDef());
893:       assertFalse(node0.isDefaultCase());
894:       assertFalse(node0.isFunction());
895:       assertEquals(0, node0.getChildCount());
896:       assertFalse(node0.isFalse());
897:       assertFalse(node0.isName());
898:       assertFalse(node0.isCall());
899:       assertFalse(node0.isVar());
900:       assertFalse(node0.isBreak());
901:       assertFalse(node0.isNew());
902:       assertFalse(node0.isGetProp());
903:       assertFalse(node0.isAdd());
904:       assertFalse(node0.isNull());
905:       assertFalse(node0.isObjectLit());
906:       assertFalse(node0.isString());
907:       assertFalse(node0.isWhile());
908:       assertTrue(node0.isNumber());
909:       assertFalse(node0.isExprResult());
910:       assertFalse(node0.hasChildren());
911:       assertFalse(node0.isTypeOf());
912:       assertFalse(node0.isReturn());
913:       assertFalse(node0.isAssign());
914:       assertFalse(node0.isComma());
915:       assertFalse(node0.isDec());
916:       assertFalse(node0.isGetElem());
917:       assertFalse(node0.isCast());
918:       assertFalse(node0.isLabelName());
919:       assertFalse(node0.hasOneChild());
920:       assertFalse(node0.isScript());
921:       assertFalse(node0.isOr());
922:       assertFalse(node0.isNot());
923:       assertEquals((-1), node0.getSourcePosition());
924:       assertFalse(node0.isContinue());
925:       assertFalse(node0.isAnd());
926:       assertFalse(node0.isDo());
927:       assertFalse(node0.isAssignAdd());
928:       assertFalse(node0.isLabel());
929:       assertFalse(node0.isThrow());
930:       assertFalse(node0.isStringKey());
931:       assertEquals((-1), node0.getCharno());
932:       assertFalse(node0.isInc());
933:       assertFalse(node0.isSetterDef());
934:       assertFalse(node0.isSwitch());
935:       assertFalse(node0.isParamList());
936:       assertFalse(node0.hasMoreThanOneChild());
937:       assertFalse(node0.isCatch());
938:       assertFalse(node0.isInstanceOf());
939:       assertFalse(node0.isCase());
940:       assertEquals((-1), node0.getLineno());
941:       assertFalse(node0.isThis());
942:       assertFalse(node0.isBlock());
943:       assertFalse(node0.isWith());
944:       assertFalse(node0.isHook());
945:       assertFalse(node0.isRegExp());
946:       assertEquals(39, node0.getType());
947:       assertFalse(node1.isEmpty());
948:       assertFalse(node1.isIf());
949:       assertFalse(node1.isGetterDef());
950:       assertFalse(node1.isDelProp());
951:       assertFalse(node1.isArrayLit());
952:       assertFalse(node1.isIn());
953:       assertFalse(node1.isVoid());
954:       assertFalse(node1.isNE());
955:       assertFalse(node1.isDebugger());
956:       assertFalse(node1.isTrue());
957:       assertFalse(node1.isDefaultCase());
958:       assertFalse(node1.isInc());
959:       assertEquals(0, node1.getChildCount());
960:       assertFalse(node1.isFunction());
961:       assertFalse(node1.isThrow());
962:       assertTrue(node1.isNew());
963:       assertFalse(node1.isFalse());
964:       assertFalse(node1.isName());
965:       assertFalse(node1.isBreak());
966:       assertFalse(node1.isGetProp());
967:       assertFalse(node1.isCall());
968:       assertFalse(node1.isAnd());
969:       assertFalse(node1.isNull());
970:       assertFalse(node1.isNot());
971:       assertFalse(node1.isString());
972:       assertFalse(node1.isWhile());
973:       assertFalse(node1.isObjectLit());
974:       assertFalse(node1.isExprResult());
975:       assertFalse(node1.isComma());
976:       assertFalse(node1.hasChildren());
977:       assertFalse(node1.isReturn());
978:       assertFalse(node1.isLabelName());
979:       assertFalse(node1.isAssign());
980:       assertFalse(node1.isDec());
981:       assertFalse(node1.isNumber());
982:       assertFalse(node1.isTypeOf());
983:       assertFalse(node1.isCast());
984:       assertFalse(node1.hasOneChild());
985:       assertFalse(node1.isGetElem());
986:       assertFalse(node1.isOr());
987:       assertEquals((-1), node1.getLineno());
988:       assertEquals(30, node1.getType());
989:       assertEquals((-1), node1.getSourcePosition());
990:       assertFalse(node1.isDo());
991:       assertFalse(node1.isContinue());
992:       assertFalse(node1.isAdd());
993:       assertFalse(node1.isLabel());
994:       assertFalse(node1.isAssignAdd());
995:       assertFalse(node1.isVar());
996:       assertFalse(node1.isSetterDef());
997:       assertFalse(node1.isSwitch());
998:       assertFalse(node1.isParamList());
999:       assertEquals((-1), node1.getCharno());
1000:       assertFalse(node1.isStringKey());
1001:       assertFalse(node1.isWith());
1002:       assertFalse(node1.isCase());
1003:       assertFalse(node1.isRegExp());
1004:       assertFalse(node1.isCatch());
1005:       assertFalse(node1.hasMoreThanOneChild());
1006:       assertFalse(node1.isInstanceOf());
1007:       assertFalse(node1.isScript());
1008:       assertFalse(node1.isTry());
1009:       assertFalse(node1.isFor());
1010:       assertFalse(node1.isHook());
1011:       assertFalse(node1.isThis());
1012:       assertFalse(node1.isBlock());
1013:       assertFalse(node2.isCatch());
1014:       assertFalse(node2.isDefaultCase());
1015:       assertFalse(node2.isVoid());
1016:       assertFalse(node2.isTrue());
1017:       assertFalse(node2.isParamList());
1018:       assertFalse(node2.isNull());
1019:       assertFalse(node2.isDebugger());
1020:       assertFalse(node2.isStringKey());
1021:       assertFalse(node2.isEmpty());
1022:       assertFalse(node2.isVar());
1023:       assertFalse(node2.isSetterDef());
1024:       assertFalse(node2.isArrayLit());
1025:       assertFalse(node2.isFunction());
1026:       assertEquals(0, node2.getChildCount());
1027:       assertFalse(node2.hasMoreThanOneChild());
1028:       assertFalse(node2.isCase());
1029:       assertEquals((-1), node2.getLineno());
1030:       assertFalse(node2.isInc());
1031:       assertFalse(node2.isNE());
1032:       assertFalse(node2.isSwitch());
1033:       assertFalse(node2.isIn());
1034:       assertFalse(node2.isNumber());
1035:       assertFalse(node2.isGetterDef());
1036:       assertEquals((-1), node2.getCharno());
1037:       assertFalse(node2.isFor());
1038:       assertFalse(node2.isIf());
1039:       assertFalse(node2.hasOneChild());
1040:       assertFalse(node2.isTry());
1041:       assertFalse(node2.isThis());
1042:       assertFalse(node2.isBlock());
1043:       assertFalse(node2.isHook());
1044:       assertFalse(node2.isRegExp());
1045:       assertFalse(node2.isObjectLit());
1046:       assertFalse(node2.isWith());
1047:       assertFalse(node2.isAnd());
1048:       assertFalse(node2.isInstanceOf());
1049:       assertFalse(node2.isScript());
1050:       assertFalse(node2.isGetProp());
1051:       assertFalse(node2.isNot());
1052:       assertFalse(node2.isFalse());
1053:       assertFalse(node2.isThrow());
1054:       assertTrue(node2.isNew());
1055:       assertFalse(node2.isCast());
1056:       assertFalse(node2.isLabelName());
1057:       assertEquals(30, node2.getType());
1058:       assertFalse(node2.isAssignAdd());
1059:       assertFalse(node2.isLabel());
1060:       assertFalse(node2.isString());
1061:       assertFalse(node2.isContinue());
1062:       assertFalse(node2.isWhile());
1063:       assertFalse(node2.isDo());
1064:       assertFalse(node2.isAdd());
1065:       assertFalse(node2.isOr());
1066:       assertEquals((-1), node2.getSourcePosition());
1067:       assertFalse(node2.isName());
1068:       assertFalse(node2.isGetElem());
1069:       assertFalse(node2.isCall());
1070:       assertFalse(node2.isBreak());
1071:       assertFalse(node2.isDelProp());
1072:       assertFalse(node2.isExprResult());
1073:       assertFalse(node2.hasChildren());
1074:       assertFalse(node2.isDec());
1075:       assertFalse(node2.isTypeOf());
1076:       assertFalse(node2.isReturn());
1077:       assertFalse(node2.isAssign());
1078:       assertFalse(node2.isComma());
1079:       assertFalse(node0.equals((Object)node1));
1080:       assertFalse(node1.equals((Object)node0));
1081:       assertFalse(node2.equals((Object)node0));
1082:       
1083:       Node node3 = Node.newNumber((-3729.022741313));
1084:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(53, Node.INPUT_ID);
1087:       assertEquals(55, Node.INFERRED_FUNCTION);
1088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1089:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1090:       assertEquals(36, Node.QUOTED_PROP);
1091:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1092:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1093:       assertEquals(56, Node.CHANGE_TIME);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(48, Node.DIRECTIVES);
1096:       assertEquals(37, Node.OPT_ARG_NAME);
1097:       assertEquals(4095, Node.COLUMN_MASK);
1098:       assertEquals(12, Node.COLUMN_BITS);
1099:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1101:       assertEquals(57, Node.LAST_PROP);
1102:       assertEquals(54, Node.SLASH_V);
1103:       assertEquals(49, Node.DIRECT_EVAL);
1104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1105:       assertEquals(1, Node.DECR_FLAG);
1106:       assertEquals(57, Node.REFLECTED_OBJECT);
1107:       assertEquals(46, Node.IS_NAMESPACE);
1108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1109:       assertEquals(52, Node.LENGTH);
1110:       assertEquals(50, Node.FREE_CALL);
1111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1112:       assertEquals(2, Node.POST_FLAG);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(8, Node.FLAG_NO_THROWS);
1115:       assertEquals(39, Node.EMPTY_BLOCK);
1116:       assertEquals(29, Node.JSDOC_INFO_PROP);
1117:       assertEquals(40, Node.ORIGINALNAME_PROP);
1118:       assertEquals(30, Node.VAR_ARGS_NAME);
1119:       assertEquals(47, Node.IS_DISPATCHER);
1120:       assertNotNull(node3);
1121:       assertNotSame(node3, node0);
1122:       assertFalse(node3.isDebugger());
1123:       assertFalse(node3.isDefaultCase());
1124:       assertFalse(node3.isVoid());
1125:       assertFalse(node3.isRegExp());
1126:       assertFalse(node3.isFunction());
1127:       assertFalse(node3.isTrue());
1128:       assertFalse(node3.isEmpty());
1129:       assertFalse(node3.isTry());
1130:       assertFalse(node3.isNE());
1131:       assertFalse(node3.isIf());
1132:       assertFalse(node3.isDelProp());
1133:       assertFalse(node3.isFor());
1134:       assertFalse(node3.isNull());
1135:       assertFalse(node3.isCatch());
1136:       assertFalse(node3.isName());
1137:       assertFalse(node3.isCall());
1138:       assertFalse(node3.isWhile());
1139:       assertFalse(node3.isIn());
1140:       assertFalse(node3.isString());
1141:       assertTrue(node3.isNumber());
1142:       assertFalse(node3.isInc());
1143:       assertFalse(node3.isSetterDef());
1144:       assertEquals((-1), node3.getSourcePosition());
1145:       assertFalse(node3.isThrow());
1146:       assertFalse(node3.isCast());
1147:       assertFalse(node3.isAnd());
1148:       assertFalse(node3.isContinue());
1149:       assertFalse(node3.isFalse());
1150:       assertFalse(node3.isScript());
1151:       assertFalse(node3.isNot());
1152:       assertFalse(node3.hasOneChild());
1153:       assertFalse(node3.isObjectLit());
1154:       assertFalse(node3.isGetProp());
1155:       assertFalse(node3.isComma());
1156:       assertFalse(node3.isDec());
1157:       assertFalse(node3.isTypeOf());
1158:       assertFalse(node3.isOr());
1159:       assertFalse(node3.isAssign());
1160:       assertFalse(node3.hasChildren());
1161:       assertFalse(node3.isThis());
1162:       assertFalse(node3.isReturn());
1163:       assertFalse(node3.hasMoreThanOneChild());
1164:       assertFalse(node3.isInstanceOf());
1165:       assertFalse(node3.isWith());
1166:       assertEquals((-1), node3.getLineno());
1167:       assertFalse(node3.isBreak());
1168:       assertFalse(node3.isExprResult());
1169:       assertFalse(node3.isGetElem());
1170:       assertFalse(node3.isSwitch());
1171:       assertEquals(39, node3.getType());
1172:       assertEquals((-1), node3.getCharno());
1173:       assertFalse(node3.isHook());
1174:       assertFalse(node3.isBlock());
1175:       assertFalse(node3.isVar());
1176:       assertFalse(node3.isDo());
1177:       assertFalse(node3.isCase());
1178:       assertFalse(node3.isNew());
1179:       assertFalse(node3.isAdd());
1180:       assertFalse(node3.isParamList());
1181:       assertFalse(node3.isGetterDef());
1182:       assertFalse(node3.isLabel());
1183:       assertFalse(node3.isAssignAdd());
1184:       assertFalse(node3.isStringKey());
1185:       assertFalse(node3.isArrayLit());
1186:       assertEquals(0, node3.getChildCount());
1187:       assertFalse(node3.isLabelName());
1188:       assertFalse(node3.equals((Object)node2));
1189:       assertFalse(node3.equals((Object)node0));
1190:       assertFalse(node3.equals((Object)node1));
1191:       
1192:       Iterable<Node> iterable1 = node3.siblings();
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(43, Node.IS_CONSTANT_NAME);
1195:       assertEquals(53, Node.INPUT_ID);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1199:       assertEquals(36, Node.QUOTED_PROP);
1200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1202:       assertEquals(56, Node.CHANGE_TIME);
1203:       assertEquals(32, Node.INCRDECR_PROP);
1204:       assertEquals(48, Node.DIRECTIVES);
1205:       assertEquals(37, Node.OPT_ARG_NAME);
1206:       assertEquals(4095, Node.COLUMN_MASK);
1207:       assertEquals(12, Node.COLUMN_BITS);
1208:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1210:       assertEquals(57, Node.LAST_PROP);
1211:       assertEquals(54, Node.SLASH_V);
1212:       assertEquals(49, Node.DIRECT_EVAL);
1213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1214:       assertEquals(1, Node.DECR_FLAG);
1215:       assertEquals(57, Node.REFLECTED_OBJECT);
1216:       assertEquals(46, Node.IS_NAMESPACE);
1217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1218:       assertEquals(52, Node.LENGTH);
1219:       assertEquals(50, Node.FREE_CALL);
1220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1221:       assertEquals(2, Node.POST_FLAG);
1222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1223:       assertEquals(8, Node.FLAG_NO_THROWS);
1224:       assertEquals(39, Node.EMPTY_BLOCK);
1225:       assertEquals(29, Node.JSDOC_INFO_PROP);
1226:       assertEquals(40, Node.ORIGINALNAME_PROP);
1227:       assertEquals(30, Node.VAR_ARGS_NAME);
1228:       assertEquals(47, Node.IS_DISPATCHER);
1229:       assertNotNull(iterable1);
1230:       assertNotSame(node3, node0);
1231:       assertFalse(node3.isDebugger());
1232:       assertFalse(node3.isDefaultCase());
1233:       assertFalse(node3.isVoid());
1234:       assertFalse(node3.isRegExp());
1235:       assertFalse(node3.isFunction());
1236:       assertFalse(node3.isTrue());
1237:       assertFalse(node3.isEmpty());
1238:       assertFalse(node3.isTry());
1239:       assertFalse(node3.isNE());
1240:       assertFalse(node3.isIf());
1241:       assertFalse(node3.isDelProp());
1242:       assertFalse(node3.isFor());
1243:       assertFalse(node3.isNull());
1244:       assertFalse(node3.isCatch());
1245:       assertFalse(node3.isName());
1246:       assertFalse(node3.isCall());
1247:       assertFalse(node3.isWhile());
1248:       assertFalse(node3.isIn());
1249:       assertFalse(node3.isString());
1250:       assertTrue(node3.isNumber());
1251:       assertFalse(node3.isInc());
1252:       assertFalse(node3.isSetterDef());
1253:       assertEquals((-1), node3.getSourcePosition());
1254:       assertFalse(node3.isThrow());
1255:       assertFalse(node3.isCast());
1256:       assertFalse(node3.isAnd());
1257:       assertFalse(node3.isContinue());
1258:       assertFalse(node3.isFalse());
1259:       assertFalse(node3.isScript());
1260:       assertFalse(node3.isNot());
1261:       assertFalse(node3.hasOneChild());
1262:       assertFalse(node3.isObjectLit());
1263:       assertFalse(node3.isGetProp());
1264:       assertFalse(node3.isComma());
1265:       assertFalse(node3.isDec());
1266:       assertFalse(node3.isTypeOf());
1267:       assertFalse(node3.isOr());
1268:       assertFalse(node3.isAssign());
1269:       assertFalse(node3.hasChildren());
1270:       assertFalse(node3.isThis());
1271:       assertFalse(node3.isReturn());
1272:       assertFalse(node3.hasMoreThanOneChild());
1273:       assertFalse(node3.isInstanceOf());
1274:       assertFalse(node3.isWith());
1275:       assertEquals((-1), node3.getLineno());
1276:       assertFalse(node3.isBreak());
1277:       assertFalse(node3.isExprResult());
1278:       assertFalse(node3.isGetElem());
1279:       assertFalse(node3.isSwitch());
1280:       assertEquals(39, node3.getType());
1281:       assertEquals((-1), node3.getCharno());
1282:       assertFalse(node3.isHook());
1283:       assertFalse(node3.isBlock());
1284:       assertFalse(node3.isVar());
1285:       assertFalse(node3.isDo());
1286:       assertFalse(node3.isCase());
1287:       assertFalse(node3.isNew());
1288:       assertFalse(node3.isAdd());
1289:       assertFalse(node3.isParamList());
1290:       assertFalse(node3.isGetterDef());
1291:       assertFalse(node3.isLabel());
1292:       assertFalse(node3.isAssignAdd());
1293:       assertFalse(node3.isStringKey());
1294:       assertFalse(node3.isArrayLit());
1295:       assertEquals(0, node3.getChildCount());
1296:       assertFalse(node3.isLabelName());
1297:       assertFalse(node3.equals((Object)node2));
1298:       assertFalse(node3.equals((Object)node0));
1299:       assertFalse(node3.equals((Object)node1));
1300:       assertFalse(iterable1.equals((Object)iterable0));
1301:       
1302:       InputId inputId0 = node1.getInputId();
1303:       assertEquals(29, Node.JSDOC_INFO_PROP);
1304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1305:       assertEquals(56, Node.CHANGE_TIME);
1306:       assertEquals(2, Node.POST_FLAG);
1307:       assertEquals(47, Node.IS_DISPATCHER);
1308:       assertEquals(46, Node.IS_NAMESPACE);
1309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1311:       assertEquals(37, Node.OPT_ARG_NAME);
1312:       assertEquals(30, Node.VAR_ARGS_NAME);
1313:       assertEquals(49, Node.DIRECT_EVAL);
1314:       assertEquals(57, Node.LAST_PROP);
1315:       assertEquals(36, Node.QUOTED_PROP);
1316:       assertEquals(52, Node.LENGTH);
1317:       assertEquals(53, Node.INPUT_ID);
1318:       assertEquals(55, Node.INFERRED_FUNCTION);
1319:       assertEquals(39, Node.EMPTY_BLOCK);
1320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1323:       assertEquals(50, Node.FREE_CALL);
1324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1326:       assertEquals(8, Node.FLAG_NO_THROWS);
1327:       assertEquals(57, Node.REFLECTED_OBJECT);
1328:       assertEquals(54, Node.SLASH_V);
1329:       assertEquals(40, Node.ORIGINALNAME_PROP);
1330:       assertEquals(48, Node.DIRECTIVES);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(4095, Node.COLUMN_MASK);
1333:       assertEquals(12, Node.COLUMN_BITS);
1334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1336:       assertEquals(32, Node.INCRDECR_PROP);
1337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1338:       assertEquals(1, Node.DECR_FLAG);
1339:       assertNull(inputId0);
1340:       assertSame(node1, node2);
1341:       assertFalse(node1.isEmpty());
1342:       assertFalse(node1.isIf());
1343:       assertFalse(node1.isGetterDef());
1344:       assertFalse(node1.isDelProp());
1345:       assertFalse(node1.isArrayLit());
1346:       assertFalse(node1.isIn());
1347:       assertFalse(node1.isVoid());
1348:       assertFalse(node1.isNE());
1349:       assertFalse(node1.isDebugger());
1350:       assertFalse(node1.isTrue());
1351:       assertFalse(node1.isDefaultCase());
1352:       assertFalse(node1.isInc());
1353:       assertEquals(0, node1.getChildCount());
1354:       assertFalse(node1.isFunction());
1355:       assertFalse(node1.isThrow());
1356:       assertTrue(node1.isNew());
1357:       assertFalse(node1.isFalse());
1358:       assertFalse(node1.isName());
1359:       assertFalse(node1.isBreak());
1360:       assertFalse(node1.isGetProp());
1361:       assertFalse(node1.isCall());
1362:       assertFalse(node1.isAnd());
1363:       assertFalse(node1.isNull());
1364:       assertFalse(node1.isNot());
1365:       assertFalse(node1.isString());
1366:       assertFalse(node1.isWhile());
1367:       assertFalse(node1.isObjectLit());
1368:       assertFalse(node1.isExprResult());
1369:       assertFalse(node1.isComma());
1370:       assertFalse(node1.hasChildren());
1371:       assertFalse(node1.isReturn());
1372:       assertFalse(node1.isLabelName());
1373:       assertFalse(node1.isAssign());
1374:       assertFalse(node1.isDec());
1375:       assertFalse(node1.isNumber());
1376:       assertFalse(node1.isTypeOf());
1377:       assertFalse(node1.isCast());
1378:       assertFalse(node1.hasOneChild());
1379:       assertFalse(node1.isGetElem());
1380:       assertFalse(node1.isOr());
1381:       assertEquals((-1), node1.getLineno());
1382:       assertEquals(30, node1.getType());
1383:       assertEquals((-1), node1.getSourcePosition());
1384:       assertFalse(node1.isDo());
1385:       assertFalse(node1.isContinue());
1386:       assertFalse(node1.isAdd());
1387:       assertFalse(node1.isLabel());
1388:       assertFalse(node1.isAssignAdd());
1389:       assertFalse(node1.isVar());
1390:       assertFalse(node1.isSetterDef());
1391:       assertFalse(node1.isSwitch());
1392:       assertFalse(node1.isParamList());
1393:       assertEquals((-1), node1.getCharno());
1394:       assertFalse(node1.isStringKey());
1395:       assertFalse(node1.isWith());
1396:       assertFalse(node1.isCase());
1397:       assertFalse(node1.isRegExp());
1398:       assertFalse(node1.isCatch());
1399:       assertFalse(node1.hasMoreThanOneChild());
1400:       assertFalse(node1.isInstanceOf());
1401:       assertFalse(node1.isScript());
1402:       assertFalse(node1.isTry());
1403:       assertFalse(node1.isFor());
1404:       assertFalse(node1.isHook());
1405:       assertFalse(node1.isThis());
1406:       assertFalse(node1.isBlock());
1407:       assertFalse(node1.equals((Object)node0));
1408:       assertFalse(node1.equals((Object)node3));
1409:       
1410:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1411:       assertNotNull(simpleErrorReporter0);
1412:       
1413:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
1414:       assertNotNull(jSTypeRegistry0);
1415:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1416:       
1417:       String string1 = "DIV";
1418:       Node node4 = Node.newString("INVARIANT", 4095, 139);
1419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1420:       assertEquals(57, Node.LAST_PROP);
1421:       assertEquals(30, Node.VAR_ARGS_NAME);
1422:       assertEquals(49, Node.DIRECT_EVAL);
1423:       assertEquals(1, Node.DECR_FLAG);
1424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1425:       assertEquals(52, Node.LENGTH);
1426:       assertEquals(54, Node.SLASH_V);
1427:       assertEquals(46, Node.IS_NAMESPACE);
1428:       assertEquals(57, Node.REFLECTED_OBJECT);
1429:       assertEquals(56, Node.CHANGE_TIME);
1430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1431:       assertEquals(50, Node.FREE_CALL);
1432:       assertEquals(48, Node.DIRECTIVES);
1433:       assertEquals(37, Node.OPT_ARG_NAME);
1434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1437:       assertEquals(4095, Node.COLUMN_MASK);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1440:       assertEquals(12, Node.COLUMN_BITS);
1441:       assertEquals(43, Node.IS_CONSTANT_NAME);
1442:       assertEquals(36, Node.QUOTED_PROP);
1443:       assertEquals(55, Node.INFERRED_FUNCTION);
1444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1445:       assertEquals(53, Node.INPUT_ID);
1446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1447:       assertEquals(47, Node.IS_DISPATCHER);
1448:       assertEquals(2, Node.POST_FLAG);
1449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1450:       assertEquals(8, Node.FLAG_NO_THROWS);
1451:       assertEquals(29, Node.JSDOC_INFO_PROP);
1452:       assertEquals(39, Node.EMPTY_BLOCK);
1453:       assertEquals(40, Node.ORIGINALNAME_PROP);
1454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1455:       assertNotNull(node4);
1456:       assertFalse(node4.isDo());
1457:       assertTrue(node4.isString());
1458:       assertFalse(node4.isBlock());
1459:       assertFalse(node4.isWhile());
1460:       assertFalse(node4.isOr());
1461:       assertFalse(node4.isNew());
1462:       assertFalse(node4.isAdd());
1463:       assertFalse(node4.hasChildren());
1464:       assertFalse(node4.isDec());
1465:       assertFalse(node4.isNull());
1466:       assertFalse(node4.isTypeOf());
1467:       assertFalse(node4.isAssign());
1468:       assertEquals(4095, node4.getLineno());
1469:       assertFalse(node4.isName());
1470:       assertFalse(node4.isReturn());
1471:       assertFalse(node4.isExprResult());
1472:       assertFalse(node4.isGetElem());
1473:       assertFalse(node4.isCall());
1474:       assertFalse(node4.isCatch());
1475:       assertFalse(node4.hasMoreThanOneChild());
1476:       assertFalse(node4.isDefaultCase());
1477:       assertFalse(node4.isRegExp());
1478:       assertFalse(node4.isScript());
1479:       assertFalse(node4.isVoid());
1480:       assertFalse(node4.isTrue());
1481:       assertFalse(node4.hasOneChild());
1482:       assertFalse(node4.isTry());
1483:       assertFalse(node4.isEmpty());
1484:       assertFalse(node4.isNumber());
1485:       assertFalse(node4.isGetterDef());
1486:       assertFalse(node4.isLabelName());
1487:       assertFalse(node4.isStringKey());
1488:       assertFalse(node4.isVar());
1489:       assertFalse(node4.isAssignAdd());
1490:       assertFalse(node4.isParamList());
1491:       assertEquals(0, node4.getChildCount());
1492:       assertFalse(node4.isArrayLit());
1493:       assertFalse(node4.isLabel());
1494:       assertEquals(139, node4.getCharno());
1495:       assertFalse(node4.isCase());
1496:       assertFalse(node4.isSwitch());
1497:       assertFalse(node4.isIn());
1498:       assertFalse(node4.isInc());
1499:       assertFalse(node4.isIf());
1500:       assertFalse(node4.isBreak());
1501:       assertFalse(node4.isDelProp());
1502:       assertFalse(node4.isThis());
1503:       assertFalse(node4.isComma());
1504:       assertFalse(node4.isFor());
1505:       assertFalse(node4.isNE());
1506:       assertFalse(node4.isInstanceOf());
1507:       assertFalse(node4.isHook());
1508:       assertFalse(node4.isWith());
1509:       assertFalse(node4.isNot());
1510:       assertFalse(node4.isDebugger());
1511:       assertEquals(40, node4.getType());
1512:       assertFalse(node4.isAnd());
1513:       assertFalse(node4.isGetProp());
1514:       assertFalse(node4.isObjectLit());
1515:       assertFalse(node4.isSetterDef());
1516:       assertFalse(node4.isThrow());
1517:       assertEquals(16773259, node4.getSourcePosition());
1518:       assertFalse(node4.isFalse());
1519:       assertFalse(node4.isFunction());
1520:       assertFalse(node4.isCast());
1521:       assertFalse(node4.isContinue());
1522:       assertFalse(node4.equals((Object)node2));
1523:       assertFalse(node4.equals((Object)node3));
1524:       assertFalse(node4.equals((Object)node0));
1525:       assertFalse(node4.equals((Object)node1));
1526:       
1527:       TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
1528:       assertNull(templatizedType0);
1529:       
1530:       // Undeclared exception!
1531:       try { 
1532:         FunctionType.getTopDefiningInterface((ObjectType) null, "DIV");
1533:         fail("Expecting exception: NullPointerException");
1534:       
1535:       } catch(NullPointerException e) {
1536:          //
1537:          // no message in exception (getMessage() returned null)
1538:          //
1539:          verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
1540:       }
1541:   }
1542: }
RegularFileObject[/tmp/EvoSuite_226_1628159652668/com/google/javascript/rhino/Node_226_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:34:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_226_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_226_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_226_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:34:12.925 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(199.2059217532582);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node0);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());

String string0 = node0.toString();
assertEquals("NUMBER 199.2059217532582", string0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(string0);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(iterable0);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isBreak();
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());

Node node1 = new Node(30, (-3923), 1186);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node1);
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals(30, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.equals((Object)node0));

Node node2 = node1.copyInformationFromForTree(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node2);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals(30, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isRegExp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertTrue(node2.isNew());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(30, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

Node node3 = Node.newNumber((-3729.022741313));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node3);
assertNotSame(node3, node0);
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isNull());
assertFalse(node3.isCatch());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isWhile());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertTrue(node3.isNumber());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isScript());
assertFalse(node3.isNot());
assertFalse(node3.hasOneChild());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isSwitch());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));

Iterable<Node> iterable1 = node3.siblings();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(iterable1);
assertNotSame(node3, node0);
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isNull());
assertFalse(node3.isCatch());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isWhile());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertTrue(node3.isNumber());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isScript());
assertFalse(node3.isNot());
assertFalse(node3.hasOneChild());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBreak());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isSwitch());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(iterable1.equals((Object)iterable0));

InputId inputId0 = node1.getInputId();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNull(inputId0);
assertSame(node1, node2);
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals(30, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

String string1 = "DIV";
Node node4 = Node.newString("INVARIANT", 4095, 139);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node4);
assertFalse(node4.isDo());
assertTrue(node4.isString());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertEquals(4095, node4.getLineno());
assertFalse(node4.isName());
assertFalse(node4.isReturn());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isScript());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isEmpty());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isParamList());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabel());
assertEquals(139, node4.getCharno());
assertFalse(node4.isCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.isIf());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isHook());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isDebugger());
assertEquals(40, node4.getType());
assertFalse(node4.isAnd());
assertFalse(node4.isGetProp());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertEquals(16773259, node4.getSourcePosition());
assertFalse(node4.isFalse());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));

TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) null);
assertNull(templatizedType0);

FunctionType.getTopDefiningInterface((ObjectType) null, "DIV");

[MASTER] 10:34:17.151 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_248_1628159656865/com/google/javascript/rhino/Node_248_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_248_1628159656865/com/google/javascript/rhino/Node_248_tmp__ESTest_scaffolding.java]]
[MASTER] 10:34:17.151 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:17.151 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:17.152 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 286
[MASTER] 10:34:17.156 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_248_1628159656865/com/google/javascript/rhino/Node_248_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:34:16 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.List;
16: import java.util.Vector;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_248_tmp__ESTest extends Node_248_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
27:       assertNotNull(node_SideEffectFlags0);
28:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
29:       assertEquals(0, node_SideEffectFlags0.valueOf());
30:       
31:       node_SideEffectFlags0.clearSideEffectFlags();
32:       assertEquals(15, node_SideEffectFlags0.valueOf());
33:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
34:       
35:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
36:       assertNotNull(node_SideEffectFlags1);
37:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
38:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
39:       assertEquals(15, node_SideEffectFlags0.valueOf());
40:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
41:       assertEquals(15, node_SideEffectFlags1.valueOf());
42:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
43:       
44:       boolean boolean0 = node_SideEffectFlags1.areAllFlagsSet();
45:       assertFalse(boolean0);
46:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
47:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
48:       assertEquals(15, node_SideEffectFlags0.valueOf());
49:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
50:       assertEquals(15, node_SideEffectFlags1.valueOf());
51:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
52:       
53:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
54:       assertNotNull(simpleErrorReporter0);
55:       
56:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
57:       assertNotNull(jSTypeRegistry0);
58:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
59:       
60:       Vector<JSType> vector0 = new Vector<JSType>();
61:       assertNotNull(vector0);
62:       assertEquals(0, vector0.size());
63:       assertEquals(10, vector0.capacity());
64:       assertEquals("[]", vector0.toString());
65:       assertTrue(vector0.isEmpty());
66:       
67:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
68:       assertEquals(12, Node.COLUMN_BITS);
69:       assertEquals(32, Node.INCRDECR_PROP);
70:       assertEquals(51, Node.STATIC_SOURCE_FILE);
71:       assertEquals(1, Node.DECR_FLAG);
72:       assertEquals(2, Node.POST_FLAG);
73:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
74:       assertEquals(15, Node.NO_SIDE_EFFECTS);
75:       assertEquals(57, Node.LAST_PROP);
76:       assertEquals(47, Node.IS_DISPATCHER);
77:       assertEquals(30, Node.VAR_ARGS_NAME);
78:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
79:       assertEquals(50, Node.FREE_CALL);
80:       assertEquals(40, Node.ORIGINALNAME_PROP);
81:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
82:       assertEquals(46, Node.IS_NAMESPACE);
83:       assertEquals(54, Node.SLASH_V);
84:       assertEquals(43, Node.IS_CONSTANT_NAME);
85:       assertEquals(4095, Node.COLUMN_MASK);
86:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
87:       assertEquals(55, Node.INFERRED_FUNCTION);
88:       assertEquals(39, Node.EMPTY_BLOCK);
89:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(57, Node.REFLECTED_OBJECT);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(36, Node.QUOTED_PROP);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(49, Node.DIRECT_EVAL);
102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertNotNull(node0);
105:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
106:       assertEquals(0, vector0.size());
107:       assertEquals(10, vector0.capacity());
108:       assertEquals("[]", vector0.toString());
109:       assertTrue(vector0.isEmpty());
110:       assertFalse(node0.isCase());
111:       assertFalse(node0.isArrayLit());
112:       assertFalse(node0.isHook());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.isSwitch());
116:       assertEquals((-1), node0.getCharno());
117:       assertFalse(node0.isDebugger());
118:       assertFalse(node0.isGetProp());
119:       assertFalse(node0.isString());
120:       assertFalse(node0.isGetterDef());
121:       assertTrue(node0.isParamList());
122:       assertEquals(0, node0.getChildCount());
123:       assertFalse(node0.isDefaultCase());
124:       assertFalse(node0.isComma());
125:       assertFalse(node0.isExprResult());
126:       assertFalse(node0.isBreak());
127:       assertFalse(node0.isVar());
128:       assertFalse(node0.isCall());
129:       assertFalse(node0.isGetElem());
130:       assertFalse(node0.isName());
131:       assertFalse(node0.isNew());
132:       assertFalse(node0.isDelProp());
133:       assertFalse(node0.isVoid());
134:       assertFalse(node0.isNull());
135:       assertEquals(83, node0.getType());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isEmpty());
138:       assertFalse(node0.isOr());
139:       assertFalse(node0.isAdd());
140:       assertFalse(node0.isReturn());
141:       assertFalse(node0.isAssignAdd());
142:       assertFalse(node0.isDo());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.isWhile());
145:       assertFalse(node0.isTypeOf());
146:       assertFalse(node0.isDec());
147:       assertFalse(node0.hasChildren());
148:       assertFalse(node0.isBlock());
149:       assertFalse(node0.isLabel());
150:       assertFalse(node0.isAssign());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.hasOneChild());
154:       assertFalse(node0.isCast());
155:       assertFalse(node0.isLabelName());
156:       assertFalse(node0.isStringKey());
157:       assertFalse(node0.isScript());
158:       assertEquals((-1), node0.getSourcePosition());
159:       assertFalse(node0.isNot());
160:       assertFalse(node0.isObjectLit());
161:       assertFalse(node0.isNumber());
162:       assertFalse(node0.isCatch());
163:       assertFalse(node0.isInstanceOf());
164:       assertFalse(node0.isAnd());
165:       assertFalse(node0.isRegExp());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isFalse());
168:       assertFalse(node0.isWith());
169:       assertFalse(node0.isFunction());
170:       assertFalse(node0.isThrow());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isNE());
173:       assertFalse(node0.isInc());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isIn());
176:       
177:       Iterable<Node> iterable0 = node0.children();
178:       assertEquals(12, Node.COLUMN_BITS);
179:       assertEquals(32, Node.INCRDECR_PROP);
180:       assertEquals(51, Node.STATIC_SOURCE_FILE);
181:       assertEquals(1, Node.DECR_FLAG);
182:       assertEquals(2, Node.POST_FLAG);
183:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
184:       assertEquals(15, Node.NO_SIDE_EFFECTS);
185:       assertEquals(57, Node.LAST_PROP);
186:       assertEquals(47, Node.IS_DISPATCHER);
187:       assertEquals(30, Node.VAR_ARGS_NAME);
188:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
189:       assertEquals(50, Node.FREE_CALL);
190:       assertEquals(40, Node.ORIGINALNAME_PROP);
191:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
192:       assertEquals(46, Node.IS_NAMESPACE);
193:       assertEquals(54, Node.SLASH_V);
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(4095, Node.COLUMN_MASK);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
201:       assertEquals(57, Node.REFLECTED_OBJECT);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(52, Node.LENGTH);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(36, Node.QUOTED_PROP);
208:       assertEquals(8, Node.FLAG_NO_THROWS);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(49, Node.DIRECT_EVAL);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertNotNull(iterable0);
215:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
216:       assertEquals(0, vector0.size());
217:       assertEquals(10, vector0.capacity());
218:       assertEquals("[]", vector0.toString());
219:       assertTrue(vector0.isEmpty());
220:       assertFalse(node0.isCase());
221:       assertFalse(node0.isArrayLit());
222:       assertFalse(node0.isHook());
223:       assertFalse(node0.isFor());
224:       assertFalse(node0.isTry());
225:       assertFalse(node0.isSwitch());
226:       assertEquals((-1), node0.getCharno());
227:       assertFalse(node0.isDebugger());
228:       assertFalse(node0.isGetProp());
229:       assertFalse(node0.isString());
230:       assertFalse(node0.isGetterDef());
231:       assertTrue(node0.isParamList());
232:       assertEquals(0, node0.getChildCount());
233:       assertFalse(node0.isDefaultCase());
234:       assertFalse(node0.isComma());
235:       assertFalse(node0.isExprResult());
236:       assertFalse(node0.isBreak());
237:       assertFalse(node0.isVar());
238:       assertFalse(node0.isCall());
239:       assertFalse(node0.isGetElem());
240:       assertFalse(node0.isName());
241:       assertFalse(node0.isNew());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isVoid());
244:       assertFalse(node0.isNull());
245:       assertEquals(83, node0.getType());
246:       assertFalse(node0.isTrue());
247:       assertFalse(node0.isEmpty());
248:       assertFalse(node0.isOr());
249:       assertFalse(node0.isAdd());
250:       assertFalse(node0.isReturn());
251:       assertFalse(node0.isAssignAdd());
252:       assertFalse(node0.isDo());
253:       assertEquals((-1), node0.getLineno());
254:       assertFalse(node0.isWhile());
255:       assertFalse(node0.isTypeOf());
256:       assertFalse(node0.isDec());
257:       assertFalse(node0.hasChildren());
258:       assertFalse(node0.isBlock());
259:       assertFalse(node0.isLabel());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isContinue());
262:       assertFalse(node0.hasMoreThanOneChild());
263:       assertFalse(node0.hasOneChild());
264:       assertFalse(node0.isCast());
265:       assertFalse(node0.isLabelName());
266:       assertFalse(node0.isStringKey());
267:       assertFalse(node0.isScript());
268:       assertEquals((-1), node0.getSourcePosition());
269:       assertFalse(node0.isNot());
270:       assertFalse(node0.isObjectLit());
271:       assertFalse(node0.isNumber());
272:       assertFalse(node0.isCatch());
273:       assertFalse(node0.isInstanceOf());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isRegExp());
276:       assertFalse(node0.isThis());
277:       assertFalse(node0.isFalse());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isFunction());
280:       assertFalse(node0.isThrow());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.isNE());
283:       assertFalse(node0.isInc());
284:       assertFalse(node0.isSetterDef());
285:       assertFalse(node0.isIn());
286:       assertFalse(iterable0.contains(node0));
287:       
288:       boolean boolean1 = node0.mayMutateArguments();
289:       assertTrue(boolean1);
290:       assertEquals(12, Node.COLUMN_BITS);
291:       assertEquals(32, Node.INCRDECR_PROP);
292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
293:       assertEquals(1, Node.DECR_FLAG);
294:       assertEquals(2, Node.POST_FLAG);
295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
296:       assertEquals(15, Node.NO_SIDE_EFFECTS);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(30, Node.VAR_ARGS_NAME);
300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(40, Node.ORIGINALNAME_PROP);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(46, Node.IS_NAMESPACE);
305:       assertEquals(54, Node.SLASH_V);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(55, Node.INFERRED_FUNCTION);
310:       assertEquals(39, Node.EMPTY_BLOCK);
311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(29, Node.JSDOC_INFO_PROP);
316:       assertEquals(53, Node.INPUT_ID);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(8, Node.FLAG_NO_THROWS);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
327:       assertEquals(0, vector0.size());
328:       assertEquals(10, vector0.capacity());
329:       assertEquals("[]", vector0.toString());
330:       assertTrue(vector0.isEmpty());
331:       assertFalse(node0.isCase());
332:       assertFalse(node0.isArrayLit());
333:       assertFalse(node0.isHook());
334:       assertFalse(node0.isFor());
335:       assertFalse(node0.isTry());
336:       assertFalse(node0.isSwitch());
337:       assertEquals((-1), node0.getCharno());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isGetProp());
340:       assertFalse(node0.isString());
341:       assertFalse(node0.isGetterDef());
342:       assertTrue(node0.isParamList());
343:       assertEquals(0, node0.getChildCount());
344:       assertFalse(node0.isDefaultCase());
345:       assertFalse(node0.isComma());
346:       assertFalse(node0.isExprResult());
347:       assertFalse(node0.isBreak());
348:       assertFalse(node0.isVar());
349:       assertFalse(node0.isCall());
350:       assertFalse(node0.isGetElem());
351:       assertFalse(node0.isName());
352:       assertFalse(node0.isNew());
353:       assertFalse(node0.isDelProp());
354:       assertFalse(node0.isVoid());
355:       assertFalse(node0.isNull());
356:       assertEquals(83, node0.getType());
357:       assertFalse(node0.isTrue());
358:       assertFalse(node0.isEmpty());
359:       assertFalse(node0.isOr());
360:       assertFalse(node0.isAdd());
361:       assertFalse(node0.isReturn());
362:       assertFalse(node0.isAssignAdd());
363:       assertFalse(node0.isDo());
364:       assertEquals((-1), node0.getLineno());
365:       assertFalse(node0.isWhile());
366:       assertFalse(node0.isTypeOf());
367:       assertFalse(node0.isDec());
368:       assertFalse(node0.hasChildren());
369:       assertFalse(node0.isBlock());
370:       assertFalse(node0.isLabel());
371:       assertFalse(node0.isAssign());
372:       assertFalse(node0.isContinue());
373:       assertFalse(node0.hasMoreThanOneChild());
374:       assertFalse(node0.hasOneChild());
375:       assertFalse(node0.isCast());
376:       assertFalse(node0.isLabelName());
377:       assertFalse(node0.isStringKey());
378:       assertFalse(node0.isScript());
379:       assertEquals((-1), node0.getSourcePosition());
380:       assertFalse(node0.isNot());
381:       assertFalse(node0.isObjectLit());
382:       assertFalse(node0.isNumber());
383:       assertFalse(node0.isCatch());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isAnd());
386:       assertFalse(node0.isRegExp());
387:       assertFalse(node0.isThis());
388:       assertFalse(node0.isFalse());
389:       assertFalse(node0.isWith());
390:       assertFalse(node0.isFunction());
391:       assertFalse(node0.isThrow());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.isNE());
394:       assertFalse(node0.isInc());
395:       assertFalse(node0.isSetterDef());
396:       assertFalse(node0.isIn());
397:       assertFalse(boolean1 == boolean0);
398:       
399:       InputId inputId0 = node0.getInputId();
400:       assertEquals(12, Node.COLUMN_BITS);
401:       assertEquals(32, Node.INCRDECR_PROP);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(1, Node.DECR_FLAG);
404:       assertEquals(2, Node.POST_FLAG);
405:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(57, Node.LAST_PROP);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(30, Node.VAR_ARGS_NAME);
410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
411:       assertEquals(50, Node.FREE_CALL);
412:       assertEquals(40, Node.ORIGINALNAME_PROP);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(46, Node.IS_NAMESPACE);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
423:       assertEquals(57, Node.REFLECTED_OBJECT);
424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
425:       assertEquals(29, Node.JSDOC_INFO_PROP);
426:       assertEquals(53, Node.INPUT_ID);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(8, Node.FLAG_NO_THROWS);
431:       assertEquals(37, Node.OPT_ARG_NAME);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
435:       assertEquals(56, Node.CHANGE_TIME);
436:       assertNull(inputId0);
437:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
438:       assertEquals(0, vector0.size());
439:       assertEquals(10, vector0.capacity());
440:       assertEquals("[]", vector0.toString());
441:       assertTrue(vector0.isEmpty());
442:       assertFalse(node0.isCase());
443:       assertFalse(node0.isArrayLit());
444:       assertFalse(node0.isHook());
445:       assertFalse(node0.isFor());
446:       assertFalse(node0.isTry());
447:       assertFalse(node0.isSwitch());
448:       assertEquals((-1), node0.getCharno());
449:       assertFalse(node0.isDebugger());
450:       assertFalse(node0.isGetProp());
451:       assertFalse(node0.isString());
452:       assertFalse(node0.isGetterDef());
453:       assertTrue(node0.isParamList());
454:       assertEquals(0, node0.getChildCount());
455:       assertFalse(node0.isDefaultCase());
456:       assertFalse(node0.isComma());
457:       assertFalse(node0.isExprResult());
458:       assertFalse(node0.isBreak());
459:       assertFalse(node0.isVar());
460:       assertFalse(node0.isCall());
461:       assertFalse(node0.isGetElem());
462:       assertFalse(node0.isName());
463:       assertFalse(node0.isNew());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isVoid());
466:       assertFalse(node0.isNull());
467:       assertEquals(83, node0.getType());
468:       assertFalse(node0.isTrue());
469:       assertFalse(node0.isEmpty());
470:       assertFalse(node0.isOr());
471:       assertFalse(node0.isAdd());
472:       assertFalse(node0.isReturn());
473:       assertFalse(node0.isAssignAdd());
474:       assertFalse(node0.isDo());
475:       assertEquals((-1), node0.getLineno());
476:       assertFalse(node0.isWhile());
477:       assertFalse(node0.isTypeOf());
478:       assertFalse(node0.isDec());
479:       assertFalse(node0.hasChildren());
480:       assertFalse(node0.isBlock());
481:       assertFalse(node0.isLabel());
482:       assertFalse(node0.isAssign());
483:       assertFalse(node0.isContinue());
484:       assertFalse(node0.hasMoreThanOneChild());
485:       assertFalse(node0.hasOneChild());
486:       assertFalse(node0.isCast());
487:       assertFalse(node0.isLabelName());
488:       assertFalse(node0.isStringKey());
489:       assertFalse(node0.isScript());
490:       assertEquals((-1), node0.getSourcePosition());
491:       assertFalse(node0.isNot());
492:       assertFalse(node0.isObjectLit());
493:       assertFalse(node0.isNumber());
494:       assertFalse(node0.isCatch());
495:       assertFalse(node0.isInstanceOf());
496:       assertFalse(node0.isAnd());
497:       assertFalse(node0.isRegExp());
498:       assertFalse(node0.isThis());
499:       assertFalse(node0.isFalse());
500:       assertFalse(node0.isWith());
501:       assertFalse(node0.isFunction());
502:       assertFalse(node0.isThrow());
503:       assertFalse(node0.isIf());
504:       assertFalse(node0.isNE());
505:       assertFalse(node0.isInc());
506:       assertFalse(node0.isSetterDef());
507:       assertFalse(node0.isIn());
508:       
509:       node0.removeProp((-1129));
510:       assertEquals(12, Node.COLUMN_BITS);
511:       assertEquals(32, Node.INCRDECR_PROP);
512:       assertEquals(51, Node.STATIC_SOURCE_FILE);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(2, Node.POST_FLAG);
515:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
517:       assertEquals(57, Node.LAST_PROP);
518:       assertEquals(47, Node.IS_DISPATCHER);
519:       assertEquals(30, Node.VAR_ARGS_NAME);
520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(40, Node.ORIGINALNAME_PROP);
523:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(43, Node.IS_CONSTANT_NAME);
527:       assertEquals(4095, Node.COLUMN_MASK);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(39, Node.EMPTY_BLOCK);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
533:       assertEquals(57, Node.REFLECTED_OBJECT);
534:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(52, Node.LENGTH);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(37, Node.OPT_ARG_NAME);
542:       assertEquals(48, Node.DIRECTIVES);
543:       assertEquals(49, Node.DIRECT_EVAL);
544:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
547:       assertEquals(0, vector0.size());
548:       assertEquals(10, vector0.capacity());
549:       assertEquals("[]", vector0.toString());
550:       assertTrue(vector0.isEmpty());
551:       assertFalse(node0.isCase());
552:       assertFalse(node0.isArrayLit());
553:       assertFalse(node0.isHook());
554:       assertFalse(node0.isFor());
555:       assertFalse(node0.isTry());
556:       assertFalse(node0.isSwitch());
557:       assertEquals((-1), node0.getCharno());
558:       assertFalse(node0.isDebugger());
559:       assertFalse(node0.isGetProp());
560:       assertFalse(node0.isString());
561:       assertFalse(node0.isGetterDef());
562:       assertTrue(node0.isParamList());
563:       assertEquals(0, node0.getChildCount());
564:       assertFalse(node0.isDefaultCase());
565:       assertFalse(node0.isComma());
566:       assertFalse(node0.isExprResult());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isVar());
569:       assertFalse(node0.isCall());
570:       assertFalse(node0.isGetElem());
571:       assertFalse(node0.isName());
572:       assertFalse(node0.isNew());
573:       assertFalse(node0.isDelProp());
574:       assertFalse(node0.isVoid());
575:       assertFalse(node0.isNull());
576:       assertEquals(83, node0.getType());
577:       assertFalse(node0.isTrue());
578:       assertFalse(node0.isEmpty());
579:       assertFalse(node0.isOr());
580:       assertFalse(node0.isAdd());
581:       assertFalse(node0.isReturn());
582:       assertFalse(node0.isAssignAdd());
583:       assertFalse(node0.isDo());
584:       assertEquals((-1), node0.getLineno());
585:       assertFalse(node0.isWhile());
586:       assertFalse(node0.isTypeOf());
587:       assertFalse(node0.isDec());
588:       assertFalse(node0.hasChildren());
589:       assertFalse(node0.isBlock());
590:       assertFalse(node0.isLabel());
591:       assertFalse(node0.isAssign());
592:       assertFalse(node0.isContinue());
593:       assertFalse(node0.hasMoreThanOneChild());
594:       assertFalse(node0.hasOneChild());
595:       assertFalse(node0.isCast());
596:       assertFalse(node0.isLabelName());
597:       assertFalse(node0.isStringKey());
598:       assertFalse(node0.isScript());
599:       assertEquals((-1), node0.getSourcePosition());
600:       assertFalse(node0.isNot());
601:       assertFalse(node0.isObjectLit());
602:       assertFalse(node0.isNumber());
603:       assertFalse(node0.isCatch());
604:       assertFalse(node0.isInstanceOf());
605:       assertFalse(node0.isAnd());
606:       assertFalse(node0.isRegExp());
607:       assertFalse(node0.isThis());
608:       assertFalse(node0.isFalse());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.isFunction());
611:       assertFalse(node0.isThrow());
612:       assertFalse(node0.isIf());
613:       assertFalse(node0.isNE());
614:       assertFalse(node0.isInc());
615:       assertFalse(node0.isSetterDef());
616:       assertFalse(node0.isIn());
617:       
618:       Node node1 = new Node(31, 51, 147);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(29, Node.JSDOC_INFO_PROP);
621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
622:       assertEquals(56, Node.CHANGE_TIME);
623:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(12, Node.COLUMN_BITS);
626:       assertEquals(32, Node.INCRDECR_PROP);
627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(30, Node.VAR_ARGS_NAME);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(53, Node.INPUT_ID);
635:       assertEquals(49, Node.DIRECT_EVAL);
636:       assertEquals(57, Node.REFLECTED_OBJECT);
637:       assertEquals(55, Node.INFERRED_FUNCTION);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(36, Node.QUOTED_PROP);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
643:       assertEquals(8, Node.FLAG_NO_THROWS);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(40, Node.ORIGINALNAME_PROP);
646:       assertEquals(39, Node.EMPTY_BLOCK);
647:       assertEquals(4095, Node.COLUMN_MASK);
648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
649:       assertEquals(43, Node.IS_CONSTANT_NAME);
650:       assertEquals(1, Node.DECR_FLAG);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(54, Node.SLASH_V);
653:       assertEquals(50, Node.FREE_CALL);
654:       assertEquals(51, Node.STATIC_SOURCE_FILE);
655:       assertNotNull(node1);
656:       assertFalse(node1.isIf());
657:       assertEquals(147, node1.getCharno());
658:       assertFalse(node1.isGetterDef());
659:       assertFalse(node1.isNE());
660:       assertFalse(node1.isFor());
661:       assertFalse(node1.isArrayLit());
662:       assertFalse(node1.isVoid());
663:       assertFalse(node1.isDefaultCase());
664:       assertFalse(node1.isFunction());
665:       assertFalse(node1.isTrue());
666:       assertFalse(node1.isIn());
667:       assertEquals(51, node1.getLineno());
668:       assertFalse(node1.isEmpty());
669:       assertFalse(node1.isSetterDef());
670:       assertFalse(node1.isInc());
671:       assertFalse(node1.isStringKey());
672:       assertFalse(node1.isParamList());
673:       assertFalse(node1.isVar());
674:       assertFalse(node1.isThis());
675:       assertFalse(node1.isInstanceOf());
676:       assertFalse(node1.isHook());
677:       assertEquals(0, node1.getChildCount());
678:       assertFalse(node1.isCatch());
679:       assertEquals(31, node1.getType());
680:       assertFalse(node1.isSwitch());
681:       assertFalse(node1.isWith());
682:       assertFalse(node1.isRegExp());
683:       assertEquals(209043, node1.getSourcePosition());
684:       assertFalse(node1.isBlock());
685:       assertFalse(node1.hasOneChild());
686:       assertFalse(node1.isTry());
687:       assertFalse(node1.isCase());
688:       assertFalse(node1.isScript());
689:       assertFalse(node1.isNumber());
690:       assertFalse(node1.hasChildren());
691:       assertFalse(node1.isDec());
692:       assertFalse(node1.isLabelName());
693:       assertFalse(node1.isAssign());
694:       assertFalse(node1.isTypeOf());
695:       assertTrue(node1.isDelProp());
696:       assertFalse(node1.isLabel());
697:       assertFalse(node1.isReturn());
698:       assertFalse(node1.hasMoreThanOneChild());
699:       assertFalse(node1.isContinue());
700:       assertFalse(node1.isCast());
701:       assertFalse(node1.isExprResult());
702:       assertFalse(node1.isGetElem());
703:       assertFalse(node1.isDo());
704:       assertFalse(node1.isOr());
705:       assertFalse(node1.isAssignAdd());
706:       assertFalse(node1.isNew());
707:       assertFalse(node1.isAdd());
708:       assertFalse(node1.isBreak());
709:       assertFalse(node1.isName());
710:       assertFalse(node1.isThrow());
711:       assertFalse(node1.isComma());
712:       assertFalse(node1.isNull());
713:       assertFalse(node1.isFalse());
714:       assertFalse(node1.isCall());
715:       assertFalse(node1.isString());
716:       assertFalse(node1.isWhile());
717:       assertFalse(node1.isNot());
718:       assertFalse(node1.isAnd());
719:       assertFalse(node1.isDebugger());
720:       assertFalse(node1.isObjectLit());
721:       assertFalse(node1.isGetProp());
722:       assertFalse(node1.equals((Object)node0));
723:       
724:       boolean boolean2 = node0.isEquivalentTo(node1, true, false, false);
725:       assertFalse(boolean2);
726:       assertEquals(12, Node.COLUMN_BITS);
727:       assertEquals(32, Node.INCRDECR_PROP);
728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
729:       assertEquals(1, Node.DECR_FLAG);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
732:       assertEquals(15, Node.NO_SIDE_EFFECTS);
733:       assertEquals(57, Node.LAST_PROP);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(30, Node.VAR_ARGS_NAME);
736:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
737:       assertEquals(50, Node.FREE_CALL);
738:       assertEquals(40, Node.ORIGINALNAME_PROP);
739:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
740:       assertEquals(46, Node.IS_NAMESPACE);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(43, Node.IS_CONSTANT_NAME);
743:       assertEquals(4095, Node.COLUMN_MASK);
744:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
745:       assertEquals(55, Node.INFERRED_FUNCTION);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(57, Node.REFLECTED_OBJECT);
750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
751:       assertEquals(29, Node.JSDOC_INFO_PROP);
752:       assertEquals(53, Node.INPUT_ID);
753:       assertEquals(52, Node.LENGTH);
754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
755:       assertEquals(36, Node.QUOTED_PROP);
756:       assertEquals(8, Node.FLAG_NO_THROWS);
757:       assertEquals(37, Node.OPT_ARG_NAME);
758:       assertEquals(48, Node.DIRECTIVES);
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
761:       assertEquals(56, Node.CHANGE_TIME);
762:       assertEquals(47, Node.IS_DISPATCHER);
763:       assertEquals(29, Node.JSDOC_INFO_PROP);
764:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
765:       assertEquals(56, Node.CHANGE_TIME);
766:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
767:       assertEquals(37, Node.OPT_ARG_NAME);
768:       assertEquals(12, Node.COLUMN_BITS);
769:       assertEquals(32, Node.INCRDECR_PROP);
770:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
771:       assertEquals(2, Node.POST_FLAG);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(15, Node.NO_SIDE_EFFECTS);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
777:       assertEquals(53, Node.INPUT_ID);
778:       assertEquals(49, Node.DIRECT_EVAL);
779:       assertEquals(57, Node.REFLECTED_OBJECT);
780:       assertEquals(55, Node.INFERRED_FUNCTION);
781:       assertEquals(52, Node.LENGTH);
782:       assertEquals(36, Node.QUOTED_PROP);
783:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
786:       assertEquals(8, Node.FLAG_NO_THROWS);
787:       assertEquals(48, Node.DIRECTIVES);
788:       assertEquals(40, Node.ORIGINALNAME_PROP);
789:       assertEquals(39, Node.EMPTY_BLOCK);
790:       assertEquals(4095, Node.COLUMN_MASK);
791:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
792:       assertEquals(43, Node.IS_CONSTANT_NAME);
793:       assertEquals(1, Node.DECR_FLAG);
794:       assertEquals(46, Node.IS_NAMESPACE);
795:       assertEquals(54, Node.SLASH_V);
796:       assertEquals(50, Node.FREE_CALL);
797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
798:       assertNotSame(node0, node1);
799:       assertNotSame(node1, node0);
800:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
801:       assertEquals(0, vector0.size());
802:       assertEquals(10, vector0.capacity());
803:       assertEquals("[]", vector0.toString());
804:       assertTrue(vector0.isEmpty());
805:       assertFalse(node0.isCase());
806:       assertFalse(node0.isArrayLit());
807:       assertFalse(node0.isHook());
808:       assertFalse(node0.isFor());
809:       assertFalse(node0.isTry());
810:       assertFalse(node0.isSwitch());
811:       assertEquals((-1), node0.getCharno());
812:       assertFalse(node0.isDebugger());
813:       assertFalse(node0.isGetProp());
814:       assertFalse(node0.isString());
815:       assertFalse(node0.isGetterDef());
816:       assertTrue(node0.isParamList());
817:       assertEquals(0, node0.getChildCount());
818:       assertFalse(node0.isDefaultCase());
819:       assertFalse(node0.isComma());
820:       assertFalse(node0.isExprResult());
821:       assertFalse(node0.isBreak());
822:       assertFalse(node0.isVar());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.isGetElem());
825:       assertFalse(node0.isName());
826:       assertFalse(node0.isNew());
827:       assertFalse(node0.isDelProp());
828:       assertFalse(node0.isVoid());
829:       assertFalse(node0.isNull());
830:       assertEquals(83, node0.getType());
831:       assertFalse(node0.isTrue());
832:       assertFalse(node0.isEmpty());
833:       assertFalse(node0.isOr());
834:       assertFalse(node0.isAdd());
835:       assertFalse(node0.isReturn());
836:       assertFalse(node0.isAssignAdd());
837:       assertFalse(node0.isDo());
838:       assertEquals((-1), node0.getLineno());
839:       assertFalse(node0.isWhile());
840:       assertFalse(node0.isTypeOf());
841:       assertFalse(node0.isDec());
842:       assertFalse(node0.hasChildren());
843:       assertFalse(node0.isBlock());
844:       assertFalse(node0.isLabel());
845:       assertFalse(node0.isAssign());
846:       assertFalse(node0.isContinue());
847:       assertFalse(node0.hasMoreThanOneChild());
848:       assertFalse(node0.hasOneChild());
849:       assertFalse(node0.isCast());
850:       assertFalse(node0.isLabelName());
851:       assertFalse(node0.isStringKey());
852:       assertFalse(node0.isScript());
853:       assertEquals((-1), node0.getSourcePosition());
854:       assertFalse(node0.isNot());
855:       assertFalse(node0.isObjectLit());
856:       assertFalse(node0.isNumber());
857:       assertFalse(node0.isCatch());
858:       assertFalse(node0.isInstanceOf());
859:       assertFalse(node0.isAnd());
860:       assertFalse(node0.isRegExp());
861:       assertFalse(node0.isThis());
862:       assertFalse(node0.isFalse());
863:       assertFalse(node0.isWith());
864:       assertFalse(node0.isFunction());
865:       assertFalse(node0.isThrow());
866:       assertFalse(node0.isIf());
867:       assertFalse(node0.isNE());
868:       assertFalse(node0.isInc());
869:       assertFalse(node0.isSetterDef());
870:       assertFalse(node0.isIn());
871:       assertFalse(node1.isIf());
872:       assertEquals(147, node1.getCharno());
873:       assertFalse(node1.isGetterDef());
874:       assertFalse(node1.isNE());
875:       assertFalse(node1.isFor());
876:       assertFalse(node1.isArrayLit());
877:       assertFalse(node1.isVoid());
878:       assertFalse(node1.isDefaultCase());
879:       assertFalse(node1.isFunction());
880:       assertFalse(node1.isTrue());
881:       assertFalse(node1.isIn());
882:       assertEquals(51, node1.getLineno());
883:       assertFalse(node1.isEmpty());
884:       assertFalse(node1.isSetterDef());
885:       assertFalse(node1.isInc());
886:       assertFalse(node1.isStringKey());
887:       assertFalse(node1.isParamList());
888:       assertFalse(node1.isVar());
889:       assertFalse(node1.isThis());
890:       assertFalse(node1.isInstanceOf());
891:       assertFalse(node1.isHook());
892:       assertEquals(0, node1.getChildCount());
893:       assertFalse(node1.isCatch());
894:       assertEquals(31, node1.getType());
895:       assertFalse(node1.isSwitch());
896:       assertFalse(node1.isWith());
897:       assertFalse(node1.isRegExp());
898:       assertEquals(209043, node1.getSourcePosition());
899:       assertFalse(node1.isBlock());
900:       assertFalse(node1.hasOneChild());
901:       assertFalse(node1.isTry());
902:       assertFalse(node1.isCase());
903:       assertFalse(node1.isScript());
904:       assertFalse(node1.isNumber());
905:       assertFalse(node1.hasChildren());
906:       assertFalse(node1.isDec());
907:       assertFalse(node1.isLabelName());
908:       assertFalse(node1.isAssign());
909:       assertFalse(node1.isTypeOf());
910:       assertTrue(node1.isDelProp());
911:       assertFalse(node1.isLabel());
912:       assertFalse(node1.isReturn());
913:       assertFalse(node1.hasMoreThanOneChild());
914:       assertFalse(node1.isContinue());
915:       assertFalse(node1.isCast());
916:       assertFalse(node1.isExprResult());
917:       assertFalse(node1.isGetElem());
918:       assertFalse(node1.isDo());
919:       assertFalse(node1.isOr());
920:       assertFalse(node1.isAssignAdd());
921:       assertFalse(node1.isNew());
922:       assertFalse(node1.isAdd());
923:       assertFalse(node1.isBreak());
924:       assertFalse(node1.isName());
925:       assertFalse(node1.isThrow());
926:       assertFalse(node1.isComma());
927:       assertFalse(node1.isNull());
928:       assertFalse(node1.isFalse());
929:       assertFalse(node1.isCall());
930:       assertFalse(node1.isString());
931:       assertFalse(node1.isWhile());
932:       assertFalse(node1.isNot());
933:       assertFalse(node1.isAnd());
934:       assertFalse(node1.isDebugger());
935:       assertFalse(node1.isObjectLit());
936:       assertFalse(node1.isGetProp());
937:       assertFalse(node0.equals((Object)node1));
938:       assertFalse(node1.equals((Object)node0));
939:       assertTrue(boolean2 == boolean0);
940:       assertFalse(boolean2 == boolean1);
941:       
942:       String string0 = node0.toString(true, false, false);
943:       assertEquals("PARAM_LIST", string0);
944:       assertEquals(12, Node.COLUMN_BITS);
945:       assertEquals(32, Node.INCRDECR_PROP);
946:       assertEquals(51, Node.STATIC_SOURCE_FILE);
947:       assertEquals(1, Node.DECR_FLAG);
948:       assertEquals(2, Node.POST_FLAG);
949:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(47, Node.IS_DISPATCHER);
953:       assertEquals(30, Node.VAR_ARGS_NAME);
954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
955:       assertEquals(50, Node.FREE_CALL);
956:       assertEquals(40, Node.ORIGINALNAME_PROP);
957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
958:       assertEquals(46, Node.IS_NAMESPACE);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
963:       assertEquals(55, Node.INFERRED_FUNCTION);
964:       assertEquals(39, Node.EMPTY_BLOCK);
965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
967:       assertEquals(57, Node.REFLECTED_OBJECT);
968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
969:       assertEquals(29, Node.JSDOC_INFO_PROP);
970:       assertEquals(53, Node.INPUT_ID);
971:       assertEquals(52, Node.LENGTH);
972:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
973:       assertEquals(36, Node.QUOTED_PROP);
974:       assertEquals(8, Node.FLAG_NO_THROWS);
975:       assertEquals(37, Node.OPT_ARG_NAME);
976:       assertEquals(48, Node.DIRECTIVES);
977:       assertEquals(49, Node.DIRECT_EVAL);
978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
979:       assertEquals(56, Node.CHANGE_TIME);
980:       assertNotNull(string0);
981:       assertNotSame(node0, node1);
982:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
983:       assertEquals(0, vector0.size());
984:       assertEquals(10, vector0.capacity());
985:       assertEquals("[]", vector0.toString());
986:       assertTrue(vector0.isEmpty());
987:       assertFalse(node0.isCase());
988:       assertFalse(node0.isArrayLit());
989:       assertFalse(node0.isHook());
990:       assertFalse(node0.isFor());
991:       assertFalse(node0.isTry());
992:       assertFalse(node0.isSwitch());
993:       assertEquals((-1), node0.getCharno());
994:       assertFalse(node0.isDebugger());
995:       assertFalse(node0.isGetProp());
996:       assertFalse(node0.isString());
997:       assertFalse(node0.isGetterDef());
998:       assertTrue(node0.isParamList());
999:       assertEquals(0, node0.getChildCount());
1000:       assertFalse(node0.isDefaultCase());
1001:       assertFalse(node0.isComma());
1002:       assertFalse(node0.isExprResult());
1003:       assertFalse(node0.isBreak());
1004:       assertFalse(node0.isVar());
1005:       assertFalse(node0.isCall());
1006:       assertFalse(node0.isGetElem());
1007:       assertFalse(node0.isName());
1008:       assertFalse(node0.isNew());
1009:       assertFalse(node0.isDelProp());
1010:       assertFalse(node0.isVoid());
1011:       assertFalse(node0.isNull());
1012:       assertEquals(83, node0.getType());
1013:       assertFalse(node0.isTrue());
1014:       assertFalse(node0.isEmpty());
1015:       assertFalse(node0.isOr());
1016:       assertFalse(node0.isAdd());
1017:       assertFalse(node0.isReturn());
1018:       assertFalse(node0.isAssignAdd());
1019:       assertFalse(node0.isDo());
1020:       assertEquals((-1), node0.getLineno());
1021:       assertFalse(node0.isWhile());
1022:       assertFalse(node0.isTypeOf());
1023:       assertFalse(node0.isDec());
1024:       assertFalse(node0.hasChildren());
1025:       assertFalse(node0.isBlock());
1026:       assertFalse(node0.isLabel());
1027:       assertFalse(node0.isAssign());
1028:       assertFalse(node0.isContinue());
1029:       assertFalse(node0.hasMoreThanOneChild());
1030:       assertFalse(node0.hasOneChild());
1031:       assertFalse(node0.isCast());
1032:       assertFalse(node0.isLabelName());
1033:       assertFalse(node0.isStringKey());
1034:       assertFalse(node0.isScript());
1035:       assertEquals((-1), node0.getSourcePosition());
1036:       assertFalse(node0.isNot());
1037:       assertFalse(node0.isObjectLit());
1038:       assertFalse(node0.isNumber());
1039:       assertFalse(node0.isCatch());
1040:       assertFalse(node0.isInstanceOf());
1041:       assertFalse(node0.isAnd());
1042:       assertFalse(node0.isRegExp());
1043:       assertFalse(node0.isThis());
1044:       assertFalse(node0.isFalse());
1045:       assertFalse(node0.isWith());
1046:       assertFalse(node0.isFunction());
1047:       assertFalse(node0.isThrow());
1048:       assertFalse(node0.isIf());
1049:       assertFalse(node0.isNE());
1050:       assertFalse(node0.isInc());
1051:       assertFalse(node0.isSetterDef());
1052:       assertFalse(node0.isIn());
1053:       assertFalse(node0.equals((Object)node1));
1054:       
1055:       boolean boolean3 = node0.isReturn();
1056:       assertFalse(boolean3);
1057:       assertEquals(12, Node.COLUMN_BITS);
1058:       assertEquals(32, Node.INCRDECR_PROP);
1059:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1060:       assertEquals(1, Node.DECR_FLAG);
1061:       assertEquals(2, Node.POST_FLAG);
1062:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1063:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1064:       assertEquals(57, Node.LAST_PROP);
1065:       assertEquals(47, Node.IS_DISPATCHER);
1066:       assertEquals(30, Node.VAR_ARGS_NAME);
1067:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1068:       assertEquals(50, Node.FREE_CALL);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1071:       assertEquals(46, Node.IS_NAMESPACE);
1072:       assertEquals(54, Node.SLASH_V);
1073:       assertEquals(43, Node.IS_CONSTANT_NAME);
1074:       assertEquals(4095, Node.COLUMN_MASK);
1075:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1076:       assertEquals(55, Node.INFERRED_FUNCTION);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1079:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1080:       assertEquals(57, Node.REFLECTED_OBJECT);
1081:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1082:       assertEquals(29, Node.JSDOC_INFO_PROP);
1083:       assertEquals(53, Node.INPUT_ID);
1084:       assertEquals(52, Node.LENGTH);
1085:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1086:       assertEquals(36, Node.QUOTED_PROP);
1087:       assertEquals(8, Node.FLAG_NO_THROWS);
1088:       assertEquals(37, Node.OPT_ARG_NAME);
1089:       assertEquals(48, Node.DIRECTIVES);
1090:       assertEquals(49, Node.DIRECT_EVAL);
1091:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1092:       assertEquals(56, Node.CHANGE_TIME);
1093:       assertNotSame(node0, node1);
1094:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1095:       assertEquals(0, vector0.size());
1096:       assertEquals(10, vector0.capacity());
1097:       assertEquals("[]", vector0.toString());
1098:       assertTrue(vector0.isEmpty());
1099:       assertFalse(node0.isCase());
1100:       assertFalse(node0.isArrayLit());
1101:       assertFalse(node0.isHook());
1102:       assertFalse(node0.isFor());
1103:       assertFalse(node0.isTry());
1104:       assertFalse(node0.isSwitch());
1105:       assertEquals((-1), node0.getCharno());
1106:       assertFalse(node0.isDebugger());
1107:       assertFalse(node0.isGetProp());
1108:       assertFalse(node0.isString());
1109:       assertFalse(node0.isGetterDef());
1110:       assertTrue(node0.isParamList());
1111:       assertEquals(0, node0.getChildCount());
1112:       assertFalse(node0.isDefaultCase());
1113:       assertFalse(node0.isComma());
1114:       assertFalse(node0.isExprResult());
1115:       assertFalse(node0.isBreak());
1116:       assertFalse(node0.isVar());
1117:       assertFalse(node0.isCall());
1118:       assertFalse(node0.isGetElem());
1119:       assertFalse(node0.isName());
1120:       assertFalse(node0.isNew());
1121:       assertFalse(node0.isDelProp());
1122:       assertFalse(node0.isVoid());
1123:       assertFalse(node0.isNull());
1124:       assertEquals(83, node0.getType());
1125:       assertFalse(node0.isTrue());
1126:       assertFalse(node0.isEmpty());
1127:       assertFalse(node0.isOr());
1128:       assertFalse(node0.isAdd());
1129:       assertFalse(node0.isReturn());
1130:       assertFalse(node0.isAssignAdd());
1131:       assertFalse(node0.isDo());
1132:       assertEquals((-1), node0.getLineno());
1133:       assertFalse(node0.isWhile());
1134:       assertFalse(node0.isTypeOf());
1135:       assertFalse(node0.isDec());
1136:       assertFalse(node0.hasChildren());
1137:       assertFalse(node0.isBlock());
1138:       assertFalse(node0.isLabel());
1139:       assertFalse(node0.isAssign());
1140:       assertFalse(node0.isContinue());
1141:       assertFalse(node0.hasMoreThanOneChild());
1142:       assertFalse(node0.hasOneChild());
1143:       assertFalse(node0.isCast());
1144:       assertFalse(node0.isLabelName());
1145:       assertFalse(node0.isStringKey());
1146:       assertFalse(node0.isScript());
1147:       assertEquals((-1), node0.getSourcePosition());
1148:       assertFalse(node0.isNot());
1149:       assertFalse(node0.isObjectLit());
1150:       assertFalse(node0.isNumber());
1151:       assertFalse(node0.isCatch());
1152:       assertFalse(node0.isInstanceOf());
1153:       assertFalse(node0.isAnd());
1154:       assertFalse(node0.isRegExp());
1155:       assertFalse(node0.isThis());
1156:       assertFalse(node0.isFalse());
1157:       assertFalse(node0.isWith());
1158:       assertFalse(node0.isFunction());
1159:       assertFalse(node0.isThrow());
1160:       assertFalse(node0.isIf());
1161:       assertFalse(node0.isNE());
1162:       assertFalse(node0.isInc());
1163:       assertFalse(node0.isSetterDef());
1164:       assertFalse(node0.isIn());
1165:       assertFalse(node0.equals((Object)node1));
1166:       assertTrue(boolean3 == boolean0);
1167:       assertTrue(boolean3 == boolean2);
1168:       assertFalse(boolean3 == boolean1);
1169:       
1170:       boolean boolean4 = node0.isDo();
1171:       assertFalse(boolean4);
1172:       assertEquals(12, Node.COLUMN_BITS);
1173:       assertEquals(32, Node.INCRDECR_PROP);
1174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(2, Node.POST_FLAG);
1177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1178:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(47, Node.IS_DISPATCHER);
1181:       assertEquals(30, Node.VAR_ARGS_NAME);
1182:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1183:       assertEquals(50, Node.FREE_CALL);
1184:       assertEquals(40, Node.ORIGINALNAME_PROP);
1185:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1186:       assertEquals(46, Node.IS_NAMESPACE);
1187:       assertEquals(54, Node.SLASH_V);
1188:       assertEquals(43, Node.IS_CONSTANT_NAME);
1189:       assertEquals(4095, Node.COLUMN_MASK);
1190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1191:       assertEquals(55, Node.INFERRED_FUNCTION);
1192:       assertEquals(39, Node.EMPTY_BLOCK);
1193:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1195:       assertEquals(57, Node.REFLECTED_OBJECT);
1196:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1197:       assertEquals(29, Node.JSDOC_INFO_PROP);
1198:       assertEquals(53, Node.INPUT_ID);
1199:       assertEquals(52, Node.LENGTH);
1200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1201:       assertEquals(36, Node.QUOTED_PROP);
1202:       assertEquals(8, Node.FLAG_NO_THROWS);
1203:       assertEquals(37, Node.OPT_ARG_NAME);
1204:       assertEquals(48, Node.DIRECTIVES);
1205:       assertEquals(49, Node.DIRECT_EVAL);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(56, Node.CHANGE_TIME);
1208:       assertNotSame(node0, node1);
1209:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1210:       assertEquals(0, vector0.size());
1211:       assertEquals(10, vector0.capacity());
1212:       assertEquals("[]", vector0.toString());
1213:       assertTrue(vector0.isEmpty());
1214:       assertFalse(node0.isCase());
1215:       assertFalse(node0.isArrayLit());
1216:       assertFalse(node0.isHook());
1217:       assertFalse(node0.isFor());
1218:       assertFalse(node0.isTry());
1219:       assertFalse(node0.isSwitch());
1220:       assertEquals((-1), node0.getCharno());
1221:       assertFalse(node0.isDebugger());
1222:       assertFalse(node0.isGetProp());
1223:       assertFalse(node0.isString());
1224:       assertFalse(node0.isGetterDef());
1225:       assertTrue(node0.isParamList());
1226:       assertEquals(0, node0.getChildCount());
1227:       assertFalse(node0.isDefaultCase());
1228:       assertFalse(node0.isComma());
1229:       assertFalse(node0.isExprResult());
1230:       assertFalse(node0.isBreak());
1231:       assertFalse(node0.isVar());
1232:       assertFalse(node0.isCall());
1233:       assertFalse(node0.isGetElem());
1234:       assertFalse(node0.isName());
1235:       assertFalse(node0.isNew());
1236:       assertFalse(node0.isDelProp());
1237:       assertFalse(node0.isVoid());
1238:       assertFalse(node0.isNull());
1239:       assertEquals(83, node0.getType());
1240:       assertFalse(node0.isTrue());
1241:       assertFalse(node0.isEmpty());
1242:       assertFalse(node0.isOr());
1243:       assertFalse(node0.isAdd());
1244:       assertFalse(node0.isReturn());
1245:       assertFalse(node0.isAssignAdd());
1246:       assertFalse(node0.isDo());
1247:       assertEquals((-1), node0.getLineno());
1248:       assertFalse(node0.isWhile());
1249:       assertFalse(node0.isTypeOf());
1250:       assertFalse(node0.isDec());
1251:       assertFalse(node0.hasChildren());
1252:       assertFalse(node0.isBlock());
1253:       assertFalse(node0.isLabel());
1254:       assertFalse(node0.isAssign());
1255:       assertFalse(node0.isContinue());
1256:       assertFalse(node0.hasMoreThanOneChild());
1257:       assertFalse(node0.hasOneChild());
1258:       assertFalse(node0.isCast());
1259:       assertFalse(node0.isLabelName());
1260:       assertFalse(node0.isStringKey());
1261:       assertFalse(node0.isScript());
1262:       assertEquals((-1), node0.getSourcePosition());
1263:       assertFalse(node0.isNot());
1264:       assertFalse(node0.isObjectLit());
1265:       assertFalse(node0.isNumber());
1266:       assertFalse(node0.isCatch());
1267:       assertFalse(node0.isInstanceOf());
1268:       assertFalse(node0.isAnd());
1269:       assertFalse(node0.isRegExp());
1270:       assertFalse(node0.isThis());
1271:       assertFalse(node0.isFalse());
1272:       assertFalse(node0.isWith());
1273:       assertFalse(node0.isFunction());
1274:       assertFalse(node0.isThrow());
1275:       assertFalse(node0.isIf());
1276:       assertFalse(node0.isNE());
1277:       assertFalse(node0.isInc());
1278:       assertFalse(node0.isSetterDef());
1279:       assertFalse(node0.isIn());
1280:       assertTrue(boolean4 == boolean0);
1281:       assertFalse(boolean4 == boolean1);
1282:       assertTrue(boolean4 == boolean2);
1283:       assertTrue(boolean4 == boolean3);
1284:       assertFalse(node0.equals((Object)node1));
1285:   }
1286: }
RegularFileObject[/tmp/EvoSuite_248_1628159656865/com/google/javascript/rhino/Node_248_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:34:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_248_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_248_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_248_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:34:17.206 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

boolean boolean0 = node_SideEffectFlags1.areAllFlagsSet();
assertFalse(boolean0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

Iterable<Node> iterable0 = node0.children();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(iterable0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.mayMutateArguments();
assertTrue(boolean1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(boolean1 == boolean0);

InputId inputId0 = node0.getInputId();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNull(inputId0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

node0.removeProp((-1129));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());

Node node1 = new Node(31, 51, 147);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node1);
assertFalse(node1.isIf());
assertEquals(147, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertEquals(51, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(31, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(209043, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node0.isEquivalentTo(node1, true, false, false);
assertFalse(boolean2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isIf());
assertEquals(147, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertEquals(51, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(31, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(209043, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);

String string0 = node0.toString(true, false, false);
assertEquals("PARAM_LIST", string0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(string0);
assertNotSame(node0, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));

boolean boolean3 = node0.isReturn();
assertFalse(boolean3);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);

boolean boolean4 = node0.isDo();
assertFalse(boolean4);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node0, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(node0.equals((Object)node1));


[MASTER] 10:34:18.767 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_256_1628159658630/com/google/javascript/rhino/Node_256_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_256_1628159658630/com/google/javascript/rhino/Node_256_tmp__ESTest_scaffolding.java]]
[MASTER] 10:34:18.767 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:18.767 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:18.767 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 440
[MASTER] 10:34:18.768 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_256_1628159658630/com/google/javascript/rhino/Node_256_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:34:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_256_tmp__ESTest extends Node_256_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(199.2059217532582);
21:       assertEquals(29, Node.JSDOC_INFO_PROP);
22:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
23:       assertEquals(47, Node.IS_DISPATCHER);
24:       assertEquals(37, Node.OPT_ARG_NAME);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
28:       assertEquals(1, Node.DECR_FLAG);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(50, Node.FREE_CALL);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(48, Node.DIRECTIVES);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(40, Node.ORIGINALNAME_PROP);
42:       assertEquals(4095, Node.COLUMN_MASK);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(49, Node.DIRECT_EVAL);
45:       assertEquals(15, Node.NO_SIDE_EFFECTS);
46:       assertEquals(36, Node.QUOTED_PROP);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(53, Node.INPUT_ID);
50:       assertEquals(57, Node.REFLECTED_OBJECT);
51:       assertEquals(8, Node.FLAG_NO_THROWS);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(55, Node.INFERRED_FUNCTION);
54:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
55:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
56:       assertEquals(52, Node.LENGTH);
57:       assertNotNull(node0);
58:       assertFalse(node0.isIf());
59:       assertFalse(node0.isNE());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isString());
67:       assertFalse(node0.isCatch());
68:       assertEquals((-1), node0.getCharno());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isRegExp());
71:       assertTrue(node0.isNumber());
72:       assertFalse(node0.isHook());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isTry());
75:       assertFalse(node0.isThrow());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isFalse());
78:       assertFalse(node0.isInstanceOf());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isIn());
83:       assertFalse(node0.isInc());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isGetElem());
87:       assertEquals((-1), node0.getSourcePosition());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.isDec());
90:       assertFalse(node0.isOr());
91:       assertFalse(node0.isAssign());
92:       assertEquals((-1), node0.getLineno());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.isExprResult());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isWith());
97:       assertFalse(node0.isWhile());
98:       assertEquals(39, node0.getType());
99:       assertFalse(node0.isScript());
100:       assertFalse(node0.hasMoreThanOneChild());
101:       assertFalse(node0.isObjectLit());
102:       assertFalse(node0.isNot());
103:       assertFalse(node0.isReturn());
104:       assertFalse(node0.isBlock());
105:       assertFalse(node0.isGetProp());
106:       assertFalse(node0.hasOneChild());
107:       assertFalse(node0.isBreak());
108:       assertFalse(node0.isStringKey());
109:       assertFalse(node0.isNull());
110:       assertFalse(node0.isComma());
111:       assertFalse(node0.isParamList());
112:       assertFalse(node0.isCall());
113:       assertFalse(node0.isSwitch());
114:       assertFalse(node0.isName());
115:       assertFalse(node0.isDefaultCase());
116:       assertFalse(node0.isTrue());
117:       assertEquals(0, node0.getChildCount());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.isAssignAdd());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isAdd());
122:       assertFalse(node0.isNew());
123:       assertFalse(node0.isDo());
124:       
125:       String string0 = node0.toString();
126:       assertEquals("NUMBER 199.2059217532582", string0);
127:       assertEquals(29, Node.JSDOC_INFO_PROP);
128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
129:       assertEquals(47, Node.IS_DISPATCHER);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(56, Node.CHANGE_TIME);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
134:       assertEquals(1, Node.DECR_FLAG);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(46, Node.IS_NAMESPACE);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
143:       assertEquals(50, Node.FREE_CALL);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(48, Node.DIRECTIVES);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(40, Node.ORIGINALNAME_PROP);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(30, Node.VAR_ARGS_NAME);
150:       assertEquals(49, Node.DIRECT_EVAL);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(53, Node.INPUT_ID);
156:       assertEquals(57, Node.REFLECTED_OBJECT);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
162:       assertEquals(52, Node.LENGTH);
163:       assertNotNull(string0);
164:       assertFalse(node0.isIf());
165:       assertFalse(node0.isNE());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isFor());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isDelProp());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isString());
173:       assertFalse(node0.isCatch());
174:       assertEquals((-1), node0.getCharno());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isRegExp());
177:       assertTrue(node0.isNumber());
178:       assertFalse(node0.isHook());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isTry());
181:       assertFalse(node0.isThrow());
182:       assertFalse(node0.isThis());
183:       assertFalse(node0.isFalse());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isAnd());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isContinue());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isInc());
190:       assertFalse(node0.isSetterDef());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isGetElem());
193:       assertEquals((-1), node0.getSourcePosition());
194:       assertFalse(node0.isTypeOf());
195:       assertFalse(node0.isDec());
196:       assertFalse(node0.isOr());
197:       assertFalse(node0.isAssign());
198:       assertEquals((-1), node0.getLineno());
199:       assertFalse(node0.isCast());
200:       assertFalse(node0.isExprResult());
201:       assertFalse(node0.isLabelName());
202:       assertFalse(node0.isWith());
203:       assertFalse(node0.isWhile());
204:       assertEquals(39, node0.getType());
205:       assertFalse(node0.isScript());
206:       assertFalse(node0.hasMoreThanOneChild());
207:       assertFalse(node0.isObjectLit());
208:       assertFalse(node0.isNot());
209:       assertFalse(node0.isReturn());
210:       assertFalse(node0.isBlock());
211:       assertFalse(node0.isGetProp());
212:       assertFalse(node0.hasOneChild());
213:       assertFalse(node0.isBreak());
214:       assertFalse(node0.isStringKey());
215:       assertFalse(node0.isNull());
216:       assertFalse(node0.isComma());
217:       assertFalse(node0.isParamList());
218:       assertFalse(node0.isCall());
219:       assertFalse(node0.isSwitch());
220:       assertFalse(node0.isName());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isTrue());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isLabel());
225:       assertFalse(node0.isAssignAdd());
226:       assertFalse(node0.isVar());
227:       assertFalse(node0.isAdd());
228:       assertFalse(node0.isNew());
229:       assertFalse(node0.isDo());
230:       
231:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
232:       assertEquals(29, Node.JSDOC_INFO_PROP);
233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
234:       assertEquals(47, Node.IS_DISPATCHER);
235:       assertEquals(37, Node.OPT_ARG_NAME);
236:       assertEquals(56, Node.CHANGE_TIME);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
239:       assertEquals(1, Node.DECR_FLAG);
240:       assertEquals(12, Node.COLUMN_BITS);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(43, Node.IS_CONSTANT_NAME);
243:       assertEquals(32, Node.INCRDECR_PROP);
244:       assertEquals(46, Node.IS_NAMESPACE);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
248:       assertEquals(50, Node.FREE_CALL);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(48, Node.DIRECTIVES);
251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(4095, Node.COLUMN_MASK);
254:       assertEquals(30, Node.VAR_ARGS_NAME);
255:       assertEquals(49, Node.DIRECT_EVAL);
256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
257:       assertEquals(36, Node.QUOTED_PROP);
258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(57, Node.REFLECTED_OBJECT);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(55, Node.INFERRED_FUNCTION);
265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(52, Node.LENGTH);
268:       assertNotNull(node_FileLevelJsDocBuilder0);
269:       assertFalse(node0.isIf());
270:       assertFalse(node0.isNE());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isFor());
273:       assertFalse(node0.isGetterDef());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isDelProp());
276:       assertFalse(node0.isVoid());
277:       assertFalse(node0.isString());
278:       assertFalse(node0.isCatch());
279:       assertEquals((-1), node0.getCharno());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isRegExp());
282:       assertTrue(node0.isNumber());
283:       assertFalse(node0.isHook());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isTry());
286:       assertFalse(node0.isThrow());
287:       assertFalse(node0.isThis());
288:       assertFalse(node0.isFalse());
289:       assertFalse(node0.isInstanceOf());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isFunction());
292:       assertFalse(node0.isContinue());
293:       assertFalse(node0.isIn());
294:       assertFalse(node0.isInc());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.hasChildren());
297:       assertFalse(node0.isGetElem());
298:       assertEquals((-1), node0.getSourcePosition());
299:       assertFalse(node0.isTypeOf());
300:       assertFalse(node0.isDec());
301:       assertFalse(node0.isOr());
302:       assertFalse(node0.isAssign());
303:       assertEquals((-1), node0.getLineno());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.isExprResult());
306:       assertFalse(node0.isLabelName());
307:       assertFalse(node0.isWith());
308:       assertFalse(node0.isWhile());
309:       assertEquals(39, node0.getType());
310:       assertFalse(node0.isScript());
311:       assertFalse(node0.hasMoreThanOneChild());
312:       assertFalse(node0.isObjectLit());
313:       assertFalse(node0.isNot());
314:       assertFalse(node0.isReturn());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.isGetProp());
317:       assertFalse(node0.hasOneChild());
318:       assertFalse(node0.isBreak());
319:       assertFalse(node0.isStringKey());
320:       assertFalse(node0.isNull());
321:       assertFalse(node0.isComma());
322:       assertFalse(node0.isParamList());
323:       assertFalse(node0.isCall());
324:       assertFalse(node0.isSwitch());
325:       assertFalse(node0.isName());
326:       assertFalse(node0.isDefaultCase());
327:       assertFalse(node0.isTrue());
328:       assertEquals(0, node0.getChildCount());
329:       assertFalse(node0.isLabel());
330:       assertFalse(node0.isAssignAdd());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isAdd());
333:       assertFalse(node0.isNew());
334:       assertFalse(node0.isDo());
335:       
336:       Iterable<Node> iterable0 = node0.children();
337:       assertEquals(29, Node.JSDOC_INFO_PROP);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       assertEquals(37, Node.OPT_ARG_NAME);
341:       assertEquals(56, Node.CHANGE_TIME);
342:       assertEquals(2, Node.POST_FLAG);
343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(12, Node.COLUMN_BITS);
346:       assertEquals(54, Node.SLASH_V);
347:       assertEquals(43, Node.IS_CONSTANT_NAME);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(46, Node.IS_NAMESPACE);
350:       assertEquals(51, Node.STATIC_SOURCE_FILE);
351:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(50, Node.FREE_CALL);
354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
355:       assertEquals(48, Node.DIRECTIVES);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(30, Node.VAR_ARGS_NAME);
360:       assertEquals(49, Node.DIRECT_EVAL);
361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
362:       assertEquals(36, Node.QUOTED_PROP);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(57, Node.REFLECTED_OBJECT);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(39, Node.EMPTY_BLOCK);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
371:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
372:       assertEquals(52, Node.LENGTH);
373:       assertNotNull(iterable0);
374:       assertFalse(node0.isIf());
375:       assertFalse(node0.isNE());
376:       assertFalse(node0.isEmpty());
377:       assertFalse(node0.isFor());
378:       assertFalse(node0.isGetterDef());
379:       assertFalse(node0.isArrayLit());
380:       assertFalse(node0.isDelProp());
381:       assertFalse(node0.isVoid());
382:       assertFalse(node0.isString());
383:       assertFalse(node0.isCatch());
384:       assertEquals((-1), node0.getCharno());
385:       assertFalse(node0.isDebugger());
386:       assertFalse(node0.isRegExp());
387:       assertTrue(node0.isNumber());
388:       assertFalse(node0.isHook());
389:       assertFalse(node0.isCase());
390:       assertFalse(node0.isTry());
391:       assertFalse(node0.isThrow());
392:       assertFalse(node0.isThis());
393:       assertFalse(node0.isFalse());
394:       assertFalse(node0.isInstanceOf());
395:       assertFalse(node0.isAnd());
396:       assertFalse(node0.isFunction());
397:       assertFalse(node0.isContinue());
398:       assertFalse(node0.isIn());
399:       assertFalse(node0.isInc());
400:       assertFalse(node0.isSetterDef());
401:       assertFalse(node0.hasChildren());
402:       assertFalse(node0.isGetElem());
403:       assertEquals((-1), node0.getSourcePosition());
404:       assertFalse(node0.isTypeOf());
405:       assertFalse(node0.isDec());
406:       assertFalse(node0.isOr());
407:       assertFalse(node0.isAssign());
408:       assertEquals((-1), node0.getLineno());
409:       assertFalse(node0.isCast());
410:       assertFalse(node0.isExprResult());
411:       assertFalse(node0.isLabelName());
412:       assertFalse(node0.isWith());
413:       assertFalse(node0.isWhile());
414:       assertEquals(39, node0.getType());
415:       assertFalse(node0.isScript());
416:       assertFalse(node0.hasMoreThanOneChild());
417:       assertFalse(node0.isObjectLit());
418:       assertFalse(node0.isNot());
419:       assertFalse(node0.isReturn());
420:       assertFalse(node0.isBlock());
421:       assertFalse(node0.isGetProp());
422:       assertFalse(node0.hasOneChild());
423:       assertFalse(node0.isBreak());
424:       assertFalse(node0.isStringKey());
425:       assertFalse(node0.isNull());
426:       assertFalse(node0.isComma());
427:       assertFalse(node0.isParamList());
428:       assertFalse(node0.isCall());
429:       assertFalse(node0.isSwitch());
430:       assertFalse(node0.isName());
431:       assertFalse(node0.isDefaultCase());
432:       assertFalse(node0.isTrue());
433:       assertEquals(0, node0.getChildCount());
434:       assertFalse(node0.isLabel());
435:       assertFalse(node0.isAssignAdd());
436:       assertFalse(node0.isVar());
437:       assertFalse(node0.isAdd());
438:       assertFalse(node0.isNew());
439:       assertFalse(node0.isDo());
440:       assertFalse(iterable0.contains(node0));
441:       
442:       boolean boolean0 = node0.isBreak();
443:       assertFalse(boolean0);
444:       assertEquals(29, Node.JSDOC_INFO_PROP);
445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
446:       assertEquals(47, Node.IS_DISPATCHER);
447:       assertEquals(37, Node.OPT_ARG_NAME);
448:       assertEquals(56, Node.CHANGE_TIME);
449:       assertEquals(2, Node.POST_FLAG);
450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
451:       assertEquals(1, Node.DECR_FLAG);
452:       assertEquals(12, Node.COLUMN_BITS);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(32, Node.INCRDECR_PROP);
456:       assertEquals(46, Node.IS_NAMESPACE);
457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
458:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(50, Node.FREE_CALL);
461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
462:       assertEquals(48, Node.DIRECTIVES);
463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
464:       assertEquals(40, Node.ORIGINALNAME_PROP);
465:       assertEquals(4095, Node.COLUMN_MASK);
466:       assertEquals(30, Node.VAR_ARGS_NAME);
467:       assertEquals(49, Node.DIRECT_EVAL);
468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(39, Node.EMPTY_BLOCK);
476:       assertEquals(55, Node.INFERRED_FUNCTION);
477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
478:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
479:       assertEquals(52, Node.LENGTH);
480:       assertFalse(node0.isIf());
481:       assertFalse(node0.isNE());
482:       assertFalse(node0.isEmpty());
483:       assertFalse(node0.isFor());
484:       assertFalse(node0.isGetterDef());
485:       assertFalse(node0.isArrayLit());
486:       assertFalse(node0.isDelProp());
487:       assertFalse(node0.isVoid());
488:       assertFalse(node0.isString());
489:       assertFalse(node0.isCatch());
490:       assertEquals((-1), node0.getCharno());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isRegExp());
493:       assertTrue(node0.isNumber());
494:       assertFalse(node0.isHook());
495:       assertFalse(node0.isCase());
496:       assertFalse(node0.isTry());
497:       assertFalse(node0.isThrow());
498:       assertFalse(node0.isThis());
499:       assertFalse(node0.isFalse());
500:       assertFalse(node0.isInstanceOf());
501:       assertFalse(node0.isAnd());
502:       assertFalse(node0.isFunction());
503:       assertFalse(node0.isContinue());
504:       assertFalse(node0.isIn());
505:       assertFalse(node0.isInc());
506:       assertFalse(node0.isSetterDef());
507:       assertFalse(node0.hasChildren());
508:       assertFalse(node0.isGetElem());
509:       assertEquals((-1), node0.getSourcePosition());
510:       assertFalse(node0.isTypeOf());
511:       assertFalse(node0.isDec());
512:       assertFalse(node0.isOr());
513:       assertFalse(node0.isAssign());
514:       assertEquals((-1), node0.getLineno());
515:       assertFalse(node0.isCast());
516:       assertFalse(node0.isExprResult());
517:       assertFalse(node0.isLabelName());
518:       assertFalse(node0.isWith());
519:       assertFalse(node0.isWhile());
520:       assertEquals(39, node0.getType());
521:       assertFalse(node0.isScript());
522:       assertFalse(node0.hasMoreThanOneChild());
523:       assertFalse(node0.isObjectLit());
524:       assertFalse(node0.isNot());
525:       assertFalse(node0.isReturn());
526:       assertFalse(node0.isBlock());
527:       assertFalse(node0.isGetProp());
528:       assertFalse(node0.hasOneChild());
529:       assertFalse(node0.isBreak());
530:       assertFalse(node0.isStringKey());
531:       assertFalse(node0.isNull());
532:       assertFalse(node0.isComma());
533:       assertFalse(node0.isParamList());
534:       assertFalse(node0.isCall());
535:       assertFalse(node0.isSwitch());
536:       assertFalse(node0.isName());
537:       assertFalse(node0.isDefaultCase());
538:       assertFalse(node0.isTrue());
539:       assertEquals(0, node0.getChildCount());
540:       assertFalse(node0.isLabel());
541:       assertFalse(node0.isAssignAdd());
542:       assertFalse(node0.isVar());
543:       assertFalse(node0.isAdd());
544:       assertFalse(node0.isNew());
545:       assertFalse(node0.isDo());
546:       
547:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
548:       assertEquals(29, Node.JSDOC_INFO_PROP);
549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
550:       assertEquals(47, Node.IS_DISPATCHER);
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(12, Node.COLUMN_BITS);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(43, Node.IS_CONSTANT_NAME);
559:       assertEquals(32, Node.INCRDECR_PROP);
560:       assertEquals(46, Node.IS_NAMESPACE);
561:       assertEquals(51, Node.STATIC_SOURCE_FILE);
562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
563:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
564:       assertEquals(50, Node.FREE_CALL);
565:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
566:       assertEquals(48, Node.DIRECTIVES);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(40, Node.ORIGINALNAME_PROP);
569:       assertEquals(4095, Node.COLUMN_MASK);
570:       assertEquals(30, Node.VAR_ARGS_NAME);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
573:       assertEquals(36, Node.QUOTED_PROP);
574:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(8, Node.FLAG_NO_THROWS);
579:       assertEquals(39, Node.EMPTY_BLOCK);
580:       assertEquals(55, Node.INFERRED_FUNCTION);
581:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
582:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
583:       assertEquals(52, Node.LENGTH);
584:       assertNotNull(node_NodeMismatch0);
585:       assertFalse(node0.isIf());
586:       assertFalse(node0.isNE());
587:       assertFalse(node0.isEmpty());
588:       assertFalse(node0.isFor());
589:       assertFalse(node0.isGetterDef());
590:       assertFalse(node0.isArrayLit());
591:       assertFalse(node0.isDelProp());
592:       assertFalse(node0.isVoid());
593:       assertFalse(node0.isString());
594:       assertFalse(node0.isCatch());
595:       assertEquals((-1), node0.getCharno());
596:       assertFalse(node0.isDebugger());
597:       assertFalse(node0.isRegExp());
598:       assertTrue(node0.isNumber());
599:       assertFalse(node0.isHook());
600:       assertFalse(node0.isCase());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.isThrow());
603:       assertFalse(node0.isThis());
604:       assertFalse(node0.isFalse());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.isAnd());
607:       assertFalse(node0.isFunction());
608:       assertFalse(node0.isContinue());
609:       assertFalse(node0.isIn());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isSetterDef());
612:       assertFalse(node0.hasChildren());
613:       assertFalse(node0.isGetElem());
614:       assertEquals((-1), node0.getSourcePosition());
615:       assertFalse(node0.isTypeOf());
616:       assertFalse(node0.isDec());
617:       assertFalse(node0.isOr());
618:       assertFalse(node0.isAssign());
619:       assertEquals((-1), node0.getLineno());
620:       assertFalse(node0.isCast());
621:       assertFalse(node0.isExprResult());
622:       assertFalse(node0.isLabelName());
623:       assertFalse(node0.isWith());
624:       assertFalse(node0.isWhile());
625:       assertEquals(39, node0.getType());
626:       assertFalse(node0.isScript());
627:       assertFalse(node0.hasMoreThanOneChild());
628:       assertFalse(node0.isObjectLit());
629:       assertFalse(node0.isNot());
630:       assertFalse(node0.isReturn());
631:       assertFalse(node0.isBlock());
632:       assertFalse(node0.isGetProp());
633:       assertFalse(node0.hasOneChild());
634:       assertFalse(node0.isBreak());
635:       assertFalse(node0.isStringKey());
636:       assertFalse(node0.isNull());
637:       assertFalse(node0.isComma());
638:       assertFalse(node0.isParamList());
639:       assertFalse(node0.isCall());
640:       assertFalse(node0.isSwitch());
641:       assertFalse(node0.isName());
642:       assertFalse(node0.isDefaultCase());
643:       assertFalse(node0.isTrue());
644:       assertEquals(0, node0.getChildCount());
645:       assertFalse(node0.isLabel());
646:       assertFalse(node0.isAssignAdd());
647:       assertFalse(node0.isVar());
648:       assertFalse(node0.isAdd());
649:       assertFalse(node0.isNew());
650:       assertFalse(node0.isDo());
651:       
652:       Node node1 = new Node(30, (-3923), 1186);
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(43, Node.IS_CONSTANT_NAME);
658:       assertEquals(36, Node.QUOTED_PROP);
659:       assertEquals(8, Node.FLAG_NO_THROWS);
660:       assertEquals(48, Node.DIRECTIVES);
661:       assertEquals(50, Node.FREE_CALL);
662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(52, Node.LENGTH);
665:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
666:       assertEquals(40, Node.ORIGINALNAME_PROP);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(53, Node.INPUT_ID);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(47, Node.IS_DISPATCHER);
671:       assertEquals(57, Node.LAST_PROP);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(2, Node.POST_FLAG);
674:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
675:       assertEquals(51, Node.STATIC_SOURCE_FILE);
676:       assertEquals(32, Node.INCRDECR_PROP);
677:       assertEquals(1, Node.DECR_FLAG);
678:       assertEquals(37, Node.OPT_ARG_NAME);
679:       assertEquals(56, Node.CHANGE_TIME);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(46, Node.IS_NAMESPACE);
682:       assertEquals(54, Node.SLASH_V);
683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
684:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertNotNull(node1);
690:       assertFalse(node1.isInstanceOf());
691:       assertFalse(node1.isAnd());
692:       assertFalse(node1.isScript());
693:       assertFalse(node1.isGetProp());
694:       assertFalse(node1.isObjectLit());
695:       assertFalse(node1.isNot());
696:       assertEquals(30, node1.getType());
697:       assertTrue(node1.isNew());
698:       assertFalse(node1.isThrow());
699:       assertFalse(node1.isLabelName());
700:       assertFalse(node1.isSwitch());
701:       assertFalse(node1.isFalse());
702:       assertFalse(node1.isCast());
703:       assertFalse(node1.isReturn());
704:       assertFalse(node1.isLabel());
705:       assertFalse(node1.isDo());
706:       assertFalse(node1.isWhile());
707:       assertFalse(node1.isAssignAdd());
708:       assertEquals((-1), node1.getSourcePosition());
709:       assertFalse(node1.isEmpty());
710:       assertFalse(node1.isOr());
711:       assertFalse(node1.isAdd());
712:       assertFalse(node1.isString());
713:       assertFalse(node1.isName());
714:       assertFalse(node1.isVoid());
715:       assertFalse(node1.isDec());
716:       assertFalse(node1.isDelProp());
717:       assertFalse(node1.isTypeOf());
718:       assertFalse(node1.isComma());
719:       assertFalse(node1.isBreak());
720:       assertFalse(node1.hasChildren());
721:       assertFalse(node1.isGetElem());
722:       assertFalse(node1.isExprResult());
723:       assertFalse(node1.isCall());
724:       assertFalse(node1.isAssign());
725:       assertEquals(0, node1.getChildCount());
726:       assertFalse(node1.isParamList());
727:       assertFalse(node1.isDefaultCase());
728:       assertFalse(node1.isNull());
729:       assertFalse(node1.isSetterDef());
730:       assertFalse(node1.isTrue());
731:       assertFalse(node1.isDebugger());
732:       assertFalse(node1.isVar());
733:       assertFalse(node1.isArrayLit());
734:       assertFalse(node1.isStringKey());
735:       assertFalse(node1.isFunction());
736:       assertFalse(node1.isContinue());
737:       assertEquals((-1), node1.getLineno());
738:       assertFalse(node1.isNumber());
739:       assertFalse(node1.isNE());
740:       assertFalse(node1.isGetterDef());
741:       assertFalse(node1.isInc());
742:       assertFalse(node1.isCase());
743:       assertEquals((-1), node1.getCharno());
744:       assertFalse(node1.isIn());
745:       assertFalse(node1.isHook());
746:       assertFalse(node1.hasOneChild());
747:       assertFalse(node1.isBlock());
748:       assertFalse(node1.isFor());
749:       assertFalse(node1.isTry());
750:       assertFalse(node1.isIf());
751:       assertFalse(node1.isRegExp());
752:       assertFalse(node1.isThis());
753:       assertFalse(node1.isWith());
754:       assertFalse(node1.isCatch());
755:       assertFalse(node1.hasMoreThanOneChild());
756:       assertFalse(node1.equals((Object)node0));
757:       
758:       Node node2 = Node.newNumber((-3729.022741313));
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(43, Node.IS_CONSTANT_NAME);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       assertEquals(53, Node.INPUT_ID);
763:       assertEquals(39, Node.EMPTY_BLOCK);
764:       assertEquals(36, Node.QUOTED_PROP);
765:       assertEquals(55, Node.INFERRED_FUNCTION);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
768:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(57, Node.REFLECTED_OBJECT);
771:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
772:       assertEquals(48, Node.DIRECTIVES);
773:       assertEquals(37, Node.OPT_ARG_NAME);
774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
775:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
776:       assertEquals(4095, Node.COLUMN_MASK);
777:       assertEquals(1, Node.DECR_FLAG);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(49, Node.DIRECT_EVAL);
780:       assertEquals(12, Node.COLUMN_BITS);
781:       assertEquals(32, Node.INCRDECR_PROP);
782:       assertEquals(46, Node.IS_NAMESPACE);
783:       assertEquals(57, Node.LAST_PROP);
784:       assertEquals(54, Node.SLASH_V);
785:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
787:       assertEquals(15, Node.NO_SIDE_EFFECTS);
788:       assertEquals(52, Node.LENGTH);
789:       assertEquals(29, Node.JSDOC_INFO_PROP);
790:       assertEquals(50, Node.FREE_CALL);
791:       assertEquals(40, Node.ORIGINALNAME_PROP);
792:       assertEquals(47, Node.IS_DISPATCHER);
793:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
794:       assertEquals(2, Node.POST_FLAG);
795:       assertNotNull(node2);
796:       assertNotSame(node2, node0);
797:       assertFalse(node2.isCatch());
798:       assertFalse(node2.isFunction());
799:       assertFalse(node2.isRegExp());
800:       assertEquals(0, node2.getChildCount());
801:       assertFalse(node2.isSetterDef());
802:       assertFalse(node2.isDefaultCase());
803:       assertFalse(node2.isTry());
804:       assertFalse(node2.isName());
805:       assertFalse(node2.isCall());
806:       assertFalse(node2.isEmpty());
807:       assertFalse(node2.isFor());
808:       assertFalse(node2.isNull());
809:       assertFalse(node2.isTrue());
810:       assertFalse(node2.isNE());
811:       assertFalse(node2.isIf());
812:       assertFalse(node2.isDelProp());
813:       assertFalse(node2.isVoid());
814:       assertFalse(node2.isContinue());
815:       assertFalse(node2.isString());
816:       assertFalse(node2.isWhile());
817:       assertFalse(node2.isIn());
818:       assertFalse(node2.isInc());
819:       assertFalse(node2.isReturn());
820:       assertTrue(node2.isNumber());
821:       assertFalse(node2.isFalse());
822:       assertFalse(node2.isThrow());
823:       assertFalse(node2.isCast());
824:       assertEquals((-1), node2.getSourcePosition());
825:       assertFalse(node2.isDebugger());
826:       assertFalse(node2.isAnd());
827:       assertFalse(node2.isInstanceOf());
828:       assertFalse(node2.isWith());
829:       assertFalse(node2.isObjectLit());
830:       assertFalse(node2.isNot());
831:       assertFalse(node2.isGetProp());
832:       assertFalse(node2.isThis());
833:       assertFalse(node2.isScript());
834:       assertFalse(node2.hasOneChild());
835:       assertFalse(node2.isGetElem());
836:       assertFalse(node2.isHook());
837:       assertFalse(node2.isTypeOf());
838:       assertFalse(node2.isDec());
839:       assertFalse(node2.hasChildren());
840:       assertFalse(node2.isComma());
841:       assertFalse(node2.isAssign());
842:       assertFalse(node2.isExprResult());
843:       assertFalse(node2.isBreak());
844:       assertEquals((-1), node2.getLineno());
845:       assertFalse(node2.isCase());
846:       assertEquals(39, node2.getType());
847:       assertFalse(node2.hasMoreThanOneChild());
848:       assertFalse(node2.isOr());
849:       assertFalse(node2.isBlock());
850:       assertFalse(node2.isNew());
851:       assertFalse(node2.isLabel());
852:       assertFalse(node2.isAssignAdd());
853:       assertFalse(node2.isAdd());
854:       assertFalse(node2.isDo());
855:       assertFalse(node2.isStringKey());
856:       assertFalse(node2.isVar());
857:       assertFalse(node2.isGetterDef());
858:       assertEquals((-1), node2.getCharno());
859:       assertFalse(node2.isParamList());
860:       assertFalse(node2.isSwitch());
861:       assertFalse(node2.isArrayLit());
862:       assertFalse(node2.isLabelName());
863:       assertFalse(node2.equals((Object)node0));
864:       assertFalse(node2.equals((Object)node1));
865:       
866:       boolean boolean1 = node0.isEquivalentTo(node0);
867:       assertTrue(boolean1);
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(37, Node.OPT_ARG_NAME);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(2, Node.POST_FLAG);
874:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
875:       assertEquals(1, Node.DECR_FLAG);
876:       assertEquals(12, Node.COLUMN_BITS);
877:       assertEquals(54, Node.SLASH_V);
878:       assertEquals(43, Node.IS_CONSTANT_NAME);
879:       assertEquals(32, Node.INCRDECR_PROP);
880:       assertEquals(46, Node.IS_NAMESPACE);
881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
882:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
884:       assertEquals(50, Node.FREE_CALL);
885:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
886:       assertEquals(48, Node.DIRECTIVES);
887:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
888:       assertEquals(40, Node.ORIGINALNAME_PROP);
889:       assertEquals(4095, Node.COLUMN_MASK);
890:       assertEquals(30, Node.VAR_ARGS_NAME);
891:       assertEquals(49, Node.DIRECT_EVAL);
892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
893:       assertEquals(36, Node.QUOTED_PROP);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(57, Node.LAST_PROP);
896:       assertEquals(53, Node.INPUT_ID);
897:       assertEquals(57, Node.REFLECTED_OBJECT);
898:       assertEquals(8, Node.FLAG_NO_THROWS);
899:       assertEquals(39, Node.EMPTY_BLOCK);
900:       assertEquals(55, Node.INFERRED_FUNCTION);
901:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
902:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
903:       assertEquals(52, Node.LENGTH);
904:       assertNotSame(node0, node2);
905:       assertFalse(node0.isIf());
906:       assertFalse(node0.isNE());
907:       assertFalse(node0.isEmpty());
908:       assertFalse(node0.isFor());
909:       assertFalse(node0.isGetterDef());
910:       assertFalse(node0.isArrayLit());
911:       assertFalse(node0.isDelProp());
912:       assertFalse(node0.isVoid());
913:       assertFalse(node0.isString());
914:       assertFalse(node0.isCatch());
915:       assertEquals((-1), node0.getCharno());
916:       assertFalse(node0.isDebugger());
917:       assertFalse(node0.isRegExp());
918:       assertTrue(node0.isNumber());
919:       assertFalse(node0.isHook());
920:       assertFalse(node0.isCase());
921:       assertFalse(node0.isTry());
922:       assertFalse(node0.isThrow());
923:       assertFalse(node0.isThis());
924:       assertFalse(node0.isFalse());
925:       assertFalse(node0.isInstanceOf());
926:       assertFalse(node0.isAnd());
927:       assertFalse(node0.isFunction());
928:       assertFalse(node0.isContinue());
929:       assertFalse(node0.isIn());
930:       assertFalse(node0.isInc());
931:       assertFalse(node0.isSetterDef());
932:       assertFalse(node0.hasChildren());
933:       assertFalse(node0.isGetElem());
934:       assertEquals((-1), node0.getSourcePosition());
935:       assertFalse(node0.isTypeOf());
936:       assertFalse(node0.isDec());
937:       assertFalse(node0.isOr());
938:       assertFalse(node0.isAssign());
939:       assertEquals((-1), node0.getLineno());
940:       assertFalse(node0.isCast());
941:       assertFalse(node0.isExprResult());
942:       assertFalse(node0.isLabelName());
943:       assertFalse(node0.isWith());
944:       assertFalse(node0.isWhile());
945:       assertEquals(39, node0.getType());
946:       assertFalse(node0.isScript());
947:       assertFalse(node0.hasMoreThanOneChild());
948:       assertFalse(node0.isObjectLit());
949:       assertFalse(node0.isNot());
950:       assertFalse(node0.isReturn());
951:       assertFalse(node0.isBlock());
952:       assertFalse(node0.isGetProp());
953:       assertFalse(node0.hasOneChild());
954:       assertFalse(node0.isBreak());
955:       assertFalse(node0.isStringKey());
956:       assertFalse(node0.isNull());
957:       assertFalse(node0.isComma());
958:       assertFalse(node0.isParamList());
959:       assertFalse(node0.isCall());
960:       assertFalse(node0.isSwitch());
961:       assertFalse(node0.isName());
962:       assertFalse(node0.isDefaultCase());
963:       assertFalse(node0.isTrue());
964:       assertEquals(0, node0.getChildCount());
965:       assertFalse(node0.isLabel());
966:       assertFalse(node0.isAssignAdd());
967:       assertFalse(node0.isVar());
968:       assertFalse(node0.isAdd());
969:       assertFalse(node0.isNew());
970:       assertFalse(node0.isDo());
971:       assertFalse(node0.equals((Object)node1));
972:       assertFalse(node0.equals((Object)node2));
973:       assertFalse(boolean1 == boolean0);
974:       
975:       boolean boolean2 = node1.isReturn();
976:       assertFalse(boolean2);
977:       assertEquals(4095, Node.COLUMN_MASK);
978:       assertEquals(55, Node.INFERRED_FUNCTION);
979:       assertEquals(39, Node.EMPTY_BLOCK);
980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(36, Node.QUOTED_PROP);
983:       assertEquals(8, Node.FLAG_NO_THROWS);
984:       assertEquals(48, Node.DIRECTIVES);
985:       assertEquals(50, Node.FREE_CALL);
986:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
987:       assertEquals(57, Node.REFLECTED_OBJECT);
988:       assertEquals(52, Node.LENGTH);
989:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
990:       assertEquals(40, Node.ORIGINALNAME_PROP);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(53, Node.INPUT_ID);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(47, Node.IS_DISPATCHER);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(30, Node.VAR_ARGS_NAME);
997:       assertEquals(2, Node.POST_FLAG);
998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
999:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1000:       assertEquals(32, Node.INCRDECR_PROP);
1001:       assertEquals(1, Node.DECR_FLAG);
1002:       assertEquals(37, Node.OPT_ARG_NAME);
1003:       assertEquals(56, Node.CHANGE_TIME);
1004:       assertEquals(49, Node.DIRECT_EVAL);
1005:       assertEquals(46, Node.IS_NAMESPACE);
1006:       assertEquals(54, Node.SLASH_V);
1007:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1008:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1011:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1012:       assertEquals(12, Node.COLUMN_BITS);
1013:       assertFalse(node1.isInstanceOf());
1014:       assertFalse(node1.isAnd());
1015:       assertFalse(node1.isScript());
1016:       assertFalse(node1.isGetProp());
1017:       assertFalse(node1.isObjectLit());
1018:       assertFalse(node1.isNot());
1019:       assertEquals(30, node1.getType());
1020:       assertTrue(node1.isNew());
1021:       assertFalse(node1.isThrow());
1022:       assertFalse(node1.isLabelName());
1023:       assertFalse(node1.isSwitch());
1024:       assertFalse(node1.isFalse());
1025:       assertFalse(node1.isCast());
1026:       assertFalse(node1.isReturn());
1027:       assertFalse(node1.isLabel());
1028:       assertFalse(node1.isDo());
1029:       assertFalse(node1.isWhile());
1030:       assertFalse(node1.isAssignAdd());
1031:       assertEquals((-1), node1.getSourcePosition());
1032:       assertFalse(node1.isEmpty());
1033:       assertFalse(node1.isOr());
1034:       assertFalse(node1.isAdd());
1035:       assertFalse(node1.isString());
1036:       assertFalse(node1.isName());
1037:       assertFalse(node1.isVoid());
1038:       assertFalse(node1.isDec());
1039:       assertFalse(node1.isDelProp());
1040:       assertFalse(node1.isTypeOf());
1041:       assertFalse(node1.isComma());
1042:       assertFalse(node1.isBreak());
1043:       assertFalse(node1.hasChildren());
1044:       assertFalse(node1.isGetElem());
1045:       assertFalse(node1.isExprResult());
1046:       assertFalse(node1.isCall());
1047:       assertFalse(node1.isAssign());
1048:       assertEquals(0, node1.getChildCount());
1049:       assertFalse(node1.isParamList());
1050:       assertFalse(node1.isDefaultCase());
1051:       assertFalse(node1.isNull());
1052:       assertFalse(node1.isSetterDef());
1053:       assertFalse(node1.isTrue());
1054:       assertFalse(node1.isDebugger());
1055:       assertFalse(node1.isVar());
1056:       assertFalse(node1.isArrayLit());
1057:       assertFalse(node1.isStringKey());
1058:       assertFalse(node1.isFunction());
1059:       assertFalse(node1.isContinue());
1060:       assertEquals((-1), node1.getLineno());
1061:       assertFalse(node1.isNumber());
1062:       assertFalse(node1.isNE());
1063:       assertFalse(node1.isGetterDef());
1064:       assertFalse(node1.isInc());
1065:       assertFalse(node1.isCase());
1066:       assertEquals((-1), node1.getCharno());
1067:       assertFalse(node1.isIn());
1068:       assertFalse(node1.isHook());
1069:       assertFalse(node1.hasOneChild());
1070:       assertFalse(node1.isBlock());
1071:       assertFalse(node1.isFor());
1072:       assertFalse(node1.isTry());
1073:       assertFalse(node1.isIf());
1074:       assertFalse(node1.isRegExp());
1075:       assertFalse(node1.isThis());
1076:       assertFalse(node1.isWith());
1077:       assertFalse(node1.isCatch());
1078:       assertFalse(node1.hasMoreThanOneChild());
1079:       assertFalse(node1.equals((Object)node2));
1080:       assertFalse(node1.equals((Object)node0));
1081:       assertTrue(boolean2 == boolean0);
1082:       assertFalse(boolean2 == boolean1);
1083:   }
1084: }
RegularFileObject[/tmp/EvoSuite_256_1628159658630/com/google/javascript/rhino/Node_256_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:34:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_256_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_256_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_256_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:34:18.794 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(199.2059217532582);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(node0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());

String string0 = node0.toString();
assertEquals("NUMBER 199.2059217532582", string0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(string0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());

Iterable<Node> iterable0 = node0.children();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(iterable0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isBreak();
assertFalse(boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());

Node node1 = new Node(30, (-3923), 1186);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node1);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(30, node1.getType());
assertTrue(node1.isNew());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newNumber((-3729.022741313));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node2);
assertNotSame(node2, node0);
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isHook());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCase());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node0.isEquivalentTo(node0);
assertTrue(boolean1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotSame(node0, node2);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean1 == boolean0);

boolean boolean2 = node1.isReturn();
assertFalse(boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(30, node1.getType());
assertTrue(node1.isNew());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);


[MASTER] 10:34:21.150 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_269_1628159660754/com/google/javascript/rhino/Node_269_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_269_1628159660754/com/google/javascript/rhino/Node_269_tmp__ESTest_scaffolding.java]]
[MASTER] 10:34:21.150 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:21.150 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:34:21.151 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 289
[MASTER] 10:34:21.152 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_269_1628159660754/com/google/javascript/rhino/Node_269_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:34:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.nio.ByteBuffer;
16: import java.nio.CharBuffer;
17: import java.nio.charset.Charset;
18: import java.util.List;
19: import java.util.Vector;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Node_269_tmp__ESTest extends Node_269_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
30:       assertNotNull(node_SideEffectFlags0);
31:       assertEquals(0, node_SideEffectFlags0.valueOf());
32:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
33:       
34:       node_SideEffectFlags0.clearSideEffectFlags();
35:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
36:       assertEquals(15, node_SideEffectFlags0.valueOf());
37:       
38:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
39:       assertNotNull(node_SideEffectFlags1);
40:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
41:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
42:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
43:       assertEquals(15, node_SideEffectFlags0.valueOf());
44:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
45:       assertEquals(15, node_SideEffectFlags1.valueOf());
46:       
47:       boolean boolean0 = node_SideEffectFlags1.areAllFlagsSet();
48:       assertFalse(boolean0);
49:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
50:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
51:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
52:       assertEquals(15, node_SideEffectFlags0.valueOf());
53:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
54:       assertEquals(15, node_SideEffectFlags1.valueOf());
55:       
56:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
57:       assertNotNull(simpleErrorReporter0);
58:       
59:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
60:       assertNotNull(jSTypeRegistry0);
61:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
62:       
63:       Vector<JSType> vector0 = new Vector<JSType>();
64:       assertNotNull(vector0);
65:       assertEquals(0, vector0.size());
66:       assertEquals(10, vector0.capacity());
67:       assertTrue(vector0.isEmpty());
68:       assertEquals("[]", vector0.toString());
69:       
70:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
71:       assertEquals(55, Node.INFERRED_FUNCTION);
72:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
73:       assertEquals(39, Node.EMPTY_BLOCK);
74:       assertEquals(48, Node.DIRECTIVES);
75:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
76:       assertEquals(43, Node.IS_CONSTANT_NAME);
77:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
78:       assertEquals(8, Node.FLAG_NO_THROWS);
79:       assertEquals(36, Node.QUOTED_PROP);
80:       assertEquals(50, Node.FREE_CALL);
81:       assertEquals(52, Node.LENGTH);
82:       assertEquals(53, Node.INPUT_ID);
83:       assertEquals(54, Node.SLASH_V);
84:       assertEquals(40, Node.ORIGINALNAME_PROP);
85:       assertEquals(57, Node.LAST_PROP);
86:       assertEquals(47, Node.IS_DISPATCHER);
87:       assertEquals(2, Node.POST_FLAG);
88:       assertEquals(30, Node.VAR_ARGS_NAME);
89:       assertEquals(12, Node.COLUMN_BITS);
90:       assertEquals(46, Node.IS_NAMESPACE);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(49, Node.DIRECT_EVAL);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(56, Node.CHANGE_TIME);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertNotNull(node0);
108:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
109:       assertEquals(0, vector0.size());
110:       assertEquals(10, vector0.capacity());
111:       assertTrue(vector0.isEmpty());
112:       assertEquals("[]", vector0.toString());
113:       assertEquals(0, node0.getChildCount());
114:       assertFalse(node0.isNull());
115:       assertFalse(node0.isDefaultCase());
116:       assertFalse(node0.isSetterDef());
117:       assertFalse(node0.isDebugger());
118:       assertFalse(node0.isFunction());
119:       assertFalse(node0.isVar());
120:       assertFalse(node0.isStringKey());
121:       assertFalse(node0.isContinue());
122:       assertFalse(node0.isArrayLit());
123:       assertFalse(node0.isReturn());
124:       assertFalse(node0.isOr());
125:       assertFalse(node0.isAssignAdd());
126:       assertEquals((-1), node0.getSourcePosition());
127:       assertFalse(node0.isDec());
128:       assertFalse(node0.isLabel());
129:       assertFalse(node0.hasChildren());
130:       assertFalse(node0.isString());
131:       assertFalse(node0.isWhile());
132:       assertFalse(node0.isEmpty());
133:       assertFalse(node0.isDo());
134:       assertFalse(node0.isNew());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isDelProp());
138:       assertFalse(node0.isAssign());
139:       assertFalse(node0.isName());
140:       assertFalse(node0.isTypeOf());
141:       assertFalse(node0.isExprResult());
142:       assertFalse(node0.isCall());
143:       assertFalse(node0.isVoid());
144:       assertFalse(node0.isGetElem());
145:       assertFalse(node0.isBreak());
146:       assertTrue(node0.isParamList());
147:       assertFalse(node0.isInstanceOf());
148:       assertFalse(node0.isThis());
149:       assertFalse(node0.isObjectLit());
150:       assertFalse(node0.isComma());
151:       assertFalse(node0.isNot());
152:       assertEquals(83, node0.getType());
153:       assertFalse(node0.isScript());
154:       assertFalse(node0.isGetProp());
155:       assertFalse(node0.isThrow());
156:       assertEquals((-1), node0.getCharno());
157:       assertFalse(node0.isLabelName());
158:       assertFalse(node0.isFalse());
159:       assertFalse(node0.isSwitch());
160:       assertFalse(node0.isAnd());
161:       assertFalse(node0.isCast());
162:       assertEquals((-1), node0.getLineno());
163:       assertFalse(node0.isIn());
164:       assertFalse(node0.hasMoreThanOneChild());
165:       assertFalse(node0.isNE());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isGetterDef());
168:       assertFalse(node0.isNumber());
169:       assertFalse(node0.isInc());
170:       assertFalse(node0.isCase());
171:       assertFalse(node0.hasOneChild());
172:       assertFalse(node0.isTry());
173:       assertFalse(node0.isHook());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isWith());
178:       assertFalse(node0.isCatch());
179:       
180:       Iterable<Node> iterable0 = node0.children();
181:       assertEquals(55, Node.INFERRED_FUNCTION);
182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
183:       assertEquals(39, Node.EMPTY_BLOCK);
184:       assertEquals(48, Node.DIRECTIVES);
185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
186:       assertEquals(43, Node.IS_CONSTANT_NAME);
187:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
188:       assertEquals(8, Node.FLAG_NO_THROWS);
189:       assertEquals(36, Node.QUOTED_PROP);
190:       assertEquals(50, Node.FREE_CALL);
191:       assertEquals(52, Node.LENGTH);
192:       assertEquals(53, Node.INPUT_ID);
193:       assertEquals(54, Node.SLASH_V);
194:       assertEquals(40, Node.ORIGINALNAME_PROP);
195:       assertEquals(57, Node.LAST_PROP);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(30, Node.VAR_ARGS_NAME);
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(49, Node.DIRECT_EVAL);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(1, Node.DECR_FLAG);
206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertNotNull(iterable0);
218:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
219:       assertEquals(0, vector0.size());
220:       assertEquals(10, vector0.capacity());
221:       assertTrue(vector0.isEmpty());
222:       assertEquals("[]", vector0.toString());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isNull());
225:       assertFalse(node0.isDefaultCase());
226:       assertFalse(node0.isSetterDef());
227:       assertFalse(node0.isDebugger());
228:       assertFalse(node0.isFunction());
229:       assertFalse(node0.isVar());
230:       assertFalse(node0.isStringKey());
231:       assertFalse(node0.isContinue());
232:       assertFalse(node0.isArrayLit());
233:       assertFalse(node0.isReturn());
234:       assertFalse(node0.isOr());
235:       assertFalse(node0.isAssignAdd());
236:       assertEquals((-1), node0.getSourcePosition());
237:       assertFalse(node0.isDec());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.hasChildren());
240:       assertFalse(node0.isString());
241:       assertFalse(node0.isWhile());
242:       assertFalse(node0.isEmpty());
243:       assertFalse(node0.isDo());
244:       assertFalse(node0.isNew());
245:       assertFalse(node0.isAdd());
246:       assertFalse(node0.isTrue());
247:       assertFalse(node0.isDelProp());
248:       assertFalse(node0.isAssign());
249:       assertFalse(node0.isName());
250:       assertFalse(node0.isTypeOf());
251:       assertFalse(node0.isExprResult());
252:       assertFalse(node0.isCall());
253:       assertFalse(node0.isVoid());
254:       assertFalse(node0.isGetElem());
255:       assertFalse(node0.isBreak());
256:       assertTrue(node0.isParamList());
257:       assertFalse(node0.isInstanceOf());
258:       assertFalse(node0.isThis());
259:       assertFalse(node0.isObjectLit());
260:       assertFalse(node0.isComma());
261:       assertFalse(node0.isNot());
262:       assertEquals(83, node0.getType());
263:       assertFalse(node0.isScript());
264:       assertFalse(node0.isGetProp());
265:       assertFalse(node0.isThrow());
266:       assertEquals((-1), node0.getCharno());
267:       assertFalse(node0.isLabelName());
268:       assertFalse(node0.isFalse());
269:       assertFalse(node0.isSwitch());
270:       assertFalse(node0.isAnd());
271:       assertFalse(node0.isCast());
272:       assertEquals((-1), node0.getLineno());
273:       assertFalse(node0.isIn());
274:       assertFalse(node0.hasMoreThanOneChild());
275:       assertFalse(node0.isNE());
276:       assertFalse(node0.isFor());
277:       assertFalse(node0.isGetterDef());
278:       assertFalse(node0.isNumber());
279:       assertFalse(node0.isInc());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.hasOneChild());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isHook());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isRegExp());
286:       assertFalse(node0.isIf());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.isCatch());
289:       assertFalse(iterable0.contains(node0));
290:       
291:       boolean boolean1 = node0.mayMutateArguments();
292:       assertTrue(boolean1);
293:       assertEquals(55, Node.INFERRED_FUNCTION);
294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(48, Node.DIRECTIVES);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(43, Node.IS_CONSTANT_NAME);
299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
300:       assertEquals(8, Node.FLAG_NO_THROWS);
301:       assertEquals(36, Node.QUOTED_PROP);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(52, Node.LENGTH);
304:       assertEquals(53, Node.INPUT_ID);
305:       assertEquals(54, Node.SLASH_V);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(57, Node.LAST_PROP);
308:       assertEquals(47, Node.IS_DISPATCHER);
309:       assertEquals(2, Node.POST_FLAG);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(37, Node.OPT_ARG_NAME);
314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(32, Node.INCRDECR_PROP);
317:       assertEquals(1, Node.DECR_FLAG);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
330:       assertEquals(0, vector0.size());
331:       assertEquals(10, vector0.capacity());
332:       assertTrue(vector0.isEmpty());
333:       assertEquals("[]", vector0.toString());
334:       assertEquals(0, node0.getChildCount());
335:       assertFalse(node0.isNull());
336:       assertFalse(node0.isDefaultCase());
337:       assertFalse(node0.isSetterDef());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isFunction());
340:       assertFalse(node0.isVar());
341:       assertFalse(node0.isStringKey());
342:       assertFalse(node0.isContinue());
343:       assertFalse(node0.isArrayLit());
344:       assertFalse(node0.isReturn());
345:       assertFalse(node0.isOr());
346:       assertFalse(node0.isAssignAdd());
347:       assertEquals((-1), node0.getSourcePosition());
348:       assertFalse(node0.isDec());
349:       assertFalse(node0.isLabel());
350:       assertFalse(node0.hasChildren());
351:       assertFalse(node0.isString());
352:       assertFalse(node0.isWhile());
353:       assertFalse(node0.isEmpty());
354:       assertFalse(node0.isDo());
355:       assertFalse(node0.isNew());
356:       assertFalse(node0.isAdd());
357:       assertFalse(node0.isTrue());
358:       assertFalse(node0.isDelProp());
359:       assertFalse(node0.isAssign());
360:       assertFalse(node0.isName());
361:       assertFalse(node0.isTypeOf());
362:       assertFalse(node0.isExprResult());
363:       assertFalse(node0.isCall());
364:       assertFalse(node0.isVoid());
365:       assertFalse(node0.isGetElem());
366:       assertFalse(node0.isBreak());
367:       assertTrue(node0.isParamList());
368:       assertFalse(node0.isInstanceOf());
369:       assertFalse(node0.isThis());
370:       assertFalse(node0.isObjectLit());
371:       assertFalse(node0.isComma());
372:       assertFalse(node0.isNot());
373:       assertEquals(83, node0.getType());
374:       assertFalse(node0.isScript());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isThrow());
377:       assertEquals((-1), node0.getCharno());
378:       assertFalse(node0.isLabelName());
379:       assertFalse(node0.isFalse());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isAnd());
382:       assertFalse(node0.isCast());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isIn());
385:       assertFalse(node0.hasMoreThanOneChild());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isFor());
388:       assertFalse(node0.isGetterDef());
389:       assertFalse(node0.isNumber());
390:       assertFalse(node0.isInc());
391:       assertFalse(node0.isCase());
392:       assertFalse(node0.hasOneChild());
393:       assertFalse(node0.isTry());
394:       assertFalse(node0.isHook());
395:       assertFalse(node0.isBlock());
396:       assertFalse(node0.isRegExp());
397:       assertFalse(node0.isIf());
398:       assertFalse(node0.isWith());
399:       assertFalse(node0.isCatch());
400:       assertFalse(boolean1 == boolean0);
401:       
402:       InputId inputId0 = node0.getInputId();
403:       assertEquals(55, Node.INFERRED_FUNCTION);
404:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
405:       assertEquals(39, Node.EMPTY_BLOCK);
406:       assertEquals(48, Node.DIRECTIVES);
407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
410:       assertEquals(8, Node.FLAG_NO_THROWS);
411:       assertEquals(36, Node.QUOTED_PROP);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(52, Node.LENGTH);
414:       assertEquals(53, Node.INPUT_ID);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(57, Node.LAST_PROP);
418:       assertEquals(47, Node.IS_DISPATCHER);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(30, Node.VAR_ARGS_NAME);
421:       assertEquals(12, Node.COLUMN_BITS);
422:       assertEquals(46, Node.IS_NAMESPACE);
423:       assertEquals(37, Node.OPT_ARG_NAME);
424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(1, Node.DECR_FLAG);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
437:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
438:       assertEquals(4095, Node.COLUMN_MASK);
439:       assertNull(inputId0);
440:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
441:       assertEquals(0, vector0.size());
442:       assertEquals(10, vector0.capacity());
443:       assertTrue(vector0.isEmpty());
444:       assertEquals("[]", vector0.toString());
445:       assertEquals(0, node0.getChildCount());
446:       assertFalse(node0.isNull());
447:       assertFalse(node0.isDefaultCase());
448:       assertFalse(node0.isSetterDef());
449:       assertFalse(node0.isDebugger());
450:       assertFalse(node0.isFunction());
451:       assertFalse(node0.isVar());
452:       assertFalse(node0.isStringKey());
453:       assertFalse(node0.isContinue());
454:       assertFalse(node0.isArrayLit());
455:       assertFalse(node0.isReturn());
456:       assertFalse(node0.isOr());
457:       assertFalse(node0.isAssignAdd());
458:       assertEquals((-1), node0.getSourcePosition());
459:       assertFalse(node0.isDec());
460:       assertFalse(node0.isLabel());
461:       assertFalse(node0.hasChildren());
462:       assertFalse(node0.isString());
463:       assertFalse(node0.isWhile());
464:       assertFalse(node0.isEmpty());
465:       assertFalse(node0.isDo());
466:       assertFalse(node0.isNew());
467:       assertFalse(node0.isAdd());
468:       assertFalse(node0.isTrue());
469:       assertFalse(node0.isDelProp());
470:       assertFalse(node0.isAssign());
471:       assertFalse(node0.isName());
472:       assertFalse(node0.isTypeOf());
473:       assertFalse(node0.isExprResult());
474:       assertFalse(node0.isCall());
475:       assertFalse(node0.isVoid());
476:       assertFalse(node0.isGetElem());
477:       assertFalse(node0.isBreak());
478:       assertTrue(node0.isParamList());
479:       assertFalse(node0.isInstanceOf());
480:       assertFalse(node0.isThis());
481:       assertFalse(node0.isObjectLit());
482:       assertFalse(node0.isComma());
483:       assertFalse(node0.isNot());
484:       assertEquals(83, node0.getType());
485:       assertFalse(node0.isScript());
486:       assertFalse(node0.isGetProp());
487:       assertFalse(node0.isThrow());
488:       assertEquals((-1), node0.getCharno());
489:       assertFalse(node0.isLabelName());
490:       assertFalse(node0.isFalse());
491:       assertFalse(node0.isSwitch());
492:       assertFalse(node0.isAnd());
493:       assertFalse(node0.isCast());
494:       assertEquals((-1), node0.getLineno());
495:       assertFalse(node0.isIn());
496:       assertFalse(node0.hasMoreThanOneChild());
497:       assertFalse(node0.isNE());
498:       assertFalse(node0.isFor());
499:       assertFalse(node0.isGetterDef());
500:       assertFalse(node0.isNumber());
501:       assertFalse(node0.isInc());
502:       assertFalse(node0.isCase());
503:       assertFalse(node0.hasOneChild());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isHook());
506:       assertFalse(node0.isBlock());
507:       assertFalse(node0.isRegExp());
508:       assertFalse(node0.isIf());
509:       assertFalse(node0.isWith());
510:       assertFalse(node0.isCatch());
511:       
512:       node0.removeProp((-1129));
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
515:       assertEquals(39, Node.EMPTY_BLOCK);
516:       assertEquals(48, Node.DIRECTIVES);
517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
518:       assertEquals(43, Node.IS_CONSTANT_NAME);
519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
520:       assertEquals(8, Node.FLAG_NO_THROWS);
521:       assertEquals(36, Node.QUOTED_PROP);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(52, Node.LENGTH);
524:       assertEquals(53, Node.INPUT_ID);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(57, Node.LAST_PROP);
528:       assertEquals(47, Node.IS_DISPATCHER);
529:       assertEquals(2, Node.POST_FLAG);
530:       assertEquals(30, Node.VAR_ARGS_NAME);
531:       assertEquals(12, Node.COLUMN_BITS);
532:       assertEquals(46, Node.IS_NAMESPACE);
533:       assertEquals(37, Node.OPT_ARG_NAME);
534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
535:       assertEquals(49, Node.DIRECT_EVAL);
536:       assertEquals(32, Node.INCRDECR_PROP);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(15, Node.NO_SIDE_EFFECTS);
539:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(29, Node.JSDOC_INFO_PROP);
542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
550:       assertEquals(0, vector0.size());
551:       assertEquals(10, vector0.capacity());
552:       assertTrue(vector0.isEmpty());
553:       assertEquals("[]", vector0.toString());
554:       assertEquals(0, node0.getChildCount());
555:       assertFalse(node0.isNull());
556:       assertFalse(node0.isDefaultCase());
557:       assertFalse(node0.isSetterDef());
558:       assertFalse(node0.isDebugger());
559:       assertFalse(node0.isFunction());
560:       assertFalse(node0.isVar());
561:       assertFalse(node0.isStringKey());
562:       assertFalse(node0.isContinue());
563:       assertFalse(node0.isArrayLit());
564:       assertFalse(node0.isReturn());
565:       assertFalse(node0.isOr());
566:       assertFalse(node0.isAssignAdd());
567:       assertEquals((-1), node0.getSourcePosition());
568:       assertFalse(node0.isDec());
569:       assertFalse(node0.isLabel());
570:       assertFalse(node0.hasChildren());
571:       assertFalse(node0.isString());
572:       assertFalse(node0.isWhile());
573:       assertFalse(node0.isEmpty());
574:       assertFalse(node0.isDo());
575:       assertFalse(node0.isNew());
576:       assertFalse(node0.isAdd());
577:       assertFalse(node0.isTrue());
578:       assertFalse(node0.isDelProp());
579:       assertFalse(node0.isAssign());
580:       assertFalse(node0.isName());
581:       assertFalse(node0.isTypeOf());
582:       assertFalse(node0.isExprResult());
583:       assertFalse(node0.isCall());
584:       assertFalse(node0.isVoid());
585:       assertFalse(node0.isGetElem());
586:       assertFalse(node0.isBreak());
587:       assertTrue(node0.isParamList());
588:       assertFalse(node0.isInstanceOf());
589:       assertFalse(node0.isThis());
590:       assertFalse(node0.isObjectLit());
591:       assertFalse(node0.isComma());
592:       assertFalse(node0.isNot());
593:       assertEquals(83, node0.getType());
594:       assertFalse(node0.isScript());
595:       assertFalse(node0.isGetProp());
596:       assertFalse(node0.isThrow());
597:       assertEquals((-1), node0.getCharno());
598:       assertFalse(node0.isLabelName());
599:       assertFalse(node0.isFalse());
600:       assertFalse(node0.isSwitch());
601:       assertFalse(node0.isAnd());
602:       assertFalse(node0.isCast());
603:       assertEquals((-1), node0.getLineno());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.hasMoreThanOneChild());
606:       assertFalse(node0.isNE());
607:       assertFalse(node0.isFor());
608:       assertFalse(node0.isGetterDef());
609:       assertFalse(node0.isNumber());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isCase());
612:       assertFalse(node0.hasOneChild());
613:       assertFalse(node0.isTry());
614:       assertFalse(node0.isHook());
615:       assertFalse(node0.isBlock());
616:       assertFalse(node0.isRegExp());
617:       assertFalse(node0.isIf());
618:       assertFalse(node0.isWith());
619:       assertFalse(node0.isCatch());
620:       
621:       Node node1 = new Node(31, 51, 147);
622:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
623:       assertEquals(43, Node.IS_CONSTANT_NAME);
624:       assertEquals(53, Node.INPUT_ID);
625:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
626:       assertEquals(4095, Node.COLUMN_MASK);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(32, Node.INCRDECR_PROP);
630:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
632:       assertEquals(46, Node.IS_NAMESPACE);
633:       assertEquals(50, Node.FREE_CALL);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(52, Node.LENGTH);
637:       assertEquals(57, Node.LAST_PROP);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(15, Node.NO_SIDE_EFFECTS);
640:       assertEquals(40, Node.ORIGINALNAME_PROP);
641:       assertEquals(1, Node.DECR_FLAG);
642:       assertEquals(30, Node.VAR_ARGS_NAME);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
648:       assertEquals(56, Node.CHANGE_TIME);
649:       assertEquals(8, Node.FLAG_NO_THROWS);
650:       assertEquals(29, Node.JSDOC_INFO_PROP);
651:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
652:       assertEquals(39, Node.EMPTY_BLOCK);
653:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
656:       assertEquals(36, Node.QUOTED_PROP);
657:       assertEquals(57, Node.REFLECTED_OBJECT);
658:       assertNotNull(node1);
659:       assertFalse(node1.isExprResult());
660:       assertFalse(node1.isAnd());
661:       assertFalse(node1.isLabelName());
662:       assertFalse(node1.isAssign());
663:       assertFalse(node1.isWith());
664:       assertFalse(node1.isGetElem());
665:       assertFalse(node1.isInstanceOf());
666:       assertFalse(node1.isCast());
667:       assertFalse(node1.isThis());
668:       assertFalse(node1.isComma());
669:       assertFalse(node1.isGetProp());
670:       assertFalse(node1.isTypeOf());
671:       assertFalse(node1.isDec());
672:       assertFalse(node1.isReturn());
673:       assertFalse(node1.hasChildren());
674:       assertFalse(node1.isObjectLit());
675:       assertFalse(node1.hasOneChild());
676:       assertFalse(node1.isNot());
677:       assertFalse(node1.isNumber());
678:       assertFalse(node1.isScript());
679:       assertEquals(51, node1.getLineno());
680:       assertFalse(node1.isSwitch());
681:       assertFalse(node1.isNew());
682:       assertFalse(node1.isWhile());
683:       assertFalse(node1.isVar());
684:       assertFalse(node1.isCall());
685:       assertFalse(node1.isName());
686:       assertFalse(node1.isBreak());
687:       assertFalse(node1.isOr());
688:       assertEquals(147, node1.getCharno());
689:       assertFalse(node1.isLabel());
690:       assertFalse(node1.isAssignAdd());
691:       assertFalse(node1.isNull());
692:       assertFalse(node1.isDo());
693:       assertFalse(node1.isAdd());
694:       assertFalse(node1.isEmpty());
695:       assertFalse(node1.isDebugger());
696:       assertFalse(node1.isFunction());
697:       assertFalse(node1.isTrue());
698:       assertFalse(node1.isRegExp());
699:       assertFalse(node1.isTry());
700:       assertFalse(node1.isVoid());
701:       assertFalse(node1.isDefaultCase());
702:       assertFalse(node1.isArrayLit());
703:       assertEquals(0, node1.getChildCount());
704:       assertFalse(node1.isCatch());
705:       assertFalse(node1.isParamList());
706:       assertFalse(node1.isFor());
707:       assertFalse(node1.isStringKey());
708:       assertFalse(node1.isCase());
709:       assertFalse(node1.isString());
710:       assertFalse(node1.isGetterDef());
711:       assertFalse(node1.isInc());
712:       assertFalse(node1.isHook());
713:       assertFalse(node1.isBlock());
714:       assertFalse(node1.isContinue());
715:       assertFalse(node1.isFalse());
716:       assertEquals(209043, node1.getSourcePosition());
717:       assertFalse(node1.hasMoreThanOneChild());
718:       assertEquals(31, node1.getType());
719:       assertFalse(node1.isSetterDef());
720:       assertTrue(node1.isDelProp());
721:       assertFalse(node1.isIf());
722:       assertFalse(node1.isNE());
723:       assertFalse(node1.isThrow());
724:       assertFalse(node1.isIn());
725:       assertFalse(node1.equals((Object)node0));
726:       
727:       boolean boolean2 = node0.isEquivalentTo(node1, true, false, false);
728:       assertFalse(boolean2);
729:       assertEquals(55, Node.INFERRED_FUNCTION);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(48, Node.DIRECTIVES);
733:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
734:       assertEquals(43, Node.IS_CONSTANT_NAME);
735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
736:       assertEquals(8, Node.FLAG_NO_THROWS);
737:       assertEquals(36, Node.QUOTED_PROP);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(53, Node.INPUT_ID);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(40, Node.ORIGINALNAME_PROP);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(47, Node.IS_DISPATCHER);
745:       assertEquals(2, Node.POST_FLAG);
746:       assertEquals(30, Node.VAR_ARGS_NAME);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(37, Node.OPT_ARG_NAME);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(56, Node.CHANGE_TIME);
757:       assertEquals(29, Node.JSDOC_INFO_PROP);
758:       assertEquals(51, Node.STATIC_SOURCE_FILE);
759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
760:       assertEquals(57, Node.REFLECTED_OBJECT);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
763:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
764:       assertEquals(4095, Node.COLUMN_MASK);
765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
766:       assertEquals(43, Node.IS_CONSTANT_NAME);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
769:       assertEquals(4095, Node.COLUMN_MASK);
770:       assertEquals(47, Node.IS_DISPATCHER);
771:       assertEquals(2, Node.POST_FLAG);
772:       assertEquals(32, Node.INCRDECR_PROP);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
775:       assertEquals(46, Node.IS_NAMESPACE);
776:       assertEquals(50, Node.FREE_CALL);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(54, Node.SLASH_V);
779:       assertEquals(52, Node.LENGTH);
780:       assertEquals(57, Node.LAST_PROP);
781:       assertEquals(49, Node.DIRECT_EVAL);
782:       assertEquals(15, Node.NO_SIDE_EFFECTS);
783:       assertEquals(40, Node.ORIGINALNAME_PROP);
784:       assertEquals(1, Node.DECR_FLAG);
785:       assertEquals(30, Node.VAR_ARGS_NAME);
786:       assertEquals(12, Node.COLUMN_BITS);
787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
788:       assertEquals(37, Node.OPT_ARG_NAME);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
791:       assertEquals(56, Node.CHANGE_TIME);
792:       assertEquals(8, Node.FLAG_NO_THROWS);
793:       assertEquals(29, Node.JSDOC_INFO_PROP);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertEquals(39, Node.EMPTY_BLOCK);
796:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
797:       assertEquals(55, Node.INFERRED_FUNCTION);
798:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
799:       assertEquals(36, Node.QUOTED_PROP);
800:       assertEquals(57, Node.REFLECTED_OBJECT);
801:       assertNotSame(node0, node1);
802:       assertNotSame(node1, node0);
803:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
804:       assertEquals(0, vector0.size());
805:       assertEquals(10, vector0.capacity());
806:       assertTrue(vector0.isEmpty());
807:       assertEquals("[]", vector0.toString());
808:       assertEquals(0, node0.getChildCount());
809:       assertFalse(node0.isNull());
810:       assertFalse(node0.isDefaultCase());
811:       assertFalse(node0.isSetterDef());
812:       assertFalse(node0.isDebugger());
813:       assertFalse(node0.isFunction());
814:       assertFalse(node0.isVar());
815:       assertFalse(node0.isStringKey());
816:       assertFalse(node0.isContinue());
817:       assertFalse(node0.isArrayLit());
818:       assertFalse(node0.isReturn());
819:       assertFalse(node0.isOr());
820:       assertFalse(node0.isAssignAdd());
821:       assertEquals((-1), node0.getSourcePosition());
822:       assertFalse(node0.isDec());
823:       assertFalse(node0.isLabel());
824:       assertFalse(node0.hasChildren());
825:       assertFalse(node0.isString());
826:       assertFalse(node0.isWhile());
827:       assertFalse(node0.isEmpty());
828:       assertFalse(node0.isDo());
829:       assertFalse(node0.isNew());
830:       assertFalse(node0.isAdd());
831:       assertFalse(node0.isTrue());
832:       assertFalse(node0.isDelProp());
833:       assertFalse(node0.isAssign());
834:       assertFalse(node0.isName());
835:       assertFalse(node0.isTypeOf());
836:       assertFalse(node0.isExprResult());
837:       assertFalse(node0.isCall());
838:       assertFalse(node0.isVoid());
839:       assertFalse(node0.isGetElem());
840:       assertFalse(node0.isBreak());
841:       assertTrue(node0.isParamList());
842:       assertFalse(node0.isInstanceOf());
843:       assertFalse(node0.isThis());
844:       assertFalse(node0.isObjectLit());
845:       assertFalse(node0.isComma());
846:       assertFalse(node0.isNot());
847:       assertEquals(83, node0.getType());
848:       assertFalse(node0.isScript());
849:       assertFalse(node0.isGetProp());
850:       assertFalse(node0.isThrow());
851:       assertEquals((-1), node0.getCharno());
852:       assertFalse(node0.isLabelName());
853:       assertFalse(node0.isFalse());
854:       assertFalse(node0.isSwitch());
855:       assertFalse(node0.isAnd());
856:       assertFalse(node0.isCast());
857:       assertEquals((-1), node0.getLineno());
858:       assertFalse(node0.isIn());
859:       assertFalse(node0.hasMoreThanOneChild());
860:       assertFalse(node0.isNE());
861:       assertFalse(node0.isFor());
862:       assertFalse(node0.isGetterDef());
863:       assertFalse(node0.isNumber());
864:       assertFalse(node0.isInc());
865:       assertFalse(node0.isCase());
866:       assertFalse(node0.hasOneChild());
867:       assertFalse(node0.isTry());
868:       assertFalse(node0.isHook());
869:       assertFalse(node0.isBlock());
870:       assertFalse(node0.isRegExp());
871:       assertFalse(node0.isIf());
872:       assertFalse(node0.isWith());
873:       assertFalse(node0.isCatch());
874:       assertFalse(node1.isExprResult());
875:       assertFalse(node1.isAnd());
876:       assertFalse(node1.isLabelName());
877:       assertFalse(node1.isAssign());
878:       assertFalse(node1.isWith());
879:       assertFalse(node1.isGetElem());
880:       assertFalse(node1.isInstanceOf());
881:       assertFalse(node1.isCast());
882:       assertFalse(node1.isThis());
883:       assertFalse(node1.isComma());
884:       assertFalse(node1.isGetProp());
885:       assertFalse(node1.isTypeOf());
886:       assertFalse(node1.isDec());
887:       assertFalse(node1.isReturn());
888:       assertFalse(node1.hasChildren());
889:       assertFalse(node1.isObjectLit());
890:       assertFalse(node1.hasOneChild());
891:       assertFalse(node1.isNot());
892:       assertFalse(node1.isNumber());
893:       assertFalse(node1.isScript());
894:       assertEquals(51, node1.getLineno());
895:       assertFalse(node1.isSwitch());
896:       assertFalse(node1.isNew());
897:       assertFalse(node1.isWhile());
898:       assertFalse(node1.isVar());
899:       assertFalse(node1.isCall());
900:       assertFalse(node1.isName());
901:       assertFalse(node1.isBreak());
902:       assertFalse(node1.isOr());
903:       assertEquals(147, node1.getCharno());
904:       assertFalse(node1.isLabel());
905:       assertFalse(node1.isAssignAdd());
906:       assertFalse(node1.isNull());
907:       assertFalse(node1.isDo());
908:       assertFalse(node1.isAdd());
909:       assertFalse(node1.isEmpty());
910:       assertFalse(node1.isDebugger());
911:       assertFalse(node1.isFunction());
912:       assertFalse(node1.isTrue());
913:       assertFalse(node1.isRegExp());
914:       assertFalse(node1.isTry());
915:       assertFalse(node1.isVoid());
916:       assertFalse(node1.isDefaultCase());
917:       assertFalse(node1.isArrayLit());
918:       assertEquals(0, node1.getChildCount());
919:       assertFalse(node1.isCatch());
920:       assertFalse(node1.isParamList());
921:       assertFalse(node1.isFor());
922:       assertFalse(node1.isStringKey());
923:       assertFalse(node1.isCase());
924:       assertFalse(node1.isString());
925:       assertFalse(node1.isGetterDef());
926:       assertFalse(node1.isInc());
927:       assertFalse(node1.isHook());
928:       assertFalse(node1.isBlock());
929:       assertFalse(node1.isContinue());
930:       assertFalse(node1.isFalse());
931:       assertEquals(209043, node1.getSourcePosition());
932:       assertFalse(node1.hasMoreThanOneChild());
933:       assertEquals(31, node1.getType());
934:       assertFalse(node1.isSetterDef());
935:       assertTrue(node1.isDelProp());
936:       assertFalse(node1.isIf());
937:       assertFalse(node1.isNE());
938:       assertFalse(node1.isThrow());
939:       assertFalse(node1.isIn());
940:       assertFalse(node0.equals((Object)node1));
941:       assertFalse(node1.equals((Object)node0));
942:       assertFalse(boolean2 == boolean1);
943:       assertTrue(boolean2 == boolean0);
944:       
945:       String string0 = node0.toString(true, false, false);
946:       assertEquals("PARAM_LIST", string0);
947:       assertEquals(55, Node.INFERRED_FUNCTION);
948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(43, Node.IS_CONSTANT_NAME);
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(8, Node.FLAG_NO_THROWS);
955:       assertEquals(36, Node.QUOTED_PROP);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(53, Node.INPUT_ID);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(57, Node.LAST_PROP);
962:       assertEquals(47, Node.IS_DISPATCHER);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(30, Node.VAR_ARGS_NAME);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(46, Node.IS_NAMESPACE);
967:       assertEquals(37, Node.OPT_ARG_NAME);
968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(32, Node.INCRDECR_PROP);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
973:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
974:       assertEquals(56, Node.CHANGE_TIME);
975:       assertEquals(29, Node.JSDOC_INFO_PROP);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
978:       assertEquals(57, Node.REFLECTED_OBJECT);
979:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
980:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(4095, Node.COLUMN_MASK);
983:       assertNotNull(string0);
984:       assertNotSame(node0, node1);
985:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
986:       assertEquals(0, vector0.size());
987:       assertEquals(10, vector0.capacity());
988:       assertTrue(vector0.isEmpty());
989:       assertEquals("[]", vector0.toString());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isNull());
992:       assertFalse(node0.isDefaultCase());
993:       assertFalse(node0.isSetterDef());
994:       assertFalse(node0.isDebugger());
995:       assertFalse(node0.isFunction());
996:       assertFalse(node0.isVar());
997:       assertFalse(node0.isStringKey());
998:       assertFalse(node0.isContinue());
999:       assertFalse(node0.isArrayLit());
1000:       assertFalse(node0.isReturn());
1001:       assertFalse(node0.isOr());
1002:       assertFalse(node0.isAssignAdd());
1003:       assertEquals((-1), node0.getSourcePosition());
1004:       assertFalse(node0.isDec());
1005:       assertFalse(node0.isLabel());
1006:       assertFalse(node0.hasChildren());
1007:       assertFalse(node0.isString());
1008:       assertFalse(node0.isWhile());
1009:       assertFalse(node0.isEmpty());
1010:       assertFalse(node0.isDo());
1011:       assertFalse(node0.isNew());
1012:       assertFalse(node0.isAdd());
1013:       assertFalse(node0.isTrue());
1014:       assertFalse(node0.isDelProp());
1015:       assertFalse(node0.isAssign());
1016:       assertFalse(node0.isName());
1017:       assertFalse(node0.isTypeOf());
1018:       assertFalse(node0.isExprResult());
1019:       assertFalse(node0.isCall());
1020:       assertFalse(node0.isVoid());
1021:       assertFalse(node0.isGetElem());
1022:       assertFalse(node0.isBreak());
1023:       assertTrue(node0.isParamList());
1024:       assertFalse(node0.isInstanceOf());
1025:       assertFalse(node0.isThis());
1026:       assertFalse(node0.isObjectLit());
1027:       assertFalse(node0.isComma());
1028:       assertFalse(node0.isNot());
1029:       assertEquals(83, node0.getType());
1030:       assertFalse(node0.isScript());
1031:       assertFalse(node0.isGetProp());
1032:       assertFalse(node0.isThrow());
1033:       assertEquals((-1), node0.getCharno());
1034:       assertFalse(node0.isLabelName());
1035:       assertFalse(node0.isFalse());
1036:       assertFalse(node0.isSwitch());
1037:       assertFalse(node0.isAnd());
1038:       assertFalse(node0.isCast());
1039:       assertEquals((-1), node0.getLineno());
1040:       assertFalse(node0.isIn());
1041:       assertFalse(node0.hasMoreThanOneChild());
1042:       assertFalse(node0.isNE());
1043:       assertFalse(node0.isFor());
1044:       assertFalse(node0.isGetterDef());
1045:       assertFalse(node0.isNumber());
1046:       assertFalse(node0.isInc());
1047:       assertFalse(node0.isCase());
1048:       assertFalse(node0.hasOneChild());
1049:       assertFalse(node0.isTry());
1050:       assertFalse(node0.isHook());
1051:       assertFalse(node0.isBlock());
1052:       assertFalse(node0.isRegExp());
1053:       assertFalse(node0.isIf());
1054:       assertFalse(node0.isWith());
1055:       assertFalse(node0.isCatch());
1056:       assertFalse(node0.equals((Object)node1));
1057:       
1058:       boolean boolean3 = node0.isReturn();
1059:       assertFalse(boolean3);
1060:       assertEquals(55, Node.INFERRED_FUNCTION);
1061:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1062:       assertEquals(39, Node.EMPTY_BLOCK);
1063:       assertEquals(48, Node.DIRECTIVES);
1064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1065:       assertEquals(43, Node.IS_CONSTANT_NAME);
1066:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1067:       assertEquals(8, Node.FLAG_NO_THROWS);
1068:       assertEquals(36, Node.QUOTED_PROP);
1069:       assertEquals(50, Node.FREE_CALL);
1070:       assertEquals(52, Node.LENGTH);
1071:       assertEquals(53, Node.INPUT_ID);
1072:       assertEquals(54, Node.SLASH_V);
1073:       assertEquals(40, Node.ORIGINALNAME_PROP);
1074:       assertEquals(57, Node.LAST_PROP);
1075:       assertEquals(47, Node.IS_DISPATCHER);
1076:       assertEquals(2, Node.POST_FLAG);
1077:       assertEquals(30, Node.VAR_ARGS_NAME);
1078:       assertEquals(12, Node.COLUMN_BITS);
1079:       assertEquals(46, Node.IS_NAMESPACE);
1080:       assertEquals(37, Node.OPT_ARG_NAME);
1081:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1082:       assertEquals(49, Node.DIRECT_EVAL);
1083:       assertEquals(32, Node.INCRDECR_PROP);
1084:       assertEquals(1, Node.DECR_FLAG);
1085:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1087:       assertEquals(56, Node.CHANGE_TIME);
1088:       assertEquals(29, Node.JSDOC_INFO_PROP);
1089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1090:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1093:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1094:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1095:       assertEquals(4095, Node.COLUMN_MASK);
1096:       assertNotSame(node0, node1);
1097:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1098:       assertEquals(0, vector0.size());
1099:       assertEquals(10, vector0.capacity());
1100:       assertTrue(vector0.isEmpty());
1101:       assertEquals("[]", vector0.toString());
1102:       assertEquals(0, node0.getChildCount());
1103:       assertFalse(node0.isNull());
1104:       assertFalse(node0.isDefaultCase());
1105:       assertFalse(node0.isSetterDef());
1106:       assertFalse(node0.isDebugger());
1107:       assertFalse(node0.isFunction());
1108:       assertFalse(node0.isVar());
1109:       assertFalse(node0.isStringKey());
1110:       assertFalse(node0.isContinue());
1111:       assertFalse(node0.isArrayLit());
1112:       assertFalse(node0.isReturn());
1113:       assertFalse(node0.isOr());
1114:       assertFalse(node0.isAssignAdd());
1115:       assertEquals((-1), node0.getSourcePosition());
1116:       assertFalse(node0.isDec());
1117:       assertFalse(node0.isLabel());
1118:       assertFalse(node0.hasChildren());
1119:       assertFalse(node0.isString());
1120:       assertFalse(node0.isWhile());
1121:       assertFalse(node0.isEmpty());
1122:       assertFalse(node0.isDo());
1123:       assertFalse(node0.isNew());
1124:       assertFalse(node0.isAdd());
1125:       assertFalse(node0.isTrue());
1126:       assertFalse(node0.isDelProp());
1127:       assertFalse(node0.isAssign());
1128:       assertFalse(node0.isName());
1129:       assertFalse(node0.isTypeOf());
1130:       assertFalse(node0.isExprResult());
1131:       assertFalse(node0.isCall());
1132:       assertFalse(node0.isVoid());
1133:       assertFalse(node0.isGetElem());
1134:       assertFalse(node0.isBreak());
1135:       assertTrue(node0.isParamList());
1136:       assertFalse(node0.isInstanceOf());
1137:       assertFalse(node0.isThis());
1138:       assertFalse(node0.isObjectLit());
1139:       assertFalse(node0.isComma());
1140:       assertFalse(node0.isNot());
1141:       assertEquals(83, node0.getType());
1142:       assertFalse(node0.isScript());
1143:       assertFalse(node0.isGetProp());
1144:       assertFalse(node0.isThrow());
1145:       assertEquals((-1), node0.getCharno());
1146:       assertFalse(node0.isLabelName());
1147:       assertFalse(node0.isFalse());
1148:       assertFalse(node0.isSwitch());
1149:       assertFalse(node0.isAnd());
1150:       assertFalse(node0.isCast());
1151:       assertEquals((-1), node0.getLineno());
1152:       assertFalse(node0.isIn());
1153:       assertFalse(node0.hasMoreThanOneChild());
1154:       assertFalse(node0.isNE());
1155:       assertFalse(node0.isFor());
1156:       assertFalse(node0.isGetterDef());
1157:       assertFalse(node0.isNumber());
1158:       assertFalse(node0.isInc());
1159:       assertFalse(node0.isCase());
1160:       assertFalse(node0.hasOneChild());
1161:       assertFalse(node0.isTry());
1162:       assertFalse(node0.isHook());
1163:       assertFalse(node0.isBlock());
1164:       assertFalse(node0.isRegExp());
1165:       assertFalse(node0.isIf());
1166:       assertFalse(node0.isWith());
1167:       assertFalse(node0.isCatch());
1168:       assertFalse(node0.equals((Object)node1));
1169:       assertTrue(boolean3 == boolean0);
1170:       assertFalse(boolean3 == boolean1);
1171:       assertTrue(boolean3 == boolean2);
1172:       
1173:       boolean boolean4 = node0.isDo();
1174:       assertFalse(boolean4);
1175:       assertEquals(55, Node.INFERRED_FUNCTION);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(48, Node.DIRECTIVES);
1179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1180:       assertEquals(43, Node.IS_CONSTANT_NAME);
1181:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1182:       assertEquals(8, Node.FLAG_NO_THROWS);
1183:       assertEquals(36, Node.QUOTED_PROP);
1184:       assertEquals(50, Node.FREE_CALL);
1185:       assertEquals(52, Node.LENGTH);
1186:       assertEquals(53, Node.INPUT_ID);
1187:       assertEquals(54, Node.SLASH_V);
1188:       assertEquals(40, Node.ORIGINALNAME_PROP);
1189:       assertEquals(57, Node.LAST_PROP);
1190:       assertEquals(47, Node.IS_DISPATCHER);
1191:       assertEquals(2, Node.POST_FLAG);
1192:       assertEquals(30, Node.VAR_ARGS_NAME);
1193:       assertEquals(12, Node.COLUMN_BITS);
1194:       assertEquals(46, Node.IS_NAMESPACE);
1195:       assertEquals(37, Node.OPT_ARG_NAME);
1196:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1197:       assertEquals(49, Node.DIRECT_EVAL);
1198:       assertEquals(32, Node.INCRDECR_PROP);
1199:       assertEquals(1, Node.DECR_FLAG);
1200:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1202:       assertEquals(56, Node.CHANGE_TIME);
1203:       assertEquals(29, Node.JSDOC_INFO_PROP);
1204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1206:       assertEquals(57, Node.REFLECTED_OBJECT);
1207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1210:       assertEquals(4095, Node.COLUMN_MASK);
1211:       assertNotSame(node0, node1);
1212:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1213:       assertEquals(0, vector0.size());
1214:       assertEquals(10, vector0.capacity());
1215:       assertTrue(vector0.isEmpty());
1216:       assertEquals("[]", vector0.toString());
1217:       assertEquals(0, node0.getChildCount());
1218:       assertFalse(node0.isNull());
1219:       assertFalse(node0.isDefaultCase());
1220:       assertFalse(node0.isSetterDef());
1221:       assertFalse(node0.isDebugger());
1222:       assertFalse(node0.isFunction());
1223:       assertFalse(node0.isVar());
1224:       assertFalse(node0.isStringKey());
1225:       assertFalse(node0.isContinue());
1226:       assertFalse(node0.isArrayLit());
1227:       assertFalse(node0.isReturn());
1228:       assertFalse(node0.isOr());
1229:       assertFalse(node0.isAssignAdd());
1230:       assertEquals((-1), node0.getSourcePosition());
1231:       assertFalse(node0.isDec());
1232:       assertFalse(node0.isLabel());
1233:       assertFalse(node0.hasChildren());
1234:       assertFalse(node0.isString());
1235:       assertFalse(node0.isWhile());
1236:       assertFalse(node0.isEmpty());
1237:       assertFalse(node0.isDo());
1238:       assertFalse(node0.isNew());
1239:       assertFalse(node0.isAdd());
1240:       assertFalse(node0.isTrue());
1241:       assertFalse(node0.isDelProp());
1242:       assertFalse(node0.isAssign());
1243:       assertFalse(node0.isName());
1244:       assertFalse(node0.isTypeOf());
1245:       assertFalse(node0.isExprResult());
1246:       assertFalse(node0.isCall());
1247:       assertFalse(node0.isVoid());
1248:       assertFalse(node0.isGetElem());
1249:       assertFalse(node0.isBreak());
1250:       assertTrue(node0.isParamList());
1251:       assertFalse(node0.isInstanceOf());
1252:       assertFalse(node0.isThis());
1253:       assertFalse(node0.isObjectLit());
1254:       assertFalse(node0.isComma());
1255:       assertFalse(node0.isNot());
1256:       assertEquals(83, node0.getType());
1257:       assertFalse(node0.isScript());
1258:       assertFalse(node0.isGetProp());
1259:       assertFalse(node0.isThrow());
1260:       assertEquals((-1), node0.getCharno());
1261:       assertFalse(node0.isLabelName());
1262:       assertFalse(node0.isFalse());
1263:       assertFalse(node0.isSwitch());
1264:       assertFalse(node0.isAnd());
1265:       assertFalse(node0.isCast());
1266:       assertEquals((-1), node0.getLineno());
1267:       assertFalse(node0.isIn());
1268:       assertFalse(node0.hasMoreThanOneChild());
1269:       assertFalse(node0.isNE());
1270:       assertFalse(node0.isFor());
1271:       assertFalse(node0.isGetterDef());
1272:       assertFalse(node0.isNumber());
1273:       assertFalse(node0.isInc());
1274:       assertFalse(node0.isCase());
1275:       assertFalse(node0.hasOneChild());
1276:       assertFalse(node0.isTry());
1277:       assertFalse(node0.isHook());
1278:       assertFalse(node0.isBlock());
1279:       assertFalse(node0.isRegExp());
1280:       assertFalse(node0.isIf());
1281:       assertFalse(node0.isWith());
1282:       assertFalse(node0.isCatch());
1283:       assertFalse(boolean4 == boolean1);
1284:       assertTrue(boolean4 == boolean0);
1285:       assertTrue(boolean4 == boolean3);
1286:       assertTrue(boolean4 == boolean2);
1287:       assertFalse(node0.equals((Object)node1));
1288:       
1289:       Node node2 = node1.copyInformationFrom(node0);
1290:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1291:       assertEquals(52, Node.LENGTH);
1292:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1293:       assertEquals(30, Node.VAR_ARGS_NAME);
1294:       assertEquals(32, Node.INCRDECR_PROP);
1295:       assertEquals(1, Node.DECR_FLAG);
1296:       assertEquals(57, Node.LAST_PROP);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(37, Node.OPT_ARG_NAME);
1299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1300:       assertEquals(8, Node.FLAG_NO_THROWS);
1301:       assertEquals(39, Node.EMPTY_BLOCK);
1302:       assertEquals(48, Node.DIRECTIVES);
1303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1304:       assertEquals(55, Node.INFERRED_FUNCTION);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1307:       assertEquals(49, Node.DIRECT_EVAL);
1308:       assertEquals(56, Node.CHANGE_TIME);
1309:       assertEquals(57, Node.REFLECTED_OBJECT);
1310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1313:       assertEquals(53, Node.INPUT_ID);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(4095, Node.COLUMN_MASK);
1316:       assertEquals(47, Node.IS_DISPATCHER);
1317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1318:       assertEquals(2, Node.POST_FLAG);
1319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1320:       assertEquals(40, Node.ORIGINALNAME_PROP);
1321:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1322:       assertEquals(50, Node.FREE_CALL);
1323:       assertEquals(43, Node.IS_CONSTANT_NAME);
1324:       assertEquals(46, Node.IS_NAMESPACE);
1325:       assertEquals(54, Node.SLASH_V);
1326:       assertEquals(55, Node.INFERRED_FUNCTION);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(39, Node.EMPTY_BLOCK);
1329:       assertEquals(48, Node.DIRECTIVES);
1330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1333:       assertEquals(8, Node.FLAG_NO_THROWS);
1334:       assertEquals(36, Node.QUOTED_PROP);
1335:       assertEquals(50, Node.FREE_CALL);
1336:       assertEquals(52, Node.LENGTH);
1337:       assertEquals(53, Node.INPUT_ID);
1338:       assertEquals(54, Node.SLASH_V);
1339:       assertEquals(40, Node.ORIGINALNAME_PROP);
1340:       assertEquals(57, Node.LAST_PROP);
1341:       assertEquals(47, Node.IS_DISPATCHER);
1342:       assertEquals(2, Node.POST_FLAG);
1343:       assertEquals(30, Node.VAR_ARGS_NAME);
1344:       assertEquals(12, Node.COLUMN_BITS);
1345:       assertEquals(46, Node.IS_NAMESPACE);
1346:       assertEquals(37, Node.OPT_ARG_NAME);
1347:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1348:       assertEquals(49, Node.DIRECT_EVAL);
1349:       assertEquals(32, Node.INCRDECR_PROP);
1350:       assertEquals(1, Node.DECR_FLAG);
1351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1353:       assertEquals(56, Node.CHANGE_TIME);
1354:       assertEquals(29, Node.JSDOC_INFO_PROP);
1355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1357:       assertEquals(57, Node.REFLECTED_OBJECT);
1358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1360:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1361:       assertEquals(4095, Node.COLUMN_MASK);
1362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1363:       assertEquals(43, Node.IS_CONSTANT_NAME);
1364:       assertEquals(53, Node.INPUT_ID);
1365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1366:       assertEquals(4095, Node.COLUMN_MASK);
1367:       assertEquals(47, Node.IS_DISPATCHER);
1368:       assertEquals(2, Node.POST_FLAG);
1369:       assertEquals(32, Node.INCRDECR_PROP);
1370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1371:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1372:       assertEquals(46, Node.IS_NAMESPACE);
1373:       assertEquals(50, Node.FREE_CALL);
1374:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1375:       assertEquals(54, Node.SLASH_V);
1376:       assertEquals(52, Node.LENGTH);
1377:       assertEquals(57, Node.LAST_PROP);
1378:       assertEquals(49, Node.DIRECT_EVAL);
1379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1380:       assertEquals(40, Node.ORIGINALNAME_PROP);
1381:       assertEquals(1, Node.DECR_FLAG);
1382:       assertEquals(30, Node.VAR_ARGS_NAME);
1383:       assertEquals(12, Node.COLUMN_BITS);
1384:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1385:       assertEquals(37, Node.OPT_ARG_NAME);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1388:       assertEquals(56, Node.CHANGE_TIME);
1389:       assertEquals(8, Node.FLAG_NO_THROWS);
1390:       assertEquals(29, Node.JSDOC_INFO_PROP);
1391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1392:       assertEquals(39, Node.EMPTY_BLOCK);
1393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1394:       assertEquals(55, Node.INFERRED_FUNCTION);
1395:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1396:       assertEquals(36, Node.QUOTED_PROP);
1397:       assertEquals(57, Node.REFLECTED_OBJECT);
1398:       assertNotNull(node2);
1399:       assertNotSame(node2, node0);
1400:       assertSame(node2, node1);
1401:       assertNotSame(node0, node1);
1402:       assertNotSame(node0, node2);
1403:       assertNotSame(node1, node0);
1404:       assertSame(node1, node2);
1405:       assertFalse(node2.isBlock());
1406:       assertFalse(node2.isNew());
1407:       assertEquals(31, node2.getType());
1408:       assertFalse(node2.isWhile());
1409:       assertFalse(node2.isDo());
1410:       assertFalse(node2.isCall());
1411:       assertFalse(node2.isVar());
1412:       assertFalse(node2.isContinue());
1413:       assertFalse(node2.hasMoreThanOneChild());
1414:       assertFalse(node2.isSetterDef());
1415:       assertFalse(node2.isNull());
1416:       assertTrue(node2.isDelProp());
1417:       assertFalse(node2.isLabel());
1418:       assertEquals((-1), node2.getLineno());
1419:       assertFalse(node2.isName());
1420:       assertFalse(node2.isAssignAdd());
1421:       assertFalse(node2.isOr());
1422:       assertFalse(node2.isAdd());
1423:       assertFalse(node2.isScript());
1424:       assertFalse(node2.isTry());
1425:       assertFalse(node2.isDefaultCase());
1426:       assertFalse(node2.isCatch());
1427:       assertFalse(node2.isArrayLit());
1428:       assertEquals(0, node2.getChildCount());
1429:       assertFalse(node2.isRegExp());
1430:       assertFalse(node2.isInstanceOf());
1431:       assertFalse(node2.isWith());
1432:       assertFalse(node2.isParamList());
1433:       assertFalse(node2.isThis());
1434:       assertFalse(node2.isFor());
1435:       assertFalse(node2.isLabelName());
1436:       assertFalse(node2.isStringKey());
1437:       assertFalse(node2.isCase());
1438:       assertFalse(node2.hasOneChild());
1439:       assertFalse(node2.isGetterDef());
1440:       assertFalse(node2.isNumber());
1441:       assertFalse(node2.isInc());
1442:       assertEquals((-1), node2.getCharno());
1443:       assertFalse(node2.isSwitch());
1444:       assertFalse(node2.isThrow());
1445:       assertFalse(node2.isHook());
1446:       assertFalse(node2.isFalse());
1447:       assertFalse(node2.isNE());
1448:       assertFalse(node2.isBreak());
1449:       assertFalse(node2.isIf());
1450:       assertFalse(node2.isEmpty());
1451:       assertFalse(node2.isIn());
1452:       assertFalse(node2.isFunction());
1453:       assertFalse(node2.isExprResult());
1454:       assertFalse(node2.isTrue());
1455:       assertFalse(node2.isVoid());
1456:       assertFalse(node2.isDebugger());
1457:       assertFalse(node2.isAnd());
1458:       assertFalse(node2.isCast());
1459:       assertFalse(node2.isGetElem());
1460:       assertFalse(node2.isAssign());
1461:       assertFalse(node2.isTypeOf());
1462:       assertFalse(node2.isComma());
1463:       assertEquals((-1), node2.getSourcePosition());
1464:       assertFalse(node2.isDec());
1465:       assertFalse(node2.hasChildren());
1466:       assertFalse(node2.isGetProp());
1467:       assertFalse(node2.isReturn());
1468:       assertFalse(node2.isObjectLit());
1469:       assertFalse(node2.isString());
1470:       assertFalse(node2.isNot());
1471:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1472:       assertEquals(0, vector0.size());
1473:       assertEquals(10, vector0.capacity());
1474:       assertTrue(vector0.isEmpty());
1475:       assertEquals("[]", vector0.toString());
1476:       assertEquals(0, node0.getChildCount());
1477:       assertFalse(node0.isNull());
1478:       assertFalse(node0.isDefaultCase());
1479:       assertFalse(node0.isSetterDef());
1480:       assertFalse(node0.isDebugger());
1481:       assertFalse(node0.isFunction());
1482:       assertFalse(node0.isVar());
1483:       assertFalse(node0.isStringKey());
1484:       assertFalse(node0.isContinue());
1485:       assertFalse(node0.isArrayLit());
1486:       assertFalse(node0.isReturn());
1487:       assertFalse(node0.isOr());
1488:       assertFalse(node0.isAssignAdd());
1489:       assertEquals((-1), node0.getSourcePosition());
1490:       assertFalse(node0.isDec());
1491:       assertFalse(node0.isLabel());
1492:       assertFalse(node0.hasChildren());
1493:       assertFalse(node0.isString());
1494:       assertFalse(node0.isWhile());
1495:       assertFalse(node0.isEmpty());
1496:       assertFalse(node0.isDo());
1497:       assertFalse(node0.isNew());
1498:       assertFalse(node0.isAdd());
1499:       assertFalse(node0.isTrue());
1500:       assertFalse(node0.isDelProp());
1501:       assertFalse(node0.isAssign());
1502:       assertFalse(node0.isName());
1503:       assertFalse(node0.isTypeOf());
1504:       assertFalse(node0.isExprResult());
1505:       assertFalse(node0.isCall());
1506:       assertFalse(node0.isVoid());
1507:       assertFalse(node0.isGetElem());
1508:       assertFalse(node0.isBreak());
1509:       assertTrue(node0.isParamList());
1510:       assertFalse(node0.isInstanceOf());
1511:       assertFalse(node0.isThis());
1512:       assertFalse(node0.isObjectLit());
1513:       assertFalse(node0.isComma());
1514:       assertFalse(node0.isNot());
1515:       assertEquals(83, node0.getType());
1516:       assertFalse(node0.isScript());
1517:       assertFalse(node0.isGetProp());
1518:       assertFalse(node0.isThrow());
1519:       assertEquals((-1), node0.getCharno());
1520:       assertFalse(node0.isLabelName());
1521:       assertFalse(node0.isFalse());
1522:       assertFalse(node0.isSwitch());
1523:       assertFalse(node0.isAnd());
1524:       assertFalse(node0.isCast());
1525:       assertEquals((-1), node0.getLineno());
1526:       assertFalse(node0.isIn());
1527:       assertFalse(node0.hasMoreThanOneChild());
1528:       assertFalse(node0.isNE());
1529:       assertFalse(node0.isFor());
1530:       assertFalse(node0.isGetterDef());
1531:       assertFalse(node0.isNumber());
1532:       assertFalse(node0.isInc());
1533:       assertFalse(node0.isCase());
1534:       assertFalse(node0.hasOneChild());
1535:       assertFalse(node0.isTry());
1536:       assertFalse(node0.isHook());
1537:       assertFalse(node0.isBlock());
1538:       assertFalse(node0.isRegExp());
1539:       assertFalse(node0.isIf());
1540:       assertFalse(node0.isWith());
1541:       assertFalse(node0.isCatch());
1542:       assertFalse(node1.isExprResult());
1543:       assertFalse(node1.isAnd());
1544:       assertFalse(node1.isLabelName());
1545:       assertFalse(node1.isAssign());
1546:       assertFalse(node1.isWith());
1547:       assertFalse(node1.isGetElem());
1548:       assertFalse(node1.isInstanceOf());
1549:       assertFalse(node1.isCast());
1550:       assertFalse(node1.isThis());
1551:       assertFalse(node1.isComma());
1552:       assertFalse(node1.isGetProp());
1553:       assertEquals((-1), node1.getSourcePosition());
1554:       assertFalse(node1.isTypeOf());
1555:       assertFalse(node1.isDec());
1556:       assertFalse(node1.isReturn());
1557:       assertFalse(node1.hasChildren());
1558:       assertFalse(node1.isObjectLit());
1559:       assertFalse(node1.hasOneChild());
1560:       assertFalse(node1.isNot());
1561:       assertFalse(node1.isNumber());
1562:       assertFalse(node1.isScript());
1563:       assertFalse(node1.isSwitch());
1564:       assertEquals((-1), node1.getCharno());
1565:       assertFalse(node1.isNew());
1566:       assertFalse(node1.isWhile());
1567:       assertFalse(node1.isVar());
1568:       assertFalse(node1.isCall());
1569:       assertFalse(node1.isName());
1570:       assertFalse(node1.isBreak());
1571:       assertFalse(node1.isOr());
1572:       assertFalse(node1.isLabel());
1573:       assertFalse(node1.isAssignAdd());
1574:       assertFalse(node1.isNull());
1575:       assertFalse(node1.isDo());
1576:       assertFalse(node1.isAdd());
1577:       assertFalse(node1.isEmpty());
1578:       assertFalse(node1.isDebugger());
1579:       assertFalse(node1.isFunction());
1580:       assertFalse(node1.isTrue());
1581:       assertFalse(node1.isRegExp());
1582:       assertFalse(node1.isTry());
1583:       assertFalse(node1.isVoid());
1584:       assertFalse(node1.isDefaultCase());
1585:       assertFalse(node1.isArrayLit());
1586:       assertEquals(0, node1.getChildCount());
1587:       assertFalse(node1.isCatch());
1588:       assertFalse(node1.isParamList());
1589:       assertFalse(node1.isFor());
1590:       assertFalse(node1.isStringKey());
1591:       assertFalse(node1.isCase());
1592:       assertFalse(node1.isString());
1593:       assertFalse(node1.isGetterDef());
1594:       assertFalse(node1.isInc());
1595:       assertFalse(node1.isHook());
1596:       assertFalse(node1.isBlock());
1597:       assertFalse(node1.isContinue());
1598:       assertFalse(node1.isFalse());
1599:       assertFalse(node1.hasMoreThanOneChild());
1600:       assertEquals((-1), node1.getLineno());
1601:       assertEquals(31, node1.getType());
1602:       assertFalse(node1.isSetterDef());
1603:       assertTrue(node1.isDelProp());
1604:       assertFalse(node1.isIf());
1605:       assertFalse(node1.isNE());
1606:       assertFalse(node1.isThrow());
1607:       assertFalse(node1.isIn());
1608:       assertFalse(node2.equals((Object)node0));
1609:       assertFalse(node0.equals((Object)node1));
1610:       assertFalse(node1.equals((Object)node0));
1611:       
1612:       Charset charset0 = Charset.defaultCharset();
1613:       assertNotNull(charset0);
1614:       assertTrue(charset0.canEncode());
1615:       assertEquals("US-ASCII", charset0.toString());
1616:       assertEquals("US-ASCII", charset0.name());
1617:       assertTrue(charset0.isRegistered());
1618:       assertEquals("US-ASCII", charset0.displayName());
1619:       
1620:       ByteBuffer byteBuffer0 = ByteBuffer.allocate(29);
1621:       assertNotNull(byteBuffer0);
1622:       assertEquals(29, byteBuffer0.remaining());
1623:       assertFalse(byteBuffer0.isDirect());
1624:       assertEquals(29, byteBuffer0.capacity());
1625:       assertEquals("java.nio.HeapByteBuffer[pos=0 lim=29 cap=29]", byteBuffer0.toString());
1626:       assertEquals(0, byteBuffer0.arrayOffset());
1627:       assertTrue(byteBuffer0.hasRemaining());
1628:       assertEquals(29, byteBuffer0.limit());
1629:       assertFalse(byteBuffer0.isReadOnly());
1630:       assertTrue(byteBuffer0.hasArray());
1631:       assertEquals(0, byteBuffer0.position());
1632:       
1633:       CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
1634:       assertNotNull(charBuffer0);
1635:       assertTrue(charset0.canEncode());
1636:       assertEquals("US-ASCII", charset0.toString());
1637:       assertEquals("US-ASCII", charset0.name());
1638:       assertTrue(charset0.isRegistered());
1639:       assertEquals("US-ASCII", charset0.displayName());
1640:       assertFalse(byteBuffer0.isDirect());
1641:       assertEquals(29, byteBuffer0.capacity());
1642:       assertFalse(byteBuffer0.hasRemaining());
1643:       assertEquals(0, byteBuffer0.arrayOffset());
1644:       assertEquals("java.nio.HeapByteBuffer[pos=29 lim=29 cap=29]", byteBuffer0.toString());
1645:       assertEquals(0, byteBuffer0.remaining());
1646:       assertEquals(29, byteBuffer0.position());
1647:       assertEquals(29, byteBuffer0.limit());
1648:       assertFalse(byteBuffer0.isReadOnly());
1649:       assertTrue(byteBuffer0.hasArray());
1650:       assertFalse(charBuffer0.isDirect());
1651:       assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
1652:       assertTrue(charBuffer0.hasArray());
1653:       assertEquals(0, charBuffer0.arrayOffset());
1654:       assertEquals(29, charBuffer0.remaining());
1655:       assertEquals(29, charBuffer0.capacity());
1656:       assertEquals(0, charBuffer0.position());
1657:       assertEquals(29, charBuffer0.limit());
1658:       assertEquals(29, charBuffer0.length());
1659:       assertFalse(charBuffer0.isReadOnly());
1660:       assertTrue(charBuffer0.hasRemaining());
1661:       
1662:       node2.appendStringTree(charBuffer0);
1663:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1664:       assertEquals(52, Node.LENGTH);
1665:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1666:       assertEquals(30, Node.VAR_ARGS_NAME);
1667:       assertEquals(32, Node.INCRDECR_PROP);
1668:       assertEquals(1, Node.DECR_FLAG);
1669:       assertEquals(57, Node.LAST_PROP);
1670:       assertEquals(12, Node.COLUMN_BITS);
1671:       assertEquals(37, Node.OPT_ARG_NAME);
1672:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1673:       assertEquals(8, Node.FLAG_NO_THROWS);
1674:       assertEquals(39, Node.EMPTY_BLOCK);
1675:       assertEquals(48, Node.DIRECTIVES);
1676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1677:       assertEquals(55, Node.INFERRED_FUNCTION);
1678:       assertEquals(29, Node.JSDOC_INFO_PROP);
1679:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1680:       assertEquals(49, Node.DIRECT_EVAL);
1681:       assertEquals(56, Node.CHANGE_TIME);
1682:       assertEquals(57, Node.REFLECTED_OBJECT);
1683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1684:       assertEquals(36, Node.QUOTED_PROP);
1685:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1686:       assertEquals(53, Node.INPUT_ID);
1687:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1688:       assertEquals(4095, Node.COLUMN_MASK);
1689:       assertEquals(47, Node.IS_DISPATCHER);
1690:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1691:       assertEquals(2, Node.POST_FLAG);
1692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1693:       assertEquals(40, Node.ORIGINALNAME_PROP);
1694:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1695:       assertEquals(50, Node.FREE_CALL);
1696:       assertEquals(43, Node.IS_CONSTANT_NAME);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(54, Node.SLASH_V);
1699:       assertEquals(55, Node.INFERRED_FUNCTION);
1700:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1701:       assertEquals(39, Node.EMPTY_BLOCK);
1702:       assertEquals(48, Node.DIRECTIVES);
1703:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1704:       assertEquals(43, Node.IS_CONSTANT_NAME);
1705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1706:       assertEquals(8, Node.FLAG_NO_THROWS);
1707:       assertEquals(36, Node.QUOTED_PROP);
1708:       assertEquals(50, Node.FREE_CALL);
1709:       assertEquals(52, Node.LENGTH);
1710:       assertEquals(53, Node.INPUT_ID);
1711:       assertEquals(54, Node.SLASH_V);
1712:       assertEquals(40, Node.ORIGINALNAME_PROP);
1713:       assertEquals(57, Node.LAST_PROP);
1714:       assertEquals(47, Node.IS_DISPATCHER);
1715:       assertEquals(2, Node.POST_FLAG);
1716:       assertEquals(30, Node.VAR_ARGS_NAME);
1717:       assertEquals(12, Node.COLUMN_BITS);
1718:       assertEquals(46, Node.IS_NAMESPACE);
1719:       assertEquals(37, Node.OPT_ARG_NAME);
1720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1721:       assertEquals(49, Node.DIRECT_EVAL);
1722:       assertEquals(32, Node.INCRDECR_PROP);
1723:       assertEquals(1, Node.DECR_FLAG);
1724:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1726:       assertEquals(56, Node.CHANGE_TIME);
1727:       assertEquals(29, Node.JSDOC_INFO_PROP);
1728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1729:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1730:       assertEquals(57, Node.REFLECTED_OBJECT);
1731:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1734:       assertEquals(4095, Node.COLUMN_MASK);
1735:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1736:       assertEquals(43, Node.IS_CONSTANT_NAME);
1737:       assertEquals(53, Node.INPUT_ID);
1738:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1739:       assertEquals(4095, Node.COLUMN_MASK);
1740:       assertEquals(47, Node.IS_DISPATCHER);
1741:       assertEquals(2, Node.POST_FLAG);
1742:       assertEquals(32, Node.INCRDECR_PROP);
1743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1744:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1745:       assertEquals(46, Node.IS_NAMESPACE);
1746:       assertEquals(50, Node.FREE_CALL);
1747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1748:       assertEquals(54, Node.SLASH_V);
1749:       assertEquals(52, Node.LENGTH);
1750:       assertEquals(57, Node.LAST_PROP);
1751:       assertEquals(49, Node.DIRECT_EVAL);
1752:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1753:       assertEquals(40, Node.ORIGINALNAME_PROP);
1754:       assertEquals(1, Node.DECR_FLAG);
1755:       assertEquals(30, Node.VAR_ARGS_NAME);
1756:       assertEquals(12, Node.COLUMN_BITS);
1757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1758:       assertEquals(37, Node.OPT_ARG_NAME);
1759:       assertEquals(48, Node.DIRECTIVES);
1760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1761:       assertEquals(56, Node.CHANGE_TIME);
1762:       assertEquals(8, Node.FLAG_NO_THROWS);
1763:       assertEquals(29, Node.JSDOC_INFO_PROP);
1764:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1765:       assertEquals(39, Node.EMPTY_BLOCK);
1766:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1767:       assertEquals(55, Node.INFERRED_FUNCTION);
1768:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1769:       assertEquals(36, Node.QUOTED_PROP);
1770:       assertEquals(57, Node.REFLECTED_OBJECT);
1771:       assertNotSame(node2, node0);
1772:       assertSame(node2, node1);
1773:       assertNotSame(node0, node1);
1774:       assertNotSame(node0, node2);
1775:       assertNotSame(node1, node0);
1776:       assertSame(node1, node2);
1777:       assertFalse(node2.isBlock());
1778:       assertFalse(node2.isNew());
1779:       assertEquals(31, node2.getType());
1780:       assertFalse(node2.isWhile());
1781:       assertFalse(node2.isDo());
1782:       assertFalse(node2.isCall());
1783:       assertFalse(node2.isVar());
1784:       assertFalse(node2.isContinue());
1785:       assertFalse(node2.hasMoreThanOneChild());
1786:       assertFalse(node2.isSetterDef());
1787:       assertFalse(node2.isNull());
1788:       assertTrue(node2.isDelProp());
1789:       assertFalse(node2.isLabel());
1790:       assertEquals((-1), node2.getLineno());
1791:       assertFalse(node2.isName());
1792:       assertFalse(node2.isAssignAdd());
1793:       assertFalse(node2.isOr());
1794:       assertFalse(node2.isAdd());
1795:       assertFalse(node2.isScript());
1796:       assertFalse(node2.isTry());
1797:       assertFalse(node2.isDefaultCase());
1798:       assertFalse(node2.isCatch());
1799:       assertFalse(node2.isArrayLit());
1800:       assertEquals(0, node2.getChildCount());
1801:       assertFalse(node2.isRegExp());
1802:       assertFalse(node2.isInstanceOf());
1803:       assertFalse(node2.isWith());
1804:       assertFalse(node2.isParamList());
1805:       assertFalse(node2.isThis());
1806:       assertFalse(node2.isFor());
1807:       assertFalse(node2.isLabelName());
1808:       assertFalse(node2.isStringKey());
1809:       assertFalse(node2.isCase());
1810:       assertFalse(node2.hasOneChild());
1811:       assertFalse(node2.isGetterDef());
1812:       assertFalse(node2.isNumber());
1813:       assertFalse(node2.isInc());
1814:       assertEquals((-1), node2.getCharno());
1815:       assertFalse(node2.isSwitch());
1816:       assertFalse(node2.isThrow());
1817:       assertFalse(node2.isHook());
1818:       assertFalse(node2.isFalse());
1819:       assertFalse(node2.isNE());
1820:       assertFalse(node2.isBreak());
1821:       assertFalse(node2.isIf());
1822:       assertFalse(node2.isEmpty());
1823:       assertFalse(node2.isIn());
1824:       assertFalse(node2.isFunction());
1825:       assertFalse(node2.isExprResult());
1826:       assertFalse(node2.isTrue());
1827:       assertFalse(node2.isVoid());
1828:       assertFalse(node2.isDebugger());
1829:       assertFalse(node2.isAnd());
1830:       assertFalse(node2.isCast());
1831:       assertFalse(node2.isGetElem());
1832:       assertFalse(node2.isAssign());
1833:       assertFalse(node2.isTypeOf());
1834:       assertFalse(node2.isComma());
1835:       assertEquals((-1), node2.getSourcePosition());
1836:       assertFalse(node2.isDec());
1837:       assertFalse(node2.hasChildren());
1838:       assertFalse(node2.isGetProp());
1839:       assertFalse(node2.isReturn());
1840:       assertFalse(node2.isObjectLit());
1841:       assertFalse(node2.isString());
1842:       assertFalse(node2.isNot());
1843:       assertTrue(charset0.canEncode());
1844:       assertEquals("US-ASCII", charset0.toString());
1845:       assertEquals("US-ASCII", charset0.name());
1846:       assertTrue(charset0.isRegistered());
1847:       assertEquals("US-ASCII", charset0.displayName());
1848:       assertFalse(byteBuffer0.isDirect());
1849:       assertEquals(29, byteBuffer0.capacity());
1850:       assertFalse(byteBuffer0.hasRemaining());
1851:       assertEquals(0, byteBuffer0.arrayOffset());
1852:       assertEquals("java.nio.HeapByteBuffer[pos=29 lim=29 cap=29]", byteBuffer0.toString());
1853:       assertEquals(0, byteBuffer0.remaining());
1854:       assertEquals(29, byteBuffer0.position());
1855:       assertEquals(29, byteBuffer0.limit());
1856:       assertFalse(byteBuffer0.isReadOnly());
1857:       assertTrue(byteBuffer0.hasArray());
1858:       assertFalse(charBuffer0.isDirect());
1859:       assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
1860:       assertEquals(21, charBuffer0.remaining());
1861:       assertTrue(charBuffer0.hasArray());
1862:       assertEquals(8, charBuffer0.position());
1863:       assertEquals(21, charBuffer0.length());
1864:       assertEquals(0, charBuffer0.arrayOffset());
1865:       assertEquals(29, charBuffer0.capacity());
1866:       assertEquals(29, charBuffer0.limit());
1867:       assertFalse(charBuffer0.isReadOnly());
1868:       assertTrue(charBuffer0.hasRemaining());
1869:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1870:       assertEquals(0, vector0.size());
1871:       assertEquals(10, vector0.capacity());
1872:       assertTrue(vector0.isEmpty());
1873:       assertEquals("[]", vector0.toString());
1874:       assertEquals(0, node0.getChildCount());
1875:       assertFalse(node0.isNull());
1876:       assertFalse(node0.isDefaultCase());
1877:       assertFalse(node0.isSetterDef());
1878:       assertFalse(node0.isDebugger());
1879:       assertFalse(node0.isFunction());
1880:       assertFalse(node0.isVar());
1881:       assertFalse(node0.isStringKey());
1882:       assertFalse(node0.isContinue());
1883:       assertFalse(node0.isArrayLit());
1884:       assertFalse(node0.isReturn());
1885:       assertFalse(node0.isOr());
1886:       assertFalse(node0.isAssignAdd());
1887:       assertEquals((-1), node0.getSourcePosition());
1888:       assertFalse(node0.isDec());
1889:       assertFalse(node0.isLabel());
1890:       assertFalse(node0.hasChildren());
1891:       assertFalse(node0.isString());
1892:       assertFalse(node0.isWhile());
1893:       assertFalse(node0.isEmpty());
1894:       assertFalse(node0.isDo());
1895:       assertFalse(node0.isNew());
1896:       assertFalse(node0.isAdd());
1897:       assertFalse(node0.isTrue());
1898:       assertFalse(node0.isDelProp());
1899:       assertFalse(node0.isAssign());
1900:       assertFalse(node0.isName());
1901:       assertFalse(node0.isTypeOf());
1902:       assertFalse(node0.isExprResult());
1903:       assertFalse(node0.isCall());
1904:       assertFalse(node0.isVoid());
1905:       assertFalse(node0.isGetElem());
1906:       assertFalse(node0.isBreak());
1907:       assertTrue(node0.isParamList());
1908:       assertFalse(node0.isInstanceOf());
1909:       assertFalse(node0.isThis());
1910:       assertFalse(node0.isObjectLit());
1911:       assertFalse(node0.isComma());
1912:       assertFalse(node0.isNot());
1913:       assertEquals(83, node0.getType());
1914:       assertFalse(node0.isScript());
1915:       assertFalse(node0.isGetProp());
1916:       assertFalse(node0.isThrow());
1917:       assertEquals((-1), node0.getCharno());
1918:       assertFalse(node0.isLabelName());
1919:       assertFalse(node0.isFalse());
1920:       assertFalse(node0.isSwitch());
1921:       assertFalse(node0.isAnd());
1922:       assertFalse(node0.isCast());
1923:       assertEquals((-1), node0.getLineno());
1924:       assertFalse(node0.isIn());
1925:       assertFalse(node0.hasMoreThanOneChild());
1926:       assertFalse(node0.isNE());
1927:       assertFalse(node0.isFor());
1928:       assertFalse(node0.isGetterDef());
1929:       assertFalse(node0.isNumber());
1930:       assertFalse(node0.isInc());
1931:       assertFalse(node0.isCase());
1932:       assertFalse(node0.hasOneChild());
1933:       assertFalse(node0.isTry());
1934:       assertFalse(node0.isHook());
1935:       assertFalse(node0.isBlock());
1936:       assertFalse(node0.isRegExp());
1937:       assertFalse(node0.isIf());
1938:       assertFalse(node0.isWith());
1939:       assertFalse(node0.isCatch());
1940:       assertFalse(node1.isExprResult());
1941:       assertFalse(node1.isAnd());
1942:       assertFalse(node1.isLabelName());
1943:       assertFalse(node1.isAssign());
1944:       assertFalse(node1.isWith());
1945:       assertFalse(node1.isGetElem());
1946:       assertFalse(node1.isInstanceOf());
1947:       assertFalse(node1.isCast());
1948:       assertFalse(node1.isThis());
1949:       assertFalse(node1.isComma());
1950:       assertFalse(node1.isGetProp());
1951:       assertEquals((-1), node1.getSourcePosition());
1952:       assertFalse(node1.isTypeOf());
1953:       assertFalse(node1.isDec());
1954:       assertFalse(node1.isReturn());
1955:       assertFalse(node1.hasChildren());
1956:       assertFalse(node1.isObjectLit());
1957:       assertFalse(node1.hasOneChild());
1958:       assertFalse(node1.isNot());
1959:       assertFalse(node1.isNumber());
1960:       assertFalse(node1.isScript());
1961:       assertFalse(node1.isSwitch());
1962:       assertEquals((-1), node1.getCharno());
1963:       assertFalse(node1.isNew());
1964:       assertFalse(node1.isWhile());
1965:       assertFalse(node1.isVar());
1966:       assertFalse(node1.isCall());
1967:       assertFalse(node1.isName());
1968:       assertFalse(node1.isBreak());
1969:       assertFalse(node1.isOr());
1970:       assertFalse(node1.isLabel());
1971:       assertFalse(node1.isAssignAdd());
1972:       assertFalse(node1.isNull());
1973:       assertFalse(node1.isDo());
1974:       assertFalse(node1.isAdd());
1975:       assertFalse(node1.isEmpty());
1976:       assertFalse(node1.isDebugger());
1977:       assertFalse(node1.isFunction());
1978:       assertFalse(node1.isTrue());
1979:       assertFalse(node1.isRegExp());
1980:       assertFalse(node1.isTry());
1981:       assertFalse(node1.isVoid());
1982:       assertFalse(node1.isDefaultCase());
1983:       assertFalse(node1.isArrayLit());
1984:       assertEquals(0, node1.getChildCount());
1985:       assertFalse(node1.isCatch());
1986:       assertFalse(node1.isParamList());
1987:       assertFalse(node1.isFor());
1988:       assertFalse(node1.isStringKey());
1989:       assertFalse(node1.isCase());
1990:       assertFalse(node1.isString());
1991:       assertFalse(node1.isGetterDef());
1992:       assertFalse(node1.isInc());
1993:       assertFalse(node1.isHook());
1994:       assertFalse(node1.isBlock());
1995:       assertFalse(node1.isContinue());
1996:       assertFalse(node1.isFalse());
1997:       assertFalse(node1.hasMoreThanOneChild());
1998:       assertEquals((-1), node1.getLineno());
1999:       assertEquals(31, node1.getType());
2000:       assertFalse(node1.isSetterDef());
2001:       assertTrue(node1.isDelProp());
2002:       assertFalse(node1.isIf());
2003:       assertFalse(node1.isNE());
2004:       assertFalse(node1.isThrow());
2005:       assertFalse(node1.isIn());
2006:       assertFalse(node2.equals((Object)node0));
2007:       assertFalse(node0.equals((Object)node1));
2008:       assertFalse(node0.equals((Object)node2));
2009:       assertFalse(node1.equals((Object)node0));
2010:   }
2011: }
RegularFileObject[/tmp/EvoSuite_269_1628159660754/com/google/javascript/rhino/Node_269_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:34:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_269_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_269_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_269_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.TemplatizedType",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.Iterators$12",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.common.collect.ImmutableList$1"
373:     );
374:   }
375: }

[MASTER] 10:34:21.270 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags1.valueOf());

boolean boolean0 = node_SideEffectFlags1.areAllFlagsSet();
assertFalse(boolean0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags1.valueOf());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());

Iterable<Node> iterable0 = node0.children();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.mayMutateArguments();
assertTrue(boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(boolean1 == boolean0);

InputId inputId0 = node0.getInputId();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNull(inputId0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());

node0.removeProp((-1129));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());

Node node1 = new Node(31, 51, 147);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node1);
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertEquals(51, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertEquals(147, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(209043, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(31, node1.getType());
assertFalse(node1.isSetterDef());
assertTrue(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node0.isEquivalentTo(node1, true, false, false);
assertFalse(boolean2);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertEquals(51, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertEquals(147, node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertEquals(209043, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(31, node1.getType());
assertFalse(node1.isSetterDef());
assertTrue(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

String string0 = node0.toString(true, false, false);
assertEquals("PARAM_LIST", string0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(string0);
assertNotSame(node0, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.equals((Object)node1));

boolean boolean3 = node0.isReturn();
assertFalse(boolean3);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

boolean boolean4 = node0.isDo();
assertFalse(boolean4);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node0.equals((Object)node1));

Node node2 = node1.copyInformationFrom(node0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node2);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals(31, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertEquals(31, node1.getType());
assertFalse(node1.isSetterDef());
assertTrue(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node2.equals((Object)node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

Charset charset0 = Charset.defaultCharset();
assertNotNull(charset0);
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());

ByteBuffer byteBuffer0 = ByteBuffer.allocate(29);
assertNotNull(byteBuffer0);
assertEquals(29, byteBuffer0.remaining());
assertFalse(byteBuffer0.isDirect());
assertEquals(29, byteBuffer0.capacity());
assertEquals("java.nio.HeapByteBuffer[pos=0 lim=29 cap=29]", byteBuffer0.toString());
assertEquals(0, byteBuffer0.arrayOffset());
assertTrue(byteBuffer0.hasRemaining());
assertEquals(29, byteBuffer0.limit());
assertFalse(byteBuffer0.isReadOnly());
assertTrue(byteBuffer0.hasArray());
assertEquals(0, byteBuffer0.position());

CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
assertNotNull(charBuffer0);
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertFalse(byteBuffer0.isDirect());
assertEquals(29, byteBuffer0.capacity());
assertFalse(byteBuffer0.hasRemaining());
assertEquals(0, byteBuffer0.arrayOffset());
assertEquals("java.nio.HeapByteBuffer[pos=29 lim=29 cap=29]", byteBuffer0.toString());
assertEquals(0, byteBuffer0.remaining());
assertEquals(29, byteBuffer0.position());
assertEquals(29, byteBuffer0.limit());
assertFalse(byteBuffer0.isReadOnly());
assertTrue(byteBuffer0.hasArray());
assertFalse(charBuffer0.isDirect());
assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
assertTrue(charBuffer0.hasArray());
assertEquals(0, charBuffer0.arrayOffset());
assertEquals(29, charBuffer0.remaining());
assertEquals(29, charBuffer0.capacity());
assertEquals(0, charBuffer0.position());
assertEquals(29, charBuffer0.limit());
assertEquals(29, charBuffer0.length());
assertFalse(charBuffer0.isReadOnly());
assertTrue(charBuffer0.hasRemaining());

node2.appendStringTree(charBuffer0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals(31, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertTrue(node2.isDelProp());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertTrue(charset0.canEncode());
assertEquals("US-ASCII", charset0.toString());
assertEquals("US-ASCII", charset0.name());
assertTrue(charset0.isRegistered());
assertEquals("US-ASCII", charset0.displayName());
assertFalse(byteBuffer0.isDirect());
assertEquals(29, byteBuffer0.capacity());
assertFalse(byteBuffer0.hasRemaining());
assertEquals(0, byteBuffer0.arrayOffset());
assertEquals("java.nio.HeapByteBuffer[pos=29 lim=29 cap=29]", byteBuffer0.toString());
assertEquals(0, byteBuffer0.remaining());
assertEquals(29, byteBuffer0.position());
assertEquals(29, byteBuffer0.limit());
assertFalse(byteBuffer0.isReadOnly());
assertTrue(byteBuffer0.hasArray());
assertFalse(charBuffer0.isDirect());
assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
assertEquals(21, charBuffer0.remaining());
assertTrue(charBuffer0.hasArray());
assertEquals(8, charBuffer0.position());
assertEquals(21, charBuffer0.length());
assertEquals(0, charBuffer0.arrayOffset());
assertEquals(29, charBuffer0.capacity());
assertEquals(29, charBuffer0.limit());
assertFalse(charBuffer0.isReadOnly());
assertTrue(charBuffer0.hasRemaining());
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertEquals(83, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertEquals(31, node1.getType());
assertFalse(node1.isSetterDef());
assertTrue(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node2.equals((Object)node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));


[MASTER] 10:34:36.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:36.396 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:36.703 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:36.899 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:37.115 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:37.301 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:37.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:37.665 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:37.842 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:38.057 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:38.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:38.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:38.725 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:38.914 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:39.097 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:39.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:39.451 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:40.158 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:40.330 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:40.530 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:40.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:40.938 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:41.130 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:41.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:41.482 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:41.695 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:41.895 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:42.108 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:42.288 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:34:42.464 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/16
* Done!

* Computation finished
