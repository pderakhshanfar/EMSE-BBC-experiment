* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14063
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3946817594
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:45:11.160 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:45:29.079 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:46:05.405 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 440 generations, 194710 statements, best individual has fitness: 2918.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 17:56:36.240 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 602
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2180
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 562
* Generated 720 tests with total length 9669
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:57:51.281 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6930666666666667% of time used, but only 40/720 tests minimized), falling back to using all assertions
[MASTER] 17:58:09.879 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 17:58:20.898 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 17:58:35.312 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1629223115220/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1629223115220/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:35.312 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:35.312 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:35.316 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 859
[MASTER] 17:58:35.317 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1629223115220/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(0.0, 1255, 1255);
21:       assertNotNull(node0);
22:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
23:       assertEquals(4095, Node.COLUMN_MASK);
24:       assertEquals(55, Node.INFERRED_FUNCTION);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(8, Node.FLAG_NO_THROWS);
28:       assertEquals(39, Node.EMPTY_BLOCK);
29:       assertEquals(43, Node.IS_CONSTANT_NAME);
30:       assertEquals(53, Node.INPUT_ID);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(36, Node.QUOTED_PROP);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(12, Node.COLUMN_BITS);
41:       assertEquals(32, Node.INCRDECR_PROP);
42:       assertEquals(15, Node.NO_SIDE_EFFECTS);
43:       assertEquals(57, Node.LAST_PROP);
44:       assertEquals(49, Node.DIRECT_EVAL);
45:       assertEquals(1, Node.DECR_FLAG);
46:       assertEquals(54, Node.SLASH_V);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(46, Node.IS_NAMESPACE);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(57, Node.REFLECTED_OBJECT);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertFalse(node0.isReturn());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isLabel());
61:       assertFalse(node0.isAssignAdd());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isBlock());
64:       assertEquals(5141735, node0.getSourcePosition());
65:       assertFalse(node0.hasOneChild());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isWhile());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isDec());
70:       assertFalse(node0.isGetElem());
71:       assertEquals(39, node0.getType());
72:       assertFalse(node0.hasChildren());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isExprResult());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isWith());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isParamList());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isArrayLit());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isDefaultCase());
90:       assertFalse(node0.isLabelName());
91:       assertTrue(node0.isNumber());
92:       assertFalse(node0.isNE());
93:       assertFalse(node0.isIf());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isString());
96:       assertFalse(node0.isEmpty());
97:       assertFalse(node0.isCase());
98:       assertFalse(node0.isInc());
99:       assertFalse(node0.isIn());
100:       assertFalse(node0.isTry());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isTrue());
103:       assertFalse(node0.isVoid());
104:       assertFalse(node0.isDelProp());
105:       assertFalse(node0.isFor());
106:       assertFalse(node0.isBreak());
107:       assertFalse(node0.isCatch());
108:       assertFalse(node0.isComma());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isInstanceOf());
111:       assertFalse(node0.isGetProp());
112:       assertFalse(node0.isAnd());
113:       assertEquals(1255, node0.getCharno());
114:       assertFalse(node0.isNot());
115:       assertFalse(node0.isSetterDef());
116:       assertFalse(node0.isDebugger());
117:       assertFalse(node0.isObjectLit());
118:       assertFalse(node0.isThrow());
119:       assertEquals(1255, node0.getLineno());
120:       assertFalse(node0.isFunction());
121:       assertFalse(node0.isContinue());
122:       assertFalse(node0.isCast());
123:       assertFalse(node0.isFalse());
124:       
125:       String string0 = node0.getSourceFileName();
126:       assertNull(string0);
127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(48, Node.DIRECTIVES);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(39, Node.EMPTY_BLOCK);
134:       assertEquals(43, Node.IS_CONSTANT_NAME);
135:       assertEquals(53, Node.INPUT_ID);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(36, Node.QUOTED_PROP);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(30, Node.VAR_ARGS_NAME);
145:       assertEquals(12, Node.COLUMN_BITS);
146:       assertEquals(32, Node.INCRDECR_PROP);
147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
148:       assertEquals(57, Node.LAST_PROP);
149:       assertEquals(49, Node.DIRECT_EVAL);
150:       assertEquals(1, Node.DECR_FLAG);
151:       assertEquals(54, Node.SLASH_V);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(46, Node.IS_NAMESPACE);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(57, Node.REFLECTED_OBJECT);
156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertFalse(node0.isReturn());
164:       assertFalse(node0.isOr());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isAssignAdd());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isBlock());
169:       assertEquals(5141735, node0.getSourcePosition());
170:       assertFalse(node0.hasOneChild());
171:       assertFalse(node0.isName());
172:       assertFalse(node0.isWhile());
173:       assertFalse(node0.isAssign());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isGetElem());
176:       assertEquals(39, node0.getType());
177:       assertFalse(node0.hasChildren());
178:       assertFalse(node0.isCall());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isTypeOf());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isWith());
183:       assertEquals(0, node0.getChildCount());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.isNull());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isAdd());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isVar());
193:       assertFalse(node0.isSwitch());
194:       assertFalse(node0.isDefaultCase());
195:       assertFalse(node0.isLabelName());
196:       assertTrue(node0.isNumber());
197:       assertFalse(node0.isNE());
198:       assertFalse(node0.isIf());
199:       assertFalse(node0.isGetterDef());
200:       assertFalse(node0.isString());
201:       assertFalse(node0.isEmpty());
202:       assertFalse(node0.isCase());
203:       assertFalse(node0.isInc());
204:       assertFalse(node0.isIn());
205:       assertFalse(node0.isTry());
206:       assertFalse(node0.isHook());
207:       assertFalse(node0.isTrue());
208:       assertFalse(node0.isVoid());
209:       assertFalse(node0.isDelProp());
210:       assertFalse(node0.isFor());
211:       assertFalse(node0.isBreak());
212:       assertFalse(node0.isCatch());
213:       assertFalse(node0.isComma());
214:       assertFalse(node0.isRegExp());
215:       assertFalse(node0.isInstanceOf());
216:       assertFalse(node0.isGetProp());
217:       assertFalse(node0.isAnd());
218:       assertEquals(1255, node0.getCharno());
219:       assertFalse(node0.isNot());
220:       assertFalse(node0.isSetterDef());
221:       assertFalse(node0.isDebugger());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isThrow());
224:       assertEquals(1255, node0.getLineno());
225:       assertFalse(node0.isFunction());
226:       assertFalse(node0.isContinue());
227:       assertFalse(node0.isCast());
228:       assertFalse(node0.isFalse());
229:       
230:       node0.detachChildren();
231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
232:       assertEquals(4095, Node.COLUMN_MASK);
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(48, Node.DIRECTIVES);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(8, Node.FLAG_NO_THROWS);
237:       assertEquals(39, Node.EMPTY_BLOCK);
238:       assertEquals(43, Node.IS_CONSTANT_NAME);
239:       assertEquals(53, Node.INPUT_ID);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(36, Node.QUOTED_PROP);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(40, Node.ORIGINALNAME_PROP);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(32, Node.INCRDECR_PROP);
251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(49, Node.DIRECT_EVAL);
254:       assertEquals(1, Node.DECR_FLAG);
255:       assertEquals(54, Node.SLASH_V);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(52, Node.LENGTH);
259:       assertEquals(57, Node.REFLECTED_OBJECT);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertFalse(node0.isReturn());
268:       assertFalse(node0.isOr());
269:       assertFalse(node0.isLabel());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isDo());
272:       assertFalse(node0.isBlock());
273:       assertEquals(5141735, node0.getSourcePosition());
274:       assertFalse(node0.hasOneChild());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isWhile());
277:       assertFalse(node0.isAssign());
278:       assertFalse(node0.isDec());
279:       assertFalse(node0.isGetElem());
280:       assertEquals(39, node0.getType());
281:       assertFalse(node0.hasChildren());
282:       assertFalse(node0.isCall());
283:       assertFalse(node0.isExprResult());
284:       assertFalse(node0.isTypeOf());
285:       assertFalse(node0.hasMoreThanOneChild());
286:       assertFalse(node0.isWith());
287:       assertEquals(0, node0.getChildCount());
288:       assertFalse(node0.isParamList());
289:       assertFalse(node0.isThis());
290:       assertFalse(node0.isScript());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isArrayLit());
293:       assertFalse(node0.isAdd());
294:       assertFalse(node0.isNew());
295:       assertFalse(node0.isStringKey());
296:       assertFalse(node0.isVar());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isDefaultCase());
299:       assertFalse(node0.isLabelName());
300:       assertTrue(node0.isNumber());
301:       assertFalse(node0.isNE());
302:       assertFalse(node0.isIf());
303:       assertFalse(node0.isGetterDef());
304:       assertFalse(node0.isString());
305:       assertFalse(node0.isEmpty());
306:       assertFalse(node0.isCase());
307:       assertFalse(node0.isInc());
308:       assertFalse(node0.isIn());
309:       assertFalse(node0.isTry());
310:       assertFalse(node0.isHook());
311:       assertFalse(node0.isTrue());
312:       assertFalse(node0.isVoid());
313:       assertFalse(node0.isDelProp());
314:       assertFalse(node0.isFor());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isCatch());
317:       assertFalse(node0.isComma());
318:       assertFalse(node0.isRegExp());
319:       assertFalse(node0.isInstanceOf());
320:       assertFalse(node0.isGetProp());
321:       assertFalse(node0.isAnd());
322:       assertEquals(1255, node0.getCharno());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isSetterDef());
325:       assertFalse(node0.isDebugger());
326:       assertFalse(node0.isObjectLit());
327:       assertFalse(node0.isThrow());
328:       assertEquals(1255, node0.getLineno());
329:       assertFalse(node0.isFunction());
330:       assertFalse(node0.isContinue());
331:       assertFalse(node0.isCast());
332:       assertFalse(node0.isFalse());
333:       
334:       boolean boolean0 = node0.isInc();
335:       assertFalse(boolean0);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(4095, Node.COLUMN_MASK);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(48, Node.DIRECTIVES);
340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       assertEquals(43, Node.IS_CONSTANT_NAME);
344:       assertEquals(53, Node.INPUT_ID);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(36, Node.QUOTED_PROP);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(29, Node.JSDOC_INFO_PROP);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(47, Node.IS_DISPATCHER);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(30, Node.VAR_ARGS_NAME);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(32, Node.INCRDECR_PROP);
356:       assertEquals(15, Node.NO_SIDE_EFFECTS);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(49, Node.DIRECT_EVAL);
359:       assertEquals(1, Node.DECR_FLAG);
360:       assertEquals(54, Node.SLASH_V);
361:       assertEquals(56, Node.CHANGE_TIME);
362:       assertEquals(46, Node.IS_NAMESPACE);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
372:       assertFalse(node0.isReturn());
373:       assertFalse(node0.isOr());
374:       assertFalse(node0.isLabel());
375:       assertFalse(node0.isAssignAdd());
376:       assertFalse(node0.isDo());
377:       assertFalse(node0.isBlock());
378:       assertEquals(5141735, node0.getSourcePosition());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isName());
381:       assertFalse(node0.isWhile());
382:       assertFalse(node0.isAssign());
383:       assertFalse(node0.isDec());
384:       assertFalse(node0.isGetElem());
385:       assertEquals(39, node0.getType());
386:       assertFalse(node0.hasChildren());
387:       assertFalse(node0.isCall());
388:       assertFalse(node0.isExprResult());
389:       assertFalse(node0.isTypeOf());
390:       assertFalse(node0.hasMoreThanOneChild());
391:       assertFalse(node0.isWith());
392:       assertEquals(0, node0.getChildCount());
393:       assertFalse(node0.isParamList());
394:       assertFalse(node0.isThis());
395:       assertFalse(node0.isScript());
396:       assertFalse(node0.isNull());
397:       assertFalse(node0.isArrayLit());
398:       assertFalse(node0.isAdd());
399:       assertFalse(node0.isNew());
400:       assertFalse(node0.isStringKey());
401:       assertFalse(node0.isVar());
402:       assertFalse(node0.isSwitch());
403:       assertFalse(node0.isDefaultCase());
404:       assertFalse(node0.isLabelName());
405:       assertTrue(node0.isNumber());
406:       assertFalse(node0.isNE());
407:       assertFalse(node0.isIf());
408:       assertFalse(node0.isGetterDef());
409:       assertFalse(node0.isString());
410:       assertFalse(node0.isEmpty());
411:       assertFalse(node0.isCase());
412:       assertFalse(node0.isInc());
413:       assertFalse(node0.isIn());
414:       assertFalse(node0.isTry());
415:       assertFalse(node0.isHook());
416:       assertFalse(node0.isTrue());
417:       assertFalse(node0.isVoid());
418:       assertFalse(node0.isDelProp());
419:       assertFalse(node0.isFor());
420:       assertFalse(node0.isBreak());
421:       assertFalse(node0.isCatch());
422:       assertFalse(node0.isComma());
423:       assertFalse(node0.isRegExp());
424:       assertFalse(node0.isInstanceOf());
425:       assertFalse(node0.isGetProp());
426:       assertFalse(node0.isAnd());
427:       assertEquals(1255, node0.getCharno());
428:       assertFalse(node0.isNot());
429:       assertFalse(node0.isSetterDef());
430:       assertFalse(node0.isDebugger());
431:       assertFalse(node0.isObjectLit());
432:       assertFalse(node0.isThrow());
433:       assertEquals(1255, node0.getLineno());
434:       assertFalse(node0.isFunction());
435:       assertFalse(node0.isContinue());
436:       assertFalse(node0.isCast());
437:       assertFalse(node0.isFalse());
438:       
439:       Node node1 = new Node(3102, 64, 36);
440:       assertFalse(node1.equals((Object)node0));
441:       assertNotNull(node1);
442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(56, Node.CHANGE_TIME);
445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
447:       assertEquals(53, Node.INPUT_ID);
448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
449:       assertEquals(36, Node.QUOTED_PROP);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(12, Node.COLUMN_BITS);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(49, Node.DIRECT_EVAL);
454:       assertEquals(48, Node.DIRECTIVES);
455:       assertEquals(37, Node.OPT_ARG_NAME);
456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
459:       assertEquals(4095, Node.COLUMN_MASK);
460:       assertEquals(40, Node.ORIGINALNAME_PROP);
461:       assertEquals(57, Node.REFLECTED_OBJECT);
462:       assertEquals(54, Node.SLASH_V);
463:       assertEquals(15, Node.NO_SIDE_EFFECTS);
464:       assertEquals(39, Node.EMPTY_BLOCK);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(50, Node.FREE_CALL);
467:       assertEquals(52, Node.LENGTH);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(46, Node.IS_NAMESPACE);
473:       assertEquals(43, Node.IS_CONSTANT_NAME);
474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
475:       assertEquals(47, Node.IS_DISPATCHER);
476:       assertEquals(2, Node.POST_FLAG);
477:       assertEquals(30, Node.VAR_ARGS_NAME);
478:       assertFalse(node1.isNew());
479:       assertFalse(node1.isBlock());
480:       assertFalse(node1.isVar());
481:       assertFalse(node1.isStringKey());
482:       assertFalse(node1.isDo());
483:       assertFalse(node1.isSetterDef());
484:       assertFalse(node1.isAdd());
485:       assertEquals(0, node1.getChildCount());
486:       assertFalse(node1.isLabel());
487:       assertFalse(node1.isAssignAdd());
488:       assertFalse(node1.isParamList());
489:       assertEquals(262180, node1.getSourcePosition());
490:       assertFalse(node1.isLabelName());
491:       assertFalse(node1.isContinue());
492:       assertFalse(node1.isFunction());
493:       assertFalse(node1.isCast());
494:       assertFalse(node1.isArrayLit());
495:       assertFalse(node1.isTry());
496:       assertEquals(3102, node1.getType());
497:       assertFalse(node1.hasOneChild());
498:       assertFalse(node1.isFor());
499:       assertFalse(node1.isGetterDef());
500:       assertFalse(node1.isNumber());
501:       assertFalse(node1.isScript());
502:       assertFalse(node1.isIn());
503:       assertFalse(node1.isThis());
504:       assertFalse(node1.isNE());
505:       assertFalse(node1.isIf());
506:       assertFalse(node1.isWith());
507:       assertFalse(node1.isRegExp());
508:       assertFalse(node1.hasMoreThanOneChild());
509:       assertFalse(node1.isCatch());
510:       assertFalse(node1.isInstanceOf());
511:       assertFalse(node1.isHook());
512:       assertFalse(node1.isThrow());
513:       assertFalse(node1.isSwitch());
514:       assertFalse(node1.isCase());
515:       assertFalse(node1.isGetProp());
516:       assertFalse(node1.isInc());
517:       assertFalse(node1.isString());
518:       assertEquals(64, node1.getLineno());
519:       assertFalse(node1.isAnd());
520:       assertEquals(36, node1.getCharno());
521:       assertFalse(node1.isFalse());
522:       assertFalse(node1.isVoid());
523:       assertFalse(node1.isDebugger());
524:       assertFalse(node1.isTrue());
525:       assertFalse(node1.isDefaultCase());
526:       assertFalse(node1.isNot());
527:       assertFalse(node1.isObjectLit());
528:       assertFalse(node1.isEmpty());
529:       assertFalse(node1.isReturn());
530:       assertFalse(node1.isOr());
531:       assertFalse(node1.isNull());
532:       assertFalse(node1.isWhile());
533:       assertFalse(node1.isBreak());
534:       assertFalse(node1.hasChildren());
535:       assertFalse(node1.isDelProp());
536:       assertFalse(node1.isTypeOf());
537:       assertFalse(node1.isAssign());
538:       assertFalse(node1.isName());
539:       assertFalse(node1.isComma());
540:       assertFalse(node1.isDec());
541:       assertFalse(node1.isCall());
542:       assertFalse(node1.isExprResult());
543:       assertFalse(node1.isGetElem());
544:       
545:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
546:       assertFalse(node0.equals((Object)node1));
547:       assertFalse(node1.equals((Object)node0));
548:       assertNotNull(node_NodeMismatch0);
549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
550:       assertEquals(4095, Node.COLUMN_MASK);
551:       assertEquals(55, Node.INFERRED_FUNCTION);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(39, Node.EMPTY_BLOCK);
556:       assertEquals(43, Node.IS_CONSTANT_NAME);
557:       assertEquals(53, Node.INPUT_ID);
558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
559:       assertEquals(36, Node.QUOTED_PROP);
560:       assertEquals(50, Node.FREE_CALL);
561:       assertEquals(40, Node.ORIGINALNAME_PROP);
562:       assertEquals(29, Node.JSDOC_INFO_PROP);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       assertEquals(47, Node.IS_DISPATCHER);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(30, Node.VAR_ARGS_NAME);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(57, Node.LAST_PROP);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(1, Node.DECR_FLAG);
573:       assertEquals(54, Node.SLASH_V);
574:       assertEquals(56, Node.CHANGE_TIME);
575:       assertEquals(46, Node.IS_NAMESPACE);
576:       assertEquals(52, Node.LENGTH);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
583:       assertEquals(37, Node.OPT_ARG_NAME);
584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
586:       assertEquals(29, Node.JSDOC_INFO_PROP);
587:       assertEquals(56, Node.CHANGE_TIME);
588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
590:       assertEquals(53, Node.INPUT_ID);
591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
592:       assertEquals(36, Node.QUOTED_PROP);
593:       assertEquals(1, Node.DECR_FLAG);
594:       assertEquals(12, Node.COLUMN_BITS);
595:       assertEquals(32, Node.INCRDECR_PROP);
596:       assertEquals(49, Node.DIRECT_EVAL);
597:       assertEquals(48, Node.DIRECTIVES);
598:       assertEquals(37, Node.OPT_ARG_NAME);
599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
600:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
602:       assertEquals(4095, Node.COLUMN_MASK);
603:       assertEquals(40, Node.ORIGINALNAME_PROP);
604:       assertEquals(57, Node.REFLECTED_OBJECT);
605:       assertEquals(54, Node.SLASH_V);
606:       assertEquals(15, Node.NO_SIDE_EFFECTS);
607:       assertEquals(39, Node.EMPTY_BLOCK);
608:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
609:       assertEquals(50, Node.FREE_CALL);
610:       assertEquals(52, Node.LENGTH);
611:       assertEquals(8, Node.FLAG_NO_THROWS);
612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
613:       assertEquals(55, Node.INFERRED_FUNCTION);
614:       assertEquals(57, Node.LAST_PROP);
615:       assertEquals(46, Node.IS_NAMESPACE);
616:       assertEquals(43, Node.IS_CONSTANT_NAME);
617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(2, Node.POST_FLAG);
620:       assertEquals(30, Node.VAR_ARGS_NAME);
621:       assertFalse(node0.isReturn());
622:       assertFalse(node0.isOr());
623:       assertFalse(node0.isLabel());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.isDo());
626:       assertFalse(node0.isBlock());
627:       assertEquals(5141735, node0.getSourcePosition());
628:       assertFalse(node0.hasOneChild());
629:       assertFalse(node0.isName());
630:       assertFalse(node0.isWhile());
631:       assertFalse(node0.isAssign());
632:       assertFalse(node0.isDec());
633:       assertFalse(node0.isGetElem());
634:       assertEquals(39, node0.getType());
635:       assertFalse(node0.hasChildren());
636:       assertFalse(node0.isCall());
637:       assertFalse(node0.isExprResult());
638:       assertFalse(node0.isTypeOf());
639:       assertFalse(node0.hasMoreThanOneChild());
640:       assertFalse(node0.isWith());
641:       assertEquals(0, node0.getChildCount());
642:       assertFalse(node0.isParamList());
643:       assertFalse(node0.isThis());
644:       assertFalse(node0.isScript());
645:       assertFalse(node0.isNull());
646:       assertFalse(node0.isArrayLit());
647:       assertFalse(node0.isAdd());
648:       assertFalse(node0.isNew());
649:       assertFalse(node0.isStringKey());
650:       assertFalse(node0.isVar());
651:       assertFalse(node0.isSwitch());
652:       assertFalse(node0.isDefaultCase());
653:       assertFalse(node0.isLabelName());
654:       assertTrue(node0.isNumber());
655:       assertFalse(node0.isNE());
656:       assertFalse(node0.isIf());
657:       assertFalse(node0.isGetterDef());
658:       assertFalse(node0.isString());
659:       assertFalse(node0.isEmpty());
660:       assertFalse(node0.isCase());
661:       assertFalse(node0.isInc());
662:       assertFalse(node0.isIn());
663:       assertFalse(node0.isTry());
664:       assertFalse(node0.isHook());
665:       assertFalse(node0.isTrue());
666:       assertFalse(node0.isVoid());
667:       assertFalse(node0.isDelProp());
668:       assertFalse(node0.isFor());
669:       assertFalse(node0.isBreak());
670:       assertFalse(node0.isCatch());
671:       assertFalse(node0.isComma());
672:       assertFalse(node0.isRegExp());
673:       assertFalse(node0.isInstanceOf());
674:       assertFalse(node0.isGetProp());
675:       assertFalse(node0.isAnd());
676:       assertEquals(1255, node0.getCharno());
677:       assertFalse(node0.isNot());
678:       assertFalse(node0.isSetterDef());
679:       assertFalse(node0.isDebugger());
680:       assertFalse(node0.isObjectLit());
681:       assertFalse(node0.isThrow());
682:       assertEquals(1255, node0.getLineno());
683:       assertFalse(node0.isFunction());
684:       assertFalse(node0.isContinue());
685:       assertFalse(node0.isCast());
686:       assertFalse(node0.isFalse());
687:       assertFalse(node1.isNew());
688:       assertFalse(node1.isBlock());
689:       assertFalse(node1.isVar());
690:       assertFalse(node1.isStringKey());
691:       assertFalse(node1.isDo());
692:       assertFalse(node1.isSetterDef());
693:       assertFalse(node1.isAdd());
694:       assertEquals(0, node1.getChildCount());
695:       assertFalse(node1.isLabel());
696:       assertFalse(node1.isAssignAdd());
697:       assertFalse(node1.isParamList());
698:       assertEquals(262180, node1.getSourcePosition());
699:       assertFalse(node1.isLabelName());
700:       assertFalse(node1.isContinue());
701:       assertFalse(node1.isFunction());
702:       assertFalse(node1.isCast());
703:       assertFalse(node1.isArrayLit());
704:       assertFalse(node1.isTry());
705:       assertEquals(3102, node1.getType());
706:       assertFalse(node1.hasOneChild());
707:       assertFalse(node1.isFor());
708:       assertFalse(node1.isGetterDef());
709:       assertFalse(node1.isNumber());
710:       assertFalse(node1.isScript());
711:       assertFalse(node1.isIn());
712:       assertFalse(node1.isThis());
713:       assertFalse(node1.isNE());
714:       assertFalse(node1.isIf());
715:       assertFalse(node1.isWith());
716:       assertFalse(node1.isRegExp());
717:       assertFalse(node1.hasMoreThanOneChild());
718:       assertFalse(node1.isCatch());
719:       assertFalse(node1.isInstanceOf());
720:       assertFalse(node1.isHook());
721:       assertFalse(node1.isThrow());
722:       assertFalse(node1.isSwitch());
723:       assertFalse(node1.isCase());
724:       assertFalse(node1.isGetProp());
725:       assertFalse(node1.isInc());
726:       assertFalse(node1.isString());
727:       assertEquals(64, node1.getLineno());
728:       assertFalse(node1.isAnd());
729:       assertEquals(36, node1.getCharno());
730:       assertFalse(node1.isFalse());
731:       assertFalse(node1.isVoid());
732:       assertFalse(node1.isDebugger());
733:       assertFalse(node1.isTrue());
734:       assertFalse(node1.isDefaultCase());
735:       assertFalse(node1.isNot());
736:       assertFalse(node1.isObjectLit());
737:       assertFalse(node1.isEmpty());
738:       assertFalse(node1.isReturn());
739:       assertFalse(node1.isOr());
740:       assertFalse(node1.isNull());
741:       assertFalse(node1.isWhile());
742:       assertFalse(node1.isBreak());
743:       assertFalse(node1.hasChildren());
744:       assertFalse(node1.isDelProp());
745:       assertFalse(node1.isTypeOf());
746:       assertFalse(node1.isAssign());
747:       assertFalse(node1.isName());
748:       assertFalse(node1.isComma());
749:       assertFalse(node1.isDec());
750:       assertFalse(node1.isCall());
751:       assertFalse(node1.isExprResult());
752:       assertFalse(node1.isGetElem());
753:       
754:       Iterable<Node> iterable0 = node0.children();
755:       assertFalse(node0.equals((Object)node1));
756:       assertNotNull(iterable0);
757:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(55, Node.INFERRED_FUNCTION);
760:       assertEquals(48, Node.DIRECTIVES);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       assertEquals(8, Node.FLAG_NO_THROWS);
763:       assertEquals(39, Node.EMPTY_BLOCK);
764:       assertEquals(43, Node.IS_CONSTANT_NAME);
765:       assertEquals(53, Node.INPUT_ID);
766:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
767:       assertEquals(36, Node.QUOTED_PROP);
768:       assertEquals(50, Node.FREE_CALL);
769:       assertEquals(40, Node.ORIGINALNAME_PROP);
770:       assertEquals(29, Node.JSDOC_INFO_PROP);
771:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
772:       assertEquals(47, Node.IS_DISPATCHER);
773:       assertEquals(2, Node.POST_FLAG);
774:       assertEquals(30, Node.VAR_ARGS_NAME);
775:       assertEquals(12, Node.COLUMN_BITS);
776:       assertEquals(32, Node.INCRDECR_PROP);
777:       assertEquals(15, Node.NO_SIDE_EFFECTS);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(49, Node.DIRECT_EVAL);
780:       assertEquals(1, Node.DECR_FLAG);
781:       assertEquals(54, Node.SLASH_V);
782:       assertEquals(56, Node.CHANGE_TIME);
783:       assertEquals(46, Node.IS_NAMESPACE);
784:       assertEquals(52, Node.LENGTH);
785:       assertEquals(57, Node.REFLECTED_OBJECT);
786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
787:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
788:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
790:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
791:       assertEquals(37, Node.OPT_ARG_NAME);
792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
793:       assertFalse(node0.isReturn());
794:       assertFalse(node0.isOr());
795:       assertFalse(node0.isLabel());
796:       assertFalse(node0.isAssignAdd());
797:       assertFalse(node0.isDo());
798:       assertFalse(node0.isBlock());
799:       assertEquals(5141735, node0.getSourcePosition());
800:       assertFalse(node0.hasOneChild());
801:       assertFalse(node0.isName());
802:       assertFalse(node0.isWhile());
803:       assertFalse(node0.isAssign());
804:       assertFalse(node0.isDec());
805:       assertFalse(node0.isGetElem());
806:       assertEquals(39, node0.getType());
807:       assertFalse(node0.hasChildren());
808:       assertFalse(node0.isCall());
809:       assertFalse(node0.isExprResult());
810:       assertFalse(node0.isTypeOf());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertFalse(node0.isWith());
813:       assertEquals(0, node0.getChildCount());
814:       assertFalse(node0.isParamList());
815:       assertFalse(node0.isThis());
816:       assertFalse(node0.isScript());
817:       assertFalse(node0.isNull());
818:       assertFalse(node0.isArrayLit());
819:       assertFalse(node0.isAdd());
820:       assertFalse(node0.isNew());
821:       assertFalse(node0.isStringKey());
822:       assertFalse(node0.isVar());
823:       assertFalse(node0.isSwitch());
824:       assertFalse(node0.isDefaultCase());
825:       assertFalse(node0.isLabelName());
826:       assertTrue(node0.isNumber());
827:       assertFalse(node0.isNE());
828:       assertFalse(node0.isIf());
829:       assertFalse(node0.isGetterDef());
830:       assertFalse(node0.isString());
831:       assertFalse(node0.isEmpty());
832:       assertFalse(node0.isCase());
833:       assertFalse(node0.isInc());
834:       assertFalse(node0.isIn());
835:       assertFalse(node0.isTry());
836:       assertFalse(node0.isHook());
837:       assertFalse(node0.isTrue());
838:       assertFalse(node0.isVoid());
839:       assertFalse(node0.isDelProp());
840:       assertFalse(node0.isFor());
841:       assertFalse(node0.isBreak());
842:       assertFalse(node0.isCatch());
843:       assertFalse(node0.isComma());
844:       assertFalse(node0.isRegExp());
845:       assertFalse(node0.isInstanceOf());
846:       assertFalse(node0.isGetProp());
847:       assertFalse(node0.isAnd());
848:       assertEquals(1255, node0.getCharno());
849:       assertFalse(node0.isNot());
850:       assertFalse(node0.isSetterDef());
851:       assertFalse(node0.isDebugger());
852:       assertFalse(node0.isObjectLit());
853:       assertFalse(node0.isThrow());
854:       assertEquals(1255, node0.getLineno());
855:       assertFalse(node0.isFunction());
856:       assertFalse(node0.isContinue());
857:       assertFalse(node0.isCast());
858:       assertFalse(node0.isFalse());
859:       assertFalse(iterable0.contains(node0));
860:       
861:       boolean boolean1 = node0.isQualifiedName();
862:       assertFalse(node0.equals((Object)node1));
863:       assertTrue(boolean1 == boolean0);
864:       assertFalse(boolean1);
865:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(55, Node.INFERRED_FUNCTION);
868:       assertEquals(48, Node.DIRECTIVES);
869:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
870:       assertEquals(8, Node.FLAG_NO_THROWS);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(53, Node.INPUT_ID);
874:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
875:       assertEquals(36, Node.QUOTED_PROP);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(40, Node.ORIGINALNAME_PROP);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
880:       assertEquals(47, Node.IS_DISPATCHER);
881:       assertEquals(2, Node.POST_FLAG);
882:       assertEquals(30, Node.VAR_ARGS_NAME);
883:       assertEquals(12, Node.COLUMN_BITS);
884:       assertEquals(32, Node.INCRDECR_PROP);
885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
886:       assertEquals(57, Node.LAST_PROP);
887:       assertEquals(49, Node.DIRECT_EVAL);
888:       assertEquals(1, Node.DECR_FLAG);
889:       assertEquals(54, Node.SLASH_V);
890:       assertEquals(56, Node.CHANGE_TIME);
891:       assertEquals(46, Node.IS_NAMESPACE);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
895:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
897:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
898:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
901:       assertFalse(node0.isReturn());
902:       assertFalse(node0.isOr());
903:       assertFalse(node0.isLabel());
904:       assertFalse(node0.isAssignAdd());
905:       assertFalse(node0.isDo());
906:       assertFalse(node0.isBlock());
907:       assertEquals(5141735, node0.getSourcePosition());
908:       assertFalse(node0.hasOneChild());
909:       assertFalse(node0.isName());
910:       assertFalse(node0.isWhile());
911:       assertFalse(node0.isAssign());
912:       assertFalse(node0.isDec());
913:       assertFalse(node0.isGetElem());
914:       assertEquals(39, node0.getType());
915:       assertFalse(node0.hasChildren());
916:       assertFalse(node0.isCall());
917:       assertFalse(node0.isExprResult());
918:       assertFalse(node0.isTypeOf());
919:       assertFalse(node0.hasMoreThanOneChild());
920:       assertFalse(node0.isWith());
921:       assertEquals(0, node0.getChildCount());
922:       assertFalse(node0.isParamList());
923:       assertFalse(node0.isThis());
924:       assertFalse(node0.isScript());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isArrayLit());
927:       assertFalse(node0.isAdd());
928:       assertFalse(node0.isNew());
929:       assertFalse(node0.isStringKey());
930:       assertFalse(node0.isVar());
931:       assertFalse(node0.isSwitch());
932:       assertFalse(node0.isDefaultCase());
933:       assertFalse(node0.isLabelName());
934:       assertTrue(node0.isNumber());
935:       assertFalse(node0.isNE());
936:       assertFalse(node0.isIf());
937:       assertFalse(node0.isGetterDef());
938:       assertFalse(node0.isString());
939:       assertFalse(node0.isEmpty());
940:       assertFalse(node0.isCase());
941:       assertFalse(node0.isInc());
942:       assertFalse(node0.isIn());
943:       assertFalse(node0.isTry());
944:       assertFalse(node0.isHook());
945:       assertFalse(node0.isTrue());
946:       assertFalse(node0.isVoid());
947:       assertFalse(node0.isDelProp());
948:       assertFalse(node0.isFor());
949:       assertFalse(node0.isBreak());
950:       assertFalse(node0.isCatch());
951:       assertFalse(node0.isComma());
952:       assertFalse(node0.isRegExp());
953:       assertFalse(node0.isInstanceOf());
954:       assertFalse(node0.isGetProp());
955:       assertFalse(node0.isAnd());
956:       assertEquals(1255, node0.getCharno());
957:       assertFalse(node0.isNot());
958:       assertFalse(node0.isSetterDef());
959:       assertFalse(node0.isDebugger());
960:       assertFalse(node0.isObjectLit());
961:       assertFalse(node0.isThrow());
962:       assertEquals(1255, node0.getLineno());
963:       assertFalse(node0.isFunction());
964:       assertFalse(node0.isContinue());
965:       assertFalse(node0.isCast());
966:       assertFalse(node0.isFalse());
967:       
968:       node0.setSourceEncodedPosition(1255);
969:       assertFalse(node0.equals((Object)node1));
970:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
971:       assertEquals(4095, Node.COLUMN_MASK);
972:       assertEquals(55, Node.INFERRED_FUNCTION);
973:       assertEquals(48, Node.DIRECTIVES);
974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
975:       assertEquals(8, Node.FLAG_NO_THROWS);
976:       assertEquals(39, Node.EMPTY_BLOCK);
977:       assertEquals(43, Node.IS_CONSTANT_NAME);
978:       assertEquals(53, Node.INPUT_ID);
979:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(40, Node.ORIGINALNAME_PROP);
983:       assertEquals(29, Node.JSDOC_INFO_PROP);
984:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
985:       assertEquals(47, Node.IS_DISPATCHER);
986:       assertEquals(2, Node.POST_FLAG);
987:       assertEquals(30, Node.VAR_ARGS_NAME);
988:       assertEquals(12, Node.COLUMN_BITS);
989:       assertEquals(32, Node.INCRDECR_PROP);
990:       assertEquals(15, Node.NO_SIDE_EFFECTS);
991:       assertEquals(57, Node.LAST_PROP);
992:       assertEquals(49, Node.DIRECT_EVAL);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(54, Node.SLASH_V);
995:       assertEquals(56, Node.CHANGE_TIME);
996:       assertEquals(46, Node.IS_NAMESPACE);
997:       assertEquals(52, Node.LENGTH);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1001:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1002:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1003:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1004:       assertEquals(37, Node.OPT_ARG_NAME);
1005:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1006:       assertFalse(node0.isReturn());
1007:       assertFalse(node0.isOr());
1008:       assertFalse(node0.isLabel());
1009:       assertFalse(node0.isAssignAdd());
1010:       assertFalse(node0.isDo());
1011:       assertEquals(1255, node0.getSourcePosition());
1012:       assertFalse(node0.isBlock());
1013:       assertFalse(node0.hasOneChild());
1014:       assertFalse(node0.isName());
1015:       assertFalse(node0.isWhile());
1016:       assertFalse(node0.isAssign());
1017:       assertFalse(node0.isDec());
1018:       assertFalse(node0.isGetElem());
1019:       assertEquals(39, node0.getType());
1020:       assertFalse(node0.hasChildren());
1021:       assertFalse(node0.isCall());
1022:       assertFalse(node0.isExprResult());
1023:       assertFalse(node0.isTypeOf());
1024:       assertFalse(node0.hasMoreThanOneChild());
1025:       assertFalse(node0.isWith());
1026:       assertEquals(0, node0.getChildCount());
1027:       assertFalse(node0.isParamList());
1028:       assertFalse(node0.isThis());
1029:       assertFalse(node0.isScript());
1030:       assertFalse(node0.isNull());
1031:       assertFalse(node0.isArrayLit());
1032:       assertFalse(node0.isAdd());
1033:       assertFalse(node0.isNew());
1034:       assertFalse(node0.isStringKey());
1035:       assertFalse(node0.isVar());
1036:       assertFalse(node0.isSwitch());
1037:       assertFalse(node0.isDefaultCase());
1038:       assertFalse(node0.isLabelName());
1039:       assertTrue(node0.isNumber());
1040:       assertFalse(node0.isNE());
1041:       assertFalse(node0.isIf());
1042:       assertFalse(node0.isGetterDef());
1043:       assertFalse(node0.isString());
1044:       assertFalse(node0.isEmpty());
1045:       assertFalse(node0.isCase());
1046:       assertFalse(node0.isInc());
1047:       assertFalse(node0.isIn());
1048:       assertFalse(node0.isTry());
1049:       assertFalse(node0.isHook());
1050:       assertFalse(node0.isTrue());
1051:       assertFalse(node0.isVoid());
1052:       assertFalse(node0.isDelProp());
1053:       assertFalse(node0.isFor());
1054:       assertFalse(node0.isBreak());
1055:       assertFalse(node0.isCatch());
1056:       assertFalse(node0.isComma());
1057:       assertFalse(node0.isRegExp());
1058:       assertFalse(node0.isInstanceOf());
1059:       assertEquals(0, node0.getLineno());
1060:       assertFalse(node0.isGetProp());
1061:       assertFalse(node0.isAnd());
1062:       assertEquals(1255, node0.getCharno());
1063:       assertFalse(node0.isNot());
1064:       assertFalse(node0.isSetterDef());
1065:       assertFalse(node0.isDebugger());
1066:       assertFalse(node0.isObjectLit());
1067:       assertFalse(node0.isThrow());
1068:       assertFalse(node0.isFunction());
1069:       assertFalse(node0.isContinue());
1070:       assertFalse(node0.isCast());
1071:       assertFalse(node0.isFalse());
1072:   }
1073: }
RegularFileObject[/tmp/EvoSuite_100_1629223115220/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.jstype.TemplatizedType",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.Platform",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:35.441 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 1255, 1255);
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());

String string0 = node0.getSourceFileName();
assertNull(string0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());

node0.detachChildren();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());

boolean boolean0 = node0.isInc();
assertFalse(boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());

Node node1 = new Node(3102, 64, 36);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertEquals(262180, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(3102, node1.getType());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals(64, node1.getLineno());
assertFalse(node1.isAnd());
assertEquals(36, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertEquals(262180, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals(3102, node1.getType());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals(64, node1.getLineno());
assertFalse(node1.isAnd());
assertEquals(36, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isQualifiedName();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(5141735, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertEquals(1255, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());

node0.setSourceEncodedPosition(1255);
assertFalse(node0.equals((Object)node1));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(1255, node0.getSourcePosition());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isComma());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals(1255, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());


[MASTER] 17:58:37.554 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_117_1629223117425/com/google/javascript/rhino/Node_117_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_117_1629223117425/com/google/javascript/rhino/Node_117_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:37.554 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:37.554 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:37.555 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 440
[MASTER] 17:58:37.557 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_117_1629223117425/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_117_tmp__ESTest extends Node_117_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(199.2059217532582);
21:       assertNotNull(node0);
22:       assertEquals(54, Node.SLASH_V);
23:       assertEquals(52, Node.LENGTH);
24:       assertEquals(57, Node.LAST_PROP);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
27:       assertEquals(57, Node.REFLECTED_OBJECT);
28:       assertEquals(1, Node.DECR_FLAG);
29:       assertEquals(50, Node.FREE_CALL);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(15, Node.NO_SIDE_EFFECTS);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(2, Node.POST_FLAG);
35:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
36:       assertEquals(46, Node.IS_NAMESPACE);
37:       assertEquals(51, Node.STATIC_SOURCE_FILE);
38:       assertEquals(47, Node.IS_DISPATCHER);
39:       assertEquals(40, Node.ORIGINALNAME_PROP);
40:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
41:       assertEquals(43, Node.IS_CONSTANT_NAME);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(53, Node.INPUT_ID);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(8, Node.FLAG_NO_THROWS);
52:       assertEquals(56, Node.CHANGE_TIME);
53:       assertEquals(12, Node.COLUMN_BITS);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(49, Node.DIRECT_EVAL);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isScript());
60:       assertFalse(node0.isObjectLit());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isGetProp());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.hasChildren());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isComma());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isAssign());
72:       assertFalse(node0.isDec());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isInstanceOf());
75:       assertFalse(node0.isExprResult());
76:       assertEquals(39, node0.getType());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isAssignAdd());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isAdd());
83:       assertFalse(node0.isVar());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isDo());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.isStringKey());
89:       assertFalse(node0.isLabel());
90:       assertFalse(node0.isParamList());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isArrayLit());
93:       assertFalse(node0.isLabelName());
94:       assertFalse(node0.isDefaultCase());
95:       assertFalse(node0.isFunction());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isTrue());
98:       assertFalse(node0.isRegExp());
99:       assertEquals(0, node0.getChildCount());
100:       assertFalse(node0.isSetterDef());
101:       assertFalse(node0.isTry());
102:       assertFalse(node0.isDelProp());
103:       assertFalse(node0.isIf());
104:       assertFalse(node0.isFor());
105:       assertFalse(node0.isNull());
106:       assertFalse(node0.isNE());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isCatch());
109:       assertFalse(node0.isCall());
110:       assertFalse(node0.isName());
111:       assertFalse(node0.isVoid());
112:       assertFalse(node0.isString());
113:       assertFalse(node0.isWhile());
114:       assertFalse(node0.isContinue());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isInc());
118:       assertTrue(node0.isNumber());
119:       assertFalse(node0.isThrow());
120:       assertFalse(node0.isFalse());
121:       assertEquals((-1), node0.getSourcePosition());
122:       assertFalse(node0.isCast());
123:       assertFalse(node0.isAnd());
124:       
125:       String string0 = node0.toString();
126:       assertEquals("NUMBER 199.2059217532582", string0);
127:       assertNotNull(string0);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(52, Node.LENGTH);
130:       assertEquals(57, Node.LAST_PROP);
131:       assertEquals(30, Node.VAR_ARGS_NAME);
132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(1, Node.DECR_FLAG);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(46, Node.IS_NAMESPACE);
143:       assertEquals(51, Node.STATIC_SOURCE_FILE);
144:       assertEquals(47, Node.IS_DISPATCHER);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
147:       assertEquals(43, Node.IS_CONSTANT_NAME);
148:       assertEquals(36, Node.QUOTED_PROP);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(37, Node.OPT_ARG_NAME);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(12, Node.COLUMN_BITS);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
164:       assertFalse(node0.isWith());
165:       assertFalse(node0.isScript());
166:       assertFalse(node0.isObjectLit());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isGetProp());
169:       assertFalse(node0.hasOneChild());
170:       assertFalse(node0.isBreak());
171:       assertFalse(node0.hasChildren());
172:       assertFalse(node0.isGetElem());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isTypeOf());
175:       assertFalse(node0.isComma());
176:       assertFalse(node0.isOr());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.isDec());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isInstanceOf());
181:       assertFalse(node0.isExprResult());
182:       assertEquals(39, node0.getType());
183:       assertEquals((-1), node0.getCharno());
184:       assertFalse(node0.hasMoreThanOneChild());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.isAssignAdd());
187:       assertFalse(node0.isBlock());
188:       assertFalse(node0.isAdd());
189:       assertFalse(node0.isVar());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.isNew());
192:       assertFalse(node0.isDo());
193:       assertFalse(node0.isGetterDef());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.isLabel());
196:       assertFalse(node0.isParamList());
197:       assertFalse(node0.isSwitch());
198:       assertFalse(node0.isArrayLit());
199:       assertFalse(node0.isLabelName());
200:       assertFalse(node0.isDefaultCase());
201:       assertFalse(node0.isFunction());
202:       assertFalse(node0.isDebugger());
203:       assertFalse(node0.isTrue());
204:       assertFalse(node0.isRegExp());
205:       assertEquals(0, node0.getChildCount());
206:       assertFalse(node0.isSetterDef());
207:       assertFalse(node0.isTry());
208:       assertFalse(node0.isDelProp());
209:       assertFalse(node0.isIf());
210:       assertFalse(node0.isFor());
211:       assertFalse(node0.isNull());
212:       assertFalse(node0.isNE());
213:       assertFalse(node0.isEmpty());
214:       assertFalse(node0.isCatch());
215:       assertFalse(node0.isCall());
216:       assertFalse(node0.isName());
217:       assertFalse(node0.isVoid());
218:       assertFalse(node0.isString());
219:       assertFalse(node0.isWhile());
220:       assertFalse(node0.isContinue());
221:       assertFalse(node0.isReturn());
222:       assertFalse(node0.isIn());
223:       assertFalse(node0.isInc());
224:       assertTrue(node0.isNumber());
225:       assertFalse(node0.isThrow());
226:       assertFalse(node0.isFalse());
227:       assertEquals((-1), node0.getSourcePosition());
228:       assertFalse(node0.isCast());
229:       assertFalse(node0.isAnd());
230:       
231:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
232:       assertNotNull(node_FileLevelJsDocBuilder0);
233:       assertEquals(54, Node.SLASH_V);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(57, Node.LAST_PROP);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(57, Node.REFLECTED_OBJECT);
239:       assertEquals(1, Node.DECR_FLAG);
240:       assertEquals(50, Node.FREE_CALL);
241:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
249:       assertEquals(47, Node.IS_DISPATCHER);
250:       assertEquals(40, Node.ORIGINALNAME_PROP);
251:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
258:       assertEquals(29, Node.JSDOC_INFO_PROP);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(12, Node.COLUMN_BITS);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(49, Node.DIRECT_EVAL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertFalse(node0.isWith());
270:       assertFalse(node0.isScript());
271:       assertFalse(node0.isObjectLit());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isGetProp());
274:       assertFalse(node0.hasOneChild());
275:       assertFalse(node0.isBreak());
276:       assertFalse(node0.hasChildren());
277:       assertFalse(node0.isGetElem());
278:       assertFalse(node0.isThis());
279:       assertFalse(node0.isTypeOf());
280:       assertFalse(node0.isComma());
281:       assertFalse(node0.isOr());
282:       assertFalse(node0.isAssign());
283:       assertFalse(node0.isDec());
284:       assertEquals((-1), node0.getLineno());
285:       assertFalse(node0.isInstanceOf());
286:       assertFalse(node0.isExprResult());
287:       assertEquals(39, node0.getType());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.isHook());
291:       assertFalse(node0.isAssignAdd());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isAdd());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isCase());
296:       assertFalse(node0.isNew());
297:       assertFalse(node0.isDo());
298:       assertFalse(node0.isGetterDef());
299:       assertFalse(node0.isStringKey());
300:       assertFalse(node0.isLabel());
301:       assertFalse(node0.isParamList());
302:       assertFalse(node0.isSwitch());
303:       assertFalse(node0.isArrayLit());
304:       assertFalse(node0.isLabelName());
305:       assertFalse(node0.isDefaultCase());
306:       assertFalse(node0.isFunction());
307:       assertFalse(node0.isDebugger());
308:       assertFalse(node0.isTrue());
309:       assertFalse(node0.isRegExp());
310:       assertEquals(0, node0.getChildCount());
311:       assertFalse(node0.isSetterDef());
312:       assertFalse(node0.isTry());
313:       assertFalse(node0.isDelProp());
314:       assertFalse(node0.isIf());
315:       assertFalse(node0.isFor());
316:       assertFalse(node0.isNull());
317:       assertFalse(node0.isNE());
318:       assertFalse(node0.isEmpty());
319:       assertFalse(node0.isCatch());
320:       assertFalse(node0.isCall());
321:       assertFalse(node0.isName());
322:       assertFalse(node0.isVoid());
323:       assertFalse(node0.isString());
324:       assertFalse(node0.isWhile());
325:       assertFalse(node0.isContinue());
326:       assertFalse(node0.isReturn());
327:       assertFalse(node0.isIn());
328:       assertFalse(node0.isInc());
329:       assertTrue(node0.isNumber());
330:       assertFalse(node0.isThrow());
331:       assertFalse(node0.isFalse());
332:       assertEquals((-1), node0.getSourcePosition());
333:       assertFalse(node0.isCast());
334:       assertFalse(node0.isAnd());
335:       
336:       Iterable<Node> iterable0 = node0.children();
337:       assertNotNull(iterable0);
338:       assertEquals(54, Node.SLASH_V);
339:       assertEquals(52, Node.LENGTH);
340:       assertEquals(57, Node.LAST_PROP);
341:       assertEquals(30, Node.VAR_ARGS_NAME);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(57, Node.REFLECTED_OBJECT);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(50, Node.FREE_CALL);
346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
347:       assertEquals(32, Node.INCRDECR_PROP);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(39, Node.EMPTY_BLOCK);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(51, Node.STATIC_SOURCE_FILE);
354:       assertEquals(47, Node.IS_DISPATCHER);
355:       assertEquals(40, Node.ORIGINALNAME_PROP);
356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
357:       assertEquals(43, Node.IS_CONSTANT_NAME);
358:       assertEquals(36, Node.QUOTED_PROP);
359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(12, Node.COLUMN_BITS);
370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
371:       assertEquals(49, Node.DIRECT_EVAL);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertFalse(node0.isWith());
375:       assertFalse(node0.isScript());
376:       assertFalse(node0.isObjectLit());
377:       assertFalse(node0.isNot());
378:       assertFalse(node0.isGetProp());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isBreak());
381:       assertFalse(node0.hasChildren());
382:       assertFalse(node0.isGetElem());
383:       assertFalse(node0.isThis());
384:       assertFalse(node0.isTypeOf());
385:       assertFalse(node0.isComma());
386:       assertFalse(node0.isOr());
387:       assertFalse(node0.isAssign());
388:       assertFalse(node0.isDec());
389:       assertEquals((-1), node0.getLineno());
390:       assertFalse(node0.isInstanceOf());
391:       assertFalse(node0.isExprResult());
392:       assertEquals(39, node0.getType());
393:       assertEquals((-1), node0.getCharno());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isHook());
396:       assertFalse(node0.isAssignAdd());
397:       assertFalse(node0.isBlock());
398:       assertFalse(node0.isAdd());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isCase());
401:       assertFalse(node0.isNew());
402:       assertFalse(node0.isDo());
403:       assertFalse(node0.isGetterDef());
404:       assertFalse(node0.isStringKey());
405:       assertFalse(node0.isLabel());
406:       assertFalse(node0.isParamList());
407:       assertFalse(node0.isSwitch());
408:       assertFalse(node0.isArrayLit());
409:       assertFalse(node0.isLabelName());
410:       assertFalse(node0.isDefaultCase());
411:       assertFalse(node0.isFunction());
412:       assertFalse(node0.isDebugger());
413:       assertFalse(node0.isTrue());
414:       assertFalse(node0.isRegExp());
415:       assertEquals(0, node0.getChildCount());
416:       assertFalse(node0.isSetterDef());
417:       assertFalse(node0.isTry());
418:       assertFalse(node0.isDelProp());
419:       assertFalse(node0.isIf());
420:       assertFalse(node0.isFor());
421:       assertFalse(node0.isNull());
422:       assertFalse(node0.isNE());
423:       assertFalse(node0.isEmpty());
424:       assertFalse(node0.isCatch());
425:       assertFalse(node0.isCall());
426:       assertFalse(node0.isName());
427:       assertFalse(node0.isVoid());
428:       assertFalse(node0.isString());
429:       assertFalse(node0.isWhile());
430:       assertFalse(node0.isContinue());
431:       assertFalse(node0.isReturn());
432:       assertFalse(node0.isIn());
433:       assertFalse(node0.isInc());
434:       assertTrue(node0.isNumber());
435:       assertFalse(node0.isThrow());
436:       assertFalse(node0.isFalse());
437:       assertEquals((-1), node0.getSourcePosition());
438:       assertFalse(node0.isCast());
439:       assertFalse(node0.isAnd());
440:       assertFalse(iterable0.contains(node0));
441:       
442:       boolean boolean0 = node0.isBreak();
443:       assertFalse(boolean0);
444:       assertEquals(54, Node.SLASH_V);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(57, Node.LAST_PROP);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
449:       assertEquals(57, Node.REFLECTED_OBJECT);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(50, Node.FREE_CALL);
452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
453:       assertEquals(32, Node.INCRDECR_PROP);
454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
455:       assertEquals(39, Node.EMPTY_BLOCK);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(47, Node.IS_DISPATCHER);
461:       assertEquals(40, Node.ORIGINALNAME_PROP);
462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
463:       assertEquals(43, Node.IS_CONSTANT_NAME);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
468:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
469:       assertEquals(29, Node.JSDOC_INFO_PROP);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(37, Node.OPT_ARG_NAME);
472:       assertEquals(48, Node.DIRECTIVES);
473:       assertEquals(8, Node.FLAG_NO_THROWS);
474:       assertEquals(56, Node.CHANGE_TIME);
475:       assertEquals(12, Node.COLUMN_BITS);
476:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
477:       assertEquals(49, Node.DIRECT_EVAL);
478:       assertEquals(4095, Node.COLUMN_MASK);
479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
480:       assertFalse(node0.isWith());
481:       assertFalse(node0.isScript());
482:       assertFalse(node0.isObjectLit());
483:       assertFalse(node0.isNot());
484:       assertFalse(node0.isGetProp());
485:       assertFalse(node0.hasOneChild());
486:       assertFalse(node0.isBreak());
487:       assertFalse(node0.hasChildren());
488:       assertFalse(node0.isGetElem());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isTypeOf());
491:       assertFalse(node0.isComma());
492:       assertFalse(node0.isOr());
493:       assertFalse(node0.isAssign());
494:       assertFalse(node0.isDec());
495:       assertEquals((-1), node0.getLineno());
496:       assertFalse(node0.isInstanceOf());
497:       assertFalse(node0.isExprResult());
498:       assertEquals(39, node0.getType());
499:       assertEquals((-1), node0.getCharno());
500:       assertFalse(node0.hasMoreThanOneChild());
501:       assertFalse(node0.isHook());
502:       assertFalse(node0.isAssignAdd());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.isAdd());
505:       assertFalse(node0.isVar());
506:       assertFalse(node0.isCase());
507:       assertFalse(node0.isNew());
508:       assertFalse(node0.isDo());
509:       assertFalse(node0.isGetterDef());
510:       assertFalse(node0.isStringKey());
511:       assertFalse(node0.isLabel());
512:       assertFalse(node0.isParamList());
513:       assertFalse(node0.isSwitch());
514:       assertFalse(node0.isArrayLit());
515:       assertFalse(node0.isLabelName());
516:       assertFalse(node0.isDefaultCase());
517:       assertFalse(node0.isFunction());
518:       assertFalse(node0.isDebugger());
519:       assertFalse(node0.isTrue());
520:       assertFalse(node0.isRegExp());
521:       assertEquals(0, node0.getChildCount());
522:       assertFalse(node0.isSetterDef());
523:       assertFalse(node0.isTry());
524:       assertFalse(node0.isDelProp());
525:       assertFalse(node0.isIf());
526:       assertFalse(node0.isFor());
527:       assertFalse(node0.isNull());
528:       assertFalse(node0.isNE());
529:       assertFalse(node0.isEmpty());
530:       assertFalse(node0.isCatch());
531:       assertFalse(node0.isCall());
532:       assertFalse(node0.isName());
533:       assertFalse(node0.isVoid());
534:       assertFalse(node0.isString());
535:       assertFalse(node0.isWhile());
536:       assertFalse(node0.isContinue());
537:       assertFalse(node0.isReturn());
538:       assertFalse(node0.isIn());
539:       assertFalse(node0.isInc());
540:       assertTrue(node0.isNumber());
541:       assertFalse(node0.isThrow());
542:       assertFalse(node0.isFalse());
543:       assertEquals((-1), node0.getSourcePosition());
544:       assertFalse(node0.isCast());
545:       assertFalse(node0.isAnd());
546:       
547:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
548:       assertNotNull(node_NodeMismatch0);
549:       assertEquals(54, Node.SLASH_V);
550:       assertEquals(52, Node.LENGTH);
551:       assertEquals(57, Node.LAST_PROP);
552:       assertEquals(30, Node.VAR_ARGS_NAME);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(57, Node.REFLECTED_OBJECT);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(50, Node.FREE_CALL);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(32, Node.INCRDECR_PROP);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(39, Node.EMPTY_BLOCK);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(46, Node.IS_NAMESPACE);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(47, Node.IS_DISPATCHER);
566:       assertEquals(40, Node.ORIGINALNAME_PROP);
567:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
568:       assertEquals(43, Node.IS_CONSTANT_NAME);
569:       assertEquals(36, Node.QUOTED_PROP);
570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
571:       assertEquals(55, Node.INFERRED_FUNCTION);
572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
573:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
574:       assertEquals(29, Node.JSDOC_INFO_PROP);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(37, Node.OPT_ARG_NAME);
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(8, Node.FLAG_NO_THROWS);
579:       assertEquals(56, Node.CHANGE_TIME);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
582:       assertEquals(49, Node.DIRECT_EVAL);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertFalse(node0.isWith());
586:       assertFalse(node0.isScript());
587:       assertFalse(node0.isObjectLit());
588:       assertFalse(node0.isNot());
589:       assertFalse(node0.isGetProp());
590:       assertFalse(node0.hasOneChild());
591:       assertFalse(node0.isBreak());
592:       assertFalse(node0.hasChildren());
593:       assertFalse(node0.isGetElem());
594:       assertFalse(node0.isThis());
595:       assertFalse(node0.isTypeOf());
596:       assertFalse(node0.isComma());
597:       assertFalse(node0.isOr());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isDec());
600:       assertEquals((-1), node0.getLineno());
601:       assertFalse(node0.isInstanceOf());
602:       assertFalse(node0.isExprResult());
603:       assertEquals(39, node0.getType());
604:       assertEquals((-1), node0.getCharno());
605:       assertFalse(node0.hasMoreThanOneChild());
606:       assertFalse(node0.isHook());
607:       assertFalse(node0.isAssignAdd());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isAdd());
610:       assertFalse(node0.isVar());
611:       assertFalse(node0.isCase());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isDo());
614:       assertFalse(node0.isGetterDef());
615:       assertFalse(node0.isStringKey());
616:       assertFalse(node0.isLabel());
617:       assertFalse(node0.isParamList());
618:       assertFalse(node0.isSwitch());
619:       assertFalse(node0.isArrayLit());
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isDefaultCase());
622:       assertFalse(node0.isFunction());
623:       assertFalse(node0.isDebugger());
624:       assertFalse(node0.isTrue());
625:       assertFalse(node0.isRegExp());
626:       assertEquals(0, node0.getChildCount());
627:       assertFalse(node0.isSetterDef());
628:       assertFalse(node0.isTry());
629:       assertFalse(node0.isDelProp());
630:       assertFalse(node0.isIf());
631:       assertFalse(node0.isFor());
632:       assertFalse(node0.isNull());
633:       assertFalse(node0.isNE());
634:       assertFalse(node0.isEmpty());
635:       assertFalse(node0.isCatch());
636:       assertFalse(node0.isCall());
637:       assertFalse(node0.isName());
638:       assertFalse(node0.isVoid());
639:       assertFalse(node0.isString());
640:       assertFalse(node0.isWhile());
641:       assertFalse(node0.isContinue());
642:       assertFalse(node0.isReturn());
643:       assertFalse(node0.isIn());
644:       assertFalse(node0.isInc());
645:       assertTrue(node0.isNumber());
646:       assertFalse(node0.isThrow());
647:       assertFalse(node0.isFalse());
648:       assertEquals((-1), node0.getSourcePosition());
649:       assertFalse(node0.isCast());
650:       assertFalse(node0.isAnd());
651:       
652:       Node node1 = new Node(30, (-3923), 1186);
653:       assertFalse(node1.equals((Object)node0));
654:       assertNotNull(node1);
655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
656:       assertEquals(8, Node.FLAG_NO_THROWS);
657:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(40, Node.ORIGINALNAME_PROP);
660:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
661:       assertEquals(39, Node.EMPTY_BLOCK);
662:       assertEquals(4095, Node.COLUMN_MASK);
663:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
664:       assertEquals(43, Node.IS_CONSTANT_NAME);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(51, Node.STATIC_SOURCE_FILE);
667:       assertEquals(50, Node.FREE_CALL);
668:       assertEquals(46, Node.IS_NAMESPACE);
669:       assertEquals(54, Node.SLASH_V);
670:       assertEquals(2, Node.POST_FLAG);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(56, Node.CHANGE_TIME);
673:       assertEquals(29, Node.JSDOC_INFO_PROP);
674:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
675:       assertEquals(37, Node.OPT_ARG_NAME);
676:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(32, Node.INCRDECR_PROP);
679:       assertEquals(30, Node.VAR_ARGS_NAME);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(36, Node.QUOTED_PROP);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(49, Node.DIRECT_EVAL);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(55, Node.INFERRED_FUNCTION);
689:       assertEquals(52, Node.LENGTH);
690:       assertEquals(57, Node.REFLECTED_OBJECT);
691:       assertFalse(node1.isGetElem());
692:       assertFalse(node1.isCast());
693:       assertEquals(30, node1.getType());
694:       assertFalse(node1.hasOneChild());
695:       assertFalse(node1.isLabelName());
696:       assertFalse(node1.isLabel());
697:       assertFalse(node1.isAssignAdd());
698:       assertFalse(node1.isReturn());
699:       assertFalse(node1.isExprResult());
700:       assertFalse(node1.isTypeOf());
701:       assertFalse(node1.hasMoreThanOneChild());
702:       assertFalse(node1.hasChildren());
703:       assertFalse(node1.isAssign());
704:       assertFalse(node1.isDec());
705:       assertFalse(node1.isWith());
706:       assertEquals((-1), node1.getLineno());
707:       assertFalse(node1.isDo());
708:       assertFalse(node1.isAdd());
709:       assertFalse(node1.isOr());
710:       assertFalse(node1.isStringKey());
711:       assertFalse(node1.isBlock());
712:       assertFalse(node1.isInstanceOf());
713:       assertFalse(node1.isVar());
714:       assertFalse(node1.isThis());
715:       assertFalse(node1.isHook());
716:       assertEquals(0, node1.getChildCount());
717:       assertFalse(node1.isCase());
718:       assertFalse(node1.isScript());
719:       assertFalse(node1.isSwitch());
720:       assertFalse(node1.isParamList());
721:       assertFalse(node1.isNumber());
722:       assertFalse(node1.isGetterDef());
723:       assertEquals((-1), node1.getCharno());
724:       assertFalse(node1.isFor());
725:       assertFalse(node1.isEmpty());
726:       assertFalse(node1.isArrayLit());
727:       assertFalse(node1.isIf());
728:       assertFalse(node1.isDelProp());
729:       assertFalse(node1.isTry());
730:       assertFalse(node1.isRegExp());
731:       assertFalse(node1.isFunction());
732:       assertFalse(node1.isCatch());
733:       assertFalse(node1.isInc());
734:       assertFalse(node1.isDefaultCase());
735:       assertFalse(node1.isVoid());
736:       assertFalse(node1.isTrue());
737:       assertFalse(node1.isNE());
738:       assertFalse(node1.isNull());
739:       assertFalse(node1.isIn());
740:       assertFalse(node1.isName());
741:       assertFalse(node1.isFalse());
742:       assertFalse(node1.isCall());
743:       assertTrue(node1.isNew());
744:       assertFalse(node1.isThrow());
745:       assertFalse(node1.isSetterDef());
746:       assertFalse(node1.isBreak());
747:       assertFalse(node1.isComma());
748:       assertFalse(node1.isContinue());
749:       assertFalse(node1.isAnd());
750:       assertFalse(node1.isString());
751:       assertFalse(node1.isWhile());
752:       assertFalse(node1.isGetProp());
753:       assertEquals((-1), node1.getSourcePosition());
754:       assertFalse(node1.isDebugger());
755:       assertFalse(node1.isObjectLit());
756:       assertFalse(node1.isNot());
757:       
758:       Node node2 = Node.newNumber((-3729.022741313));
759:       assertFalse(node2.equals((Object)node0));
760:       assertFalse(node2.equals((Object)node1));
761:       assertNotNull(node2);
762:       assertEquals(53, Node.INPUT_ID);
763:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
764:       assertEquals(47, Node.IS_DISPATCHER);
765:       assertEquals(2, Node.POST_FLAG);
766:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
767:       assertEquals(4095, Node.COLUMN_MASK);
768:       assertEquals(37, Node.OPT_ARG_NAME);
769:       assertEquals(48, Node.DIRECTIVES);
770:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
771:       assertEquals(49, Node.DIRECT_EVAL);
772:       assertEquals(56, Node.CHANGE_TIME);
773:       assertEquals(36, Node.QUOTED_PROP);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(15, Node.NO_SIDE_EFFECTS);
776:       assertEquals(39, Node.EMPTY_BLOCK);
777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
778:       assertEquals(55, Node.INFERRED_FUNCTION);
779:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
780:       assertEquals(52, Node.LENGTH);
781:       assertEquals(8, Node.FLAG_NO_THROWS);
782:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
783:       assertEquals(57, Node.REFLECTED_OBJECT);
784:       assertEquals(54, Node.SLASH_V);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(57, Node.LAST_PROP);
787:       assertEquals(30, Node.VAR_ARGS_NAME);
788:       assertEquals(40, Node.ORIGINALNAME_PROP);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(46, Node.IS_NAMESPACE);
791:       assertEquals(51, Node.STATIC_SOURCE_FILE);
792:       assertEquals(12, Node.COLUMN_BITS);
793:       assertEquals(1, Node.DECR_FLAG);
794:       assertEquals(43, Node.IS_CONSTANT_NAME);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
797:       assertEquals(50, Node.FREE_CALL);
798:       assertFalse(node2.isNew());
799:       assertFalse(node2.isWhile());
800:       assertEquals(39, node2.getType());
801:       assertFalse(node2.isBlock());
802:       assertFalse(node2.isVar());
803:       assertFalse(node2.isCall());
804:       assertFalse(node2.isContinue());
805:       assertFalse(node2.hasMoreThanOneChild());
806:       assertFalse(node2.isName());
807:       assertFalse(node2.isParamList());
808:       assertEquals((-1), node2.getSourcePosition());
809:       assertFalse(node2.isTypeOf());
810:       assertFalse(node2.isDec());
811:       assertFalse(node2.hasChildren());
812:       assertFalse(node2.isReturn());
813:       assertFalse(node2.isStringKey());
814:       assertFalse(node2.hasOneChild());
815:       assertFalse(node2.isVoid());
816:       assertFalse(node2.isExprResult());
817:       assertFalse(node2.isTrue());
818:       assertFalse(node2.isDefaultCase());
819:       assertFalse(node2.isGetElem());
820:       assertFalse(node2.isArrayLit());
821:       assertFalse(node2.isLabelName());
822:       assertEquals(0, node2.getChildCount());
823:       assertFalse(node2.isAssign());
824:       assertFalse(node2.isLabel());
825:       assertFalse(node2.isOr());
826:       assertFalse(node2.isDelProp());
827:       assertFalse(node2.isAssignAdd());
828:       assertFalse(node2.isNull());
829:       assertFalse(node2.isDo());
830:       assertFalse(node2.isAdd());
831:       assertFalse(node2.isEmpty());
832:       assertEquals((-1), node2.getCharno());
833:       assertFalse(node2.isInc());
834:       assertFalse(node2.isSwitch());
835:       assertFalse(node2.isHook());
836:       assertFalse(node2.isFalse());
837:       assertFalse(node2.isBreak());
838:       assertFalse(node2.isThis());
839:       assertFalse(node2.isGetProp());
840:       assertFalse(node2.isComma());
841:       assertTrue(node2.isNumber());
842:       assertFalse(node2.isFor());
843:       assertFalse(node2.isObjectLit());
844:       assertFalse(node2.isNot());
845:       assertFalse(node2.isCase());
846:       assertFalse(node2.isGetterDef());
847:       assertFalse(node2.isString());
848:       assertFalse(node2.isScript());
849:       assertFalse(node2.isDebugger());
850:       assertFalse(node2.isFunction());
851:       assertFalse(node2.isRegExp());
852:       assertFalse(node2.isTry());
853:       assertFalse(node2.isAnd());
854:       assertFalse(node2.isWith());
855:       assertFalse(node2.isCatch());
856:       assertFalse(node2.isCast());
857:       assertFalse(node2.isInstanceOf());
858:       assertFalse(node2.isSetterDef());
859:       assertEquals((-1), node2.getLineno());
860:       assertFalse(node2.isIf());
861:       assertFalse(node2.isNE());
862:       assertFalse(node2.isThrow());
863:       assertFalse(node2.isIn());
864:       assertNotSame(node2, node0);
865:       
866:       boolean boolean1 = node2.isEquivalentTo(node0);
867:       assertFalse(node0.equals((Object)node1));
868:       assertFalse(node0.equals((Object)node2));
869:       assertFalse(node2.equals((Object)node0));
870:       assertFalse(node2.equals((Object)node1));
871:       assertTrue(boolean1 == boolean0);
872:       assertFalse(boolean1);
873:       assertEquals(54, Node.SLASH_V);
874:       assertEquals(52, Node.LENGTH);
875:       assertEquals(57, Node.LAST_PROP);
876:       assertEquals(30, Node.VAR_ARGS_NAME);
877:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
878:       assertEquals(57, Node.REFLECTED_OBJECT);
879:       assertEquals(1, Node.DECR_FLAG);
880:       assertEquals(50, Node.FREE_CALL);
881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
882:       assertEquals(32, Node.INCRDECR_PROP);
883:       assertEquals(15, Node.NO_SIDE_EFFECTS);
884:       assertEquals(39, Node.EMPTY_BLOCK);
885:       assertEquals(2, Node.POST_FLAG);
886:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
887:       assertEquals(46, Node.IS_NAMESPACE);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(47, Node.IS_DISPATCHER);
890:       assertEquals(40, Node.ORIGINALNAME_PROP);
891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
892:       assertEquals(43, Node.IS_CONSTANT_NAME);
893:       assertEquals(36, Node.QUOTED_PROP);
894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
897:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
898:       assertEquals(29, Node.JSDOC_INFO_PROP);
899:       assertEquals(53, Node.INPUT_ID);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(48, Node.DIRECTIVES);
902:       assertEquals(8, Node.FLAG_NO_THROWS);
903:       assertEquals(56, Node.CHANGE_TIME);
904:       assertEquals(12, Node.COLUMN_BITS);
905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
906:       assertEquals(49, Node.DIRECT_EVAL);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
909:       assertEquals(53, Node.INPUT_ID);
910:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
911:       assertEquals(47, Node.IS_DISPATCHER);
912:       assertEquals(2, Node.POST_FLAG);
913:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
914:       assertEquals(4095, Node.COLUMN_MASK);
915:       assertEquals(37, Node.OPT_ARG_NAME);
916:       assertEquals(48, Node.DIRECTIVES);
917:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
918:       assertEquals(49, Node.DIRECT_EVAL);
919:       assertEquals(56, Node.CHANGE_TIME);
920:       assertEquals(36, Node.QUOTED_PROP);
921:       assertEquals(29, Node.JSDOC_INFO_PROP);
922:       assertEquals(15, Node.NO_SIDE_EFFECTS);
923:       assertEquals(39, Node.EMPTY_BLOCK);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(55, Node.INFERRED_FUNCTION);
926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
927:       assertEquals(52, Node.LENGTH);
928:       assertEquals(8, Node.FLAG_NO_THROWS);
929:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
930:       assertEquals(57, Node.REFLECTED_OBJECT);
931:       assertEquals(54, Node.SLASH_V);
932:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
933:       assertEquals(57, Node.LAST_PROP);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(40, Node.ORIGINALNAME_PROP);
936:       assertEquals(32, Node.INCRDECR_PROP);
937:       assertEquals(46, Node.IS_NAMESPACE);
938:       assertEquals(51, Node.STATIC_SOURCE_FILE);
939:       assertEquals(12, Node.COLUMN_BITS);
940:       assertEquals(1, Node.DECR_FLAG);
941:       assertEquals(43, Node.IS_CONSTANT_NAME);
942:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
943:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
944:       assertEquals(50, Node.FREE_CALL);
945:       assertFalse(node0.isWith());
946:       assertFalse(node0.isScript());
947:       assertFalse(node0.isObjectLit());
948:       assertFalse(node0.isNot());
949:       assertFalse(node0.isGetProp());
950:       assertFalse(node0.hasOneChild());
951:       assertFalse(node0.isBreak());
952:       assertFalse(node0.hasChildren());
953:       assertFalse(node0.isGetElem());
954:       assertFalse(node0.isThis());
955:       assertFalse(node0.isTypeOf());
956:       assertFalse(node0.isComma());
957:       assertFalse(node0.isOr());
958:       assertFalse(node0.isAssign());
959:       assertFalse(node0.isDec());
960:       assertEquals((-1), node0.getLineno());
961:       assertFalse(node0.isInstanceOf());
962:       assertFalse(node0.isExprResult());
963:       assertEquals(39, node0.getType());
964:       assertEquals((-1), node0.getCharno());
965:       assertFalse(node0.hasMoreThanOneChild());
966:       assertFalse(node0.isHook());
967:       assertFalse(node0.isAssignAdd());
968:       assertFalse(node0.isBlock());
969:       assertFalse(node0.isAdd());
970:       assertFalse(node0.isVar());
971:       assertFalse(node0.isCase());
972:       assertFalse(node0.isNew());
973:       assertFalse(node0.isDo());
974:       assertFalse(node0.isGetterDef());
975:       assertFalse(node0.isStringKey());
976:       assertFalse(node0.isLabel());
977:       assertFalse(node0.isParamList());
978:       assertFalse(node0.isSwitch());
979:       assertFalse(node0.isArrayLit());
980:       assertFalse(node0.isLabelName());
981:       assertFalse(node0.isDefaultCase());
982:       assertFalse(node0.isFunction());
983:       assertFalse(node0.isDebugger());
984:       assertFalse(node0.isTrue());
985:       assertFalse(node0.isRegExp());
986:       assertEquals(0, node0.getChildCount());
987:       assertFalse(node0.isSetterDef());
988:       assertFalse(node0.isTry());
989:       assertFalse(node0.isDelProp());
990:       assertFalse(node0.isIf());
991:       assertFalse(node0.isFor());
992:       assertFalse(node0.isNull());
993:       assertFalse(node0.isNE());
994:       assertFalse(node0.isEmpty());
995:       assertFalse(node0.isCatch());
996:       assertFalse(node0.isCall());
997:       assertFalse(node0.isName());
998:       assertFalse(node0.isVoid());
999:       assertFalse(node0.isString());
1000:       assertFalse(node0.isWhile());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isReturn());
1003:       assertFalse(node0.isIn());
1004:       assertFalse(node0.isInc());
1005:       assertTrue(node0.isNumber());
1006:       assertFalse(node0.isThrow());
1007:       assertFalse(node0.isFalse());
1008:       assertEquals((-1), node0.getSourcePosition());
1009:       assertFalse(node0.isCast());
1010:       assertFalse(node0.isAnd());
1011:       assertFalse(node2.isNew());
1012:       assertFalse(node2.isWhile());
1013:       assertEquals(39, node2.getType());
1014:       assertFalse(node2.isBlock());
1015:       assertFalse(node2.isVar());
1016:       assertFalse(node2.isCall());
1017:       assertFalse(node2.isContinue());
1018:       assertFalse(node2.hasMoreThanOneChild());
1019:       assertFalse(node2.isName());
1020:       assertFalse(node2.isParamList());
1021:       assertEquals((-1), node2.getSourcePosition());
1022:       assertFalse(node2.isTypeOf());
1023:       assertFalse(node2.isDec());
1024:       assertFalse(node2.hasChildren());
1025:       assertFalse(node2.isReturn());
1026:       assertFalse(node2.isStringKey());
1027:       assertFalse(node2.hasOneChild());
1028:       assertFalse(node2.isVoid());
1029:       assertFalse(node2.isExprResult());
1030:       assertFalse(node2.isTrue());
1031:       assertFalse(node2.isDefaultCase());
1032:       assertFalse(node2.isGetElem());
1033:       assertFalse(node2.isArrayLit());
1034:       assertFalse(node2.isLabelName());
1035:       assertEquals(0, node2.getChildCount());
1036:       assertFalse(node2.isAssign());
1037:       assertFalse(node2.isLabel());
1038:       assertFalse(node2.isOr());
1039:       assertFalse(node2.isDelProp());
1040:       assertFalse(node2.isAssignAdd());
1041:       assertFalse(node2.isNull());
1042:       assertFalse(node2.isDo());
1043:       assertFalse(node2.isAdd());
1044:       assertFalse(node2.isEmpty());
1045:       assertEquals((-1), node2.getCharno());
1046:       assertFalse(node2.isInc());
1047:       assertFalse(node2.isSwitch());
1048:       assertFalse(node2.isHook());
1049:       assertFalse(node2.isFalse());
1050:       assertFalse(node2.isBreak());
1051:       assertFalse(node2.isThis());
1052:       assertFalse(node2.isGetProp());
1053:       assertFalse(node2.isComma());
1054:       assertTrue(node2.isNumber());
1055:       assertFalse(node2.isFor());
1056:       assertFalse(node2.isObjectLit());
1057:       assertFalse(node2.isNot());
1058:       assertFalse(node2.isCase());
1059:       assertFalse(node2.isGetterDef());
1060:       assertFalse(node2.isString());
1061:       assertFalse(node2.isScript());
1062:       assertFalse(node2.isDebugger());
1063:       assertFalse(node2.isFunction());
1064:       assertFalse(node2.isRegExp());
1065:       assertFalse(node2.isTry());
1066:       assertFalse(node2.isAnd());
1067:       assertFalse(node2.isWith());
1068:       assertFalse(node2.isCatch());
1069:       assertFalse(node2.isCast());
1070:       assertFalse(node2.isInstanceOf());
1071:       assertFalse(node2.isSetterDef());
1072:       assertEquals((-1), node2.getLineno());
1073:       assertFalse(node2.isIf());
1074:       assertFalse(node2.isNE());
1075:       assertFalse(node2.isThrow());
1076:       assertFalse(node2.isIn());
1077:       assertNotSame(node0, node2);
1078:       assertNotSame(node2, node0);
1079:       
1080:       boolean boolean2 = node1.isReturn();
1081:       assertFalse(node1.equals((Object)node0));
1082:       assertFalse(node1.equals((Object)node2));
1083:       assertTrue(boolean2 == boolean1);
1084:       assertTrue(boolean2 == boolean0);
1085:       assertFalse(boolean2);
1086:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1087:       assertEquals(8, Node.FLAG_NO_THROWS);
1088:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1089:       assertEquals(48, Node.DIRECTIVES);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1092:       assertEquals(39, Node.EMPTY_BLOCK);
1093:       assertEquals(4095, Node.COLUMN_MASK);
1094:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1095:       assertEquals(43, Node.IS_CONSTANT_NAME);
1096:       assertEquals(1, Node.DECR_FLAG);
1097:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1098:       assertEquals(50, Node.FREE_CALL);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(54, Node.SLASH_V);
1101:       assertEquals(2, Node.POST_FLAG);
1102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1103:       assertEquals(56, Node.CHANGE_TIME);
1104:       assertEquals(29, Node.JSDOC_INFO_PROP);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(37, Node.OPT_ARG_NAME);
1107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1108:       assertEquals(12, Node.COLUMN_BITS);
1109:       assertEquals(32, Node.INCRDECR_PROP);
1110:       assertEquals(30, Node.VAR_ARGS_NAME);
1111:       assertEquals(47, Node.IS_DISPATCHER);
1112:       assertEquals(36, Node.QUOTED_PROP);
1113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1114:       assertEquals(57, Node.LAST_PROP);
1115:       assertEquals(49, Node.DIRECT_EVAL);
1116:       assertEquals(53, Node.INPUT_ID);
1117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1119:       assertEquals(55, Node.INFERRED_FUNCTION);
1120:       assertEquals(52, Node.LENGTH);
1121:       assertEquals(57, Node.REFLECTED_OBJECT);
1122:       assertFalse(node1.isGetElem());
1123:       assertFalse(node1.isCast());
1124:       assertEquals(30, node1.getType());
1125:       assertFalse(node1.hasOneChild());
1126:       assertFalse(node1.isLabelName());
1127:       assertFalse(node1.isLabel());
1128:       assertFalse(node1.isAssignAdd());
1129:       assertFalse(node1.isReturn());
1130:       assertFalse(node1.isExprResult());
1131:       assertFalse(node1.isTypeOf());
1132:       assertFalse(node1.hasMoreThanOneChild());
1133:       assertFalse(node1.hasChildren());
1134:       assertFalse(node1.isAssign());
1135:       assertFalse(node1.isDec());
1136:       assertFalse(node1.isWith());
1137:       assertEquals((-1), node1.getLineno());
1138:       assertFalse(node1.isDo());
1139:       assertFalse(node1.isAdd());
1140:       assertFalse(node1.isOr());
1141:       assertFalse(node1.isStringKey());
1142:       assertFalse(node1.isBlock());
1143:       assertFalse(node1.isInstanceOf());
1144:       assertFalse(node1.isVar());
1145:       assertFalse(node1.isThis());
1146:       assertFalse(node1.isHook());
1147:       assertEquals(0, node1.getChildCount());
1148:       assertFalse(node1.isCase());
1149:       assertFalse(node1.isScript());
1150:       assertFalse(node1.isSwitch());
1151:       assertFalse(node1.isParamList());
1152:       assertFalse(node1.isNumber());
1153:       assertFalse(node1.isGetterDef());
1154:       assertEquals((-1), node1.getCharno());
1155:       assertFalse(node1.isFor());
1156:       assertFalse(node1.isEmpty());
1157:       assertFalse(node1.isArrayLit());
1158:       assertFalse(node1.isIf());
1159:       assertFalse(node1.isDelProp());
1160:       assertFalse(node1.isTry());
1161:       assertFalse(node1.isRegExp());
1162:       assertFalse(node1.isFunction());
1163:       assertFalse(node1.isCatch());
1164:       assertFalse(node1.isInc());
1165:       assertFalse(node1.isDefaultCase());
1166:       assertFalse(node1.isVoid());
1167:       assertFalse(node1.isTrue());
1168:       assertFalse(node1.isNE());
1169:       assertFalse(node1.isNull());
1170:       assertFalse(node1.isIn());
1171:       assertFalse(node1.isName());
1172:       assertFalse(node1.isFalse());
1173:       assertFalse(node1.isCall());
1174:       assertTrue(node1.isNew());
1175:       assertFalse(node1.isThrow());
1176:       assertFalse(node1.isSetterDef());
1177:       assertFalse(node1.isBreak());
1178:       assertFalse(node1.isComma());
1179:       assertFalse(node1.isContinue());
1180:       assertFalse(node1.isAnd());
1181:       assertFalse(node1.isString());
1182:       assertFalse(node1.isWhile());
1183:       assertFalse(node1.isGetProp());
1184:       assertEquals((-1), node1.getSourcePosition());
1185:       assertFalse(node1.isDebugger());
1186:       assertFalse(node1.isObjectLit());
1187:       assertFalse(node1.isNot());
1188:   }
1189: }
RegularFileObject[/tmp/EvoSuite_117_1629223117425/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_117_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_117_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_117_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.jstype.TemplatizedType",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.Platform",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:37.596 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(199.2059217532582);
assertNotNull(node0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

String string0 = node0.toString();
assertEquals("NUMBER 199.2059217532582", string0);
assertNotNull(string0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isBreak();
assertFalse(boolean0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertNotNull(node_NodeMismatch0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Node node1 = new Node(30, (-3923), 1186);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals(30, node1.getType());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertTrue(node1.isNew());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());

Node node2 = Node.newNumber((-3729.022741313));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertNotSame(node2, node0);

boolean boolean1 = node2.isEquivalentTo(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertNotSame(node0, node2);
assertNotSame(node2, node0);

boolean boolean2 = node1.isReturn();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals(30, node1.getType());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isIn());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertTrue(node1.isNew());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());


[MASTER] 17:58:43.262 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1629223123065/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1629223123065/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:43.262 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:43.262 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:43.265 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 440
[MASTER] 17:58:43.268 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1629223123065/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(199.2059217532582);
21:       assertNotNull(node0);
22:       assertEquals(40, Node.ORIGINALNAME_PROP);
23:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
24:       assertEquals(57, Node.REFLECTED_OBJECT);
25:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(52, Node.LENGTH);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
33:       assertEquals(55, Node.INFERRED_FUNCTION);
34:       assertEquals(2, Node.POST_FLAG);
35:       assertEquals(8, Node.FLAG_NO_THROWS);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(15, Node.NO_SIDE_EFFECTS);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(4095, Node.COLUMN_MASK);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isNE());
68:       assertTrue(node0.isNumber());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isBlock());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isFalse());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isNot());
89:       assertFalse(node0.isLabelName());
90:       assertFalse(node0.isThis());
91:       assertFalse(node0.isGetProp());
92:       assertEquals((-1), node0.getSourcePosition());
93:       assertFalse(node0.isTypeOf());
94:       assertFalse(node0.isComma());
95:       assertEquals((-1), node0.getLineno());
96:       assertFalse(node0.isDec());
97:       assertFalse(node0.isBreak());
98:       assertFalse(node0.isInstanceOf());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isAssign());
101:       assertFalse(node0.hasOneChild());
102:       assertFalse(node0.isWhile());
103:       assertFalse(node0.hasChildren());
104:       assertEquals(39, node0.getType());
105:       assertFalse(node0.isHook());
106:       assertFalse(node0.isReturn());
107:       assertEquals((-1), node0.getCharno());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isNew());
110:       assertFalse(node0.isAdd());
111:       assertFalse(node0.isCall());
112:       assertFalse(node0.isName());
113:       assertFalse(node0.isNull());
114:       assertFalse(node0.isParamList());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isLabel());
117:       assertFalse(node0.isOr());
118:       assertFalse(node0.isEmpty());
119:       assertFalse(node0.isDo());
120:       assertEquals(0, node0.getChildCount());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isAssignAdd());
123:       assertFalse(node0.isVar());
124:       
125:       String string0 = node0.toString();
126:       assertEquals("NUMBER 199.2059217532582", string0);
127:       assertNotNull(string0);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(52, Node.LENGTH);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(48, Node.DIRECTIVES);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
139:       assertEquals(55, Node.INFERRED_FUNCTION);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(8, Node.FLAG_NO_THROWS);
142:       assertEquals(57, Node.LAST_PROP);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
163:       assertEquals(1, Node.DECR_FLAG);
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isTrue());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isRegExp());
169:       assertFalse(node0.isTry());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isDelProp());
173:       assertFalse(node0.isNE());
174:       assertTrue(node0.isNumber());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isCatch());
177:       assertFalse(node0.isCase());
178:       assertFalse(node0.isFor());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isInc());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isSetterDef());
183:       assertFalse(node0.isIn());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isFalse());
186:       assertFalse(node0.isThrow());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isWith());
189:       assertFalse(node0.isScript());
190:       assertFalse(node0.isCast());
191:       assertFalse(node0.isObjectLit());
192:       assertFalse(node0.isAnd());
193:       assertFalse(node0.isGetElem());
194:       assertFalse(node0.isNot());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.isThis());
197:       assertFalse(node0.isGetProp());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.isComma());
201:       assertEquals((-1), node0.getLineno());
202:       assertFalse(node0.isDec());
203:       assertFalse(node0.isBreak());
204:       assertFalse(node0.isInstanceOf());
205:       assertFalse(node0.hasMoreThanOneChild());
206:       assertFalse(node0.isAssign());
207:       assertFalse(node0.hasOneChild());
208:       assertFalse(node0.isWhile());
209:       assertFalse(node0.hasChildren());
210:       assertEquals(39, node0.getType());
211:       assertFalse(node0.isHook());
212:       assertFalse(node0.isReturn());
213:       assertEquals((-1), node0.getCharno());
214:       assertFalse(node0.isSwitch());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isAdd());
217:       assertFalse(node0.isCall());
218:       assertFalse(node0.isName());
219:       assertFalse(node0.isNull());
220:       assertFalse(node0.isParamList());
221:       assertFalse(node0.isStringKey());
222:       assertFalse(node0.isLabel());
223:       assertFalse(node0.isOr());
224:       assertFalse(node0.isEmpty());
225:       assertFalse(node0.isDo());
226:       assertEquals(0, node0.getChildCount());
227:       assertFalse(node0.isDefaultCase());
228:       assertFalse(node0.isAssignAdd());
229:       assertFalse(node0.isVar());
230:       
231:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
232:       assertNotNull(node_FileLevelJsDocBuilder0);
233:       assertEquals(40, Node.ORIGINALNAME_PROP);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       assertEquals(57, Node.REFLECTED_OBJECT);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(50, Node.FREE_CALL);
238:       assertEquals(52, Node.LENGTH);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
244:       assertEquals(55, Node.INFERRED_FUNCTION);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(8, Node.FLAG_NO_THROWS);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
254:       assertEquals(53, Node.INPUT_ID);
255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(36, Node.QUOTED_PROP);
260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertEquals(1, Node.DECR_FLAG);
269:       assertFalse(node0.isVoid());
270:       assertFalse(node0.isDebugger());
271:       assertFalse(node0.isTrue());
272:       assertFalse(node0.isFunction());
273:       assertFalse(node0.isRegExp());
274:       assertFalse(node0.isTry());
275:       assertFalse(node0.isArrayLit());
276:       assertFalse(node0.isIf());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isNE());
279:       assertTrue(node0.isNumber());
280:       assertFalse(node0.isGetterDef());
281:       assertFalse(node0.isCatch());
282:       assertFalse(node0.isCase());
283:       assertFalse(node0.isFor());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isInc());
286:       assertFalse(node0.isString());
287:       assertFalse(node0.isSetterDef());
288:       assertFalse(node0.isIn());
289:       assertFalse(node0.isContinue());
290:       assertFalse(node0.isFalse());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isWith());
294:       assertFalse(node0.isScript());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isObjectLit());
297:       assertFalse(node0.isAnd());
298:       assertFalse(node0.isGetElem());
299:       assertFalse(node0.isNot());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isThis());
302:       assertFalse(node0.isGetProp());
303:       assertEquals((-1), node0.getSourcePosition());
304:       assertFalse(node0.isTypeOf());
305:       assertFalse(node0.isComma());
306:       assertEquals((-1), node0.getLineno());
307:       assertFalse(node0.isDec());
308:       assertFalse(node0.isBreak());
309:       assertFalse(node0.isInstanceOf());
310:       assertFalse(node0.hasMoreThanOneChild());
311:       assertFalse(node0.isAssign());
312:       assertFalse(node0.hasOneChild());
313:       assertFalse(node0.isWhile());
314:       assertFalse(node0.hasChildren());
315:       assertEquals(39, node0.getType());
316:       assertFalse(node0.isHook());
317:       assertFalse(node0.isReturn());
318:       assertEquals((-1), node0.getCharno());
319:       assertFalse(node0.isSwitch());
320:       assertFalse(node0.isNew());
321:       assertFalse(node0.isAdd());
322:       assertFalse(node0.isCall());
323:       assertFalse(node0.isName());
324:       assertFalse(node0.isNull());
325:       assertFalse(node0.isParamList());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isLabel());
328:       assertFalse(node0.isOr());
329:       assertFalse(node0.isEmpty());
330:       assertFalse(node0.isDo());
331:       assertEquals(0, node0.getChildCount());
332:       assertFalse(node0.isDefaultCase());
333:       assertFalse(node0.isAssignAdd());
334:       assertFalse(node0.isVar());
335:       
336:       Iterable<Node> iterable0 = node0.children();
337:       assertNotNull(iterable0);
338:       assertEquals(40, Node.ORIGINALNAME_PROP);
339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
340:       assertEquals(57, Node.REFLECTED_OBJECT);
341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(52, Node.LENGTH);
344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
345:       assertEquals(48, Node.DIRECTIVES);
346:       assertEquals(54, Node.SLASH_V);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
349:       assertEquals(55, Node.INFERRED_FUNCTION);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(8, Node.FLAG_NO_THROWS);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(30, Node.VAR_ARGS_NAME);
354:       assertEquals(29, Node.JSDOC_INFO_PROP);
355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
356:       assertEquals(39, Node.EMPTY_BLOCK);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(53, Node.INPUT_ID);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(43, Node.IS_CONSTANT_NAME);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(37, Node.OPT_ARG_NAME);
367:       assertEquals(32, Node.INCRDECR_PROP);
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertEquals(1, Node.DECR_FLAG);
374:       assertFalse(node0.isVoid());
375:       assertFalse(node0.isDebugger());
376:       assertFalse(node0.isTrue());
377:       assertFalse(node0.isFunction());
378:       assertFalse(node0.isRegExp());
379:       assertFalse(node0.isTry());
380:       assertFalse(node0.isArrayLit());
381:       assertFalse(node0.isIf());
382:       assertFalse(node0.isDelProp());
383:       assertFalse(node0.isNE());
384:       assertTrue(node0.isNumber());
385:       assertFalse(node0.isGetterDef());
386:       assertFalse(node0.isCatch());
387:       assertFalse(node0.isCase());
388:       assertFalse(node0.isFor());
389:       assertFalse(node0.isBlock());
390:       assertFalse(node0.isInc());
391:       assertFalse(node0.isString());
392:       assertFalse(node0.isSetterDef());
393:       assertFalse(node0.isIn());
394:       assertFalse(node0.isContinue());
395:       assertFalse(node0.isFalse());
396:       assertFalse(node0.isThrow());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isWith());
399:       assertFalse(node0.isScript());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isObjectLit());
402:       assertFalse(node0.isAnd());
403:       assertFalse(node0.isGetElem());
404:       assertFalse(node0.isNot());
405:       assertFalse(node0.isLabelName());
406:       assertFalse(node0.isThis());
407:       assertFalse(node0.isGetProp());
408:       assertEquals((-1), node0.getSourcePosition());
409:       assertFalse(node0.isTypeOf());
410:       assertFalse(node0.isComma());
411:       assertEquals((-1), node0.getLineno());
412:       assertFalse(node0.isDec());
413:       assertFalse(node0.isBreak());
414:       assertFalse(node0.isInstanceOf());
415:       assertFalse(node0.hasMoreThanOneChild());
416:       assertFalse(node0.isAssign());
417:       assertFalse(node0.hasOneChild());
418:       assertFalse(node0.isWhile());
419:       assertFalse(node0.hasChildren());
420:       assertEquals(39, node0.getType());
421:       assertFalse(node0.isHook());
422:       assertFalse(node0.isReturn());
423:       assertEquals((-1), node0.getCharno());
424:       assertFalse(node0.isSwitch());
425:       assertFalse(node0.isNew());
426:       assertFalse(node0.isAdd());
427:       assertFalse(node0.isCall());
428:       assertFalse(node0.isName());
429:       assertFalse(node0.isNull());
430:       assertFalse(node0.isParamList());
431:       assertFalse(node0.isStringKey());
432:       assertFalse(node0.isLabel());
433:       assertFalse(node0.isOr());
434:       assertFalse(node0.isEmpty());
435:       assertFalse(node0.isDo());
436:       assertEquals(0, node0.getChildCount());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isAssignAdd());
439:       assertFalse(node0.isVar());
440:       assertFalse(iterable0.contains(node0));
441:       
442:       boolean boolean0 = node0.isBreak();
443:       assertFalse(boolean0);
444:       assertEquals(40, Node.ORIGINALNAME_PROP);
445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
446:       assertEquals(57, Node.REFLECTED_OBJECT);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(50, Node.FREE_CALL);
449:       assertEquals(52, Node.LENGTH);
450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
451:       assertEquals(48, Node.DIRECTIVES);
452:       assertEquals(54, Node.SLASH_V);
453:       assertEquals(49, Node.DIRECT_EVAL);
454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
455:       assertEquals(55, Node.INFERRED_FUNCTION);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(8, Node.FLAG_NO_THROWS);
458:       assertEquals(57, Node.LAST_PROP);
459:       assertEquals(30, Node.VAR_ARGS_NAME);
460:       assertEquals(29, Node.JSDOC_INFO_PROP);
461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
462:       assertEquals(39, Node.EMPTY_BLOCK);
463:       assertEquals(47, Node.IS_DISPATCHER);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(53, Node.INPUT_ID);
466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
468:       assertEquals(43, Node.IS_CONSTANT_NAME);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
472:       assertEquals(37, Node.OPT_ARG_NAME);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(12, Node.COLUMN_BITS);
477:       assertEquals(4095, Node.COLUMN_MASK);
478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
479:       assertEquals(1, Node.DECR_FLAG);
480:       assertFalse(node0.isVoid());
481:       assertFalse(node0.isDebugger());
482:       assertFalse(node0.isTrue());
483:       assertFalse(node0.isFunction());
484:       assertFalse(node0.isRegExp());
485:       assertFalse(node0.isTry());
486:       assertFalse(node0.isArrayLit());
487:       assertFalse(node0.isIf());
488:       assertFalse(node0.isDelProp());
489:       assertFalse(node0.isNE());
490:       assertTrue(node0.isNumber());
491:       assertFalse(node0.isGetterDef());
492:       assertFalse(node0.isCatch());
493:       assertFalse(node0.isCase());
494:       assertFalse(node0.isFor());
495:       assertFalse(node0.isBlock());
496:       assertFalse(node0.isInc());
497:       assertFalse(node0.isString());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isIn());
500:       assertFalse(node0.isContinue());
501:       assertFalse(node0.isFalse());
502:       assertFalse(node0.isThrow());
503:       assertFalse(node0.isExprResult());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isScript());
506:       assertFalse(node0.isCast());
507:       assertFalse(node0.isObjectLit());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isGetElem());
510:       assertFalse(node0.isNot());
511:       assertFalse(node0.isLabelName());
512:       assertFalse(node0.isThis());
513:       assertFalse(node0.isGetProp());
514:       assertEquals((-1), node0.getSourcePosition());
515:       assertFalse(node0.isTypeOf());
516:       assertFalse(node0.isComma());
517:       assertEquals((-1), node0.getLineno());
518:       assertFalse(node0.isDec());
519:       assertFalse(node0.isBreak());
520:       assertFalse(node0.isInstanceOf());
521:       assertFalse(node0.hasMoreThanOneChild());
522:       assertFalse(node0.isAssign());
523:       assertFalse(node0.hasOneChild());
524:       assertFalse(node0.isWhile());
525:       assertFalse(node0.hasChildren());
526:       assertEquals(39, node0.getType());
527:       assertFalse(node0.isHook());
528:       assertFalse(node0.isReturn());
529:       assertEquals((-1), node0.getCharno());
530:       assertFalse(node0.isSwitch());
531:       assertFalse(node0.isNew());
532:       assertFalse(node0.isAdd());
533:       assertFalse(node0.isCall());
534:       assertFalse(node0.isName());
535:       assertFalse(node0.isNull());
536:       assertFalse(node0.isParamList());
537:       assertFalse(node0.isStringKey());
538:       assertFalse(node0.isLabel());
539:       assertFalse(node0.isOr());
540:       assertFalse(node0.isEmpty());
541:       assertFalse(node0.isDo());
542:       assertEquals(0, node0.getChildCount());
543:       assertFalse(node0.isDefaultCase());
544:       assertFalse(node0.isAssignAdd());
545:       assertFalse(node0.isVar());
546:       
547:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
548:       assertNotNull(node_NodeMismatch0);
549:       assertEquals(40, Node.ORIGINALNAME_PROP);
550:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(50, Node.FREE_CALL);
554:       assertEquals(52, Node.LENGTH);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(48, Node.DIRECTIVES);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
560:       assertEquals(55, Node.INFERRED_FUNCTION);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(8, Node.FLAG_NO_THROWS);
563:       assertEquals(57, Node.LAST_PROP);
564:       assertEquals(30, Node.VAR_ARGS_NAME);
565:       assertEquals(29, Node.JSDOC_INFO_PROP);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(39, Node.EMPTY_BLOCK);
568:       assertEquals(47, Node.IS_DISPATCHER);
569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(56, Node.CHANGE_TIME);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(37, Node.OPT_ARG_NAME);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
581:       assertEquals(12, Node.COLUMN_BITS);
582:       assertEquals(4095, Node.COLUMN_MASK);
583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertFalse(node0.isVoid());
586:       assertFalse(node0.isDebugger());
587:       assertFalse(node0.isTrue());
588:       assertFalse(node0.isFunction());
589:       assertFalse(node0.isRegExp());
590:       assertFalse(node0.isTry());
591:       assertFalse(node0.isArrayLit());
592:       assertFalse(node0.isIf());
593:       assertFalse(node0.isDelProp());
594:       assertFalse(node0.isNE());
595:       assertTrue(node0.isNumber());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isCatch());
598:       assertFalse(node0.isCase());
599:       assertFalse(node0.isFor());
600:       assertFalse(node0.isBlock());
601:       assertFalse(node0.isInc());
602:       assertFalse(node0.isString());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.isContinue());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isThrow());
608:       assertFalse(node0.isExprResult());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.isScript());
611:       assertFalse(node0.isCast());
612:       assertFalse(node0.isObjectLit());
613:       assertFalse(node0.isAnd());
614:       assertFalse(node0.isGetElem());
615:       assertFalse(node0.isNot());
616:       assertFalse(node0.isLabelName());
617:       assertFalse(node0.isThis());
618:       assertFalse(node0.isGetProp());
619:       assertEquals((-1), node0.getSourcePosition());
620:       assertFalse(node0.isTypeOf());
621:       assertFalse(node0.isComma());
622:       assertEquals((-1), node0.getLineno());
623:       assertFalse(node0.isDec());
624:       assertFalse(node0.isBreak());
625:       assertFalse(node0.isInstanceOf());
626:       assertFalse(node0.hasMoreThanOneChild());
627:       assertFalse(node0.isAssign());
628:       assertFalse(node0.hasOneChild());
629:       assertFalse(node0.isWhile());
630:       assertFalse(node0.hasChildren());
631:       assertEquals(39, node0.getType());
632:       assertFalse(node0.isHook());
633:       assertFalse(node0.isReturn());
634:       assertEquals((-1), node0.getCharno());
635:       assertFalse(node0.isSwitch());
636:       assertFalse(node0.isNew());
637:       assertFalse(node0.isAdd());
638:       assertFalse(node0.isCall());
639:       assertFalse(node0.isName());
640:       assertFalse(node0.isNull());
641:       assertFalse(node0.isParamList());
642:       assertFalse(node0.isStringKey());
643:       assertFalse(node0.isLabel());
644:       assertFalse(node0.isOr());
645:       assertFalse(node0.isEmpty());
646:       assertFalse(node0.isDo());
647:       assertEquals(0, node0.getChildCount());
648:       assertFalse(node0.isDefaultCase());
649:       assertFalse(node0.isAssignAdd());
650:       assertFalse(node0.isVar());
651:       
652:       Node node1 = new Node(30, 1335, 1186);
653:       assertFalse(node1.equals((Object)node0));
654:       assertNotNull(node1);
655:       assertEquals(43, Node.IS_CONSTANT_NAME);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(55, Node.INFERRED_FUNCTION);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(36, Node.QUOTED_PROP);
660:       assertEquals(53, Node.INPUT_ID);
661:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
664:       assertEquals(47, Node.IS_DISPATCHER);
665:       assertEquals(40, Node.ORIGINALNAME_PROP);
666:       assertEquals(2, Node.POST_FLAG);
667:       assertEquals(50, Node.FREE_CALL);
668:       assertEquals(46, Node.IS_NAMESPACE);
669:       assertEquals(54, Node.SLASH_V);
670:       assertEquals(30, Node.VAR_ARGS_NAME);
671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
673:       assertEquals(52, Node.LENGTH);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(12, Node.COLUMN_BITS);
676:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
677:       assertEquals(57, Node.LAST_PROP);
678:       assertEquals(1, Node.DECR_FLAG);
679:       assertEquals(32, Node.INCRDECR_PROP);
680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
681:       assertEquals(56, Node.CHANGE_TIME);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
684:       assertEquals(8, Node.FLAG_NO_THROWS);
685:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
686:       assertEquals(57, Node.REFLECTED_OBJECT);
687:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(48, Node.DIRECTIVES);
690:       assertEquals(49, Node.DIRECT_EVAL);
691:       assertFalse(node1.isCase());
692:       assertEquals(1335, node1.getLineno());
693:       assertFalse(node1.isIn());
694:       assertFalse(node1.isString());
695:       assertFalse(node1.isInc());
696:       assertFalse(node1.isFor());
697:       assertFalse(node1.isHook());
698:       assertFalse(node1.isEmpty());
699:       assertFalse(node1.isNE());
700:       assertFalse(node1.isVoid());
701:       assertFalse(node1.isTrue());
702:       assertFalse(node1.isBreak());
703:       assertFalse(node1.isDelProp());
704:       assertFalse(node1.isIf());
705:       assertFalse(node1.isObjectLit());
706:       assertFalse(node1.isNot());
707:       assertFalse(node1.isFunction());
708:       assertFalse(node1.isSetterDef());
709:       assertFalse(node1.isComma());
710:       assertFalse(node1.isGetProp());
711:       assertFalse(node1.isThrow());
712:       assertFalse(node1.isCast());
713:       assertTrue(node1.isNew());
714:       assertFalse(node1.isFalse());
715:       assertFalse(node1.isDebugger());
716:       assertEquals(1186, node1.getCharno());
717:       assertFalse(node1.isAnd());
718:       assertFalse(node1.hasMoreThanOneChild());
719:       assertFalse(node1.isOr());
720:       assertFalse(node1.isContinue());
721:       assertFalse(node1.isTypeOf());
722:       assertFalse(node1.isDec());
723:       assertFalse(node1.isLabel());
724:       assertFalse(node1.hasChildren());
725:       assertFalse(node1.isAssignAdd());
726:       assertFalse(node1.isReturn());
727:       assertFalse(node1.isDo());
728:       assertFalse(node1.isBlock());
729:       assertFalse(node1.isWhile());
730:       assertFalse(node1.isCall());
731:       assertFalse(node1.isGetElem());
732:       assertFalse(node1.isAssign());
733:       assertFalse(node1.isAdd());
734:       assertEquals(5469346, node1.getSourcePosition());
735:       assertFalse(node1.isExprResult());
736:       assertFalse(node1.isNull());
737:       assertFalse(node1.isName());
738:       assertFalse(node1.isCatch());
739:       assertEquals(0, node1.getChildCount());
740:       assertFalse(node1.isWith());
741:       assertFalse(node1.isInstanceOf());
742:       assertFalse(node1.isThis());
743:       assertFalse(node1.isRegExp());
744:       assertFalse(node1.isScript());
745:       assertFalse(node1.isTry());
746:       assertFalse(node1.isDefaultCase());
747:       assertFalse(node1.isVar());
748:       assertFalse(node1.hasOneChild());
749:       assertFalse(node1.isArrayLit());
750:       assertEquals(30, node1.getType());
751:       assertFalse(node1.isGetterDef());
752:       assertFalse(node1.isNumber());
753:       assertFalse(node1.isSwitch());
754:       assertFalse(node1.isLabelName());
755:       assertFalse(node1.isStringKey());
756:       assertFalse(node1.isParamList());
757:       
758:       Node node2 = Node.newNumber((-3729.022741313));
759:       assertFalse(node2.equals((Object)node0));
760:       assertFalse(node2.equals((Object)node1));
761:       assertNotNull(node2);
762:       assertEquals(1, Node.DECR_FLAG);
763:       assertEquals(49, Node.DIRECT_EVAL);
764:       assertEquals(12, Node.COLUMN_BITS);
765:       assertEquals(46, Node.IS_NAMESPACE);
766:       assertEquals(30, Node.VAR_ARGS_NAME);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       assertEquals(54, Node.SLASH_V);
769:       assertEquals(37, Node.OPT_ARG_NAME);
770:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
771:       assertEquals(50, Node.FREE_CALL);
772:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
774:       assertEquals(32, Node.INCRDECR_PROP);
775:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
777:       assertEquals(55, Node.INFERRED_FUNCTION);
778:       assertEquals(4095, Node.COLUMN_MASK);
779:       assertEquals(36, Node.QUOTED_PROP);
780:       assertEquals(48, Node.DIRECTIVES);
781:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
782:       assertEquals(43, Node.IS_CONSTANT_NAME);
783:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
784:       assertEquals(40, Node.ORIGINALNAME_PROP);
785:       assertEquals(29, Node.JSDOC_INFO_PROP);
786:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
787:       assertEquals(56, Node.CHANGE_TIME);
788:       assertEquals(47, Node.IS_DISPATCHER);
789:       assertEquals(57, Node.REFLECTED_OBJECT);
790:       assertEquals(2, Node.POST_FLAG);
791:       assertEquals(53, Node.INPUT_ID);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(15, Node.NO_SIDE_EFFECTS);
796:       assertEquals(57, Node.LAST_PROP);
797:       assertEquals(39, Node.EMPTY_BLOCK);
798:       assertFalse(node2.isInstanceOf());
799:       assertFalse(node2.isComma());
800:       assertFalse(node2.isWith());
801:       assertFalse(node2.isNot());
802:       assertFalse(node2.isObjectLit());
803:       assertFalse(node2.isBreak());
804:       assertFalse(node2.isExprResult());
805:       assertFalse(node2.isAnd());
806:       assertFalse(node2.isCast());
807:       assertFalse(node2.isFalse());
808:       assertFalse(node2.isInc());
809:       assertFalse(node2.isThrow());
810:       assertFalse(node2.isAssignAdd());
811:       assertFalse(node2.isIn());
812:       assertEquals((-1), node2.getLineno());
813:       assertFalse(node2.isLabel());
814:       assertFalse(node2.hasMoreThanOneChild());
815:       assertFalse(node2.isIf());
816:       assertFalse(node2.isNE());
817:       assertFalse(node2.isSwitch());
818:       assertFalse(node2.isLabelName());
819:       assertFalse(node2.hasOneChild());
820:       assertFalse(node2.isHook());
821:       assertFalse(node2.isBlock());
822:       assertEquals((-1), node2.getCharno());
823:       assertFalse(node2.isRegExp());
824:       assertFalse(node2.isGetterDef());
825:       assertEquals(39, node2.getType());
826:       assertFalse(node2.isThis());
827:       assertFalse(node2.isFor());
828:       assertFalse(node2.isScript());
829:       assertFalse(node2.isCase());
830:       assertFalse(node2.isTry());
831:       assertEquals(0, node2.getChildCount());
832:       assertFalse(node2.isCatch());
833:       assertFalse(node2.isTrue());
834:       assertFalse(node2.isNull());
835:       assertFalse(node2.isVoid());
836:       assertFalse(node2.isStringKey());
837:       assertFalse(node2.isParamList());
838:       assertFalse(node2.isName());
839:       assertFalse(node2.isArrayLit());
840:       assertFalse(node2.isVar());
841:       assertFalse(node2.isAdd());
842:       assertFalse(node2.isFunction());
843:       assertFalse(node2.isDefaultCase());
844:       assertFalse(node2.isSetterDef());
845:       assertFalse(node2.isEmpty());
846:       assertFalse(node2.isNew());
847:       assertFalse(node2.isDo());
848:       assertFalse(node2.isReturn());
849:       assertFalse(node2.isContinue());
850:       assertFalse(node2.isOr());
851:       assertFalse(node2.isTypeOf());
852:       assertEquals((-1), node2.getSourcePosition());
853:       assertFalse(node2.isGetElem());
854:       assertFalse(node2.isDelProp());
855:       assertFalse(node2.isCall());
856:       assertFalse(node2.isDebugger());
857:       assertFalse(node2.isAssign());
858:       assertFalse(node2.hasChildren());
859:       assertFalse(node2.isDec());
860:       assertFalse(node2.isString());
861:       assertFalse(node2.isWhile());
862:       assertFalse(node2.isGetProp());
863:       assertTrue(node2.isNumber());
864:       assertNotSame(node2, node0);
865:       
866:       boolean boolean1 = node2.isEquivalentTo(node0);
867:       assertFalse(node0.equals((Object)node1));
868:       assertFalse(node0.equals((Object)node2));
869:       assertFalse(node2.equals((Object)node0));
870:       assertFalse(node2.equals((Object)node1));
871:       assertTrue(boolean1 == boolean0);
872:       assertFalse(boolean1);
873:       assertEquals(40, Node.ORIGINALNAME_PROP);
874:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
875:       assertEquals(57, Node.REFLECTED_OBJECT);
876:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
877:       assertEquals(50, Node.FREE_CALL);
878:       assertEquals(52, Node.LENGTH);
879:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
880:       assertEquals(48, Node.DIRECTIVES);
881:       assertEquals(54, Node.SLASH_V);
882:       assertEquals(49, Node.DIRECT_EVAL);
883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
884:       assertEquals(55, Node.INFERRED_FUNCTION);
885:       assertEquals(2, Node.POST_FLAG);
886:       assertEquals(8, Node.FLAG_NO_THROWS);
887:       assertEquals(57, Node.LAST_PROP);
888:       assertEquals(30, Node.VAR_ARGS_NAME);
889:       assertEquals(29, Node.JSDOC_INFO_PROP);
890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
891:       assertEquals(39, Node.EMPTY_BLOCK);
892:       assertEquals(47, Node.IS_DISPATCHER);
893:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
894:       assertEquals(53, Node.INPUT_ID);
895:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
897:       assertEquals(43, Node.IS_CONSTANT_NAME);
898:       assertEquals(56, Node.CHANGE_TIME);
899:       assertEquals(36, Node.QUOTED_PROP);
900:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
901:       assertEquals(37, Node.OPT_ARG_NAME);
902:       assertEquals(32, Node.INCRDECR_PROP);
903:       assertEquals(46, Node.IS_NAMESPACE);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(12, Node.COLUMN_BITS);
906:       assertEquals(4095, Node.COLUMN_MASK);
907:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
908:       assertEquals(1, Node.DECR_FLAG);
909:       assertEquals(1, Node.DECR_FLAG);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertEquals(12, Node.COLUMN_BITS);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(30, Node.VAR_ARGS_NAME);
914:       assertEquals(51, Node.STATIC_SOURCE_FILE);
915:       assertEquals(54, Node.SLASH_V);
916:       assertEquals(37, Node.OPT_ARG_NAME);
917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
918:       assertEquals(50, Node.FREE_CALL);
919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
921:       assertEquals(32, Node.INCRDECR_PROP);
922:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
923:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
924:       assertEquals(55, Node.INFERRED_FUNCTION);
925:       assertEquals(4095, Node.COLUMN_MASK);
926:       assertEquals(36, Node.QUOTED_PROP);
927:       assertEquals(48, Node.DIRECTIVES);
928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
929:       assertEquals(43, Node.IS_CONSTANT_NAME);
930:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
931:       assertEquals(40, Node.ORIGINALNAME_PROP);
932:       assertEquals(29, Node.JSDOC_INFO_PROP);
933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
934:       assertEquals(56, Node.CHANGE_TIME);
935:       assertEquals(47, Node.IS_DISPATCHER);
936:       assertEquals(57, Node.REFLECTED_OBJECT);
937:       assertEquals(2, Node.POST_FLAG);
938:       assertEquals(53, Node.INPUT_ID);
939:       assertEquals(52, Node.LENGTH);
940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
941:       assertEquals(8, Node.FLAG_NO_THROWS);
942:       assertEquals(15, Node.NO_SIDE_EFFECTS);
943:       assertEquals(57, Node.LAST_PROP);
944:       assertEquals(39, Node.EMPTY_BLOCK);
945:       assertFalse(node0.isVoid());
946:       assertFalse(node0.isDebugger());
947:       assertFalse(node0.isTrue());
948:       assertFalse(node0.isFunction());
949:       assertFalse(node0.isRegExp());
950:       assertFalse(node0.isTry());
951:       assertFalse(node0.isArrayLit());
952:       assertFalse(node0.isIf());
953:       assertFalse(node0.isDelProp());
954:       assertFalse(node0.isNE());
955:       assertTrue(node0.isNumber());
956:       assertFalse(node0.isGetterDef());
957:       assertFalse(node0.isCatch());
958:       assertFalse(node0.isCase());
959:       assertFalse(node0.isFor());
960:       assertFalse(node0.isBlock());
961:       assertFalse(node0.isInc());
962:       assertFalse(node0.isString());
963:       assertFalse(node0.isSetterDef());
964:       assertFalse(node0.isIn());
965:       assertFalse(node0.isContinue());
966:       assertFalse(node0.isFalse());
967:       assertFalse(node0.isThrow());
968:       assertFalse(node0.isExprResult());
969:       assertFalse(node0.isWith());
970:       assertFalse(node0.isScript());
971:       assertFalse(node0.isCast());
972:       assertFalse(node0.isObjectLit());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node0.isGetElem());
975:       assertFalse(node0.isNot());
976:       assertFalse(node0.isLabelName());
977:       assertFalse(node0.isThis());
978:       assertFalse(node0.isGetProp());
979:       assertEquals((-1), node0.getSourcePosition());
980:       assertFalse(node0.isTypeOf());
981:       assertFalse(node0.isComma());
982:       assertEquals((-1), node0.getLineno());
983:       assertFalse(node0.isDec());
984:       assertFalse(node0.isBreak());
985:       assertFalse(node0.isInstanceOf());
986:       assertFalse(node0.hasMoreThanOneChild());
987:       assertFalse(node0.isAssign());
988:       assertFalse(node0.hasOneChild());
989:       assertFalse(node0.isWhile());
990:       assertFalse(node0.hasChildren());
991:       assertEquals(39, node0.getType());
992:       assertFalse(node0.isHook());
993:       assertFalse(node0.isReturn());
994:       assertEquals((-1), node0.getCharno());
995:       assertFalse(node0.isSwitch());
996:       assertFalse(node0.isNew());
997:       assertFalse(node0.isAdd());
998:       assertFalse(node0.isCall());
999:       assertFalse(node0.isName());
1000:       assertFalse(node0.isNull());
1001:       assertFalse(node0.isParamList());
1002:       assertFalse(node0.isStringKey());
1003:       assertFalse(node0.isLabel());
1004:       assertFalse(node0.isOr());
1005:       assertFalse(node0.isEmpty());
1006:       assertFalse(node0.isDo());
1007:       assertEquals(0, node0.getChildCount());
1008:       assertFalse(node0.isDefaultCase());
1009:       assertFalse(node0.isAssignAdd());
1010:       assertFalse(node0.isVar());
1011:       assertFalse(node2.isInstanceOf());
1012:       assertFalse(node2.isComma());
1013:       assertFalse(node2.isWith());
1014:       assertFalse(node2.isNot());
1015:       assertFalse(node2.isObjectLit());
1016:       assertFalse(node2.isBreak());
1017:       assertFalse(node2.isExprResult());
1018:       assertFalse(node2.isAnd());
1019:       assertFalse(node2.isCast());
1020:       assertFalse(node2.isFalse());
1021:       assertFalse(node2.isInc());
1022:       assertFalse(node2.isThrow());
1023:       assertFalse(node2.isAssignAdd());
1024:       assertFalse(node2.isIn());
1025:       assertEquals((-1), node2.getLineno());
1026:       assertFalse(node2.isLabel());
1027:       assertFalse(node2.hasMoreThanOneChild());
1028:       assertFalse(node2.isIf());
1029:       assertFalse(node2.isNE());
1030:       assertFalse(node2.isSwitch());
1031:       assertFalse(node2.isLabelName());
1032:       assertFalse(node2.hasOneChild());
1033:       assertFalse(node2.isHook());
1034:       assertFalse(node2.isBlock());
1035:       assertEquals((-1), node2.getCharno());
1036:       assertFalse(node2.isRegExp());
1037:       assertFalse(node2.isGetterDef());
1038:       assertEquals(39, node2.getType());
1039:       assertFalse(node2.isThis());
1040:       assertFalse(node2.isFor());
1041:       assertFalse(node2.isScript());
1042:       assertFalse(node2.isCase());
1043:       assertFalse(node2.isTry());
1044:       assertEquals(0, node2.getChildCount());
1045:       assertFalse(node2.isCatch());
1046:       assertFalse(node2.isTrue());
1047:       assertFalse(node2.isNull());
1048:       assertFalse(node2.isVoid());
1049:       assertFalse(node2.isStringKey());
1050:       assertFalse(node2.isParamList());
1051:       assertFalse(node2.isName());
1052:       assertFalse(node2.isArrayLit());
1053:       assertFalse(node2.isVar());
1054:       assertFalse(node2.isAdd());
1055:       assertFalse(node2.isFunction());
1056:       assertFalse(node2.isDefaultCase());
1057:       assertFalse(node2.isSetterDef());
1058:       assertFalse(node2.isEmpty());
1059:       assertFalse(node2.isNew());
1060:       assertFalse(node2.isDo());
1061:       assertFalse(node2.isReturn());
1062:       assertFalse(node2.isContinue());
1063:       assertFalse(node2.isOr());
1064:       assertFalse(node2.isTypeOf());
1065:       assertEquals((-1), node2.getSourcePosition());
1066:       assertFalse(node2.isGetElem());
1067:       assertFalse(node2.isDelProp());
1068:       assertFalse(node2.isCall());
1069:       assertFalse(node2.isDebugger());
1070:       assertFalse(node2.isAssign());
1071:       assertFalse(node2.hasChildren());
1072:       assertFalse(node2.isDec());
1073:       assertFalse(node2.isString());
1074:       assertFalse(node2.isWhile());
1075:       assertFalse(node2.isGetProp());
1076:       assertTrue(node2.isNumber());
1077:       assertNotSame(node0, node2);
1078:       assertNotSame(node2, node0);
1079:       
1080:       boolean boolean2 = node1.isReturn();
1081:       assertFalse(node1.equals((Object)node2));
1082:       assertFalse(node1.equals((Object)node0));
1083:       assertTrue(boolean2 == boolean1);
1084:       assertTrue(boolean2 == boolean0);
1085:       assertFalse(boolean2);
1086:       assertEquals(43, Node.IS_CONSTANT_NAME);
1087:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1088:       assertEquals(55, Node.INFERRED_FUNCTION);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(36, Node.QUOTED_PROP);
1091:       assertEquals(53, Node.INPUT_ID);
1092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1093:       assertEquals(39, Node.EMPTY_BLOCK);
1094:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1095:       assertEquals(47, Node.IS_DISPATCHER);
1096:       assertEquals(40, Node.ORIGINALNAME_PROP);
1097:       assertEquals(2, Node.POST_FLAG);
1098:       assertEquals(50, Node.FREE_CALL);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(54, Node.SLASH_V);
1101:       assertEquals(30, Node.VAR_ARGS_NAME);
1102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1104:       assertEquals(52, Node.LENGTH);
1105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1106:       assertEquals(12, Node.COLUMN_BITS);
1107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1108:       assertEquals(57, Node.LAST_PROP);
1109:       assertEquals(1, Node.DECR_FLAG);
1110:       assertEquals(32, Node.INCRDECR_PROP);
1111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1112:       assertEquals(56, Node.CHANGE_TIME);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1115:       assertEquals(8, Node.FLAG_NO_THROWS);
1116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1119:       assertEquals(37, Node.OPT_ARG_NAME);
1120:       assertEquals(48, Node.DIRECTIVES);
1121:       assertEquals(49, Node.DIRECT_EVAL);
1122:       assertFalse(node1.isCase());
1123:       assertEquals(1335, node1.getLineno());
1124:       assertFalse(node1.isIn());
1125:       assertFalse(node1.isString());
1126:       assertFalse(node1.isInc());
1127:       assertFalse(node1.isFor());
1128:       assertFalse(node1.isHook());
1129:       assertFalse(node1.isEmpty());
1130:       assertFalse(node1.isNE());
1131:       assertFalse(node1.isVoid());
1132:       assertFalse(node1.isTrue());
1133:       assertFalse(node1.isBreak());
1134:       assertFalse(node1.isDelProp());
1135:       assertFalse(node1.isIf());
1136:       assertFalse(node1.isObjectLit());
1137:       assertFalse(node1.isNot());
1138:       assertFalse(node1.isFunction());
1139:       assertFalse(node1.isSetterDef());
1140:       assertFalse(node1.isComma());
1141:       assertFalse(node1.isGetProp());
1142:       assertFalse(node1.isThrow());
1143:       assertFalse(node1.isCast());
1144:       assertTrue(node1.isNew());
1145:       assertFalse(node1.isFalse());
1146:       assertFalse(node1.isDebugger());
1147:       assertEquals(1186, node1.getCharno());
1148:       assertFalse(node1.isAnd());
1149:       assertFalse(node1.hasMoreThanOneChild());
1150:       assertFalse(node1.isOr());
1151:       assertFalse(node1.isContinue());
1152:       assertFalse(node1.isTypeOf());
1153:       assertFalse(node1.isDec());
1154:       assertFalse(node1.isLabel());
1155:       assertFalse(node1.hasChildren());
1156:       assertFalse(node1.isAssignAdd());
1157:       assertFalse(node1.isReturn());
1158:       assertFalse(node1.isDo());
1159:       assertFalse(node1.isBlock());
1160:       assertFalse(node1.isWhile());
1161:       assertFalse(node1.isCall());
1162:       assertFalse(node1.isGetElem());
1163:       assertFalse(node1.isAssign());
1164:       assertFalse(node1.isAdd());
1165:       assertEquals(5469346, node1.getSourcePosition());
1166:       assertFalse(node1.isExprResult());
1167:       assertFalse(node1.isNull());
1168:       assertFalse(node1.isName());
1169:       assertFalse(node1.isCatch());
1170:       assertEquals(0, node1.getChildCount());
1171:       assertFalse(node1.isWith());
1172:       assertFalse(node1.isInstanceOf());
1173:       assertFalse(node1.isThis());
1174:       assertFalse(node1.isRegExp());
1175:       assertFalse(node1.isScript());
1176:       assertFalse(node1.isTry());
1177:       assertFalse(node1.isDefaultCase());
1178:       assertFalse(node1.isVar());
1179:       assertFalse(node1.hasOneChild());
1180:       assertFalse(node1.isArrayLit());
1181:       assertEquals(30, node1.getType());
1182:       assertFalse(node1.isGetterDef());
1183:       assertFalse(node1.isNumber());
1184:       assertFalse(node1.isSwitch());
1185:       assertFalse(node1.isLabelName());
1186:       assertFalse(node1.isStringKey());
1187:       assertFalse(node1.isParamList());
1188:       
1189:       boolean boolean3 = node1.isTrue();
1190:       assertFalse(node1.equals((Object)node2));
1191:       assertFalse(node1.equals((Object)node0));
1192:       assertTrue(boolean3 == boolean0);
1193:       assertTrue(boolean3 == boolean1);
1194:       assertTrue(boolean3 == boolean2);
1195:       assertFalse(boolean3);
1196:       assertEquals(43, Node.IS_CONSTANT_NAME);
1197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1198:       assertEquals(55, Node.INFERRED_FUNCTION);
1199:       assertEquals(4095, Node.COLUMN_MASK);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(53, Node.INPUT_ID);
1202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1203:       assertEquals(39, Node.EMPTY_BLOCK);
1204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1205:       assertEquals(47, Node.IS_DISPATCHER);
1206:       assertEquals(40, Node.ORIGINALNAME_PROP);
1207:       assertEquals(2, Node.POST_FLAG);
1208:       assertEquals(50, Node.FREE_CALL);
1209:       assertEquals(46, Node.IS_NAMESPACE);
1210:       assertEquals(54, Node.SLASH_V);
1211:       assertEquals(30, Node.VAR_ARGS_NAME);
1212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1214:       assertEquals(52, Node.LENGTH);
1215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1216:       assertEquals(12, Node.COLUMN_BITS);
1217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1218:       assertEquals(57, Node.LAST_PROP);
1219:       assertEquals(1, Node.DECR_FLAG);
1220:       assertEquals(32, Node.INCRDECR_PROP);
1221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1222:       assertEquals(56, Node.CHANGE_TIME);
1223:       assertEquals(29, Node.JSDOC_INFO_PROP);
1224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1225:       assertEquals(8, Node.FLAG_NO_THROWS);
1226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1227:       assertEquals(57, Node.REFLECTED_OBJECT);
1228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1229:       assertEquals(37, Node.OPT_ARG_NAME);
1230:       assertEquals(48, Node.DIRECTIVES);
1231:       assertEquals(49, Node.DIRECT_EVAL);
1232:       assertFalse(node1.isCase());
1233:       assertEquals(1335, node1.getLineno());
1234:       assertFalse(node1.isIn());
1235:       assertFalse(node1.isString());
1236:       assertFalse(node1.isInc());
1237:       assertFalse(node1.isFor());
1238:       assertFalse(node1.isHook());
1239:       assertFalse(node1.isEmpty());
1240:       assertFalse(node1.isNE());
1241:       assertFalse(node1.isVoid());
1242:       assertFalse(node1.isTrue());
1243:       assertFalse(node1.isBreak());
1244:       assertFalse(node1.isDelProp());
1245:       assertFalse(node1.isIf());
1246:       assertFalse(node1.isObjectLit());
1247:       assertFalse(node1.isNot());
1248:       assertFalse(node1.isFunction());
1249:       assertFalse(node1.isSetterDef());
1250:       assertFalse(node1.isComma());
1251:       assertFalse(node1.isGetProp());
1252:       assertFalse(node1.isThrow());
1253:       assertFalse(node1.isCast());
1254:       assertTrue(node1.isNew());
1255:       assertFalse(node1.isFalse());
1256:       assertFalse(node1.isDebugger());
1257:       assertEquals(1186, node1.getCharno());
1258:       assertFalse(node1.isAnd());
1259:       assertFalse(node1.hasMoreThanOneChild());
1260:       assertFalse(node1.isOr());
1261:       assertFalse(node1.isContinue());
1262:       assertFalse(node1.isTypeOf());
1263:       assertFalse(node1.isDec());
1264:       assertFalse(node1.isLabel());
1265:       assertFalse(node1.hasChildren());
1266:       assertFalse(node1.isAssignAdd());
1267:       assertFalse(node1.isReturn());
1268:       assertFalse(node1.isDo());
1269:       assertFalse(node1.isBlock());
1270:       assertFalse(node1.isWhile());
1271:       assertFalse(node1.isCall());
1272:       assertFalse(node1.isGetElem());
1273:       assertFalse(node1.isAssign());
1274:       assertFalse(node1.isAdd());
1275:       assertEquals(5469346, node1.getSourcePosition());
1276:       assertFalse(node1.isExprResult());
1277:       assertFalse(node1.isNull());
1278:       assertFalse(node1.isName());
1279:       assertFalse(node1.isCatch());
1280:       assertEquals(0, node1.getChildCount());
1281:       assertFalse(node1.isWith());
1282:       assertFalse(node1.isInstanceOf());
1283:       assertFalse(node1.isThis());
1284:       assertFalse(node1.isRegExp());
1285:       assertFalse(node1.isScript());
1286:       assertFalse(node1.isTry());
1287:       assertFalse(node1.isDefaultCase());
1288:       assertFalse(node1.isVar());
1289:       assertFalse(node1.hasOneChild());
1290:       assertFalse(node1.isArrayLit());
1291:       assertEquals(30, node1.getType());
1292:       assertFalse(node1.isGetterDef());
1293:       assertFalse(node1.isNumber());
1294:       assertFalse(node1.isSwitch());
1295:       assertFalse(node1.isLabelName());
1296:       assertFalse(node1.isStringKey());
1297:       assertFalse(node1.isParamList());
1298:   }
1299: }
RegularFileObject[/tmp/EvoSuite_144_1629223123065/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.jstype.TemplatizedType",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.Platform",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:43.341 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(199.2059217532582);
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());

String string0 = node0.toString();
assertEquals("NUMBER 199.2059217532582", string0);
assertNotNull(string0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isBreak();
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
assertNotNull(node_NodeMismatch0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());

Node node1 = new Node(30, 1335, 1186);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.isCase());
assertEquals(1335, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertEquals(1186, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertEquals(5469346, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());

Node node2 = Node.newNumber((-3729.022741313));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isRegExp());
assertFalse(node2.isGetterDef());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isCall());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertNotSame(node2, node0);

boolean boolean1 = node2.isEquivalentTo(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertTrue(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isRegExp());
assertFalse(node2.isGetterDef());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isCall());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertNotSame(node0, node2);
assertNotSame(node2, node0);

boolean boolean2 = node1.isReturn();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.isCase());
assertEquals(1335, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertEquals(1186, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertEquals(5469346, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());

boolean boolean3 = node1.isTrue();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.isCase());
assertEquals(1335, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertTrue(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertEquals(1186, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertEquals(5469346, node1.getSourcePosition());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(30, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());


[MASTER] 17:58:52.800 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_190_1629223132447/com/google/javascript/rhino/Node_190_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_190_1629223132447/com/google/javascript/rhino/Node_190_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:52.800 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:52.800 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:52.801 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1401
[MASTER] 17:58:52.802 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_190_1629223132447/com/google/javascript/rhino/Node_190_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_190_tmp__ESTest extends Node_190_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node[] nodeArray0 = new Node[0];
22:       Node node0 = new Node(154, nodeArray0, 154, (-2313));
23:       assertNotNull(node0);
24:       assertEquals(15, Node.NO_SIDE_EFFECTS);
25:       assertEquals(57, Node.LAST_PROP);
26:       assertEquals(49, Node.DIRECT_EVAL);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(1, Node.DECR_FLAG);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(37, Node.OPT_ARG_NAME);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(32, Node.INCRDECR_PROP);
37:       assertEquals(46, Node.IS_NAMESPACE);
38:       assertEquals(51, Node.STATIC_SOURCE_FILE);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
42:       assertEquals(43, Node.IS_CONSTANT_NAME);
43:       assertEquals(48, Node.DIRECTIVES);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
47:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(2, Node.POST_FLAG);
50:       assertEquals(56, Node.CHANGE_TIME);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(57, Node.REFLECTED_OBJECT);
54:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(39, Node.EMPTY_BLOCK);
57:       assertEquals(29, Node.JSDOC_INFO_PROP);
58:       assertEquals(53, Node.INPUT_ID);
59:       assertEquals(55, Node.INFERRED_FUNCTION);
60:       assertFalse(node0.isCatch());
61:       assertEquals(0, node0.getChildCount());
62:       assertFalse(node0.isParamList());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isTrue());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isRegExp());
67:       assertFalse(node0.isArrayLit());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isIn());
79:       assertFalse(node0.isLabel());
80:       assertFalse(node0.isNE());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isSwitch());
83:       assertEquals((-1), node0.getLineno());
84:       assertFalse(node0.isLabelName());
85:       assertEquals(154, node0.getType());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isFor());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.isThis());
91:       assertEquals((-1), node0.getCharno());
92:       assertFalse(node0.isNumber());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.isCase());
97:       assertFalse(node0.isObjectLit());
98:       assertFalse(node0.isAnd());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isNot());
101:       assertFalse(node0.isExprResult());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isInstanceOf());
104:       assertFalse(node0.isBreak());
105:       assertFalse(node0.isCast());
106:       assertFalse(node0.isThrow());
107:       assertFalse(node0.isFalse());
108:       assertFalse(node0.isInc());
109:       assertFalse(node0.isAssignAdd());
110:       assertFalse(node0.isContinue());
111:       assertFalse(node0.isReturn());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.isOr());
114:       assertFalse(node0.isTypeOf());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.isGetElem());
117:       assertFalse(node0.isCall());
118:       assertFalse(node0.isAssign());
119:       assertFalse(node0.isDec());
120:       assertEquals((-1), node0.getSourcePosition());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isDebugger());
123:       assertTrue(node0.isStringKey());
124:       assertFalse(node0.isString());
125:       assertFalse(node0.isGetProp());
126:       assertEquals(0, nodeArray0.length);
127:       
128:       Node node1 = new Node(102, node0, node0, node0, node0, 102, (-577));
129:       assertFalse(node1.equals((Object)node0));
130:       assertNotNull(node1);
131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(49, Node.DIRECT_EVAL);
134:       assertEquals(30, Node.VAR_ARGS_NAME);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(32, Node.INCRDECR_PROP);
144:       assertEquals(46, Node.IS_NAMESPACE);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(4095, Node.COLUMN_MASK);
153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(47, Node.IS_DISPATCHER);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(57, Node.REFLECTED_OBJECT);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertEquals(39, Node.EMPTY_BLOCK);
164:       assertEquals(29, Node.JSDOC_INFO_PROP);
165:       assertEquals(53, Node.INPUT_ID);
166:       assertEquals(55, Node.INFERRED_FUNCTION);
167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
168:       assertEquals(32, Node.INCRDECR_PROP);
169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
170:       assertEquals(37, Node.OPT_ARG_NAME);
171:       assertEquals(30, Node.VAR_ARGS_NAME);
172:       assertEquals(57, Node.LAST_PROP);
173:       assertEquals(1, Node.DECR_FLAG);
174:       assertEquals(2, Node.POST_FLAG);
175:       assertEquals(47, Node.IS_DISPATCHER);
176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
177:       assertEquals(12, Node.COLUMN_BITS);
178:       assertEquals(52, Node.LENGTH);
179:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
180:       assertEquals(15, Node.NO_SIDE_EFFECTS);
181:       assertEquals(29, Node.JSDOC_INFO_PROP);
182:       assertEquals(53, Node.INPUT_ID);
183:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
184:       assertEquals(49, Node.DIRECT_EVAL);
185:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
186:       assertEquals(36, Node.QUOTED_PROP);
187:       assertEquals(56, Node.CHANGE_TIME);
188:       assertEquals(57, Node.REFLECTED_OBJECT);
189:       assertEquals(48, Node.DIRECTIVES);
190:       assertEquals(55, Node.INFERRED_FUNCTION);
191:       assertEquals(8, Node.FLAG_NO_THROWS);
192:       assertEquals(39, Node.EMPTY_BLOCK);
193:       assertEquals(4095, Node.COLUMN_MASK);
194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
195:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
198:       assertEquals(40, Node.ORIGINALNAME_PROP);
199:       assertEquals(50, Node.FREE_CALL);
200:       assertEquals(43, Node.IS_CONSTANT_NAME);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(54, Node.SLASH_V);
203:       assertFalse(node0.isCatch());
204:       assertEquals(0, node0.getChildCount());
205:       assertFalse(node0.isParamList());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isTrue());
208:       assertFalse(node0.isVoid());
209:       assertFalse(node0.isRegExp());
210:       assertFalse(node0.isArrayLit());
211:       assertFalse(node0.isVar());
212:       assertFalse(node0.isName());
213:       assertFalse(node0.isNull());
214:       assertFalse(node0.isDefaultCase());
215:       assertFalse(node0.isDo());
216:       assertFalse(node0.isEmpty());
217:       assertFalse(node0.isAdd());
218:       assertFalse(node0.isNew());
219:       assertFalse(node0.isSetterDef());
220:       assertFalse(node0.hasMoreThanOneChild());
221:       assertFalse(node0.isIn());
222:       assertFalse(node0.isLabel());
223:       assertFalse(node0.isNE());
224:       assertFalse(node0.isIf());
225:       assertFalse(node0.isSwitch());
226:       assertEquals((-1), node0.getLineno());
227:       assertFalse(node0.isLabelName());
228:       assertEquals(154, node0.getType());
229:       assertFalse(node0.isGetterDef());
230:       assertFalse(node0.isBlock());
231:       assertFalse(node0.isFor());
232:       assertFalse(node0.isHook());
233:       assertFalse(node0.isThis());
234:       assertEquals((-1), node0.getCharno());
235:       assertFalse(node0.isNumber());
236:       assertFalse(node0.isTry());
237:       assertFalse(node0.hasOneChild());
238:       assertFalse(node0.isScript());
239:       assertFalse(node0.isCase());
240:       assertFalse(node0.isObjectLit());
241:       assertFalse(node0.isAnd());
242:       assertFalse(node0.isWith());
243:       assertFalse(node0.isNot());
244:       assertFalse(node0.isExprResult());
245:       assertFalse(node0.isComma());
246:       assertFalse(node0.isInstanceOf());
247:       assertFalse(node0.isBreak());
248:       assertFalse(node0.isCast());
249:       assertFalse(node0.isThrow());
250:       assertFalse(node0.isFalse());
251:       assertFalse(node0.isInc());
252:       assertFalse(node0.isAssignAdd());
253:       assertFalse(node0.isContinue());
254:       assertFalse(node0.isReturn());
255:       assertFalse(node0.isWhile());
256:       assertFalse(node0.isOr());
257:       assertFalse(node0.isTypeOf());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isGetElem());
260:       assertFalse(node0.isCall());
261:       assertFalse(node0.isAssign());
262:       assertFalse(node0.isDec());
263:       assertEquals((-1), node0.getSourcePosition());
264:       assertFalse(node0.hasChildren());
265:       assertFalse(node0.isDebugger());
266:       assertTrue(node0.isStringKey());
267:       assertFalse(node0.isString());
268:       assertFalse(node0.isGetProp());
269:       assertFalse(node1.isThis());
270:       assertFalse(node1.isComma());
271:       assertFalse(node1.isGetProp());
272:       assertFalse(node1.isBreak());
273:       assertFalse(node1.isThrow());
274:       assertFalse(node1.isInstanceOf());
275:       assertFalse(node1.isFalse());
276:       assertFalse(node1.isWith());
277:       assertFalse(node1.isHook());
278:       assertFalse(node1.isSwitch());
279:       assertFalse(node1.isScript());
280:       assertFalse(node1.isString());
281:       assertFalse(node1.isCase());
282:       assertFalse(node1.isObjectLit());
283:       assertFalse(node1.isAnd());
284:       assertFalse(node1.isNot());
285:       assertEquals((-1), node1.getSourcePosition());
286:       assertEquals((-1), node1.getCharno());
287:       assertFalse(node1.isTypeOf());
288:       assertFalse(node1.isAssignAdd());
289:       assertFalse(node1.isDelProp());
290:       assertFalse(node1.isLabelName());
291:       assertFalse(node1.isEmpty());
292:       assertFalse(node1.isGetElem());
293:       assertTrue(node1.hasOneChild());
294:       assertFalse(node1.isReturn());
295:       assertFalse(node1.isAssign());
296:       assertFalse(node1.isDec());
297:       assertFalse(node1.isLabel());
298:       assertFalse(node1.isVoid());
299:       assertFalse(node1.isExprResult());
300:       assertFalse(node1.isTrue());
301:       assertFalse(node1.isDefaultCase());
302:       assertFalse(node1.isDo());
303:       assertFalse(node1.isAdd());
304:       assertFalse(node1.isNew());
305:       assertFalse(node1.isOr());
306:       assertFalse(node1.isSetterDef());
307:       assertFalse(node1.isNull());
308:       assertFalse(node1.isParamList());
309:       assertFalse(node1.isName());
310:       assertFalse(node1.isCatch());
311:       assertFalse(node1.isCall());
312:       assertFalse(node1.isVar());
313:       assertTrue(node1.isInc());
314:       assertFalse(node1.isBlock());
315:       assertEquals(102, node1.getType());
316:       assertFalse(node1.isFunction());
317:       assertFalse(node1.isWhile());
318:       assertFalse(node1.isTry());
319:       assertFalse(node1.isArrayLit());
320:       assertFalse(node1.isStringKey());
321:       assertFalse(node1.isGetterDef());
322:       assertFalse(node1.isDebugger());
323:       assertFalse(node1.isNE());
324:       assertFalse(node1.isIf());
325:       assertFalse(node1.isNumber());
326:       assertEquals((-1), node1.getLineno());
327:       assertTrue(node1.hasChildren());
328:       assertFalse(node1.hasMoreThanOneChild());
329:       assertFalse(node1.isCast());
330:       assertFalse(node1.isContinue());
331:       assertFalse(node1.isFor());
332:       assertEquals(1, node1.getChildCount());
333:       assertFalse(node1.isRegExp());
334:       assertFalse(node1.isIn());
335:       assertEquals(0, nodeArray0.length);
336:       
337:       node1.putIntProp(16, 0);
338:       assertFalse(node0.equals((Object)node1));
339:       assertFalse(node1.equals((Object)node0));
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(57, Node.LAST_PROP);
342:       assertEquals(49, Node.DIRECT_EVAL);
343:       assertEquals(30, Node.VAR_ARGS_NAME);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(54, Node.SLASH_V);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(37, Node.OPT_ARG_NAME);
350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
351:       assertEquals(50, Node.FREE_CALL);
352:       assertEquals(32, Node.INCRDECR_PROP);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(51, Node.STATIC_SOURCE_FILE);
355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
356:       assertEquals(36, Node.QUOTED_PROP);
357:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
358:       assertEquals(43, Node.IS_CONSTANT_NAME);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
361:       assertEquals(4095, Node.COLUMN_MASK);
362:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(2, Node.POST_FLAG);
366:       assertEquals(56, Node.CHANGE_TIME);
367:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(57, Node.REFLECTED_OBJECT);
370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
371:       assertEquals(8, Node.FLAG_NO_THROWS);
372:       assertEquals(39, Node.EMPTY_BLOCK);
373:       assertEquals(29, Node.JSDOC_INFO_PROP);
374:       assertEquals(53, Node.INPUT_ID);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
377:       assertEquals(32, Node.INCRDECR_PROP);
378:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
379:       assertEquals(37, Node.OPT_ARG_NAME);
380:       assertEquals(30, Node.VAR_ARGS_NAME);
381:       assertEquals(57, Node.LAST_PROP);
382:       assertEquals(1, Node.DECR_FLAG);
383:       assertEquals(2, Node.POST_FLAG);
384:       assertEquals(47, Node.IS_DISPATCHER);
385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
386:       assertEquals(12, Node.COLUMN_BITS);
387:       assertEquals(52, Node.LENGTH);
388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
389:       assertEquals(15, Node.NO_SIDE_EFFECTS);
390:       assertEquals(29, Node.JSDOC_INFO_PROP);
391:       assertEquals(53, Node.INPUT_ID);
392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
393:       assertEquals(49, Node.DIRECT_EVAL);
394:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
395:       assertEquals(36, Node.QUOTED_PROP);
396:       assertEquals(56, Node.CHANGE_TIME);
397:       assertEquals(57, Node.REFLECTED_OBJECT);
398:       assertEquals(48, Node.DIRECTIVES);
399:       assertEquals(55, Node.INFERRED_FUNCTION);
400:       assertEquals(8, Node.FLAG_NO_THROWS);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(4095, Node.COLUMN_MASK);
403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
407:       assertEquals(40, Node.ORIGINALNAME_PROP);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(43, Node.IS_CONSTANT_NAME);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(54, Node.SLASH_V);
412:       assertFalse(node0.isCatch());
413:       assertEquals(0, node0.getChildCount());
414:       assertFalse(node0.isParamList());
415:       assertFalse(node0.isFunction());
416:       assertFalse(node0.isTrue());
417:       assertFalse(node0.isVoid());
418:       assertFalse(node0.isRegExp());
419:       assertFalse(node0.isArrayLit());
420:       assertFalse(node0.isVar());
421:       assertFalse(node0.isName());
422:       assertFalse(node0.isNull());
423:       assertFalse(node0.isDefaultCase());
424:       assertFalse(node0.isDo());
425:       assertFalse(node0.isEmpty());
426:       assertFalse(node0.isAdd());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isSetterDef());
429:       assertFalse(node0.hasMoreThanOneChild());
430:       assertFalse(node0.isIn());
431:       assertFalse(node0.isLabel());
432:       assertFalse(node0.isNE());
433:       assertFalse(node0.isIf());
434:       assertFalse(node0.isSwitch());
435:       assertEquals((-1), node0.getLineno());
436:       assertFalse(node0.isLabelName());
437:       assertEquals(154, node0.getType());
438:       assertFalse(node0.isGetterDef());
439:       assertFalse(node0.isBlock());
440:       assertFalse(node0.isFor());
441:       assertFalse(node0.isHook());
442:       assertFalse(node0.isThis());
443:       assertEquals((-1), node0.getCharno());
444:       assertFalse(node0.isNumber());
445:       assertFalse(node0.isTry());
446:       assertFalse(node0.hasOneChild());
447:       assertFalse(node0.isScript());
448:       assertFalse(node0.isCase());
449:       assertFalse(node0.isObjectLit());
450:       assertFalse(node0.isAnd());
451:       assertFalse(node0.isWith());
452:       assertFalse(node0.isNot());
453:       assertFalse(node0.isExprResult());
454:       assertFalse(node0.isComma());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isBreak());
457:       assertFalse(node0.isCast());
458:       assertFalse(node0.isThrow());
459:       assertFalse(node0.isFalse());
460:       assertFalse(node0.isInc());
461:       assertFalse(node0.isAssignAdd());
462:       assertFalse(node0.isContinue());
463:       assertFalse(node0.isReturn());
464:       assertFalse(node0.isWhile());
465:       assertFalse(node0.isOr());
466:       assertFalse(node0.isTypeOf());
467:       assertFalse(node0.isDelProp());
468:       assertFalse(node0.isGetElem());
469:       assertFalse(node0.isCall());
470:       assertFalse(node0.isAssign());
471:       assertFalse(node0.isDec());
472:       assertEquals((-1), node0.getSourcePosition());
473:       assertFalse(node0.hasChildren());
474:       assertFalse(node0.isDebugger());
475:       assertTrue(node0.isStringKey());
476:       assertFalse(node0.isString());
477:       assertFalse(node0.isGetProp());
478:       assertFalse(node1.isThis());
479:       assertFalse(node1.isComma());
480:       assertFalse(node1.isGetProp());
481:       assertFalse(node1.isBreak());
482:       assertFalse(node1.isThrow());
483:       assertFalse(node1.isInstanceOf());
484:       assertFalse(node1.isFalse());
485:       assertFalse(node1.isWith());
486:       assertFalse(node1.isHook());
487:       assertFalse(node1.isSwitch());
488:       assertFalse(node1.isScript());
489:       assertFalse(node1.isString());
490:       assertFalse(node1.isCase());
491:       assertFalse(node1.isObjectLit());
492:       assertFalse(node1.isAnd());
493:       assertFalse(node1.isNot());
494:       assertEquals((-1), node1.getSourcePosition());
495:       assertEquals((-1), node1.getCharno());
496:       assertFalse(node1.isTypeOf());
497:       assertFalse(node1.isAssignAdd());
498:       assertFalse(node1.isDelProp());
499:       assertFalse(node1.isLabelName());
500:       assertFalse(node1.isEmpty());
501:       assertFalse(node1.isGetElem());
502:       assertTrue(node1.hasOneChild());
503:       assertFalse(node1.isReturn());
504:       assertFalse(node1.isAssign());
505:       assertFalse(node1.isDec());
506:       assertFalse(node1.isLabel());
507:       assertFalse(node1.isVoid());
508:       assertFalse(node1.isExprResult());
509:       assertFalse(node1.isTrue());
510:       assertFalse(node1.isDefaultCase());
511:       assertFalse(node1.isDo());
512:       assertFalse(node1.isAdd());
513:       assertFalse(node1.isNew());
514:       assertFalse(node1.isOr());
515:       assertFalse(node1.isSetterDef());
516:       assertFalse(node1.isNull());
517:       assertFalse(node1.isParamList());
518:       assertFalse(node1.isName());
519:       assertFalse(node1.isCatch());
520:       assertFalse(node1.isCall());
521:       assertFalse(node1.isVar());
522:       assertTrue(node1.isInc());
523:       assertFalse(node1.isBlock());
524:       assertEquals(102, node1.getType());
525:       assertFalse(node1.isFunction());
526:       assertFalse(node1.isWhile());
527:       assertFalse(node1.isTry());
528:       assertFalse(node1.isArrayLit());
529:       assertFalse(node1.isStringKey());
530:       assertFalse(node1.isGetterDef());
531:       assertFalse(node1.isDebugger());
532:       assertFalse(node1.isNE());
533:       assertFalse(node1.isIf());
534:       assertFalse(node1.isNumber());
535:       assertEquals((-1), node1.getLineno());
536:       assertTrue(node1.hasChildren());
537:       assertFalse(node1.hasMoreThanOneChild());
538:       assertFalse(node1.isCast());
539:       assertFalse(node1.isContinue());
540:       assertFalse(node1.isFor());
541:       assertEquals(1, node1.getChildCount());
542:       assertFalse(node1.isRegExp());
543:       assertFalse(node1.isIn());
544:       assertEquals(0, nodeArray0.length);
545:       assertNotSame(node0, node1);
546:       assertNotSame(node1, node0);
547:       
548:       node0.setCharno(2970);
549:       assertFalse(node0.equals((Object)node1));
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(57, Node.LAST_PROP);
552:       assertEquals(49, Node.DIRECT_EVAL);
553:       assertEquals(30, Node.VAR_ARGS_NAME);
554:       assertEquals(1, Node.DECR_FLAG);
555:       assertEquals(54, Node.SLASH_V);
556:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
557:       assertEquals(12, Node.COLUMN_BITS);
558:       assertEquals(40, Node.ORIGINALNAME_PROP);
559:       assertEquals(37, Node.OPT_ARG_NAME);
560:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
561:       assertEquals(50, Node.FREE_CALL);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertEquals(46, Node.IS_NAMESPACE);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
566:       assertEquals(36, Node.QUOTED_PROP);
567:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
568:       assertEquals(43, Node.IS_CONSTANT_NAME);
569:       assertEquals(48, Node.DIRECTIVES);
570:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
571:       assertEquals(4095, Node.COLUMN_MASK);
572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
573:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(2, Node.POST_FLAG);
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
578:       assertEquals(52, Node.LENGTH);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
581:       assertEquals(8, Node.FLAG_NO_THROWS);
582:       assertEquals(39, Node.EMPTY_BLOCK);
583:       assertEquals(29, Node.JSDOC_INFO_PROP);
584:       assertEquals(53, Node.INPUT_ID);
585:       assertEquals(55, Node.INFERRED_FUNCTION);
586:       assertFalse(node0.isCatch());
587:       assertEquals(0, node0.getChildCount());
588:       assertFalse(node0.isParamList());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isTrue());
591:       assertFalse(node0.isVoid());
592:       assertFalse(node0.isRegExp());
593:       assertFalse(node0.isArrayLit());
594:       assertFalse(node0.isVar());
595:       assertFalse(node0.isName());
596:       assertFalse(node0.isNull());
597:       assertFalse(node0.isDefaultCase());
598:       assertFalse(node0.isDo());
599:       assertFalse(node0.isEmpty());
600:       assertFalse(node0.isAdd());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isSetterDef());
603:       assertFalse(node0.hasMoreThanOneChild());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.isLabel());
606:       assertFalse(node0.isNE());
607:       assertFalse(node0.isIf());
608:       assertFalse(node0.isSwitch());
609:       assertEquals((-1), node0.getLineno());
610:       assertFalse(node0.isLabelName());
611:       assertEquals(154, node0.getType());
612:       assertFalse(node0.isGetterDef());
613:       assertFalse(node0.isBlock());
614:       assertFalse(node0.isFor());
615:       assertFalse(node0.isHook());
616:       assertFalse(node0.isThis());
617:       assertEquals((-1), node0.getCharno());
618:       assertFalse(node0.isNumber());
619:       assertFalse(node0.isTry());
620:       assertFalse(node0.hasOneChild());
621:       assertFalse(node0.isScript());
622:       assertFalse(node0.isCase());
623:       assertFalse(node0.isObjectLit());
624:       assertFalse(node0.isAnd());
625:       assertFalse(node0.isWith());
626:       assertFalse(node0.isNot());
627:       assertFalse(node0.isExprResult());
628:       assertFalse(node0.isComma());
629:       assertFalse(node0.isInstanceOf());
630:       assertFalse(node0.isBreak());
631:       assertFalse(node0.isCast());
632:       assertFalse(node0.isThrow());
633:       assertFalse(node0.isFalse());
634:       assertFalse(node0.isInc());
635:       assertFalse(node0.isAssignAdd());
636:       assertFalse(node0.isContinue());
637:       assertFalse(node0.isReturn());
638:       assertFalse(node0.isWhile());
639:       assertFalse(node0.isOr());
640:       assertFalse(node0.isTypeOf());
641:       assertFalse(node0.isDelProp());
642:       assertFalse(node0.isGetElem());
643:       assertFalse(node0.isCall());
644:       assertFalse(node0.isAssign());
645:       assertFalse(node0.isDec());
646:       assertEquals((-1), node0.getSourcePosition());
647:       assertFalse(node0.hasChildren());
648:       assertFalse(node0.isDebugger());
649:       assertTrue(node0.isStringKey());
650:       assertFalse(node0.isString());
651:       assertFalse(node0.isGetProp());
652:       assertEquals(0, nodeArray0.length);
653:       assertNotSame(node0, node1);
654:       
655:       boolean boolean0 = node1.isVarArgs();
656:       assertFalse(node0.equals((Object)node1));
657:       assertFalse(node1.equals((Object)node0));
658:       assertFalse(boolean0);
659:       assertEquals(15, Node.NO_SIDE_EFFECTS);
660:       assertEquals(57, Node.LAST_PROP);
661:       assertEquals(49, Node.DIRECT_EVAL);
662:       assertEquals(30, Node.VAR_ARGS_NAME);
663:       assertEquals(1, Node.DECR_FLAG);
664:       assertEquals(54, Node.SLASH_V);
665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
666:       assertEquals(12, Node.COLUMN_BITS);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
670:       assertEquals(50, Node.FREE_CALL);
671:       assertEquals(32, Node.INCRDECR_PROP);
672:       assertEquals(46, Node.IS_NAMESPACE);
673:       assertEquals(51, Node.STATIC_SOURCE_FILE);
674:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
675:       assertEquals(36, Node.QUOTED_PROP);
676:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
677:       assertEquals(43, Node.IS_CONSTANT_NAME);
678:       assertEquals(48, Node.DIRECTIVES);
679:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
680:       assertEquals(4095, Node.COLUMN_MASK);
681:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
682:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
683:       assertEquals(47, Node.IS_DISPATCHER);
684:       assertEquals(2, Node.POST_FLAG);
685:       assertEquals(56, Node.CHANGE_TIME);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(52, Node.LENGTH);
688:       assertEquals(57, Node.REFLECTED_OBJECT);
689:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
690:       assertEquals(8, Node.FLAG_NO_THROWS);
691:       assertEquals(39, Node.EMPTY_BLOCK);
692:       assertEquals(29, Node.JSDOC_INFO_PROP);
693:       assertEquals(53, Node.INPUT_ID);
694:       assertEquals(55, Node.INFERRED_FUNCTION);
695:       assertEquals(51, Node.STATIC_SOURCE_FILE);
696:       assertEquals(32, Node.INCRDECR_PROP);
697:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
698:       assertEquals(37, Node.OPT_ARG_NAME);
699:       assertEquals(30, Node.VAR_ARGS_NAME);
700:       assertEquals(57, Node.LAST_PROP);
701:       assertEquals(1, Node.DECR_FLAG);
702:       assertEquals(2, Node.POST_FLAG);
703:       assertEquals(47, Node.IS_DISPATCHER);
704:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
705:       assertEquals(12, Node.COLUMN_BITS);
706:       assertEquals(52, Node.LENGTH);
707:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
708:       assertEquals(15, Node.NO_SIDE_EFFECTS);
709:       assertEquals(29, Node.JSDOC_INFO_PROP);
710:       assertEquals(53, Node.INPUT_ID);
711:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
712:       assertEquals(49, Node.DIRECT_EVAL);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(36, Node.QUOTED_PROP);
715:       assertEquals(56, Node.CHANGE_TIME);
716:       assertEquals(57, Node.REFLECTED_OBJECT);
717:       assertEquals(48, Node.DIRECTIVES);
718:       assertEquals(55, Node.INFERRED_FUNCTION);
719:       assertEquals(8, Node.FLAG_NO_THROWS);
720:       assertEquals(39, Node.EMPTY_BLOCK);
721:       assertEquals(4095, Node.COLUMN_MASK);
722:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
723:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
724:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
726:       assertEquals(40, Node.ORIGINALNAME_PROP);
727:       assertEquals(50, Node.FREE_CALL);
728:       assertEquals(43, Node.IS_CONSTANT_NAME);
729:       assertEquals(46, Node.IS_NAMESPACE);
730:       assertEquals(54, Node.SLASH_V);
731:       assertFalse(node0.isCatch());
732:       assertEquals(0, node0.getChildCount());
733:       assertFalse(node0.isParamList());
734:       assertFalse(node0.isFunction());
735:       assertFalse(node0.isTrue());
736:       assertFalse(node0.isVoid());
737:       assertFalse(node0.isRegExp());
738:       assertFalse(node0.isArrayLit());
739:       assertFalse(node0.isVar());
740:       assertFalse(node0.isName());
741:       assertFalse(node0.isNull());
742:       assertFalse(node0.isDefaultCase());
743:       assertFalse(node0.isDo());
744:       assertFalse(node0.isEmpty());
745:       assertFalse(node0.isAdd());
746:       assertFalse(node0.isNew());
747:       assertFalse(node0.isSetterDef());
748:       assertFalse(node0.hasMoreThanOneChild());
749:       assertFalse(node0.isIn());
750:       assertFalse(node0.isLabel());
751:       assertFalse(node0.isNE());
752:       assertFalse(node0.isIf());
753:       assertFalse(node0.isSwitch());
754:       assertEquals((-1), node0.getLineno());
755:       assertFalse(node0.isLabelName());
756:       assertEquals(154, node0.getType());
757:       assertFalse(node0.isGetterDef());
758:       assertFalse(node0.isBlock());
759:       assertFalse(node0.isFor());
760:       assertFalse(node0.isHook());
761:       assertFalse(node0.isThis());
762:       assertEquals((-1), node0.getCharno());
763:       assertFalse(node0.isNumber());
764:       assertFalse(node0.isTry());
765:       assertFalse(node0.hasOneChild());
766:       assertFalse(node0.isScript());
767:       assertFalse(node0.isCase());
768:       assertFalse(node0.isObjectLit());
769:       assertFalse(node0.isAnd());
770:       assertFalse(node0.isWith());
771:       assertFalse(node0.isNot());
772:       assertFalse(node0.isExprResult());
773:       assertFalse(node0.isComma());
774:       assertFalse(node0.isInstanceOf());
775:       assertFalse(node0.isBreak());
776:       assertFalse(node0.isCast());
777:       assertFalse(node0.isThrow());
778:       assertFalse(node0.isFalse());
779:       assertFalse(node0.isInc());
780:       assertFalse(node0.isAssignAdd());
781:       assertFalse(node0.isContinue());
782:       assertFalse(node0.isReturn());
783:       assertFalse(node0.isWhile());
784:       assertFalse(node0.isOr());
785:       assertFalse(node0.isTypeOf());
786:       assertFalse(node0.isDelProp());
787:       assertFalse(node0.isGetElem());
788:       assertFalse(node0.isCall());
789:       assertFalse(node0.isAssign());
790:       assertFalse(node0.isDec());
791:       assertEquals((-1), node0.getSourcePosition());
792:       assertFalse(node0.hasChildren());
793:       assertFalse(node0.isDebugger());
794:       assertTrue(node0.isStringKey());
795:       assertFalse(node0.isString());
796:       assertFalse(node0.isGetProp());
797:       assertFalse(node1.isThis());
798:       assertFalse(node1.isComma());
799:       assertFalse(node1.isGetProp());
800:       assertFalse(node1.isBreak());
801:       assertFalse(node1.isThrow());
802:       assertFalse(node1.isInstanceOf());
803:       assertFalse(node1.isFalse());
804:       assertFalse(node1.isWith());
805:       assertFalse(node1.isHook());
806:       assertFalse(node1.isSwitch());
807:       assertFalse(node1.isScript());
808:       assertFalse(node1.isString());
809:       assertFalse(node1.isCase());
810:       assertFalse(node1.isObjectLit());
811:       assertFalse(node1.isAnd());
812:       assertFalse(node1.isNot());
813:       assertEquals((-1), node1.getSourcePosition());
814:       assertEquals((-1), node1.getCharno());
815:       assertFalse(node1.isTypeOf());
816:       assertFalse(node1.isAssignAdd());
817:       assertFalse(node1.isDelProp());
818:       assertFalse(node1.isLabelName());
819:       assertFalse(node1.isEmpty());
820:       assertFalse(node1.isGetElem());
821:       assertTrue(node1.hasOneChild());
822:       assertFalse(node1.isReturn());
823:       assertFalse(node1.isAssign());
824:       assertFalse(node1.isDec());
825:       assertFalse(node1.isLabel());
826:       assertFalse(node1.isVoid());
827:       assertFalse(node1.isExprResult());
828:       assertFalse(node1.isTrue());
829:       assertFalse(node1.isDefaultCase());
830:       assertFalse(node1.isDo());
831:       assertFalse(node1.isAdd());
832:       assertFalse(node1.isNew());
833:       assertFalse(node1.isOr());
834:       assertFalse(node1.isSetterDef());
835:       assertFalse(node1.isNull());
836:       assertFalse(node1.isParamList());
837:       assertFalse(node1.isName());
838:       assertFalse(node1.isCatch());
839:       assertFalse(node1.isCall());
840:       assertFalse(node1.isVar());
841:       assertTrue(node1.isInc());
842:       assertFalse(node1.isBlock());
843:       assertEquals(102, node1.getType());
844:       assertFalse(node1.isFunction());
845:       assertFalse(node1.isWhile());
846:       assertFalse(node1.isTry());
847:       assertFalse(node1.isArrayLit());
848:       assertFalse(node1.isStringKey());
849:       assertFalse(node1.isGetterDef());
850:       assertFalse(node1.isDebugger());
851:       assertFalse(node1.isNE());
852:       assertFalse(node1.isIf());
853:       assertFalse(node1.isNumber());
854:       assertEquals((-1), node1.getLineno());
855:       assertTrue(node1.hasChildren());
856:       assertFalse(node1.hasMoreThanOneChild());
857:       assertFalse(node1.isCast());
858:       assertFalse(node1.isContinue());
859:       assertFalse(node1.isFor());
860:       assertEquals(1, node1.getChildCount());
861:       assertFalse(node1.isRegExp());
862:       assertFalse(node1.isIn());
863:       assertEquals(0, nodeArray0.length);
864:       assertNotSame(node0, node1);
865:       assertNotSame(node1, node0);
866:       
867:       boolean boolean1 = node1.isSyntheticBlock();
868:       assertFalse(node0.equals((Object)node1));
869:       assertFalse(node1.equals((Object)node0));
870:       assertTrue(boolean1 == boolean0);
871:       assertFalse(boolean1);
872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
873:       assertEquals(57, Node.LAST_PROP);
874:       assertEquals(49, Node.DIRECT_EVAL);
875:       assertEquals(30, Node.VAR_ARGS_NAME);
876:       assertEquals(1, Node.DECR_FLAG);
877:       assertEquals(54, Node.SLASH_V);
878:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
879:       assertEquals(12, Node.COLUMN_BITS);
880:       assertEquals(40, Node.ORIGINALNAME_PROP);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(50, Node.FREE_CALL);
884:       assertEquals(32, Node.INCRDECR_PROP);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
888:       assertEquals(36, Node.QUOTED_PROP);
889:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
890:       assertEquals(43, Node.IS_CONSTANT_NAME);
891:       assertEquals(48, Node.DIRECTIVES);
892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
893:       assertEquals(4095, Node.COLUMN_MASK);
894:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
896:       assertEquals(47, Node.IS_DISPATCHER);
897:       assertEquals(2, Node.POST_FLAG);
898:       assertEquals(56, Node.CHANGE_TIME);
899:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
900:       assertEquals(52, Node.LENGTH);
901:       assertEquals(57, Node.REFLECTED_OBJECT);
902:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
903:       assertEquals(8, Node.FLAG_NO_THROWS);
904:       assertEquals(39, Node.EMPTY_BLOCK);
905:       assertEquals(29, Node.JSDOC_INFO_PROP);
906:       assertEquals(53, Node.INPUT_ID);
907:       assertEquals(55, Node.INFERRED_FUNCTION);
908:       assertEquals(51, Node.STATIC_SOURCE_FILE);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
911:       assertEquals(37, Node.OPT_ARG_NAME);
912:       assertEquals(30, Node.VAR_ARGS_NAME);
913:       assertEquals(57, Node.LAST_PROP);
914:       assertEquals(1, Node.DECR_FLAG);
915:       assertEquals(2, Node.POST_FLAG);
916:       assertEquals(47, Node.IS_DISPATCHER);
917:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(52, Node.LENGTH);
920:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
921:       assertEquals(15, Node.NO_SIDE_EFFECTS);
922:       assertEquals(29, Node.JSDOC_INFO_PROP);
923:       assertEquals(53, Node.INPUT_ID);
924:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
925:       assertEquals(49, Node.DIRECT_EVAL);
926:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
927:       assertEquals(36, Node.QUOTED_PROP);
928:       assertEquals(56, Node.CHANGE_TIME);
929:       assertEquals(57, Node.REFLECTED_OBJECT);
930:       assertEquals(48, Node.DIRECTIVES);
931:       assertEquals(55, Node.INFERRED_FUNCTION);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(39, Node.EMPTY_BLOCK);
934:       assertEquals(4095, Node.COLUMN_MASK);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
939:       assertEquals(40, Node.ORIGINALNAME_PROP);
940:       assertEquals(50, Node.FREE_CALL);
941:       assertEquals(43, Node.IS_CONSTANT_NAME);
942:       assertEquals(46, Node.IS_NAMESPACE);
943:       assertEquals(54, Node.SLASH_V);
944:       assertFalse(node0.isCatch());
945:       assertEquals(0, node0.getChildCount());
946:       assertFalse(node0.isParamList());
947:       assertFalse(node0.isFunction());
948:       assertFalse(node0.isTrue());
949:       assertFalse(node0.isVoid());
950:       assertFalse(node0.isRegExp());
951:       assertFalse(node0.isArrayLit());
952:       assertFalse(node0.isVar());
953:       assertFalse(node0.isName());
954:       assertFalse(node0.isNull());
955:       assertFalse(node0.isDefaultCase());
956:       assertFalse(node0.isDo());
957:       assertFalse(node0.isEmpty());
958:       assertFalse(node0.isAdd());
959:       assertFalse(node0.isNew());
960:       assertFalse(node0.isSetterDef());
961:       assertFalse(node0.hasMoreThanOneChild());
962:       assertFalse(node0.isIn());
963:       assertFalse(node0.isLabel());
964:       assertFalse(node0.isNE());
965:       assertFalse(node0.isIf());
966:       assertFalse(node0.isSwitch());
967:       assertEquals((-1), node0.getLineno());
968:       assertFalse(node0.isLabelName());
969:       assertEquals(154, node0.getType());
970:       assertFalse(node0.isGetterDef());
971:       assertFalse(node0.isBlock());
972:       assertFalse(node0.isFor());
973:       assertFalse(node0.isHook());
974:       assertFalse(node0.isThis());
975:       assertEquals((-1), node0.getCharno());
976:       assertFalse(node0.isNumber());
977:       assertFalse(node0.isTry());
978:       assertFalse(node0.hasOneChild());
979:       assertFalse(node0.isScript());
980:       assertFalse(node0.isCase());
981:       assertFalse(node0.isObjectLit());
982:       assertFalse(node0.isAnd());
983:       assertFalse(node0.isWith());
984:       assertFalse(node0.isNot());
985:       assertFalse(node0.isExprResult());
986:       assertFalse(node0.isComma());
987:       assertFalse(node0.isInstanceOf());
988:       assertFalse(node0.isBreak());
989:       assertFalse(node0.isCast());
990:       assertFalse(node0.isThrow());
991:       assertFalse(node0.isFalse());
992:       assertFalse(node0.isInc());
993:       assertFalse(node0.isAssignAdd());
994:       assertFalse(node0.isContinue());
995:       assertFalse(node0.isReturn());
996:       assertFalse(node0.isWhile());
997:       assertFalse(node0.isOr());
998:       assertFalse(node0.isTypeOf());
999:       assertFalse(node0.isDelProp());
1000:       assertFalse(node0.isGetElem());
1001:       assertFalse(node0.isCall());
1002:       assertFalse(node0.isAssign());
1003:       assertFalse(node0.isDec());
1004:       assertEquals((-1), node0.getSourcePosition());
1005:       assertFalse(node0.hasChildren());
1006:       assertFalse(node0.isDebugger());
1007:       assertTrue(node0.isStringKey());
1008:       assertFalse(node0.isString());
1009:       assertFalse(node0.isGetProp());
1010:       assertFalse(node1.isThis());
1011:       assertFalse(node1.isComma());
1012:       assertFalse(node1.isGetProp());
1013:       assertFalse(node1.isBreak());
1014:       assertFalse(node1.isThrow());
1015:       assertFalse(node1.isInstanceOf());
1016:       assertFalse(node1.isFalse());
1017:       assertFalse(node1.isWith());
1018:       assertFalse(node1.isHook());
1019:       assertFalse(node1.isSwitch());
1020:       assertFalse(node1.isScript());
1021:       assertFalse(node1.isString());
1022:       assertFalse(node1.isCase());
1023:       assertFalse(node1.isObjectLit());
1024:       assertFalse(node1.isAnd());
1025:       assertFalse(node1.isNot());
1026:       assertEquals((-1), node1.getSourcePosition());
1027:       assertEquals((-1), node1.getCharno());
1028:       assertFalse(node1.isTypeOf());
1029:       assertFalse(node1.isAssignAdd());
1030:       assertFalse(node1.isDelProp());
1031:       assertFalse(node1.isLabelName());
1032:       assertFalse(node1.isEmpty());
1033:       assertFalse(node1.isGetElem());
1034:       assertTrue(node1.hasOneChild());
1035:       assertFalse(node1.isReturn());
1036:       assertFalse(node1.isAssign());
1037:       assertFalse(node1.isDec());
1038:       assertFalse(node1.isLabel());
1039:       assertFalse(node1.isVoid());
1040:       assertFalse(node1.isExprResult());
1041:       assertFalse(node1.isTrue());
1042:       assertFalse(node1.isDefaultCase());
1043:       assertFalse(node1.isDo());
1044:       assertFalse(node1.isAdd());
1045:       assertFalse(node1.isNew());
1046:       assertFalse(node1.isOr());
1047:       assertFalse(node1.isSetterDef());
1048:       assertFalse(node1.isNull());
1049:       assertFalse(node1.isParamList());
1050:       assertFalse(node1.isName());
1051:       assertFalse(node1.isCatch());
1052:       assertFalse(node1.isCall());
1053:       assertFalse(node1.isVar());
1054:       assertTrue(node1.isInc());
1055:       assertFalse(node1.isBlock());
1056:       assertEquals(102, node1.getType());
1057:       assertFalse(node1.isFunction());
1058:       assertFalse(node1.isWhile());
1059:       assertFalse(node1.isTry());
1060:       assertFalse(node1.isArrayLit());
1061:       assertFalse(node1.isStringKey());
1062:       assertFalse(node1.isGetterDef());
1063:       assertFalse(node1.isDebugger());
1064:       assertFalse(node1.isNE());
1065:       assertFalse(node1.isIf());
1066:       assertFalse(node1.isNumber());
1067:       assertEquals((-1), node1.getLineno());
1068:       assertTrue(node1.hasChildren());
1069:       assertFalse(node1.hasMoreThanOneChild());
1070:       assertFalse(node1.isCast());
1071:       assertFalse(node1.isContinue());
1072:       assertFalse(node1.isFor());
1073:       assertEquals(1, node1.getChildCount());
1074:       assertFalse(node1.isRegExp());
1075:       assertFalse(node1.isIn());
1076:       assertEquals(0, nodeArray0.length);
1077:       assertNotSame(node0, node1);
1078:       assertNotSame(node1, node0);
1079:       
1080:       boolean boolean2 = node1.isDelProp();
1081:       assertFalse(node0.equals((Object)node1));
1082:       assertFalse(node1.equals((Object)node0));
1083:       assertTrue(boolean2 == boolean1);
1084:       assertTrue(boolean2 == boolean0);
1085:       assertFalse(boolean2);
1086:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1087:       assertEquals(57, Node.LAST_PROP);
1088:       assertEquals(49, Node.DIRECT_EVAL);
1089:       assertEquals(30, Node.VAR_ARGS_NAME);
1090:       assertEquals(1, Node.DECR_FLAG);
1091:       assertEquals(54, Node.SLASH_V);
1092:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1093:       assertEquals(12, Node.COLUMN_BITS);
1094:       assertEquals(40, Node.ORIGINALNAME_PROP);
1095:       assertEquals(37, Node.OPT_ARG_NAME);
1096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1097:       assertEquals(50, Node.FREE_CALL);
1098:       assertEquals(32, Node.INCRDECR_PROP);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1102:       assertEquals(36, Node.QUOTED_PROP);
1103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1104:       assertEquals(43, Node.IS_CONSTANT_NAME);
1105:       assertEquals(48, Node.DIRECTIVES);
1106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1107:       assertEquals(4095, Node.COLUMN_MASK);
1108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1110:       assertEquals(47, Node.IS_DISPATCHER);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(56, Node.CHANGE_TIME);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(57, Node.REFLECTED_OBJECT);
1116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1117:       assertEquals(8, Node.FLAG_NO_THROWS);
1118:       assertEquals(39, Node.EMPTY_BLOCK);
1119:       assertEquals(29, Node.JSDOC_INFO_PROP);
1120:       assertEquals(53, Node.INPUT_ID);
1121:       assertEquals(55, Node.INFERRED_FUNCTION);
1122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1123:       assertEquals(32, Node.INCRDECR_PROP);
1124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1125:       assertEquals(37, Node.OPT_ARG_NAME);
1126:       assertEquals(30, Node.VAR_ARGS_NAME);
1127:       assertEquals(57, Node.LAST_PROP);
1128:       assertEquals(1, Node.DECR_FLAG);
1129:       assertEquals(2, Node.POST_FLAG);
1130:       assertEquals(47, Node.IS_DISPATCHER);
1131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1132:       assertEquals(12, Node.COLUMN_BITS);
1133:       assertEquals(52, Node.LENGTH);
1134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1136:       assertEquals(29, Node.JSDOC_INFO_PROP);
1137:       assertEquals(53, Node.INPUT_ID);
1138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1139:       assertEquals(49, Node.DIRECT_EVAL);
1140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1141:       assertEquals(36, Node.QUOTED_PROP);
1142:       assertEquals(56, Node.CHANGE_TIME);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(48, Node.DIRECTIVES);
1145:       assertEquals(55, Node.INFERRED_FUNCTION);
1146:       assertEquals(8, Node.FLAG_NO_THROWS);
1147:       assertEquals(39, Node.EMPTY_BLOCK);
1148:       assertEquals(4095, Node.COLUMN_MASK);
1149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1153:       assertEquals(40, Node.ORIGINALNAME_PROP);
1154:       assertEquals(50, Node.FREE_CALL);
1155:       assertEquals(43, Node.IS_CONSTANT_NAME);
1156:       assertEquals(46, Node.IS_NAMESPACE);
1157:       assertEquals(54, Node.SLASH_V);
1158:       assertFalse(node0.isCatch());
1159:       assertEquals(0, node0.getChildCount());
1160:       assertFalse(node0.isParamList());
1161:       assertFalse(node0.isFunction());
1162:       assertFalse(node0.isTrue());
1163:       assertFalse(node0.isVoid());
1164:       assertFalse(node0.isRegExp());
1165:       assertFalse(node0.isArrayLit());
1166:       assertFalse(node0.isVar());
1167:       assertFalse(node0.isName());
1168:       assertFalse(node0.isNull());
1169:       assertFalse(node0.isDefaultCase());
1170:       assertFalse(node0.isDo());
1171:       assertFalse(node0.isEmpty());
1172:       assertFalse(node0.isAdd());
1173:       assertFalse(node0.isNew());
1174:       assertFalse(node0.isSetterDef());
1175:       assertFalse(node0.hasMoreThanOneChild());
1176:       assertFalse(node0.isIn());
1177:       assertFalse(node0.isLabel());
1178:       assertFalse(node0.isNE());
1179:       assertFalse(node0.isIf());
1180:       assertFalse(node0.isSwitch());
1181:       assertEquals((-1), node0.getLineno());
1182:       assertFalse(node0.isLabelName());
1183:       assertEquals(154, node0.getType());
1184:       assertFalse(node0.isGetterDef());
1185:       assertFalse(node0.isBlock());
1186:       assertFalse(node0.isFor());
1187:       assertFalse(node0.isHook());
1188:       assertFalse(node0.isThis());
1189:       assertEquals((-1), node0.getCharno());
1190:       assertFalse(node0.isNumber());
1191:       assertFalse(node0.isTry());
1192:       assertFalse(node0.hasOneChild());
1193:       assertFalse(node0.isScript());
1194:       assertFalse(node0.isCase());
1195:       assertFalse(node0.isObjectLit());
1196:       assertFalse(node0.isAnd());
1197:       assertFalse(node0.isWith());
1198:       assertFalse(node0.isNot());
1199:       assertFalse(node0.isExprResult());
1200:       assertFalse(node0.isComma());
1201:       assertFalse(node0.isInstanceOf());
1202:       assertFalse(node0.isBreak());
1203:       assertFalse(node0.isCast());
1204:       assertFalse(node0.isThrow());
1205:       assertFalse(node0.isFalse());
1206:       assertFalse(node0.isInc());
1207:       assertFalse(node0.isAssignAdd());
1208:       assertFalse(node0.isContinue());
1209:       assertFalse(node0.isReturn());
1210:       assertFalse(node0.isWhile());
1211:       assertFalse(node0.isOr());
1212:       assertFalse(node0.isTypeOf());
1213:       assertFalse(node0.isDelProp());
1214:       assertFalse(node0.isGetElem());
1215:       assertFalse(node0.isCall());
1216:       assertFalse(node0.isAssign());
1217:       assertFalse(node0.isDec());
1218:       assertEquals((-1), node0.getSourcePosition());
1219:       assertFalse(node0.hasChildren());
1220:       assertFalse(node0.isDebugger());
1221:       assertTrue(node0.isStringKey());
1222:       assertFalse(node0.isString());
1223:       assertFalse(node0.isGetProp());
1224:       assertFalse(node1.isThis());
1225:       assertFalse(node1.isComma());
1226:       assertFalse(node1.isGetProp());
1227:       assertFalse(node1.isBreak());
1228:       assertFalse(node1.isThrow());
1229:       assertFalse(node1.isInstanceOf());
1230:       assertFalse(node1.isFalse());
1231:       assertFalse(node1.isWith());
1232:       assertFalse(node1.isHook());
1233:       assertFalse(node1.isSwitch());
1234:       assertFalse(node1.isScript());
1235:       assertFalse(node1.isString());
1236:       assertFalse(node1.isCase());
1237:       assertFalse(node1.isObjectLit());
1238:       assertFalse(node1.isAnd());
1239:       assertFalse(node1.isNot());
1240:       assertEquals((-1), node1.getSourcePosition());
1241:       assertEquals((-1), node1.getCharno());
1242:       assertFalse(node1.isTypeOf());
1243:       assertFalse(node1.isAssignAdd());
1244:       assertFalse(node1.isDelProp());
1245:       assertFalse(node1.isLabelName());
1246:       assertFalse(node1.isEmpty());
1247:       assertFalse(node1.isGetElem());
1248:       assertTrue(node1.hasOneChild());
1249:       assertFalse(node1.isReturn());
1250:       assertFalse(node1.isAssign());
1251:       assertFalse(node1.isDec());
1252:       assertFalse(node1.isLabel());
1253:       assertFalse(node1.isVoid());
1254:       assertFalse(node1.isExprResult());
1255:       assertFalse(node1.isTrue());
1256:       assertFalse(node1.isDefaultCase());
1257:       assertFalse(node1.isDo());
1258:       assertFalse(node1.isAdd());
1259:       assertFalse(node1.isNew());
1260:       assertFalse(node1.isOr());
1261:       assertFalse(node1.isSetterDef());
1262:       assertFalse(node1.isNull());
1263:       assertFalse(node1.isParamList());
1264:       assertFalse(node1.isName());
1265:       assertFalse(node1.isCatch());
1266:       assertFalse(node1.isCall());
1267:       assertFalse(node1.isVar());
1268:       assertTrue(node1.isInc());
1269:       assertFalse(node1.isBlock());
1270:       assertEquals(102, node1.getType());
1271:       assertFalse(node1.isFunction());
1272:       assertFalse(node1.isWhile());
1273:       assertFalse(node1.isTry());
1274:       assertFalse(node1.isArrayLit());
1275:       assertFalse(node1.isStringKey());
1276:       assertFalse(node1.isGetterDef());
1277:       assertFalse(node1.isDebugger());
1278:       assertFalse(node1.isNE());
1279:       assertFalse(node1.isIf());
1280:       assertFalse(node1.isNumber());
1281:       assertEquals((-1), node1.getLineno());
1282:       assertTrue(node1.hasChildren());
1283:       assertFalse(node1.hasMoreThanOneChild());
1284:       assertFalse(node1.isCast());
1285:       assertFalse(node1.isContinue());
1286:       assertFalse(node1.isFor());
1287:       assertEquals(1, node1.getChildCount());
1288:       assertFalse(node1.isRegExp());
1289:       assertFalse(node1.isIn());
1290:       assertEquals(0, nodeArray0.length);
1291:       assertNotSame(node0, node1);
1292:       assertNotSame(node1, node0);
1293:       
1294:       Iterable<Node> iterable0 = node0.children();
1295:       assertFalse(node0.equals((Object)node1));
1296:       assertNotNull(iterable0);
1297:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1298:       assertEquals(57, Node.LAST_PROP);
1299:       assertEquals(49, Node.DIRECT_EVAL);
1300:       assertEquals(30, Node.VAR_ARGS_NAME);
1301:       assertEquals(1, Node.DECR_FLAG);
1302:       assertEquals(54, Node.SLASH_V);
1303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1304:       assertEquals(12, Node.COLUMN_BITS);
1305:       assertEquals(40, Node.ORIGINALNAME_PROP);
1306:       assertEquals(37, Node.OPT_ARG_NAME);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(50, Node.FREE_CALL);
1309:       assertEquals(32, Node.INCRDECR_PROP);
1310:       assertEquals(46, Node.IS_NAMESPACE);
1311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1313:       assertEquals(36, Node.QUOTED_PROP);
1314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1315:       assertEquals(43, Node.IS_CONSTANT_NAME);
1316:       assertEquals(48, Node.DIRECTIVES);
1317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1318:       assertEquals(4095, Node.COLUMN_MASK);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1321:       assertEquals(47, Node.IS_DISPATCHER);
1322:       assertEquals(2, Node.POST_FLAG);
1323:       assertEquals(56, Node.CHANGE_TIME);
1324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1325:       assertEquals(52, Node.LENGTH);
1326:       assertEquals(57, Node.REFLECTED_OBJECT);
1327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1328:       assertEquals(8, Node.FLAG_NO_THROWS);
1329:       assertEquals(39, Node.EMPTY_BLOCK);
1330:       assertEquals(29, Node.JSDOC_INFO_PROP);
1331:       assertEquals(53, Node.INPUT_ID);
1332:       assertEquals(55, Node.INFERRED_FUNCTION);
1333:       assertFalse(node0.isCatch());
1334:       assertEquals(0, node0.getChildCount());
1335:       assertFalse(node0.isParamList());
1336:       assertFalse(node0.isFunction());
1337:       assertFalse(node0.isTrue());
1338:       assertFalse(node0.isVoid());
1339:       assertFalse(node0.isRegExp());
1340:       assertFalse(node0.isArrayLit());
1341:       assertFalse(node0.isVar());
1342:       assertFalse(node0.isName());
1343:       assertFalse(node0.isNull());
1344:       assertFalse(node0.isDefaultCase());
1345:       assertFalse(node0.isDo());
1346:       assertFalse(node0.isEmpty());
1347:       assertFalse(node0.isAdd());
1348:       assertFalse(node0.isNew());
1349:       assertFalse(node0.isSetterDef());
1350:       assertFalse(node0.hasMoreThanOneChild());
1351:       assertFalse(node0.isIn());
1352:       assertFalse(node0.isLabel());
1353:       assertFalse(node0.isNE());
1354:       assertFalse(node0.isIf());
1355:       assertFalse(node0.isSwitch());
1356:       assertEquals((-1), node0.getLineno());
1357:       assertFalse(node0.isLabelName());
1358:       assertEquals(154, node0.getType());
1359:       assertFalse(node0.isGetterDef());
1360:       assertFalse(node0.isBlock());
1361:       assertFalse(node0.isFor());
1362:       assertFalse(node0.isHook());
1363:       assertFalse(node0.isThis());
1364:       assertEquals((-1), node0.getCharno());
1365:       assertFalse(node0.isNumber());
1366:       assertFalse(node0.isTry());
1367:       assertFalse(node0.hasOneChild());
1368:       assertFalse(node0.isScript());
1369:       assertFalse(node0.isCase());
1370:       assertFalse(node0.isObjectLit());
1371:       assertFalse(node0.isAnd());
1372:       assertFalse(node0.isWith());
1373:       assertFalse(node0.isNot());
1374:       assertFalse(node0.isExprResult());
1375:       assertFalse(node0.isComma());
1376:       assertFalse(node0.isInstanceOf());
1377:       assertFalse(node0.isBreak());
1378:       assertFalse(node0.isCast());
1379:       assertFalse(node0.isThrow());
1380:       assertFalse(node0.isFalse());
1381:       assertFalse(node0.isInc());
1382:       assertFalse(node0.isAssignAdd());
1383:       assertFalse(node0.isContinue());
1384:       assertFalse(node0.isReturn());
1385:       assertFalse(node0.isWhile());
1386:       assertFalse(node0.isOr());
1387:       assertFalse(node0.isTypeOf());
1388:       assertFalse(node0.isDelProp());
1389:       assertFalse(node0.isGetElem());
1390:       assertFalse(node0.isCall());
1391:       assertFalse(node0.isAssign());
1392:       assertFalse(node0.isDec());
1393:       assertEquals((-1), node0.getSourcePosition());
1394:       assertFalse(node0.hasChildren());
1395:       assertFalse(node0.isDebugger());
1396:       assertTrue(node0.isStringKey());
1397:       assertFalse(node0.isString());
1398:       assertFalse(node0.isGetProp());
1399:       assertEquals(0, nodeArray0.length);
1400:       assertNotSame(node0, node1);
1401:       assertFalse(iterable0.contains(node1));
1402:       
1403:       // Undeclared exception!
1404:       try { 
1405:         node0.removeChild(node1);
1406:         fail("Expecting exception: NullPointerException");
1407:       
1408:       } catch(NullPointerException e) {
1409:          //
1410:          // no message in exception (getMessage() returned null)
1411:          //
1412:          verifyException("com.google.javascript.rhino.Node", e);
1413:       }
1414:   }
1415: }
RegularFileObject[/tmp/EvoSuite_190_1629223132447/com/google/javascript/rhino/Node_190_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_190_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_190_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.Maps$ImprovedAbstractMap",
224:       "com.google.common.collect.ImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
226:       "com.google.common.collect.ImmutableList",
227:       "com.google.common.collect.SingletonImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
229:       "com.google.javascript.rhino.jstype.StringType",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
232:       "com.google.javascript.rhino.jstype.TemplatizedType",
233:       "com.google.javascript.rhino.jstype.Visitor",
234:       "com.google.javascript.rhino.jstype.NoResolvedType",
235:       "com.google.javascript.rhino.jstype.JSTypeNative",
236:       "com.google.javascript.rhino.jstype.AllType",
237:       "com.google.common.collect.Maps",
238:       "com.google.common.collect.SetMultimap",
239:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
240:       "com.google.common.collect.Maps$EntryTransformer",
241:       "com.google.javascript.rhino.JSTypeExpression",
242:       "com.google.common.collect.Iterators$MergingIterator"
243:     );
244:   } 
245: 
246:   private static void resetClasses() {
247:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_190_tmp__ESTest_scaffolding.class.getClassLoader()); 
248: 
249:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
250:       "com.google.javascript.rhino.Node",
251:       "com.google.javascript.rhino.Node$NumberNode",
252:       "com.google.javascript.rhino.Node$StringNode",
253:       "com.google.javascript.rhino.Node$AbstractPropListItem",
254:       "com.google.javascript.rhino.Node$ObjectPropListItem",
255:       "com.google.javascript.rhino.Node$IntPropListItem",
256:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
257:       "com.google.javascript.rhino.Node$AncestorIterable",
258:       "com.google.javascript.rhino.Node$NodeMismatch",
259:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
260:       "com.google.javascript.rhino.Node$SideEffectFlags",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Preconditions",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.JSTypeNative",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TernaryValue",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.InputId",
349:       "com.google.javascript.rhino.JSTypeExpression",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.ImmutableList$1",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.jstype.TemplatizedType",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.Platform",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:52.847 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(154, nodeArray0, 154, (-2313));
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertEquals(0, nodeArray0.length);

Node node1 = new Node(102, node0, node0, node0, node0, 102, (-577));
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(102, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertEquals(0, nodeArray0.length);

node1.putIntProp(16, 0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(102, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

node0.setCharno(2970);
assertFalse(node0.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);

boolean boolean0 = node1.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(102, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

boolean boolean1 = node1.isSyntheticBlock();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(102, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

boolean boolean2 = node1.isDelProp();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(102, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertEquals(154, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertTrue(node0.isStringKey());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertFalse(iterable0.contains(node1));

node0.removeChild(node1);

[MASTER] 17:59:15.968 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:16.329 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:16.881 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:17.215 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:17.571 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:17.878 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:17.901 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/16
* Done!

* Computation finished
