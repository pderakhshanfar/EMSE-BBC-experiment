* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 15066
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3177319865
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:29:39.733 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:29:42.722 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1919: com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;:566 - ReplaceComparisonOperator <= -> ==
[MASTER] 10:29:42.736 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;
[MASTER] 10:30:01.201 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 488
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 5439
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 209
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1376
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 3569
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1186
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2052
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 2595
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 12575
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 932
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 2066
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 12039
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 4699
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 6197
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 10274
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 20555
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 3569
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 3405
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1600
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 147
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1347
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 206
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 343
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 15766
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 30
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 206
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2774
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 22
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 156
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 139
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 4619
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 596
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 4509
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 390
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 314
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 391
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 2035
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 596
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 2805
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2201
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 488
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 13039
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 78
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1107
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 1123
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1992
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 293
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 488
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 15761
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 31102
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 7249
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 22
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 3607
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 995
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 632
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 8935
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 13134
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 2556
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 8083
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 122
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 21687
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 715
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 7692
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 541
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5633
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 654: 29030
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 7410
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 18225
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 653: 29030
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 7420
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 87495
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 149
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1317
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2536
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 184
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 932
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3301
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 489: 23
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 18
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2662
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 244
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2166
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 244
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 759
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 184
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 14308
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 3569
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 32
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 114
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 17922
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 1172
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 6197
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 42
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 6197
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: root-Branch: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 5296
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 20446
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2978
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 293
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 390
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 3601
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 488
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 147
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 6170
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 29770
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 2746
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - false: 23
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 147
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 4818
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1058
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 932
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 9361
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 52
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 813
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 6197
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1217
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 78
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 206
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 206
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 390
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 310
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 390
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 390
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 9030
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 596
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 3261
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 390
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 1022
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 7692
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 20240
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 293
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 11860
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1600
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3870
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 8979
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 6426
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 3048
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 2054
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 7536
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 293
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 29770
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 87495
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 6285
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 21242
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 17621
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 813
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 596
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 6285
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 707
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1999
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 43449
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1457
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 386
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 390
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 6197
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 15740
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 25782
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 7163
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 678
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 293
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 206
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 1214
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 704
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3249
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 596
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 68
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 3452
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 12049
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 2456
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1726
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 22
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 377
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 1532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 488
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1935
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 704
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 353
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 5835
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 26203
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 1331
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 14835
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 5835
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 42
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2746
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 34
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 206
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 390
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 16
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 340
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 5721
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 11681
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 4112
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 704
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 110
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 2746
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 34
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 6646
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 34
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 371
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 596
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 596
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 58768
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 27622
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 6014
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 3390
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 206
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 1336
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 1317
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 596
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 4727
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 206
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 4982
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 596
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 742
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 596
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 596
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 596
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 742
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 742
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 4382
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 742
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 3307
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 447
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 1123
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2511
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 487
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 932
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 122
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 11598
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 596
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 16826
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1700
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 3000
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 932
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 4112
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1354
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1020
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1443
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 293
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 3965
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 23288
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 58
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 13946
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 139
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 266
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 122
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 216
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 596
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 17787
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 1595
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 3390
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 498
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 488
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 583
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 12775
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 1317
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 16953
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 20153
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1441
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 6886
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 276
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 24
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 281
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 11184
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 2372
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 3734
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 813
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 390
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 6181
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 2277
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 293
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15992
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 549
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4373
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 1317
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 3388
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 62
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 13313
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 689
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 2531
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 596
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 52
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 8895
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 799
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2581
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 25264
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 390
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2581
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 390
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 10701
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 10701
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 488
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 14576
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 20
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 2277
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2526
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 291
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 122
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 5100
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 338
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 138
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 293
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1136
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2602
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 1317
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 16660
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 206
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 2372
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 293
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1457
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 932
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 209
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 6162
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 1063
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 235
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 14330
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1344
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 12437
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 2277
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 5231
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 15883
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 3749
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 813
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 37677
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 7022
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 206
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2386
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 5835
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 812
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 4401
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 9925
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 4760
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 1058
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 122
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 2128
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4597
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 9005
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 206
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 12823
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 122
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 122
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 122
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 122
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 1600
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 338
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1457
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 2408
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 17414
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 1183
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 2372
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 5561
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 688
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 1317
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2526
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 390
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 549
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 567
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 2054
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 213
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 16304
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1160
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 4269
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 206
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 596
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 206
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 16304
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 206
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 397
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 147
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 206
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 176
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 845
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 19579
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 209
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 2653
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 29314
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 12049
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 2653
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 2653
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 31900
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 596
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 488
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 10084
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 488
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 488
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 488
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 488
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 488
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 122
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 10084
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19419
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 3048
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: Line 1935: 293
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19589
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 293
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 1902
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 3749
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 2253
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 3749
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 8294
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 32376
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 18052
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 11382
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 704
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 6325
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 16341
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 22118
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 3569
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 1572
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1260
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 6014
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 6014
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4322
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 346
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 18648
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 488
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 596
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 42
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 8445
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1747
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 1600
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 20692
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 2683
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1907
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 932
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1564
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 19739
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 390
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 26292
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 919
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 122
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 42
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 17381
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 742
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 293
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 16036
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 18002
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 206
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 31886
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 596
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 770
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 6325
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 12111
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 266
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 596
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 42
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 596
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 24669
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 58768
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 956
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 6374
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 29685
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 467
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 3273
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 2372
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 24669
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 736
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 87495
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 56
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 8936
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 74
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 932
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 390
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 122
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 206
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 596
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 1167
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4320
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 106
Number of times BBC is called in total: 4392272
* Search finished after 604s and 480 generations, 247899 statements, best individual has fitness: 2935.0
* Minimizing test suite
[MASTER] 10:40:55.493 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 804
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 613
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 467
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2127
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 575
* Generated 699 tests with total length 10493
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:41:56.479 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66675% of time used, but only 48/699 tests minimized), falling back to using all assertions
[MASTER] 10:42:16.566 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 10:42:24.060 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 10:42:39.934 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1628160159467/com/google/javascript/rhino/Node_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1628160159467/com/google/javascript/rhino/Node_115_tmp__ESTest_scaffolding.java]]
[MASTER] 10:42:39.934 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:42:39.934 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:42:39.938 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1782
[MASTER] 10:42:39.940 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1628160159467/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:42:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_115_tmp__ESTest extends Node_115_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("com.google.common.base.Joiner$2");
21:       assertFalse(node0.isFalse());
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isHook());
24:       assertFalse(node0.isComma());
25:       assertFalse(node0.isThis());
26:       assertFalse(node0.isSwitch());
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isBreak());
29:       assertFalse(node0.isIn());
30:       assertFalse(node0.isInc());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isAssign());
33:       assertFalse(node0.isEmpty());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isTypeOf());
36:       assertEquals((-1), node0.getSourcePosition());
37:       assertFalse(node0.hasChildren());
38:       assertFalse(node0.isVoid());
39:       assertFalse(node0.isFunction());
40:       assertFalse(node0.isCast());
41:       assertFalse(node0.isDelProp());
42:       assertFalse(node0.isExprResult());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.isWhile());
45:       assertFalse(node0.isObjectLit());
46:       assertFalse(node0.isAnd());
47:       assertFalse(node0.isDebugger());
48:       assertFalse(node0.isReturn());
49:       assertFalse(node0.isGetProp());
50:       assertFalse(node0.isStringKey());
51:       assertFalse(node0.isName());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isVar());
54:       assertFalse(node0.isParamList());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isCall());
57:       assertEquals(40, node0.getType());
58:       assertFalse(node0.isDo());
59:       assertFalse(node0.isContinue());
60:       assertFalse(node0.isDefaultCase());
61:       assertEquals(0, node0.getChildCount());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isNew());
65:       assertFalse(node0.isAdd());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isLabelName());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isNumber());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isArrayLit());
76:       assertEquals((-1), node0.getLineno());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isWith());
80:       assertFalse(node0.isRegExp());
81:       assertEquals((-1), node0.getCharno());
82:       assertTrue(node0.isString());
83:       assertFalse(node0.isBlock());
84:       assertFalse(node0.isTry());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isScript());
87:       assertNotNull(node0);
88:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
89:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
90:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
91:       assertEquals(8, Node.FLAG_NO_THROWS);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(52, Node.LENGTH);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
96:       assertEquals(39, Node.EMPTY_BLOCK);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(36, Node.QUOTED_PROP);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(32, Node.INCRDECR_PROP);
113:       assertEquals(12, Node.COLUMN_BITS);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(1, Node.DECR_FLAG);
117:       assertEquals(57, Node.LAST_PROP);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       
125:       Node node1 = new Node(0, node0, node0);
126:       assertFalse(node0.isFalse());
127:       assertFalse(node0.isThrow());
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isComma());
130:       assertFalse(node0.isThis());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isInstanceOf());
133:       assertFalse(node0.isBreak());
134:       assertFalse(node0.isIn());
135:       assertFalse(node0.isInc());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isAssign());
138:       assertFalse(node0.isEmpty());
139:       assertFalse(node0.isDec());
140:       assertFalse(node0.isTypeOf());
141:       assertEquals((-1), node0.getSourcePosition());
142:       assertFalse(node0.hasChildren());
143:       assertFalse(node0.isVoid());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isCast());
146:       assertFalse(node0.isDelProp());
147:       assertFalse(node0.isExprResult());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.isWhile());
150:       assertFalse(node0.isObjectLit());
151:       assertFalse(node0.isAnd());
152:       assertFalse(node0.isDebugger());
153:       assertFalse(node0.isReturn());
154:       assertFalse(node0.isGetProp());
155:       assertFalse(node0.isStringKey());
156:       assertFalse(node0.isName());
157:       assertFalse(node0.isNull());
158:       assertFalse(node0.isVar());
159:       assertFalse(node0.isParamList());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isCall());
162:       assertEquals(40, node0.getType());
163:       assertFalse(node0.isDo());
164:       assertFalse(node0.isContinue());
165:       assertFalse(node0.isDefaultCase());
166:       assertEquals(0, node0.getChildCount());
167:       assertFalse(node0.isTrue());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isAdd());
171:       assertFalse(node0.isOr());
172:       assertFalse(node0.isAssignAdd());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isLabelName());
175:       assertFalse(node0.isFor());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isNumber());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isArrayLit());
181:       assertEquals((-1), node0.getLineno());
182:       assertFalse(node0.isCase());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isWith());
185:       assertFalse(node0.isRegExp());
186:       assertEquals((-1), node0.getCharno());
187:       assertTrue(node0.isString());
188:       assertFalse(node0.isBlock());
189:       assertFalse(node0.isTry());
190:       assertFalse(node0.hasOneChild());
191:       assertFalse(node0.isScript());
192:       assertEquals((-1), node1.getCharno());
193:       assertFalse(node1.isInc());
194:       assertEquals(0, node1.getType());
195:       assertFalse(node1.isSwitch());
196:       assertFalse(node1.isHook());
197:       assertFalse(node1.isThrow());
198:       assertFalse(node1.isString());
199:       assertFalse(node1.isCase());
200:       assertFalse(node1.isGetProp());
201:       assertFalse(node1.isGetterDef());
202:       assertFalse(node1.isFalse());
203:       assertFalse(node1.isAnd());
204:       assertFalse(node1.isArrayLit());
205:       assertFalse(node1.isVoid());
206:       assertFalse(node1.isTrue());
207:       assertFalse(node1.isExprResult());
208:       assertFalse(node1.isNot());
209:       assertFalse(node1.isDebugger());
210:       assertFalse(node1.isObjectLit());
211:       assertFalse(node1.isEmpty());
212:       assertFalse(node1.isDefaultCase());
213:       assertFalse(node1.isDec());
214:       assertFalse(node1.isNull());
215:       assertFalse(node1.isReturn());
216:       assertFalse(node1.isTypeOf());
217:       assertTrue(node1.hasOneChild());
218:       assertFalse(node1.isOr());
219:       assertFalse(node1.isAssign());
220:       assertFalse(node1.isComma());
221:       assertFalse(node1.isCall());
222:       assertFalse(node1.isGetElem());
223:       assertFalse(node1.isName());
224:       assertFalse(node1.isBreak());
225:       assertFalse(node1.isDelProp());
226:       assertFalse(node1.isAdd());
227:       assertFalse(node1.isBlock());
228:       assertFalse(node1.isVar());
229:       assertFalse(node1.isWhile());
230:       assertFalse(node1.isDo());
231:       assertFalse(node1.isSetterDef());
232:       assertFalse(node1.isNew());
233:       assertFalse(node1.isAssignAdd());
234:       assertFalse(node1.isParamList());
235:       assertFalse(node1.isNumber());
236:       assertFalse(node1.isLabel());
237:       assertEquals((-1), node1.getSourcePosition());
238:       assertFalse(node1.isContinue());
239:       assertFalse(node1.isCast());
240:       assertFalse(node1.isStringKey());
241:       assertFalse(node1.isLabelName());
242:       assertFalse(node1.isFunction());
243:       assertFalse(node1.isScript());
244:       assertFalse(node1.isRegExp());
245:       assertFalse(node1.isFor());
246:       assertFalse(node1.isTry());
247:       assertFalse(node1.isThis());
248:       assertTrue(node1.hasChildren());
249:       assertFalse(node1.isNE());
250:       assertFalse(node1.isIn());
251:       assertEquals(1, node1.getChildCount());
252:       assertFalse(node1.hasMoreThanOneChild());
253:       assertFalse(node1.isCatch());
254:       assertFalse(node1.isWith());
255:       assertFalse(node1.isInstanceOf());
256:       assertFalse(node1.isIf());
257:       assertEquals((-1), node1.getLineno());
258:       assertFalse(node1.equals((Object)node0));
259:       assertNotNull(node1);
260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(8, Node.FLAG_NO_THROWS);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(55, Node.INFERRED_FUNCTION);
267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
268:       assertEquals(39, Node.EMPTY_BLOCK);
269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(36, Node.QUOTED_PROP);
272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
273:       assertEquals(4095, Node.COLUMN_MASK);
274:       assertEquals(57, Node.REFLECTED_OBJECT);
275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(49, Node.DIRECT_EVAL);
278:       assertEquals(48, Node.DIRECTIVES);
279:       assertEquals(47, Node.IS_DISPATCHER);
280:       assertEquals(29, Node.JSDOC_INFO_PROP);
281:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
282:       assertEquals(56, Node.CHANGE_TIME);
283:       assertEquals(2, Node.POST_FLAG);
284:       assertEquals(32, Node.INCRDECR_PROP);
285:       assertEquals(12, Node.COLUMN_BITS);
286:       assertEquals(53, Node.INPUT_ID);
287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
288:       assertEquals(1, Node.DECR_FLAG);
289:       assertEquals(57, Node.LAST_PROP);
290:       assertEquals(43, Node.IS_CONSTANT_NAME);
291:       assertEquals(54, Node.SLASH_V);
292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
293:       assertEquals(30, Node.VAR_ARGS_NAME);
294:       assertEquals(46, Node.IS_NAMESPACE);
295:       assertEquals(40, Node.ORIGINALNAME_PROP);
296:       assertEquals(52, Node.LENGTH);
297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
298:       assertEquals(57, Node.REFLECTED_OBJECT);
299:       assertEquals(54, Node.SLASH_V);
300:       assertEquals(50, Node.FREE_CALL);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertEquals(49, Node.DIRECT_EVAL);
305:       assertEquals(55, Node.INFERRED_FUNCTION);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertEquals(30, Node.VAR_ARGS_NAME);
310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(29, Node.JSDOC_INFO_PROP);
313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
314:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(57, Node.LAST_PROP);
317:       assertEquals(53, Node.INPUT_ID);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(43, Node.IS_CONSTANT_NAME);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(32, Node.INCRDECR_PROP);
332:       
333:       boolean boolean0 = node1.getBooleanProp(0);
334:       assertFalse(node0.isFalse());
335:       assertFalse(node0.isThrow());
336:       assertFalse(node0.isHook());
337:       assertFalse(node0.isComma());
338:       assertFalse(node0.isThis());
339:       assertFalse(node0.isSwitch());
340:       assertFalse(node0.isInstanceOf());
341:       assertFalse(node0.isBreak());
342:       assertFalse(node0.isIn());
343:       assertFalse(node0.isInc());
344:       assertFalse(node0.isGetElem());
345:       assertFalse(node0.isAssign());
346:       assertFalse(node0.isEmpty());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.isTypeOf());
349:       assertEquals((-1), node0.getSourcePosition());
350:       assertFalse(node0.hasChildren());
351:       assertFalse(node0.isVoid());
352:       assertFalse(node0.isFunction());
353:       assertFalse(node0.isCast());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isExprResult());
356:       assertFalse(node0.isNot());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.isObjectLit());
359:       assertFalse(node0.isAnd());
360:       assertFalse(node0.isDebugger());
361:       assertFalse(node0.isReturn());
362:       assertFalse(node0.isGetProp());
363:       assertFalse(node0.isStringKey());
364:       assertFalse(node0.isName());
365:       assertFalse(node0.isNull());
366:       assertFalse(node0.isVar());
367:       assertFalse(node0.isParamList());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.isCall());
370:       assertEquals(40, node0.getType());
371:       assertFalse(node0.isDo());
372:       assertFalse(node0.isContinue());
373:       assertFalse(node0.isDefaultCase());
374:       assertEquals(0, node0.getChildCount());
375:       assertFalse(node0.isTrue());
376:       assertFalse(node0.isLabel());
377:       assertFalse(node0.isNew());
378:       assertFalse(node0.isAdd());
379:       assertFalse(node0.isOr());
380:       assertFalse(node0.isAssignAdd());
381:       assertFalse(node0.isSetterDef());
382:       assertFalse(node0.isLabelName());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isIf());
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isGetterDef());
388:       assertFalse(node0.isArrayLit());
389:       assertEquals((-1), node0.getLineno());
390:       assertFalse(node0.isCase());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isWith());
393:       assertFalse(node0.isRegExp());
394:       assertEquals((-1), node0.getCharno());
395:       assertTrue(node0.isString());
396:       assertFalse(node0.isBlock());
397:       assertFalse(node0.isTry());
398:       assertFalse(node0.hasOneChild());
399:       assertFalse(node0.isScript());
400:       assertEquals((-1), node1.getCharno());
401:       assertFalse(node1.isInc());
402:       assertEquals(0, node1.getType());
403:       assertFalse(node1.isSwitch());
404:       assertFalse(node1.isHook());
405:       assertFalse(node1.isThrow());
406:       assertFalse(node1.isString());
407:       assertFalse(node1.isCase());
408:       assertFalse(node1.isGetProp());
409:       assertFalse(node1.isGetterDef());
410:       assertFalse(node1.isFalse());
411:       assertFalse(node1.isAnd());
412:       assertFalse(node1.isArrayLit());
413:       assertFalse(node1.isVoid());
414:       assertFalse(node1.isTrue());
415:       assertFalse(node1.isExprResult());
416:       assertFalse(node1.isNot());
417:       assertFalse(node1.isDebugger());
418:       assertFalse(node1.isObjectLit());
419:       assertFalse(node1.isEmpty());
420:       assertFalse(node1.isDefaultCase());
421:       assertFalse(node1.isDec());
422:       assertFalse(node1.isNull());
423:       assertFalse(node1.isReturn());
424:       assertFalse(node1.isTypeOf());
425:       assertTrue(node1.hasOneChild());
426:       assertFalse(node1.isOr());
427:       assertFalse(node1.isAssign());
428:       assertFalse(node1.isComma());
429:       assertFalse(node1.isCall());
430:       assertFalse(node1.isGetElem());
431:       assertFalse(node1.isName());
432:       assertFalse(node1.isBreak());
433:       assertFalse(node1.isDelProp());
434:       assertFalse(node1.isAdd());
435:       assertFalse(node1.isBlock());
436:       assertFalse(node1.isVar());
437:       assertFalse(node1.isWhile());
438:       assertFalse(node1.isDo());
439:       assertFalse(node1.isSetterDef());
440:       assertFalse(node1.isNew());
441:       assertFalse(node1.isAssignAdd());
442:       assertFalse(node1.isParamList());
443:       assertFalse(node1.isNumber());
444:       assertFalse(node1.isLabel());
445:       assertEquals((-1), node1.getSourcePosition());
446:       assertFalse(node1.isContinue());
447:       assertFalse(node1.isCast());
448:       assertFalse(node1.isStringKey());
449:       assertFalse(node1.isLabelName());
450:       assertFalse(node1.isFunction());
451:       assertFalse(node1.isScript());
452:       assertFalse(node1.isRegExp());
453:       assertFalse(node1.isFor());
454:       assertFalse(node1.isTry());
455:       assertFalse(node1.isThis());
456:       assertTrue(node1.hasChildren());
457:       assertFalse(node1.isNE());
458:       assertFalse(node1.isIn());
459:       assertEquals(1, node1.getChildCount());
460:       assertFalse(node1.hasMoreThanOneChild());
461:       assertFalse(node1.isCatch());
462:       assertFalse(node1.isWith());
463:       assertFalse(node1.isInstanceOf());
464:       assertFalse(node1.isIf());
465:       assertEquals((-1), node1.getLineno());
466:       assertFalse(node0.equals((Object)node1));
467:       assertFalse(node1.equals((Object)node0));
468:       assertFalse(boolean0);
469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
470:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
472:       assertEquals(8, Node.FLAG_NO_THROWS);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(52, Node.LENGTH);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
477:       assertEquals(39, Node.EMPTY_BLOCK);
478:       assertEquals(15, Node.NO_SIDE_EFFECTS);
479:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
480:       assertEquals(36, Node.QUOTED_PROP);
481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
482:       assertEquals(4095, Node.COLUMN_MASK);
483:       assertEquals(57, Node.REFLECTED_OBJECT);
484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
485:       assertEquals(37, Node.OPT_ARG_NAME);
486:       assertEquals(49, Node.DIRECT_EVAL);
487:       assertEquals(48, Node.DIRECTIVES);
488:       assertEquals(47, Node.IS_DISPATCHER);
489:       assertEquals(29, Node.JSDOC_INFO_PROP);
490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
491:       assertEquals(56, Node.CHANGE_TIME);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(32, Node.INCRDECR_PROP);
494:       assertEquals(12, Node.COLUMN_BITS);
495:       assertEquals(53, Node.INPUT_ID);
496:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
497:       assertEquals(1, Node.DECR_FLAG);
498:       assertEquals(57, Node.LAST_PROP);
499:       assertEquals(43, Node.IS_CONSTANT_NAME);
500:       assertEquals(54, Node.SLASH_V);
501:       assertEquals(51, Node.STATIC_SOURCE_FILE);
502:       assertEquals(30, Node.VAR_ARGS_NAME);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(40, Node.ORIGINALNAME_PROP);
505:       assertEquals(52, Node.LENGTH);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(57, Node.REFLECTED_OBJECT);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(50, Node.FREE_CALL);
510:       assertEquals(40, Node.ORIGINALNAME_PROP);
511:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
512:       assertEquals(48, Node.DIRECTIVES);
513:       assertEquals(49, Node.DIRECT_EVAL);
514:       assertEquals(55, Node.INFERRED_FUNCTION);
515:       assertEquals(2, Node.POST_FLAG);
516:       assertEquals(8, Node.FLAG_NO_THROWS);
517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(29, Node.JSDOC_INFO_PROP);
522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
523:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
524:       assertEquals(39, Node.EMPTY_BLOCK);
525:       assertEquals(57, Node.LAST_PROP);
526:       assertEquals(53, Node.INPUT_ID);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
531:       assertEquals(37, Node.OPT_ARG_NAME);
532:       assertEquals(43, Node.IS_CONSTANT_NAME);
533:       assertEquals(12, Node.COLUMN_BITS);
534:       assertEquals(46, Node.IS_NAMESPACE);
535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
536:       assertEquals(4095, Node.COLUMN_MASK);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(1, Node.DECR_FLAG);
540:       assertEquals(32, Node.INCRDECR_PROP);
541:       
542:       Node node2 = node1.srcref(node0);
543:       assertFalse(node0.isFalse());
544:       assertFalse(node0.isThrow());
545:       assertFalse(node0.isHook());
546:       assertFalse(node0.isComma());
547:       assertFalse(node0.isThis());
548:       assertFalse(node0.isSwitch());
549:       assertFalse(node0.isInstanceOf());
550:       assertFalse(node0.isBreak());
551:       assertFalse(node0.isIn());
552:       assertFalse(node0.isInc());
553:       assertFalse(node0.isGetElem());
554:       assertFalse(node0.isAssign());
555:       assertFalse(node0.isEmpty());
556:       assertFalse(node0.isDec());
557:       assertFalse(node0.isTypeOf());
558:       assertEquals((-1), node0.getSourcePosition());
559:       assertFalse(node0.hasChildren());
560:       assertFalse(node0.isVoid());
561:       assertFalse(node0.isFunction());
562:       assertFalse(node0.isCast());
563:       assertFalse(node0.isDelProp());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isNot());
566:       assertFalse(node0.isWhile());
567:       assertFalse(node0.isObjectLit());
568:       assertFalse(node0.isAnd());
569:       assertFalse(node0.isDebugger());
570:       assertFalse(node0.isReturn());
571:       assertFalse(node0.isGetProp());
572:       assertFalse(node0.isStringKey());
573:       assertFalse(node0.isName());
574:       assertFalse(node0.isNull());
575:       assertFalse(node0.isVar());
576:       assertFalse(node0.isParamList());
577:       assertFalse(node0.isCatch());
578:       assertFalse(node0.isCall());
579:       assertEquals(40, node0.getType());
580:       assertFalse(node0.isDo());
581:       assertFalse(node0.isContinue());
582:       assertFalse(node0.isDefaultCase());
583:       assertEquals(0, node0.getChildCount());
584:       assertFalse(node0.isTrue());
585:       assertFalse(node0.isLabel());
586:       assertFalse(node0.isNew());
587:       assertFalse(node0.isAdd());
588:       assertFalse(node0.isOr());
589:       assertFalse(node0.isAssignAdd());
590:       assertFalse(node0.isSetterDef());
591:       assertFalse(node0.isLabelName());
592:       assertFalse(node0.isFor());
593:       assertFalse(node0.isIf());
594:       assertFalse(node0.isNumber());
595:       assertFalse(node0.isNE());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isArrayLit());
598:       assertEquals((-1), node0.getLineno());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.hasMoreThanOneChild());
601:       assertFalse(node0.isWith());
602:       assertFalse(node0.isRegExp());
603:       assertEquals((-1), node0.getCharno());
604:       assertTrue(node0.isString());
605:       assertFalse(node0.isBlock());
606:       assertFalse(node0.isTry());
607:       assertFalse(node0.hasOneChild());
608:       assertFalse(node0.isScript());
609:       assertEquals((-1), node1.getCharno());
610:       assertFalse(node1.isInc());
611:       assertEquals(0, node1.getType());
612:       assertFalse(node1.isSwitch());
613:       assertFalse(node1.isHook());
614:       assertFalse(node1.isThrow());
615:       assertFalse(node1.isString());
616:       assertFalse(node1.isCase());
617:       assertFalse(node1.isGetProp());
618:       assertFalse(node1.isGetterDef());
619:       assertFalse(node1.isFalse());
620:       assertFalse(node1.isAnd());
621:       assertFalse(node1.isArrayLit());
622:       assertFalse(node1.isVoid());
623:       assertFalse(node1.isTrue());
624:       assertFalse(node1.isExprResult());
625:       assertFalse(node1.isNot());
626:       assertFalse(node1.isDebugger());
627:       assertFalse(node1.isObjectLit());
628:       assertFalse(node1.isEmpty());
629:       assertFalse(node1.isDefaultCase());
630:       assertFalse(node1.isDec());
631:       assertFalse(node1.isNull());
632:       assertFalse(node1.isReturn());
633:       assertFalse(node1.isTypeOf());
634:       assertTrue(node1.hasOneChild());
635:       assertFalse(node1.isOr());
636:       assertFalse(node1.isAssign());
637:       assertFalse(node1.isComma());
638:       assertFalse(node1.isCall());
639:       assertFalse(node1.isGetElem());
640:       assertFalse(node1.isName());
641:       assertFalse(node1.isBreak());
642:       assertFalse(node1.isDelProp());
643:       assertFalse(node1.isAdd());
644:       assertFalse(node1.isBlock());
645:       assertFalse(node1.isVar());
646:       assertFalse(node1.isWhile());
647:       assertFalse(node1.isDo());
648:       assertFalse(node1.isSetterDef());
649:       assertFalse(node1.isNew());
650:       assertFalse(node1.isAssignAdd());
651:       assertFalse(node1.isParamList());
652:       assertFalse(node1.isNumber());
653:       assertFalse(node1.isLabel());
654:       assertEquals((-1), node1.getSourcePosition());
655:       assertFalse(node1.isContinue());
656:       assertFalse(node1.isCast());
657:       assertFalse(node1.isStringKey());
658:       assertFalse(node1.isLabelName());
659:       assertFalse(node1.isFunction());
660:       assertFalse(node1.isScript());
661:       assertFalse(node1.isRegExp());
662:       assertFalse(node1.isFor());
663:       assertFalse(node1.isTry());
664:       assertFalse(node1.isThis());
665:       assertTrue(node1.hasChildren());
666:       assertFalse(node1.isNE());
667:       assertFalse(node1.isIn());
668:       assertEquals(1, node1.getChildCount());
669:       assertFalse(node1.hasMoreThanOneChild());
670:       assertFalse(node1.isCatch());
671:       assertFalse(node1.isWith());
672:       assertFalse(node1.isInstanceOf());
673:       assertFalse(node1.isIf());
674:       assertEquals((-1), node1.getLineno());
675:       assertEquals((-1), node2.getCharno());
676:       assertFalse(node2.isInc());
677:       assertEquals(0, node2.getType());
678:       assertFalse(node2.isSwitch());
679:       assertFalse(node2.isThrow());
680:       assertFalse(node2.isHook());
681:       assertEquals(1, node2.getChildCount());
682:       assertFalse(node2.isFalse());
683:       assertTrue(node2.hasChildren());
684:       assertFalse(node2.isNE());
685:       assertFalse(node2.isBreak());
686:       assertFalse(node2.isDelProp());
687:       assertFalse(node2.isIf());
688:       assertFalse(node2.isEmpty());
689:       assertFalse(node2.isIn());
690:       assertFalse(node2.isScript());
691:       assertFalse(node2.isTry());
692:       assertFalse(node2.isDefaultCase());
693:       assertFalse(node2.isCatch());
694:       assertFalse(node2.isArrayLit());
695:       assertFalse(node2.isFor());
696:       assertFalse(node2.isInstanceOf());
697:       assertFalse(node2.isRegExp());
698:       assertFalse(node2.isWith());
699:       assertFalse(node2.isParamList());
700:       assertFalse(node2.isThis());
701:       assertFalse(node2.isLabelName());
702:       assertFalse(node2.isStringKey());
703:       assertFalse(node2.isCase());
704:       assertFalse(node2.isGetterDef());
705:       assertFalse(node2.isNumber());
706:       assertFalse(node2.isNew());
707:       assertFalse(node2.isAdd());
708:       assertFalse(node2.isBlock());
709:       assertFalse(node2.isWhile());
710:       assertFalse(node2.isDo());
711:       assertFalse(node2.isContinue());
712:       assertFalse(node2.isCall());
713:       assertFalse(node2.isVar());
714:       assertFalse(node2.hasMoreThanOneChild());
715:       assertFalse(node2.isLabel());
716:       assertFalse(node2.isNull());
717:       assertFalse(node2.isSetterDef());
718:       assertEquals((-1), node2.getLineno());
719:       assertFalse(node2.isAssignAdd());
720:       assertFalse(node2.isName());
721:       assertFalse(node2.isOr());
722:       assertFalse(node2.isTrue());
723:       assertFalse(node2.isDebugger());
724:       assertFalse(node2.isVoid());
725:       assertFalse(node2.isExprResult());
726:       assertFalse(node2.isCast());
727:       assertFalse(node2.isGetElem());
728:       assertTrue(node2.hasOneChild());
729:       assertFalse(node2.isDec());
730:       assertFalse(node2.isTypeOf());
731:       assertFalse(node2.isAssign());
732:       assertFalse(node2.isFunction());
733:       assertFalse(node2.isGetProp());
734:       assertFalse(node2.isComma());
735:       assertFalse(node2.isReturn());
736:       assertFalse(node2.isObjectLit());
737:       assertFalse(node2.isAnd());
738:       assertFalse(node2.isString());
739:       assertEquals((-1), node2.getSourcePosition());
740:       assertFalse(node2.isNot());
741:       assertFalse(node0.equals((Object)node1));
742:       assertFalse(node1.equals((Object)node0));
743:       assertFalse(node2.equals((Object)node0));
744:       assertNotNull(node2);
745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
748:       assertEquals(8, Node.FLAG_NO_THROWS);
749:       assertEquals(50, Node.FREE_CALL);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(55, Node.INFERRED_FUNCTION);
752:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
753:       assertEquals(39, Node.EMPTY_BLOCK);
754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(36, Node.QUOTED_PROP);
757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(57, Node.REFLECTED_OBJECT);
760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
761:       assertEquals(37, Node.OPT_ARG_NAME);
762:       assertEquals(49, Node.DIRECT_EVAL);
763:       assertEquals(48, Node.DIRECTIVES);
764:       assertEquals(47, Node.IS_DISPATCHER);
765:       assertEquals(29, Node.JSDOC_INFO_PROP);
766:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
767:       assertEquals(56, Node.CHANGE_TIME);
768:       assertEquals(2, Node.POST_FLAG);
769:       assertEquals(32, Node.INCRDECR_PROP);
770:       assertEquals(12, Node.COLUMN_BITS);
771:       assertEquals(53, Node.INPUT_ID);
772:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
773:       assertEquals(1, Node.DECR_FLAG);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(43, Node.IS_CONSTANT_NAME);
776:       assertEquals(54, Node.SLASH_V);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(46, Node.IS_NAMESPACE);
780:       assertEquals(40, Node.ORIGINALNAME_PROP);
781:       assertEquals(52, Node.LENGTH);
782:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
783:       assertEquals(57, Node.REFLECTED_OBJECT);
784:       assertEquals(54, Node.SLASH_V);
785:       assertEquals(50, Node.FREE_CALL);
786:       assertEquals(40, Node.ORIGINALNAME_PROP);
787:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(49, Node.DIRECT_EVAL);
790:       assertEquals(55, Node.INFERRED_FUNCTION);
791:       assertEquals(2, Node.POST_FLAG);
792:       assertEquals(8, Node.FLAG_NO_THROWS);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(15, Node.NO_SIDE_EFFECTS);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(29, Node.JSDOC_INFO_PROP);
798:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
799:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
800:       assertEquals(39, Node.EMPTY_BLOCK);
801:       assertEquals(57, Node.LAST_PROP);
802:       assertEquals(53, Node.INPUT_ID);
803:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
804:       assertEquals(36, Node.QUOTED_PROP);
805:       assertEquals(56, Node.CHANGE_TIME);
806:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
807:       assertEquals(37, Node.OPT_ARG_NAME);
808:       assertEquals(43, Node.IS_CONSTANT_NAME);
809:       assertEquals(12, Node.COLUMN_BITS);
810:       assertEquals(46, Node.IS_NAMESPACE);
811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
812:       assertEquals(4095, Node.COLUMN_MASK);
813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
814:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
815:       assertEquals(1, Node.DECR_FLAG);
816:       assertEquals(32, Node.INCRDECR_PROP);
817:       assertEquals(52, Node.LENGTH);
818:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
819:       assertEquals(57, Node.REFLECTED_OBJECT);
820:       assertEquals(57, Node.LAST_PROP);
821:       assertEquals(54, Node.SLASH_V);
822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
823:       assertEquals(50, Node.FREE_CALL);
824:       assertEquals(15, Node.NO_SIDE_EFFECTS);
825:       assertEquals(1, Node.DECR_FLAG);
826:       assertEquals(8, Node.FLAG_NO_THROWS);
827:       assertEquals(39, Node.EMPTY_BLOCK);
828:       assertEquals(32, Node.INCRDECR_PROP);
829:       assertEquals(48, Node.DIRECTIVES);
830:       assertEquals(37, Node.OPT_ARG_NAME);
831:       assertEquals(12, Node.COLUMN_BITS);
832:       assertEquals(56, Node.CHANGE_TIME);
833:       assertEquals(49, Node.DIRECT_EVAL);
834:       assertEquals(4095, Node.COLUMN_MASK);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(53, Node.INPUT_ID);
838:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
839:       assertEquals(43, Node.IS_CONSTANT_NAME);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(36, Node.QUOTED_PROP);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
846:       assertEquals(51, Node.STATIC_SOURCE_FILE);
847:       assertEquals(46, Node.IS_NAMESPACE);
848:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
849:       assertEquals(30, Node.VAR_ARGS_NAME);
850:       assertEquals(47, Node.IS_DISPATCHER);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(40, Node.ORIGINALNAME_PROP);
853:       assertSame(node1, node2);
854:       assertSame(node2, node1);
855:       
856:       node0.setLineno(23);
857:       assertFalse(node0.isFalse());
858:       assertFalse(node0.isThrow());
859:       assertFalse(node0.isHook());
860:       assertFalse(node0.isComma());
861:       assertFalse(node0.isThis());
862:       assertFalse(node0.isSwitch());
863:       assertFalse(node0.isInstanceOf());
864:       assertFalse(node0.isBreak());
865:       assertEquals(0, node0.getCharno());
866:       assertFalse(node0.isIn());
867:       assertFalse(node0.isInc());
868:       assertFalse(node0.isGetElem());
869:       assertFalse(node0.isAssign());
870:       assertFalse(node0.isEmpty());
871:       assertFalse(node0.isDec());
872:       assertFalse(node0.isTypeOf());
873:       assertFalse(node0.hasChildren());
874:       assertFalse(node0.isVoid());
875:       assertFalse(node0.isFunction());
876:       assertFalse(node0.isCast());
877:       assertFalse(node0.isDelProp());
878:       assertFalse(node0.isExprResult());
879:       assertFalse(node0.isNot());
880:       assertFalse(node0.isWhile());
881:       assertFalse(node0.isObjectLit());
882:       assertFalse(node0.isAnd());
883:       assertFalse(node0.isDebugger());
884:       assertFalse(node0.isReturn());
885:       assertFalse(node0.isGetProp());
886:       assertFalse(node0.isStringKey());
887:       assertFalse(node0.isName());
888:       assertFalse(node0.isNull());
889:       assertFalse(node0.isVar());
890:       assertFalse(node0.isParamList());
891:       assertFalse(node0.isCatch());
892:       assertFalse(node0.isCall());
893:       assertEquals(40, node0.getType());
894:       assertFalse(node0.isDo());
895:       assertFalse(node0.isContinue());
896:       assertFalse(node0.isDefaultCase());
897:       assertEquals(0, node0.getChildCount());
898:       assertFalse(node0.isTrue());
899:       assertFalse(node0.isLabel());
900:       assertFalse(node0.isNew());
901:       assertFalse(node0.isAdd());
902:       assertFalse(node0.isOr());
903:       assertFalse(node0.isAssignAdd());
904:       assertFalse(node0.isSetterDef());
905:       assertFalse(node0.isLabelName());
906:       assertFalse(node0.isFor());
907:       assertFalse(node0.isIf());
908:       assertFalse(node0.isNumber());
909:       assertFalse(node0.isNE());
910:       assertFalse(node0.isGetterDef());
911:       assertFalse(node0.isArrayLit());
912:       assertFalse(node0.isCase());
913:       assertFalse(node0.hasMoreThanOneChild());
914:       assertFalse(node0.isWith());
915:       assertFalse(node0.isRegExp());
916:       assertEquals(23, node0.getLineno());
917:       assertTrue(node0.isString());
918:       assertFalse(node0.isBlock());
919:       assertFalse(node0.isTry());
920:       assertEquals(94208, node0.getSourcePosition());
921:       assertFalse(node0.hasOneChild());
922:       assertFalse(node0.isScript());
923:       assertFalse(node0.equals((Object)node2));
924:       assertFalse(node0.equals((Object)node1));
925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
928:       assertEquals(8, Node.FLAG_NO_THROWS);
929:       assertEquals(50, Node.FREE_CALL);
930:       assertEquals(52, Node.LENGTH);
931:       assertEquals(55, Node.INFERRED_FUNCTION);
932:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
933:       assertEquals(39, Node.EMPTY_BLOCK);
934:       assertEquals(15, Node.NO_SIDE_EFFECTS);
935:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
936:       assertEquals(36, Node.QUOTED_PROP);
937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(57, Node.REFLECTED_OBJECT);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(49, Node.DIRECT_EVAL);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(47, Node.IS_DISPATCHER);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(56, Node.CHANGE_TIME);
948:       assertEquals(2, Node.POST_FLAG);
949:       assertEquals(32, Node.INCRDECR_PROP);
950:       assertEquals(12, Node.COLUMN_BITS);
951:       assertEquals(53, Node.INPUT_ID);
952:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
953:       assertEquals(1, Node.DECR_FLAG);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(43, Node.IS_CONSTANT_NAME);
956:       assertEquals(54, Node.SLASH_V);
957:       assertEquals(51, Node.STATIC_SOURCE_FILE);
958:       assertEquals(30, Node.VAR_ARGS_NAME);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       
962:       boolean boolean1 = node1.isBlock();
963:       assertFalse(node0.isFalse());
964:       assertFalse(node0.isThrow());
965:       assertFalse(node0.isHook());
966:       assertFalse(node0.isComma());
967:       assertFalse(node0.isThis());
968:       assertFalse(node0.isSwitch());
969:       assertFalse(node0.isInstanceOf());
970:       assertFalse(node0.isBreak());
971:       assertEquals(0, node0.getCharno());
972:       assertFalse(node0.isIn());
973:       assertFalse(node0.isInc());
974:       assertFalse(node0.isGetElem());
975:       assertFalse(node0.isAssign());
976:       assertFalse(node0.isEmpty());
977:       assertFalse(node0.isDec());
978:       assertFalse(node0.isTypeOf());
979:       assertFalse(node0.hasChildren());
980:       assertFalse(node0.isVoid());
981:       assertFalse(node0.isFunction());
982:       assertFalse(node0.isCast());
983:       assertFalse(node0.isDelProp());
984:       assertFalse(node0.isExprResult());
985:       assertFalse(node0.isNot());
986:       assertFalse(node0.isWhile());
987:       assertFalse(node0.isObjectLit());
988:       assertFalse(node0.isAnd());
989:       assertFalse(node0.isDebugger());
990:       assertFalse(node0.isReturn());
991:       assertFalse(node0.isGetProp());
992:       assertFalse(node0.isStringKey());
993:       assertFalse(node0.isName());
994:       assertFalse(node0.isNull());
995:       assertFalse(node0.isVar());
996:       assertFalse(node0.isParamList());
997:       assertFalse(node0.isCatch());
998:       assertFalse(node0.isCall());
999:       assertEquals(40, node0.getType());
1000:       assertFalse(node0.isDo());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isDefaultCase());
1003:       assertEquals(0, node0.getChildCount());
1004:       assertFalse(node0.isTrue());
1005:       assertFalse(node0.isLabel());
1006:       assertFalse(node0.isNew());
1007:       assertFalse(node0.isAdd());
1008:       assertFalse(node0.isOr());
1009:       assertFalse(node0.isAssignAdd());
1010:       assertFalse(node0.isSetterDef());
1011:       assertFalse(node0.isLabelName());
1012:       assertFalse(node0.isFor());
1013:       assertFalse(node0.isIf());
1014:       assertFalse(node0.isNumber());
1015:       assertFalse(node0.isNE());
1016:       assertFalse(node0.isGetterDef());
1017:       assertFalse(node0.isArrayLit());
1018:       assertFalse(node0.isCase());
1019:       assertFalse(node0.hasMoreThanOneChild());
1020:       assertFalse(node0.isWith());
1021:       assertFalse(node0.isRegExp());
1022:       assertEquals(23, node0.getLineno());
1023:       assertTrue(node0.isString());
1024:       assertFalse(node0.isBlock());
1025:       assertFalse(node0.isTry());
1026:       assertEquals(94208, node0.getSourcePosition());
1027:       assertFalse(node0.hasOneChild());
1028:       assertFalse(node0.isScript());
1029:       assertEquals((-1), node1.getCharno());
1030:       assertFalse(node1.isInc());
1031:       assertEquals(0, node1.getType());
1032:       assertFalse(node1.isSwitch());
1033:       assertFalse(node1.isHook());
1034:       assertFalse(node1.isThrow());
1035:       assertFalse(node1.isString());
1036:       assertFalse(node1.isCase());
1037:       assertFalse(node1.isGetProp());
1038:       assertFalse(node1.isGetterDef());
1039:       assertFalse(node1.isFalse());
1040:       assertFalse(node1.isAnd());
1041:       assertFalse(node1.isArrayLit());
1042:       assertFalse(node1.isVoid());
1043:       assertFalse(node1.isTrue());
1044:       assertFalse(node1.isExprResult());
1045:       assertFalse(node1.isNot());
1046:       assertFalse(node1.isDebugger());
1047:       assertFalse(node1.isObjectLit());
1048:       assertFalse(node1.isEmpty());
1049:       assertFalse(node1.isDefaultCase());
1050:       assertFalse(node1.isDec());
1051:       assertFalse(node1.isNull());
1052:       assertFalse(node1.isReturn());
1053:       assertFalse(node1.isTypeOf());
1054:       assertTrue(node1.hasOneChild());
1055:       assertFalse(node1.isOr());
1056:       assertFalse(node1.isAssign());
1057:       assertFalse(node1.isComma());
1058:       assertFalse(node1.isCall());
1059:       assertFalse(node1.isGetElem());
1060:       assertFalse(node1.isName());
1061:       assertFalse(node1.isBreak());
1062:       assertFalse(node1.isDelProp());
1063:       assertFalse(node1.isAdd());
1064:       assertFalse(node1.isBlock());
1065:       assertFalse(node1.isVar());
1066:       assertFalse(node1.isWhile());
1067:       assertFalse(node1.isDo());
1068:       assertFalse(node1.isSetterDef());
1069:       assertFalse(node1.isNew());
1070:       assertFalse(node1.isAssignAdd());
1071:       assertFalse(node1.isParamList());
1072:       assertFalse(node1.isNumber());
1073:       assertFalse(node1.isLabel());
1074:       assertEquals((-1), node1.getSourcePosition());
1075:       assertFalse(node1.isContinue());
1076:       assertFalse(node1.isCast());
1077:       assertFalse(node1.isStringKey());
1078:       assertFalse(node1.isLabelName());
1079:       assertFalse(node1.isFunction());
1080:       assertFalse(node1.isScript());
1081:       assertFalse(node1.isRegExp());
1082:       assertFalse(node1.isFor());
1083:       assertFalse(node1.isTry());
1084:       assertFalse(node1.isThis());
1085:       assertTrue(node1.hasChildren());
1086:       assertFalse(node1.isNE());
1087:       assertFalse(node1.isIn());
1088:       assertEquals(1, node1.getChildCount());
1089:       assertFalse(node1.hasMoreThanOneChild());
1090:       assertFalse(node1.isCatch());
1091:       assertFalse(node1.isWith());
1092:       assertFalse(node1.isInstanceOf());
1093:       assertFalse(node1.isIf());
1094:       assertEquals((-1), node1.getLineno());
1095:       assertFalse(node0.equals((Object)node2));
1096:       assertFalse(node0.equals((Object)node1));
1097:       assertFalse(node1.equals((Object)node0));
1098:       assertTrue(boolean1 == boolean0);
1099:       assertFalse(boolean1);
1100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1103:       assertEquals(8, Node.FLAG_NO_THROWS);
1104:       assertEquals(50, Node.FREE_CALL);
1105:       assertEquals(52, Node.LENGTH);
1106:       assertEquals(55, Node.INFERRED_FUNCTION);
1107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1108:       assertEquals(39, Node.EMPTY_BLOCK);
1109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1111:       assertEquals(36, Node.QUOTED_PROP);
1112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1113:       assertEquals(4095, Node.COLUMN_MASK);
1114:       assertEquals(57, Node.REFLECTED_OBJECT);
1115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1116:       assertEquals(37, Node.OPT_ARG_NAME);
1117:       assertEquals(49, Node.DIRECT_EVAL);
1118:       assertEquals(48, Node.DIRECTIVES);
1119:       assertEquals(47, Node.IS_DISPATCHER);
1120:       assertEquals(29, Node.JSDOC_INFO_PROP);
1121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1122:       assertEquals(56, Node.CHANGE_TIME);
1123:       assertEquals(2, Node.POST_FLAG);
1124:       assertEquals(32, Node.INCRDECR_PROP);
1125:       assertEquals(12, Node.COLUMN_BITS);
1126:       assertEquals(53, Node.INPUT_ID);
1127:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1128:       assertEquals(1, Node.DECR_FLAG);
1129:       assertEquals(57, Node.LAST_PROP);
1130:       assertEquals(43, Node.IS_CONSTANT_NAME);
1131:       assertEquals(54, Node.SLASH_V);
1132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(46, Node.IS_NAMESPACE);
1135:       assertEquals(40, Node.ORIGINALNAME_PROP);
1136:       assertEquals(52, Node.LENGTH);
1137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1138:       assertEquals(57, Node.REFLECTED_OBJECT);
1139:       assertEquals(54, Node.SLASH_V);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(40, Node.ORIGINALNAME_PROP);
1142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1143:       assertEquals(48, Node.DIRECTIVES);
1144:       assertEquals(49, Node.DIRECT_EVAL);
1145:       assertEquals(55, Node.INFERRED_FUNCTION);
1146:       assertEquals(2, Node.POST_FLAG);
1147:       assertEquals(8, Node.FLAG_NO_THROWS);
1148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1149:       assertEquals(30, Node.VAR_ARGS_NAME);
1150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1151:       assertEquals(47, Node.IS_DISPATCHER);
1152:       assertEquals(29, Node.JSDOC_INFO_PROP);
1153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1154:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1155:       assertEquals(39, Node.EMPTY_BLOCK);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(53, Node.INPUT_ID);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(36, Node.QUOTED_PROP);
1160:       assertEquals(56, Node.CHANGE_TIME);
1161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(12, Node.COLUMN_BITS);
1165:       assertEquals(46, Node.IS_NAMESPACE);
1166:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1167:       assertEquals(4095, Node.COLUMN_MASK);
1168:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1170:       assertEquals(1, Node.DECR_FLAG);
1171:       assertEquals(32, Node.INCRDECR_PROP);
1172:       assertSame(node1, node2);
1173:       
1174:       boolean boolean2 = node0.isFromExterns();
1175:       assertFalse(node0.isFalse());
1176:       assertFalse(node0.isThrow());
1177:       assertFalse(node0.isHook());
1178:       assertFalse(node0.isComma());
1179:       assertFalse(node0.isThis());
1180:       assertFalse(node0.isSwitch());
1181:       assertFalse(node0.isInstanceOf());
1182:       assertFalse(node0.isBreak());
1183:       assertEquals(0, node0.getCharno());
1184:       assertFalse(node0.isIn());
1185:       assertFalse(node0.isInc());
1186:       assertFalse(node0.isGetElem());
1187:       assertFalse(node0.isAssign());
1188:       assertFalse(node0.isEmpty());
1189:       assertFalse(node0.isDec());
1190:       assertFalse(node0.isTypeOf());
1191:       assertFalse(node0.hasChildren());
1192:       assertFalse(node0.isVoid());
1193:       assertFalse(node0.isFunction());
1194:       assertFalse(node0.isCast());
1195:       assertFalse(node0.isDelProp());
1196:       assertFalse(node0.isExprResult());
1197:       assertFalse(node0.isNot());
1198:       assertFalse(node0.isWhile());
1199:       assertFalse(node0.isObjectLit());
1200:       assertFalse(node0.isAnd());
1201:       assertFalse(node0.isDebugger());
1202:       assertFalse(node0.isReturn());
1203:       assertFalse(node0.isGetProp());
1204:       assertFalse(node0.isStringKey());
1205:       assertFalse(node0.isName());
1206:       assertFalse(node0.isNull());
1207:       assertFalse(node0.isVar());
1208:       assertFalse(node0.isParamList());
1209:       assertFalse(node0.isCatch());
1210:       assertFalse(node0.isCall());
1211:       assertEquals(40, node0.getType());
1212:       assertFalse(node0.isDo());
1213:       assertFalse(node0.isContinue());
1214:       assertFalse(node0.isDefaultCase());
1215:       assertEquals(0, node0.getChildCount());
1216:       assertFalse(node0.isTrue());
1217:       assertFalse(node0.isLabel());
1218:       assertFalse(node0.isNew());
1219:       assertFalse(node0.isAdd());
1220:       assertFalse(node0.isOr());
1221:       assertFalse(node0.isAssignAdd());
1222:       assertFalse(node0.isSetterDef());
1223:       assertFalse(node0.isLabelName());
1224:       assertFalse(node0.isFor());
1225:       assertFalse(node0.isIf());
1226:       assertFalse(node0.isNumber());
1227:       assertFalse(node0.isNE());
1228:       assertFalse(node0.isGetterDef());
1229:       assertFalse(node0.isArrayLit());
1230:       assertFalse(node0.isCase());
1231:       assertFalse(node0.hasMoreThanOneChild());
1232:       assertFalse(node0.isWith());
1233:       assertFalse(node0.isRegExp());
1234:       assertEquals(23, node0.getLineno());
1235:       assertTrue(node0.isString());
1236:       assertFalse(node0.isBlock());
1237:       assertFalse(node0.isTry());
1238:       assertEquals(94208, node0.getSourcePosition());
1239:       assertFalse(node0.hasOneChild());
1240:       assertFalse(node0.isScript());
1241:       assertFalse(node0.equals((Object)node2));
1242:       assertFalse(node0.equals((Object)node1));
1243:       assertTrue(boolean2 == boolean1);
1244:       assertTrue(boolean2 == boolean0);
1245:       assertFalse(boolean2);
1246:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1249:       assertEquals(8, Node.FLAG_NO_THROWS);
1250:       assertEquals(50, Node.FREE_CALL);
1251:       assertEquals(52, Node.LENGTH);
1252:       assertEquals(55, Node.INFERRED_FUNCTION);
1253:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1254:       assertEquals(39, Node.EMPTY_BLOCK);
1255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1257:       assertEquals(36, Node.QUOTED_PROP);
1258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1259:       assertEquals(4095, Node.COLUMN_MASK);
1260:       assertEquals(57, Node.REFLECTED_OBJECT);
1261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1262:       assertEquals(37, Node.OPT_ARG_NAME);
1263:       assertEquals(49, Node.DIRECT_EVAL);
1264:       assertEquals(48, Node.DIRECTIVES);
1265:       assertEquals(47, Node.IS_DISPATCHER);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1268:       assertEquals(56, Node.CHANGE_TIME);
1269:       assertEquals(2, Node.POST_FLAG);
1270:       assertEquals(32, Node.INCRDECR_PROP);
1271:       assertEquals(12, Node.COLUMN_BITS);
1272:       assertEquals(53, Node.INPUT_ID);
1273:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1274:       assertEquals(1, Node.DECR_FLAG);
1275:       assertEquals(57, Node.LAST_PROP);
1276:       assertEquals(43, Node.IS_CONSTANT_NAME);
1277:       assertEquals(54, Node.SLASH_V);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(30, Node.VAR_ARGS_NAME);
1280:       assertEquals(46, Node.IS_NAMESPACE);
1281:       assertEquals(40, Node.ORIGINALNAME_PROP);
1282:       
1283:       boolean boolean3 = node0.isNew();
1284:       assertFalse(node0.isFalse());
1285:       assertFalse(node0.isThrow());
1286:       assertFalse(node0.isHook());
1287:       assertFalse(node0.isComma());
1288:       assertFalse(node0.isThis());
1289:       assertFalse(node0.isSwitch());
1290:       assertFalse(node0.isInstanceOf());
1291:       assertFalse(node0.isBreak());
1292:       assertEquals(0, node0.getCharno());
1293:       assertFalse(node0.isIn());
1294:       assertFalse(node0.isInc());
1295:       assertFalse(node0.isGetElem());
1296:       assertFalse(node0.isAssign());
1297:       assertFalse(node0.isEmpty());
1298:       assertFalse(node0.isDec());
1299:       assertFalse(node0.isTypeOf());
1300:       assertFalse(node0.hasChildren());
1301:       assertFalse(node0.isVoid());
1302:       assertFalse(node0.isFunction());
1303:       assertFalse(node0.isCast());
1304:       assertFalse(node0.isDelProp());
1305:       assertFalse(node0.isExprResult());
1306:       assertFalse(node0.isNot());
1307:       assertFalse(node0.isWhile());
1308:       assertFalse(node0.isObjectLit());
1309:       assertFalse(node0.isAnd());
1310:       assertFalse(node0.isDebugger());
1311:       assertFalse(node0.isReturn());
1312:       assertFalse(node0.isGetProp());
1313:       assertFalse(node0.isStringKey());
1314:       assertFalse(node0.isName());
1315:       assertFalse(node0.isNull());
1316:       assertFalse(node0.isVar());
1317:       assertFalse(node0.isParamList());
1318:       assertFalse(node0.isCatch());
1319:       assertFalse(node0.isCall());
1320:       assertEquals(40, node0.getType());
1321:       assertFalse(node0.isDo());
1322:       assertFalse(node0.isContinue());
1323:       assertFalse(node0.isDefaultCase());
1324:       assertEquals(0, node0.getChildCount());
1325:       assertFalse(node0.isTrue());
1326:       assertFalse(node0.isLabel());
1327:       assertFalse(node0.isNew());
1328:       assertFalse(node0.isAdd());
1329:       assertFalse(node0.isOr());
1330:       assertFalse(node0.isAssignAdd());
1331:       assertFalse(node0.isSetterDef());
1332:       assertFalse(node0.isLabelName());
1333:       assertFalse(node0.isFor());
1334:       assertFalse(node0.isIf());
1335:       assertFalse(node0.isNumber());
1336:       assertFalse(node0.isNE());
1337:       assertFalse(node0.isGetterDef());
1338:       assertFalse(node0.isArrayLit());
1339:       assertFalse(node0.isCase());
1340:       assertFalse(node0.hasMoreThanOneChild());
1341:       assertFalse(node0.isWith());
1342:       assertFalse(node0.isRegExp());
1343:       assertEquals(23, node0.getLineno());
1344:       assertTrue(node0.isString());
1345:       assertFalse(node0.isBlock());
1346:       assertFalse(node0.isTry());
1347:       assertEquals(94208, node0.getSourcePosition());
1348:       assertFalse(node0.hasOneChild());
1349:       assertFalse(node0.isScript());
1350:       assertFalse(node0.equals((Object)node2));
1351:       assertFalse(node0.equals((Object)node1));
1352:       assertTrue(boolean3 == boolean1);
1353:       assertTrue(boolean3 == boolean0);
1354:       assertTrue(boolean3 == boolean2);
1355:       assertFalse(boolean3);
1356:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1357:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1359:       assertEquals(8, Node.FLAG_NO_THROWS);
1360:       assertEquals(50, Node.FREE_CALL);
1361:       assertEquals(52, Node.LENGTH);
1362:       assertEquals(55, Node.INFERRED_FUNCTION);
1363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1364:       assertEquals(39, Node.EMPTY_BLOCK);
1365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1366:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1367:       assertEquals(36, Node.QUOTED_PROP);
1368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1369:       assertEquals(4095, Node.COLUMN_MASK);
1370:       assertEquals(57, Node.REFLECTED_OBJECT);
1371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1372:       assertEquals(37, Node.OPT_ARG_NAME);
1373:       assertEquals(49, Node.DIRECT_EVAL);
1374:       assertEquals(48, Node.DIRECTIVES);
1375:       assertEquals(47, Node.IS_DISPATCHER);
1376:       assertEquals(29, Node.JSDOC_INFO_PROP);
1377:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1378:       assertEquals(56, Node.CHANGE_TIME);
1379:       assertEquals(2, Node.POST_FLAG);
1380:       assertEquals(32, Node.INCRDECR_PROP);
1381:       assertEquals(12, Node.COLUMN_BITS);
1382:       assertEquals(53, Node.INPUT_ID);
1383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1384:       assertEquals(1, Node.DECR_FLAG);
1385:       assertEquals(57, Node.LAST_PROP);
1386:       assertEquals(43, Node.IS_CONSTANT_NAME);
1387:       assertEquals(54, Node.SLASH_V);
1388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1389:       assertEquals(30, Node.VAR_ARGS_NAME);
1390:       assertEquals(46, Node.IS_NAMESPACE);
1391:       assertEquals(40, Node.ORIGINALNAME_PROP);
1392:       
1393:       boolean boolean4 = node2.isTypeOf();
1394:       assertFalse(node0.isFalse());
1395:       assertFalse(node0.isThrow());
1396:       assertFalse(node0.isHook());
1397:       assertFalse(node0.isComma());
1398:       assertFalse(node0.isThis());
1399:       assertFalse(node0.isSwitch());
1400:       assertFalse(node0.isInstanceOf());
1401:       assertFalse(node0.isBreak());
1402:       assertEquals(0, node0.getCharno());
1403:       assertFalse(node0.isIn());
1404:       assertFalse(node0.isInc());
1405:       assertFalse(node0.isGetElem());
1406:       assertFalse(node0.isAssign());
1407:       assertFalse(node0.isEmpty());
1408:       assertFalse(node0.isDec());
1409:       assertFalse(node0.isTypeOf());
1410:       assertFalse(node0.hasChildren());
1411:       assertFalse(node0.isVoid());
1412:       assertFalse(node0.isFunction());
1413:       assertFalse(node0.isCast());
1414:       assertFalse(node0.isDelProp());
1415:       assertFalse(node0.isExprResult());
1416:       assertFalse(node0.isNot());
1417:       assertFalse(node0.isWhile());
1418:       assertFalse(node0.isObjectLit());
1419:       assertFalse(node0.isAnd());
1420:       assertFalse(node0.isDebugger());
1421:       assertFalse(node0.isReturn());
1422:       assertFalse(node0.isGetProp());
1423:       assertFalse(node0.isStringKey());
1424:       assertFalse(node0.isName());
1425:       assertFalse(node0.isNull());
1426:       assertFalse(node0.isVar());
1427:       assertFalse(node0.isParamList());
1428:       assertFalse(node0.isCatch());
1429:       assertFalse(node0.isCall());
1430:       assertEquals(40, node0.getType());
1431:       assertFalse(node0.isDo());
1432:       assertFalse(node0.isContinue());
1433:       assertFalse(node0.isDefaultCase());
1434:       assertEquals(0, node0.getChildCount());
1435:       assertFalse(node0.isTrue());
1436:       assertFalse(node0.isLabel());
1437:       assertFalse(node0.isNew());
1438:       assertFalse(node0.isAdd());
1439:       assertFalse(node0.isOr());
1440:       assertFalse(node0.isAssignAdd());
1441:       assertFalse(node0.isSetterDef());
1442:       assertFalse(node0.isLabelName());
1443:       assertFalse(node0.isFor());
1444:       assertFalse(node0.isIf());
1445:       assertFalse(node0.isNumber());
1446:       assertFalse(node0.isNE());
1447:       assertFalse(node0.isGetterDef());
1448:       assertFalse(node0.isArrayLit());
1449:       assertFalse(node0.isCase());
1450:       assertFalse(node0.hasMoreThanOneChild());
1451:       assertFalse(node0.isWith());
1452:       assertFalse(node0.isRegExp());
1453:       assertEquals(23, node0.getLineno());
1454:       assertTrue(node0.isString());
1455:       assertFalse(node0.isBlock());
1456:       assertFalse(node0.isTry());
1457:       assertEquals(94208, node0.getSourcePosition());
1458:       assertFalse(node0.hasOneChild());
1459:       assertFalse(node0.isScript());
1460:       assertEquals((-1), node1.getCharno());
1461:       assertFalse(node1.isInc());
1462:       assertEquals(0, node1.getType());
1463:       assertFalse(node1.isSwitch());
1464:       assertFalse(node1.isHook());
1465:       assertFalse(node1.isThrow());
1466:       assertFalse(node1.isString());
1467:       assertFalse(node1.isCase());
1468:       assertFalse(node1.isGetProp());
1469:       assertFalse(node1.isGetterDef());
1470:       assertFalse(node1.isFalse());
1471:       assertFalse(node1.isAnd());
1472:       assertFalse(node1.isArrayLit());
1473:       assertFalse(node1.isVoid());
1474:       assertFalse(node1.isTrue());
1475:       assertFalse(node1.isExprResult());
1476:       assertFalse(node1.isNot());
1477:       assertFalse(node1.isDebugger());
1478:       assertFalse(node1.isObjectLit());
1479:       assertFalse(node1.isEmpty());
1480:       assertFalse(node1.isDefaultCase());
1481:       assertFalse(node1.isDec());
1482:       assertFalse(node1.isNull());
1483:       assertFalse(node1.isReturn());
1484:       assertFalse(node1.isTypeOf());
1485:       assertTrue(node1.hasOneChild());
1486:       assertFalse(node1.isOr());
1487:       assertFalse(node1.isAssign());
1488:       assertFalse(node1.isComma());
1489:       assertFalse(node1.isCall());
1490:       assertFalse(node1.isGetElem());
1491:       assertFalse(node1.isName());
1492:       assertFalse(node1.isBreak());
1493:       assertFalse(node1.isDelProp());
1494:       assertFalse(node1.isAdd());
1495:       assertFalse(node1.isBlock());
1496:       assertFalse(node1.isVar());
1497:       assertFalse(node1.isWhile());
1498:       assertFalse(node1.isDo());
1499:       assertFalse(node1.isSetterDef());
1500:       assertFalse(node1.isNew());
1501:       assertFalse(node1.isAssignAdd());
1502:       assertFalse(node1.isParamList());
1503:       assertFalse(node1.isNumber());
1504:       assertFalse(node1.isLabel());
1505:       assertEquals((-1), node1.getSourcePosition());
1506:       assertFalse(node1.isContinue());
1507:       assertFalse(node1.isCast());
1508:       assertFalse(node1.isStringKey());
1509:       assertFalse(node1.isLabelName());
1510:       assertFalse(node1.isFunction());
1511:       assertFalse(node1.isScript());
1512:       assertFalse(node1.isRegExp());
1513:       assertFalse(node1.isFor());
1514:       assertFalse(node1.isTry());
1515:       assertFalse(node1.isThis());
1516:       assertTrue(node1.hasChildren());
1517:       assertFalse(node1.isNE());
1518:       assertFalse(node1.isIn());
1519:       assertEquals(1, node1.getChildCount());
1520:       assertFalse(node1.hasMoreThanOneChild());
1521:       assertFalse(node1.isCatch());
1522:       assertFalse(node1.isWith());
1523:       assertFalse(node1.isInstanceOf());
1524:       assertFalse(node1.isIf());
1525:       assertEquals((-1), node1.getLineno());
1526:       assertEquals((-1), node2.getCharno());
1527:       assertFalse(node2.isInc());
1528:       assertEquals(0, node2.getType());
1529:       assertFalse(node2.isSwitch());
1530:       assertFalse(node2.isThrow());
1531:       assertFalse(node2.isHook());
1532:       assertEquals(1, node2.getChildCount());
1533:       assertFalse(node2.isFalse());
1534:       assertTrue(node2.hasChildren());
1535:       assertFalse(node2.isNE());
1536:       assertFalse(node2.isBreak());
1537:       assertFalse(node2.isDelProp());
1538:       assertFalse(node2.isIf());
1539:       assertFalse(node2.isEmpty());
1540:       assertFalse(node2.isIn());
1541:       assertFalse(node2.isScript());
1542:       assertFalse(node2.isTry());
1543:       assertFalse(node2.isDefaultCase());
1544:       assertFalse(node2.isCatch());
1545:       assertFalse(node2.isArrayLit());
1546:       assertFalse(node2.isFor());
1547:       assertFalse(node2.isInstanceOf());
1548:       assertFalse(node2.isRegExp());
1549:       assertFalse(node2.isWith());
1550:       assertFalse(node2.isParamList());
1551:       assertFalse(node2.isThis());
1552:       assertFalse(node2.isLabelName());
1553:       assertFalse(node2.isStringKey());
1554:       assertFalse(node2.isCase());
1555:       assertFalse(node2.isGetterDef());
1556:       assertFalse(node2.isNumber());
1557:       assertFalse(node2.isNew());
1558:       assertFalse(node2.isAdd());
1559:       assertFalse(node2.isBlock());
1560:       assertFalse(node2.isWhile());
1561:       assertFalse(node2.isDo());
1562:       assertFalse(node2.isContinue());
1563:       assertFalse(node2.isCall());
1564:       assertFalse(node2.isVar());
1565:       assertFalse(node2.hasMoreThanOneChild());
1566:       assertFalse(node2.isLabel());
1567:       assertFalse(node2.isNull());
1568:       assertFalse(node2.isSetterDef());
1569:       assertEquals((-1), node2.getLineno());
1570:       assertFalse(node2.isAssignAdd());
1571:       assertFalse(node2.isName());
1572:       assertFalse(node2.isOr());
1573:       assertFalse(node2.isTrue());
1574:       assertFalse(node2.isDebugger());
1575:       assertFalse(node2.isVoid());
1576:       assertFalse(node2.isExprResult());
1577:       assertFalse(node2.isCast());
1578:       assertFalse(node2.isGetElem());
1579:       assertTrue(node2.hasOneChild());
1580:       assertFalse(node2.isDec());
1581:       assertFalse(node2.isTypeOf());
1582:       assertFalse(node2.isAssign());
1583:       assertFalse(node2.isFunction());
1584:       assertFalse(node2.isGetProp());
1585:       assertFalse(node2.isComma());
1586:       assertFalse(node2.isReturn());
1587:       assertFalse(node2.isObjectLit());
1588:       assertFalse(node2.isAnd());
1589:       assertFalse(node2.isString());
1590:       assertEquals((-1), node2.getSourcePosition());
1591:       assertFalse(node2.isNot());
1592:       assertFalse(node0.equals((Object)node2));
1593:       assertFalse(node0.equals((Object)node1));
1594:       assertFalse(node1.equals((Object)node0));
1595:       assertFalse(node2.equals((Object)node0));
1596:       assertTrue(boolean4 == boolean0);
1597:       assertTrue(boolean4 == boolean1);
1598:       assertTrue(boolean4 == boolean2);
1599:       assertTrue(boolean4 == boolean3);
1600:       assertFalse(boolean4);
1601:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1602:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1603:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1604:       assertEquals(8, Node.FLAG_NO_THROWS);
1605:       assertEquals(50, Node.FREE_CALL);
1606:       assertEquals(52, Node.LENGTH);
1607:       assertEquals(55, Node.INFERRED_FUNCTION);
1608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1609:       assertEquals(39, Node.EMPTY_BLOCK);
1610:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1611:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1612:       assertEquals(36, Node.QUOTED_PROP);
1613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1614:       assertEquals(4095, Node.COLUMN_MASK);
1615:       assertEquals(57, Node.REFLECTED_OBJECT);
1616:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1617:       assertEquals(37, Node.OPT_ARG_NAME);
1618:       assertEquals(49, Node.DIRECT_EVAL);
1619:       assertEquals(48, Node.DIRECTIVES);
1620:       assertEquals(47, Node.IS_DISPATCHER);
1621:       assertEquals(29, Node.JSDOC_INFO_PROP);
1622:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1623:       assertEquals(56, Node.CHANGE_TIME);
1624:       assertEquals(2, Node.POST_FLAG);
1625:       assertEquals(32, Node.INCRDECR_PROP);
1626:       assertEquals(12, Node.COLUMN_BITS);
1627:       assertEquals(53, Node.INPUT_ID);
1628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1629:       assertEquals(1, Node.DECR_FLAG);
1630:       assertEquals(57, Node.LAST_PROP);
1631:       assertEquals(43, Node.IS_CONSTANT_NAME);
1632:       assertEquals(54, Node.SLASH_V);
1633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1634:       assertEquals(30, Node.VAR_ARGS_NAME);
1635:       assertEquals(46, Node.IS_NAMESPACE);
1636:       assertEquals(40, Node.ORIGINALNAME_PROP);
1637:       assertEquals(52, Node.LENGTH);
1638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1639:       assertEquals(57, Node.REFLECTED_OBJECT);
1640:       assertEquals(54, Node.SLASH_V);
1641:       assertEquals(50, Node.FREE_CALL);
1642:       assertEquals(40, Node.ORIGINALNAME_PROP);
1643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1644:       assertEquals(48, Node.DIRECTIVES);
1645:       assertEquals(49, Node.DIRECT_EVAL);
1646:       assertEquals(55, Node.INFERRED_FUNCTION);
1647:       assertEquals(2, Node.POST_FLAG);
1648:       assertEquals(8, Node.FLAG_NO_THROWS);
1649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1650:       assertEquals(30, Node.VAR_ARGS_NAME);
1651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1652:       assertEquals(47, Node.IS_DISPATCHER);
1653:       assertEquals(29, Node.JSDOC_INFO_PROP);
1654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1656:       assertEquals(39, Node.EMPTY_BLOCK);
1657:       assertEquals(57, Node.LAST_PROP);
1658:       assertEquals(53, Node.INPUT_ID);
1659:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1660:       assertEquals(36, Node.QUOTED_PROP);
1661:       assertEquals(56, Node.CHANGE_TIME);
1662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1663:       assertEquals(37, Node.OPT_ARG_NAME);
1664:       assertEquals(43, Node.IS_CONSTANT_NAME);
1665:       assertEquals(12, Node.COLUMN_BITS);
1666:       assertEquals(46, Node.IS_NAMESPACE);
1667:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1668:       assertEquals(4095, Node.COLUMN_MASK);
1669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1671:       assertEquals(1, Node.DECR_FLAG);
1672:       assertEquals(32, Node.INCRDECR_PROP);
1673:       assertEquals(52, Node.LENGTH);
1674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1675:       assertEquals(57, Node.REFLECTED_OBJECT);
1676:       assertEquals(57, Node.LAST_PROP);
1677:       assertEquals(54, Node.SLASH_V);
1678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1679:       assertEquals(50, Node.FREE_CALL);
1680:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1681:       assertEquals(1, Node.DECR_FLAG);
1682:       assertEquals(8, Node.FLAG_NO_THROWS);
1683:       assertEquals(39, Node.EMPTY_BLOCK);
1684:       assertEquals(32, Node.INCRDECR_PROP);
1685:       assertEquals(48, Node.DIRECTIVES);
1686:       assertEquals(37, Node.OPT_ARG_NAME);
1687:       assertEquals(12, Node.COLUMN_BITS);
1688:       assertEquals(56, Node.CHANGE_TIME);
1689:       assertEquals(49, Node.DIRECT_EVAL);
1690:       assertEquals(4095, Node.COLUMN_MASK);
1691:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1692:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1693:       assertEquals(53, Node.INPUT_ID);
1694:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1695:       assertEquals(43, Node.IS_CONSTANT_NAME);
1696:       assertEquals(29, Node.JSDOC_INFO_PROP);
1697:       assertEquals(36, Node.QUOTED_PROP);
1698:       assertEquals(55, Node.INFERRED_FUNCTION);
1699:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1700:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1701:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1702:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1703:       assertEquals(46, Node.IS_NAMESPACE);
1704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1705:       assertEquals(30, Node.VAR_ARGS_NAME);
1706:       assertEquals(47, Node.IS_DISPATCHER);
1707:       assertEquals(2, Node.POST_FLAG);
1708:       assertEquals(40, Node.ORIGINALNAME_PROP);
1709:       assertSame(node1, node2);
1710:       assertSame(node2, node1);
1711:       
1712:       Iterable<Node> iterable0 = node0.children();
1713:       assertFalse(node0.isFalse());
1714:       assertFalse(node0.isThrow());
1715:       assertFalse(node0.isHook());
1716:       assertFalse(node0.isComma());
1717:       assertFalse(node0.isThis());
1718:       assertFalse(node0.isSwitch());
1719:       assertFalse(node0.isInstanceOf());
1720:       assertFalse(node0.isBreak());
1721:       assertEquals(0, node0.getCharno());
1722:       assertFalse(node0.isIn());
1723:       assertFalse(node0.isInc());
1724:       assertFalse(node0.isGetElem());
1725:       assertFalse(node0.isAssign());
1726:       assertFalse(node0.isEmpty());
1727:       assertFalse(node0.isDec());
1728:       assertFalse(node0.isTypeOf());
1729:       assertFalse(node0.hasChildren());
1730:       assertFalse(node0.isVoid());
1731:       assertFalse(node0.isFunction());
1732:       assertFalse(node0.isCast());
1733:       assertFalse(node0.isDelProp());
1734:       assertFalse(node0.isExprResult());
1735:       assertFalse(node0.isNot());
1736:       assertFalse(node0.isWhile());
1737:       assertFalse(node0.isObjectLit());
1738:       assertFalse(node0.isAnd());
1739:       assertFalse(node0.isDebugger());
1740:       assertFalse(node0.isReturn());
1741:       assertFalse(node0.isGetProp());
1742:       assertFalse(node0.isStringKey());
1743:       assertFalse(node0.isName());
1744:       assertFalse(node0.isNull());
1745:       assertFalse(node0.isVar());
1746:       assertFalse(node0.isParamList());
1747:       assertFalse(node0.isCatch());
1748:       assertFalse(node0.isCall());
1749:       assertEquals(40, node0.getType());
1750:       assertFalse(node0.isDo());
1751:       assertFalse(node0.isContinue());
1752:       assertFalse(node0.isDefaultCase());
1753:       assertEquals(0, node0.getChildCount());
1754:       assertFalse(node0.isTrue());
1755:       assertFalse(node0.isLabel());
1756:       assertFalse(node0.isNew());
1757:       assertFalse(node0.isAdd());
1758:       assertFalse(node0.isOr());
1759:       assertFalse(node0.isAssignAdd());
1760:       assertFalse(node0.isSetterDef());
1761:       assertFalse(node0.isLabelName());
1762:       assertFalse(node0.isFor());
1763:       assertFalse(node0.isIf());
1764:       assertFalse(node0.isNumber());
1765:       assertFalse(node0.isNE());
1766:       assertFalse(node0.isGetterDef());
1767:       assertFalse(node0.isArrayLit());
1768:       assertFalse(node0.isCase());
1769:       assertFalse(node0.hasMoreThanOneChild());
1770:       assertFalse(node0.isWith());
1771:       assertFalse(node0.isRegExp());
1772:       assertEquals(23, node0.getLineno());
1773:       assertTrue(node0.isString());
1774:       assertFalse(node0.isBlock());
1775:       assertFalse(node0.isTry());
1776:       assertEquals(94208, node0.getSourcePosition());
1777:       assertFalse(node0.hasOneChild());
1778:       assertFalse(node0.isScript());
1779:       assertFalse(node0.equals((Object)node2));
1780:       assertFalse(node0.equals((Object)node1));
1781:       assertNotNull(iterable0);
1782:       assertFalse(iterable0.contains(node2));
1783:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1786:       assertEquals(8, Node.FLAG_NO_THROWS);
1787:       assertEquals(50, Node.FREE_CALL);
1788:       assertEquals(52, Node.LENGTH);
1789:       assertEquals(55, Node.INFERRED_FUNCTION);
1790:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1791:       assertEquals(39, Node.EMPTY_BLOCK);
1792:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1793:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1794:       assertEquals(36, Node.QUOTED_PROP);
1795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1796:       assertEquals(4095, Node.COLUMN_MASK);
1797:       assertEquals(57, Node.REFLECTED_OBJECT);
1798:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1799:       assertEquals(37, Node.OPT_ARG_NAME);
1800:       assertEquals(49, Node.DIRECT_EVAL);
1801:       assertEquals(48, Node.DIRECTIVES);
1802:       assertEquals(47, Node.IS_DISPATCHER);
1803:       assertEquals(29, Node.JSDOC_INFO_PROP);
1804:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1805:       assertEquals(56, Node.CHANGE_TIME);
1806:       assertEquals(2, Node.POST_FLAG);
1807:       assertEquals(32, Node.INCRDECR_PROP);
1808:       assertEquals(12, Node.COLUMN_BITS);
1809:       assertEquals(53, Node.INPUT_ID);
1810:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1811:       assertEquals(1, Node.DECR_FLAG);
1812:       assertEquals(57, Node.LAST_PROP);
1813:       assertEquals(43, Node.IS_CONSTANT_NAME);
1814:       assertEquals(54, Node.SLASH_V);
1815:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1816:       assertEquals(30, Node.VAR_ARGS_NAME);
1817:       assertEquals(46, Node.IS_NAMESPACE);
1818:       assertEquals(40, Node.ORIGINALNAME_PROP);
1819:   }
1820: }
RegularFileObject[/tmp/EvoSuite_115_1628160159467/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:42:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_115_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.common.base.Preconditions",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.base.Objects",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Iterables",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.jstype.NamedType",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.common.collect.Platform"
364:     );
365:   }
366: }

[MASTER] 10:42:40.005 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.common.base.Joiner$2");
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNotNull(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = new Node(0, node0, node0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean0 = node1.getBooleanProp(0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Node node2 = node1.srcref(node0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertEquals(0, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isFalse());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node1, node2);
assertSame(node2, node1);

node0.setLineno(23);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(23, node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node1.isBlock();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(23, node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertSame(node1, node2);

boolean boolean2 = node0.isFromExterns();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(23, node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean3 = node0.isNew();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(23, node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean4 = node2.isTypeOf();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(23, node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertEquals(0, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertEquals(0, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isFalse());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node1, node2);
assertSame(node2, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals(40, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(23, node0.getLineno());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 10:42:40.792 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1628160160573/com/google/javascript/rhino/Node_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1628160160573/com/google/javascript/rhino/Node_121_tmp__ESTest_scaffolding.java]]
[MASTER] 10:42:40.792 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:42:40.792 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:42:40.793 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1685
[MASTER] 10:42:40.795 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1628160160573/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:42:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_121_tmp__ESTest extends Node_121_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(887, 887, 887);
21:       assertFalse(node0.isComma());
22:       assertFalse(node0.isThis());
23:       assertFalse(node0.isNot());
24:       assertFalse(node0.isThrow());
25:       assertFalse(node0.isObjectLit());
26:       assertFalse(node0.isScript());
27:       assertEquals(887, node0.getCharno());
28:       assertFalse(node0.isGetProp());
29:       assertFalse(node0.isSwitch());
30:       assertEquals(3634039, node0.getSourcePosition());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isAnd());
33:       assertFalse(node0.isFalse());
34:       assertFalse(node0.isCast());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isTypeOf());
39:       assertFalse(node0.isDec());
40:       assertFalse(node0.hasChildren());
41:       assertFalse(node0.isReturn());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isEmpty());
44:       assertEquals(887, node0.getType());
45:       assertFalse(node0.isWhile());
46:       assertFalse(node0.isString());
47:       assertFalse(node0.isAdd());
48:       assertFalse(node0.isVoid());
49:       assertFalse(node0.isTrue());
50:       assertFalse(node0.isName());
51:       assertFalse(node0.isAssign());
52:       assertFalse(node0.isDelProp());
53:       assertFalse(node0.isCall());
54:       assertFalse(node0.isBreak());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.isGetElem());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isNew());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isVar());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isStringKey());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isFor());
73:       assertEquals(887, node0.getLineno());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isNumber());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isInc());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isRegExp());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isIf());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isWith());
85:       assertFalse(node0.isCatch());
86:       assertFalse(node0.isInstanceOf());
87:       assertNotNull(node0);
88:       assertEquals(55, Node.INFERRED_FUNCTION);
89:       assertEquals(4095, Node.COLUMN_MASK);
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(57, Node.REFLECTED_OBJECT);
97:       assertEquals(52, Node.LENGTH);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(57, Node.LAST_PROP);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(53, Node.INPUT_ID);
108:       assertEquals(46, Node.IS_NAMESPACE);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(37, Node.OPT_ARG_NAME);
117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       
125:       node0.removeProp(101);
126:       assertFalse(node0.isComma());
127:       assertFalse(node0.isThis());
128:       assertFalse(node0.isNot());
129:       assertFalse(node0.isThrow());
130:       assertFalse(node0.isObjectLit());
131:       assertFalse(node0.isScript());
132:       assertEquals(887, node0.getCharno());
133:       assertFalse(node0.isGetProp());
134:       assertFalse(node0.isSwitch());
135:       assertEquals(3634039, node0.getSourcePosition());
136:       assertFalse(node0.isLabelName());
137:       assertFalse(node0.isAnd());
138:       assertFalse(node0.isFalse());
139:       assertFalse(node0.isCast());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isOr());
142:       assertFalse(node0.isLabel());
143:       assertFalse(node0.isTypeOf());
144:       assertFalse(node0.isDec());
145:       assertFalse(node0.hasChildren());
146:       assertFalse(node0.isReturn());
147:       assertFalse(node0.isDo());
148:       assertFalse(node0.isEmpty());
149:       assertEquals(887, node0.getType());
150:       assertFalse(node0.isWhile());
151:       assertFalse(node0.isString());
152:       assertFalse(node0.isAdd());
153:       assertFalse(node0.isVoid());
154:       assertFalse(node0.isTrue());
155:       assertFalse(node0.isName());
156:       assertFalse(node0.isAssign());
157:       assertFalse(node0.isDelProp());
158:       assertFalse(node0.isCall());
159:       assertFalse(node0.isBreak());
160:       assertFalse(node0.isExprResult());
161:       assertFalse(node0.isGetElem());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isNull());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isSetterDef());
167:       assertFalse(node0.isNew());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isVar());
170:       assertFalse(node0.isDebugger());
171:       assertFalse(node0.isStringKey());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isArrayLit());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isNE());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isFor());
178:       assertEquals(887, node0.getLineno());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isNumber());
181:       assertFalse(node0.hasOneChild());
182:       assertFalse(node0.isInc());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.isRegExp());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isIf());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isWith());
190:       assertFalse(node0.isCatch());
191:       assertFalse(node0.isInstanceOf());
192:       assertEquals(55, Node.INFERRED_FUNCTION);
193:       assertEquals(4095, Node.COLUMN_MASK);
194:       assertEquals(8, Node.FLAG_NO_THROWS);
195:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(40, Node.ORIGINALNAME_PROP);
200:       assertEquals(57, Node.REFLECTED_OBJECT);
201:       assertEquals(52, Node.LENGTH);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(46, Node.IS_NAMESPACE);
213:       assertEquals(12, Node.COLUMN_BITS);
214:       assertEquals(32, Node.INCRDECR_PROP);
215:       assertEquals(2, Node.POST_FLAG);
216:       assertEquals(30, Node.VAR_ARGS_NAME);
217:       assertEquals(51, Node.STATIC_SOURCE_FILE);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
228:       
229:       node0.setSourceEncodedPositionForTree(887);
230:       assertFalse(node0.isComma());
231:       assertFalse(node0.isThis());
232:       assertFalse(node0.isNot());
233:       assertFalse(node0.isThrow());
234:       assertFalse(node0.isObjectLit());
235:       assertFalse(node0.isScript());
236:       assertEquals(887, node0.getCharno());
237:       assertFalse(node0.isGetProp());
238:       assertFalse(node0.isSwitch());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isAnd());
241:       assertFalse(node0.isFalse());
242:       assertFalse(node0.isCast());
243:       assertFalse(node0.isAssignAdd());
244:       assertFalse(node0.isOr());
245:       assertFalse(node0.isLabel());
246:       assertFalse(node0.isTypeOf());
247:       assertFalse(node0.isDec());
248:       assertFalse(node0.hasChildren());
249:       assertFalse(node0.isReturn());
250:       assertFalse(node0.isDo());
251:       assertFalse(node0.isEmpty());
252:       assertEquals(887, node0.getType());
253:       assertFalse(node0.isWhile());
254:       assertFalse(node0.isString());
255:       assertEquals(887, node0.getSourcePosition());
256:       assertFalse(node0.isAdd());
257:       assertFalse(node0.isVoid());
258:       assertFalse(node0.isTrue());
259:       assertFalse(node0.isName());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isDelProp());
262:       assertFalse(node0.isCall());
263:       assertFalse(node0.isBreak());
264:       assertFalse(node0.isExprResult());
265:       assertFalse(node0.isGetElem());
266:       assertEquals(0, node0.getLineno());
267:       assertEquals(0, node0.getChildCount());
268:       assertFalse(node0.isNull());
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isDefaultCase());
271:       assertFalse(node0.isSetterDef());
272:       assertFalse(node0.isNew());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isVar());
275:       assertFalse(node0.isDebugger());
276:       assertFalse(node0.isStringKey());
277:       assertFalse(node0.isContinue());
278:       assertFalse(node0.isArrayLit());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isNE());
281:       assertFalse(node0.isCase());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isGetterDef());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isInc());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.isBlock());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.hasMoreThanOneChild());
293:       assertFalse(node0.isWith());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isInstanceOf());
296:       assertEquals(55, Node.INFERRED_FUNCTION);
297:       assertEquals(4095, Node.COLUMN_MASK);
298:       assertEquals(8, Node.FLAG_NO_THROWS);
299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
301:       assertEquals(43, Node.IS_CONSTANT_NAME);
302:       assertEquals(48, Node.DIRECTIVES);
303:       assertEquals(40, Node.ORIGINALNAME_PROP);
304:       assertEquals(57, Node.REFLECTED_OBJECT);
305:       assertEquals(52, Node.LENGTH);
306:       assertEquals(36, Node.QUOTED_PROP);
307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(53, Node.INPUT_ID);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(32, Node.INCRDECR_PROP);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(51, Node.STATIC_SOURCE_FILE);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(37, Node.OPT_ARG_NAME);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
327:       assertEquals(54, Node.SLASH_V);
328:       assertEquals(50, Node.FREE_CALL);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
332:       
333:       Node node1 = new Node(101, node0, node0, node0);
334:       assertFalse(node0.isComma());
335:       assertFalse(node0.isThis());
336:       assertFalse(node0.isNot());
337:       assertFalse(node0.isThrow());
338:       assertFalse(node0.isObjectLit());
339:       assertFalse(node0.isScript());
340:       assertEquals(887, node0.getCharno());
341:       assertFalse(node0.isGetProp());
342:       assertFalse(node0.isSwitch());
343:       assertFalse(node0.isLabelName());
344:       assertFalse(node0.isAnd());
345:       assertFalse(node0.isFalse());
346:       assertFalse(node0.isCast());
347:       assertFalse(node0.isAssignAdd());
348:       assertFalse(node0.isOr());
349:       assertFalse(node0.isLabel());
350:       assertFalse(node0.isTypeOf());
351:       assertFalse(node0.isDec());
352:       assertFalse(node0.hasChildren());
353:       assertFalse(node0.isReturn());
354:       assertFalse(node0.isDo());
355:       assertFalse(node0.isEmpty());
356:       assertEquals(887, node0.getType());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.isString());
359:       assertEquals(887, node0.getSourcePosition());
360:       assertFalse(node0.isAdd());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isTrue());
363:       assertFalse(node0.isName());
364:       assertFalse(node0.isAssign());
365:       assertFalse(node0.isDelProp());
366:       assertFalse(node0.isCall());
367:       assertFalse(node0.isBreak());
368:       assertFalse(node0.isExprResult());
369:       assertFalse(node0.isGetElem());
370:       assertEquals(0, node0.getLineno());
371:       assertEquals(0, node0.getChildCount());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isParamList());
374:       assertFalse(node0.isDefaultCase());
375:       assertFalse(node0.isSetterDef());
376:       assertFalse(node0.isNew());
377:       assertFalse(node0.isFunction());
378:       assertFalse(node0.isVar());
379:       assertFalse(node0.isDebugger());
380:       assertFalse(node0.isStringKey());
381:       assertFalse(node0.isContinue());
382:       assertFalse(node0.isArrayLit());
383:       assertFalse(node0.isIn());
384:       assertFalse(node0.isNE());
385:       assertFalse(node0.isCase());
386:       assertFalse(node0.isFor());
387:       assertFalse(node0.isGetterDef());
388:       assertFalse(node0.isNumber());
389:       assertFalse(node0.hasOneChild());
390:       assertFalse(node0.isInc());
391:       assertFalse(node0.isTry());
392:       assertFalse(node0.isRegExp());
393:       assertFalse(node0.isHook());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isIf());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isWith());
398:       assertFalse(node0.isCatch());
399:       assertFalse(node0.isInstanceOf());
400:       assertFalse(node1.isName());
401:       assertFalse(node1.isSetterDef());
402:       assertFalse(node1.isCall());
403:       assertFalse(node1.isAdd());
404:       assertFalse(node1.isBlock());
405:       assertFalse(node1.isNew());
406:       assertFalse(node1.isVar());
407:       assertFalse(node1.isWhile());
408:       assertTrue(node1.isAnd());
409:       assertFalse(node1.isFunction());
410:       assertFalse(node1.isContinue());
411:       assertFalse(node1.isDebugger());
412:       assertFalse(node1.isArrayLit());
413:       assertFalse(node1.isStringKey());
414:       assertFalse(node1.isParamList());
415:       assertFalse(node1.isGetterDef());
416:       assertFalse(node1.isFor());
417:       assertFalse(node1.isCast());
418:       assertFalse(node1.isNumber());
419:       assertFalse(node1.isTry());
420:       assertEquals(1, node1.getChildCount());
421:       assertFalse(node1.isWith());
422:       assertEquals(101, node1.getType());
423:       assertFalse(node1.hasMoreThanOneChild());
424:       assertFalse(node1.isInc());
425:       assertFalse(node1.isCatch());
426:       assertFalse(node1.isRegExp());
427:       assertFalse(node1.isIn());
428:       assertFalse(node1.isInstanceOf());
429:       assertTrue(node1.hasChildren());
430:       assertEquals((-1), node1.getLineno());
431:       assertFalse(node1.isNE());
432:       assertFalse(node1.isIf());
433:       assertFalse(node1.isBreak());
434:       assertFalse(node1.isComma());
435:       assertFalse(node1.isFalse());
436:       assertFalse(node1.isGetProp());
437:       assertFalse(node1.isHook());
438:       assertFalse(node1.isThis());
439:       assertFalse(node1.isThrow());
440:       assertFalse(node1.isNot());
441:       assertFalse(node1.isCase());
442:       assertFalse(node1.isObjectLit());
443:       assertFalse(node1.isScript());
444:       assertFalse(node1.isString());
445:       assertEquals((-1), node1.getCharno());
446:       assertFalse(node1.isSwitch());
447:       assertFalse(node1.isLabelName());
448:       assertFalse(node1.isAssign());
449:       assertTrue(node1.hasOneChild());
450:       assertFalse(node1.isDelProp());
451:       assertFalse(node1.isEmpty());
452:       assertFalse(node1.isGetElem());
453:       assertFalse(node1.isDec());
454:       assertEquals((-1), node1.getSourcePosition());
455:       assertFalse(node1.isTypeOf());
456:       assertFalse(node1.isAssignAdd());
457:       assertFalse(node1.isReturn());
458:       assertFalse(node1.isLabel());
459:       assertFalse(node1.isDefaultCase());
460:       assertFalse(node1.isDo());
461:       assertFalse(node1.isExprResult());
462:       assertFalse(node1.isOr());
463:       assertFalse(node1.isTrue());
464:       assertFalse(node1.isNull());
465:       assertFalse(node1.isVoid());
466:       assertFalse(node1.equals((Object)node0));
467:       assertNotNull(node1);
468:       assertEquals(55, Node.INFERRED_FUNCTION);
469:       assertEquals(4095, Node.COLUMN_MASK);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
473:       assertEquals(43, Node.IS_CONSTANT_NAME);
474:       assertEquals(48, Node.DIRECTIVES);
475:       assertEquals(40, Node.ORIGINALNAME_PROP);
476:       assertEquals(57, Node.REFLECTED_OBJECT);
477:       assertEquals(52, Node.LENGTH);
478:       assertEquals(36, Node.QUOTED_PROP);
479:       assertEquals(15, Node.NO_SIDE_EFFECTS);
480:       assertEquals(57, Node.LAST_PROP);
481:       assertEquals(47, Node.IS_DISPATCHER);
482:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
483:       assertEquals(29, Node.JSDOC_INFO_PROP);
484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
486:       assertEquals(39, Node.EMPTY_BLOCK);
487:       assertEquals(53, Node.INPUT_ID);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(12, Node.COLUMN_BITS);
490:       assertEquals(32, Node.INCRDECR_PROP);
491:       assertEquals(2, Node.POST_FLAG);
492:       assertEquals(30, Node.VAR_ARGS_NAME);
493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
494:       assertEquals(56, Node.CHANGE_TIME);
495:       assertEquals(49, Node.DIRECT_EVAL);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
499:       assertEquals(54, Node.SLASH_V);
500:       assertEquals(50, Node.FREE_CALL);
501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
502:       assertEquals(1, Node.DECR_FLAG);
503:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
504:       assertEquals(8, Node.FLAG_NO_THROWS);
505:       assertEquals(48, Node.DIRECTIVES);
506:       assertEquals(50, Node.FREE_CALL);
507:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
508:       assertEquals(40, Node.ORIGINALNAME_PROP);
509:       assertEquals(39, Node.EMPTY_BLOCK);
510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
511:       assertEquals(57, Node.REFLECTED_OBJECT);
512:       assertEquals(52, Node.LENGTH);
513:       assertEquals(54, Node.SLASH_V);
514:       assertEquals(43, Node.IS_CONSTANT_NAME);
515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
516:       assertEquals(36, Node.QUOTED_PROP);
517:       assertEquals(57, Node.LAST_PROP);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(53, Node.INPUT_ID);
520:       assertEquals(55, Node.INFERRED_FUNCTION);
521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(47, Node.IS_DISPATCHER);
525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(2, Node.POST_FLAG);
528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
529:       assertEquals(29, Node.JSDOC_INFO_PROP);
530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
532:       assertEquals(46, Node.IS_NAMESPACE);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
536:       assertEquals(4095, Node.COLUMN_MASK);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       
541:       Node node2 = Node.newNumber((-183.41873855730304), 42, 28);
542:       assertFalse(node2.isSetterDef());
543:       assertFalse(node2.isParamList());
544:       assertFalse(node2.isNull());
545:       assertFalse(node2.isName());
546:       assertFalse(node2.isStringKey());
547:       assertFalse(node2.isFunction());
548:       assertFalse(node2.isDebugger());
549:       assertFalse(node2.isAdd());
550:       assertFalse(node2.isDo());
551:       assertFalse(node2.isNew());
552:       assertFalse(node2.isDefaultCase());
553:       assertFalse(node2.isContinue());
554:       assertFalse(node2.isArrayLit());
555:       assertFalse(node2.isVar());
556:       assertFalse(node2.isLabel());
557:       assertEquals(0, node2.getChildCount());
558:       assertFalse(node2.isNE());
559:       assertFalse(node2.isIf());
560:       assertFalse(node2.isLabelName());
561:       assertFalse(node2.isIn());
562:       assertFalse(node2.isGetterDef());
563:       assertEquals(172060, node2.getSourcePosition());
564:       assertFalse(node2.isScript());
565:       assertFalse(node2.isBlock());
566:       assertFalse(node2.isCase());
567:       assertFalse(node2.hasOneChild());
568:       assertFalse(node2.isTry());
569:       assertFalse(node2.hasMoreThanOneChild());
570:       assertFalse(node2.isCatch());
571:       assertFalse(node2.isInstanceOf());
572:       assertFalse(node2.isHook());
573:       assertFalse(node2.isFor());
574:       assertEquals(39, node2.getType());
575:       assertFalse(node2.isWith());
576:       assertFalse(node2.isRegExp());
577:       assertFalse(node2.isComma());
578:       assertFalse(node2.isThis());
579:       assertFalse(node2.isGetProp());
580:       assertFalse(node2.isBreak());
581:       assertFalse(node2.isAnd());
582:       assertFalse(node2.isNot());
583:       assertEquals(28, node2.getCharno());
584:       assertFalse(node2.isObjectLit());
585:       assertFalse(node2.isInc());
586:       assertFalse(node2.isSwitch());
587:       assertFalse(node2.isCast());
588:       assertFalse(node2.isThrow());
589:       assertFalse(node2.isFalse());
590:       assertFalse(node2.isAssignAdd());
591:       assertTrue(node2.isNumber());
592:       assertFalse(node2.isDelProp());
593:       assertFalse(node2.isEmpty());
594:       assertFalse(node2.isOr());
595:       assertFalse(node2.isString());
596:       assertFalse(node2.isTrue());
597:       assertFalse(node2.isExprResult());
598:       assertFalse(node2.isWhile());
599:       assertFalse(node2.isVoid());
600:       assertFalse(node2.isGetElem());
601:       assertFalse(node2.isCall());
602:       assertEquals(42, node2.getLineno());
603:       assertFalse(node2.isReturn());
604:       assertFalse(node2.isAssign());
605:       assertFalse(node2.hasChildren());
606:       assertFalse(node2.isDec());
607:       assertFalse(node2.isTypeOf());
608:       assertFalse(node2.equals((Object)node0));
609:       assertFalse(node2.equals((Object)node1));
610:       assertNotNull(node2);
611:       assertEquals(48, Node.DIRECTIVES);
612:       assertEquals(39, Node.EMPTY_BLOCK);
613:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
616:       assertEquals(4095, Node.COLUMN_MASK);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(57, Node.REFLECTED_OBJECT);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(57, Node.LAST_PROP);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
624:       assertEquals(36, Node.QUOTED_PROP);
625:       assertEquals(55, Node.INFERRED_FUNCTION);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(8, Node.FLAG_NO_THROWS);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(37, Node.OPT_ARG_NAME);
630:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
631:       assertEquals(56, Node.CHANGE_TIME);
632:       assertEquals(12, Node.COLUMN_BITS);
633:       assertEquals(32, Node.INCRDECR_PROP);
634:       assertEquals(46, Node.IS_NAMESPACE);
635:       assertEquals(30, Node.VAR_ARGS_NAME);
636:       assertEquals(49, Node.DIRECT_EVAL);
637:       assertEquals(47, Node.IS_DISPATCHER);
638:       assertEquals(2, Node.POST_FLAG);
639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
641:       assertEquals(54, Node.SLASH_V);
642:       assertEquals(43, Node.IS_CONSTANT_NAME);
643:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
644:       assertEquals(1, Node.DECR_FLAG);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       
648:       boolean boolean0 = node1.isEquivalentTo(node0);
649:       assertFalse(node0.isComma());
650:       assertFalse(node0.isThis());
651:       assertFalse(node0.isNot());
652:       assertFalse(node0.isThrow());
653:       assertFalse(node0.isObjectLit());
654:       assertFalse(node0.isScript());
655:       assertEquals(887, node0.getCharno());
656:       assertFalse(node0.isGetProp());
657:       assertFalse(node0.isSwitch());
658:       assertFalse(node0.isLabelName());
659:       assertFalse(node0.isAnd());
660:       assertFalse(node0.isFalse());
661:       assertFalse(node0.isCast());
662:       assertFalse(node0.isAssignAdd());
663:       assertFalse(node0.isOr());
664:       assertFalse(node0.isLabel());
665:       assertFalse(node0.isTypeOf());
666:       assertFalse(node0.isDec());
667:       assertFalse(node0.hasChildren());
668:       assertFalse(node0.isReturn());
669:       assertFalse(node0.isDo());
670:       assertFalse(node0.isEmpty());
671:       assertEquals(887, node0.getType());
672:       assertFalse(node0.isWhile());
673:       assertFalse(node0.isString());
674:       assertEquals(887, node0.getSourcePosition());
675:       assertFalse(node0.isAdd());
676:       assertFalse(node0.isVoid());
677:       assertFalse(node0.isTrue());
678:       assertFalse(node0.isName());
679:       assertFalse(node0.isAssign());
680:       assertFalse(node0.isDelProp());
681:       assertFalse(node0.isCall());
682:       assertFalse(node0.isBreak());
683:       assertFalse(node0.isExprResult());
684:       assertFalse(node0.isGetElem());
685:       assertEquals(0, node0.getLineno());
686:       assertEquals(0, node0.getChildCount());
687:       assertFalse(node0.isNull());
688:       assertFalse(node0.isParamList());
689:       assertFalse(node0.isDefaultCase());
690:       assertFalse(node0.isSetterDef());
691:       assertFalse(node0.isNew());
692:       assertFalse(node0.isFunction());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isDebugger());
695:       assertFalse(node0.isStringKey());
696:       assertFalse(node0.isContinue());
697:       assertFalse(node0.isArrayLit());
698:       assertFalse(node0.isIn());
699:       assertFalse(node0.isNE());
700:       assertFalse(node0.isCase());
701:       assertFalse(node0.isFor());
702:       assertFalse(node0.isGetterDef());
703:       assertFalse(node0.isNumber());
704:       assertFalse(node0.hasOneChild());
705:       assertFalse(node0.isInc());
706:       assertFalse(node0.isTry());
707:       assertFalse(node0.isRegExp());
708:       assertFalse(node0.isHook());
709:       assertFalse(node0.isBlock());
710:       assertFalse(node0.isIf());
711:       assertFalse(node0.hasMoreThanOneChild());
712:       assertFalse(node0.isWith());
713:       assertFalse(node0.isCatch());
714:       assertFalse(node0.isInstanceOf());
715:       assertFalse(node1.isName());
716:       assertFalse(node1.isSetterDef());
717:       assertFalse(node1.isCall());
718:       assertFalse(node1.isAdd());
719:       assertFalse(node1.isBlock());
720:       assertFalse(node1.isNew());
721:       assertFalse(node1.isVar());
722:       assertFalse(node1.isWhile());
723:       assertTrue(node1.isAnd());
724:       assertFalse(node1.isFunction());
725:       assertFalse(node1.isContinue());
726:       assertFalse(node1.isDebugger());
727:       assertFalse(node1.isArrayLit());
728:       assertFalse(node1.isStringKey());
729:       assertFalse(node1.isParamList());
730:       assertFalse(node1.isGetterDef());
731:       assertFalse(node1.isFor());
732:       assertFalse(node1.isCast());
733:       assertFalse(node1.isNumber());
734:       assertFalse(node1.isTry());
735:       assertEquals(1, node1.getChildCount());
736:       assertFalse(node1.isWith());
737:       assertEquals(101, node1.getType());
738:       assertFalse(node1.hasMoreThanOneChild());
739:       assertFalse(node1.isInc());
740:       assertFalse(node1.isCatch());
741:       assertFalse(node1.isRegExp());
742:       assertFalse(node1.isIn());
743:       assertFalse(node1.isInstanceOf());
744:       assertTrue(node1.hasChildren());
745:       assertEquals((-1), node1.getLineno());
746:       assertFalse(node1.isNE());
747:       assertFalse(node1.isIf());
748:       assertFalse(node1.isBreak());
749:       assertFalse(node1.isComma());
750:       assertFalse(node1.isFalse());
751:       assertFalse(node1.isGetProp());
752:       assertFalse(node1.isHook());
753:       assertFalse(node1.isThis());
754:       assertFalse(node1.isThrow());
755:       assertFalse(node1.isNot());
756:       assertFalse(node1.isCase());
757:       assertFalse(node1.isObjectLit());
758:       assertFalse(node1.isScript());
759:       assertFalse(node1.isString());
760:       assertEquals((-1), node1.getCharno());
761:       assertFalse(node1.isSwitch());
762:       assertFalse(node1.isLabelName());
763:       assertFalse(node1.isAssign());
764:       assertTrue(node1.hasOneChild());
765:       assertFalse(node1.isDelProp());
766:       assertFalse(node1.isEmpty());
767:       assertFalse(node1.isGetElem());
768:       assertFalse(node1.isDec());
769:       assertEquals((-1), node1.getSourcePosition());
770:       assertFalse(node1.isTypeOf());
771:       assertFalse(node1.isAssignAdd());
772:       assertFalse(node1.isReturn());
773:       assertFalse(node1.isLabel());
774:       assertFalse(node1.isDefaultCase());
775:       assertFalse(node1.isDo());
776:       assertFalse(node1.isExprResult());
777:       assertFalse(node1.isOr());
778:       assertFalse(node1.isTrue());
779:       assertFalse(node1.isNull());
780:       assertFalse(node1.isVoid());
781:       assertFalse(node0.equals((Object)node1));
782:       assertFalse(node0.equals((Object)node2));
783:       assertFalse(node1.equals((Object)node2));
784:       assertFalse(node1.equals((Object)node0));
785:       assertFalse(boolean0);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(4095, Node.COLUMN_MASK);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
790:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
791:       assertEquals(43, Node.IS_CONSTANT_NAME);
792:       assertEquals(48, Node.DIRECTIVES);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(57, Node.REFLECTED_OBJECT);
795:       assertEquals(52, Node.LENGTH);
796:       assertEquals(36, Node.QUOTED_PROP);
797:       assertEquals(15, Node.NO_SIDE_EFFECTS);
798:       assertEquals(57, Node.LAST_PROP);
799:       assertEquals(47, Node.IS_DISPATCHER);
800:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
801:       assertEquals(29, Node.JSDOC_INFO_PROP);
802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
803:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
804:       assertEquals(39, Node.EMPTY_BLOCK);
805:       assertEquals(53, Node.INPUT_ID);
806:       assertEquals(46, Node.IS_NAMESPACE);
807:       assertEquals(12, Node.COLUMN_BITS);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(2, Node.POST_FLAG);
810:       assertEquals(30, Node.VAR_ARGS_NAME);
811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
812:       assertEquals(56, Node.CHANGE_TIME);
813:       assertEquals(49, Node.DIRECT_EVAL);
814:       assertEquals(37, Node.OPT_ARG_NAME);
815:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
816:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
817:       assertEquals(54, Node.SLASH_V);
818:       assertEquals(50, Node.FREE_CALL);
819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
820:       assertEquals(1, Node.DECR_FLAG);
821:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
822:       assertEquals(8, Node.FLAG_NO_THROWS);
823:       assertEquals(48, Node.DIRECTIVES);
824:       assertEquals(50, Node.FREE_CALL);
825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
826:       assertEquals(40, Node.ORIGINALNAME_PROP);
827:       assertEquals(39, Node.EMPTY_BLOCK);
828:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
829:       assertEquals(57, Node.REFLECTED_OBJECT);
830:       assertEquals(52, Node.LENGTH);
831:       assertEquals(54, Node.SLASH_V);
832:       assertEquals(43, Node.IS_CONSTANT_NAME);
833:       assertEquals(15, Node.NO_SIDE_EFFECTS);
834:       assertEquals(36, Node.QUOTED_PROP);
835:       assertEquals(57, Node.LAST_PROP);
836:       assertEquals(30, Node.VAR_ARGS_NAME);
837:       assertEquals(53, Node.INPUT_ID);
838:       assertEquals(55, Node.INFERRED_FUNCTION);
839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
840:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
841:       assertEquals(56, Node.CHANGE_TIME);
842:       assertEquals(47, Node.IS_DISPATCHER);
843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
844:       assertEquals(37, Node.OPT_ARG_NAME);
845:       assertEquals(2, Node.POST_FLAG);
846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
847:       assertEquals(29, Node.JSDOC_INFO_PROP);
848:       assertEquals(51, Node.STATIC_SOURCE_FILE);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(46, Node.IS_NAMESPACE);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(1, Node.DECR_FLAG);
853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
854:       assertEquals(4095, Node.COLUMN_MASK);
855:       assertEquals(32, Node.INCRDECR_PROP);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       assertNotSame(node0, node1);
859:       assertNotSame(node1, node0);
860:       
861:       Node node3 = Node.newString("");
862:       assertFalse(node3.isNull());
863:       assertFalse(node3.isSetterDef());
864:       assertFalse(node3.isName());
865:       assertFalse(node3.isStringKey());
866:       assertFalse(node3.isParamList());
867:       assertFalse(node3.isAdd());
868:       assertFalse(node3.isDebugger());
869:       assertFalse(node3.isNew());
870:       assertEquals(40, node3.getType());
871:       assertFalse(node3.isDo());
872:       assertFalse(node3.isDefaultCase());
873:       assertFalse(node3.isArrayLit());
874:       assertFalse(node3.isVar());
875:       assertEquals(0, node3.getChildCount());
876:       assertFalse(node3.isLabel());
877:       assertFalse(node3.isFunction());
878:       assertFalse(node3.isContinue());
879:       assertFalse(node3.isNumber());
880:       assertFalse(node3.isNE());
881:       assertFalse(node3.isGetterDef());
882:       assertFalse(node3.isFor());
883:       assertFalse(node3.isLabelName());
884:       assertFalse(node3.isIf());
885:       assertFalse(node3.hasOneChild());
886:       assertFalse(node3.isIn());
887:       assertFalse(node3.isScript());
888:       assertFalse(node3.isRegExp());
889:       assertFalse(node3.isCase());
890:       assertTrue(node3.isString());
891:       assertFalse(node3.isBlock());
892:       assertFalse(node3.isTry());
893:       assertFalse(node3.isInstanceOf());
894:       assertFalse(node3.isHook());
895:       assertFalse(node3.isCatch());
896:       assertEquals((-1), node3.getLineno());
897:       assertFalse(node3.hasMoreThanOneChild());
898:       assertFalse(node3.isWith());
899:       assertFalse(node3.isComma());
900:       assertFalse(node3.isThis());
901:       assertFalse(node3.isGetProp());
902:       assertFalse(node3.isBreak());
903:       assertFalse(node3.isThrow());
904:       assertFalse(node3.isNot());
905:       assertFalse(node3.isObjectLit());
906:       assertFalse(node3.isInc());
907:       assertEquals((-1), node3.getCharno());
908:       assertFalse(node3.isAnd());
909:       assertFalse(node3.isSwitch());
910:       assertFalse(node3.isCast());
911:       assertFalse(node3.isFalse());
912:       assertFalse(node3.isTypeOf());
913:       assertEquals((-1), node3.getSourcePosition());
914:       assertFalse(node3.isDec());
915:       assertFalse(node3.hasChildren());
916:       assertFalse(node3.isDelProp());
917:       assertFalse(node3.isAssignAdd());
918:       assertFalse(node3.isOr());
919:       assertFalse(node3.isEmpty());
920:       assertFalse(node3.isTrue());
921:       assertFalse(node3.isExprResult());
922:       assertFalse(node3.isVoid());
923:       assertFalse(node3.isWhile());
924:       assertFalse(node3.isCall());
925:       assertFalse(node3.isReturn());
926:       assertFalse(node3.isGetElem());
927:       assertFalse(node3.isAssign());
928:       assertFalse(node3.equals((Object)node0));
929:       assertFalse(node3.equals((Object)node2));
930:       assertFalse(node3.equals((Object)node1));
931:       assertNotNull(node3);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(39, Node.EMPTY_BLOCK);
934:       assertEquals(48, Node.DIRECTIVES);
935:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
936:       assertEquals(40, Node.ORIGINALNAME_PROP);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
940:       assertEquals(36, Node.QUOTED_PROP);
941:       assertEquals(57, Node.LAST_PROP);
942:       assertEquals(57, Node.REFLECTED_OBJECT);
943:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
945:       assertEquals(52, Node.LENGTH);
946:       assertEquals(15, Node.NO_SIDE_EFFECTS);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(53, Node.INPUT_ID);
949:       assertEquals(55, Node.INFERRED_FUNCTION);
950:       assertEquals(37, Node.OPT_ARG_NAME);
951:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(32, Node.INCRDECR_PROP);
954:       assertEquals(46, Node.IS_NAMESPACE);
955:       assertEquals(47, Node.IS_DISPATCHER);
956:       assertEquals(12, Node.COLUMN_BITS);
957:       assertEquals(56, Node.CHANGE_TIME);
958:       assertEquals(49, Node.DIRECT_EVAL);
959:       assertEquals(30, Node.VAR_ARGS_NAME);
960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
963:       assertEquals(43, Node.IS_CONSTANT_NAME);
964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
965:       assertEquals(50, Node.FREE_CALL);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
968:       
969:       boolean boolean1 = node0.isCall();
970:       assertFalse(node0.isComma());
971:       assertFalse(node0.isThis());
972:       assertFalse(node0.isNot());
973:       assertFalse(node0.isThrow());
974:       assertFalse(node0.isObjectLit());
975:       assertFalse(node0.isScript());
976:       assertEquals(887, node0.getCharno());
977:       assertFalse(node0.isGetProp());
978:       assertFalse(node0.isSwitch());
979:       assertFalse(node0.isLabelName());
980:       assertFalse(node0.isAnd());
981:       assertFalse(node0.isFalse());
982:       assertFalse(node0.isCast());
983:       assertFalse(node0.isAssignAdd());
984:       assertFalse(node0.isOr());
985:       assertFalse(node0.isLabel());
986:       assertFalse(node0.isTypeOf());
987:       assertFalse(node0.isDec());
988:       assertFalse(node0.hasChildren());
989:       assertFalse(node0.isReturn());
990:       assertFalse(node0.isDo());
991:       assertFalse(node0.isEmpty());
992:       assertEquals(887, node0.getType());
993:       assertFalse(node0.isWhile());
994:       assertFalse(node0.isString());
995:       assertEquals(887, node0.getSourcePosition());
996:       assertFalse(node0.isAdd());
997:       assertFalse(node0.isVoid());
998:       assertFalse(node0.isTrue());
999:       assertFalse(node0.isName());
1000:       assertFalse(node0.isAssign());
1001:       assertFalse(node0.isDelProp());
1002:       assertFalse(node0.isCall());
1003:       assertFalse(node0.isBreak());
1004:       assertFalse(node0.isExprResult());
1005:       assertFalse(node0.isGetElem());
1006:       assertEquals(0, node0.getLineno());
1007:       assertEquals(0, node0.getChildCount());
1008:       assertFalse(node0.isNull());
1009:       assertFalse(node0.isParamList());
1010:       assertFalse(node0.isDefaultCase());
1011:       assertFalse(node0.isSetterDef());
1012:       assertFalse(node0.isNew());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isVar());
1015:       assertFalse(node0.isDebugger());
1016:       assertFalse(node0.isStringKey());
1017:       assertFalse(node0.isContinue());
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isIn());
1020:       assertFalse(node0.isNE());
1021:       assertFalse(node0.isCase());
1022:       assertFalse(node0.isFor());
1023:       assertFalse(node0.isGetterDef());
1024:       assertFalse(node0.isNumber());
1025:       assertFalse(node0.hasOneChild());
1026:       assertFalse(node0.isInc());
1027:       assertFalse(node0.isTry());
1028:       assertFalse(node0.isRegExp());
1029:       assertFalse(node0.isHook());
1030:       assertFalse(node0.isBlock());
1031:       assertFalse(node0.isIf());
1032:       assertFalse(node0.hasMoreThanOneChild());
1033:       assertFalse(node0.isWith());
1034:       assertFalse(node0.isCatch());
1035:       assertFalse(node0.isInstanceOf());
1036:       assertFalse(node0.equals((Object)node1));
1037:       assertFalse(node0.equals((Object)node3));
1038:       assertFalse(node0.equals((Object)node2));
1039:       assertTrue(boolean1 == boolean0);
1040:       assertFalse(boolean1);
1041:       assertEquals(55, Node.INFERRED_FUNCTION);
1042:       assertEquals(4095, Node.COLUMN_MASK);
1043:       assertEquals(8, Node.FLAG_NO_THROWS);
1044:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1045:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1046:       assertEquals(43, Node.IS_CONSTANT_NAME);
1047:       assertEquals(48, Node.DIRECTIVES);
1048:       assertEquals(40, Node.ORIGINALNAME_PROP);
1049:       assertEquals(57, Node.REFLECTED_OBJECT);
1050:       assertEquals(52, Node.LENGTH);
1051:       assertEquals(36, Node.QUOTED_PROP);
1052:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1053:       assertEquals(57, Node.LAST_PROP);
1054:       assertEquals(47, Node.IS_DISPATCHER);
1055:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1056:       assertEquals(29, Node.JSDOC_INFO_PROP);
1057:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1058:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1059:       assertEquals(39, Node.EMPTY_BLOCK);
1060:       assertEquals(53, Node.INPUT_ID);
1061:       assertEquals(46, Node.IS_NAMESPACE);
1062:       assertEquals(12, Node.COLUMN_BITS);
1063:       assertEquals(32, Node.INCRDECR_PROP);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(30, Node.VAR_ARGS_NAME);
1066:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1067:       assertEquals(56, Node.CHANGE_TIME);
1068:       assertEquals(49, Node.DIRECT_EVAL);
1069:       assertEquals(37, Node.OPT_ARG_NAME);
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1072:       assertEquals(54, Node.SLASH_V);
1073:       assertEquals(50, Node.FREE_CALL);
1074:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1075:       assertEquals(1, Node.DECR_FLAG);
1076:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1077:       assertNotSame(node0, node1);
1078:       
1079:       node1.setCharno(2);
1080:       assertFalse(node0.isComma());
1081:       assertFalse(node0.isThis());
1082:       assertFalse(node0.isNot());
1083:       assertFalse(node0.isThrow());
1084:       assertFalse(node0.isObjectLit());
1085:       assertFalse(node0.isScript());
1086:       assertEquals(887, node0.getCharno());
1087:       assertFalse(node0.isGetProp());
1088:       assertFalse(node0.isSwitch());
1089:       assertFalse(node0.isLabelName());
1090:       assertFalse(node0.isAnd());
1091:       assertFalse(node0.isFalse());
1092:       assertFalse(node0.isCast());
1093:       assertFalse(node0.isAssignAdd());
1094:       assertFalse(node0.isOr());
1095:       assertFalse(node0.isLabel());
1096:       assertFalse(node0.isTypeOf());
1097:       assertFalse(node0.isDec());
1098:       assertFalse(node0.hasChildren());
1099:       assertFalse(node0.isReturn());
1100:       assertFalse(node0.isDo());
1101:       assertFalse(node0.isEmpty());
1102:       assertEquals(887, node0.getType());
1103:       assertFalse(node0.isWhile());
1104:       assertFalse(node0.isString());
1105:       assertEquals(887, node0.getSourcePosition());
1106:       assertFalse(node0.isAdd());
1107:       assertFalse(node0.isVoid());
1108:       assertFalse(node0.isTrue());
1109:       assertFalse(node0.isName());
1110:       assertFalse(node0.isAssign());
1111:       assertFalse(node0.isDelProp());
1112:       assertFalse(node0.isCall());
1113:       assertFalse(node0.isBreak());
1114:       assertFalse(node0.isExprResult());
1115:       assertFalse(node0.isGetElem());
1116:       assertEquals(0, node0.getLineno());
1117:       assertEquals(0, node0.getChildCount());
1118:       assertFalse(node0.isNull());
1119:       assertFalse(node0.isParamList());
1120:       assertFalse(node0.isDefaultCase());
1121:       assertFalse(node0.isSetterDef());
1122:       assertFalse(node0.isNew());
1123:       assertFalse(node0.isFunction());
1124:       assertFalse(node0.isVar());
1125:       assertFalse(node0.isDebugger());
1126:       assertFalse(node0.isStringKey());
1127:       assertFalse(node0.isContinue());
1128:       assertFalse(node0.isArrayLit());
1129:       assertFalse(node0.isIn());
1130:       assertFalse(node0.isNE());
1131:       assertFalse(node0.isCase());
1132:       assertFalse(node0.isFor());
1133:       assertFalse(node0.isGetterDef());
1134:       assertFalse(node0.isNumber());
1135:       assertFalse(node0.hasOneChild());
1136:       assertFalse(node0.isInc());
1137:       assertFalse(node0.isTry());
1138:       assertFalse(node0.isRegExp());
1139:       assertFalse(node0.isHook());
1140:       assertFalse(node0.isBlock());
1141:       assertFalse(node0.isIf());
1142:       assertFalse(node0.hasMoreThanOneChild());
1143:       assertFalse(node0.isWith());
1144:       assertFalse(node0.isCatch());
1145:       assertFalse(node0.isInstanceOf());
1146:       assertFalse(node1.isName());
1147:       assertFalse(node1.isSetterDef());
1148:       assertFalse(node1.isCall());
1149:       assertFalse(node1.isAdd());
1150:       assertFalse(node1.isBlock());
1151:       assertFalse(node1.isNew());
1152:       assertFalse(node1.isVar());
1153:       assertFalse(node1.isWhile());
1154:       assertTrue(node1.isAnd());
1155:       assertFalse(node1.isFunction());
1156:       assertFalse(node1.isContinue());
1157:       assertFalse(node1.isDebugger());
1158:       assertFalse(node1.isArrayLit());
1159:       assertFalse(node1.isStringKey());
1160:       assertFalse(node1.isParamList());
1161:       assertFalse(node1.isGetterDef());
1162:       assertFalse(node1.isFor());
1163:       assertFalse(node1.isCast());
1164:       assertFalse(node1.isNumber());
1165:       assertFalse(node1.isTry());
1166:       assertEquals(1, node1.getChildCount());
1167:       assertFalse(node1.isWith());
1168:       assertEquals(101, node1.getType());
1169:       assertFalse(node1.hasMoreThanOneChild());
1170:       assertFalse(node1.isInc());
1171:       assertFalse(node1.isCatch());
1172:       assertFalse(node1.isRegExp());
1173:       assertFalse(node1.isIn());
1174:       assertFalse(node1.isInstanceOf());
1175:       assertTrue(node1.hasChildren());
1176:       assertEquals((-1), node1.getLineno());
1177:       assertFalse(node1.isNE());
1178:       assertFalse(node1.isIf());
1179:       assertFalse(node1.isBreak());
1180:       assertFalse(node1.isComma());
1181:       assertFalse(node1.isFalse());
1182:       assertFalse(node1.isGetProp());
1183:       assertFalse(node1.isHook());
1184:       assertFalse(node1.isThis());
1185:       assertFalse(node1.isThrow());
1186:       assertFalse(node1.isNot());
1187:       assertFalse(node1.isCase());
1188:       assertFalse(node1.isObjectLit());
1189:       assertFalse(node1.isScript());
1190:       assertFalse(node1.isString());
1191:       assertEquals((-1), node1.getCharno());
1192:       assertFalse(node1.isSwitch());
1193:       assertFalse(node1.isLabelName());
1194:       assertFalse(node1.isAssign());
1195:       assertTrue(node1.hasOneChild());
1196:       assertFalse(node1.isDelProp());
1197:       assertFalse(node1.isEmpty());
1198:       assertFalse(node1.isGetElem());
1199:       assertFalse(node1.isDec());
1200:       assertEquals((-1), node1.getSourcePosition());
1201:       assertFalse(node1.isTypeOf());
1202:       assertFalse(node1.isAssignAdd());
1203:       assertFalse(node1.isReturn());
1204:       assertFalse(node1.isLabel());
1205:       assertFalse(node1.isDefaultCase());
1206:       assertFalse(node1.isDo());
1207:       assertFalse(node1.isExprResult());
1208:       assertFalse(node1.isOr());
1209:       assertFalse(node1.isTrue());
1210:       assertFalse(node1.isNull());
1211:       assertFalse(node1.isVoid());
1212:       assertFalse(node0.equals((Object)node1));
1213:       assertFalse(node0.equals((Object)node3));
1214:       assertFalse(node0.equals((Object)node2));
1215:       assertFalse(node1.equals((Object)node2));
1216:       assertFalse(node1.equals((Object)node3));
1217:       assertFalse(node1.equals((Object)node0));
1218:       assertEquals(55, Node.INFERRED_FUNCTION);
1219:       assertEquals(4095, Node.COLUMN_MASK);
1220:       assertEquals(8, Node.FLAG_NO_THROWS);
1221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1223:       assertEquals(43, Node.IS_CONSTANT_NAME);
1224:       assertEquals(48, Node.DIRECTIVES);
1225:       assertEquals(40, Node.ORIGINALNAME_PROP);
1226:       assertEquals(57, Node.REFLECTED_OBJECT);
1227:       assertEquals(52, Node.LENGTH);
1228:       assertEquals(36, Node.QUOTED_PROP);
1229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1230:       assertEquals(57, Node.LAST_PROP);
1231:       assertEquals(47, Node.IS_DISPATCHER);
1232:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1233:       assertEquals(29, Node.JSDOC_INFO_PROP);
1234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1236:       assertEquals(39, Node.EMPTY_BLOCK);
1237:       assertEquals(53, Node.INPUT_ID);
1238:       assertEquals(46, Node.IS_NAMESPACE);
1239:       assertEquals(12, Node.COLUMN_BITS);
1240:       assertEquals(32, Node.INCRDECR_PROP);
1241:       assertEquals(2, Node.POST_FLAG);
1242:       assertEquals(30, Node.VAR_ARGS_NAME);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(56, Node.CHANGE_TIME);
1245:       assertEquals(49, Node.DIRECT_EVAL);
1246:       assertEquals(37, Node.OPT_ARG_NAME);
1247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1249:       assertEquals(54, Node.SLASH_V);
1250:       assertEquals(50, Node.FREE_CALL);
1251:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1252:       assertEquals(1, Node.DECR_FLAG);
1253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1254:       assertEquals(8, Node.FLAG_NO_THROWS);
1255:       assertEquals(48, Node.DIRECTIVES);
1256:       assertEquals(50, Node.FREE_CALL);
1257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1258:       assertEquals(40, Node.ORIGINALNAME_PROP);
1259:       assertEquals(39, Node.EMPTY_BLOCK);
1260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1261:       assertEquals(57, Node.REFLECTED_OBJECT);
1262:       assertEquals(52, Node.LENGTH);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(43, Node.IS_CONSTANT_NAME);
1265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1266:       assertEquals(36, Node.QUOTED_PROP);
1267:       assertEquals(57, Node.LAST_PROP);
1268:       assertEquals(30, Node.VAR_ARGS_NAME);
1269:       assertEquals(53, Node.INPUT_ID);
1270:       assertEquals(55, Node.INFERRED_FUNCTION);
1271:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1273:       assertEquals(56, Node.CHANGE_TIME);
1274:       assertEquals(47, Node.IS_DISPATCHER);
1275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1276:       assertEquals(37, Node.OPT_ARG_NAME);
1277:       assertEquals(2, Node.POST_FLAG);
1278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1279:       assertEquals(29, Node.JSDOC_INFO_PROP);
1280:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1282:       assertEquals(46, Node.IS_NAMESPACE);
1283:       assertEquals(49, Node.DIRECT_EVAL);
1284:       assertEquals(1, Node.DECR_FLAG);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(4095, Node.COLUMN_MASK);
1287:       assertEquals(32, Node.INCRDECR_PROP);
1288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1289:       assertEquals(12, Node.COLUMN_BITS);
1290:       assertNotSame(node0, node1);
1291:       assertNotSame(node1, node0);
1292:       
1293:       Node node4 = node3.useSourceInfoFrom(node2);
1294:       assertFalse(node2.isSetterDef());
1295:       assertFalse(node2.isParamList());
1296:       assertFalse(node2.isNull());
1297:       assertFalse(node2.isName());
1298:       assertFalse(node2.isStringKey());
1299:       assertFalse(node2.isFunction());
1300:       assertFalse(node2.isDebugger());
1301:       assertFalse(node2.isAdd());
1302:       assertFalse(node2.isDo());
1303:       assertFalse(node2.isNew());
1304:       assertFalse(node2.isDefaultCase());
1305:       assertFalse(node2.isContinue());
1306:       assertFalse(node2.isArrayLit());
1307:       assertFalse(node2.isVar());
1308:       assertFalse(node2.isLabel());
1309:       assertEquals(0, node2.getChildCount());
1310:       assertFalse(node2.isNE());
1311:       assertFalse(node2.isIf());
1312:       assertFalse(node2.isLabelName());
1313:       assertFalse(node2.isIn());
1314:       assertFalse(node2.isGetterDef());
1315:       assertEquals(172060, node2.getSourcePosition());
1316:       assertFalse(node2.isScript());
1317:       assertFalse(node2.isBlock());
1318:       assertFalse(node2.isCase());
1319:       assertFalse(node2.hasOneChild());
1320:       assertFalse(node2.isTry());
1321:       assertFalse(node2.hasMoreThanOneChild());
1322:       assertFalse(node2.isCatch());
1323:       assertFalse(node2.isInstanceOf());
1324:       assertFalse(node2.isHook());
1325:       assertFalse(node2.isFor());
1326:       assertEquals(39, node2.getType());
1327:       assertFalse(node2.isWith());
1328:       assertFalse(node2.isRegExp());
1329:       assertFalse(node2.isComma());
1330:       assertFalse(node2.isThis());
1331:       assertFalse(node2.isGetProp());
1332:       assertFalse(node2.isBreak());
1333:       assertFalse(node2.isAnd());
1334:       assertFalse(node2.isNot());
1335:       assertEquals(28, node2.getCharno());
1336:       assertFalse(node2.isObjectLit());
1337:       assertFalse(node2.isInc());
1338:       assertFalse(node2.isSwitch());
1339:       assertFalse(node2.isCast());
1340:       assertFalse(node2.isThrow());
1341:       assertFalse(node2.isFalse());
1342:       assertFalse(node2.isAssignAdd());
1343:       assertTrue(node2.isNumber());
1344:       assertFalse(node2.isDelProp());
1345:       assertFalse(node2.isEmpty());
1346:       assertFalse(node2.isOr());
1347:       assertFalse(node2.isString());
1348:       assertFalse(node2.isTrue());
1349:       assertFalse(node2.isExprResult());
1350:       assertFalse(node2.isWhile());
1351:       assertFalse(node2.isVoid());
1352:       assertFalse(node2.isGetElem());
1353:       assertFalse(node2.isCall());
1354:       assertEquals(42, node2.getLineno());
1355:       assertFalse(node2.isReturn());
1356:       assertFalse(node2.isAssign());
1357:       assertFalse(node2.hasChildren());
1358:       assertFalse(node2.isDec());
1359:       assertFalse(node2.isTypeOf());
1360:       assertFalse(node3.isNull());
1361:       assertFalse(node3.isSetterDef());
1362:       assertFalse(node3.isName());
1363:       assertFalse(node3.isStringKey());
1364:       assertFalse(node3.isParamList());
1365:       assertFalse(node3.isAdd());
1366:       assertFalse(node3.isDebugger());
1367:       assertFalse(node3.isNew());
1368:       assertEquals(40, node3.getType());
1369:       assertFalse(node3.isDo());
1370:       assertFalse(node3.isDefaultCase());
1371:       assertFalse(node3.isArrayLit());
1372:       assertFalse(node3.isVar());
1373:       assertEquals(0, node3.getChildCount());
1374:       assertFalse(node3.isLabel());
1375:       assertFalse(node3.isFunction());
1376:       assertFalse(node3.isContinue());
1377:       assertFalse(node3.isNumber());
1378:       assertFalse(node3.isNE());
1379:       assertFalse(node3.isGetterDef());
1380:       assertFalse(node3.isFor());
1381:       assertFalse(node3.isLabelName());
1382:       assertFalse(node3.isIf());
1383:       assertFalse(node3.hasOneChild());
1384:       assertFalse(node3.isIn());
1385:       assertFalse(node3.isScript());
1386:       assertFalse(node3.isRegExp());
1387:       assertFalse(node3.isCase());
1388:       assertTrue(node3.isString());
1389:       assertFalse(node3.isBlock());
1390:       assertFalse(node3.isTry());
1391:       assertFalse(node3.isInstanceOf());
1392:       assertFalse(node3.isHook());
1393:       assertFalse(node3.isCatch());
1394:       assertEquals(172060, node3.getSourcePosition());
1395:       assertFalse(node3.hasMoreThanOneChild());
1396:       assertFalse(node3.isWith());
1397:       assertFalse(node3.isComma());
1398:       assertFalse(node3.isThis());
1399:       assertFalse(node3.isGetProp());
1400:       assertFalse(node3.isBreak());
1401:       assertFalse(node3.isThrow());
1402:       assertFalse(node3.isNot());
1403:       assertFalse(node3.isObjectLit());
1404:       assertEquals(28, node3.getCharno());
1405:       assertFalse(node3.isInc());
1406:       assertFalse(node3.isAnd());
1407:       assertFalse(node3.isSwitch());
1408:       assertFalse(node3.isCast());
1409:       assertFalse(node3.isFalse());
1410:       assertFalse(node3.isTypeOf());
1411:       assertFalse(node3.isDec());
1412:       assertFalse(node3.hasChildren());
1413:       assertEquals(42, node3.getLineno());
1414:       assertFalse(node3.isDelProp());
1415:       assertFalse(node3.isAssignAdd());
1416:       assertFalse(node3.isOr());
1417:       assertFalse(node3.isEmpty());
1418:       assertFalse(node3.isTrue());
1419:       assertFalse(node3.isExprResult());
1420:       assertFalse(node3.isVoid());
1421:       assertFalse(node3.isWhile());
1422:       assertFalse(node3.isCall());
1423:       assertFalse(node3.isReturn());
1424:       assertFalse(node3.isGetElem());
1425:       assertFalse(node3.isAssign());
1426:       assertFalse(node4.hasOneChild());
1427:       assertFalse(node4.isWith());
1428:       assertFalse(node4.hasChildren());
1429:       assertFalse(node4.isDec());
1430:       assertFalse(node4.isLabelName());
1431:       assertFalse(node4.isTypeOf());
1432:       assertFalse(node4.isAssign());
1433:       assertFalse(node4.isCast());
1434:       assertFalse(node4.isGetElem());
1435:       assertFalse(node4.isInstanceOf());
1436:       assertFalse(node4.isExprResult());
1437:       assertFalse(node4.isAssignAdd());
1438:       assertFalse(node4.isLabel());
1439:       assertFalse(node4.isOr());
1440:       assertFalse(node4.isDo());
1441:       assertFalse(node4.isAdd());
1442:       assertFalse(node4.isThrow());
1443:       assertFalse(node4.isBreak());
1444:       assertFalse(node4.isFalse());
1445:       assertFalse(node4.isName());
1446:       assertFalse(node4.isContinue());
1447:       assertFalse(node4.isCall());
1448:       assertFalse(node4.isReturn());
1449:       assertFalse(node4.isComma());
1450:       assertFalse(node4.isAnd());
1451:       assertFalse(node4.isWhile());
1452:       assertFalse(node4.isObjectLit());
1453:       assertFalse(node4.isNot());
1454:       assertFalse(node4.isGetProp());
1455:       assertFalse(node4.isVoid());
1456:       assertFalse(node4.isTry());
1457:       assertFalse(node4.isDebugger());
1458:       assertFalse(node4.isTrue());
1459:       assertEquals(42, node4.getLineno());
1460:       assertFalse(node4.isFor());
1461:       assertFalse(node4.isIf());
1462:       assertFalse(node4.isDelProp());
1463:       assertFalse(node4.isRegExp());
1464:       assertFalse(node4.isFunction());
1465:       assertEquals(172060, node4.getSourcePosition());
1466:       assertFalse(node4.isCatch());
1467:       assertFalse(node4.isArrayLit());
1468:       assertFalse(node4.isIn());
1469:       assertEquals(0, node4.getChildCount());
1470:       assertEquals(40, node4.getType());
1471:       assertFalse(node4.isNull());
1472:       assertFalse(node4.isNE());
1473:       assertFalse(node4.isDefaultCase());
1474:       assertFalse(node4.isInc());
1475:       assertFalse(node4.isSetterDef());
1476:       assertFalse(node4.isEmpty());
1477:       assertEquals(28, node4.getCharno());
1478:       assertFalse(node4.isNew());
1479:       assertTrue(node4.isString());
1480:       assertFalse(node4.isSwitch());
1481:       assertFalse(node4.isStringKey());
1482:       assertFalse(node4.isHook());
1483:       assertFalse(node4.isBlock());
1484:       assertFalse(node4.isVar());
1485:       assertFalse(node4.hasMoreThanOneChild());
1486:       assertFalse(node4.isParamList());
1487:       assertFalse(node4.isThis());
1488:       assertFalse(node4.isCase());
1489:       assertFalse(node4.isNumber());
1490:       assertFalse(node4.isGetterDef());
1491:       assertFalse(node4.isScript());
1492:       assertFalse(node2.equals((Object)node3));
1493:       assertFalse(node2.equals((Object)node0));
1494:       assertFalse(node2.equals((Object)node1));
1495:       assertFalse(node3.equals((Object)node0));
1496:       assertFalse(node3.equals((Object)node2));
1497:       assertFalse(node3.equals((Object)node1));
1498:       assertFalse(node4.equals((Object)node1));
1499:       assertFalse(node4.equals((Object)node0));
1500:       assertFalse(node4.equals((Object)node2));
1501:       assertNotNull(node4);
1502:       assertEquals(48, Node.DIRECTIVES);
1503:       assertEquals(39, Node.EMPTY_BLOCK);
1504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1505:       assertEquals(40, Node.ORIGINALNAME_PROP);
1506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1507:       assertEquals(4095, Node.COLUMN_MASK);
1508:       assertEquals(53, Node.INPUT_ID);
1509:       assertEquals(57, Node.REFLECTED_OBJECT);
1510:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1511:       assertEquals(57, Node.LAST_PROP);
1512:       assertEquals(29, Node.JSDOC_INFO_PROP);
1513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1515:       assertEquals(36, Node.QUOTED_PROP);
1516:       assertEquals(55, Node.INFERRED_FUNCTION);
1517:       assertEquals(52, Node.LENGTH);
1518:       assertEquals(8, Node.FLAG_NO_THROWS);
1519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1520:       assertEquals(37, Node.OPT_ARG_NAME);
1521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1522:       assertEquals(56, Node.CHANGE_TIME);
1523:       assertEquals(12, Node.COLUMN_BITS);
1524:       assertEquals(32, Node.INCRDECR_PROP);
1525:       assertEquals(46, Node.IS_NAMESPACE);
1526:       assertEquals(30, Node.VAR_ARGS_NAME);
1527:       assertEquals(49, Node.DIRECT_EVAL);
1528:       assertEquals(47, Node.IS_DISPATCHER);
1529:       assertEquals(2, Node.POST_FLAG);
1530:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1532:       assertEquals(54, Node.SLASH_V);
1533:       assertEquals(43, Node.IS_CONSTANT_NAME);
1534:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1535:       assertEquals(1, Node.DECR_FLAG);
1536:       assertEquals(50, Node.FREE_CALL);
1537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1538:       assertEquals(8, Node.FLAG_NO_THROWS);
1539:       assertEquals(39, Node.EMPTY_BLOCK);
1540:       assertEquals(48, Node.DIRECTIVES);
1541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1542:       assertEquals(40, Node.ORIGINALNAME_PROP);
1543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1544:       assertEquals(4095, Node.COLUMN_MASK);
1545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1546:       assertEquals(36, Node.QUOTED_PROP);
1547:       assertEquals(57, Node.LAST_PROP);
1548:       assertEquals(57, Node.REFLECTED_OBJECT);
1549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1550:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1551:       assertEquals(52, Node.LENGTH);
1552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1553:       assertEquals(29, Node.JSDOC_INFO_PROP);
1554:       assertEquals(53, Node.INPUT_ID);
1555:       assertEquals(55, Node.INFERRED_FUNCTION);
1556:       assertEquals(37, Node.OPT_ARG_NAME);
1557:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1558:       assertEquals(2, Node.POST_FLAG);
1559:       assertEquals(32, Node.INCRDECR_PROP);
1560:       assertEquals(46, Node.IS_NAMESPACE);
1561:       assertEquals(47, Node.IS_DISPATCHER);
1562:       assertEquals(12, Node.COLUMN_BITS);
1563:       assertEquals(56, Node.CHANGE_TIME);
1564:       assertEquals(49, Node.DIRECT_EVAL);
1565:       assertEquals(30, Node.VAR_ARGS_NAME);
1566:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1567:       assertEquals(54, Node.SLASH_V);
1568:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1569:       assertEquals(43, Node.IS_CONSTANT_NAME);
1570:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1571:       assertEquals(50, Node.FREE_CALL);
1572:       assertEquals(1, Node.DECR_FLAG);
1573:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1575:       assertEquals(47, Node.IS_DISPATCHER);
1576:       assertEquals(36, Node.QUOTED_PROP);
1577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1578:       assertEquals(53, Node.INPUT_ID);
1579:       assertEquals(29, Node.JSDOC_INFO_PROP);
1580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1582:       assertEquals(12, Node.COLUMN_BITS);
1583:       assertEquals(55, Node.INFERRED_FUNCTION);
1584:       assertEquals(32, Node.INCRDECR_PROP);
1585:       assertEquals(4095, Node.COLUMN_MASK);
1586:       assertEquals(56, Node.CHANGE_TIME);
1587:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1589:       assertEquals(48, Node.DIRECTIVES);
1590:       assertEquals(49, Node.DIRECT_EVAL);
1591:       assertEquals(37, Node.OPT_ARG_NAME);
1592:       assertEquals(57, Node.REFLECTED_OBJECT);
1593:       assertEquals(52, Node.LENGTH);
1594:       assertEquals(50, Node.FREE_CALL);
1595:       assertEquals(54, Node.SLASH_V);
1596:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1598:       assertEquals(8, Node.FLAG_NO_THROWS);
1599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1600:       assertEquals(57, Node.LAST_PROP);
1601:       assertEquals(1, Node.DECR_FLAG);
1602:       assertEquals(39, Node.EMPTY_BLOCK);
1603:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1604:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1605:       assertEquals(46, Node.IS_NAMESPACE);
1606:       assertEquals(30, Node.VAR_ARGS_NAME);
1607:       assertEquals(43, Node.IS_CONSTANT_NAME);
1608:       assertEquals(2, Node.POST_FLAG);
1609:       assertEquals(40, Node.ORIGINALNAME_PROP);
1610:       assertSame(node3, node4);
1611:       assertSame(node4, node3);
1612:       
1613:       Iterable<Node> iterable0 = node2.children();
1614:       assertFalse(node2.isSetterDef());
1615:       assertFalse(node2.isParamList());
1616:       assertFalse(node2.isNull());
1617:       assertFalse(node2.isName());
1618:       assertFalse(node2.isStringKey());
1619:       assertFalse(node2.isFunction());
1620:       assertFalse(node2.isDebugger());
1621:       assertFalse(node2.isAdd());
1622:       assertFalse(node2.isDo());
1623:       assertFalse(node2.isNew());
1624:       assertFalse(node2.isDefaultCase());
1625:       assertFalse(node2.isContinue());
1626:       assertFalse(node2.isArrayLit());
1627:       assertFalse(node2.isVar());
1628:       assertFalse(node2.isLabel());
1629:       assertEquals(0, node2.getChildCount());
1630:       assertFalse(node2.isNE());
1631:       assertFalse(node2.isIf());
1632:       assertFalse(node2.isLabelName());
1633:       assertFalse(node2.isIn());
1634:       assertFalse(node2.isGetterDef());
1635:       assertEquals(172060, node2.getSourcePosition());
1636:       assertFalse(node2.isScript());
1637:       assertFalse(node2.isBlock());
1638:       assertFalse(node2.isCase());
1639:       assertFalse(node2.hasOneChild());
1640:       assertFalse(node2.isTry());
1641:       assertFalse(node2.hasMoreThanOneChild());
1642:       assertFalse(node2.isCatch());
1643:       assertFalse(node2.isInstanceOf());
1644:       assertFalse(node2.isHook());
1645:       assertFalse(node2.isFor());
1646:       assertEquals(39, node2.getType());
1647:       assertFalse(node2.isWith());
1648:       assertFalse(node2.isRegExp());
1649:       assertFalse(node2.isComma());
1650:       assertFalse(node2.isThis());
1651:       assertFalse(node2.isGetProp());
1652:       assertFalse(node2.isBreak());
1653:       assertFalse(node2.isAnd());
1654:       assertFalse(node2.isNot());
1655:       assertEquals(28, node2.getCharno());
1656:       assertFalse(node2.isObjectLit());
1657:       assertFalse(node2.isInc());
1658:       assertFalse(node2.isSwitch());
1659:       assertFalse(node2.isCast());
1660:       assertFalse(node2.isThrow());
1661:       assertFalse(node2.isFalse());
1662:       assertFalse(node2.isAssignAdd());
1663:       assertTrue(node2.isNumber());
1664:       assertFalse(node2.isDelProp());
1665:       assertFalse(node2.isEmpty());
1666:       assertFalse(node2.isOr());
1667:       assertFalse(node2.isString());
1668:       assertFalse(node2.isTrue());
1669:       assertFalse(node2.isExprResult());
1670:       assertFalse(node2.isWhile());
1671:       assertFalse(node2.isVoid());
1672:       assertFalse(node2.isGetElem());
1673:       assertFalse(node2.isCall());
1674:       assertEquals(42, node2.getLineno());
1675:       assertFalse(node2.isReturn());
1676:       assertFalse(node2.isAssign());
1677:       assertFalse(node2.hasChildren());
1678:       assertFalse(node2.isDec());
1679:       assertFalse(node2.isTypeOf());
1680:       assertFalse(node2.equals((Object)node3));
1681:       assertFalse(node2.equals((Object)node4));
1682:       assertFalse(node2.equals((Object)node0));
1683:       assertFalse(node2.equals((Object)node1));
1684:       assertNotNull(iterable0);
1685:       assertFalse(iterable0.contains(node2));
1686:       assertEquals(48, Node.DIRECTIVES);
1687:       assertEquals(39, Node.EMPTY_BLOCK);
1688:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1689:       assertEquals(40, Node.ORIGINALNAME_PROP);
1690:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1691:       assertEquals(4095, Node.COLUMN_MASK);
1692:       assertEquals(53, Node.INPUT_ID);
1693:       assertEquals(57, Node.REFLECTED_OBJECT);
1694:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1695:       assertEquals(57, Node.LAST_PROP);
1696:       assertEquals(29, Node.JSDOC_INFO_PROP);
1697:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1699:       assertEquals(36, Node.QUOTED_PROP);
1700:       assertEquals(55, Node.INFERRED_FUNCTION);
1701:       assertEquals(52, Node.LENGTH);
1702:       assertEquals(8, Node.FLAG_NO_THROWS);
1703:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1704:       assertEquals(37, Node.OPT_ARG_NAME);
1705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1706:       assertEquals(56, Node.CHANGE_TIME);
1707:       assertEquals(12, Node.COLUMN_BITS);
1708:       assertEquals(32, Node.INCRDECR_PROP);
1709:       assertEquals(46, Node.IS_NAMESPACE);
1710:       assertEquals(30, Node.VAR_ARGS_NAME);
1711:       assertEquals(49, Node.DIRECT_EVAL);
1712:       assertEquals(47, Node.IS_DISPATCHER);
1713:       assertEquals(2, Node.POST_FLAG);
1714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1715:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1716:       assertEquals(54, Node.SLASH_V);
1717:       assertEquals(43, Node.IS_CONSTANT_NAME);
1718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1719:       assertEquals(1, Node.DECR_FLAG);
1720:       assertEquals(50, Node.FREE_CALL);
1721:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1722:   }
1723: }
RegularFileObject[/tmp/EvoSuite_121_1628160160573/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:42:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_121_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.common.base.Preconditions",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.base.Objects",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Iterables",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.jstype.NamedType",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.common.collect.Platform"
364:     );
365:   }
366: }

[MASTER] 10:42:40.862 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(887, 887, 887);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(3634039, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals(887, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertNotNull(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.removeProp(101);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(3634039, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals(887, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.setSourceEncodedPositionForTree(887);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node1 = new Node(101, node0, node0, node0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertTrue(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertEquals(101, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node2 = Node.newNumber((-183.41873855730304), 42, 28);
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertEquals(172060, node2.getSourcePosition());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(28, node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isAssignAdd());
assertTrue(node2.isNumber());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertEquals(42, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node1.isEquivalentTo(node0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertTrue(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertEquals(101, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

Node node3 = Node.newString("");
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isAdd());
assertFalse(node3.isDebugger());
assertFalse(node3.isNew());
assertEquals(40, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isIf());
assertFalse(node3.hasOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isScript());
assertFalse(node3.isRegExp());
assertFalse(node3.isCase());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isCatch());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isReturn());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean1 = node0.isCall();
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);

node1.setCharno(2);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertEquals(887, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(887, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertTrue(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertEquals(101, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

Node node4 = node3.useSourceInfoFrom(node2);
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertEquals(172060, node2.getSourcePosition());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(28, node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isAssignAdd());
assertTrue(node2.isNumber());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertEquals(42, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isAdd());
assertFalse(node3.isDebugger());
assertFalse(node3.isNew());
assertEquals(40, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isIf());
assertFalse(node3.hasOneChild());
assertFalse(node3.isIn());
assertFalse(node3.isScript());
assertFalse(node3.isRegExp());
assertFalse(node3.isCase());
assertTrue(node3.isString());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isCatch());
assertEquals(172060, node3.getSourcePosition());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(28, node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals(42, node3.getLineno());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isReturn());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node4.hasOneChild());
assertFalse(node4.isWith());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isLabelName());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isOr());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isThrow());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isAnd());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertFalse(node4.isVoid());
assertFalse(node4.isTry());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertEquals(42, node4.getLineno());
assertFalse(node4.isFor());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertEquals(172060, node4.getSourcePosition());
assertFalse(node4.isCatch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isIn());
assertEquals(0, node4.getChildCount());
assertEquals(40, node4.getType());
assertFalse(node4.isNull());
assertFalse(node4.isNE());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());
assertFalse(node4.isEmpty());
assertEquals(28, node4.getCharno());
assertFalse(node4.isNew());
assertTrue(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isStringKey());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isParamList());
assertFalse(node4.isThis());
assertFalse(node4.isCase());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertNotNull(node4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node3, node4);
assertSame(node4, node3);

Iterable<Node> iterable0 = node2.children();
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertEquals(172060, node2.getSourcePosition());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(28, node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isAssignAdd());
assertTrue(node2.isNumber());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertEquals(42, node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);


[MASTER] 10:42:51.576 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_168_1628160171305/com/google/javascript/rhino/Node_168_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_168_1628160171305/com/google/javascript/rhino/Node_168_tmp__ESTest_scaffolding.java]]
[MASTER] 10:42:51.576 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:42:51.576 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:42:51.577 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2109
[MASTER] 10:42:51.578 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_168_1628160171305/com/google/javascript/rhino/Node_168_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:42:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_168_tmp__ESTest extends Node_168_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("com.google.common.base.Joiner$2");
21:       assertFalse(node0.isRegExp());
22:       assertFalse(node0.isVoid());
23:       assertFalse(node0.isDefaultCase());
24:       assertFalse(node0.isFunction());
25:       assertFalse(node0.isTry());
26:       assertFalse(node0.isArrayLit());
27:       assertFalse(node0.isTrue());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isNull());
30:       assertFalse(node0.isNE());
31:       assertFalse(node0.isDelProp());
32:       assertFalse(node0.isGetterDef());
33:       assertFalse(node0.isIf());
34:       assertFalse(node0.isName());
35:       assertFalse(node0.isCall());
36:       assertFalse(node0.isCatch());
37:       assertFalse(node0.isFor());
38:       assertFalse(node0.isBlock());
39:       assertFalse(node0.isInc());
40:       assertFalse(node0.isIn());
41:       assertFalse(node0.isSetterDef());
42:       assertFalse(node0.isCast());
43:       assertFalse(node0.isContinue());
44:       assertFalse(node0.isFalse());
45:       assertFalse(node0.isThrow());
46:       assertEquals(40, node0.getType());
47:       assertFalse(node0.isScript());
48:       assertFalse(node0.isWith());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isObjectLit());
51:       assertFalse(node0.isAnd());
52:       assertFalse(node0.isNot());
53:       assertFalse(node0.isTypeOf());
54:       assertFalse(node0.isComma());
55:       assertFalse(node0.isDec());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.isNumber());
58:       assertEquals((-1), node0.getLineno());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isInstanceOf());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isAssign());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isReturn());
69:       assertFalse(node0.isHook());
70:       assertFalse(node0.isThis());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isCase());
75:       assertTrue(node0.isString());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isOr());
78:       assertFalse(node0.isStringKey());
79:       assertEquals((-1), node0.getCharno());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isLabelName());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isVar());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isLabel());
87:       assertNotNull(node0);
88:       assertEquals(53, Node.INPUT_ID);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
105:       assertEquals(57, Node.LAST_PROP);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(1, Node.DECR_FLAG);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(55, Node.INFERRED_FUNCTION);
120:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(57, Node.REFLECTED_OBJECT);
123:       assertEquals(36, Node.QUOTED_PROP);
124:       
125:       Node node1 = new Node(0, node0, node0);
126:       assertFalse(node0.isRegExp());
127:       assertFalse(node0.isVoid());
128:       assertFalse(node0.isDefaultCase());
129:       assertFalse(node0.isFunction());
130:       assertFalse(node0.isTry());
131:       assertFalse(node0.isArrayLit());
132:       assertFalse(node0.isTrue());
133:       assertFalse(node0.isDebugger());
134:       assertFalse(node0.isNull());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isDelProp());
137:       assertFalse(node0.isGetterDef());
138:       assertFalse(node0.isIf());
139:       assertFalse(node0.isName());
140:       assertFalse(node0.isCall());
141:       assertFalse(node0.isCatch());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isBlock());
144:       assertFalse(node0.isInc());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.isSetterDef());
147:       assertFalse(node0.isCast());
148:       assertFalse(node0.isContinue());
149:       assertFalse(node0.isFalse());
150:       assertFalse(node0.isThrow());
151:       assertEquals(40, node0.getType());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isWith());
154:       assertFalse(node0.isExprResult());
155:       assertFalse(node0.isObjectLit());
156:       assertFalse(node0.isAnd());
157:       assertFalse(node0.isNot());
158:       assertFalse(node0.isTypeOf());
159:       assertFalse(node0.isComma());
160:       assertFalse(node0.isDec());
161:       assertEquals((-1), node0.getSourcePosition());
162:       assertFalse(node0.isNumber());
163:       assertEquals((-1), node0.getLineno());
164:       assertFalse(node0.isBreak());
165:       assertFalse(node0.isGetProp());
166:       assertFalse(node0.isGetElem());
167:       assertFalse(node0.isInstanceOf());
168:       assertFalse(node0.hasOneChild());
169:       assertFalse(node0.hasMoreThanOneChild());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isWhile());
172:       assertFalse(node0.hasChildren());
173:       assertFalse(node0.isReturn());
174:       assertFalse(node0.isHook());
175:       assertFalse(node0.isThis());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isDo());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isCase());
180:       assertTrue(node0.isString());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isOr());
183:       assertFalse(node0.isStringKey());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isParamList());
186:       assertFalse(node0.isLabelName());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isVar());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isAssignAdd());
191:       assertFalse(node0.isLabel());
192:       assertFalse(node1.isAnd());
193:       assertFalse(node1.isWith());
194:       assertFalse(node1.isObjectLit());
195:       assertFalse(node1.isNot());
196:       assertFalse(node1.isInstanceOf());
197:       assertFalse(node1.isExprResult());
198:       assertFalse(node1.isScript());
199:       assertFalse(node1.isGetElem());
200:       assertFalse(node1.isAssign());
201:       assertFalse(node1.isNumber());
202:       assertFalse(node1.isTypeOf());
203:       assertFalse(node1.isBreak());
204:       assertFalse(node1.isGetProp());
205:       assertFalse(node1.isComma());
206:       assertFalse(node1.isDec());
207:       assertFalse(node1.isHook());
208:       assertFalse(node1.isReturn());
209:       assertFalse(node1.isThis());
210:       assertFalse(node1.isContinue());
211:       assertFalse(node1.hasMoreThanOneChild());
212:       assertFalse(node1.isIn());
213:       assertFalse(node1.isInc());
214:       assertFalse(node1.isString());
215:       assertTrue(node1.hasChildren());
216:       assertEquals((-1), node1.getLineno());
217:       assertEquals((-1), node1.getSourcePosition());
218:       assertFalse(node1.isIf());
219:       assertFalse(node1.isNE());
220:       assertFalse(node1.isFalse());
221:       assertFalse(node1.isSetterDef());
222:       assertFalse(node1.isCast());
223:       assertFalse(node1.isFunction());
224:       assertFalse(node1.isThrow());
225:       assertFalse(node1.isCatch());
226:       assertFalse(node1.isDebugger());
227:       assertFalse(node1.isVoid());
228:       assertFalse(node1.isNull());
229:       assertFalse(node1.isTrue());
230:       assertFalse(node1.isParamList());
231:       assertFalse(node1.isName());
232:       assertFalse(node1.isDelProp());
233:       assertFalse(node1.isGetterDef());
234:       assertFalse(node1.isCall());
235:       assertFalse(node1.isBlock());
236:       assertEquals(1, node1.getChildCount());
237:       assertFalse(node1.isTry());
238:       assertFalse(node1.isRegExp());
239:       assertFalse(node1.isWhile());
240:       assertTrue(node1.hasOneChild());
241:       assertFalse(node1.isFor());
242:       assertFalse(node1.isCase());
243:       assertFalse(node1.isDo());
244:       assertEquals(0, node1.getType());
245:       assertEquals((-1), node1.getCharno());
246:       assertFalse(node1.isOr());
247:       assertFalse(node1.isSwitch());
248:       assertFalse(node1.isStringKey());
249:       assertFalse(node1.isLabelName());
250:       assertFalse(node1.isArrayLit());
251:       assertFalse(node1.isAdd());
252:       assertFalse(node1.isEmpty());
253:       assertFalse(node1.isNew());
254:       assertFalse(node1.isAssignAdd());
255:       assertFalse(node1.isLabel());
256:       assertFalse(node1.isDefaultCase());
257:       assertFalse(node1.isVar());
258:       assertFalse(node1.equals((Object)node0));
259:       assertNotNull(node1);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(4095, Node.COLUMN_MASK);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
270:       assertEquals(46, Node.IS_NAMESPACE);
271:       assertEquals(50, Node.FREE_CALL);
272:       assertEquals(51, Node.STATIC_SOURCE_FILE);
273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
274:       assertEquals(54, Node.SLASH_V);
275:       assertEquals(52, Node.LENGTH);
276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
277:       assertEquals(57, Node.LAST_PROP);
278:       assertEquals(49, Node.DIRECT_EVAL);
279:       assertEquals(1, Node.DECR_FLAG);
280:       assertEquals(40, Node.ORIGINALNAME_PROP);
281:       assertEquals(12, Node.COLUMN_BITS);
282:       assertEquals(30, Node.VAR_ARGS_NAME);
283:       assertEquals(48, Node.DIRECTIVES);
284:       assertEquals(8, Node.FLAG_NO_THROWS);
285:       assertEquals(39, Node.EMPTY_BLOCK);
286:       assertEquals(56, Node.CHANGE_TIME);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
289:       assertEquals(37, Node.OPT_ARG_NAME);
290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
291:       assertEquals(55, Node.INFERRED_FUNCTION);
292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
293:       assertEquals(29, Node.JSDOC_INFO_PROP);
294:       assertEquals(57, Node.REFLECTED_OBJECT);
295:       assertEquals(36, Node.QUOTED_PROP);
296:       assertEquals(43, Node.IS_CONSTANT_NAME);
297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(53, Node.INPUT_ID);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
305:       assertEquals(40, Node.ORIGINALNAME_PROP);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(1, Node.DECR_FLAG);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(2, Node.POST_FLAG);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(8, Node.FLAG_NO_THROWS);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(48, Node.DIRECTIVES);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(57, Node.REFLECTED_OBJECT);
332:       
333:       Node node2 = node0.srcrefTree(node1);
334:       assertFalse(node0.isRegExp());
335:       assertFalse(node0.isVoid());
336:       assertFalse(node0.isDefaultCase());
337:       assertFalse(node0.isFunction());
338:       assertFalse(node0.isTry());
339:       assertFalse(node0.isArrayLit());
340:       assertFalse(node0.isTrue());
341:       assertFalse(node0.isDebugger());
342:       assertFalse(node0.isNull());
343:       assertFalse(node0.isNE());
344:       assertFalse(node0.isDelProp());
345:       assertFalse(node0.isGetterDef());
346:       assertFalse(node0.isIf());
347:       assertFalse(node0.isName());
348:       assertFalse(node0.isCall());
349:       assertFalse(node0.isCatch());
350:       assertFalse(node0.isFor());
351:       assertFalse(node0.isBlock());
352:       assertFalse(node0.isInc());
353:       assertFalse(node0.isIn());
354:       assertFalse(node0.isSetterDef());
355:       assertFalse(node0.isCast());
356:       assertFalse(node0.isContinue());
357:       assertFalse(node0.isFalse());
358:       assertFalse(node0.isThrow());
359:       assertEquals(40, node0.getType());
360:       assertFalse(node0.isScript());
361:       assertFalse(node0.isWith());
362:       assertFalse(node0.isExprResult());
363:       assertFalse(node0.isObjectLit());
364:       assertFalse(node0.isAnd());
365:       assertFalse(node0.isNot());
366:       assertFalse(node0.isTypeOf());
367:       assertFalse(node0.isComma());
368:       assertFalse(node0.isDec());
369:       assertEquals((-1), node0.getSourcePosition());
370:       assertFalse(node0.isNumber());
371:       assertEquals((-1), node0.getLineno());
372:       assertFalse(node0.isBreak());
373:       assertFalse(node0.isGetProp());
374:       assertFalse(node0.isGetElem());
375:       assertFalse(node0.isInstanceOf());
376:       assertFalse(node0.hasOneChild());
377:       assertFalse(node0.hasMoreThanOneChild());
378:       assertFalse(node0.isAssign());
379:       assertFalse(node0.isWhile());
380:       assertFalse(node0.hasChildren());
381:       assertFalse(node0.isReturn());
382:       assertFalse(node0.isHook());
383:       assertFalse(node0.isThis());
384:       assertFalse(node0.isSwitch());
385:       assertFalse(node0.isDo());
386:       assertFalse(node0.isAdd());
387:       assertFalse(node0.isCase());
388:       assertTrue(node0.isString());
389:       assertFalse(node0.isNew());
390:       assertFalse(node0.isOr());
391:       assertFalse(node0.isStringKey());
392:       assertEquals((-1), node0.getCharno());
393:       assertFalse(node0.isParamList());
394:       assertFalse(node0.isLabelName());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.isVar());
397:       assertEquals(0, node0.getChildCount());
398:       assertFalse(node0.isAssignAdd());
399:       assertFalse(node0.isLabel());
400:       assertFalse(node1.isAnd());
401:       assertFalse(node1.isWith());
402:       assertFalse(node1.isObjectLit());
403:       assertFalse(node1.isNot());
404:       assertFalse(node1.isInstanceOf());
405:       assertFalse(node1.isExprResult());
406:       assertFalse(node1.isScript());
407:       assertFalse(node1.isGetElem());
408:       assertFalse(node1.isAssign());
409:       assertFalse(node1.isNumber());
410:       assertFalse(node1.isTypeOf());
411:       assertFalse(node1.isBreak());
412:       assertFalse(node1.isGetProp());
413:       assertFalse(node1.isComma());
414:       assertFalse(node1.isDec());
415:       assertFalse(node1.isHook());
416:       assertFalse(node1.isReturn());
417:       assertFalse(node1.isThis());
418:       assertFalse(node1.isContinue());
419:       assertFalse(node1.hasMoreThanOneChild());
420:       assertFalse(node1.isIn());
421:       assertFalse(node1.isInc());
422:       assertFalse(node1.isString());
423:       assertTrue(node1.hasChildren());
424:       assertEquals((-1), node1.getLineno());
425:       assertEquals((-1), node1.getSourcePosition());
426:       assertFalse(node1.isIf());
427:       assertFalse(node1.isNE());
428:       assertFalse(node1.isFalse());
429:       assertFalse(node1.isSetterDef());
430:       assertFalse(node1.isCast());
431:       assertFalse(node1.isFunction());
432:       assertFalse(node1.isThrow());
433:       assertFalse(node1.isCatch());
434:       assertFalse(node1.isDebugger());
435:       assertFalse(node1.isVoid());
436:       assertFalse(node1.isNull());
437:       assertFalse(node1.isTrue());
438:       assertFalse(node1.isParamList());
439:       assertFalse(node1.isName());
440:       assertFalse(node1.isDelProp());
441:       assertFalse(node1.isGetterDef());
442:       assertFalse(node1.isCall());
443:       assertFalse(node1.isBlock());
444:       assertEquals(1, node1.getChildCount());
445:       assertFalse(node1.isTry());
446:       assertFalse(node1.isRegExp());
447:       assertFalse(node1.isWhile());
448:       assertTrue(node1.hasOneChild());
449:       assertFalse(node1.isFor());
450:       assertFalse(node1.isCase());
451:       assertFalse(node1.isDo());
452:       assertEquals(0, node1.getType());
453:       assertEquals((-1), node1.getCharno());
454:       assertFalse(node1.isOr());
455:       assertFalse(node1.isSwitch());
456:       assertFalse(node1.isStringKey());
457:       assertFalse(node1.isLabelName());
458:       assertFalse(node1.isArrayLit());
459:       assertFalse(node1.isAdd());
460:       assertFalse(node1.isEmpty());
461:       assertFalse(node1.isNew());
462:       assertFalse(node1.isAssignAdd());
463:       assertFalse(node1.isLabel());
464:       assertFalse(node1.isDefaultCase());
465:       assertFalse(node1.isVar());
466:       assertFalse(node2.isAnd());
467:       assertFalse(node2.isThis());
468:       assertFalse(node2.isNot());
469:       assertFalse(node2.isObjectLit());
470:       assertFalse(node2.isGetProp());
471:       assertFalse(node2.isScript());
472:       assertFalse(node2.isHook());
473:       assertFalse(node2.hasOneChild());
474:       assertFalse(node2.isBreak());
475:       assertFalse(node2.hasChildren());
476:       assertFalse(node2.isWith());
477:       assertFalse(node2.isTypeOf());
478:       assertFalse(node2.isAssign());
479:       assertFalse(node2.isComma());
480:       assertFalse(node2.isDec());
481:       assertFalse(node2.isExprResult());
482:       assertFalse(node2.isGetElem());
483:       assertFalse(node2.isInstanceOf());
484:       assertFalse(node2.isIn());
485:       assertFalse(node2.isReturn());
486:       assertEquals((-1), node2.getLineno());
487:       assertFalse(node2.isNE());
488:       assertFalse(node2.isWhile());
489:       assertEquals((-1), node2.getSourcePosition());
490:       assertFalse(node2.isInc());
491:       assertFalse(node2.isDebugger());
492:       assertFalse(node2.isThrow());
493:       assertFalse(node2.isContinue());
494:       assertFalse(node2.isFunction());
495:       assertFalse(node2.isFalse());
496:       assertFalse(node2.isCast());
497:       assertEquals(0, node2.getChildCount());
498:       assertEquals(40, node2.getType());
499:       assertFalse(node2.isNull());
500:       assertFalse(node2.isParamList());
501:       assertFalse(node2.isDefaultCase());
502:       assertFalse(node2.isSetterDef());
503:       assertTrue(node2.isString());
504:       assertFalse(node2.isTry());
505:       assertFalse(node2.isTrue());
506:       assertFalse(node2.isVoid());
507:       assertFalse(node2.isBlock());
508:       assertFalse(node2.isFor());
509:       assertFalse(node2.isDelProp());
510:       assertFalse(node2.isIf());
511:       assertFalse(node2.isName());
512:       assertFalse(node2.isRegExp());
513:       assertFalse(node2.isCall());
514:       assertFalse(node2.hasMoreThanOneChild());
515:       assertFalse(node2.isCatch());
516:       assertFalse(node2.isOr());
517:       assertFalse(node2.isLabel());
518:       assertFalse(node2.isAssignAdd());
519:       assertFalse(node2.isGetterDef());
520:       assertFalse(node2.isNumber());
521:       assertFalse(node2.isDo());
522:       assertFalse(node2.isCase());
523:       assertFalse(node2.isAdd());
524:       assertFalse(node2.isEmpty());
525:       assertFalse(node2.isArrayLit());
526:       assertFalse(node2.isNew());
527:       assertEquals((-1), node2.getCharno());
528:       assertFalse(node2.isSwitch());
529:       assertFalse(node2.isVar());
530:       assertFalse(node2.isStringKey());
531:       assertFalse(node2.isLabelName());
532:       assertFalse(node0.equals((Object)node1));
533:       assertFalse(node1.equals((Object)node0));
534:       assertFalse(node2.equals((Object)node1));
535:       assertNotNull(node2);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(43, Node.IS_CONSTANT_NAME);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
541:       assertEquals(47, Node.IS_DISPATCHER);
542:       assertEquals(2, Node.POST_FLAG);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
546:       assertEquals(46, Node.IS_NAMESPACE);
547:       assertEquals(50, Node.FREE_CALL);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
553:       assertEquals(57, Node.LAST_PROP);
554:       assertEquals(49, Node.DIRECT_EVAL);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(12, Node.COLUMN_BITS);
558:       assertEquals(30, Node.VAR_ARGS_NAME);
559:       assertEquals(48, Node.DIRECTIVES);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(56, Node.CHANGE_TIME);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
565:       assertEquals(37, Node.OPT_ARG_NAME);
566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
569:       assertEquals(29, Node.JSDOC_INFO_PROP);
570:       assertEquals(57, Node.REFLECTED_OBJECT);
571:       assertEquals(36, Node.QUOTED_PROP);
572:       assertEquals(43, Node.IS_CONSTANT_NAME);
573:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
574:       assertEquals(55, Node.INFERRED_FUNCTION);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
577:       assertEquals(4095, Node.COLUMN_MASK);
578:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
581:       assertEquals(40, Node.ORIGINALNAME_PROP);
582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
583:       assertEquals(46, Node.IS_NAMESPACE);
584:       assertEquals(54, Node.SLASH_V);
585:       assertEquals(51, Node.STATIC_SOURCE_FILE);
586:       assertEquals(30, Node.VAR_ARGS_NAME);
587:       assertEquals(49, Node.DIRECT_EVAL);
588:       assertEquals(57, Node.LAST_PROP);
589:       assertEquals(1, Node.DECR_FLAG);
590:       assertEquals(15, Node.NO_SIDE_EFFECTS);
591:       assertEquals(32, Node.INCRDECR_PROP);
592:       assertEquals(2, Node.POST_FLAG);
593:       assertEquals(12, Node.COLUMN_BITS);
594:       assertEquals(47, Node.IS_DISPATCHER);
595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
596:       assertEquals(29, Node.JSDOC_INFO_PROP);
597:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
598:       assertEquals(56, Node.CHANGE_TIME);
599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
600:       assertEquals(8, Node.FLAG_NO_THROWS);
601:       assertEquals(37, Node.OPT_ARG_NAME);
602:       assertEquals(48, Node.DIRECTIVES);
603:       assertEquals(39, Node.EMPTY_BLOCK);
604:       assertEquals(52, Node.LENGTH);
605:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
606:       assertEquals(36, Node.QUOTED_PROP);
607:       assertEquals(57, Node.REFLECTED_OBJECT);
608:       assertEquals(55, Node.INFERRED_FUNCTION);
609:       assertEquals(4095, Node.COLUMN_MASK);
610:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
611:       assertEquals(43, Node.IS_CONSTANT_NAME);
612:       assertEquals(48, Node.DIRECTIVES);
613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
618:       assertEquals(54, Node.SLASH_V);
619:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
620:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
622:       assertEquals(32, Node.INCRDECR_PROP);
623:       assertEquals(1, Node.DECR_FLAG);
624:       assertEquals(30, Node.VAR_ARGS_NAME);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(12, Node.COLUMN_BITS);
627:       assertEquals(2, Node.POST_FLAG);
628:       assertEquals(37, Node.OPT_ARG_NAME);
629:       assertEquals(56, Node.CHANGE_TIME);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(47, Node.IS_DISPATCHER);
632:       assertEquals(57, Node.REFLECTED_OBJECT);
633:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(29, Node.JSDOC_INFO_PROP);
639:       assertEquals(52, Node.LENGTH);
640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(39, Node.EMPTY_BLOCK);
643:       assertEquals(53, Node.INPUT_ID);
644:       assertSame(node0, node2);
645:       assertSame(node2, node0);
646:       
647:       boolean boolean0 = node1.getBooleanProp(0);
648:       assertFalse(node0.isRegExp());
649:       assertFalse(node0.isVoid());
650:       assertFalse(node0.isDefaultCase());
651:       assertFalse(node0.isFunction());
652:       assertFalse(node0.isTry());
653:       assertFalse(node0.isArrayLit());
654:       assertFalse(node0.isTrue());
655:       assertFalse(node0.isDebugger());
656:       assertFalse(node0.isNull());
657:       assertFalse(node0.isNE());
658:       assertFalse(node0.isDelProp());
659:       assertFalse(node0.isGetterDef());
660:       assertFalse(node0.isIf());
661:       assertFalse(node0.isName());
662:       assertFalse(node0.isCall());
663:       assertFalse(node0.isCatch());
664:       assertFalse(node0.isFor());
665:       assertFalse(node0.isBlock());
666:       assertFalse(node0.isInc());
667:       assertFalse(node0.isIn());
668:       assertFalse(node0.isSetterDef());
669:       assertFalse(node0.isCast());
670:       assertFalse(node0.isContinue());
671:       assertFalse(node0.isFalse());
672:       assertFalse(node0.isThrow());
673:       assertEquals(40, node0.getType());
674:       assertFalse(node0.isScript());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isExprResult());
677:       assertFalse(node0.isObjectLit());
678:       assertFalse(node0.isAnd());
679:       assertFalse(node0.isNot());
680:       assertFalse(node0.isTypeOf());
681:       assertFalse(node0.isComma());
682:       assertFalse(node0.isDec());
683:       assertEquals((-1), node0.getSourcePosition());
684:       assertFalse(node0.isNumber());
685:       assertEquals((-1), node0.getLineno());
686:       assertFalse(node0.isBreak());
687:       assertFalse(node0.isGetProp());
688:       assertFalse(node0.isGetElem());
689:       assertFalse(node0.isInstanceOf());
690:       assertFalse(node0.hasOneChild());
691:       assertFalse(node0.hasMoreThanOneChild());
692:       assertFalse(node0.isAssign());
693:       assertFalse(node0.isWhile());
694:       assertFalse(node0.hasChildren());
695:       assertFalse(node0.isReturn());
696:       assertFalse(node0.isHook());
697:       assertFalse(node0.isThis());
698:       assertFalse(node0.isSwitch());
699:       assertFalse(node0.isDo());
700:       assertFalse(node0.isAdd());
701:       assertFalse(node0.isCase());
702:       assertTrue(node0.isString());
703:       assertFalse(node0.isNew());
704:       assertFalse(node0.isOr());
705:       assertFalse(node0.isStringKey());
706:       assertEquals((-1), node0.getCharno());
707:       assertFalse(node0.isParamList());
708:       assertFalse(node0.isLabelName());
709:       assertFalse(node0.isEmpty());
710:       assertFalse(node0.isVar());
711:       assertEquals(0, node0.getChildCount());
712:       assertFalse(node0.isAssignAdd());
713:       assertFalse(node0.isLabel());
714:       assertFalse(node1.isAnd());
715:       assertFalse(node1.isWith());
716:       assertFalse(node1.isObjectLit());
717:       assertFalse(node1.isNot());
718:       assertFalse(node1.isInstanceOf());
719:       assertFalse(node1.isExprResult());
720:       assertFalse(node1.isScript());
721:       assertFalse(node1.isGetElem());
722:       assertFalse(node1.isAssign());
723:       assertFalse(node1.isNumber());
724:       assertFalse(node1.isTypeOf());
725:       assertFalse(node1.isBreak());
726:       assertFalse(node1.isGetProp());
727:       assertFalse(node1.isComma());
728:       assertFalse(node1.isDec());
729:       assertFalse(node1.isHook());
730:       assertFalse(node1.isReturn());
731:       assertFalse(node1.isThis());
732:       assertFalse(node1.isContinue());
733:       assertFalse(node1.hasMoreThanOneChild());
734:       assertFalse(node1.isIn());
735:       assertFalse(node1.isInc());
736:       assertFalse(node1.isString());
737:       assertTrue(node1.hasChildren());
738:       assertEquals((-1), node1.getLineno());
739:       assertEquals((-1), node1.getSourcePosition());
740:       assertFalse(node1.isIf());
741:       assertFalse(node1.isNE());
742:       assertFalse(node1.isFalse());
743:       assertFalse(node1.isSetterDef());
744:       assertFalse(node1.isCast());
745:       assertFalse(node1.isFunction());
746:       assertFalse(node1.isThrow());
747:       assertFalse(node1.isCatch());
748:       assertFalse(node1.isDebugger());
749:       assertFalse(node1.isVoid());
750:       assertFalse(node1.isNull());
751:       assertFalse(node1.isTrue());
752:       assertFalse(node1.isParamList());
753:       assertFalse(node1.isName());
754:       assertFalse(node1.isDelProp());
755:       assertFalse(node1.isGetterDef());
756:       assertFalse(node1.isCall());
757:       assertFalse(node1.isBlock());
758:       assertEquals(1, node1.getChildCount());
759:       assertFalse(node1.isTry());
760:       assertFalse(node1.isRegExp());
761:       assertFalse(node1.isWhile());
762:       assertTrue(node1.hasOneChild());
763:       assertFalse(node1.isFor());
764:       assertFalse(node1.isCase());
765:       assertFalse(node1.isDo());
766:       assertEquals(0, node1.getType());
767:       assertEquals((-1), node1.getCharno());
768:       assertFalse(node1.isOr());
769:       assertFalse(node1.isSwitch());
770:       assertFalse(node1.isStringKey());
771:       assertFalse(node1.isLabelName());
772:       assertFalse(node1.isArrayLit());
773:       assertFalse(node1.isAdd());
774:       assertFalse(node1.isEmpty());
775:       assertFalse(node1.isNew());
776:       assertFalse(node1.isAssignAdd());
777:       assertFalse(node1.isLabel());
778:       assertFalse(node1.isDefaultCase());
779:       assertFalse(node1.isVar());
780:       assertFalse(node0.equals((Object)node1));
781:       assertFalse(node1.equals((Object)node2));
782:       assertFalse(node1.equals((Object)node0));
783:       assertFalse(boolean0);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(43, Node.IS_CONSTANT_NAME);
787:       assertEquals(4095, Node.COLUMN_MASK);
788:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
789:       assertEquals(47, Node.IS_DISPATCHER);
790:       assertEquals(2, Node.POST_FLAG);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
794:       assertEquals(46, Node.IS_NAMESPACE);
795:       assertEquals(50, Node.FREE_CALL);
796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(52, Node.LENGTH);
800:       assertEquals(15, Node.NO_SIDE_EFFECTS);
801:       assertEquals(57, Node.LAST_PROP);
802:       assertEquals(49, Node.DIRECT_EVAL);
803:       assertEquals(1, Node.DECR_FLAG);
804:       assertEquals(40, Node.ORIGINALNAME_PROP);
805:       assertEquals(12, Node.COLUMN_BITS);
806:       assertEquals(30, Node.VAR_ARGS_NAME);
807:       assertEquals(48, Node.DIRECTIVES);
808:       assertEquals(8, Node.FLAG_NO_THROWS);
809:       assertEquals(39, Node.EMPTY_BLOCK);
810:       assertEquals(56, Node.CHANGE_TIME);
811:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
812:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
813:       assertEquals(37, Node.OPT_ARG_NAME);
814:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
815:       assertEquals(55, Node.INFERRED_FUNCTION);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(29, Node.JSDOC_INFO_PROP);
818:       assertEquals(57, Node.REFLECTED_OBJECT);
819:       assertEquals(36, Node.QUOTED_PROP);
820:       assertEquals(43, Node.IS_CONSTANT_NAME);
821:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
822:       assertEquals(55, Node.INFERRED_FUNCTION);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
825:       assertEquals(4095, Node.COLUMN_MASK);
826:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
827:       assertEquals(50, Node.FREE_CALL);
828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
829:       assertEquals(40, Node.ORIGINALNAME_PROP);
830:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
831:       assertEquals(46, Node.IS_NAMESPACE);
832:       assertEquals(54, Node.SLASH_V);
833:       assertEquals(51, Node.STATIC_SOURCE_FILE);
834:       assertEquals(30, Node.VAR_ARGS_NAME);
835:       assertEquals(49, Node.DIRECT_EVAL);
836:       assertEquals(57, Node.LAST_PROP);
837:       assertEquals(1, Node.DECR_FLAG);
838:       assertEquals(15, Node.NO_SIDE_EFFECTS);
839:       assertEquals(32, Node.INCRDECR_PROP);
840:       assertEquals(2, Node.POST_FLAG);
841:       assertEquals(12, Node.COLUMN_BITS);
842:       assertEquals(47, Node.IS_DISPATCHER);
843:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
844:       assertEquals(29, Node.JSDOC_INFO_PROP);
845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
846:       assertEquals(56, Node.CHANGE_TIME);
847:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
848:       assertEquals(8, Node.FLAG_NO_THROWS);
849:       assertEquals(37, Node.OPT_ARG_NAME);
850:       assertEquals(48, Node.DIRECTIVES);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(36, Node.QUOTED_PROP);
855:       assertEquals(57, Node.REFLECTED_OBJECT);
856:       assertSame(node0, node2);
857:       
858:       Node node3 = node1.srcref(node0);
859:       assertFalse(node0.isRegExp());
860:       assertFalse(node0.isVoid());
861:       assertFalse(node0.isDefaultCase());
862:       assertFalse(node0.isFunction());
863:       assertFalse(node0.isTry());
864:       assertFalse(node0.isArrayLit());
865:       assertFalse(node0.isTrue());
866:       assertFalse(node0.isDebugger());
867:       assertFalse(node0.isNull());
868:       assertFalse(node0.isNE());
869:       assertFalse(node0.isDelProp());
870:       assertFalse(node0.isGetterDef());
871:       assertFalse(node0.isIf());
872:       assertFalse(node0.isName());
873:       assertFalse(node0.isCall());
874:       assertFalse(node0.isCatch());
875:       assertFalse(node0.isFor());
876:       assertFalse(node0.isBlock());
877:       assertFalse(node0.isInc());
878:       assertFalse(node0.isIn());
879:       assertFalse(node0.isSetterDef());
880:       assertFalse(node0.isCast());
881:       assertFalse(node0.isContinue());
882:       assertFalse(node0.isFalse());
883:       assertFalse(node0.isThrow());
884:       assertEquals(40, node0.getType());
885:       assertFalse(node0.isScript());
886:       assertFalse(node0.isWith());
887:       assertFalse(node0.isExprResult());
888:       assertFalse(node0.isObjectLit());
889:       assertFalse(node0.isAnd());
890:       assertFalse(node0.isNot());
891:       assertFalse(node0.isTypeOf());
892:       assertFalse(node0.isComma());
893:       assertFalse(node0.isDec());
894:       assertEquals((-1), node0.getSourcePosition());
895:       assertFalse(node0.isNumber());
896:       assertEquals((-1), node0.getLineno());
897:       assertFalse(node0.isBreak());
898:       assertFalse(node0.isGetProp());
899:       assertFalse(node0.isGetElem());
900:       assertFalse(node0.isInstanceOf());
901:       assertFalse(node0.hasOneChild());
902:       assertFalse(node0.hasMoreThanOneChild());
903:       assertFalse(node0.isAssign());
904:       assertFalse(node0.isWhile());
905:       assertFalse(node0.hasChildren());
906:       assertFalse(node0.isReturn());
907:       assertFalse(node0.isHook());
908:       assertFalse(node0.isThis());
909:       assertFalse(node0.isSwitch());
910:       assertFalse(node0.isDo());
911:       assertFalse(node0.isAdd());
912:       assertFalse(node0.isCase());
913:       assertTrue(node0.isString());
914:       assertFalse(node0.isNew());
915:       assertFalse(node0.isOr());
916:       assertFalse(node0.isStringKey());
917:       assertEquals((-1), node0.getCharno());
918:       assertFalse(node0.isParamList());
919:       assertFalse(node0.isLabelName());
920:       assertFalse(node0.isEmpty());
921:       assertFalse(node0.isVar());
922:       assertEquals(0, node0.getChildCount());
923:       assertFalse(node0.isAssignAdd());
924:       assertFalse(node0.isLabel());
925:       assertFalse(node1.isAnd());
926:       assertFalse(node1.isWith());
927:       assertFalse(node1.isObjectLit());
928:       assertFalse(node1.isNot());
929:       assertFalse(node1.isInstanceOf());
930:       assertFalse(node1.isExprResult());
931:       assertFalse(node1.isScript());
932:       assertFalse(node1.isGetElem());
933:       assertFalse(node1.isAssign());
934:       assertFalse(node1.isNumber());
935:       assertFalse(node1.isTypeOf());
936:       assertFalse(node1.isBreak());
937:       assertFalse(node1.isGetProp());
938:       assertFalse(node1.isComma());
939:       assertFalse(node1.isDec());
940:       assertFalse(node1.isHook());
941:       assertFalse(node1.isReturn());
942:       assertFalse(node1.isThis());
943:       assertFalse(node1.isContinue());
944:       assertFalse(node1.hasMoreThanOneChild());
945:       assertFalse(node1.isIn());
946:       assertFalse(node1.isInc());
947:       assertFalse(node1.isString());
948:       assertTrue(node1.hasChildren());
949:       assertEquals((-1), node1.getLineno());
950:       assertEquals((-1), node1.getSourcePosition());
951:       assertFalse(node1.isIf());
952:       assertFalse(node1.isNE());
953:       assertFalse(node1.isFalse());
954:       assertFalse(node1.isSetterDef());
955:       assertFalse(node1.isCast());
956:       assertFalse(node1.isFunction());
957:       assertFalse(node1.isThrow());
958:       assertFalse(node1.isCatch());
959:       assertFalse(node1.isDebugger());
960:       assertFalse(node1.isVoid());
961:       assertFalse(node1.isNull());
962:       assertFalse(node1.isTrue());
963:       assertFalse(node1.isParamList());
964:       assertFalse(node1.isName());
965:       assertFalse(node1.isDelProp());
966:       assertFalse(node1.isGetterDef());
967:       assertFalse(node1.isCall());
968:       assertFalse(node1.isBlock());
969:       assertEquals(1, node1.getChildCount());
970:       assertFalse(node1.isTry());
971:       assertFalse(node1.isRegExp());
972:       assertFalse(node1.isWhile());
973:       assertTrue(node1.hasOneChild());
974:       assertFalse(node1.isFor());
975:       assertFalse(node1.isCase());
976:       assertFalse(node1.isDo());
977:       assertEquals(0, node1.getType());
978:       assertEquals((-1), node1.getCharno());
979:       assertFalse(node1.isOr());
980:       assertFalse(node1.isSwitch());
981:       assertFalse(node1.isStringKey());
982:       assertFalse(node1.isLabelName());
983:       assertFalse(node1.isArrayLit());
984:       assertFalse(node1.isAdd());
985:       assertFalse(node1.isEmpty());
986:       assertFalse(node1.isNew());
987:       assertFalse(node1.isAssignAdd());
988:       assertFalse(node1.isLabel());
989:       assertFalse(node1.isDefaultCase());
990:       assertFalse(node1.isVar());
991:       assertFalse(node3.isIn());
992:       assertTrue(node3.hasChildren());
993:       assertFalse(node3.isCase());
994:       assertFalse(node3.isSwitch());
995:       assertFalse(node3.isNE());
996:       assertFalse(node3.isInc());
997:       assertFalse(node3.isIf());
998:       assertFalse(node3.isString());
999:       assertFalse(node3.isGetterDef());
1000:       assertEquals((-1), node3.getCharno());
1001:       assertFalse(node3.isDelProp());
1002:       assertEquals(0, node3.getType());
1003:       assertFalse(node3.isTry());
1004:       assertFalse(node3.isBreak());
1005:       assertFalse(node3.isComma());
1006:       assertFalse(node3.isThis());
1007:       assertFalse(node3.isRegExp());
1008:       assertTrue(node3.hasOneChild());
1009:       assertFalse(node3.isFor());
1010:       assertFalse(node3.isHook());
1011:       assertEquals(1, node3.getChildCount());
1012:       assertFalse(node3.isCatch());
1013:       assertFalse(node3.isObjectLit());
1014:       assertFalse(node3.isInstanceOf());
1015:       assertFalse(node3.isAnd());
1016:       assertFalse(node3.isGetProp());
1017:       assertFalse(node3.isSetterDef());
1018:       assertFalse(node3.isNot());
1019:       assertFalse(node3.isDebugger());
1020:       assertFalse(node3.isCast());
1021:       assertFalse(node3.isThrow());
1022:       assertFalse(node3.isFalse());
1023:       assertFalse(node3.isFunction());
1024:       assertFalse(node3.hasMoreThanOneChild());
1025:       assertFalse(node3.isContinue());
1026:       assertFalse(node3.isAssignAdd());
1027:       assertFalse(node3.isDo());
1028:       assertEquals((-1), node3.getLineno());
1029:       assertFalse(node3.isNumber());
1030:       assertFalse(node3.isOr());
1031:       assertEquals((-1), node3.getSourcePosition());
1032:       assertFalse(node3.isCall());
1033:       assertFalse(node3.isName());
1034:       assertFalse(node3.isGetElem());
1035:       assertFalse(node3.isExprResult());
1036:       assertFalse(node3.isTypeOf());
1037:       assertFalse(node3.isWhile());
1038:       assertFalse(node3.isReturn());
1039:       assertFalse(node3.isAssign());
1040:       assertFalse(node3.isWith());
1041:       assertFalse(node3.isBlock());
1042:       assertFalse(node3.isDec());
1043:       assertFalse(node3.isTrue());
1044:       assertFalse(node3.isNull());
1045:       assertFalse(node3.isVoid());
1046:       assertFalse(node3.isScript());
1047:       assertFalse(node3.isParamList());
1048:       assertFalse(node3.isVar());
1049:       assertFalse(node3.isStringKey());
1050:       assertFalse(node3.isLabelName());
1051:       assertFalse(node3.isAdd());
1052:       assertFalse(node3.isEmpty());
1053:       assertFalse(node3.isNew());
1054:       assertFalse(node3.isArrayLit());
1055:       assertFalse(node3.isDefaultCase());
1056:       assertFalse(node3.isLabel());
1057:       assertFalse(node0.equals((Object)node1));
1058:       assertFalse(node1.equals((Object)node2));
1059:       assertFalse(node1.equals((Object)node0));
1060:       assertFalse(node3.equals((Object)node0));
1061:       assertFalse(node3.equals((Object)node2));
1062:       assertNotNull(node3);
1063:       assertEquals(53, Node.INPUT_ID);
1064:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1065:       assertEquals(43, Node.IS_CONSTANT_NAME);
1066:       assertEquals(4095, Node.COLUMN_MASK);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(47, Node.IS_DISPATCHER);
1069:       assertEquals(2, Node.POST_FLAG);
1070:       assertEquals(32, Node.INCRDECR_PROP);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(46, Node.IS_NAMESPACE);
1074:       assertEquals(50, Node.FREE_CALL);
1075:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1076:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1077:       assertEquals(54, Node.SLASH_V);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1080:       assertEquals(57, Node.LAST_PROP);
1081:       assertEquals(49, Node.DIRECT_EVAL);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(40, Node.ORIGINALNAME_PROP);
1084:       assertEquals(12, Node.COLUMN_BITS);
1085:       assertEquals(30, Node.VAR_ARGS_NAME);
1086:       assertEquals(48, Node.DIRECTIVES);
1087:       assertEquals(8, Node.FLAG_NO_THROWS);
1088:       assertEquals(39, Node.EMPTY_BLOCK);
1089:       assertEquals(56, Node.CHANGE_TIME);
1090:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1092:       assertEquals(37, Node.OPT_ARG_NAME);
1093:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1094:       assertEquals(55, Node.INFERRED_FUNCTION);
1095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1096:       assertEquals(29, Node.JSDOC_INFO_PROP);
1097:       assertEquals(57, Node.REFLECTED_OBJECT);
1098:       assertEquals(36, Node.QUOTED_PROP);
1099:       assertEquals(43, Node.IS_CONSTANT_NAME);
1100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1101:       assertEquals(55, Node.INFERRED_FUNCTION);
1102:       assertEquals(53, Node.INPUT_ID);
1103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1104:       assertEquals(4095, Node.COLUMN_MASK);
1105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1106:       assertEquals(50, Node.FREE_CALL);
1107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1108:       assertEquals(40, Node.ORIGINALNAME_PROP);
1109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1110:       assertEquals(46, Node.IS_NAMESPACE);
1111:       assertEquals(54, Node.SLASH_V);
1112:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1113:       assertEquals(30, Node.VAR_ARGS_NAME);
1114:       assertEquals(49, Node.DIRECT_EVAL);
1115:       assertEquals(57, Node.LAST_PROP);
1116:       assertEquals(1, Node.DECR_FLAG);
1117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1118:       assertEquals(32, Node.INCRDECR_PROP);
1119:       assertEquals(2, Node.POST_FLAG);
1120:       assertEquals(12, Node.COLUMN_BITS);
1121:       assertEquals(47, Node.IS_DISPATCHER);
1122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1125:       assertEquals(56, Node.CHANGE_TIME);
1126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1127:       assertEquals(8, Node.FLAG_NO_THROWS);
1128:       assertEquals(37, Node.OPT_ARG_NAME);
1129:       assertEquals(48, Node.DIRECTIVES);
1130:       assertEquals(39, Node.EMPTY_BLOCK);
1131:       assertEquals(52, Node.LENGTH);
1132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1133:       assertEquals(36, Node.QUOTED_PROP);
1134:       assertEquals(57, Node.REFLECTED_OBJECT);
1135:       assertEquals(1, Node.DECR_FLAG);
1136:       assertEquals(12, Node.COLUMN_BITS);
1137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1138:       assertEquals(57, Node.LAST_PROP);
1139:       assertEquals(49, Node.DIRECT_EVAL);
1140:       assertEquals(32, Node.INCRDECR_PROP);
1141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1142:       assertEquals(37, Node.OPT_ARG_NAME);
1143:       assertEquals(47, Node.IS_DISPATCHER);
1144:       assertEquals(30, Node.VAR_ARGS_NAME);
1145:       assertEquals(2, Node.POST_FLAG);
1146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1147:       assertEquals(40, Node.ORIGINALNAME_PROP);
1148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(54, Node.SLASH_V);
1151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1152:       assertEquals(50, Node.FREE_CALL);
1153:       assertEquals(55, Node.INFERRED_FUNCTION);
1154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1155:       assertEquals(43, Node.IS_CONSTANT_NAME);
1156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1158:       assertEquals(4095, Node.COLUMN_MASK);
1159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1160:       assertEquals(29, Node.JSDOC_INFO_PROP);
1161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1162:       assertEquals(56, Node.CHANGE_TIME);
1163:       assertEquals(48, Node.DIRECTIVES);
1164:       assertEquals(53, Node.INPUT_ID);
1165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1166:       assertEquals(39, Node.EMPTY_BLOCK);
1167:       assertEquals(36, Node.QUOTED_PROP);
1168:       assertEquals(57, Node.REFLECTED_OBJECT);
1169:       assertEquals(52, Node.LENGTH);
1170:       assertEquals(8, Node.FLAG_NO_THROWS);
1171:       assertSame(node0, node2);
1172:       assertSame(node1, node3);
1173:       assertSame(node3, node1);
1174:       
1175:       node0.setLineno(11);
1176:       assertFalse(node0.isRegExp());
1177:       assertFalse(node0.isVoid());
1178:       assertFalse(node0.isDefaultCase());
1179:       assertFalse(node0.isFunction());
1180:       assertFalse(node0.isTry());
1181:       assertFalse(node0.isArrayLit());
1182:       assertFalse(node0.isTrue());
1183:       assertFalse(node0.isDebugger());
1184:       assertFalse(node0.isNull());
1185:       assertFalse(node0.isNE());
1186:       assertFalse(node0.isDelProp());
1187:       assertFalse(node0.isGetterDef());
1188:       assertFalse(node0.isIf());
1189:       assertFalse(node0.isName());
1190:       assertFalse(node0.isCall());
1191:       assertFalse(node0.isCatch());
1192:       assertFalse(node0.isFor());
1193:       assertFalse(node0.isBlock());
1194:       assertFalse(node0.isInc());
1195:       assertFalse(node0.isIn());
1196:       assertFalse(node0.isSetterDef());
1197:       assertFalse(node0.isCast());
1198:       assertFalse(node0.isContinue());
1199:       assertFalse(node0.isFalse());
1200:       assertFalse(node0.isThrow());
1201:       assertEquals(40, node0.getType());
1202:       assertFalse(node0.isScript());
1203:       assertFalse(node0.isWith());
1204:       assertFalse(node0.isExprResult());
1205:       assertFalse(node0.isObjectLit());
1206:       assertFalse(node0.isAnd());
1207:       assertFalse(node0.isNot());
1208:       assertEquals(0, node0.getCharno());
1209:       assertFalse(node0.isTypeOf());
1210:       assertFalse(node0.isComma());
1211:       assertFalse(node0.isDec());
1212:       assertFalse(node0.isNumber());
1213:       assertFalse(node0.isBreak());
1214:       assertFalse(node0.isGetProp());
1215:       assertFalse(node0.isGetElem());
1216:       assertFalse(node0.isInstanceOf());
1217:       assertEquals(11, node0.getLineno());
1218:       assertFalse(node0.hasOneChild());
1219:       assertFalse(node0.hasMoreThanOneChild());
1220:       assertFalse(node0.isAssign());
1221:       assertFalse(node0.isWhile());
1222:       assertFalse(node0.hasChildren());
1223:       assertFalse(node0.isReturn());
1224:       assertFalse(node0.isHook());
1225:       assertFalse(node0.isThis());
1226:       assertFalse(node0.isSwitch());
1227:       assertFalse(node0.isDo());
1228:       assertFalse(node0.isAdd());
1229:       assertFalse(node0.isCase());
1230:       assertTrue(node0.isString());
1231:       assertFalse(node0.isNew());
1232:       assertFalse(node0.isOr());
1233:       assertFalse(node0.isStringKey());
1234:       assertFalse(node0.isParamList());
1235:       assertFalse(node0.isLabelName());
1236:       assertFalse(node0.isEmpty());
1237:       assertFalse(node0.isVar());
1238:       assertEquals(0, node0.getChildCount());
1239:       assertEquals(45056, node0.getSourcePosition());
1240:       assertFalse(node0.isAssignAdd());
1241:       assertFalse(node0.isLabel());
1242:       assertFalse(node0.equals((Object)node3));
1243:       assertFalse(node0.equals((Object)node1));
1244:       assertEquals(53, Node.INPUT_ID);
1245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1246:       assertEquals(43, Node.IS_CONSTANT_NAME);
1247:       assertEquals(4095, Node.COLUMN_MASK);
1248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1249:       assertEquals(47, Node.IS_DISPATCHER);
1250:       assertEquals(2, Node.POST_FLAG);
1251:       assertEquals(32, Node.INCRDECR_PROP);
1252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1254:       assertEquals(46, Node.IS_NAMESPACE);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1258:       assertEquals(54, Node.SLASH_V);
1259:       assertEquals(52, Node.LENGTH);
1260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1261:       assertEquals(57, Node.LAST_PROP);
1262:       assertEquals(49, Node.DIRECT_EVAL);
1263:       assertEquals(1, Node.DECR_FLAG);
1264:       assertEquals(40, Node.ORIGINALNAME_PROP);
1265:       assertEquals(12, Node.COLUMN_BITS);
1266:       assertEquals(30, Node.VAR_ARGS_NAME);
1267:       assertEquals(48, Node.DIRECTIVES);
1268:       assertEquals(8, Node.FLAG_NO_THROWS);
1269:       assertEquals(39, Node.EMPTY_BLOCK);
1270:       assertEquals(56, Node.CHANGE_TIME);
1271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1272:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1273:       assertEquals(37, Node.OPT_ARG_NAME);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(55, Node.INFERRED_FUNCTION);
1276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1277:       assertEquals(29, Node.JSDOC_INFO_PROP);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertSame(node0, node2);
1281:       
1282:       boolean boolean1 = node1.isBlock();
1283:       assertFalse(node0.isRegExp());
1284:       assertFalse(node0.isVoid());
1285:       assertFalse(node0.isDefaultCase());
1286:       assertFalse(node0.isFunction());
1287:       assertFalse(node0.isTry());
1288:       assertFalse(node0.isArrayLit());
1289:       assertFalse(node0.isTrue());
1290:       assertFalse(node0.isDebugger());
1291:       assertFalse(node0.isNull());
1292:       assertFalse(node0.isNE());
1293:       assertFalse(node0.isDelProp());
1294:       assertFalse(node0.isGetterDef());
1295:       assertFalse(node0.isIf());
1296:       assertFalse(node0.isName());
1297:       assertFalse(node0.isCall());
1298:       assertFalse(node0.isCatch());
1299:       assertFalse(node0.isFor());
1300:       assertFalse(node0.isBlock());
1301:       assertFalse(node0.isInc());
1302:       assertFalse(node0.isIn());
1303:       assertFalse(node0.isSetterDef());
1304:       assertFalse(node0.isCast());
1305:       assertFalse(node0.isContinue());
1306:       assertFalse(node0.isFalse());
1307:       assertFalse(node0.isThrow());
1308:       assertEquals(40, node0.getType());
1309:       assertFalse(node0.isScript());
1310:       assertFalse(node0.isWith());
1311:       assertFalse(node0.isExprResult());
1312:       assertFalse(node0.isObjectLit());
1313:       assertFalse(node0.isAnd());
1314:       assertFalse(node0.isNot());
1315:       assertEquals(0, node0.getCharno());
1316:       assertFalse(node0.isTypeOf());
1317:       assertFalse(node0.isComma());
1318:       assertFalse(node0.isDec());
1319:       assertFalse(node0.isNumber());
1320:       assertFalse(node0.isBreak());
1321:       assertFalse(node0.isGetProp());
1322:       assertFalse(node0.isGetElem());
1323:       assertFalse(node0.isInstanceOf());
1324:       assertEquals(11, node0.getLineno());
1325:       assertFalse(node0.hasOneChild());
1326:       assertFalse(node0.hasMoreThanOneChild());
1327:       assertFalse(node0.isAssign());
1328:       assertFalse(node0.isWhile());
1329:       assertFalse(node0.hasChildren());
1330:       assertFalse(node0.isReturn());
1331:       assertFalse(node0.isHook());
1332:       assertFalse(node0.isThis());
1333:       assertFalse(node0.isSwitch());
1334:       assertFalse(node0.isDo());
1335:       assertFalse(node0.isAdd());
1336:       assertFalse(node0.isCase());
1337:       assertTrue(node0.isString());
1338:       assertFalse(node0.isNew());
1339:       assertFalse(node0.isOr());
1340:       assertFalse(node0.isStringKey());
1341:       assertFalse(node0.isParamList());
1342:       assertFalse(node0.isLabelName());
1343:       assertFalse(node0.isEmpty());
1344:       assertFalse(node0.isVar());
1345:       assertEquals(0, node0.getChildCount());
1346:       assertEquals(45056, node0.getSourcePosition());
1347:       assertFalse(node0.isAssignAdd());
1348:       assertFalse(node0.isLabel());
1349:       assertFalse(node1.isAnd());
1350:       assertFalse(node1.isWith());
1351:       assertFalse(node1.isObjectLit());
1352:       assertFalse(node1.isNot());
1353:       assertFalse(node1.isInstanceOf());
1354:       assertFalse(node1.isExprResult());
1355:       assertFalse(node1.isScript());
1356:       assertFalse(node1.isGetElem());
1357:       assertFalse(node1.isAssign());
1358:       assertFalse(node1.isNumber());
1359:       assertFalse(node1.isTypeOf());
1360:       assertFalse(node1.isBreak());
1361:       assertFalse(node1.isGetProp());
1362:       assertFalse(node1.isComma());
1363:       assertFalse(node1.isDec());
1364:       assertFalse(node1.isHook());
1365:       assertFalse(node1.isReturn());
1366:       assertFalse(node1.isThis());
1367:       assertFalse(node1.isContinue());
1368:       assertFalse(node1.hasMoreThanOneChild());
1369:       assertFalse(node1.isIn());
1370:       assertFalse(node1.isInc());
1371:       assertFalse(node1.isString());
1372:       assertTrue(node1.hasChildren());
1373:       assertEquals((-1), node1.getLineno());
1374:       assertEquals((-1), node1.getSourcePosition());
1375:       assertFalse(node1.isIf());
1376:       assertFalse(node1.isNE());
1377:       assertFalse(node1.isFalse());
1378:       assertFalse(node1.isSetterDef());
1379:       assertFalse(node1.isCast());
1380:       assertFalse(node1.isFunction());
1381:       assertFalse(node1.isThrow());
1382:       assertFalse(node1.isCatch());
1383:       assertFalse(node1.isDebugger());
1384:       assertFalse(node1.isVoid());
1385:       assertFalse(node1.isNull());
1386:       assertFalse(node1.isTrue());
1387:       assertFalse(node1.isParamList());
1388:       assertFalse(node1.isName());
1389:       assertFalse(node1.isDelProp());
1390:       assertFalse(node1.isGetterDef());
1391:       assertFalse(node1.isCall());
1392:       assertFalse(node1.isBlock());
1393:       assertEquals(1, node1.getChildCount());
1394:       assertFalse(node1.isTry());
1395:       assertFalse(node1.isRegExp());
1396:       assertFalse(node1.isWhile());
1397:       assertTrue(node1.hasOneChild());
1398:       assertFalse(node1.isFor());
1399:       assertFalse(node1.isCase());
1400:       assertFalse(node1.isDo());
1401:       assertEquals(0, node1.getType());
1402:       assertEquals((-1), node1.getCharno());
1403:       assertFalse(node1.isOr());
1404:       assertFalse(node1.isSwitch());
1405:       assertFalse(node1.isStringKey());
1406:       assertFalse(node1.isLabelName());
1407:       assertFalse(node1.isArrayLit());
1408:       assertFalse(node1.isAdd());
1409:       assertFalse(node1.isEmpty());
1410:       assertFalse(node1.isNew());
1411:       assertFalse(node1.isAssignAdd());
1412:       assertFalse(node1.isLabel());
1413:       assertFalse(node1.isDefaultCase());
1414:       assertFalse(node1.isVar());
1415:       assertFalse(node0.equals((Object)node3));
1416:       assertFalse(node0.equals((Object)node1));
1417:       assertFalse(node1.equals((Object)node2));
1418:       assertFalse(node1.equals((Object)node0));
1419:       assertTrue(boolean1 == boolean0);
1420:       assertFalse(boolean1);
1421:       assertEquals(53, Node.INPUT_ID);
1422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1423:       assertEquals(43, Node.IS_CONSTANT_NAME);
1424:       assertEquals(4095, Node.COLUMN_MASK);
1425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1426:       assertEquals(47, Node.IS_DISPATCHER);
1427:       assertEquals(2, Node.POST_FLAG);
1428:       assertEquals(32, Node.INCRDECR_PROP);
1429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1431:       assertEquals(46, Node.IS_NAMESPACE);
1432:       assertEquals(50, Node.FREE_CALL);
1433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1435:       assertEquals(54, Node.SLASH_V);
1436:       assertEquals(52, Node.LENGTH);
1437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1438:       assertEquals(57, Node.LAST_PROP);
1439:       assertEquals(49, Node.DIRECT_EVAL);
1440:       assertEquals(1, Node.DECR_FLAG);
1441:       assertEquals(40, Node.ORIGINALNAME_PROP);
1442:       assertEquals(12, Node.COLUMN_BITS);
1443:       assertEquals(30, Node.VAR_ARGS_NAME);
1444:       assertEquals(48, Node.DIRECTIVES);
1445:       assertEquals(8, Node.FLAG_NO_THROWS);
1446:       assertEquals(39, Node.EMPTY_BLOCK);
1447:       assertEquals(56, Node.CHANGE_TIME);
1448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1450:       assertEquals(37, Node.OPT_ARG_NAME);
1451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1452:       assertEquals(55, Node.INFERRED_FUNCTION);
1453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1454:       assertEquals(29, Node.JSDOC_INFO_PROP);
1455:       assertEquals(57, Node.REFLECTED_OBJECT);
1456:       assertEquals(36, Node.QUOTED_PROP);
1457:       assertEquals(43, Node.IS_CONSTANT_NAME);
1458:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1459:       assertEquals(55, Node.INFERRED_FUNCTION);
1460:       assertEquals(53, Node.INPUT_ID);
1461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1462:       assertEquals(4095, Node.COLUMN_MASK);
1463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1464:       assertEquals(50, Node.FREE_CALL);
1465:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1466:       assertEquals(40, Node.ORIGINALNAME_PROP);
1467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1468:       assertEquals(46, Node.IS_NAMESPACE);
1469:       assertEquals(54, Node.SLASH_V);
1470:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1471:       assertEquals(30, Node.VAR_ARGS_NAME);
1472:       assertEquals(49, Node.DIRECT_EVAL);
1473:       assertEquals(57, Node.LAST_PROP);
1474:       assertEquals(1, Node.DECR_FLAG);
1475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1476:       assertEquals(32, Node.INCRDECR_PROP);
1477:       assertEquals(2, Node.POST_FLAG);
1478:       assertEquals(12, Node.COLUMN_BITS);
1479:       assertEquals(47, Node.IS_DISPATCHER);
1480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1481:       assertEquals(29, Node.JSDOC_INFO_PROP);
1482:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1483:       assertEquals(56, Node.CHANGE_TIME);
1484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1485:       assertEquals(8, Node.FLAG_NO_THROWS);
1486:       assertEquals(37, Node.OPT_ARG_NAME);
1487:       assertEquals(48, Node.DIRECTIVES);
1488:       assertEquals(39, Node.EMPTY_BLOCK);
1489:       assertEquals(52, Node.LENGTH);
1490:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1491:       assertEquals(36, Node.QUOTED_PROP);
1492:       assertEquals(57, Node.REFLECTED_OBJECT);
1493:       assertSame(node0, node2);
1494:       assertSame(node1, node3);
1495:       
1496:       boolean boolean2 = node0.isFromExterns();
1497:       assertFalse(node0.isRegExp());
1498:       assertFalse(node0.isVoid());
1499:       assertFalse(node0.isDefaultCase());
1500:       assertFalse(node0.isFunction());
1501:       assertFalse(node0.isTry());
1502:       assertFalse(node0.isArrayLit());
1503:       assertFalse(node0.isTrue());
1504:       assertFalse(node0.isDebugger());
1505:       assertFalse(node0.isNull());
1506:       assertFalse(node0.isNE());
1507:       assertFalse(node0.isDelProp());
1508:       assertFalse(node0.isGetterDef());
1509:       assertFalse(node0.isIf());
1510:       assertFalse(node0.isName());
1511:       assertFalse(node0.isCall());
1512:       assertFalse(node0.isCatch());
1513:       assertFalse(node0.isFor());
1514:       assertFalse(node0.isBlock());
1515:       assertFalse(node0.isInc());
1516:       assertFalse(node0.isIn());
1517:       assertFalse(node0.isSetterDef());
1518:       assertFalse(node0.isCast());
1519:       assertFalse(node0.isContinue());
1520:       assertFalse(node0.isFalse());
1521:       assertFalse(node0.isThrow());
1522:       assertEquals(40, node0.getType());
1523:       assertFalse(node0.isScript());
1524:       assertFalse(node0.isWith());
1525:       assertFalse(node0.isExprResult());
1526:       assertFalse(node0.isObjectLit());
1527:       assertFalse(node0.isAnd());
1528:       assertFalse(node0.isNot());
1529:       assertEquals(0, node0.getCharno());
1530:       assertFalse(node0.isTypeOf());
1531:       assertFalse(node0.isComma());
1532:       assertFalse(node0.isDec());
1533:       assertFalse(node0.isNumber());
1534:       assertFalse(node0.isBreak());
1535:       assertFalse(node0.isGetProp());
1536:       assertFalse(node0.isGetElem());
1537:       assertFalse(node0.isInstanceOf());
1538:       assertEquals(11, node0.getLineno());
1539:       assertFalse(node0.hasOneChild());
1540:       assertFalse(node0.hasMoreThanOneChild());
1541:       assertFalse(node0.isAssign());
1542:       assertFalse(node0.isWhile());
1543:       assertFalse(node0.hasChildren());
1544:       assertFalse(node0.isReturn());
1545:       assertFalse(node0.isHook());
1546:       assertFalse(node0.isThis());
1547:       assertFalse(node0.isSwitch());
1548:       assertFalse(node0.isDo());
1549:       assertFalse(node0.isAdd());
1550:       assertFalse(node0.isCase());
1551:       assertTrue(node0.isString());
1552:       assertFalse(node0.isNew());
1553:       assertFalse(node0.isOr());
1554:       assertFalse(node0.isStringKey());
1555:       assertFalse(node0.isParamList());
1556:       assertFalse(node0.isLabelName());
1557:       assertFalse(node0.isEmpty());
1558:       assertFalse(node0.isVar());
1559:       assertEquals(0, node0.getChildCount());
1560:       assertEquals(45056, node0.getSourcePosition());
1561:       assertFalse(node0.isAssignAdd());
1562:       assertFalse(node0.isLabel());
1563:       assertFalse(node0.equals((Object)node3));
1564:       assertFalse(node0.equals((Object)node1));
1565:       assertTrue(boolean2 == boolean1);
1566:       assertTrue(boolean2 == boolean0);
1567:       assertFalse(boolean2);
1568:       assertEquals(53, Node.INPUT_ID);
1569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1570:       assertEquals(43, Node.IS_CONSTANT_NAME);
1571:       assertEquals(4095, Node.COLUMN_MASK);
1572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1573:       assertEquals(47, Node.IS_DISPATCHER);
1574:       assertEquals(2, Node.POST_FLAG);
1575:       assertEquals(32, Node.INCRDECR_PROP);
1576:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1578:       assertEquals(46, Node.IS_NAMESPACE);
1579:       assertEquals(50, Node.FREE_CALL);
1580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1581:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1582:       assertEquals(54, Node.SLASH_V);
1583:       assertEquals(52, Node.LENGTH);
1584:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1585:       assertEquals(57, Node.LAST_PROP);
1586:       assertEquals(49, Node.DIRECT_EVAL);
1587:       assertEquals(1, Node.DECR_FLAG);
1588:       assertEquals(40, Node.ORIGINALNAME_PROP);
1589:       assertEquals(12, Node.COLUMN_BITS);
1590:       assertEquals(30, Node.VAR_ARGS_NAME);
1591:       assertEquals(48, Node.DIRECTIVES);
1592:       assertEquals(8, Node.FLAG_NO_THROWS);
1593:       assertEquals(39, Node.EMPTY_BLOCK);
1594:       assertEquals(56, Node.CHANGE_TIME);
1595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1597:       assertEquals(37, Node.OPT_ARG_NAME);
1598:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1599:       assertEquals(55, Node.INFERRED_FUNCTION);
1600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1601:       assertEquals(29, Node.JSDOC_INFO_PROP);
1602:       assertEquals(57, Node.REFLECTED_OBJECT);
1603:       assertEquals(36, Node.QUOTED_PROP);
1604:       assertSame(node0, node2);
1605:       
1606:       boolean boolean3 = node0.isNew();
1607:       assertFalse(node0.isRegExp());
1608:       assertFalse(node0.isVoid());
1609:       assertFalse(node0.isDefaultCase());
1610:       assertFalse(node0.isFunction());
1611:       assertFalse(node0.isTry());
1612:       assertFalse(node0.isArrayLit());
1613:       assertFalse(node0.isTrue());
1614:       assertFalse(node0.isDebugger());
1615:       assertFalse(node0.isNull());
1616:       assertFalse(node0.isNE());
1617:       assertFalse(node0.isDelProp());
1618:       assertFalse(node0.isGetterDef());
1619:       assertFalse(node0.isIf());
1620:       assertFalse(node0.isName());
1621:       assertFalse(node0.isCall());
1622:       assertFalse(node0.isCatch());
1623:       assertFalse(node0.isFor());
1624:       assertFalse(node0.isBlock());
1625:       assertFalse(node0.isInc());
1626:       assertFalse(node0.isIn());
1627:       assertFalse(node0.isSetterDef());
1628:       assertFalse(node0.isCast());
1629:       assertFalse(node0.isContinue());
1630:       assertFalse(node0.isFalse());
1631:       assertFalse(node0.isThrow());
1632:       assertEquals(40, node0.getType());
1633:       assertFalse(node0.isScript());
1634:       assertFalse(node0.isWith());
1635:       assertFalse(node0.isExprResult());
1636:       assertFalse(node0.isObjectLit());
1637:       assertFalse(node0.isAnd());
1638:       assertFalse(node0.isNot());
1639:       assertEquals(0, node0.getCharno());
1640:       assertFalse(node0.isTypeOf());
1641:       assertFalse(node0.isComma());
1642:       assertFalse(node0.isDec());
1643:       assertFalse(node0.isNumber());
1644:       assertFalse(node0.isBreak());
1645:       assertFalse(node0.isGetProp());
1646:       assertFalse(node0.isGetElem());
1647:       assertFalse(node0.isInstanceOf());
1648:       assertEquals(11, node0.getLineno());
1649:       assertFalse(node0.hasOneChild());
1650:       assertFalse(node0.hasMoreThanOneChild());
1651:       assertFalse(node0.isAssign());
1652:       assertFalse(node0.isWhile());
1653:       assertFalse(node0.hasChildren());
1654:       assertFalse(node0.isReturn());
1655:       assertFalse(node0.isHook());
1656:       assertFalse(node0.isThis());
1657:       assertFalse(node0.isSwitch());
1658:       assertFalse(node0.isDo());
1659:       assertFalse(node0.isAdd());
1660:       assertFalse(node0.isCase());
1661:       assertTrue(node0.isString());
1662:       assertFalse(node0.isNew());
1663:       assertFalse(node0.isOr());
1664:       assertFalse(node0.isStringKey());
1665:       assertFalse(node0.isParamList());
1666:       assertFalse(node0.isLabelName());
1667:       assertFalse(node0.isEmpty());
1668:       assertFalse(node0.isVar());
1669:       assertEquals(0, node0.getChildCount());
1670:       assertEquals(45056, node0.getSourcePosition());
1671:       assertFalse(node0.isAssignAdd());
1672:       assertFalse(node0.isLabel());
1673:       assertFalse(node0.equals((Object)node3));
1674:       assertFalse(node0.equals((Object)node1));
1675:       assertTrue(boolean3 == boolean0);
1676:       assertTrue(boolean3 == boolean2);
1677:       assertTrue(boolean3 == boolean1);
1678:       assertFalse(boolean3);
1679:       assertEquals(53, Node.INPUT_ID);
1680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1681:       assertEquals(43, Node.IS_CONSTANT_NAME);
1682:       assertEquals(4095, Node.COLUMN_MASK);
1683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1684:       assertEquals(47, Node.IS_DISPATCHER);
1685:       assertEquals(2, Node.POST_FLAG);
1686:       assertEquals(32, Node.INCRDECR_PROP);
1687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1688:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1689:       assertEquals(46, Node.IS_NAMESPACE);
1690:       assertEquals(50, Node.FREE_CALL);
1691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1692:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1693:       assertEquals(54, Node.SLASH_V);
1694:       assertEquals(52, Node.LENGTH);
1695:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1696:       assertEquals(57, Node.LAST_PROP);
1697:       assertEquals(49, Node.DIRECT_EVAL);
1698:       assertEquals(1, Node.DECR_FLAG);
1699:       assertEquals(40, Node.ORIGINALNAME_PROP);
1700:       assertEquals(12, Node.COLUMN_BITS);
1701:       assertEquals(30, Node.VAR_ARGS_NAME);
1702:       assertEquals(48, Node.DIRECTIVES);
1703:       assertEquals(8, Node.FLAG_NO_THROWS);
1704:       assertEquals(39, Node.EMPTY_BLOCK);
1705:       assertEquals(56, Node.CHANGE_TIME);
1706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1710:       assertEquals(55, Node.INFERRED_FUNCTION);
1711:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1712:       assertEquals(29, Node.JSDOC_INFO_PROP);
1713:       assertEquals(57, Node.REFLECTED_OBJECT);
1714:       assertEquals(36, Node.QUOTED_PROP);
1715:       assertSame(node0, node2);
1716:       
1717:       boolean boolean4 = node3.isTypeOf();
1718:       assertFalse(node0.isRegExp());
1719:       assertFalse(node0.isVoid());
1720:       assertFalse(node0.isDefaultCase());
1721:       assertFalse(node0.isFunction());
1722:       assertFalse(node0.isTry());
1723:       assertFalse(node0.isArrayLit());
1724:       assertFalse(node0.isTrue());
1725:       assertFalse(node0.isDebugger());
1726:       assertFalse(node0.isNull());
1727:       assertFalse(node0.isNE());
1728:       assertFalse(node0.isDelProp());
1729:       assertFalse(node0.isGetterDef());
1730:       assertFalse(node0.isIf());
1731:       assertFalse(node0.isName());
1732:       assertFalse(node0.isCall());
1733:       assertFalse(node0.isCatch());
1734:       assertFalse(node0.isFor());
1735:       assertFalse(node0.isBlock());
1736:       assertFalse(node0.isInc());
1737:       assertFalse(node0.isIn());
1738:       assertFalse(node0.isSetterDef());
1739:       assertFalse(node0.isCast());
1740:       assertFalse(node0.isContinue());
1741:       assertFalse(node0.isFalse());
1742:       assertFalse(node0.isThrow());
1743:       assertEquals(40, node0.getType());
1744:       assertFalse(node0.isScript());
1745:       assertFalse(node0.isWith());
1746:       assertFalse(node0.isExprResult());
1747:       assertFalse(node0.isObjectLit());
1748:       assertFalse(node0.isAnd());
1749:       assertFalse(node0.isNot());
1750:       assertEquals(0, node0.getCharno());
1751:       assertFalse(node0.isTypeOf());
1752:       assertFalse(node0.isComma());
1753:       assertFalse(node0.isDec());
1754:       assertFalse(node0.isNumber());
1755:       assertFalse(node0.isBreak());
1756:       assertFalse(node0.isGetProp());
1757:       assertFalse(node0.isGetElem());
1758:       assertFalse(node0.isInstanceOf());
1759:       assertEquals(11, node0.getLineno());
1760:       assertFalse(node0.hasOneChild());
1761:       assertFalse(node0.hasMoreThanOneChild());
1762:       assertFalse(node0.isAssign());
1763:       assertFalse(node0.isWhile());
1764:       assertFalse(node0.hasChildren());
1765:       assertFalse(node0.isReturn());
1766:       assertFalse(node0.isHook());
1767:       assertFalse(node0.isThis());
1768:       assertFalse(node0.isSwitch());
1769:       assertFalse(node0.isDo());
1770:       assertFalse(node0.isAdd());
1771:       assertFalse(node0.isCase());
1772:       assertTrue(node0.isString());
1773:       assertFalse(node0.isNew());
1774:       assertFalse(node0.isOr());
1775:       assertFalse(node0.isStringKey());
1776:       assertFalse(node0.isParamList());
1777:       assertFalse(node0.isLabelName());
1778:       assertFalse(node0.isEmpty());
1779:       assertFalse(node0.isVar());
1780:       assertEquals(0, node0.getChildCount());
1781:       assertEquals(45056, node0.getSourcePosition());
1782:       assertFalse(node0.isAssignAdd());
1783:       assertFalse(node0.isLabel());
1784:       assertFalse(node1.isAnd());
1785:       assertFalse(node1.isWith());
1786:       assertFalse(node1.isObjectLit());
1787:       assertFalse(node1.isNot());
1788:       assertFalse(node1.isInstanceOf());
1789:       assertFalse(node1.isExprResult());
1790:       assertFalse(node1.isScript());
1791:       assertFalse(node1.isGetElem());
1792:       assertFalse(node1.isAssign());
1793:       assertFalse(node1.isNumber());
1794:       assertFalse(node1.isTypeOf());
1795:       assertFalse(node1.isBreak());
1796:       assertFalse(node1.isGetProp());
1797:       assertFalse(node1.isComma());
1798:       assertFalse(node1.isDec());
1799:       assertFalse(node1.isHook());
1800:       assertFalse(node1.isReturn());
1801:       assertFalse(node1.isThis());
1802:       assertFalse(node1.isContinue());
1803:       assertFalse(node1.hasMoreThanOneChild());
1804:       assertFalse(node1.isIn());
1805:       assertFalse(node1.isInc());
1806:       assertFalse(node1.isString());
1807:       assertTrue(node1.hasChildren());
1808:       assertEquals((-1), node1.getLineno());
1809:       assertEquals((-1), node1.getSourcePosition());
1810:       assertFalse(node1.isIf());
1811:       assertFalse(node1.isNE());
1812:       assertFalse(node1.isFalse());
1813:       assertFalse(node1.isSetterDef());
1814:       assertFalse(node1.isCast());
1815:       assertFalse(node1.isFunction());
1816:       assertFalse(node1.isThrow());
1817:       assertFalse(node1.isCatch());
1818:       assertFalse(node1.isDebugger());
1819:       assertFalse(node1.isVoid());
1820:       assertFalse(node1.isNull());
1821:       assertFalse(node1.isTrue());
1822:       assertFalse(node1.isParamList());
1823:       assertFalse(node1.isName());
1824:       assertFalse(node1.isDelProp());
1825:       assertFalse(node1.isGetterDef());
1826:       assertFalse(node1.isCall());
1827:       assertFalse(node1.isBlock());
1828:       assertEquals(1, node1.getChildCount());
1829:       assertFalse(node1.isTry());
1830:       assertFalse(node1.isRegExp());
1831:       assertFalse(node1.isWhile());
1832:       assertTrue(node1.hasOneChild());
1833:       assertFalse(node1.isFor());
1834:       assertFalse(node1.isCase());
1835:       assertFalse(node1.isDo());
1836:       assertEquals(0, node1.getType());
1837:       assertEquals((-1), node1.getCharno());
1838:       assertFalse(node1.isOr());
1839:       assertFalse(node1.isSwitch());
1840:       assertFalse(node1.isStringKey());
1841:       assertFalse(node1.isLabelName());
1842:       assertFalse(node1.isArrayLit());
1843:       assertFalse(node1.isAdd());
1844:       assertFalse(node1.isEmpty());
1845:       assertFalse(node1.isNew());
1846:       assertFalse(node1.isAssignAdd());
1847:       assertFalse(node1.isLabel());
1848:       assertFalse(node1.isDefaultCase());
1849:       assertFalse(node1.isVar());
1850:       assertFalse(node3.isIn());
1851:       assertTrue(node3.hasChildren());
1852:       assertFalse(node3.isCase());
1853:       assertFalse(node3.isSwitch());
1854:       assertFalse(node3.isNE());
1855:       assertFalse(node3.isInc());
1856:       assertFalse(node3.isIf());
1857:       assertFalse(node3.isString());
1858:       assertFalse(node3.isGetterDef());
1859:       assertEquals((-1), node3.getCharno());
1860:       assertFalse(node3.isDelProp());
1861:       assertEquals(0, node3.getType());
1862:       assertFalse(node3.isTry());
1863:       assertFalse(node3.isBreak());
1864:       assertFalse(node3.isComma());
1865:       assertFalse(node3.isThis());
1866:       assertFalse(node3.isRegExp());
1867:       assertTrue(node3.hasOneChild());
1868:       assertFalse(node3.isFor());
1869:       assertFalse(node3.isHook());
1870:       assertEquals(1, node3.getChildCount());
1871:       assertFalse(node3.isCatch());
1872:       assertFalse(node3.isObjectLit());
1873:       assertFalse(node3.isInstanceOf());
1874:       assertFalse(node3.isAnd());
1875:       assertFalse(node3.isGetProp());
1876:       assertFalse(node3.isSetterDef());
1877:       assertFalse(node3.isNot());
1878:       assertFalse(node3.isDebugger());
1879:       assertFalse(node3.isCast());
1880:       assertFalse(node3.isThrow());
1881:       assertFalse(node3.isFalse());
1882:       assertFalse(node3.isFunction());
1883:       assertFalse(node3.hasMoreThanOneChild());
1884:       assertFalse(node3.isContinue());
1885:       assertFalse(node3.isAssignAdd());
1886:       assertFalse(node3.isDo());
1887:       assertEquals((-1), node3.getLineno());
1888:       assertFalse(node3.isNumber());
1889:       assertFalse(node3.isOr());
1890:       assertEquals((-1), node3.getSourcePosition());
1891:       assertFalse(node3.isCall());
1892:       assertFalse(node3.isName());
1893:       assertFalse(node3.isGetElem());
1894:       assertFalse(node3.isExprResult());
1895:       assertFalse(node3.isTypeOf());
1896:       assertFalse(node3.isWhile());
1897:       assertFalse(node3.isReturn());
1898:       assertFalse(node3.isAssign());
1899:       assertFalse(node3.isWith());
1900:       assertFalse(node3.isBlock());
1901:       assertFalse(node3.isDec());
1902:       assertFalse(node3.isTrue());
1903:       assertFalse(node3.isNull());
1904:       assertFalse(node3.isVoid());
1905:       assertFalse(node3.isScript());
1906:       assertFalse(node3.isParamList());
1907:       assertFalse(node3.isVar());
1908:       assertFalse(node3.isStringKey());
1909:       assertFalse(node3.isLabelName());
1910:       assertFalse(node3.isAdd());
1911:       assertFalse(node3.isEmpty());
1912:       assertFalse(node3.isNew());
1913:       assertFalse(node3.isArrayLit());
1914:       assertFalse(node3.isDefaultCase());
1915:       assertFalse(node3.isLabel());
1916:       assertFalse(node0.equals((Object)node3));
1917:       assertFalse(node0.equals((Object)node1));
1918:       assertFalse(node1.equals((Object)node2));
1919:       assertFalse(node1.equals((Object)node0));
1920:       assertFalse(node3.equals((Object)node0));
1921:       assertFalse(node3.equals((Object)node2));
1922:       assertTrue(boolean4 == boolean2);
1923:       assertTrue(boolean4 == boolean0);
1924:       assertTrue(boolean4 == boolean3);
1925:       assertTrue(boolean4 == boolean1);
1926:       assertFalse(boolean4);
1927:       assertEquals(53, Node.INPUT_ID);
1928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1929:       assertEquals(43, Node.IS_CONSTANT_NAME);
1930:       assertEquals(4095, Node.COLUMN_MASK);
1931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1932:       assertEquals(47, Node.IS_DISPATCHER);
1933:       assertEquals(2, Node.POST_FLAG);
1934:       assertEquals(32, Node.INCRDECR_PROP);
1935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1937:       assertEquals(46, Node.IS_NAMESPACE);
1938:       assertEquals(50, Node.FREE_CALL);
1939:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1941:       assertEquals(54, Node.SLASH_V);
1942:       assertEquals(52, Node.LENGTH);
1943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1944:       assertEquals(57, Node.LAST_PROP);
1945:       assertEquals(49, Node.DIRECT_EVAL);
1946:       assertEquals(1, Node.DECR_FLAG);
1947:       assertEquals(40, Node.ORIGINALNAME_PROP);
1948:       assertEquals(12, Node.COLUMN_BITS);
1949:       assertEquals(30, Node.VAR_ARGS_NAME);
1950:       assertEquals(48, Node.DIRECTIVES);
1951:       assertEquals(8, Node.FLAG_NO_THROWS);
1952:       assertEquals(39, Node.EMPTY_BLOCK);
1953:       assertEquals(56, Node.CHANGE_TIME);
1954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1955:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1956:       assertEquals(37, Node.OPT_ARG_NAME);
1957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1958:       assertEquals(55, Node.INFERRED_FUNCTION);
1959:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1960:       assertEquals(29, Node.JSDOC_INFO_PROP);
1961:       assertEquals(57, Node.REFLECTED_OBJECT);
1962:       assertEquals(36, Node.QUOTED_PROP);
1963:       assertEquals(43, Node.IS_CONSTANT_NAME);
1964:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1965:       assertEquals(55, Node.INFERRED_FUNCTION);
1966:       assertEquals(53, Node.INPUT_ID);
1967:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1968:       assertEquals(4095, Node.COLUMN_MASK);
1969:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1970:       assertEquals(50, Node.FREE_CALL);
1971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1972:       assertEquals(40, Node.ORIGINALNAME_PROP);
1973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1974:       assertEquals(46, Node.IS_NAMESPACE);
1975:       assertEquals(54, Node.SLASH_V);
1976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1977:       assertEquals(30, Node.VAR_ARGS_NAME);
1978:       assertEquals(49, Node.DIRECT_EVAL);
1979:       assertEquals(57, Node.LAST_PROP);
1980:       assertEquals(1, Node.DECR_FLAG);
1981:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1982:       assertEquals(32, Node.INCRDECR_PROP);
1983:       assertEquals(2, Node.POST_FLAG);
1984:       assertEquals(12, Node.COLUMN_BITS);
1985:       assertEquals(47, Node.IS_DISPATCHER);
1986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1987:       assertEquals(29, Node.JSDOC_INFO_PROP);
1988:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1989:       assertEquals(56, Node.CHANGE_TIME);
1990:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1991:       assertEquals(8, Node.FLAG_NO_THROWS);
1992:       assertEquals(37, Node.OPT_ARG_NAME);
1993:       assertEquals(48, Node.DIRECTIVES);
1994:       assertEquals(39, Node.EMPTY_BLOCK);
1995:       assertEquals(52, Node.LENGTH);
1996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1997:       assertEquals(36, Node.QUOTED_PROP);
1998:       assertEquals(57, Node.REFLECTED_OBJECT);
1999:       assertEquals(1, Node.DECR_FLAG);
2000:       assertEquals(12, Node.COLUMN_BITS);
2001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2002:       assertEquals(57, Node.LAST_PROP);
2003:       assertEquals(49, Node.DIRECT_EVAL);
2004:       assertEquals(32, Node.INCRDECR_PROP);
2005:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2006:       assertEquals(37, Node.OPT_ARG_NAME);
2007:       assertEquals(47, Node.IS_DISPATCHER);
2008:       assertEquals(30, Node.VAR_ARGS_NAME);
2009:       assertEquals(2, Node.POST_FLAG);
2010:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2011:       assertEquals(40, Node.ORIGINALNAME_PROP);
2012:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2013:       assertEquals(46, Node.IS_NAMESPACE);
2014:       assertEquals(54, Node.SLASH_V);
2015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2016:       assertEquals(50, Node.FREE_CALL);
2017:       assertEquals(55, Node.INFERRED_FUNCTION);
2018:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2019:       assertEquals(43, Node.IS_CONSTANT_NAME);
2020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2021:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2022:       assertEquals(4095, Node.COLUMN_MASK);
2023:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2024:       assertEquals(29, Node.JSDOC_INFO_PROP);
2025:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2026:       assertEquals(56, Node.CHANGE_TIME);
2027:       assertEquals(48, Node.DIRECTIVES);
2028:       assertEquals(53, Node.INPUT_ID);
2029:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2030:       assertEquals(39, Node.EMPTY_BLOCK);
2031:       assertEquals(36, Node.QUOTED_PROP);
2032:       assertEquals(57, Node.REFLECTED_OBJECT);
2033:       assertEquals(52, Node.LENGTH);
2034:       assertEquals(8, Node.FLAG_NO_THROWS);
2035:       assertSame(node0, node2);
2036:       assertSame(node1, node3);
2037:       assertSame(node3, node1);
2038:       
2039:       Iterable<Node> iterable0 = node0.children();
2040:       assertFalse(node0.isRegExp());
2041:       assertFalse(node0.isVoid());
2042:       assertFalse(node0.isDefaultCase());
2043:       assertFalse(node0.isFunction());
2044:       assertFalse(node0.isTry());
2045:       assertFalse(node0.isArrayLit());
2046:       assertFalse(node0.isTrue());
2047:       assertFalse(node0.isDebugger());
2048:       assertFalse(node0.isNull());
2049:       assertFalse(node0.isNE());
2050:       assertFalse(node0.isDelProp());
2051:       assertFalse(node0.isGetterDef());
2052:       assertFalse(node0.isIf());
2053:       assertFalse(node0.isName());
2054:       assertFalse(node0.isCall());
2055:       assertFalse(node0.isCatch());
2056:       assertFalse(node0.isFor());
2057:       assertFalse(node0.isBlock());
2058:       assertFalse(node0.isInc());
2059:       assertFalse(node0.isIn());
2060:       assertFalse(node0.isSetterDef());
2061:       assertFalse(node0.isCast());
2062:       assertFalse(node0.isContinue());
2063:       assertFalse(node0.isFalse());
2064:       assertFalse(node0.isThrow());
2065:       assertEquals(40, node0.getType());
2066:       assertFalse(node0.isScript());
2067:       assertFalse(node0.isWith());
2068:       assertFalse(node0.isExprResult());
2069:       assertFalse(node0.isObjectLit());
2070:       assertFalse(node0.isAnd());
2071:       assertFalse(node0.isNot());
2072:       assertEquals(0, node0.getCharno());
2073:       assertFalse(node0.isTypeOf());
2074:       assertFalse(node0.isComma());
2075:       assertFalse(node0.isDec());
2076:       assertFalse(node0.isNumber());
2077:       assertFalse(node0.isBreak());
2078:       assertFalse(node0.isGetProp());
2079:       assertFalse(node0.isGetElem());
2080:       assertFalse(node0.isInstanceOf());
2081:       assertEquals(11, node0.getLineno());
2082:       assertFalse(node0.hasOneChild());
2083:       assertFalse(node0.hasMoreThanOneChild());
2084:       assertFalse(node0.isAssign());
2085:       assertFalse(node0.isWhile());
2086:       assertFalse(node0.hasChildren());
2087:       assertFalse(node0.isReturn());
2088:       assertFalse(node0.isHook());
2089:       assertFalse(node0.isThis());
2090:       assertFalse(node0.isSwitch());
2091:       assertFalse(node0.isDo());
2092:       assertFalse(node0.isAdd());
2093:       assertFalse(node0.isCase());
2094:       assertTrue(node0.isString());
2095:       assertFalse(node0.isNew());
2096:       assertFalse(node0.isOr());
2097:       assertFalse(node0.isStringKey());
2098:       assertFalse(node0.isParamList());
2099:       assertFalse(node0.isLabelName());
2100:       assertFalse(node0.isEmpty());
2101:       assertFalse(node0.isVar());
2102:       assertEquals(0, node0.getChildCount());
2103:       assertEquals(45056, node0.getSourcePosition());
2104:       assertFalse(node0.isAssignAdd());
2105:       assertFalse(node0.isLabel());
2106:       assertFalse(node0.equals((Object)node3));
2107:       assertFalse(node0.equals((Object)node1));
2108:       assertNotNull(iterable0);
2109:       assertFalse(iterable0.contains(node1));
2110:       assertEquals(53, Node.INPUT_ID);
2111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2112:       assertEquals(43, Node.IS_CONSTANT_NAME);
2113:       assertEquals(4095, Node.COLUMN_MASK);
2114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2115:       assertEquals(47, Node.IS_DISPATCHER);
2116:       assertEquals(2, Node.POST_FLAG);
2117:       assertEquals(32, Node.INCRDECR_PROP);
2118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2120:       assertEquals(46, Node.IS_NAMESPACE);
2121:       assertEquals(50, Node.FREE_CALL);
2122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2123:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2124:       assertEquals(54, Node.SLASH_V);
2125:       assertEquals(52, Node.LENGTH);
2126:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2127:       assertEquals(57, Node.LAST_PROP);
2128:       assertEquals(49, Node.DIRECT_EVAL);
2129:       assertEquals(1, Node.DECR_FLAG);
2130:       assertEquals(40, Node.ORIGINALNAME_PROP);
2131:       assertEquals(12, Node.COLUMN_BITS);
2132:       assertEquals(30, Node.VAR_ARGS_NAME);
2133:       assertEquals(48, Node.DIRECTIVES);
2134:       assertEquals(8, Node.FLAG_NO_THROWS);
2135:       assertEquals(39, Node.EMPTY_BLOCK);
2136:       assertEquals(56, Node.CHANGE_TIME);
2137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2139:       assertEquals(37, Node.OPT_ARG_NAME);
2140:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2141:       assertEquals(55, Node.INFERRED_FUNCTION);
2142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2143:       assertEquals(29, Node.JSDOC_INFO_PROP);
2144:       assertEquals(57, Node.REFLECTED_OBJECT);
2145:       assertEquals(36, Node.QUOTED_PROP);
2146:       assertSame(node0, node2);
2147:   }
2148: }
RegularFileObject[/tmp/EvoSuite_168_1628160171305/com/google/javascript/rhino/Node_168_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:42:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_168_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_168_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_168_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.JSDocInfo",
262:       "com.google.common.base.Preconditions",
263:       "com.google.javascript.rhino.SimpleErrorReporter",
264:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
265:       "com.google.common.base.Joiner",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.jstype.ArrowType",
317:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
318:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
319:       "com.google.javascript.rhino.jstype.InstanceObjectType",
320:       "com.google.javascript.rhino.jstype.Property",
321:       "com.google.common.collect.Lists",
322:       "com.google.javascript.rhino.jstype.NoObjectType",
323:       "com.google.javascript.rhino.jstype.NoType",
324:       "com.google.javascript.rhino.jstype.NoResolvedType",
325:       "com.google.common.collect.SingletonImmutableList",
326:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
327:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
328:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
329:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
330:       "com.google.javascript.rhino.jstype.UnionType",
331:       "com.google.javascript.rhino.jstype.FunctionBuilder",
332:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.base.Objects",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.TemplatizedType",
339:       "com.google.common.collect.Iterables",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.jstype.NamedType",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractMultimap$Values",
347:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
348:       "com.google.common.collect.AbstractMapBasedMultimap$1",
349:       "com.google.common.collect.Multimaps$Entries",
350:       "com.google.common.collect.AbstractMultimap$Entries",
351:       "com.google.common.collect.AbstractMapBasedMultimap$2",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.Iterators$12",
356:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.ImmutableSet",
360:       "com.google.common.collect.EmptyImmutableSet",
361:       "com.google.javascript.rhino.jstype.NamespaceType",
362:       "com.google.common.collect.ImmutableList$1",
363:       "com.google.common.collect.Platform"
364:     );
365:   }
366: }

[MASTER] 10:42:51.732 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.common.base.Joiner$2");
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Node node1 = new Node(0, node0, node0);
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

Node node2 = node0.srcrefTree(node1);
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isRegExp());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertSame(node0, node2);
assertSame(node2, node0);

boolean boolean0 = node1.getBooleanProp(0);
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertSame(node0, node2);

Node node3 = node1.srcref(node0);
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isString());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDelProp());
assertEquals(0, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isBlock());
assertFalse(node3.isDec());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertNotNull(node3);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertSame(node0, node2);
assertSame(node1, node3);
assertSame(node3, node1);

node0.setLineno(11);
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals(0, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertEquals(11, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(45056, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertSame(node0, node2);

boolean boolean1 = node1.isBlock();
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals(0, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertEquals(11, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(45056, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertSame(node0, node2);
assertSame(node1, node3);

boolean boolean2 = node0.isFromExterns();
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals(0, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertEquals(11, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(45056, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertSame(node0, node2);

boolean boolean3 = node0.isNew();
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals(0, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertEquals(11, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(45056, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertSame(node0, node2);

boolean boolean4 = node3.isTypeOf();
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals(0, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertEquals(11, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(45056, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertEquals(0, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node3.isIn());
assertTrue(node3.hasChildren());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isString());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDelProp());
assertEquals(0, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isBlock());
assertFalse(node3.isDec());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertSame(node0, node2);
assertSame(node1, node3);
assertSame(node3, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertEquals(0, node0.getCharno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertEquals(11, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(45056, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertSame(node0, node2);


[MASTER] 10:43:11.381 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:11.645 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:11.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:12.169 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:12.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:12.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:13.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:13.819 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:14.027 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:14.252 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:14.458 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:14.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:14.863 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:15.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:15.302 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:15.507 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:15.758 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:15.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:16.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:16.333 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:16.508 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:16.711 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:16.931 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:17.122 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:17.317 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:17.555 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:17.752 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:17.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:18.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:18.393 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:18.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:18.773 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:18.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:19.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:20.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:20.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:20.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:20.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:20.760 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:20.957 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:43:21.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/18
* Done!

* Computation finished
