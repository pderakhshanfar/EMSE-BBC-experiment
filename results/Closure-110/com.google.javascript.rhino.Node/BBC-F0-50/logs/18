* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 15066
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3177319865
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:45:14.359 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:45:18.883 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1919: com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;:566 - ReplaceComparisonOperator <= -> ==
[MASTER] 17:45:18.899 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;
[MASTER] 17:45:38.869 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:52:01.721 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* Search finished after 605s and 487 generations, 236606 statements, best individual has fitness: 2749.0
* Minimizing test suite
[MASTER] 17:56:45.281 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 792
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 601
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 110
* Number of covered goals: 110
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 530
* Number of covered goals: 453
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2362
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 564
* Generated 810 tests with total length 11444
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:58:00.482 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6745666666666666% of time used, but only 33/810 tests minimized), falling back to using all assertions
[MASTER] 17:58:20.075 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 17:58:32.404 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 17:58:53.967 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1629223133722/com/google/javascript/rhino/Node_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1629223133722/com/google/javascript/rhino/Node_115_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:53.967 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:53.967 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:53.972 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1779
[MASTER] 17:58:53.974 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1629223133722/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_115_tmp__ESTest extends Node_115_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("com.google.common.base.Joiner$1");
21:       assertFalse(node0.isSwitch());
22:       assertFalse(node0.isInc());
23:       assertFalse(node0.isCase());
24:       assertFalse(node0.isThrow());
25:       assertFalse(node0.isHook());
26:       assertFalse(node0.isEmpty());
27:       assertFalse(node0.isDelProp());
28:       assertFalse(node0.isIf());
29:       assertFalse(node0.isBreak());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isNE());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isCatch());
36:       assertFalse(node0.isScript());
37:       assertEquals(0, node0.getChildCount());
38:       assertFalse(node0.isTry());
39:       assertFalse(node0.isInstanceOf());
40:       assertFalse(node0.isThis());
41:       assertFalse(node0.isRegExp());
42:       assertFalse(node0.isLabelName());
43:       assertFalse(node0.isGetterDef());
44:       assertFalse(node0.isFor());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isNumber());
47:       assertFalse(node0.hasOneChild());
48:       assertFalse(node0.isArrayLit());
49:       assertFalse(node0.isParamList());
50:       assertEquals((-1), node0.getCharno());
51:       assertFalse(node0.isWhile());
52:       assertFalse(node0.isDo());
53:       assertFalse(node0.isContinue());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isReturn());
56:       assertTrue(node0.isString());
57:       assertFalse(node0.isAssignAdd());
58:       assertFalse(node0.hasMoreThanOneChild());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isBlock());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isTypeOf());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isCall());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isGetElem());
70:       assertEquals((-1), node0.getLineno());
71:       assertFalse(node0.isOr());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isNot());
75:       assertFalse(node0.isAnd());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isVoid());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isFunction());
80:       assertEquals(40, node0.getType());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isObjectLit());
85:       assertEquals((-1), node0.getSourcePosition());
86:       assertFalse(node0.isDebugger());
87:       assertEquals(51, Node.STATIC_SOURCE_FILE);
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(1, Node.DECR_FLAG);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(46, Node.IS_NAMESPACE);
94:       assertEquals(54, Node.SLASH_V);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(55, Node.INFERRED_FUNCTION);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(0, node0, node0);
126:       assertFalse(node0.isSwitch());
127:       assertFalse(node0.isInc());
128:       assertFalse(node0.isCase());
129:       assertFalse(node0.isThrow());
130:       assertFalse(node0.isHook());
131:       assertFalse(node0.isEmpty());
132:       assertFalse(node0.isDelProp());
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isBreak());
135:       assertFalse(node0.isIn());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isNE());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.isDefaultCase());
140:       assertFalse(node0.isCatch());
141:       assertFalse(node0.isScript());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isTry());
144:       assertFalse(node0.isInstanceOf());
145:       assertFalse(node0.isThis());
146:       assertFalse(node0.isRegExp());
147:       assertFalse(node0.isLabelName());
148:       assertFalse(node0.isGetterDef());
149:       assertFalse(node0.isFor());
150:       assertFalse(node0.isStringKey());
151:       assertFalse(node0.isNumber());
152:       assertFalse(node0.hasOneChild());
153:       assertFalse(node0.isArrayLit());
154:       assertFalse(node0.isParamList());
155:       assertEquals((-1), node0.getCharno());
156:       assertFalse(node0.isWhile());
157:       assertFalse(node0.isDo());
158:       assertFalse(node0.isContinue());
159:       assertFalse(node0.isNew());
160:       assertFalse(node0.isReturn());
161:       assertTrue(node0.isString());
162:       assertFalse(node0.isAssignAdd());
163:       assertFalse(node0.hasMoreThanOneChild());
164:       assertFalse(node0.isVar());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isBlock());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.isAssign());
170:       assertFalse(node0.isTypeOf());
171:       assertFalse(node0.isName());
172:       assertFalse(node0.isCall());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isGetElem());
175:       assertEquals((-1), node0.getLineno());
176:       assertFalse(node0.isOr());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isNull());
179:       assertFalse(node0.isNot());
180:       assertFalse(node0.isAnd());
181:       assertFalse(node0.isExprResult());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isComma());
184:       assertFalse(node0.isFunction());
185:       assertEquals(40, node0.getType());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isGetProp());
189:       assertFalse(node0.isObjectLit());
190:       assertEquals((-1), node0.getSourcePosition());
191:       assertFalse(node0.isDebugger());
192:       assertFalse(node1.isCast());
193:       assertFalse(node1.isAssign());
194:       assertFalse(node1.isScript());
195:       assertFalse(node1.isReturn());
196:       assertEquals((-1), node1.getLineno());
197:       assertFalse(node1.isInstanceOf());
198:       assertFalse(node1.isComma());
199:       assertFalse(node1.isThis());
200:       assertFalse(node1.hasMoreThanOneChild());
201:       assertFalse(node1.isTypeOf());
202:       assertFalse(node1.isDec());
203:       assertFalse(node1.isOr());
204:       assertFalse(node1.isWith());
205:       assertFalse(node1.isBreak());
206:       assertFalse(node1.isGetElem());
207:       assertFalse(node1.isExprResult());
208:       assertFalse(node1.isHook());
209:       assertFalse(node1.isBlock());
210:       assertFalse(node1.isVar());
211:       assertFalse(node1.isAdd());
212:       assertEquals((-1), node1.getCharno());
213:       assertFalse(node1.isCase());
214:       assertFalse(node1.isNew());
215:       assertFalse(node1.isDo());
216:       assertFalse(node1.isLabel());
217:       assertFalse(node1.isAssignAdd());
218:       assertFalse(node1.isNumber());
219:       assertFalse(node1.isGetterDef());
220:       assertFalse(node1.isStringKey());
221:       assertFalse(node1.isParamList());
222:       assertFalse(node1.isSwitch());
223:       assertFalse(node1.isArrayLit());
224:       assertFalse(node1.isLabelName());
225:       assertFalse(node1.isTrue());
226:       assertFalse(node1.isFunction());
227:       assertFalse(node1.isDebugger());
228:       assertFalse(node1.isRegExp());
229:       assertTrue(node1.hasOneChild());
230:       assertFalse(node1.isDefaultCase());
231:       assertFalse(node1.isEmpty());
232:       assertFalse(node1.isFor());
233:       assertFalse(node1.isTry());
234:       assertEquals(1, node1.getChildCount());
235:       assertFalse(node1.isIn());
236:       assertTrue(node1.hasChildren());
237:       assertFalse(node1.isCatch());
238:       assertFalse(node1.isIf());
239:       assertFalse(node1.isNull());
240:       assertFalse(node1.isNE());
241:       assertFalse(node1.isCall());
242:       assertFalse(node1.isName());
243:       assertFalse(node1.isVoid());
244:       assertFalse(node1.isDelProp());
245:       assertEquals(0, node1.getType());
246:       assertFalse(node1.isFalse());
247:       assertFalse(node1.isString());
248:       assertFalse(node1.isWhile());
249:       assertFalse(node1.isThrow());
250:       assertFalse(node1.isInc());
251:       assertFalse(node1.isSetterDef());
252:       assertFalse(node1.isGetProp());
253:       assertFalse(node1.isContinue());
254:       assertEquals((-1), node1.getSourcePosition());
255:       assertFalse(node1.isObjectLit());
256:       assertFalse(node1.isNot());
257:       assertFalse(node1.isAnd());
258:       assertFalse(node1.equals((Object)node0));
259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
260:       assertEquals(32, Node.INCRDECR_PROP);
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(46, Node.IS_NAMESPACE);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
272:       assertEquals(12, Node.COLUMN_BITS);
273:       assertEquals(4095, Node.COLUMN_MASK);
274:       assertEquals(39, Node.EMPTY_BLOCK);
275:       assertEquals(55, Node.INFERRED_FUNCTION);
276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
277:       assertEquals(43, Node.IS_CONSTANT_NAME);
278:       assertEquals(36, Node.QUOTED_PROP);
279:       assertEquals(8, Node.FLAG_NO_THROWS);
280:       assertEquals(48, Node.DIRECTIVES);
281:       assertEquals(50, Node.FREE_CALL);
282:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
283:       assertEquals(57, Node.REFLECTED_OBJECT);
284:       assertEquals(53, Node.INPUT_ID);
285:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
286:       assertEquals(52, Node.LENGTH);
287:       assertEquals(40, Node.ORIGINALNAME_PROP);
288:       assertEquals(29, Node.JSDOC_INFO_PROP);
289:       assertEquals(15, Node.NO_SIDE_EFFECTS);
290:       assertEquals(57, Node.LAST_PROP);
291:       assertEquals(47, Node.IS_DISPATCHER);
292:       assertEquals(2, Node.POST_FLAG);
293:       assertEquals(30, Node.VAR_ARGS_NAME);
294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
295:       assertEquals(43, Node.IS_CONSTANT_NAME);
296:       assertEquals(36, Node.QUOTED_PROP);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(48, Node.DIRECTIVES);
301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
307:       assertEquals(1, Node.DECR_FLAG);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(57, Node.REFLECTED_OBJECT);
315:       assertEquals(46, Node.IS_NAMESPACE);
316:       assertEquals(49, Node.DIRECT_EVAL);
317:       assertEquals(40, Node.ORIGINALNAME_PROP);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(2, Node.POST_FLAG);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertNotNull(node1);
332:       
333:       boolean boolean0 = node1.getBooleanProp(0);
334:       assertFalse(node0.isSwitch());
335:       assertFalse(node0.isInc());
336:       assertFalse(node0.isCase());
337:       assertFalse(node0.isThrow());
338:       assertFalse(node0.isHook());
339:       assertFalse(node0.isEmpty());
340:       assertFalse(node0.isDelProp());
341:       assertFalse(node0.isIf());
342:       assertFalse(node0.isBreak());
343:       assertFalse(node0.isIn());
344:       assertFalse(node0.isTrue());
345:       assertFalse(node0.isNE());
346:       assertFalse(node0.isWith());
347:       assertFalse(node0.isDefaultCase());
348:       assertFalse(node0.isCatch());
349:       assertFalse(node0.isScript());
350:       assertEquals(0, node0.getChildCount());
351:       assertFalse(node0.isTry());
352:       assertFalse(node0.isInstanceOf());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isRegExp());
355:       assertFalse(node0.isLabelName());
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isFor());
358:       assertFalse(node0.isStringKey());
359:       assertFalse(node0.isNumber());
360:       assertFalse(node0.hasOneChild());
361:       assertFalse(node0.isArrayLit());
362:       assertFalse(node0.isParamList());
363:       assertEquals((-1), node0.getCharno());
364:       assertFalse(node0.isWhile());
365:       assertFalse(node0.isDo());
366:       assertFalse(node0.isContinue());
367:       assertFalse(node0.isNew());
368:       assertFalse(node0.isReturn());
369:       assertTrue(node0.isString());
370:       assertFalse(node0.isAssignAdd());
371:       assertFalse(node0.hasMoreThanOneChild());
372:       assertFalse(node0.isVar());
373:       assertFalse(node0.isDec());
374:       assertFalse(node0.isBlock());
375:       assertFalse(node0.hasChildren());
376:       assertFalse(node0.isLabel());
377:       assertFalse(node0.isAssign());
378:       assertFalse(node0.isTypeOf());
379:       assertFalse(node0.isName());
380:       assertFalse(node0.isCall());
381:       assertFalse(node0.isSetterDef());
382:       assertFalse(node0.isGetElem());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isOr());
385:       assertFalse(node0.isAdd());
386:       assertFalse(node0.isNull());
387:       assertFalse(node0.isNot());
388:       assertFalse(node0.isAnd());
389:       assertFalse(node0.isExprResult());
390:       assertFalse(node0.isVoid());
391:       assertFalse(node0.isComma());
392:       assertFalse(node0.isFunction());
393:       assertEquals(40, node0.getType());
394:       assertFalse(node0.isFalse());
395:       assertFalse(node0.isCast());
396:       assertFalse(node0.isGetProp());
397:       assertFalse(node0.isObjectLit());
398:       assertEquals((-1), node0.getSourcePosition());
399:       assertFalse(node0.isDebugger());
400:       assertFalse(node1.isCast());
401:       assertFalse(node1.isAssign());
402:       assertFalse(node1.isScript());
403:       assertFalse(node1.isReturn());
404:       assertEquals((-1), node1.getLineno());
405:       assertFalse(node1.isInstanceOf());
406:       assertFalse(node1.isComma());
407:       assertFalse(node1.isThis());
408:       assertFalse(node1.hasMoreThanOneChild());
409:       assertFalse(node1.isTypeOf());
410:       assertFalse(node1.isDec());
411:       assertFalse(node1.isOr());
412:       assertFalse(node1.isWith());
413:       assertFalse(node1.isBreak());
414:       assertFalse(node1.isGetElem());
415:       assertFalse(node1.isExprResult());
416:       assertFalse(node1.isHook());
417:       assertFalse(node1.isBlock());
418:       assertFalse(node1.isVar());
419:       assertFalse(node1.isAdd());
420:       assertEquals((-1), node1.getCharno());
421:       assertFalse(node1.isCase());
422:       assertFalse(node1.isNew());
423:       assertFalse(node1.isDo());
424:       assertFalse(node1.isLabel());
425:       assertFalse(node1.isAssignAdd());
426:       assertFalse(node1.isNumber());
427:       assertFalse(node1.isGetterDef());
428:       assertFalse(node1.isStringKey());
429:       assertFalse(node1.isParamList());
430:       assertFalse(node1.isSwitch());
431:       assertFalse(node1.isArrayLit());
432:       assertFalse(node1.isLabelName());
433:       assertFalse(node1.isTrue());
434:       assertFalse(node1.isFunction());
435:       assertFalse(node1.isDebugger());
436:       assertFalse(node1.isRegExp());
437:       assertTrue(node1.hasOneChild());
438:       assertFalse(node1.isDefaultCase());
439:       assertFalse(node1.isEmpty());
440:       assertFalse(node1.isFor());
441:       assertFalse(node1.isTry());
442:       assertEquals(1, node1.getChildCount());
443:       assertFalse(node1.isIn());
444:       assertTrue(node1.hasChildren());
445:       assertFalse(node1.isCatch());
446:       assertFalse(node1.isIf());
447:       assertFalse(node1.isNull());
448:       assertFalse(node1.isNE());
449:       assertFalse(node1.isCall());
450:       assertFalse(node1.isName());
451:       assertFalse(node1.isVoid());
452:       assertFalse(node1.isDelProp());
453:       assertEquals(0, node1.getType());
454:       assertFalse(node1.isFalse());
455:       assertFalse(node1.isString());
456:       assertFalse(node1.isWhile());
457:       assertFalse(node1.isThrow());
458:       assertFalse(node1.isInc());
459:       assertFalse(node1.isSetterDef());
460:       assertFalse(node1.isGetProp());
461:       assertFalse(node1.isContinue());
462:       assertEquals((-1), node1.getSourcePosition());
463:       assertFalse(node1.isObjectLit());
464:       assertFalse(node1.isNot());
465:       assertFalse(node1.isAnd());
466:       assertFalse(boolean0);
467:       assertFalse(node0.equals((Object)node1));
468:       assertFalse(node1.equals((Object)node0));
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(32, Node.INCRDECR_PROP);
471:       assertEquals(1, Node.DECR_FLAG);
472:       assertEquals(56, Node.CHANGE_TIME);
473:       assertEquals(37, Node.OPT_ARG_NAME);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(46, Node.IS_NAMESPACE);
476:       assertEquals(54, Node.SLASH_V);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(4095, Node.COLUMN_MASK);
484:       assertEquals(39, Node.EMPTY_BLOCK);
485:       assertEquals(55, Node.INFERRED_FUNCTION);
486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
487:       assertEquals(43, Node.IS_CONSTANT_NAME);
488:       assertEquals(36, Node.QUOTED_PROP);
489:       assertEquals(8, Node.FLAG_NO_THROWS);
490:       assertEquals(48, Node.DIRECTIVES);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
493:       assertEquals(57, Node.REFLECTED_OBJECT);
494:       assertEquals(53, Node.INPUT_ID);
495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
496:       assertEquals(52, Node.LENGTH);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       assertEquals(29, Node.JSDOC_INFO_PROP);
499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
500:       assertEquals(57, Node.LAST_PROP);
501:       assertEquals(47, Node.IS_DISPATCHER);
502:       assertEquals(2, Node.POST_FLAG);
503:       assertEquals(30, Node.VAR_ARGS_NAME);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(43, Node.IS_CONSTANT_NAME);
506:       assertEquals(36, Node.QUOTED_PROP);
507:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(4095, Node.COLUMN_MASK);
510:       assertEquals(48, Node.DIRECTIVES);
511:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
512:       assertEquals(50, Node.FREE_CALL);
513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
514:       assertEquals(12, Node.COLUMN_BITS);
515:       assertEquals(32, Node.INCRDECR_PROP);
516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
517:       assertEquals(1, Node.DECR_FLAG);
518:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
520:       assertEquals(57, Node.LAST_PROP);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(54, Node.SLASH_V);
523:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
524:       assertEquals(57, Node.REFLECTED_OBJECT);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(40, Node.ORIGINALNAME_PROP);
528:       assertEquals(37, Node.OPT_ARG_NAME);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(2, Node.POST_FLAG);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
534:       assertEquals(47, Node.IS_DISPATCHER);
535:       assertEquals(55, Node.INFERRED_FUNCTION);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(29, Node.JSDOC_INFO_PROP);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(39, Node.EMPTY_BLOCK);
541:       
542:       Node node2 = node1.srcref(node0);
543:       assertSame(node1, node2);
544:       assertSame(node2, node1);
545:       assertFalse(node0.isSwitch());
546:       assertFalse(node0.isInc());
547:       assertFalse(node0.isCase());
548:       assertFalse(node0.isThrow());
549:       assertFalse(node0.isHook());
550:       assertFalse(node0.isEmpty());
551:       assertFalse(node0.isDelProp());
552:       assertFalse(node0.isIf());
553:       assertFalse(node0.isBreak());
554:       assertFalse(node0.isIn());
555:       assertFalse(node0.isTrue());
556:       assertFalse(node0.isNE());
557:       assertFalse(node0.isWith());
558:       assertFalse(node0.isDefaultCase());
559:       assertFalse(node0.isCatch());
560:       assertFalse(node0.isScript());
561:       assertEquals(0, node0.getChildCount());
562:       assertFalse(node0.isTry());
563:       assertFalse(node0.isInstanceOf());
564:       assertFalse(node0.isThis());
565:       assertFalse(node0.isRegExp());
566:       assertFalse(node0.isLabelName());
567:       assertFalse(node0.isGetterDef());
568:       assertFalse(node0.isFor());
569:       assertFalse(node0.isStringKey());
570:       assertFalse(node0.isNumber());
571:       assertFalse(node0.hasOneChild());
572:       assertFalse(node0.isArrayLit());
573:       assertFalse(node0.isParamList());
574:       assertEquals((-1), node0.getCharno());
575:       assertFalse(node0.isWhile());
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isNew());
579:       assertFalse(node0.isReturn());
580:       assertTrue(node0.isString());
581:       assertFalse(node0.isAssignAdd());
582:       assertFalse(node0.hasMoreThanOneChild());
583:       assertFalse(node0.isVar());
584:       assertFalse(node0.isDec());
585:       assertFalse(node0.isBlock());
586:       assertFalse(node0.hasChildren());
587:       assertFalse(node0.isLabel());
588:       assertFalse(node0.isAssign());
589:       assertFalse(node0.isTypeOf());
590:       assertFalse(node0.isName());
591:       assertFalse(node0.isCall());
592:       assertFalse(node0.isSetterDef());
593:       assertFalse(node0.isGetElem());
594:       assertEquals((-1), node0.getLineno());
595:       assertFalse(node0.isOr());
596:       assertFalse(node0.isAdd());
597:       assertFalse(node0.isNull());
598:       assertFalse(node0.isNot());
599:       assertFalse(node0.isAnd());
600:       assertFalse(node0.isExprResult());
601:       assertFalse(node0.isVoid());
602:       assertFalse(node0.isComma());
603:       assertFalse(node0.isFunction());
604:       assertEquals(40, node0.getType());
605:       assertFalse(node0.isFalse());
606:       assertFalse(node0.isCast());
607:       assertFalse(node0.isGetProp());
608:       assertFalse(node0.isObjectLit());
609:       assertEquals((-1), node0.getSourcePosition());
610:       assertFalse(node0.isDebugger());
611:       assertFalse(node1.isCast());
612:       assertFalse(node1.isAssign());
613:       assertFalse(node1.isScript());
614:       assertFalse(node1.isReturn());
615:       assertEquals((-1), node1.getLineno());
616:       assertFalse(node1.isInstanceOf());
617:       assertFalse(node1.isComma());
618:       assertFalse(node1.isThis());
619:       assertFalse(node1.hasMoreThanOneChild());
620:       assertFalse(node1.isTypeOf());
621:       assertFalse(node1.isDec());
622:       assertFalse(node1.isOr());
623:       assertFalse(node1.isWith());
624:       assertFalse(node1.isBreak());
625:       assertFalse(node1.isGetElem());
626:       assertFalse(node1.isExprResult());
627:       assertFalse(node1.isHook());
628:       assertFalse(node1.isBlock());
629:       assertFalse(node1.isVar());
630:       assertFalse(node1.isAdd());
631:       assertEquals((-1), node1.getCharno());
632:       assertFalse(node1.isCase());
633:       assertFalse(node1.isNew());
634:       assertFalse(node1.isDo());
635:       assertFalse(node1.isLabel());
636:       assertFalse(node1.isAssignAdd());
637:       assertFalse(node1.isNumber());
638:       assertFalse(node1.isGetterDef());
639:       assertFalse(node1.isStringKey());
640:       assertFalse(node1.isParamList());
641:       assertFalse(node1.isSwitch());
642:       assertFalse(node1.isArrayLit());
643:       assertFalse(node1.isLabelName());
644:       assertFalse(node1.isTrue());
645:       assertFalse(node1.isFunction());
646:       assertFalse(node1.isDebugger());
647:       assertFalse(node1.isRegExp());
648:       assertTrue(node1.hasOneChild());
649:       assertFalse(node1.isDefaultCase());
650:       assertFalse(node1.isEmpty());
651:       assertFalse(node1.isFor());
652:       assertFalse(node1.isTry());
653:       assertEquals(1, node1.getChildCount());
654:       assertFalse(node1.isIn());
655:       assertTrue(node1.hasChildren());
656:       assertFalse(node1.isCatch());
657:       assertFalse(node1.isIf());
658:       assertFalse(node1.isNull());
659:       assertFalse(node1.isNE());
660:       assertFalse(node1.isCall());
661:       assertFalse(node1.isName());
662:       assertFalse(node1.isVoid());
663:       assertFalse(node1.isDelProp());
664:       assertEquals(0, node1.getType());
665:       assertFalse(node1.isFalse());
666:       assertFalse(node1.isString());
667:       assertFalse(node1.isWhile());
668:       assertFalse(node1.isThrow());
669:       assertFalse(node1.isInc());
670:       assertFalse(node1.isSetterDef());
671:       assertFalse(node1.isGetProp());
672:       assertFalse(node1.isContinue());
673:       assertEquals((-1), node1.getSourcePosition());
674:       assertFalse(node1.isObjectLit());
675:       assertFalse(node1.isNot());
676:       assertFalse(node1.isAnd());
677:       assertEquals(0, node2.getType());
678:       assertEquals((-1), node2.getCharno());
679:       assertFalse(node2.isInc());
680:       assertFalse(node2.isString());
681:       assertFalse(node2.isFalse());
682:       assertFalse(node2.isCase());
683:       assertFalse(node2.isHook());
684:       assertFalse(node2.isThis());
685:       assertFalse(node2.isThrow());
686:       assertFalse(node2.isGetProp());
687:       assertFalse(node2.isNot());
688:       assertFalse(node2.isObjectLit());
689:       assertFalse(node2.isGetterDef());
690:       assertFalse(node2.isSwitch());
691:       assertFalse(node2.isAnd());
692:       assertFalse(node2.isTry());
693:       assertFalse(node2.isCast());
694:       assertFalse(node2.isRegExp());
695:       assertFalse(node2.isScript());
696:       assertFalse(node2.isFunction());
697:       assertFalse(node2.isFor());
698:       assertFalse(node2.isWith());
699:       assertTrue(node2.hasChildren());
700:       assertEquals(1, node2.getChildCount());
701:       assertEquals((-1), node2.getLineno());
702:       assertFalse(node2.hasMoreThanOneChild());
703:       assertFalse(node2.isSetterDef());
704:       assertFalse(node2.isIn());
705:       assertFalse(node2.isCatch());
706:       assertFalse(node2.isInstanceOf());
707:       assertFalse(node2.isNE());
708:       assertFalse(node2.isIf());
709:       assertFalse(node2.isAdd());
710:       assertFalse(node2.isBlock());
711:       assertFalse(node2.isNew());
712:       assertFalse(node2.isCall());
713:       assertFalse(node2.isDo());
714:       assertFalse(node2.isVar());
715:       assertFalse(node2.isWhile());
716:       assertFalse(node2.isLabel());
717:       assertFalse(node2.isNumber());
718:       assertFalse(node2.isContinue());
719:       assertFalse(node2.isLabelName());
720:       assertEquals((-1), node2.getSourcePosition());
721:       assertFalse(node2.isParamList());
722:       assertFalse(node2.isStringKey());
723:       assertFalse(node2.isDebugger());
724:       assertFalse(node2.isVoid());
725:       assertFalse(node2.isArrayLit());
726:       assertFalse(node2.isExprResult());
727:       assertFalse(node2.isEmpty());
728:       assertFalse(node2.isAssign());
729:       assertTrue(node2.hasOneChild());
730:       assertFalse(node2.isDec());
731:       assertFalse(node2.isDefaultCase());
732:       assertFalse(node2.isOr());
733:       assertFalse(node2.isAssignAdd());
734:       assertFalse(node2.isReturn());
735:       assertFalse(node2.isComma());
736:       assertFalse(node2.isTypeOf());
737:       assertFalse(node2.isName());
738:       assertFalse(node2.isGetElem());
739:       assertFalse(node2.isDelProp());
740:       assertFalse(node2.isBreak());
741:       assertFalse(node2.isTrue());
742:       assertFalse(node2.isNull());
743:       assertFalse(node0.equals((Object)node1));
744:       assertFalse(node1.equals((Object)node0));
745:       assertFalse(node2.equals((Object)node0));
746:       assertEquals(51, Node.STATIC_SOURCE_FILE);
747:       assertEquals(32, Node.INCRDECR_PROP);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(56, Node.CHANGE_TIME);
750:       assertEquals(37, Node.OPT_ARG_NAME);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(46, Node.IS_NAMESPACE);
753:       assertEquals(54, Node.SLASH_V);
754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
759:       assertEquals(12, Node.COLUMN_BITS);
760:       assertEquals(4095, Node.COLUMN_MASK);
761:       assertEquals(39, Node.EMPTY_BLOCK);
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
764:       assertEquals(43, Node.IS_CONSTANT_NAME);
765:       assertEquals(36, Node.QUOTED_PROP);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(50, Node.FREE_CALL);
769:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
770:       assertEquals(57, Node.REFLECTED_OBJECT);
771:       assertEquals(53, Node.INPUT_ID);
772:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
773:       assertEquals(52, Node.LENGTH);
774:       assertEquals(40, Node.ORIGINALNAME_PROP);
775:       assertEquals(29, Node.JSDOC_INFO_PROP);
776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
777:       assertEquals(57, Node.LAST_PROP);
778:       assertEquals(47, Node.IS_DISPATCHER);
779:       assertEquals(2, Node.POST_FLAG);
780:       assertEquals(30, Node.VAR_ARGS_NAME);
781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
782:       assertEquals(43, Node.IS_CONSTANT_NAME);
783:       assertEquals(36, Node.QUOTED_PROP);
784:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
785:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
786:       assertEquals(4095, Node.COLUMN_MASK);
787:       assertEquals(48, Node.DIRECTIVES);
788:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
789:       assertEquals(50, Node.FREE_CALL);
790:       assertEquals(51, Node.STATIC_SOURCE_FILE);
791:       assertEquals(12, Node.COLUMN_BITS);
792:       assertEquals(32, Node.INCRDECR_PROP);
793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
794:       assertEquals(1, Node.DECR_FLAG);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(15, Node.NO_SIDE_EFFECTS);
797:       assertEquals(57, Node.LAST_PROP);
798:       assertEquals(30, Node.VAR_ARGS_NAME);
799:       assertEquals(54, Node.SLASH_V);
800:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
801:       assertEquals(57, Node.REFLECTED_OBJECT);
802:       assertEquals(46, Node.IS_NAMESPACE);
803:       assertEquals(49, Node.DIRECT_EVAL);
804:       assertEquals(40, Node.ORIGINALNAME_PROP);
805:       assertEquals(37, Node.OPT_ARG_NAME);
806:       assertEquals(56, Node.CHANGE_TIME);
807:       assertEquals(2, Node.POST_FLAG);
808:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
809:       assertEquals(8, Node.FLAG_NO_THROWS);
810:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
811:       assertEquals(47, Node.IS_DISPATCHER);
812:       assertEquals(55, Node.INFERRED_FUNCTION);
813:       assertEquals(52, Node.LENGTH);
814:       assertEquals(53, Node.INPUT_ID);
815:       assertEquals(29, Node.JSDOC_INFO_PROP);
816:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
817:       assertEquals(39, Node.EMPTY_BLOCK);
818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
819:       assertEquals(57, Node.LAST_PROP);
820:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
821:       assertEquals(30, Node.VAR_ARGS_NAME);
822:       assertEquals(52, Node.LENGTH);
823:       assertEquals(46, Node.IS_NAMESPACE);
824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
825:       assertEquals(40, Node.ORIGINALNAME_PROP);
826:       assertEquals(57, Node.REFLECTED_OBJECT);
827:       assertEquals(54, Node.SLASH_V);
828:       assertEquals(37, Node.OPT_ARG_NAME);
829:       assertEquals(49, Node.DIRECT_EVAL);
830:       assertEquals(47, Node.IS_DISPATCHER);
831:       assertEquals(56, Node.CHANGE_TIME);
832:       assertEquals(29, Node.JSDOC_INFO_PROP);
833:       assertEquals(39, Node.EMPTY_BLOCK);
834:       assertEquals(2, Node.POST_FLAG);
835:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(55, Node.INFERRED_FUNCTION);
838:       assertEquals(53, Node.INPUT_ID);
839:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
840:       assertEquals(43, Node.IS_CONSTANT_NAME);
841:       assertEquals(36, Node.QUOTED_PROP);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(4095, Node.COLUMN_MASK);
844:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
845:       assertEquals(48, Node.DIRECTIVES);
846:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
847:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
848:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(1, Node.DECR_FLAG);
854:       assertNotNull(node2);
855:       
856:       node0.setLineno(23);
857:       assertFalse(node0.isSwitch());
858:       assertFalse(node0.isInc());
859:       assertFalse(node0.isCase());
860:       assertFalse(node0.isThrow());
861:       assertFalse(node0.isHook());
862:       assertFalse(node0.isEmpty());
863:       assertFalse(node0.isDelProp());
864:       assertFalse(node0.isIf());
865:       assertFalse(node0.isBreak());
866:       assertFalse(node0.isIn());
867:       assertFalse(node0.isTrue());
868:       assertFalse(node0.isNE());
869:       assertEquals(23, node0.getLineno());
870:       assertFalse(node0.isWith());
871:       assertFalse(node0.isDefaultCase());
872:       assertFalse(node0.isCatch());
873:       assertFalse(node0.isScript());
874:       assertEquals(0, node0.getChildCount());
875:       assertFalse(node0.isTry());
876:       assertFalse(node0.isInstanceOf());
877:       assertEquals(94208, node0.getSourcePosition());
878:       assertFalse(node0.isThis());
879:       assertFalse(node0.isRegExp());
880:       assertFalse(node0.isLabelName());
881:       assertFalse(node0.isGetterDef());
882:       assertFalse(node0.isFor());
883:       assertFalse(node0.isStringKey());
884:       assertFalse(node0.isNumber());
885:       assertFalse(node0.hasOneChild());
886:       assertFalse(node0.isArrayLit());
887:       assertFalse(node0.isParamList());
888:       assertFalse(node0.isWhile());
889:       assertFalse(node0.isDo());
890:       assertFalse(node0.isContinue());
891:       assertFalse(node0.isNew());
892:       assertFalse(node0.isReturn());
893:       assertTrue(node0.isString());
894:       assertFalse(node0.isAssignAdd());
895:       assertFalse(node0.hasMoreThanOneChild());
896:       assertFalse(node0.isVar());
897:       assertFalse(node0.isDec());
898:       assertFalse(node0.isBlock());
899:       assertFalse(node0.hasChildren());
900:       assertFalse(node0.isLabel());
901:       assertFalse(node0.isAssign());
902:       assertFalse(node0.isTypeOf());
903:       assertFalse(node0.isName());
904:       assertFalse(node0.isCall());
905:       assertFalse(node0.isSetterDef());
906:       assertFalse(node0.isGetElem());
907:       assertFalse(node0.isOr());
908:       assertFalse(node0.isAdd());
909:       assertEquals(0, node0.getCharno());
910:       assertFalse(node0.isNull());
911:       assertFalse(node0.isNot());
912:       assertFalse(node0.isAnd());
913:       assertFalse(node0.isExprResult());
914:       assertFalse(node0.isVoid());
915:       assertFalse(node0.isComma());
916:       assertFalse(node0.isFunction());
917:       assertEquals(40, node0.getType());
918:       assertFalse(node0.isFalse());
919:       assertFalse(node0.isCast());
920:       assertFalse(node0.isGetProp());
921:       assertFalse(node0.isObjectLit());
922:       assertFalse(node0.isDebugger());
923:       assertFalse(node0.equals((Object)node2));
924:       assertFalse(node0.equals((Object)node1));
925:       assertEquals(51, Node.STATIC_SOURCE_FILE);
926:       assertEquals(32, Node.INCRDECR_PROP);
927:       assertEquals(1, Node.DECR_FLAG);
928:       assertEquals(56, Node.CHANGE_TIME);
929:       assertEquals(37, Node.OPT_ARG_NAME);
930:       assertEquals(49, Node.DIRECT_EVAL);
931:       assertEquals(46, Node.IS_NAMESPACE);
932:       assertEquals(54, Node.SLASH_V);
933:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(4095, Node.COLUMN_MASK);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(36, Node.QUOTED_PROP);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(50, Node.FREE_CALL);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(57, Node.REFLECTED_OBJECT);
950:       assertEquals(53, Node.INPUT_ID);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(52, Node.LENGTH);
953:       assertEquals(40, Node.ORIGINALNAME_PROP);
954:       assertEquals(29, Node.JSDOC_INFO_PROP);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(47, Node.IS_DISPATCHER);
958:       assertEquals(2, Node.POST_FLAG);
959:       assertEquals(30, Node.VAR_ARGS_NAME);
960:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
961:       
962:       boolean boolean1 = node1.isBlock();
963:       assertSame(node1, node2);
964:       assertFalse(node0.isSwitch());
965:       assertFalse(node0.isInc());
966:       assertFalse(node0.isCase());
967:       assertFalse(node0.isThrow());
968:       assertFalse(node0.isHook());
969:       assertFalse(node0.isEmpty());
970:       assertFalse(node0.isDelProp());
971:       assertFalse(node0.isIf());
972:       assertFalse(node0.isBreak());
973:       assertFalse(node0.isIn());
974:       assertFalse(node0.isTrue());
975:       assertFalse(node0.isNE());
976:       assertEquals(23, node0.getLineno());
977:       assertFalse(node0.isWith());
978:       assertFalse(node0.isDefaultCase());
979:       assertFalse(node0.isCatch());
980:       assertFalse(node0.isScript());
981:       assertEquals(0, node0.getChildCount());
982:       assertFalse(node0.isTry());
983:       assertFalse(node0.isInstanceOf());
984:       assertEquals(94208, node0.getSourcePosition());
985:       assertFalse(node0.isThis());
986:       assertFalse(node0.isRegExp());
987:       assertFalse(node0.isLabelName());
988:       assertFalse(node0.isGetterDef());
989:       assertFalse(node0.isFor());
990:       assertFalse(node0.isStringKey());
991:       assertFalse(node0.isNumber());
992:       assertFalse(node0.hasOneChild());
993:       assertFalse(node0.isArrayLit());
994:       assertFalse(node0.isParamList());
995:       assertFalse(node0.isWhile());
996:       assertFalse(node0.isDo());
997:       assertFalse(node0.isContinue());
998:       assertFalse(node0.isNew());
999:       assertFalse(node0.isReturn());
1000:       assertTrue(node0.isString());
1001:       assertFalse(node0.isAssignAdd());
1002:       assertFalse(node0.hasMoreThanOneChild());
1003:       assertFalse(node0.isVar());
1004:       assertFalse(node0.isDec());
1005:       assertFalse(node0.isBlock());
1006:       assertFalse(node0.hasChildren());
1007:       assertFalse(node0.isLabel());
1008:       assertFalse(node0.isAssign());
1009:       assertFalse(node0.isTypeOf());
1010:       assertFalse(node0.isName());
1011:       assertFalse(node0.isCall());
1012:       assertFalse(node0.isSetterDef());
1013:       assertFalse(node0.isGetElem());
1014:       assertFalse(node0.isOr());
1015:       assertFalse(node0.isAdd());
1016:       assertEquals(0, node0.getCharno());
1017:       assertFalse(node0.isNull());
1018:       assertFalse(node0.isNot());
1019:       assertFalse(node0.isAnd());
1020:       assertFalse(node0.isExprResult());
1021:       assertFalse(node0.isVoid());
1022:       assertFalse(node0.isComma());
1023:       assertFalse(node0.isFunction());
1024:       assertEquals(40, node0.getType());
1025:       assertFalse(node0.isFalse());
1026:       assertFalse(node0.isCast());
1027:       assertFalse(node0.isGetProp());
1028:       assertFalse(node0.isObjectLit());
1029:       assertFalse(node0.isDebugger());
1030:       assertFalse(node1.isCast());
1031:       assertFalse(node1.isAssign());
1032:       assertFalse(node1.isScript());
1033:       assertFalse(node1.isReturn());
1034:       assertEquals((-1), node1.getLineno());
1035:       assertFalse(node1.isInstanceOf());
1036:       assertFalse(node1.isComma());
1037:       assertFalse(node1.isThis());
1038:       assertFalse(node1.hasMoreThanOneChild());
1039:       assertFalse(node1.isTypeOf());
1040:       assertFalse(node1.isDec());
1041:       assertFalse(node1.isOr());
1042:       assertFalse(node1.isWith());
1043:       assertFalse(node1.isBreak());
1044:       assertFalse(node1.isGetElem());
1045:       assertFalse(node1.isExprResult());
1046:       assertFalse(node1.isHook());
1047:       assertFalse(node1.isBlock());
1048:       assertFalse(node1.isVar());
1049:       assertFalse(node1.isAdd());
1050:       assertEquals((-1), node1.getCharno());
1051:       assertFalse(node1.isCase());
1052:       assertFalse(node1.isNew());
1053:       assertFalse(node1.isDo());
1054:       assertFalse(node1.isLabel());
1055:       assertFalse(node1.isAssignAdd());
1056:       assertFalse(node1.isNumber());
1057:       assertFalse(node1.isGetterDef());
1058:       assertFalse(node1.isStringKey());
1059:       assertFalse(node1.isParamList());
1060:       assertFalse(node1.isSwitch());
1061:       assertFalse(node1.isArrayLit());
1062:       assertFalse(node1.isLabelName());
1063:       assertFalse(node1.isTrue());
1064:       assertFalse(node1.isFunction());
1065:       assertFalse(node1.isDebugger());
1066:       assertFalse(node1.isRegExp());
1067:       assertTrue(node1.hasOneChild());
1068:       assertFalse(node1.isDefaultCase());
1069:       assertFalse(node1.isEmpty());
1070:       assertFalse(node1.isFor());
1071:       assertFalse(node1.isTry());
1072:       assertEquals(1, node1.getChildCount());
1073:       assertFalse(node1.isIn());
1074:       assertTrue(node1.hasChildren());
1075:       assertFalse(node1.isCatch());
1076:       assertFalse(node1.isIf());
1077:       assertFalse(node1.isNull());
1078:       assertFalse(node1.isNE());
1079:       assertFalse(node1.isCall());
1080:       assertFalse(node1.isName());
1081:       assertFalse(node1.isVoid());
1082:       assertFalse(node1.isDelProp());
1083:       assertEquals(0, node1.getType());
1084:       assertFalse(node1.isFalse());
1085:       assertFalse(node1.isString());
1086:       assertFalse(node1.isWhile());
1087:       assertFalse(node1.isThrow());
1088:       assertFalse(node1.isInc());
1089:       assertFalse(node1.isSetterDef());
1090:       assertFalse(node1.isGetProp());
1091:       assertFalse(node1.isContinue());
1092:       assertEquals((-1), node1.getSourcePosition());
1093:       assertFalse(node1.isObjectLit());
1094:       assertFalse(node1.isNot());
1095:       assertFalse(node1.isAnd());
1096:       assertFalse(boolean1);
1097:       assertFalse(node0.equals((Object)node2));
1098:       assertFalse(node0.equals((Object)node1));
1099:       assertFalse(node1.equals((Object)node0));
1100:       assertTrue(boolean1 == boolean0);
1101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1102:       assertEquals(32, Node.INCRDECR_PROP);
1103:       assertEquals(1, Node.DECR_FLAG);
1104:       assertEquals(56, Node.CHANGE_TIME);
1105:       assertEquals(37, Node.OPT_ARG_NAME);
1106:       assertEquals(49, Node.DIRECT_EVAL);
1107:       assertEquals(46, Node.IS_NAMESPACE);
1108:       assertEquals(54, Node.SLASH_V);
1109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1110:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1113:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1114:       assertEquals(12, Node.COLUMN_BITS);
1115:       assertEquals(4095, Node.COLUMN_MASK);
1116:       assertEquals(39, Node.EMPTY_BLOCK);
1117:       assertEquals(55, Node.INFERRED_FUNCTION);
1118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1119:       assertEquals(43, Node.IS_CONSTANT_NAME);
1120:       assertEquals(36, Node.QUOTED_PROP);
1121:       assertEquals(8, Node.FLAG_NO_THROWS);
1122:       assertEquals(48, Node.DIRECTIVES);
1123:       assertEquals(50, Node.FREE_CALL);
1124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1125:       assertEquals(57, Node.REFLECTED_OBJECT);
1126:       assertEquals(53, Node.INPUT_ID);
1127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1128:       assertEquals(52, Node.LENGTH);
1129:       assertEquals(40, Node.ORIGINALNAME_PROP);
1130:       assertEquals(29, Node.JSDOC_INFO_PROP);
1131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1132:       assertEquals(57, Node.LAST_PROP);
1133:       assertEquals(47, Node.IS_DISPATCHER);
1134:       assertEquals(2, Node.POST_FLAG);
1135:       assertEquals(30, Node.VAR_ARGS_NAME);
1136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1137:       assertEquals(43, Node.IS_CONSTANT_NAME);
1138:       assertEquals(36, Node.QUOTED_PROP);
1139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1141:       assertEquals(4095, Node.COLUMN_MASK);
1142:       assertEquals(48, Node.DIRECTIVES);
1143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1144:       assertEquals(50, Node.FREE_CALL);
1145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1146:       assertEquals(12, Node.COLUMN_BITS);
1147:       assertEquals(32, Node.INCRDECR_PROP);
1148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1149:       assertEquals(1, Node.DECR_FLAG);
1150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1152:       assertEquals(57, Node.LAST_PROP);
1153:       assertEquals(30, Node.VAR_ARGS_NAME);
1154:       assertEquals(54, Node.SLASH_V);
1155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1156:       assertEquals(57, Node.REFLECTED_OBJECT);
1157:       assertEquals(46, Node.IS_NAMESPACE);
1158:       assertEquals(49, Node.DIRECT_EVAL);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(37, Node.OPT_ARG_NAME);
1161:       assertEquals(56, Node.CHANGE_TIME);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1166:       assertEquals(47, Node.IS_DISPATCHER);
1167:       assertEquals(55, Node.INFERRED_FUNCTION);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(53, Node.INPUT_ID);
1170:       assertEquals(29, Node.JSDOC_INFO_PROP);
1171:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1172:       assertEquals(39, Node.EMPTY_BLOCK);
1173:       
1174:       boolean boolean2 = node0.isFromExterns();
1175:       assertFalse(node0.isSwitch());
1176:       assertFalse(node0.isInc());
1177:       assertFalse(node0.isCase());
1178:       assertFalse(node0.isThrow());
1179:       assertFalse(node0.isHook());
1180:       assertFalse(node0.isEmpty());
1181:       assertFalse(node0.isDelProp());
1182:       assertFalse(node0.isIf());
1183:       assertFalse(node0.isBreak());
1184:       assertFalse(node0.isIn());
1185:       assertFalse(node0.isTrue());
1186:       assertFalse(node0.isNE());
1187:       assertEquals(23, node0.getLineno());
1188:       assertFalse(node0.isWith());
1189:       assertFalse(node0.isDefaultCase());
1190:       assertFalse(node0.isCatch());
1191:       assertFalse(node0.isScript());
1192:       assertEquals(0, node0.getChildCount());
1193:       assertFalse(node0.isTry());
1194:       assertFalse(node0.isInstanceOf());
1195:       assertEquals(94208, node0.getSourcePosition());
1196:       assertFalse(node0.isThis());
1197:       assertFalse(node0.isRegExp());
1198:       assertFalse(node0.isLabelName());
1199:       assertFalse(node0.isGetterDef());
1200:       assertFalse(node0.isFor());
1201:       assertFalse(node0.isStringKey());
1202:       assertFalse(node0.isNumber());
1203:       assertFalse(node0.hasOneChild());
1204:       assertFalse(node0.isArrayLit());
1205:       assertFalse(node0.isParamList());
1206:       assertFalse(node0.isWhile());
1207:       assertFalse(node0.isDo());
1208:       assertFalse(node0.isContinue());
1209:       assertFalse(node0.isNew());
1210:       assertFalse(node0.isReturn());
1211:       assertTrue(node0.isString());
1212:       assertFalse(node0.isAssignAdd());
1213:       assertFalse(node0.hasMoreThanOneChild());
1214:       assertFalse(node0.isVar());
1215:       assertFalse(node0.isDec());
1216:       assertFalse(node0.isBlock());
1217:       assertFalse(node0.hasChildren());
1218:       assertFalse(node0.isLabel());
1219:       assertFalse(node0.isAssign());
1220:       assertFalse(node0.isTypeOf());
1221:       assertFalse(node0.isName());
1222:       assertFalse(node0.isCall());
1223:       assertFalse(node0.isSetterDef());
1224:       assertFalse(node0.isGetElem());
1225:       assertFalse(node0.isOr());
1226:       assertFalse(node0.isAdd());
1227:       assertEquals(0, node0.getCharno());
1228:       assertFalse(node0.isNull());
1229:       assertFalse(node0.isNot());
1230:       assertFalse(node0.isAnd());
1231:       assertFalse(node0.isExprResult());
1232:       assertFalse(node0.isVoid());
1233:       assertFalse(node0.isComma());
1234:       assertFalse(node0.isFunction());
1235:       assertEquals(40, node0.getType());
1236:       assertFalse(node0.isFalse());
1237:       assertFalse(node0.isCast());
1238:       assertFalse(node0.isGetProp());
1239:       assertFalse(node0.isObjectLit());
1240:       assertFalse(node0.isDebugger());
1241:       assertFalse(boolean2);
1242:       assertFalse(node0.equals((Object)node2));
1243:       assertFalse(node0.equals((Object)node1));
1244:       assertTrue(boolean2 == boolean1);
1245:       assertTrue(boolean2 == boolean0);
1246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1247:       assertEquals(32, Node.INCRDECR_PROP);
1248:       assertEquals(1, Node.DECR_FLAG);
1249:       assertEquals(56, Node.CHANGE_TIME);
1250:       assertEquals(37, Node.OPT_ARG_NAME);
1251:       assertEquals(49, Node.DIRECT_EVAL);
1252:       assertEquals(46, Node.IS_NAMESPACE);
1253:       assertEquals(54, Node.SLASH_V);
1254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1259:       assertEquals(12, Node.COLUMN_BITS);
1260:       assertEquals(4095, Node.COLUMN_MASK);
1261:       assertEquals(39, Node.EMPTY_BLOCK);
1262:       assertEquals(55, Node.INFERRED_FUNCTION);
1263:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1264:       assertEquals(43, Node.IS_CONSTANT_NAME);
1265:       assertEquals(36, Node.QUOTED_PROP);
1266:       assertEquals(8, Node.FLAG_NO_THROWS);
1267:       assertEquals(48, Node.DIRECTIVES);
1268:       assertEquals(50, Node.FREE_CALL);
1269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1270:       assertEquals(57, Node.REFLECTED_OBJECT);
1271:       assertEquals(53, Node.INPUT_ID);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(52, Node.LENGTH);
1274:       assertEquals(40, Node.ORIGINALNAME_PROP);
1275:       assertEquals(29, Node.JSDOC_INFO_PROP);
1276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1277:       assertEquals(57, Node.LAST_PROP);
1278:       assertEquals(47, Node.IS_DISPATCHER);
1279:       assertEquals(2, Node.POST_FLAG);
1280:       assertEquals(30, Node.VAR_ARGS_NAME);
1281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1282:       
1283:       boolean boolean3 = node0.isNew();
1284:       assertFalse(node0.isSwitch());
1285:       assertFalse(node0.isInc());
1286:       assertFalse(node0.isCase());
1287:       assertFalse(node0.isThrow());
1288:       assertFalse(node0.isHook());
1289:       assertFalse(node0.isEmpty());
1290:       assertFalse(node0.isDelProp());
1291:       assertFalse(node0.isIf());
1292:       assertFalse(node0.isBreak());
1293:       assertFalse(node0.isIn());
1294:       assertFalse(node0.isTrue());
1295:       assertFalse(node0.isNE());
1296:       assertEquals(23, node0.getLineno());
1297:       assertFalse(node0.isWith());
1298:       assertFalse(node0.isDefaultCase());
1299:       assertFalse(node0.isCatch());
1300:       assertFalse(node0.isScript());
1301:       assertEquals(0, node0.getChildCount());
1302:       assertFalse(node0.isTry());
1303:       assertFalse(node0.isInstanceOf());
1304:       assertEquals(94208, node0.getSourcePosition());
1305:       assertFalse(node0.isThis());
1306:       assertFalse(node0.isRegExp());
1307:       assertFalse(node0.isLabelName());
1308:       assertFalse(node0.isGetterDef());
1309:       assertFalse(node0.isFor());
1310:       assertFalse(node0.isStringKey());
1311:       assertFalse(node0.isNumber());
1312:       assertFalse(node0.hasOneChild());
1313:       assertFalse(node0.isArrayLit());
1314:       assertFalse(node0.isParamList());
1315:       assertFalse(node0.isWhile());
1316:       assertFalse(node0.isDo());
1317:       assertFalse(node0.isContinue());
1318:       assertFalse(node0.isNew());
1319:       assertFalse(node0.isReturn());
1320:       assertTrue(node0.isString());
1321:       assertFalse(node0.isAssignAdd());
1322:       assertFalse(node0.hasMoreThanOneChild());
1323:       assertFalse(node0.isVar());
1324:       assertFalse(node0.isDec());
1325:       assertFalse(node0.isBlock());
1326:       assertFalse(node0.hasChildren());
1327:       assertFalse(node0.isLabel());
1328:       assertFalse(node0.isAssign());
1329:       assertFalse(node0.isTypeOf());
1330:       assertFalse(node0.isName());
1331:       assertFalse(node0.isCall());
1332:       assertFalse(node0.isSetterDef());
1333:       assertFalse(node0.isGetElem());
1334:       assertFalse(node0.isOr());
1335:       assertFalse(node0.isAdd());
1336:       assertEquals(0, node0.getCharno());
1337:       assertFalse(node0.isNull());
1338:       assertFalse(node0.isNot());
1339:       assertFalse(node0.isAnd());
1340:       assertFalse(node0.isExprResult());
1341:       assertFalse(node0.isVoid());
1342:       assertFalse(node0.isComma());
1343:       assertFalse(node0.isFunction());
1344:       assertEquals(40, node0.getType());
1345:       assertFalse(node0.isFalse());
1346:       assertFalse(node0.isCast());
1347:       assertFalse(node0.isGetProp());
1348:       assertFalse(node0.isObjectLit());
1349:       assertFalse(node0.isDebugger());
1350:       assertFalse(boolean3);
1351:       assertFalse(node0.equals((Object)node2));
1352:       assertFalse(node0.equals((Object)node1));
1353:       assertTrue(boolean3 == boolean0);
1354:       assertTrue(boolean3 == boolean2);
1355:       assertTrue(boolean3 == boolean1);
1356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1357:       assertEquals(32, Node.INCRDECR_PROP);
1358:       assertEquals(1, Node.DECR_FLAG);
1359:       assertEquals(56, Node.CHANGE_TIME);
1360:       assertEquals(37, Node.OPT_ARG_NAME);
1361:       assertEquals(49, Node.DIRECT_EVAL);
1362:       assertEquals(46, Node.IS_NAMESPACE);
1363:       assertEquals(54, Node.SLASH_V);
1364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1366:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1369:       assertEquals(12, Node.COLUMN_BITS);
1370:       assertEquals(4095, Node.COLUMN_MASK);
1371:       assertEquals(39, Node.EMPTY_BLOCK);
1372:       assertEquals(55, Node.INFERRED_FUNCTION);
1373:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1374:       assertEquals(43, Node.IS_CONSTANT_NAME);
1375:       assertEquals(36, Node.QUOTED_PROP);
1376:       assertEquals(8, Node.FLAG_NO_THROWS);
1377:       assertEquals(48, Node.DIRECTIVES);
1378:       assertEquals(50, Node.FREE_CALL);
1379:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1380:       assertEquals(57, Node.REFLECTED_OBJECT);
1381:       assertEquals(53, Node.INPUT_ID);
1382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1383:       assertEquals(52, Node.LENGTH);
1384:       assertEquals(40, Node.ORIGINALNAME_PROP);
1385:       assertEquals(29, Node.JSDOC_INFO_PROP);
1386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1387:       assertEquals(57, Node.LAST_PROP);
1388:       assertEquals(47, Node.IS_DISPATCHER);
1389:       assertEquals(2, Node.POST_FLAG);
1390:       assertEquals(30, Node.VAR_ARGS_NAME);
1391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1392:       
1393:       boolean boolean4 = node2.isTypeOf();
1394:       assertSame(node1, node2);
1395:       assertSame(node2, node1);
1396:       assertFalse(node0.isSwitch());
1397:       assertFalse(node0.isInc());
1398:       assertFalse(node0.isCase());
1399:       assertFalse(node0.isThrow());
1400:       assertFalse(node0.isHook());
1401:       assertFalse(node0.isEmpty());
1402:       assertFalse(node0.isDelProp());
1403:       assertFalse(node0.isIf());
1404:       assertFalse(node0.isBreak());
1405:       assertFalse(node0.isIn());
1406:       assertFalse(node0.isTrue());
1407:       assertFalse(node0.isNE());
1408:       assertEquals(23, node0.getLineno());
1409:       assertFalse(node0.isWith());
1410:       assertFalse(node0.isDefaultCase());
1411:       assertFalse(node0.isCatch());
1412:       assertFalse(node0.isScript());
1413:       assertEquals(0, node0.getChildCount());
1414:       assertFalse(node0.isTry());
1415:       assertFalse(node0.isInstanceOf());
1416:       assertEquals(94208, node0.getSourcePosition());
1417:       assertFalse(node0.isThis());
1418:       assertFalse(node0.isRegExp());
1419:       assertFalse(node0.isLabelName());
1420:       assertFalse(node0.isGetterDef());
1421:       assertFalse(node0.isFor());
1422:       assertFalse(node0.isStringKey());
1423:       assertFalse(node0.isNumber());
1424:       assertFalse(node0.hasOneChild());
1425:       assertFalse(node0.isArrayLit());
1426:       assertFalse(node0.isParamList());
1427:       assertFalse(node0.isWhile());
1428:       assertFalse(node0.isDo());
1429:       assertFalse(node0.isContinue());
1430:       assertFalse(node0.isNew());
1431:       assertFalse(node0.isReturn());
1432:       assertTrue(node0.isString());
1433:       assertFalse(node0.isAssignAdd());
1434:       assertFalse(node0.hasMoreThanOneChild());
1435:       assertFalse(node0.isVar());
1436:       assertFalse(node0.isDec());
1437:       assertFalse(node0.isBlock());
1438:       assertFalse(node0.hasChildren());
1439:       assertFalse(node0.isLabel());
1440:       assertFalse(node0.isAssign());
1441:       assertFalse(node0.isTypeOf());
1442:       assertFalse(node0.isName());
1443:       assertFalse(node0.isCall());
1444:       assertFalse(node0.isSetterDef());
1445:       assertFalse(node0.isGetElem());
1446:       assertFalse(node0.isOr());
1447:       assertFalse(node0.isAdd());
1448:       assertEquals(0, node0.getCharno());
1449:       assertFalse(node0.isNull());
1450:       assertFalse(node0.isNot());
1451:       assertFalse(node0.isAnd());
1452:       assertFalse(node0.isExprResult());
1453:       assertFalse(node0.isVoid());
1454:       assertFalse(node0.isComma());
1455:       assertFalse(node0.isFunction());
1456:       assertEquals(40, node0.getType());
1457:       assertFalse(node0.isFalse());
1458:       assertFalse(node0.isCast());
1459:       assertFalse(node0.isGetProp());
1460:       assertFalse(node0.isObjectLit());
1461:       assertFalse(node0.isDebugger());
1462:       assertFalse(node1.isCast());
1463:       assertFalse(node1.isAssign());
1464:       assertFalse(node1.isScript());
1465:       assertFalse(node1.isReturn());
1466:       assertEquals((-1), node1.getLineno());
1467:       assertFalse(node1.isInstanceOf());
1468:       assertFalse(node1.isComma());
1469:       assertFalse(node1.isThis());
1470:       assertFalse(node1.hasMoreThanOneChild());
1471:       assertFalse(node1.isTypeOf());
1472:       assertFalse(node1.isDec());
1473:       assertFalse(node1.isOr());
1474:       assertFalse(node1.isWith());
1475:       assertFalse(node1.isBreak());
1476:       assertFalse(node1.isGetElem());
1477:       assertFalse(node1.isExprResult());
1478:       assertFalse(node1.isHook());
1479:       assertFalse(node1.isBlock());
1480:       assertFalse(node1.isVar());
1481:       assertFalse(node1.isAdd());
1482:       assertEquals((-1), node1.getCharno());
1483:       assertFalse(node1.isCase());
1484:       assertFalse(node1.isNew());
1485:       assertFalse(node1.isDo());
1486:       assertFalse(node1.isLabel());
1487:       assertFalse(node1.isAssignAdd());
1488:       assertFalse(node1.isNumber());
1489:       assertFalse(node1.isGetterDef());
1490:       assertFalse(node1.isStringKey());
1491:       assertFalse(node1.isParamList());
1492:       assertFalse(node1.isSwitch());
1493:       assertFalse(node1.isArrayLit());
1494:       assertFalse(node1.isLabelName());
1495:       assertFalse(node1.isTrue());
1496:       assertFalse(node1.isFunction());
1497:       assertFalse(node1.isDebugger());
1498:       assertFalse(node1.isRegExp());
1499:       assertTrue(node1.hasOneChild());
1500:       assertFalse(node1.isDefaultCase());
1501:       assertFalse(node1.isEmpty());
1502:       assertFalse(node1.isFor());
1503:       assertFalse(node1.isTry());
1504:       assertEquals(1, node1.getChildCount());
1505:       assertFalse(node1.isIn());
1506:       assertTrue(node1.hasChildren());
1507:       assertFalse(node1.isCatch());
1508:       assertFalse(node1.isIf());
1509:       assertFalse(node1.isNull());
1510:       assertFalse(node1.isNE());
1511:       assertFalse(node1.isCall());
1512:       assertFalse(node1.isName());
1513:       assertFalse(node1.isVoid());
1514:       assertFalse(node1.isDelProp());
1515:       assertEquals(0, node1.getType());
1516:       assertFalse(node1.isFalse());
1517:       assertFalse(node1.isString());
1518:       assertFalse(node1.isWhile());
1519:       assertFalse(node1.isThrow());
1520:       assertFalse(node1.isInc());
1521:       assertFalse(node1.isSetterDef());
1522:       assertFalse(node1.isGetProp());
1523:       assertFalse(node1.isContinue());
1524:       assertEquals((-1), node1.getSourcePosition());
1525:       assertFalse(node1.isObjectLit());
1526:       assertFalse(node1.isNot());
1527:       assertFalse(node1.isAnd());
1528:       assertEquals(0, node2.getType());
1529:       assertEquals((-1), node2.getCharno());
1530:       assertFalse(node2.isInc());
1531:       assertFalse(node2.isString());
1532:       assertFalse(node2.isFalse());
1533:       assertFalse(node2.isCase());
1534:       assertFalse(node2.isHook());
1535:       assertFalse(node2.isThis());
1536:       assertFalse(node2.isThrow());
1537:       assertFalse(node2.isGetProp());
1538:       assertFalse(node2.isNot());
1539:       assertFalse(node2.isObjectLit());
1540:       assertFalse(node2.isGetterDef());
1541:       assertFalse(node2.isSwitch());
1542:       assertFalse(node2.isAnd());
1543:       assertFalse(node2.isTry());
1544:       assertFalse(node2.isCast());
1545:       assertFalse(node2.isRegExp());
1546:       assertFalse(node2.isScript());
1547:       assertFalse(node2.isFunction());
1548:       assertFalse(node2.isFor());
1549:       assertFalse(node2.isWith());
1550:       assertTrue(node2.hasChildren());
1551:       assertEquals(1, node2.getChildCount());
1552:       assertEquals((-1), node2.getLineno());
1553:       assertFalse(node2.hasMoreThanOneChild());
1554:       assertFalse(node2.isSetterDef());
1555:       assertFalse(node2.isIn());
1556:       assertFalse(node2.isCatch());
1557:       assertFalse(node2.isInstanceOf());
1558:       assertFalse(node2.isNE());
1559:       assertFalse(node2.isIf());
1560:       assertFalse(node2.isAdd());
1561:       assertFalse(node2.isBlock());
1562:       assertFalse(node2.isNew());
1563:       assertFalse(node2.isCall());
1564:       assertFalse(node2.isDo());
1565:       assertFalse(node2.isVar());
1566:       assertFalse(node2.isWhile());
1567:       assertFalse(node2.isLabel());
1568:       assertFalse(node2.isNumber());
1569:       assertFalse(node2.isContinue());
1570:       assertFalse(node2.isLabelName());
1571:       assertEquals((-1), node2.getSourcePosition());
1572:       assertFalse(node2.isParamList());
1573:       assertFalse(node2.isStringKey());
1574:       assertFalse(node2.isDebugger());
1575:       assertFalse(node2.isVoid());
1576:       assertFalse(node2.isArrayLit());
1577:       assertFalse(node2.isExprResult());
1578:       assertFalse(node2.isEmpty());
1579:       assertFalse(node2.isAssign());
1580:       assertTrue(node2.hasOneChild());
1581:       assertFalse(node2.isDec());
1582:       assertFalse(node2.isDefaultCase());
1583:       assertFalse(node2.isOr());
1584:       assertFalse(node2.isAssignAdd());
1585:       assertFalse(node2.isReturn());
1586:       assertFalse(node2.isComma());
1587:       assertFalse(node2.isTypeOf());
1588:       assertFalse(node2.isName());
1589:       assertFalse(node2.isGetElem());
1590:       assertFalse(node2.isDelProp());
1591:       assertFalse(node2.isBreak());
1592:       assertFalse(node2.isTrue());
1593:       assertFalse(node2.isNull());
1594:       assertFalse(boolean4);
1595:       assertFalse(node0.equals((Object)node2));
1596:       assertFalse(node0.equals((Object)node1));
1597:       assertFalse(node1.equals((Object)node0));
1598:       assertFalse(node2.equals((Object)node0));
1599:       assertTrue(boolean4 == boolean0);
1600:       assertTrue(boolean4 == boolean2);
1601:       assertTrue(boolean4 == boolean3);
1602:       assertTrue(boolean4 == boolean1);
1603:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1604:       assertEquals(32, Node.INCRDECR_PROP);
1605:       assertEquals(1, Node.DECR_FLAG);
1606:       assertEquals(56, Node.CHANGE_TIME);
1607:       assertEquals(37, Node.OPT_ARG_NAME);
1608:       assertEquals(49, Node.DIRECT_EVAL);
1609:       assertEquals(46, Node.IS_NAMESPACE);
1610:       assertEquals(54, Node.SLASH_V);
1611:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1612:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1614:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1615:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1616:       assertEquals(12, Node.COLUMN_BITS);
1617:       assertEquals(4095, Node.COLUMN_MASK);
1618:       assertEquals(39, Node.EMPTY_BLOCK);
1619:       assertEquals(55, Node.INFERRED_FUNCTION);
1620:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1621:       assertEquals(43, Node.IS_CONSTANT_NAME);
1622:       assertEquals(36, Node.QUOTED_PROP);
1623:       assertEquals(8, Node.FLAG_NO_THROWS);
1624:       assertEquals(48, Node.DIRECTIVES);
1625:       assertEquals(50, Node.FREE_CALL);
1626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1627:       assertEquals(57, Node.REFLECTED_OBJECT);
1628:       assertEquals(53, Node.INPUT_ID);
1629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1630:       assertEquals(52, Node.LENGTH);
1631:       assertEquals(40, Node.ORIGINALNAME_PROP);
1632:       assertEquals(29, Node.JSDOC_INFO_PROP);
1633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1634:       assertEquals(57, Node.LAST_PROP);
1635:       assertEquals(47, Node.IS_DISPATCHER);
1636:       assertEquals(2, Node.POST_FLAG);
1637:       assertEquals(30, Node.VAR_ARGS_NAME);
1638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1639:       assertEquals(43, Node.IS_CONSTANT_NAME);
1640:       assertEquals(36, Node.QUOTED_PROP);
1641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1643:       assertEquals(4095, Node.COLUMN_MASK);
1644:       assertEquals(48, Node.DIRECTIVES);
1645:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1646:       assertEquals(50, Node.FREE_CALL);
1647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1648:       assertEquals(12, Node.COLUMN_BITS);
1649:       assertEquals(32, Node.INCRDECR_PROP);
1650:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1651:       assertEquals(1, Node.DECR_FLAG);
1652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1654:       assertEquals(57, Node.LAST_PROP);
1655:       assertEquals(30, Node.VAR_ARGS_NAME);
1656:       assertEquals(54, Node.SLASH_V);
1657:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1658:       assertEquals(57, Node.REFLECTED_OBJECT);
1659:       assertEquals(46, Node.IS_NAMESPACE);
1660:       assertEquals(49, Node.DIRECT_EVAL);
1661:       assertEquals(40, Node.ORIGINALNAME_PROP);
1662:       assertEquals(37, Node.OPT_ARG_NAME);
1663:       assertEquals(56, Node.CHANGE_TIME);
1664:       assertEquals(2, Node.POST_FLAG);
1665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1666:       assertEquals(8, Node.FLAG_NO_THROWS);
1667:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1668:       assertEquals(47, Node.IS_DISPATCHER);
1669:       assertEquals(55, Node.INFERRED_FUNCTION);
1670:       assertEquals(52, Node.LENGTH);
1671:       assertEquals(53, Node.INPUT_ID);
1672:       assertEquals(29, Node.JSDOC_INFO_PROP);
1673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1674:       assertEquals(39, Node.EMPTY_BLOCK);
1675:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1676:       assertEquals(57, Node.LAST_PROP);
1677:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1678:       assertEquals(30, Node.VAR_ARGS_NAME);
1679:       assertEquals(52, Node.LENGTH);
1680:       assertEquals(46, Node.IS_NAMESPACE);
1681:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1682:       assertEquals(40, Node.ORIGINALNAME_PROP);
1683:       assertEquals(57, Node.REFLECTED_OBJECT);
1684:       assertEquals(54, Node.SLASH_V);
1685:       assertEquals(37, Node.OPT_ARG_NAME);
1686:       assertEquals(49, Node.DIRECT_EVAL);
1687:       assertEquals(47, Node.IS_DISPATCHER);
1688:       assertEquals(56, Node.CHANGE_TIME);
1689:       assertEquals(29, Node.JSDOC_INFO_PROP);
1690:       assertEquals(39, Node.EMPTY_BLOCK);
1691:       assertEquals(2, Node.POST_FLAG);
1692:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1693:       assertEquals(8, Node.FLAG_NO_THROWS);
1694:       assertEquals(55, Node.INFERRED_FUNCTION);
1695:       assertEquals(53, Node.INPUT_ID);
1696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1697:       assertEquals(43, Node.IS_CONSTANT_NAME);
1698:       assertEquals(36, Node.QUOTED_PROP);
1699:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1700:       assertEquals(4095, Node.COLUMN_MASK);
1701:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1702:       assertEquals(48, Node.DIRECTIVES);
1703:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1704:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1706:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(32, Node.INCRDECR_PROP);
1709:       assertEquals(12, Node.COLUMN_BITS);
1710:       assertEquals(1, Node.DECR_FLAG);
1711:       
1712:       Iterable<Node> iterable0 = node0.children();
1713:       assertFalse(node0.isSwitch());
1714:       assertFalse(node0.isInc());
1715:       assertFalse(node0.isCase());
1716:       assertFalse(node0.isThrow());
1717:       assertFalse(node0.isHook());
1718:       assertFalse(node0.isEmpty());
1719:       assertFalse(node0.isDelProp());
1720:       assertFalse(node0.isIf());
1721:       assertFalse(node0.isBreak());
1722:       assertFalse(node0.isIn());
1723:       assertFalse(node0.isTrue());
1724:       assertFalse(node0.isNE());
1725:       assertEquals(23, node0.getLineno());
1726:       assertFalse(node0.isWith());
1727:       assertFalse(node0.isDefaultCase());
1728:       assertFalse(node0.isCatch());
1729:       assertFalse(node0.isScript());
1730:       assertEquals(0, node0.getChildCount());
1731:       assertFalse(node0.isTry());
1732:       assertFalse(node0.isInstanceOf());
1733:       assertEquals(94208, node0.getSourcePosition());
1734:       assertFalse(node0.isThis());
1735:       assertFalse(node0.isRegExp());
1736:       assertFalse(node0.isLabelName());
1737:       assertFalse(node0.isGetterDef());
1738:       assertFalse(node0.isFor());
1739:       assertFalse(node0.isStringKey());
1740:       assertFalse(node0.isNumber());
1741:       assertFalse(node0.hasOneChild());
1742:       assertFalse(node0.isArrayLit());
1743:       assertFalse(node0.isParamList());
1744:       assertFalse(node0.isWhile());
1745:       assertFalse(node0.isDo());
1746:       assertFalse(node0.isContinue());
1747:       assertFalse(node0.isNew());
1748:       assertFalse(node0.isReturn());
1749:       assertTrue(node0.isString());
1750:       assertFalse(node0.isAssignAdd());
1751:       assertFalse(node0.hasMoreThanOneChild());
1752:       assertFalse(node0.isVar());
1753:       assertFalse(node0.isDec());
1754:       assertFalse(node0.isBlock());
1755:       assertFalse(node0.hasChildren());
1756:       assertFalse(node0.isLabel());
1757:       assertFalse(node0.isAssign());
1758:       assertFalse(node0.isTypeOf());
1759:       assertFalse(node0.isName());
1760:       assertFalse(node0.isCall());
1761:       assertFalse(node0.isSetterDef());
1762:       assertFalse(node0.isGetElem());
1763:       assertFalse(node0.isOr());
1764:       assertFalse(node0.isAdd());
1765:       assertEquals(0, node0.getCharno());
1766:       assertFalse(node0.isNull());
1767:       assertFalse(node0.isNot());
1768:       assertFalse(node0.isAnd());
1769:       assertFalse(node0.isExprResult());
1770:       assertFalse(node0.isVoid());
1771:       assertFalse(node0.isComma());
1772:       assertFalse(node0.isFunction());
1773:       assertEquals(40, node0.getType());
1774:       assertFalse(node0.isFalse());
1775:       assertFalse(node0.isCast());
1776:       assertFalse(node0.isGetProp());
1777:       assertFalse(node0.isObjectLit());
1778:       assertFalse(node0.isDebugger());
1779:       assertFalse(iterable0.contains(node0));
1780:       assertFalse(node0.equals((Object)node2));
1781:       assertFalse(node0.equals((Object)node1));
1782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1783:       assertEquals(32, Node.INCRDECR_PROP);
1784:       assertEquals(1, Node.DECR_FLAG);
1785:       assertEquals(56, Node.CHANGE_TIME);
1786:       assertEquals(37, Node.OPT_ARG_NAME);
1787:       assertEquals(49, Node.DIRECT_EVAL);
1788:       assertEquals(46, Node.IS_NAMESPACE);
1789:       assertEquals(54, Node.SLASH_V);
1790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1791:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1792:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1794:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1795:       assertEquals(12, Node.COLUMN_BITS);
1796:       assertEquals(4095, Node.COLUMN_MASK);
1797:       assertEquals(39, Node.EMPTY_BLOCK);
1798:       assertEquals(55, Node.INFERRED_FUNCTION);
1799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1800:       assertEquals(43, Node.IS_CONSTANT_NAME);
1801:       assertEquals(36, Node.QUOTED_PROP);
1802:       assertEquals(8, Node.FLAG_NO_THROWS);
1803:       assertEquals(48, Node.DIRECTIVES);
1804:       assertEquals(50, Node.FREE_CALL);
1805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1806:       assertEquals(57, Node.REFLECTED_OBJECT);
1807:       assertEquals(53, Node.INPUT_ID);
1808:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1809:       assertEquals(52, Node.LENGTH);
1810:       assertEquals(40, Node.ORIGINALNAME_PROP);
1811:       assertEquals(29, Node.JSDOC_INFO_PROP);
1812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1813:       assertEquals(57, Node.LAST_PROP);
1814:       assertEquals(47, Node.IS_DISPATCHER);
1815:       assertEquals(2, Node.POST_FLAG);
1816:       assertEquals(30, Node.VAR_ARGS_NAME);
1817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1818:       assertNotNull(iterable0);
1819:   }
1820: }
RegularFileObject[/tmp/EvoSuite_115_1629223133722/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_115_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.JSDocInfo",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.TemplatizedType",
338:       "com.google.common.collect.Iterables",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.common.collect.Sets$ImprovedAbstractSet",
348:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
349:       "com.google.common.collect.Hashing",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.common.collect.ImmutableList$1",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
358:     );
359:   }
360: }

[MASTER] 17:58:54.103 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.common.base.Joiner$1");
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);

Node node1 = new Node(0, node0, node0);
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.equals((Object)node0));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node1);

boolean boolean0 = node1.getBooleanProp(0);
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Node node2 = node1.srcref(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertEquals(0, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isTry());
assertFalse(node2.isCast());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node2);

node0.setLineno(23);
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(23, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean1 = node1.isBlock();
assertSame(node1, node2);
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(23, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(boolean1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean2 = node0.isFromExterns();
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(23, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(boolean2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean3 = node0.isNew();
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(23, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean4 = node2.isTypeOf();
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(23, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertEquals(0, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isTry());
assertFalse(node2.isCast());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(boolean4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(23, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals(94208, node0.getSourcePosition());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(iterable0);


[MASTER] 17:58:54.858 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1629223134635/com/google/javascript/rhino/Node_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1629223134635/com/google/javascript/rhino/Node_121_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:54.858 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:54.858 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:54.859 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1680
[MASTER] 17:58:54.864 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1629223134635/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_121_tmp__ESTest extends Node_121_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(887, 887, 887);
21:       assertFalse(node0.isCase());
22:       assertFalse(node0.isString());
23:       assertFalse(node0.isIn());
24:       assertEquals(3634039, node0.getSourcePosition());
25:       assertFalse(node0.isNE());
26:       assertFalse(node0.isIf());
27:       assertFalse(node0.isSwitch());
28:       assertFalse(node0.isDelProp());
29:       assertFalse(node0.isThrow());
30:       assertFalse(node0.isFalse());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isInc());
33:       assertFalse(node0.isDefaultCase());
34:       assertFalse(node0.isCatch());
35:       assertEquals(0, node0.getChildCount());
36:       assertFalse(node0.isInstanceOf());
37:       assertFalse(node0.isWith());
38:       assertFalse(node0.isRegExp());
39:       assertFalse(node0.isParamList());
40:       assertFalse(node0.isArrayLit());
41:       assertFalse(node0.isStringKey());
42:       assertEquals(887, node0.getCharno());
43:       assertFalse(node0.isFor());
44:       assertFalse(node0.isHook());
45:       assertFalse(node0.isNumber());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isBlock());
48:       assertFalse(node0.isThis());
49:       assertFalse(node0.isScript());
50:       assertFalse(node0.hasOneChild());
51:       assertFalse(node0.isTry());
52:       assertFalse(node0.isContinue());
53:       assertFalse(node0.isOr());
54:       assertEquals(887, node0.getLineno());
55:       assertFalse(node0.hasMoreThanOneChild());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isCast());
58:       assertFalse(node0.isVar());
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isLabel());
61:       assertFalse(node0.isAssignAdd());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isDo());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isObjectLit());
68:       assertFalse(node0.isNot());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isVoid());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isGetElem());
77:       assertEquals(887, node0.getType());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.isAssign());
84:       assertFalse(node0.isGetProp());
85:       assertFalse(node0.isReturn());
86:       assertFalse(node0.isWhile());
87:       assertEquals(32, Node.INCRDECR_PROP);
88:       assertEquals(46, Node.IS_NAMESPACE);
89:       assertEquals(2, Node.POST_FLAG);
90:       assertEquals(12, Node.COLUMN_BITS);
91:       assertEquals(51, Node.STATIC_SOURCE_FILE);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(53, Node.INPUT_ID);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(36, Node.QUOTED_PROP);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(56, Node.CHANGE_TIME);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(37, Node.OPT_ARG_NAME);
111:       assertEquals(4095, Node.COLUMN_MASK);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(50, Node.FREE_CALL);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(43, Node.IS_CONSTANT_NAME);
122:       assertEquals(40, Node.ORIGINALNAME_PROP);
123:       assertNotNull(node0);
124:       
125:       node0.removeProp(101);
126:       assertFalse(node0.isCase());
127:       assertFalse(node0.isString());
128:       assertFalse(node0.isIn());
129:       assertEquals(3634039, node0.getSourcePosition());
130:       assertFalse(node0.isNE());
131:       assertFalse(node0.isIf());
132:       assertFalse(node0.isSwitch());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isThrow());
135:       assertFalse(node0.isFalse());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isInc());
138:       assertFalse(node0.isDefaultCase());
139:       assertFalse(node0.isCatch());
140:       assertEquals(0, node0.getChildCount());
141:       assertFalse(node0.isInstanceOf());
142:       assertFalse(node0.isWith());
143:       assertFalse(node0.isRegExp());
144:       assertFalse(node0.isParamList());
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.isStringKey());
147:       assertEquals(887, node0.getCharno());
148:       assertFalse(node0.isFor());
149:       assertFalse(node0.isHook());
150:       assertFalse(node0.isNumber());
151:       assertFalse(node0.isGetterDef());
152:       assertFalse(node0.isBlock());
153:       assertFalse(node0.isThis());
154:       assertFalse(node0.isScript());
155:       assertFalse(node0.hasOneChild());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.isContinue());
158:       assertFalse(node0.isOr());
159:       assertEquals(887, node0.getLineno());
160:       assertFalse(node0.hasMoreThanOneChild());
161:       assertFalse(node0.isLabelName());
162:       assertFalse(node0.isCast());
163:       assertFalse(node0.isVar());
164:       assertFalse(node0.isNew());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isAssignAdd());
167:       assertFalse(node0.isSetterDef());
168:       assertFalse(node0.isAdd());
169:       assertFalse(node0.isDo());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isFunction());
172:       assertFalse(node0.isObjectLit());
173:       assertFalse(node0.isNot());
174:       assertFalse(node0.isDebugger());
175:       assertFalse(node0.isExprResult());
176:       assertFalse(node0.isTrue());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isVoid());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isGetElem());
182:       assertEquals(887, node0.getType());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isDec());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isComma());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isAssign());
189:       assertFalse(node0.isGetProp());
190:       assertFalse(node0.isReturn());
191:       assertFalse(node0.isWhile());
192:       assertEquals(32, Node.INCRDECR_PROP);
193:       assertEquals(46, Node.IS_NAMESPACE);
194:       assertEquals(2, Node.POST_FLAG);
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(51, Node.STATIC_SOURCE_FILE);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(57, Node.LAST_PROP);
201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
202:       assertEquals(1, Node.DECR_FLAG);
203:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(53, Node.INPUT_ID);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(36, Node.QUOTED_PROP);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(37, Node.OPT_ARG_NAME);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(40, Node.ORIGINALNAME_PROP);
228:       
229:       node0.setSourceEncodedPositionForTree(887);
230:       assertFalse(node0.isCase());
231:       assertFalse(node0.isString());
232:       assertFalse(node0.isIn());
233:       assertFalse(node0.isNE());
234:       assertFalse(node0.isIf());
235:       assertFalse(node0.isSwitch());
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isThrow());
238:       assertFalse(node0.isFalse());
239:       assertFalse(node0.isEmpty());
240:       assertFalse(node0.isInc());
241:       assertFalse(node0.isDefaultCase());
242:       assertFalse(node0.isCatch());
243:       assertEquals(0, node0.getChildCount());
244:       assertFalse(node0.isInstanceOf());
245:       assertFalse(node0.isWith());
246:       assertFalse(node0.isRegExp());
247:       assertFalse(node0.isParamList());
248:       assertFalse(node0.isArrayLit());
249:       assertFalse(node0.isStringKey());
250:       assertEquals(887, node0.getCharno());
251:       assertFalse(node0.isFor());
252:       assertFalse(node0.isHook());
253:       assertFalse(node0.isNumber());
254:       assertFalse(node0.isGetterDef());
255:       assertFalse(node0.isBlock());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isScript());
258:       assertFalse(node0.hasOneChild());
259:       assertFalse(node0.isTry());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.isOr());
262:       assertFalse(node0.hasMoreThanOneChild());
263:       assertFalse(node0.isLabelName());
264:       assertFalse(node0.isCast());
265:       assertFalse(node0.isVar());
266:       assertFalse(node0.isNew());
267:       assertFalse(node0.isLabel());
268:       assertFalse(node0.isAssignAdd());
269:       assertFalse(node0.isSetterDef());
270:       assertFalse(node0.isAdd());
271:       assertFalse(node0.isDo());
272:       assertFalse(node0.isAnd());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isObjectLit());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isDebugger());
277:       assertEquals(0, node0.getLineno());
278:       assertFalse(node0.isExprResult());
279:       assertFalse(node0.isTrue());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isBreak());
282:       assertFalse(node0.isVoid());
283:       assertFalse(node0.isName());
284:       assertFalse(node0.isGetElem());
285:       assertEquals(887, node0.getType());
286:       assertFalse(node0.isCall());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.hasChildren());
289:       assertFalse(node0.isComma());
290:       assertFalse(node0.isTypeOf());
291:       assertFalse(node0.isAssign());
292:       assertFalse(node0.isGetProp());
293:       assertFalse(node0.isReturn());
294:       assertEquals(887, node0.getSourcePosition());
295:       assertFalse(node0.isWhile());
296:       assertEquals(32, Node.INCRDECR_PROP);
297:       assertEquals(46, Node.IS_NAMESPACE);
298:       assertEquals(2, Node.POST_FLAG);
299:       assertEquals(12, Node.COLUMN_BITS);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(29, Node.JSDOC_INFO_PROP);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(57, Node.LAST_PROP);
305:       assertEquals(15, Node.NO_SIDE_EFFECTS);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(52, Node.LENGTH);
309:       assertEquals(53, Node.INPUT_ID);
310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
312:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(49, Node.DIRECT_EVAL);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(48, Node.DIRECTIVES);
319:       assertEquals(37, Node.OPT_ARG_NAME);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(39, Node.EMPTY_BLOCK);
327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(40, Node.ORIGINALNAME_PROP);
332:       
333:       Node node1 = new Node(101, node0, node0, node0);
334:       assertFalse(node0.isCase());
335:       assertFalse(node0.isString());
336:       assertFalse(node0.isIn());
337:       assertFalse(node0.isNE());
338:       assertFalse(node0.isIf());
339:       assertFalse(node0.isSwitch());
340:       assertFalse(node0.isDelProp());
341:       assertFalse(node0.isThrow());
342:       assertFalse(node0.isFalse());
343:       assertFalse(node0.isEmpty());
344:       assertFalse(node0.isInc());
345:       assertFalse(node0.isDefaultCase());
346:       assertFalse(node0.isCatch());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.isInstanceOf());
349:       assertFalse(node0.isWith());
350:       assertFalse(node0.isRegExp());
351:       assertFalse(node0.isParamList());
352:       assertFalse(node0.isArrayLit());
353:       assertFalse(node0.isStringKey());
354:       assertEquals(887, node0.getCharno());
355:       assertFalse(node0.isFor());
356:       assertFalse(node0.isHook());
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isGetterDef());
359:       assertFalse(node0.isBlock());
360:       assertFalse(node0.isThis());
361:       assertFalse(node0.isScript());
362:       assertFalse(node0.hasOneChild());
363:       assertFalse(node0.isTry());
364:       assertFalse(node0.isContinue());
365:       assertFalse(node0.isOr());
366:       assertFalse(node0.hasMoreThanOneChild());
367:       assertFalse(node0.isLabelName());
368:       assertFalse(node0.isCast());
369:       assertFalse(node0.isVar());
370:       assertFalse(node0.isNew());
371:       assertFalse(node0.isLabel());
372:       assertFalse(node0.isAssignAdd());
373:       assertFalse(node0.isSetterDef());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node0.isDo());
376:       assertFalse(node0.isAnd());
377:       assertFalse(node0.isFunction());
378:       assertFalse(node0.isObjectLit());
379:       assertFalse(node0.isNot());
380:       assertFalse(node0.isDebugger());
381:       assertEquals(0, node0.getLineno());
382:       assertFalse(node0.isExprResult());
383:       assertFalse(node0.isTrue());
384:       assertFalse(node0.isNull());
385:       assertFalse(node0.isBreak());
386:       assertFalse(node0.isVoid());
387:       assertFalse(node0.isName());
388:       assertFalse(node0.isGetElem());
389:       assertEquals(887, node0.getType());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isDec());
392:       assertFalse(node0.hasChildren());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isTypeOf());
395:       assertFalse(node0.isAssign());
396:       assertFalse(node0.isGetProp());
397:       assertFalse(node0.isReturn());
398:       assertEquals(887, node0.getSourcePosition());
399:       assertFalse(node0.isWhile());
400:       assertFalse(node1.isNot());
401:       assertFalse(node1.isExprResult());
402:       assertFalse(node1.isThis());
403:       assertFalse(node1.isCast());
404:       assertFalse(node1.isComma());
405:       assertFalse(node1.isInstanceOf());
406:       assertFalse(node1.isWith());
407:       assertFalse(node1.isThrow());
408:       assertFalse(node1.isBreak());
409:       assertFalse(node1.isGetElem());
410:       assertFalse(node1.isOr());
411:       assertFalse(node1.isInc());
412:       assertFalse(node1.isDo());
413:       assertFalse(node1.isCase());
414:       assertFalse(node1.isSwitch());
415:       assertTrue(node1.hasChildren());
416:       assertFalse(node1.isLabel());
417:       assertFalse(node1.isAssignAdd());
418:       assertEquals(1, node1.getChildCount());
419:       assertEquals((-1), node1.getLineno());
420:       assertFalse(node1.isHook());
421:       assertFalse(node1.isBlock());
422:       assertEquals(101, node1.getType());
423:       assertFalse(node1.hasMoreThanOneChild());
424:       assertFalse(node1.isLabelName());
425:       assertFalse(node1.isFor());
426:       assertFalse(node1.isStringKey());
427:       assertFalse(node1.isArrayLit());
428:       assertFalse(node1.isParamList());
429:       assertFalse(node1.isTry());
430:       assertEquals((-1), node1.getCharno());
431:       assertTrue(node1.isAnd());
432:       assertFalse(node1.isScript());
433:       assertFalse(node1.isGetterDef());
434:       assertFalse(node1.isNumber());
435:       assertFalse(node1.isVoid());
436:       assertFalse(node1.isDefaultCase());
437:       assertFalse(node1.isRegExp());
438:       assertFalse(node1.isCatch());
439:       assertFalse(node1.isFunction());
440:       assertFalse(node1.isEmpty());
441:       assertFalse(node1.isNull());
442:       assertFalse(node1.isCall());
443:       assertFalse(node1.isVar());
444:       assertFalse(node1.isNE());
445:       assertFalse(node1.isDelProp());
446:       assertFalse(node1.isIf());
447:       assertFalse(node1.isName());
448:       assertFalse(node1.isAdd());
449:       assertFalse(node1.isNew());
450:       assertFalse(node1.isTrue());
451:       assertFalse(node1.isSetterDef());
452:       assertFalse(node1.isIn());
453:       assertFalse(node1.isString());
454:       assertFalse(node1.isWhile());
455:       assertFalse(node1.isReturn());
456:       assertFalse(node1.isDec());
457:       assertFalse(node1.isContinue());
458:       assertFalse(node1.isFalse());
459:       assertFalse(node1.isTypeOf());
460:       assertFalse(node1.isAssign());
461:       assertTrue(node1.hasOneChild());
462:       assertFalse(node1.isDebugger());
463:       assertFalse(node1.isGetProp());
464:       assertEquals((-1), node1.getSourcePosition());
465:       assertFalse(node1.isObjectLit());
466:       assertFalse(node1.equals((Object)node0));
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(46, Node.IS_NAMESPACE);
469:       assertEquals(2, Node.POST_FLAG);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
472:       assertEquals(47, Node.IS_DISPATCHER);
473:       assertEquals(29, Node.JSDOC_INFO_PROP);
474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
475:       assertEquals(57, Node.LAST_PROP);
476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
479:       assertEquals(52, Node.LENGTH);
480:       assertEquals(53, Node.INPUT_ID);
481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
482:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
483:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
484:       assertEquals(57, Node.REFLECTED_OBJECT);
485:       assertEquals(36, Node.QUOTED_PROP);
486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
487:       assertEquals(49, Node.DIRECT_EVAL);
488:       assertEquals(56, Node.CHANGE_TIME);
489:       assertEquals(48, Node.DIRECTIVES);
490:       assertEquals(37, Node.OPT_ARG_NAME);
491:       assertEquals(4095, Node.COLUMN_MASK);
492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
493:       assertEquals(8, Node.FLAG_NO_THROWS);
494:       assertEquals(50, Node.FREE_CALL);
495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
496:       assertEquals(55, Node.INFERRED_FUNCTION);
497:       assertEquals(39, Node.EMPTY_BLOCK);
498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
499:       assertEquals(54, Node.SLASH_V);
500:       assertEquals(30, Node.VAR_ARGS_NAME);
501:       assertEquals(43, Node.IS_CONSTANT_NAME);
502:       assertEquals(40, Node.ORIGINALNAME_PROP);
503:       assertEquals(55, Node.INFERRED_FUNCTION);
504:       assertEquals(4095, Node.COLUMN_MASK);
505:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
506:       assertEquals(48, Node.DIRECTIVES);
507:       assertEquals(39, Node.EMPTY_BLOCK);
508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(8, Node.FLAG_NO_THROWS);
512:       assertEquals(50, Node.FREE_CALL);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
517:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
518:       assertEquals(32, Node.INCRDECR_PROP);
519:       assertEquals(46, Node.IS_NAMESPACE);
520:       assertEquals(12, Node.COLUMN_BITS);
521:       assertEquals(1, Node.DECR_FLAG);
522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
523:       assertEquals(49, Node.DIRECT_EVAL);
524:       assertEquals(37, Node.OPT_ARG_NAME);
525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
526:       assertEquals(29, Node.JSDOC_INFO_PROP);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(56, Node.CHANGE_TIME);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(40, Node.ORIGINALNAME_PROP);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(47, Node.IS_DISPATCHER);
536:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
537:       assertEquals(2, Node.POST_FLAG);
538:       assertEquals(30, Node.VAR_ARGS_NAME);
539:       assertNotNull(node1);
540:       
541:       Node node2 = Node.newNumber((-183.41873855730304), 42, 28);
542:       assertEquals(28, node2.getCharno());
543:       assertFalse(node2.isSwitch());
544:       assertFalse(node2.isThrow());
545:       assertFalse(node2.isHook());
546:       assertFalse(node2.isFalse());
547:       assertFalse(node2.isBreak());
548:       assertFalse(node2.isIn());
549:       assertFalse(node2.isNE());
550:       assertFalse(node2.isEmpty());
551:       assertFalse(node2.isInc());
552:       assertFalse(node2.isVoid());
553:       assertFalse(node2.isFunction());
554:       assertFalse(node2.isDebugger());
555:       assertEquals(42, node2.getLineno());
556:       assertFalse(node2.isTrue());
557:       assertFalse(node2.isAssign());
558:       assertFalse(node2.isTypeOf());
559:       assertFalse(node2.isDelProp());
560:       assertFalse(node2.isCast());
561:       assertFalse(node2.isExprResult());
562:       assertFalse(node2.isGetElem());
563:       assertTrue(node2.isNumber());
564:       assertFalse(node2.isAnd());
565:       assertFalse(node2.isComma());
566:       assertFalse(node2.isDec());
567:       assertFalse(node2.hasChildren());
568:       assertFalse(node2.isReturn());
569:       assertFalse(node2.isNot());
570:       assertFalse(node2.isString());
571:       assertFalse(node2.isWhile());
572:       assertFalse(node2.isObjectLit());
573:       assertFalse(node2.isGetProp());
574:       assertFalse(node2.isNew());
575:       assertFalse(node2.isVar());
576:       assertFalse(node2.isBlock());
577:       assertEquals(39, node2.getType());
578:       assertFalse(node2.isStringKey());
579:       assertFalse(node2.isContinue());
580:       assertFalse(node2.isName());
581:       assertFalse(node2.hasMoreThanOneChild());
582:       assertFalse(node2.isCall());
583:       assertFalse(node2.isOr());
584:       assertFalse(node2.isLabel());
585:       assertFalse(node2.isAssignAdd());
586:       assertEquals(0, node2.getChildCount());
587:       assertFalse(node2.isNull());
588:       assertFalse(node2.isDo());
589:       assertFalse(node2.isDefaultCase());
590:       assertFalse(node2.isAdd());
591:       assertFalse(node2.isSetterDef());
592:       assertFalse(node2.isTry());
593:       assertFalse(node2.isLabelName());
594:       assertFalse(node2.isWith());
595:       assertFalse(node2.isIf());
596:       assertFalse(node2.isRegExp());
597:       assertFalse(node2.isCatch());
598:       assertFalse(node2.isArrayLit());
599:       assertEquals(172060, node2.getSourcePosition());
600:       assertFalse(node2.isInstanceOf());
601:       assertFalse(node2.isParamList());
602:       assertFalse(node2.isThis());
603:       assertFalse(node2.isFor());
604:       assertFalse(node2.isCase());
605:       assertFalse(node2.isGetterDef());
606:       assertFalse(node2.isScript());
607:       assertFalse(node2.hasOneChild());
608:       assertFalse(node2.equals((Object)node1));
609:       assertFalse(node2.equals((Object)node0));
610:       assertEquals(15, Node.NO_SIDE_EFFECTS);
611:       assertEquals(57, Node.LAST_PROP);
612:       assertEquals(30, Node.VAR_ARGS_NAME);
613:       assertEquals(49, Node.DIRECT_EVAL);
614:       assertEquals(1, Node.DECR_FLAG);
615:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
616:       assertEquals(54, Node.SLASH_V);
617:       assertEquals(46, Node.IS_NAMESPACE);
618:       assertEquals(32, Node.INCRDECR_PROP);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
621:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
622:       assertEquals(52, Node.LENGTH);
623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
625:       assertEquals(37, Node.OPT_ARG_NAME);
626:       assertEquals(48, Node.DIRECTIVES);
627:       assertEquals(56, Node.CHANGE_TIME);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(4095, Node.COLUMN_MASK);
630:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
631:       assertEquals(36, Node.QUOTED_PROP);
632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
635:       assertEquals(8, Node.FLAG_NO_THROWS);
636:       assertEquals(53, Node.INPUT_ID);
637:       assertEquals(55, Node.INFERRED_FUNCTION);
638:       assertEquals(29, Node.JSDOC_INFO_PROP);
639:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
640:       assertEquals(47, Node.IS_DISPATCHER);
641:       assertEquals(2, Node.POST_FLAG);
642:       assertEquals(39, Node.EMPTY_BLOCK);
643:       assertEquals(50, Node.FREE_CALL);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       assertEquals(40, Node.ORIGINALNAME_PROP);
646:       assertNotNull(node2);
647:       
648:       boolean boolean0 = node1.isEquivalentTo(node0);
649:       assertNotSame(node0, node1);
650:       assertNotSame(node1, node0);
651:       assertFalse(node0.isCase());
652:       assertFalse(node0.isString());
653:       assertFalse(node0.isIn());
654:       assertFalse(node0.isNE());
655:       assertFalse(node0.isIf());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isDelProp());
658:       assertFalse(node0.isThrow());
659:       assertFalse(node0.isFalse());
660:       assertFalse(node0.isEmpty());
661:       assertFalse(node0.isInc());
662:       assertFalse(node0.isDefaultCase());
663:       assertFalse(node0.isCatch());
664:       assertEquals(0, node0.getChildCount());
665:       assertFalse(node0.isInstanceOf());
666:       assertFalse(node0.isWith());
667:       assertFalse(node0.isRegExp());
668:       assertFalse(node0.isParamList());
669:       assertFalse(node0.isArrayLit());
670:       assertFalse(node0.isStringKey());
671:       assertEquals(887, node0.getCharno());
672:       assertFalse(node0.isFor());
673:       assertFalse(node0.isHook());
674:       assertFalse(node0.isNumber());
675:       assertFalse(node0.isGetterDef());
676:       assertFalse(node0.isBlock());
677:       assertFalse(node0.isThis());
678:       assertFalse(node0.isScript());
679:       assertFalse(node0.hasOneChild());
680:       assertFalse(node0.isTry());
681:       assertFalse(node0.isContinue());
682:       assertFalse(node0.isOr());
683:       assertFalse(node0.hasMoreThanOneChild());
684:       assertFalse(node0.isLabelName());
685:       assertFalse(node0.isCast());
686:       assertFalse(node0.isVar());
687:       assertFalse(node0.isNew());
688:       assertFalse(node0.isLabel());
689:       assertFalse(node0.isAssignAdd());
690:       assertFalse(node0.isSetterDef());
691:       assertFalse(node0.isAdd());
692:       assertFalse(node0.isDo());
693:       assertFalse(node0.isAnd());
694:       assertFalse(node0.isFunction());
695:       assertFalse(node0.isObjectLit());
696:       assertFalse(node0.isNot());
697:       assertFalse(node0.isDebugger());
698:       assertEquals(0, node0.getLineno());
699:       assertFalse(node0.isExprResult());
700:       assertFalse(node0.isTrue());
701:       assertFalse(node0.isNull());
702:       assertFalse(node0.isBreak());
703:       assertFalse(node0.isVoid());
704:       assertFalse(node0.isName());
705:       assertFalse(node0.isGetElem());
706:       assertEquals(887, node0.getType());
707:       assertFalse(node0.isCall());
708:       assertFalse(node0.isDec());
709:       assertFalse(node0.hasChildren());
710:       assertFalse(node0.isComma());
711:       assertFalse(node0.isTypeOf());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isGetProp());
714:       assertFalse(node0.isReturn());
715:       assertEquals(887, node0.getSourcePosition());
716:       assertFalse(node0.isWhile());
717:       assertFalse(node1.isNot());
718:       assertFalse(node1.isExprResult());
719:       assertFalse(node1.isThis());
720:       assertFalse(node1.isCast());
721:       assertFalse(node1.isComma());
722:       assertFalse(node1.isInstanceOf());
723:       assertFalse(node1.isWith());
724:       assertFalse(node1.isThrow());
725:       assertFalse(node1.isBreak());
726:       assertFalse(node1.isGetElem());
727:       assertFalse(node1.isOr());
728:       assertFalse(node1.isInc());
729:       assertFalse(node1.isDo());
730:       assertFalse(node1.isCase());
731:       assertFalse(node1.isSwitch());
732:       assertTrue(node1.hasChildren());
733:       assertFalse(node1.isLabel());
734:       assertFalse(node1.isAssignAdd());
735:       assertEquals(1, node1.getChildCount());
736:       assertEquals((-1), node1.getLineno());
737:       assertFalse(node1.isHook());
738:       assertFalse(node1.isBlock());
739:       assertEquals(101, node1.getType());
740:       assertFalse(node1.hasMoreThanOneChild());
741:       assertFalse(node1.isLabelName());
742:       assertFalse(node1.isFor());
743:       assertFalse(node1.isStringKey());
744:       assertFalse(node1.isArrayLit());
745:       assertFalse(node1.isParamList());
746:       assertFalse(node1.isTry());
747:       assertEquals((-1), node1.getCharno());
748:       assertTrue(node1.isAnd());
749:       assertFalse(node1.isScript());
750:       assertFalse(node1.isGetterDef());
751:       assertFalse(node1.isNumber());
752:       assertFalse(node1.isVoid());
753:       assertFalse(node1.isDefaultCase());
754:       assertFalse(node1.isRegExp());
755:       assertFalse(node1.isCatch());
756:       assertFalse(node1.isFunction());
757:       assertFalse(node1.isEmpty());
758:       assertFalse(node1.isNull());
759:       assertFalse(node1.isCall());
760:       assertFalse(node1.isVar());
761:       assertFalse(node1.isNE());
762:       assertFalse(node1.isDelProp());
763:       assertFalse(node1.isIf());
764:       assertFalse(node1.isName());
765:       assertFalse(node1.isAdd());
766:       assertFalse(node1.isNew());
767:       assertFalse(node1.isTrue());
768:       assertFalse(node1.isSetterDef());
769:       assertFalse(node1.isIn());
770:       assertFalse(node1.isString());
771:       assertFalse(node1.isWhile());
772:       assertFalse(node1.isReturn());
773:       assertFalse(node1.isDec());
774:       assertFalse(node1.isContinue());
775:       assertFalse(node1.isFalse());
776:       assertFalse(node1.isTypeOf());
777:       assertFalse(node1.isAssign());
778:       assertTrue(node1.hasOneChild());
779:       assertFalse(node1.isDebugger());
780:       assertFalse(node1.isGetProp());
781:       assertEquals((-1), node1.getSourcePosition());
782:       assertFalse(node1.isObjectLit());
783:       assertFalse(boolean0);
784:       assertFalse(node0.equals((Object)node2));
785:       assertFalse(node0.equals((Object)node1));
786:       assertFalse(node1.equals((Object)node0));
787:       assertFalse(node1.equals((Object)node2));
788:       assertEquals(32, Node.INCRDECR_PROP);
789:       assertEquals(46, Node.IS_NAMESPACE);
790:       assertEquals(2, Node.POST_FLAG);
791:       assertEquals(12, Node.COLUMN_BITS);
792:       assertEquals(51, Node.STATIC_SOURCE_FILE);
793:       assertEquals(47, Node.IS_DISPATCHER);
794:       assertEquals(29, Node.JSDOC_INFO_PROP);
795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
796:       assertEquals(57, Node.LAST_PROP);
797:       assertEquals(15, Node.NO_SIDE_EFFECTS);
798:       assertEquals(1, Node.DECR_FLAG);
799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
800:       assertEquals(52, Node.LENGTH);
801:       assertEquals(53, Node.INPUT_ID);
802:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
803:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
805:       assertEquals(57, Node.REFLECTED_OBJECT);
806:       assertEquals(36, Node.QUOTED_PROP);
807:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
808:       assertEquals(49, Node.DIRECT_EVAL);
809:       assertEquals(56, Node.CHANGE_TIME);
810:       assertEquals(48, Node.DIRECTIVES);
811:       assertEquals(37, Node.OPT_ARG_NAME);
812:       assertEquals(4095, Node.COLUMN_MASK);
813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
814:       assertEquals(8, Node.FLAG_NO_THROWS);
815:       assertEquals(50, Node.FREE_CALL);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(55, Node.INFERRED_FUNCTION);
818:       assertEquals(39, Node.EMPTY_BLOCK);
819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
820:       assertEquals(54, Node.SLASH_V);
821:       assertEquals(30, Node.VAR_ARGS_NAME);
822:       assertEquals(43, Node.IS_CONSTANT_NAME);
823:       assertEquals(40, Node.ORIGINALNAME_PROP);
824:       assertEquals(55, Node.INFERRED_FUNCTION);
825:       assertEquals(4095, Node.COLUMN_MASK);
826:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
827:       assertEquals(48, Node.DIRECTIVES);
828:       assertEquals(39, Node.EMPTY_BLOCK);
829:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(8, Node.FLAG_NO_THROWS);
833:       assertEquals(50, Node.FREE_CALL);
834:       assertEquals(36, Node.QUOTED_PROP);
835:       assertEquals(57, Node.REFLECTED_OBJECT);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(32, Node.INCRDECR_PROP);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(12, Node.COLUMN_BITS);
842:       assertEquals(1, Node.DECR_FLAG);
843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
844:       assertEquals(49, Node.DIRECT_EVAL);
845:       assertEquals(37, Node.OPT_ARG_NAME);
846:       assertEquals(15, Node.NO_SIDE_EFFECTS);
847:       assertEquals(29, Node.JSDOC_INFO_PROP);
848:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
849:       assertEquals(56, Node.CHANGE_TIME);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(57, Node.LAST_PROP);
856:       assertEquals(47, Node.IS_DISPATCHER);
857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(30, Node.VAR_ARGS_NAME);
860:       
861:       Node node3 = Node.newString("");
862:       assertFalse(node3.isSwitch());
863:       assertEquals((-1), node3.getCharno());
864:       assertFalse(node3.isBreak());
865:       assertFalse(node3.isIf());
866:       assertFalse(node3.isFalse());
867:       assertFalse(node3.isDelProp());
868:       assertFalse(node3.isThrow());
869:       assertFalse(node3.isNE());
870:       assertFalse(node3.isIn());
871:       assertFalse(node3.isEmpty());
872:       assertFalse(node3.isInc());
873:       assertFalse(node3.isDefaultCase());
874:       assertFalse(node3.isWith());
875:       assertFalse(node3.isRegExp());
876:       assertEquals(0, node3.getChildCount());
877:       assertFalse(node3.isArrayLit());
878:       assertFalse(node3.isInstanceOf());
879:       assertFalse(node3.isCatch());
880:       assertFalse(node3.isGetterDef());
881:       assertFalse(node3.isLabelName());
882:       assertFalse(node3.isNumber());
883:       assertFalse(node3.isParamList());
884:       assertFalse(node3.isStringKey());
885:       assertFalse(node3.isFor());
886:       assertFalse(node3.isHook());
887:       assertFalse(node3.isThis());
888:       assertFalse(node3.hasOneChild());
889:       assertFalse(node3.isTry());
890:       assertTrue(node3.isString());
891:       assertFalse(node3.isCase());
892:       assertFalse(node3.isScript());
893:       assertFalse(node3.isWhile());
894:       assertFalse(node3.isDo());
895:       assertFalse(node3.isBlock());
896:       assertEquals((-1), node3.getLineno());
897:       assertFalse(node3.hasMoreThanOneChild());
898:       assertFalse(node3.isContinue());
899:       assertFalse(node3.isCall());
900:       assertFalse(node3.isName());
901:       assertFalse(node3.isVar());
902:       assertFalse(node3.isLabel());
903:       assertFalse(node3.isNull());
904:       assertFalse(node3.isOr());
905:       assertFalse(node3.isAssignAdd());
906:       assertFalse(node3.isNew());
907:       assertFalse(node3.isAdd());
908:       assertFalse(node3.isSetterDef());
909:       assertFalse(node3.isNot());
910:       assertFalse(node3.isFunction());
911:       assertFalse(node3.isAnd());
912:       assertFalse(node3.isDebugger());
913:       assertFalse(node3.isTrue());
914:       assertEquals(40, node3.getType());
915:       assertFalse(node3.isVoid());
916:       assertFalse(node3.isCast());
917:       assertFalse(node3.isExprResult());
918:       assertFalse(node3.isGetElem());
919:       assertFalse(node3.hasChildren());
920:       assertFalse(node3.isDec());
921:       assertEquals((-1), node3.getSourcePosition());
922:       assertFalse(node3.isAssign());
923:       assertFalse(node3.isTypeOf());
924:       assertFalse(node3.isComma());
925:       assertFalse(node3.isReturn());
926:       assertFalse(node3.isObjectLit());
927:       assertFalse(node3.isGetProp());
928:       assertFalse(node3.equals((Object)node1));
929:       assertFalse(node3.equals((Object)node2));
930:       assertFalse(node3.equals((Object)node0));
931:       assertEquals(12, Node.COLUMN_BITS);
932:       assertEquals(1, Node.DECR_FLAG);
933:       assertEquals(51, Node.STATIC_SOURCE_FILE);
934:       assertEquals(49, Node.DIRECT_EVAL);
935:       assertEquals(32, Node.INCRDECR_PROP);
936:       assertEquals(57, Node.LAST_PROP);
937:       assertEquals(46, Node.IS_NAMESPACE);
938:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(29, Node.JSDOC_INFO_PROP);
941:       assertEquals(52, Node.LENGTH);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(57, Node.REFLECTED_OBJECT);
944:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
948:       assertEquals(37, Node.OPT_ARG_NAME);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
951:       assertEquals(55, Node.INFERRED_FUNCTION);
952:       assertEquals(4095, Node.COLUMN_MASK);
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(43, Node.IS_CONSTANT_NAME);
955:       assertEquals(8, Node.FLAG_NO_THROWS);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(36, Node.QUOTED_PROP);
958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(53, Node.INPUT_ID);
961:       assertEquals(40, Node.ORIGINALNAME_PROP);
962:       assertEquals(54, Node.SLASH_V);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
965:       assertEquals(47, Node.IS_DISPATCHER);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertNotNull(node3);
968:       
969:       boolean boolean1 = node0.isCall();
970:       assertNotSame(node0, node1);
971:       assertFalse(node0.isCase());
972:       assertFalse(node0.isString());
973:       assertFalse(node0.isIn());
974:       assertFalse(node0.isNE());
975:       assertFalse(node0.isIf());
976:       assertFalse(node0.isSwitch());
977:       assertFalse(node0.isDelProp());
978:       assertFalse(node0.isThrow());
979:       assertFalse(node0.isFalse());
980:       assertFalse(node0.isEmpty());
981:       assertFalse(node0.isInc());
982:       assertFalse(node0.isDefaultCase());
983:       assertFalse(node0.isCatch());
984:       assertEquals(0, node0.getChildCount());
985:       assertFalse(node0.isInstanceOf());
986:       assertFalse(node0.isWith());
987:       assertFalse(node0.isRegExp());
988:       assertFalse(node0.isParamList());
989:       assertFalse(node0.isArrayLit());
990:       assertFalse(node0.isStringKey());
991:       assertEquals(887, node0.getCharno());
992:       assertFalse(node0.isFor());
993:       assertFalse(node0.isHook());
994:       assertFalse(node0.isNumber());
995:       assertFalse(node0.isGetterDef());
996:       assertFalse(node0.isBlock());
997:       assertFalse(node0.isThis());
998:       assertFalse(node0.isScript());
999:       assertFalse(node0.hasOneChild());
1000:       assertFalse(node0.isTry());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isOr());
1003:       assertFalse(node0.hasMoreThanOneChild());
1004:       assertFalse(node0.isLabelName());
1005:       assertFalse(node0.isCast());
1006:       assertFalse(node0.isVar());
1007:       assertFalse(node0.isNew());
1008:       assertFalse(node0.isLabel());
1009:       assertFalse(node0.isAssignAdd());
1010:       assertFalse(node0.isSetterDef());
1011:       assertFalse(node0.isAdd());
1012:       assertFalse(node0.isDo());
1013:       assertFalse(node0.isAnd());
1014:       assertFalse(node0.isFunction());
1015:       assertFalse(node0.isObjectLit());
1016:       assertFalse(node0.isNot());
1017:       assertFalse(node0.isDebugger());
1018:       assertEquals(0, node0.getLineno());
1019:       assertFalse(node0.isExprResult());
1020:       assertFalse(node0.isTrue());
1021:       assertFalse(node0.isNull());
1022:       assertFalse(node0.isBreak());
1023:       assertFalse(node0.isVoid());
1024:       assertFalse(node0.isName());
1025:       assertFalse(node0.isGetElem());
1026:       assertEquals(887, node0.getType());
1027:       assertFalse(node0.isCall());
1028:       assertFalse(node0.isDec());
1029:       assertFalse(node0.hasChildren());
1030:       assertFalse(node0.isComma());
1031:       assertFalse(node0.isTypeOf());
1032:       assertFalse(node0.isAssign());
1033:       assertFalse(node0.isGetProp());
1034:       assertFalse(node0.isReturn());
1035:       assertEquals(887, node0.getSourcePosition());
1036:       assertFalse(node0.isWhile());
1037:       assertFalse(boolean1);
1038:       assertFalse(node0.equals((Object)node2));
1039:       assertFalse(node0.equals((Object)node3));
1040:       assertFalse(node0.equals((Object)node1));
1041:       assertTrue(boolean1 == boolean0);
1042:       assertEquals(32, Node.INCRDECR_PROP);
1043:       assertEquals(46, Node.IS_NAMESPACE);
1044:       assertEquals(2, Node.POST_FLAG);
1045:       assertEquals(12, Node.COLUMN_BITS);
1046:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1047:       assertEquals(47, Node.IS_DISPATCHER);
1048:       assertEquals(29, Node.JSDOC_INFO_PROP);
1049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1050:       assertEquals(57, Node.LAST_PROP);
1051:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1052:       assertEquals(1, Node.DECR_FLAG);
1053:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1054:       assertEquals(52, Node.LENGTH);
1055:       assertEquals(53, Node.INPUT_ID);
1056:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1057:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1058:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1059:       assertEquals(57, Node.REFLECTED_OBJECT);
1060:       assertEquals(36, Node.QUOTED_PROP);
1061:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1062:       assertEquals(49, Node.DIRECT_EVAL);
1063:       assertEquals(56, Node.CHANGE_TIME);
1064:       assertEquals(48, Node.DIRECTIVES);
1065:       assertEquals(37, Node.OPT_ARG_NAME);
1066:       assertEquals(4095, Node.COLUMN_MASK);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(8, Node.FLAG_NO_THROWS);
1069:       assertEquals(50, Node.FREE_CALL);
1070:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1071:       assertEquals(55, Node.INFERRED_FUNCTION);
1072:       assertEquals(39, Node.EMPTY_BLOCK);
1073:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1074:       assertEquals(54, Node.SLASH_V);
1075:       assertEquals(30, Node.VAR_ARGS_NAME);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(40, Node.ORIGINALNAME_PROP);
1078:       
1079:       node1.setCharno(2);
1080:       assertNotSame(node0, node1);
1081:       assertNotSame(node1, node0);
1082:       assertFalse(node0.isCase());
1083:       assertFalse(node0.isString());
1084:       assertFalse(node0.isIn());
1085:       assertFalse(node0.isNE());
1086:       assertFalse(node0.isIf());
1087:       assertFalse(node0.isSwitch());
1088:       assertFalse(node0.isDelProp());
1089:       assertFalse(node0.isThrow());
1090:       assertFalse(node0.isFalse());
1091:       assertFalse(node0.isEmpty());
1092:       assertFalse(node0.isInc());
1093:       assertFalse(node0.isDefaultCase());
1094:       assertFalse(node0.isCatch());
1095:       assertEquals(0, node0.getChildCount());
1096:       assertFalse(node0.isInstanceOf());
1097:       assertFalse(node0.isWith());
1098:       assertFalse(node0.isRegExp());
1099:       assertFalse(node0.isParamList());
1100:       assertFalse(node0.isArrayLit());
1101:       assertFalse(node0.isStringKey());
1102:       assertEquals(887, node0.getCharno());
1103:       assertFalse(node0.isFor());
1104:       assertFalse(node0.isHook());
1105:       assertFalse(node0.isNumber());
1106:       assertFalse(node0.isGetterDef());
1107:       assertFalse(node0.isBlock());
1108:       assertFalse(node0.isThis());
1109:       assertFalse(node0.isScript());
1110:       assertFalse(node0.hasOneChild());
1111:       assertFalse(node0.isTry());
1112:       assertFalse(node0.isContinue());
1113:       assertFalse(node0.isOr());
1114:       assertFalse(node0.hasMoreThanOneChild());
1115:       assertFalse(node0.isLabelName());
1116:       assertFalse(node0.isCast());
1117:       assertFalse(node0.isVar());
1118:       assertFalse(node0.isNew());
1119:       assertFalse(node0.isLabel());
1120:       assertFalse(node0.isAssignAdd());
1121:       assertFalse(node0.isSetterDef());
1122:       assertFalse(node0.isAdd());
1123:       assertFalse(node0.isDo());
1124:       assertFalse(node0.isAnd());
1125:       assertFalse(node0.isFunction());
1126:       assertFalse(node0.isObjectLit());
1127:       assertFalse(node0.isNot());
1128:       assertFalse(node0.isDebugger());
1129:       assertEquals(0, node0.getLineno());
1130:       assertFalse(node0.isExprResult());
1131:       assertFalse(node0.isTrue());
1132:       assertFalse(node0.isNull());
1133:       assertFalse(node0.isBreak());
1134:       assertFalse(node0.isVoid());
1135:       assertFalse(node0.isName());
1136:       assertFalse(node0.isGetElem());
1137:       assertEquals(887, node0.getType());
1138:       assertFalse(node0.isCall());
1139:       assertFalse(node0.isDec());
1140:       assertFalse(node0.hasChildren());
1141:       assertFalse(node0.isComma());
1142:       assertFalse(node0.isTypeOf());
1143:       assertFalse(node0.isAssign());
1144:       assertFalse(node0.isGetProp());
1145:       assertFalse(node0.isReturn());
1146:       assertEquals(887, node0.getSourcePosition());
1147:       assertFalse(node0.isWhile());
1148:       assertFalse(node1.isNot());
1149:       assertFalse(node1.isExprResult());
1150:       assertFalse(node1.isThis());
1151:       assertFalse(node1.isCast());
1152:       assertFalse(node1.isComma());
1153:       assertFalse(node1.isInstanceOf());
1154:       assertFalse(node1.isWith());
1155:       assertFalse(node1.isThrow());
1156:       assertFalse(node1.isBreak());
1157:       assertFalse(node1.isGetElem());
1158:       assertFalse(node1.isOr());
1159:       assertFalse(node1.isInc());
1160:       assertFalse(node1.isDo());
1161:       assertFalse(node1.isCase());
1162:       assertFalse(node1.isSwitch());
1163:       assertTrue(node1.hasChildren());
1164:       assertFalse(node1.isLabel());
1165:       assertFalse(node1.isAssignAdd());
1166:       assertEquals(1, node1.getChildCount());
1167:       assertEquals((-1), node1.getLineno());
1168:       assertFalse(node1.isHook());
1169:       assertFalse(node1.isBlock());
1170:       assertEquals(101, node1.getType());
1171:       assertFalse(node1.hasMoreThanOneChild());
1172:       assertFalse(node1.isLabelName());
1173:       assertFalse(node1.isFor());
1174:       assertFalse(node1.isStringKey());
1175:       assertFalse(node1.isArrayLit());
1176:       assertFalse(node1.isParamList());
1177:       assertFalse(node1.isTry());
1178:       assertEquals((-1), node1.getCharno());
1179:       assertTrue(node1.isAnd());
1180:       assertFalse(node1.isScript());
1181:       assertFalse(node1.isGetterDef());
1182:       assertFalse(node1.isNumber());
1183:       assertFalse(node1.isVoid());
1184:       assertFalse(node1.isDefaultCase());
1185:       assertFalse(node1.isRegExp());
1186:       assertFalse(node1.isCatch());
1187:       assertFalse(node1.isFunction());
1188:       assertFalse(node1.isEmpty());
1189:       assertFalse(node1.isNull());
1190:       assertFalse(node1.isCall());
1191:       assertFalse(node1.isVar());
1192:       assertFalse(node1.isNE());
1193:       assertFalse(node1.isDelProp());
1194:       assertFalse(node1.isIf());
1195:       assertFalse(node1.isName());
1196:       assertFalse(node1.isAdd());
1197:       assertFalse(node1.isNew());
1198:       assertFalse(node1.isTrue());
1199:       assertFalse(node1.isSetterDef());
1200:       assertFalse(node1.isIn());
1201:       assertFalse(node1.isString());
1202:       assertFalse(node1.isWhile());
1203:       assertFalse(node1.isReturn());
1204:       assertFalse(node1.isDec());
1205:       assertFalse(node1.isContinue());
1206:       assertFalse(node1.isFalse());
1207:       assertFalse(node1.isTypeOf());
1208:       assertFalse(node1.isAssign());
1209:       assertTrue(node1.hasOneChild());
1210:       assertFalse(node1.isDebugger());
1211:       assertFalse(node1.isGetProp());
1212:       assertEquals((-1), node1.getSourcePosition());
1213:       assertFalse(node1.isObjectLit());
1214:       assertFalse(node0.equals((Object)node2));
1215:       assertFalse(node0.equals((Object)node3));
1216:       assertFalse(node0.equals((Object)node1));
1217:       assertFalse(node1.equals((Object)node3));
1218:       assertFalse(node1.equals((Object)node0));
1219:       assertFalse(node1.equals((Object)node2));
1220:       assertEquals(32, Node.INCRDECR_PROP);
1221:       assertEquals(46, Node.IS_NAMESPACE);
1222:       assertEquals(2, Node.POST_FLAG);
1223:       assertEquals(12, Node.COLUMN_BITS);
1224:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1225:       assertEquals(47, Node.IS_DISPATCHER);
1226:       assertEquals(29, Node.JSDOC_INFO_PROP);
1227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1228:       assertEquals(57, Node.LAST_PROP);
1229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1230:       assertEquals(1, Node.DECR_FLAG);
1231:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1232:       assertEquals(52, Node.LENGTH);
1233:       assertEquals(53, Node.INPUT_ID);
1234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1237:       assertEquals(57, Node.REFLECTED_OBJECT);
1238:       assertEquals(36, Node.QUOTED_PROP);
1239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1240:       assertEquals(49, Node.DIRECT_EVAL);
1241:       assertEquals(56, Node.CHANGE_TIME);
1242:       assertEquals(48, Node.DIRECTIVES);
1243:       assertEquals(37, Node.OPT_ARG_NAME);
1244:       assertEquals(4095, Node.COLUMN_MASK);
1245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1246:       assertEquals(8, Node.FLAG_NO_THROWS);
1247:       assertEquals(50, Node.FREE_CALL);
1248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1249:       assertEquals(55, Node.INFERRED_FUNCTION);
1250:       assertEquals(39, Node.EMPTY_BLOCK);
1251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1252:       assertEquals(54, Node.SLASH_V);
1253:       assertEquals(30, Node.VAR_ARGS_NAME);
1254:       assertEquals(43, Node.IS_CONSTANT_NAME);
1255:       assertEquals(40, Node.ORIGINALNAME_PROP);
1256:       assertEquals(55, Node.INFERRED_FUNCTION);
1257:       assertEquals(4095, Node.COLUMN_MASK);
1258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1259:       assertEquals(48, Node.DIRECTIVES);
1260:       assertEquals(39, Node.EMPTY_BLOCK);
1261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1263:       assertEquals(43, Node.IS_CONSTANT_NAME);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(50, Node.FREE_CALL);
1266:       assertEquals(36, Node.QUOTED_PROP);
1267:       assertEquals(57, Node.REFLECTED_OBJECT);
1268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(32, Node.INCRDECR_PROP);
1272:       assertEquals(46, Node.IS_NAMESPACE);
1273:       assertEquals(12, Node.COLUMN_BITS);
1274:       assertEquals(1, Node.DECR_FLAG);
1275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1276:       assertEquals(49, Node.DIRECT_EVAL);
1277:       assertEquals(37, Node.OPT_ARG_NAME);
1278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1279:       assertEquals(29, Node.JSDOC_INFO_PROP);
1280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1281:       assertEquals(56, Node.CHANGE_TIME);
1282:       assertEquals(54, Node.SLASH_V);
1283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1284:       assertEquals(52, Node.LENGTH);
1285:       assertEquals(40, Node.ORIGINALNAME_PROP);
1286:       assertEquals(53, Node.INPUT_ID);
1287:       assertEquals(57, Node.LAST_PROP);
1288:       assertEquals(47, Node.IS_DISPATCHER);
1289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1290:       assertEquals(2, Node.POST_FLAG);
1291:       assertEquals(30, Node.VAR_ARGS_NAME);
1292:       
1293:       Node node4 = node3.useSourceInfoFrom(node2);
1294:       assertSame(node3, node4);
1295:       assertSame(node4, node3);
1296:       assertEquals(28, node2.getCharno());
1297:       assertFalse(node2.isSwitch());
1298:       assertFalse(node2.isThrow());
1299:       assertFalse(node2.isHook());
1300:       assertFalse(node2.isFalse());
1301:       assertFalse(node2.isBreak());
1302:       assertFalse(node2.isIn());
1303:       assertFalse(node2.isNE());
1304:       assertFalse(node2.isEmpty());
1305:       assertFalse(node2.isInc());
1306:       assertFalse(node2.isVoid());
1307:       assertFalse(node2.isFunction());
1308:       assertFalse(node2.isDebugger());
1309:       assertEquals(42, node2.getLineno());
1310:       assertFalse(node2.isTrue());
1311:       assertFalse(node2.isAssign());
1312:       assertFalse(node2.isTypeOf());
1313:       assertFalse(node2.isDelProp());
1314:       assertFalse(node2.isCast());
1315:       assertFalse(node2.isExprResult());
1316:       assertFalse(node2.isGetElem());
1317:       assertTrue(node2.isNumber());
1318:       assertFalse(node2.isAnd());
1319:       assertFalse(node2.isComma());
1320:       assertFalse(node2.isDec());
1321:       assertFalse(node2.hasChildren());
1322:       assertFalse(node2.isReturn());
1323:       assertFalse(node2.isNot());
1324:       assertFalse(node2.isString());
1325:       assertFalse(node2.isWhile());
1326:       assertFalse(node2.isObjectLit());
1327:       assertFalse(node2.isGetProp());
1328:       assertFalse(node2.isNew());
1329:       assertFalse(node2.isVar());
1330:       assertFalse(node2.isBlock());
1331:       assertEquals(39, node2.getType());
1332:       assertFalse(node2.isStringKey());
1333:       assertFalse(node2.isContinue());
1334:       assertFalse(node2.isName());
1335:       assertFalse(node2.hasMoreThanOneChild());
1336:       assertFalse(node2.isCall());
1337:       assertFalse(node2.isOr());
1338:       assertFalse(node2.isLabel());
1339:       assertFalse(node2.isAssignAdd());
1340:       assertEquals(0, node2.getChildCount());
1341:       assertFalse(node2.isNull());
1342:       assertFalse(node2.isDo());
1343:       assertFalse(node2.isDefaultCase());
1344:       assertFalse(node2.isAdd());
1345:       assertFalse(node2.isSetterDef());
1346:       assertFalse(node2.isTry());
1347:       assertFalse(node2.isLabelName());
1348:       assertFalse(node2.isWith());
1349:       assertFalse(node2.isIf());
1350:       assertFalse(node2.isRegExp());
1351:       assertFalse(node2.isCatch());
1352:       assertFalse(node2.isArrayLit());
1353:       assertEquals(172060, node2.getSourcePosition());
1354:       assertFalse(node2.isInstanceOf());
1355:       assertFalse(node2.isParamList());
1356:       assertFalse(node2.isThis());
1357:       assertFalse(node2.isFor());
1358:       assertFalse(node2.isCase());
1359:       assertFalse(node2.isGetterDef());
1360:       assertFalse(node2.isScript());
1361:       assertFalse(node2.hasOneChild());
1362:       assertFalse(node3.isSwitch());
1363:       assertFalse(node3.isBreak());
1364:       assertFalse(node3.isIf());
1365:       assertFalse(node3.isFalse());
1366:       assertFalse(node3.isDelProp());
1367:       assertFalse(node3.isThrow());
1368:       assertFalse(node3.isNE());
1369:       assertFalse(node3.isIn());
1370:       assertFalse(node3.isEmpty());
1371:       assertFalse(node3.isInc());
1372:       assertFalse(node3.isDefaultCase());
1373:       assertFalse(node3.isWith());
1374:       assertFalse(node3.isRegExp());
1375:       assertEquals(0, node3.getChildCount());
1376:       assertFalse(node3.isArrayLit());
1377:       assertFalse(node3.isInstanceOf());
1378:       assertEquals(172060, node3.getSourcePosition());
1379:       assertFalse(node3.isCatch());
1380:       assertFalse(node3.isGetterDef());
1381:       assertFalse(node3.isLabelName());
1382:       assertFalse(node3.isNumber());
1383:       assertFalse(node3.isParamList());
1384:       assertFalse(node3.isStringKey());
1385:       assertFalse(node3.isFor());
1386:       assertFalse(node3.isHook());
1387:       assertFalse(node3.isThis());
1388:       assertFalse(node3.hasOneChild());
1389:       assertFalse(node3.isTry());
1390:       assertTrue(node3.isString());
1391:       assertEquals(28, node3.getCharno());
1392:       assertFalse(node3.isCase());
1393:       assertFalse(node3.isScript());
1394:       assertFalse(node3.isWhile());
1395:       assertFalse(node3.isDo());
1396:       assertFalse(node3.isBlock());
1397:       assertFalse(node3.hasMoreThanOneChild());
1398:       assertFalse(node3.isContinue());
1399:       assertFalse(node3.isCall());
1400:       assertFalse(node3.isName());
1401:       assertFalse(node3.isVar());
1402:       assertFalse(node3.isLabel());
1403:       assertFalse(node3.isNull());
1404:       assertFalse(node3.isOr());
1405:       assertFalse(node3.isAssignAdd());
1406:       assertFalse(node3.isNew());
1407:       assertFalse(node3.isAdd());
1408:       assertFalse(node3.isSetterDef());
1409:       assertFalse(node3.isNot());
1410:       assertFalse(node3.isFunction());
1411:       assertFalse(node3.isAnd());
1412:       assertFalse(node3.isDebugger());
1413:       assertFalse(node3.isTrue());
1414:       assertEquals(40, node3.getType());
1415:       assertFalse(node3.isVoid());
1416:       assertFalse(node3.isCast());
1417:       assertFalse(node3.isExprResult());
1418:       assertFalse(node3.isGetElem());
1419:       assertFalse(node3.hasChildren());
1420:       assertFalse(node3.isDec());
1421:       assertFalse(node3.isAssign());
1422:       assertFalse(node3.isTypeOf());
1423:       assertEquals(42, node3.getLineno());
1424:       assertFalse(node3.isComma());
1425:       assertFalse(node3.isReturn());
1426:       assertFalse(node3.isObjectLit());
1427:       assertFalse(node3.isGetProp());
1428:       assertFalse(node4.isTrue());
1429:       assertEquals(40, node4.getType());
1430:       assertFalse(node4.isDebugger());
1431:       assertEquals(172060, node4.getSourcePosition());
1432:       assertFalse(node4.isCatch());
1433:       assertFalse(node4.isRegExp());
1434:       assertFalse(node4.isFunction());
1435:       assertEquals(0, node4.getChildCount());
1436:       assertEquals(42, node4.getLineno());
1437:       assertFalse(node4.isTry());
1438:       assertFalse(node4.isDefaultCase());
1439:       assertFalse(node4.isGetterDef());
1440:       assertFalse(node4.isArrayLit());
1441:       assertFalse(node4.isParamList());
1442:       assertFalse(node4.isStringKey());
1443:       assertFalse(node4.isWhile());
1444:       assertFalse(node4.isVar());
1445:       assertFalse(node4.isAdd());
1446:       assertFalse(node4.isLabel());
1447:       assertFalse(node4.isReturn());
1448:       assertFalse(node4.isNew());
1449:       assertFalse(node4.isDo());
1450:       assertFalse(node4.isAssignAdd());
1451:       assertFalse(node4.isDelProp());
1452:       assertFalse(node4.hasChildren());
1453:       assertFalse(node4.isBreak());
1454:       assertFalse(node4.isDec());
1455:       assertFalse(node4.isEmpty());
1456:       assertFalse(node4.isNull());
1457:       assertFalse(node4.isGetElem());
1458:       assertFalse(node4.isComma());
1459:       assertFalse(node4.isTypeOf());
1460:       assertFalse(node4.isOr());
1461:       assertFalse(node4.isAssign());
1462:       assertFalse(node4.isCall());
1463:       assertFalse(node4.isVoid());
1464:       assertFalse(node4.isName());
1465:       assertFalse(node4.isScript());
1466:       assertFalse(node4.isExprResult());
1467:       assertFalse(node4.isObjectLit());
1468:       assertFalse(node4.isNot());
1469:       assertFalse(node4.isWith());
1470:       assertFalse(node4.hasOneChild());
1471:       assertFalse(node4.isGetProp());
1472:       assertFalse(node4.isFalse());
1473:       assertFalse(node4.isNumber());
1474:       assertFalse(node4.isCast());
1475:       assertFalse(node4.isAnd());
1476:       assertFalse(node4.isLabelName());
1477:       assertFalse(node4.isSwitch());
1478:       assertFalse(node4.isInc());
1479:       assertFalse(node4.isContinue());
1480:       assertEquals(28, node4.getCharno());
1481:       assertFalse(node4.hasMoreThanOneChild());
1482:       assertFalse(node4.isIn());
1483:       assertFalse(node4.isHook());
1484:       assertFalse(node4.isBlock());
1485:       assertFalse(node4.isThrow());
1486:       assertFalse(node4.isCase());
1487:       assertTrue(node4.isString());
1488:       assertFalse(node4.isIf());
1489:       assertFalse(node4.isFor());
1490:       assertFalse(node4.isNE());
1491:       assertFalse(node4.isSetterDef());
1492:       assertFalse(node4.isThis());
1493:       assertFalse(node4.isInstanceOf());
1494:       assertFalse(node2.equals((Object)node1));
1495:       assertFalse(node2.equals((Object)node0));
1496:       assertFalse(node2.equals((Object)node3));
1497:       assertFalse(node3.equals((Object)node1));
1498:       assertFalse(node3.equals((Object)node2));
1499:       assertFalse(node3.equals((Object)node0));
1500:       assertFalse(node4.equals((Object)node2));
1501:       assertFalse(node4.equals((Object)node0));
1502:       assertFalse(node4.equals((Object)node1));
1503:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1504:       assertEquals(57, Node.LAST_PROP);
1505:       assertEquals(30, Node.VAR_ARGS_NAME);
1506:       assertEquals(49, Node.DIRECT_EVAL);
1507:       assertEquals(1, Node.DECR_FLAG);
1508:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1509:       assertEquals(54, Node.SLASH_V);
1510:       assertEquals(46, Node.IS_NAMESPACE);
1511:       assertEquals(32, Node.INCRDECR_PROP);
1512:       assertEquals(57, Node.REFLECTED_OBJECT);
1513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1515:       assertEquals(52, Node.LENGTH);
1516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1518:       assertEquals(37, Node.OPT_ARG_NAME);
1519:       assertEquals(48, Node.DIRECTIVES);
1520:       assertEquals(56, Node.CHANGE_TIME);
1521:       assertEquals(12, Node.COLUMN_BITS);
1522:       assertEquals(4095, Node.COLUMN_MASK);
1523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1524:       assertEquals(36, Node.QUOTED_PROP);
1525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1526:       assertEquals(43, Node.IS_CONSTANT_NAME);
1527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1528:       assertEquals(8, Node.FLAG_NO_THROWS);
1529:       assertEquals(53, Node.INPUT_ID);
1530:       assertEquals(55, Node.INFERRED_FUNCTION);
1531:       assertEquals(29, Node.JSDOC_INFO_PROP);
1532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1533:       assertEquals(47, Node.IS_DISPATCHER);
1534:       assertEquals(2, Node.POST_FLAG);
1535:       assertEquals(39, Node.EMPTY_BLOCK);
1536:       assertEquals(50, Node.FREE_CALL);
1537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1538:       assertEquals(40, Node.ORIGINALNAME_PROP);
1539:       assertEquals(12, Node.COLUMN_BITS);
1540:       assertEquals(1, Node.DECR_FLAG);
1541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1542:       assertEquals(49, Node.DIRECT_EVAL);
1543:       assertEquals(32, Node.INCRDECR_PROP);
1544:       assertEquals(57, Node.LAST_PROP);
1545:       assertEquals(46, Node.IS_NAMESPACE);
1546:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1548:       assertEquals(29, Node.JSDOC_INFO_PROP);
1549:       assertEquals(52, Node.LENGTH);
1550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1551:       assertEquals(57, Node.REFLECTED_OBJECT);
1552:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1553:       assertEquals(56, Node.CHANGE_TIME);
1554:       assertEquals(48, Node.DIRECTIVES);
1555:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1556:       assertEquals(37, Node.OPT_ARG_NAME);
1557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1559:       assertEquals(55, Node.INFERRED_FUNCTION);
1560:       assertEquals(4095, Node.COLUMN_MASK);
1561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1562:       assertEquals(43, Node.IS_CONSTANT_NAME);
1563:       assertEquals(8, Node.FLAG_NO_THROWS);
1564:       assertEquals(39, Node.EMPTY_BLOCK);
1565:       assertEquals(36, Node.QUOTED_PROP);
1566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1567:       assertEquals(50, Node.FREE_CALL);
1568:       assertEquals(53, Node.INPUT_ID);
1569:       assertEquals(40, Node.ORIGINALNAME_PROP);
1570:       assertEquals(54, Node.SLASH_V);
1571:       assertEquals(2, Node.POST_FLAG);
1572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1573:       assertEquals(47, Node.IS_DISPATCHER);
1574:       assertEquals(30, Node.VAR_ARGS_NAME);
1575:       assertEquals(4095, Node.COLUMN_MASK);
1576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1577:       assertEquals(55, Node.INFERRED_FUNCTION);
1578:       assertEquals(36, Node.QUOTED_PROP);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1581:       assertEquals(43, Node.IS_CONSTANT_NAME);
1582:       assertEquals(48, Node.DIRECTIVES);
1583:       assertEquals(40, Node.ORIGINALNAME_PROP);
1584:       assertEquals(57, Node.REFLECTED_OBJECT);
1585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1586:       assertEquals(52, Node.LENGTH);
1587:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1588:       assertEquals(8, Node.FLAG_NO_THROWS);
1589:       assertEquals(39, Node.EMPTY_BLOCK);
1590:       assertEquals(47, Node.IS_DISPATCHER);
1591:       assertEquals(57, Node.LAST_PROP);
1592:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1593:       assertEquals(29, Node.JSDOC_INFO_PROP);
1594:       assertEquals(53, Node.INPUT_ID);
1595:       assertEquals(12, Node.COLUMN_BITS);
1596:       assertEquals(46, Node.IS_NAMESPACE);
1597:       assertEquals(30, Node.VAR_ARGS_NAME);
1598:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1599:       assertEquals(2, Node.POST_FLAG);
1600:       assertEquals(54, Node.SLASH_V);
1601:       assertEquals(56, Node.CHANGE_TIME);
1602:       assertEquals(49, Node.DIRECT_EVAL);
1603:       assertEquals(37, Node.OPT_ARG_NAME);
1604:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1606:       assertEquals(50, Node.FREE_CALL);
1607:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1608:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1609:       assertEquals(32, Node.INCRDECR_PROP);
1610:       assertEquals(1, Node.DECR_FLAG);
1611:       assertNotNull(node4);
1612:       
1613:       Iterable<Node> iterable0 = node2.children();
1614:       assertEquals(28, node2.getCharno());
1615:       assertFalse(node2.isSwitch());
1616:       assertFalse(node2.isThrow());
1617:       assertFalse(node2.isHook());
1618:       assertFalse(node2.isFalse());
1619:       assertFalse(node2.isBreak());
1620:       assertFalse(node2.isIn());
1621:       assertFalse(node2.isNE());
1622:       assertFalse(node2.isEmpty());
1623:       assertFalse(node2.isInc());
1624:       assertFalse(node2.isVoid());
1625:       assertFalse(node2.isFunction());
1626:       assertFalse(node2.isDebugger());
1627:       assertEquals(42, node2.getLineno());
1628:       assertFalse(node2.isTrue());
1629:       assertFalse(node2.isAssign());
1630:       assertFalse(node2.isTypeOf());
1631:       assertFalse(node2.isDelProp());
1632:       assertFalse(node2.isCast());
1633:       assertFalse(node2.isExprResult());
1634:       assertFalse(node2.isGetElem());
1635:       assertTrue(node2.isNumber());
1636:       assertFalse(node2.isAnd());
1637:       assertFalse(node2.isComma());
1638:       assertFalse(node2.isDec());
1639:       assertFalse(node2.hasChildren());
1640:       assertFalse(node2.isReturn());
1641:       assertFalse(node2.isNot());
1642:       assertFalse(node2.isString());
1643:       assertFalse(node2.isWhile());
1644:       assertFalse(node2.isObjectLit());
1645:       assertFalse(node2.isGetProp());
1646:       assertFalse(node2.isNew());
1647:       assertFalse(node2.isVar());
1648:       assertFalse(node2.isBlock());
1649:       assertEquals(39, node2.getType());
1650:       assertFalse(node2.isStringKey());
1651:       assertFalse(node2.isContinue());
1652:       assertFalse(node2.isName());
1653:       assertFalse(node2.hasMoreThanOneChild());
1654:       assertFalse(node2.isCall());
1655:       assertFalse(node2.isOr());
1656:       assertFalse(node2.isLabel());
1657:       assertFalse(node2.isAssignAdd());
1658:       assertEquals(0, node2.getChildCount());
1659:       assertFalse(node2.isNull());
1660:       assertFalse(node2.isDo());
1661:       assertFalse(node2.isDefaultCase());
1662:       assertFalse(node2.isAdd());
1663:       assertFalse(node2.isSetterDef());
1664:       assertFalse(node2.isTry());
1665:       assertFalse(node2.isLabelName());
1666:       assertFalse(node2.isWith());
1667:       assertFalse(node2.isIf());
1668:       assertFalse(node2.isRegExp());
1669:       assertFalse(node2.isCatch());
1670:       assertFalse(node2.isArrayLit());
1671:       assertEquals(172060, node2.getSourcePosition());
1672:       assertFalse(node2.isInstanceOf());
1673:       assertFalse(node2.isParamList());
1674:       assertFalse(node2.isThis());
1675:       assertFalse(node2.isFor());
1676:       assertFalse(node2.isCase());
1677:       assertFalse(node2.isGetterDef());
1678:       assertFalse(node2.isScript());
1679:       assertFalse(node2.hasOneChild());
1680:       assertFalse(iterable0.contains(node4));
1681:       assertFalse(node2.equals((Object)node1));
1682:       assertFalse(node2.equals((Object)node0));
1683:       assertFalse(node2.equals((Object)node4));
1684:       assertFalse(node2.equals((Object)node3));
1685:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1686:       assertEquals(57, Node.LAST_PROP);
1687:       assertEquals(30, Node.VAR_ARGS_NAME);
1688:       assertEquals(49, Node.DIRECT_EVAL);
1689:       assertEquals(1, Node.DECR_FLAG);
1690:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1691:       assertEquals(54, Node.SLASH_V);
1692:       assertEquals(46, Node.IS_NAMESPACE);
1693:       assertEquals(32, Node.INCRDECR_PROP);
1694:       assertEquals(57, Node.REFLECTED_OBJECT);
1695:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1696:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1697:       assertEquals(52, Node.LENGTH);
1698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1699:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1700:       assertEquals(37, Node.OPT_ARG_NAME);
1701:       assertEquals(48, Node.DIRECTIVES);
1702:       assertEquals(56, Node.CHANGE_TIME);
1703:       assertEquals(12, Node.COLUMN_BITS);
1704:       assertEquals(4095, Node.COLUMN_MASK);
1705:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1706:       assertEquals(36, Node.QUOTED_PROP);
1707:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1708:       assertEquals(43, Node.IS_CONSTANT_NAME);
1709:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1710:       assertEquals(8, Node.FLAG_NO_THROWS);
1711:       assertEquals(53, Node.INPUT_ID);
1712:       assertEquals(55, Node.INFERRED_FUNCTION);
1713:       assertEquals(29, Node.JSDOC_INFO_PROP);
1714:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1715:       assertEquals(47, Node.IS_DISPATCHER);
1716:       assertEquals(2, Node.POST_FLAG);
1717:       assertEquals(39, Node.EMPTY_BLOCK);
1718:       assertEquals(50, Node.FREE_CALL);
1719:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1720:       assertEquals(40, Node.ORIGINALNAME_PROP);
1721:       assertNotNull(iterable0);
1722:   }
1723: }
RegularFileObject[/tmp/EvoSuite_121_1629223134635/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_121_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.JSDocInfo$Visibility",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.JSDocInfo",
261:       "com.google.common.base.Preconditions",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Joiner$1",
266:       "com.google.common.collect.Collections2",
267:       "com.google.common.base.Joiner$MapJoiner",
268:       "com.google.common.collect.Maps",
269:       "com.google.common.collect.AbstractMultimap",
270:       "com.google.common.collect.AbstractMapBasedMultimap",
271:       "com.google.common.collect.AbstractSetMultimap",
272:       "com.google.common.collect.LinkedHashMultimap",
273:       "com.google.common.collect.AbstractMapEntry",
274:       "com.google.common.collect.ImmutableEntry",
275:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
276:       "com.google.common.collect.AbstractListMultimap",
277:       "com.google.common.collect.ArrayListMultimap",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
279:       "com.google.common.collect.ImmutableCollection",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.ObjectArrays",
282:       "com.google.common.collect.ImmutableList",
283:       "com.google.javascript.rhino.jstype.ModificationVisitor",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
285:       "com.google.common.collect.ImmutableCollection$Builder",
286:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
287:       "com.google.common.collect.ImmutableList$Builder",
288:       "com.google.common.collect.UnmodifiableIterator",
289:       "com.google.common.collect.UnmodifiableListIterator",
290:       "com.google.common.collect.Iterators$1",
291:       "com.google.common.collect.Iterators$2",
292:       "com.google.common.collect.Iterators",
293:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
294:       "com.google.javascript.rhino.jstype.JSType$1",
295:       "com.google.javascript.rhino.jstype.JSType",
296:       "com.google.javascript.rhino.jstype.ObjectType",
297:       "com.google.javascript.rhino.jstype.ProxyObjectType",
298:       "com.google.javascript.rhino.jstype.TemplateType",
299:       "com.google.javascript.rhino.jstype.ValueType",
300:       "com.google.javascript.rhino.jstype.BooleanType",
301:       "com.google.javascript.rhino.jstype.NullType",
302:       "com.google.javascript.rhino.jstype.NumberType",
303:       "com.google.javascript.rhino.jstype.StringType",
304:       "com.google.javascript.rhino.jstype.UnknownType",
305:       "com.google.javascript.rhino.jstype.VoidType",
306:       "com.google.javascript.rhino.jstype.AllType",
307:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
308:       "com.google.common.collect.ImmutableMap",
309:       "com.google.common.collect.ImmutableBiMap",
310:       "com.google.common.collect.EmptyImmutableBiMap",
311:       "com.google.javascript.rhino.jstype.PropertyMap$1",
312:       "com.google.javascript.rhino.jstype.PropertyMap",
313:       "com.google.javascript.rhino.jstype.FunctionType",
314:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.base.Objects",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.TemplatizedType",
338:       "com.google.common.collect.Iterables",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
341:       "com.google.javascript.rhino.jstype.NamedType",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
346:       "com.google.javascript.rhino.JSTypeExpression",
347:       "com.google.common.collect.Sets$ImprovedAbstractSet",
348:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
349:       "com.google.common.collect.Hashing",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
351:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterators$12",
355:       "com.google.common.collect.ImmutableList$1",
356:       "com.google.javascript.rhino.jstype.TernaryValue",
357:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
358:     );
359:   }
360: }

[MASTER] 17:58:55.019 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(887, 887, 887);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals(3634039, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(887, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);

node0.removeProp(101);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertEquals(3634039, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertEquals(887, node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.setSourceEncodedPositionForTree(887);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = new Node(101, node0, node0, node0);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(101, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node1);

Node node2 = Node.newNumber((-183.41873855730304), 42, 28);
assertEquals(28, node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(42, node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertEquals(172060, node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node2);

boolean boolean0 = node1.isEquivalentTo(node0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(101, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node3 = Node.newString("");
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isFalse());
assertFalse(node3.isDelProp());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertTrue(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertEquals(40, node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node3);

boolean boolean1 = node0.isCall();
assertNotSame(node0, node1);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(boolean1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node1.setCharno(2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals(887, node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertEquals(887, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertEquals(887, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertTrue(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertEquals(101, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node4 = node3.useSourceInfoFrom(node2);
assertSame(node3, node4);
assertSame(node4, node3);
assertEquals(28, node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(42, node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertEquals(172060, node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node3.isSwitch());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isFalse());
assertFalse(node3.isDelProp());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isInstanceOf());
assertEquals(172060, node3.getSourcePosition());
assertFalse(node3.isCatch());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertTrue(node3.isString());
assertEquals(28, node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNot());
assertFalse(node3.isFunction());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertEquals(40, node3.getType());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertEquals(42, node3.getLineno());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node4.isTrue());
assertEquals(40, node4.getType());
assertFalse(node4.isDebugger());
assertEquals(172060, node4.getSourcePosition());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertEquals(0, node4.getChildCount());
assertEquals(42, node4.getLineno());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isArrayLit());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDelProp());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isDec());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isGetElem());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertFalse(node4.isAssign());
assertFalse(node4.isCall());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetProp());
assertFalse(node4.isFalse());
assertFalse(node4.isNumber());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isContinue());
assertEquals(28, node4.getCharno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isIn());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isThrow());
assertFalse(node4.isCase());
assertTrue(node4.isString());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThis());
assertFalse(node4.isInstanceOf());
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node4);

Iterable<Node> iterable0 = node2.children();
assertEquals(28, node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(42, node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertEquals(172060, node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(iterable0.contains(node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/18
* Done!

* Computation finished
