* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 20385
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2657619082
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:46:48.521 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:46:49.796 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:46:50.943 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false in context: com.google.javascript.rhino.Node:getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:47:35.089 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:47:47.382 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 606s and 389 generations, 187207 statements, best individual has fitness: 3051.0
* Minimizing test suite
[MASTER] 17:58:08.284 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 611
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 99
* Number of covered goals: 99
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 463
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2029
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 565
* Generated 694 tests with total length 10267
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:59:19.552 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7022833333333334% of time used, but only 38/694 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
[MASTER] 17:59:37.467 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 17:59:48.879 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 18:00:12.647 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_146_1629223212422/com/google/javascript/rhino/Node_146_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_146_1629223212422/com/google/javascript/rhino/Node_146_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:12.647 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:12.647 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:12.652 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1576
[MASTER] 18:00:12.661 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_146_1629223212422/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Iterator;
12: import java.util.Vector;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_146_tmp__ESTest extends Node_146_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node[] nodeArray0 = new Node[0];
25:       Node node0 = new Node((-1518), nodeArray0, (-1518), (-1518));
26:       assertNotNull(node0);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(2, Node.POST_FLAG);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(47, Node.IS_DISPATCHER);
31:       assertEquals(29, Node.JSDOC_INFO_PROP);
32:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
33:       assertEquals(1, Node.DECR_FLAG);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(32, Node.INCRDECR_PROP);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(53, Node.INPUT_ID);
40:       assertEquals(15, Node.NO_SIDE_EFFECTS);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(8, Node.FLAG_NO_THROWS);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(39, Node.EMPTY_BLOCK);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(4095, Node.COLUMN_MASK);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(55, Node.INFERRED_FUNCTION);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(30, Node.VAR_ARGS_NAME);
59:       assertEquals(40, Node.ORIGINALNAME_PROP);
60:       assertEquals(51, Node.STATIC_SOURCE_FILE);
61:       assertEquals(46, Node.IS_NAMESPACE);
62:       assertEquals(43, Node.IS_CONSTANT_NAME);
63:       assertEquals(0, nodeArray0.length);
64:       assertFalse(node0.isTry());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isArrayLit());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isDebugger());
74:       assertFalse(node0.isTrue());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isString());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isFalse());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.hasOneChild());
87:       assertFalse(node0.isCast());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isGetElem());
90:       assertFalse(node0.isExprResult());
91:       assertFalse(node0.isLabelName());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.isNumber());
94:       assertFalse(node0.isObjectLit());
95:       assertEquals((-1), node0.getSourcePosition());
96:       assertFalse(node0.isAnd());
97:       assertEquals((-1), node0.getLineno());
98:       assertEquals((-1518), node0.getType());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isInstanceOf());
101:       assertFalse(node0.isBreak());
102:       assertFalse(node0.isGetProp());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isWith());
105:       assertFalse(node0.isWhile());
106:       assertFalse(node0.isDec());
107:       assertFalse(node0.isTypeOf());
108:       assertFalse(node0.isComma());
109:       assertFalse(node0.hasChildren());
110:       assertFalse(node0.isHook());
111:       assertFalse(node0.isReturn());
112:       assertFalse(node0.isBlock());
113:       assertFalse(node0.isThis());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isAdd());
117:       assertFalse(node0.isName());
118:       assertFalse(node0.isSwitch());
119:       assertFalse(node0.isParamList());
120:       assertEquals((-1), node0.getCharno());
121:       assertFalse(node0.isStringKey());
122:       assertFalse(node0.isNull());
123:       assertFalse(node0.isLabel());
124:       assertFalse(node0.isAssignAdd());
125:       assertFalse(node0.isOr());
126:       assertEquals(0, node0.getChildCount());
127:       assertFalse(node0.isDo());
128:       assertFalse(node0.isDefaultCase());
129:       assertFalse(node0.isVar());
130:       
131:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
132:       assertNotNull(node_SideEffectFlags0);
133:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
134:       assertEquals(32, node_SideEffectFlags0.valueOf());
135:       
136:       byte[] byteArray0 = new byte[3];
137:       byteArray0[0] = (byte)84;
138:       byteArray0[1] = (byte)101;
139:       byteArray0[2] = (byte)101;
140:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
141:       assertFalse(boolean0);
142:       assertArrayEquals(new byte[] {(byte)84, (byte)101, (byte)101}, byteArray0);
143:       assertEquals(3, byteArray0.length);
144:       
145:       boolean boolean1 = node0.isOptionalArg();
146:       assertFalse(boolean1);
147:       assertTrue(boolean1 == boolean0);
148:       assertEquals(37, Node.OPT_ARG_NAME);
149:       assertEquals(2, Node.POST_FLAG);
150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(29, Node.JSDOC_INFO_PROP);
153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
154:       assertEquals(1, Node.DECR_FLAG);
155:       assertEquals(12, Node.COLUMN_BITS);
156:       assertEquals(32, Node.INCRDECR_PROP);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(36, Node.QUOTED_PROP);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
164:       assertEquals(52, Node.LENGTH);
165:       assertEquals(57, Node.REFLECTED_OBJECT);
166:       assertEquals(49, Node.DIRECT_EVAL);
167:       assertEquals(56, Node.CHANGE_TIME);
168:       assertEquals(8, Node.FLAG_NO_THROWS);
169:       assertEquals(48, Node.DIRECTIVES);
170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
171:       assertEquals(39, Node.EMPTY_BLOCK);
172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
173:       assertEquals(50, Node.FREE_CALL);
174:       assertEquals(4095, Node.COLUMN_MASK);
175:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
177:       assertEquals(55, Node.INFERRED_FUNCTION);
178:       assertEquals(54, Node.SLASH_V);
179:       assertEquals(30, Node.VAR_ARGS_NAME);
180:       assertEquals(40, Node.ORIGINALNAME_PROP);
181:       assertEquals(51, Node.STATIC_SOURCE_FILE);
182:       assertEquals(46, Node.IS_NAMESPACE);
183:       assertEquals(43, Node.IS_CONSTANT_NAME);
184:       assertEquals(0, nodeArray0.length);
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isFunction());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isEmpty());
190:       assertFalse(node0.isIf());
191:       assertFalse(node0.isDelProp());
192:       assertFalse(node0.isGetterDef());
193:       assertFalse(node0.isNE());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.isTrue());
196:       assertFalse(node0.isCatch());
197:       assertFalse(node0.isCase());
198:       assertFalse(node0.isRegExp());
199:       assertFalse(node0.isFor());
200:       assertFalse(node0.isInc());
201:       assertFalse(node0.isString());
202:       assertFalse(node0.isIn());
203:       assertFalse(node0.isSetterDef());
204:       assertFalse(node0.isContinue());
205:       assertFalse(node0.isFalse());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.hasOneChild());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isScript());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isExprResult());
212:       assertFalse(node0.isLabelName());
213:       assertFalse(node0.isNot());
214:       assertFalse(node0.isNumber());
215:       assertFalse(node0.isObjectLit());
216:       assertEquals((-1), node0.getSourcePosition());
217:       assertFalse(node0.isAnd());
218:       assertEquals((-1), node0.getLineno());
219:       assertEquals((-1518), node0.getType());
220:       assertFalse(node0.hasMoreThanOneChild());
221:       assertFalse(node0.isInstanceOf());
222:       assertFalse(node0.isBreak());
223:       assertFalse(node0.isGetProp());
224:       assertFalse(node0.isAssign());
225:       assertFalse(node0.isWith());
226:       assertFalse(node0.isWhile());
227:       assertFalse(node0.isDec());
228:       assertFalse(node0.isTypeOf());
229:       assertFalse(node0.isComma());
230:       assertFalse(node0.hasChildren());
231:       assertFalse(node0.isHook());
232:       assertFalse(node0.isReturn());
233:       assertFalse(node0.isBlock());
234:       assertFalse(node0.isThis());
235:       assertFalse(node0.isNew());
236:       assertFalse(node0.isCall());
237:       assertFalse(node0.isAdd());
238:       assertFalse(node0.isName());
239:       assertFalse(node0.isSwitch());
240:       assertFalse(node0.isParamList());
241:       assertEquals((-1), node0.getCharno());
242:       assertFalse(node0.isStringKey());
243:       assertFalse(node0.isNull());
244:       assertFalse(node0.isLabel());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.isOr());
247:       assertEquals(0, node0.getChildCount());
248:       assertFalse(node0.isDo());
249:       assertFalse(node0.isDefaultCase());
250:       assertFalse(node0.isVar());
251:       
252:       node0.setSourceFileForTesting("_I&c lsIPD7Xlk");
253:       assertEquals(37, Node.OPT_ARG_NAME);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(47, Node.IS_DISPATCHER);
257:       assertEquals(29, Node.JSDOC_INFO_PROP);
258:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(32, Node.INCRDECR_PROP);
262:       assertEquals(57, Node.LAST_PROP);
263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
264:       assertEquals(36, Node.QUOTED_PROP);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
269:       assertEquals(52, Node.LENGTH);
270:       assertEquals(57, Node.REFLECTED_OBJECT);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(56, Node.CHANGE_TIME);
273:       assertEquals(8, Node.FLAG_NO_THROWS);
274:       assertEquals(48, Node.DIRECTIVES);
275:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
276:       assertEquals(39, Node.EMPTY_BLOCK);
277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
278:       assertEquals(50, Node.FREE_CALL);
279:       assertEquals(4095, Node.COLUMN_MASK);
280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
281:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
282:       assertEquals(55, Node.INFERRED_FUNCTION);
283:       assertEquals(54, Node.SLASH_V);
284:       assertEquals(30, Node.VAR_ARGS_NAME);
285:       assertEquals(40, Node.ORIGINALNAME_PROP);
286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
287:       assertEquals(46, Node.IS_NAMESPACE);
288:       assertEquals(43, Node.IS_CONSTANT_NAME);
289:       assertEquals(0, nodeArray0.length);
290:       assertFalse(node0.isTry());
291:       assertFalse(node0.isVoid());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isEmpty());
295:       assertFalse(node0.isIf());
296:       assertFalse(node0.isDelProp());
297:       assertFalse(node0.isGetterDef());
298:       assertFalse(node0.isNE());
299:       assertFalse(node0.isDebugger());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node0.isCatch());
302:       assertFalse(node0.isCase());
303:       assertFalse(node0.isRegExp());
304:       assertFalse(node0.isFor());
305:       assertFalse(node0.isInc());
306:       assertFalse(node0.isString());
307:       assertFalse(node0.isIn());
308:       assertFalse(node0.isSetterDef());
309:       assertFalse(node0.isContinue());
310:       assertFalse(node0.isFalse());
311:       assertFalse(node0.isThrow());
312:       assertFalse(node0.hasOneChild());
313:       assertFalse(node0.isCast());
314:       assertFalse(node0.isScript());
315:       assertFalse(node0.isGetElem());
316:       assertFalse(node0.isExprResult());
317:       assertFalse(node0.isLabelName());
318:       assertFalse(node0.isNot());
319:       assertFalse(node0.isNumber());
320:       assertFalse(node0.isObjectLit());
321:       assertEquals((-1), node0.getSourcePosition());
322:       assertFalse(node0.isAnd());
323:       assertEquals((-1), node0.getLineno());
324:       assertEquals((-1518), node0.getType());
325:       assertFalse(node0.hasMoreThanOneChild());
326:       assertFalse(node0.isInstanceOf());
327:       assertFalse(node0.isBreak());
328:       assertFalse(node0.isGetProp());
329:       assertFalse(node0.isAssign());
330:       assertFalse(node0.isWith());
331:       assertFalse(node0.isWhile());
332:       assertFalse(node0.isDec());
333:       assertFalse(node0.isTypeOf());
334:       assertFalse(node0.isComma());
335:       assertFalse(node0.hasChildren());
336:       assertFalse(node0.isHook());
337:       assertFalse(node0.isReturn());
338:       assertFalse(node0.isBlock());
339:       assertFalse(node0.isThis());
340:       assertFalse(node0.isNew());
341:       assertFalse(node0.isCall());
342:       assertFalse(node0.isAdd());
343:       assertFalse(node0.isName());
344:       assertFalse(node0.isSwitch());
345:       assertFalse(node0.isParamList());
346:       assertEquals((-1), node0.getCharno());
347:       assertFalse(node0.isStringKey());
348:       assertFalse(node0.isNull());
349:       assertFalse(node0.isLabel());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isOr());
352:       assertEquals(0, node0.getChildCount());
353:       assertFalse(node0.isDo());
354:       assertFalse(node0.isDefaultCase());
355:       assertFalse(node0.isVar());
356:       
357:       boolean boolean2 = node0.isGetProp();
358:       assertFalse(boolean2);
359:       assertTrue(boolean2 == boolean0);
360:       assertTrue(boolean2 == boolean1);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(2, Node.POST_FLAG);
363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(29, Node.JSDOC_INFO_PROP);
366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
367:       assertEquals(1, Node.DECR_FLAG);
368:       assertEquals(12, Node.COLUMN_BITS);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(57, Node.LAST_PROP);
371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
372:       assertEquals(36, Node.QUOTED_PROP);
373:       assertEquals(53, Node.INPUT_ID);
374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
377:       assertEquals(52, Node.LENGTH);
378:       assertEquals(57, Node.REFLECTED_OBJECT);
379:       assertEquals(49, Node.DIRECT_EVAL);
380:       assertEquals(56, Node.CHANGE_TIME);
381:       assertEquals(8, Node.FLAG_NO_THROWS);
382:       assertEquals(48, Node.DIRECTIVES);
383:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
384:       assertEquals(39, Node.EMPTY_BLOCK);
385:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
386:       assertEquals(50, Node.FREE_CALL);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
390:       assertEquals(55, Node.INFERRED_FUNCTION);
391:       assertEquals(54, Node.SLASH_V);
392:       assertEquals(30, Node.VAR_ARGS_NAME);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
395:       assertEquals(46, Node.IS_NAMESPACE);
396:       assertEquals(43, Node.IS_CONSTANT_NAME);
397:       assertEquals(0, nodeArray0.length);
398:       assertFalse(node0.isTry());
399:       assertFalse(node0.isVoid());
400:       assertFalse(node0.isFunction());
401:       assertFalse(node0.isArrayLit());
402:       assertFalse(node0.isEmpty());
403:       assertFalse(node0.isIf());
404:       assertFalse(node0.isDelProp());
405:       assertFalse(node0.isGetterDef());
406:       assertFalse(node0.isNE());
407:       assertFalse(node0.isDebugger());
408:       assertFalse(node0.isTrue());
409:       assertFalse(node0.isCatch());
410:       assertFalse(node0.isCase());
411:       assertFalse(node0.isRegExp());
412:       assertFalse(node0.isFor());
413:       assertFalse(node0.isInc());
414:       assertFalse(node0.isString());
415:       assertFalse(node0.isIn());
416:       assertFalse(node0.isSetterDef());
417:       assertFalse(node0.isContinue());
418:       assertFalse(node0.isFalse());
419:       assertFalse(node0.isThrow());
420:       assertFalse(node0.hasOneChild());
421:       assertFalse(node0.isCast());
422:       assertFalse(node0.isScript());
423:       assertFalse(node0.isGetElem());
424:       assertFalse(node0.isExprResult());
425:       assertFalse(node0.isLabelName());
426:       assertFalse(node0.isNot());
427:       assertFalse(node0.isNumber());
428:       assertFalse(node0.isObjectLit());
429:       assertEquals((-1), node0.getSourcePosition());
430:       assertFalse(node0.isAnd());
431:       assertEquals((-1), node0.getLineno());
432:       assertEquals((-1518), node0.getType());
433:       assertFalse(node0.hasMoreThanOneChild());
434:       assertFalse(node0.isInstanceOf());
435:       assertFalse(node0.isBreak());
436:       assertFalse(node0.isGetProp());
437:       assertFalse(node0.isAssign());
438:       assertFalse(node0.isWith());
439:       assertFalse(node0.isWhile());
440:       assertFalse(node0.isDec());
441:       assertFalse(node0.isTypeOf());
442:       assertFalse(node0.isComma());
443:       assertFalse(node0.hasChildren());
444:       assertFalse(node0.isHook());
445:       assertFalse(node0.isReturn());
446:       assertFalse(node0.isBlock());
447:       assertFalse(node0.isThis());
448:       assertFalse(node0.isNew());
449:       assertFalse(node0.isCall());
450:       assertFalse(node0.isAdd());
451:       assertFalse(node0.isName());
452:       assertFalse(node0.isSwitch());
453:       assertFalse(node0.isParamList());
454:       assertEquals((-1), node0.getCharno());
455:       assertFalse(node0.isStringKey());
456:       assertFalse(node0.isNull());
457:       assertFalse(node0.isLabel());
458:       assertFalse(node0.isAssignAdd());
459:       assertFalse(node0.isOr());
460:       assertEquals(0, node0.getChildCount());
461:       assertFalse(node0.isDo());
462:       assertFalse(node0.isDefaultCase());
463:       assertFalse(node0.isVar());
464:       
465:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
466:       assertNotNull(node_AncestorIterable0);
467:       assertEquals(37, Node.OPT_ARG_NAME);
468:       assertEquals(2, Node.POST_FLAG);
469:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
470:       assertEquals(47, Node.IS_DISPATCHER);
471:       assertEquals(29, Node.JSDOC_INFO_PROP);
472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
473:       assertEquals(1, Node.DECR_FLAG);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(57, Node.LAST_PROP);
477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
478:       assertEquals(36, Node.QUOTED_PROP);
479:       assertEquals(53, Node.INPUT_ID);
480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
482:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
483:       assertEquals(52, Node.LENGTH);
484:       assertEquals(57, Node.REFLECTED_OBJECT);
485:       assertEquals(49, Node.DIRECT_EVAL);
486:       assertEquals(56, Node.CHANGE_TIME);
487:       assertEquals(8, Node.FLAG_NO_THROWS);
488:       assertEquals(48, Node.DIRECTIVES);
489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
490:       assertEquals(39, Node.EMPTY_BLOCK);
491:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
492:       assertEquals(50, Node.FREE_CALL);
493:       assertEquals(4095, Node.COLUMN_MASK);
494:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
496:       assertEquals(55, Node.INFERRED_FUNCTION);
497:       assertEquals(54, Node.SLASH_V);
498:       assertEquals(30, Node.VAR_ARGS_NAME);
499:       assertEquals(40, Node.ORIGINALNAME_PROP);
500:       assertEquals(51, Node.STATIC_SOURCE_FILE);
501:       assertEquals(46, Node.IS_NAMESPACE);
502:       assertEquals(43, Node.IS_CONSTANT_NAME);
503:       assertEquals(0, nodeArray0.length);
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isVoid());
506:       assertFalse(node0.isFunction());
507:       assertFalse(node0.isArrayLit());
508:       assertFalse(node0.isEmpty());
509:       assertFalse(node0.isIf());
510:       assertFalse(node0.isDelProp());
511:       assertFalse(node0.isGetterDef());
512:       assertFalse(node0.isNE());
513:       assertFalse(node0.isDebugger());
514:       assertFalse(node0.isTrue());
515:       assertFalse(node0.isCatch());
516:       assertFalse(node0.isCase());
517:       assertFalse(node0.isRegExp());
518:       assertFalse(node0.isFor());
519:       assertFalse(node0.isInc());
520:       assertFalse(node0.isString());
521:       assertFalse(node0.isIn());
522:       assertFalse(node0.isSetterDef());
523:       assertFalse(node0.isContinue());
524:       assertFalse(node0.isFalse());
525:       assertFalse(node0.isThrow());
526:       assertFalse(node0.hasOneChild());
527:       assertFalse(node0.isCast());
528:       assertFalse(node0.isScript());
529:       assertFalse(node0.isGetElem());
530:       assertFalse(node0.isExprResult());
531:       assertFalse(node0.isLabelName());
532:       assertFalse(node0.isNot());
533:       assertFalse(node0.isNumber());
534:       assertFalse(node0.isObjectLit());
535:       assertEquals((-1), node0.getSourcePosition());
536:       assertFalse(node0.isAnd());
537:       assertEquals((-1), node0.getLineno());
538:       assertEquals((-1518), node0.getType());
539:       assertFalse(node0.hasMoreThanOneChild());
540:       assertFalse(node0.isInstanceOf());
541:       assertFalse(node0.isBreak());
542:       assertFalse(node0.isGetProp());
543:       assertFalse(node0.isAssign());
544:       assertFalse(node0.isWith());
545:       assertFalse(node0.isWhile());
546:       assertFalse(node0.isDec());
547:       assertFalse(node0.isTypeOf());
548:       assertFalse(node0.isComma());
549:       assertFalse(node0.hasChildren());
550:       assertFalse(node0.isHook());
551:       assertFalse(node0.isReturn());
552:       assertFalse(node0.isBlock());
553:       assertFalse(node0.isThis());
554:       assertFalse(node0.isNew());
555:       assertFalse(node0.isCall());
556:       assertFalse(node0.isAdd());
557:       assertFalse(node0.isName());
558:       assertFalse(node0.isSwitch());
559:       assertFalse(node0.isParamList());
560:       assertEquals((-1), node0.getCharno());
561:       assertFalse(node0.isStringKey());
562:       assertFalse(node0.isNull());
563:       assertFalse(node0.isLabel());
564:       assertFalse(node0.isAssignAdd());
565:       assertFalse(node0.isOr());
566:       assertEquals(0, node0.getChildCount());
567:       assertFalse(node0.isDo());
568:       assertFalse(node0.isDefaultCase());
569:       assertFalse(node0.isVar());
570:       
571:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
572:       assertNotNull(iterator0);
573:       assertEquals(37, Node.OPT_ARG_NAME);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
576:       assertEquals(47, Node.IS_DISPATCHER);
577:       assertEquals(29, Node.JSDOC_INFO_PROP);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(1, Node.DECR_FLAG);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
584:       assertEquals(36, Node.QUOTED_PROP);
585:       assertEquals(53, Node.INPUT_ID);
586:       assertEquals(15, Node.NO_SIDE_EFFECTS);
587:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
588:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
589:       assertEquals(52, Node.LENGTH);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(49, Node.DIRECT_EVAL);
592:       assertEquals(56, Node.CHANGE_TIME);
593:       assertEquals(8, Node.FLAG_NO_THROWS);
594:       assertEquals(48, Node.DIRECTIVES);
595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
596:       assertEquals(39, Node.EMPTY_BLOCK);
597:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
598:       assertEquals(50, Node.FREE_CALL);
599:       assertEquals(4095, Node.COLUMN_MASK);
600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
602:       assertEquals(55, Node.INFERRED_FUNCTION);
603:       assertEquals(54, Node.SLASH_V);
604:       assertEquals(30, Node.VAR_ARGS_NAME);
605:       assertEquals(40, Node.ORIGINALNAME_PROP);
606:       assertEquals(51, Node.STATIC_SOURCE_FILE);
607:       assertEquals(46, Node.IS_NAMESPACE);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(0, nodeArray0.length);
610:       assertFalse(node0.isTry());
611:       assertFalse(node0.isVoid());
612:       assertFalse(node0.isFunction());
613:       assertFalse(node0.isArrayLit());
614:       assertFalse(node0.isEmpty());
615:       assertFalse(node0.isIf());
616:       assertFalse(node0.isDelProp());
617:       assertFalse(node0.isGetterDef());
618:       assertFalse(node0.isNE());
619:       assertFalse(node0.isDebugger());
620:       assertFalse(node0.isTrue());
621:       assertFalse(node0.isCatch());
622:       assertFalse(node0.isCase());
623:       assertFalse(node0.isRegExp());
624:       assertFalse(node0.isFor());
625:       assertFalse(node0.isInc());
626:       assertFalse(node0.isString());
627:       assertFalse(node0.isIn());
628:       assertFalse(node0.isSetterDef());
629:       assertFalse(node0.isContinue());
630:       assertFalse(node0.isFalse());
631:       assertFalse(node0.isThrow());
632:       assertFalse(node0.hasOneChild());
633:       assertFalse(node0.isCast());
634:       assertFalse(node0.isScript());
635:       assertFalse(node0.isGetElem());
636:       assertFalse(node0.isExprResult());
637:       assertFalse(node0.isLabelName());
638:       assertFalse(node0.isNot());
639:       assertFalse(node0.isNumber());
640:       assertFalse(node0.isObjectLit());
641:       assertEquals((-1), node0.getSourcePosition());
642:       assertFalse(node0.isAnd());
643:       assertEquals((-1), node0.getLineno());
644:       assertEquals((-1518), node0.getType());
645:       assertFalse(node0.hasMoreThanOneChild());
646:       assertFalse(node0.isInstanceOf());
647:       assertFalse(node0.isBreak());
648:       assertFalse(node0.isGetProp());
649:       assertFalse(node0.isAssign());
650:       assertFalse(node0.isWith());
651:       assertFalse(node0.isWhile());
652:       assertFalse(node0.isDec());
653:       assertFalse(node0.isTypeOf());
654:       assertFalse(node0.isComma());
655:       assertFalse(node0.hasChildren());
656:       assertFalse(node0.isHook());
657:       assertFalse(node0.isReturn());
658:       assertFalse(node0.isBlock());
659:       assertFalse(node0.isThis());
660:       assertFalse(node0.isNew());
661:       assertFalse(node0.isCall());
662:       assertFalse(node0.isAdd());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isSwitch());
665:       assertFalse(node0.isParamList());
666:       assertEquals((-1), node0.getCharno());
667:       assertFalse(node0.isStringKey());
668:       assertFalse(node0.isNull());
669:       assertFalse(node0.isLabel());
670:       assertFalse(node0.isAssignAdd());
671:       assertFalse(node0.isOr());
672:       assertEquals(0, node0.getChildCount());
673:       assertFalse(node0.isDo());
674:       assertFalse(node0.isDefaultCase());
675:       assertFalse(node0.isVar());
676:       
677:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
678:       assertNotNull(node_SideEffectFlags1);
679:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
680:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
681:       assertEquals(0, node_SideEffectFlags1.valueOf());
682:       
683:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
684:       assertNotNull(node_SideEffectFlags2);
685:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
686:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
687:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
688:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
689:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
690:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
691:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
692:       assertEquals(0, node_SideEffectFlags1.valueOf());
693:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
694:       assertEquals(0, node_SideEffectFlags2.valueOf());
695:       
696:       boolean boolean3 = node0.isCatch();
697:       assertFalse(boolean3);
698:       assertTrue(boolean3 == boolean1);
699:       assertTrue(boolean3 == boolean2);
700:       assertTrue(boolean3 == boolean0);
701:       assertEquals(37, Node.OPT_ARG_NAME);
702:       assertEquals(2, Node.POST_FLAG);
703:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
704:       assertEquals(47, Node.IS_DISPATCHER);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
707:       assertEquals(1, Node.DECR_FLAG);
708:       assertEquals(12, Node.COLUMN_BITS);
709:       assertEquals(32, Node.INCRDECR_PROP);
710:       assertEquals(57, Node.LAST_PROP);
711:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
712:       assertEquals(36, Node.QUOTED_PROP);
713:       assertEquals(53, Node.INPUT_ID);
714:       assertEquals(15, Node.NO_SIDE_EFFECTS);
715:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
716:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
717:       assertEquals(52, Node.LENGTH);
718:       assertEquals(57, Node.REFLECTED_OBJECT);
719:       assertEquals(49, Node.DIRECT_EVAL);
720:       assertEquals(56, Node.CHANGE_TIME);
721:       assertEquals(8, Node.FLAG_NO_THROWS);
722:       assertEquals(48, Node.DIRECTIVES);
723:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
724:       assertEquals(39, Node.EMPTY_BLOCK);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(50, Node.FREE_CALL);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
729:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
730:       assertEquals(55, Node.INFERRED_FUNCTION);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(30, Node.VAR_ARGS_NAME);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(51, Node.STATIC_SOURCE_FILE);
735:       assertEquals(46, Node.IS_NAMESPACE);
736:       assertEquals(43, Node.IS_CONSTANT_NAME);
737:       assertEquals(0, nodeArray0.length);
738:       assertFalse(node0.isTry());
739:       assertFalse(node0.isVoid());
740:       assertFalse(node0.isFunction());
741:       assertFalse(node0.isArrayLit());
742:       assertFalse(node0.isEmpty());
743:       assertFalse(node0.isIf());
744:       assertFalse(node0.isDelProp());
745:       assertFalse(node0.isGetterDef());
746:       assertFalse(node0.isNE());
747:       assertFalse(node0.isDebugger());
748:       assertFalse(node0.isTrue());
749:       assertFalse(node0.isCatch());
750:       assertFalse(node0.isCase());
751:       assertFalse(node0.isRegExp());
752:       assertFalse(node0.isFor());
753:       assertFalse(node0.isInc());
754:       assertFalse(node0.isString());
755:       assertFalse(node0.isIn());
756:       assertFalse(node0.isSetterDef());
757:       assertFalse(node0.isContinue());
758:       assertFalse(node0.isFalse());
759:       assertFalse(node0.isThrow());
760:       assertFalse(node0.hasOneChild());
761:       assertFalse(node0.isCast());
762:       assertFalse(node0.isScript());
763:       assertFalse(node0.isGetElem());
764:       assertFalse(node0.isExprResult());
765:       assertFalse(node0.isLabelName());
766:       assertFalse(node0.isNot());
767:       assertFalse(node0.isNumber());
768:       assertFalse(node0.isObjectLit());
769:       assertEquals((-1), node0.getSourcePosition());
770:       assertFalse(node0.isAnd());
771:       assertEquals((-1), node0.getLineno());
772:       assertEquals((-1518), node0.getType());
773:       assertFalse(node0.hasMoreThanOneChild());
774:       assertFalse(node0.isInstanceOf());
775:       assertFalse(node0.isBreak());
776:       assertFalse(node0.isGetProp());
777:       assertFalse(node0.isAssign());
778:       assertFalse(node0.isWith());
779:       assertFalse(node0.isWhile());
780:       assertFalse(node0.isDec());
781:       assertFalse(node0.isTypeOf());
782:       assertFalse(node0.isComma());
783:       assertFalse(node0.hasChildren());
784:       assertFalse(node0.isHook());
785:       assertFalse(node0.isReturn());
786:       assertFalse(node0.isBlock());
787:       assertFalse(node0.isThis());
788:       assertFalse(node0.isNew());
789:       assertFalse(node0.isCall());
790:       assertFalse(node0.isAdd());
791:       assertFalse(node0.isName());
792:       assertFalse(node0.isSwitch());
793:       assertFalse(node0.isParamList());
794:       assertEquals((-1), node0.getCharno());
795:       assertFalse(node0.isStringKey());
796:       assertFalse(node0.isNull());
797:       assertFalse(node0.isLabel());
798:       assertFalse(node0.isAssignAdd());
799:       assertFalse(node0.isOr());
800:       assertEquals(0, node0.getChildCount());
801:       assertFalse(node0.isDo());
802:       assertFalse(node0.isDefaultCase());
803:       assertFalse(node0.isVar());
804:       
805:       boolean boolean4 = node0.isContinue();
806:       assertFalse(boolean4);
807:       assertTrue(boolean4 == boolean3);
808:       assertTrue(boolean4 == boolean2);
809:       assertTrue(boolean4 == boolean0);
810:       assertTrue(boolean4 == boolean1);
811:       assertEquals(37, Node.OPT_ARG_NAME);
812:       assertEquals(2, Node.POST_FLAG);
813:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
814:       assertEquals(47, Node.IS_DISPATCHER);
815:       assertEquals(29, Node.JSDOC_INFO_PROP);
816:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
817:       assertEquals(1, Node.DECR_FLAG);
818:       assertEquals(12, Node.COLUMN_BITS);
819:       assertEquals(32, Node.INCRDECR_PROP);
820:       assertEquals(57, Node.LAST_PROP);
821:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
822:       assertEquals(36, Node.QUOTED_PROP);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(15, Node.NO_SIDE_EFFECTS);
825:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
826:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
827:       assertEquals(52, Node.LENGTH);
828:       assertEquals(57, Node.REFLECTED_OBJECT);
829:       assertEquals(49, Node.DIRECT_EVAL);
830:       assertEquals(56, Node.CHANGE_TIME);
831:       assertEquals(8, Node.FLAG_NO_THROWS);
832:       assertEquals(48, Node.DIRECTIVES);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(39, Node.EMPTY_BLOCK);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(50, Node.FREE_CALL);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
840:       assertEquals(55, Node.INFERRED_FUNCTION);
841:       assertEquals(54, Node.SLASH_V);
842:       assertEquals(30, Node.VAR_ARGS_NAME);
843:       assertEquals(40, Node.ORIGINALNAME_PROP);
844:       assertEquals(51, Node.STATIC_SOURCE_FILE);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(43, Node.IS_CONSTANT_NAME);
847:       assertEquals(0, nodeArray0.length);
848:       assertFalse(node0.isTry());
849:       assertFalse(node0.isVoid());
850:       assertFalse(node0.isFunction());
851:       assertFalse(node0.isArrayLit());
852:       assertFalse(node0.isEmpty());
853:       assertFalse(node0.isIf());
854:       assertFalse(node0.isDelProp());
855:       assertFalse(node0.isGetterDef());
856:       assertFalse(node0.isNE());
857:       assertFalse(node0.isDebugger());
858:       assertFalse(node0.isTrue());
859:       assertFalse(node0.isCatch());
860:       assertFalse(node0.isCase());
861:       assertFalse(node0.isRegExp());
862:       assertFalse(node0.isFor());
863:       assertFalse(node0.isInc());
864:       assertFalse(node0.isString());
865:       assertFalse(node0.isIn());
866:       assertFalse(node0.isSetterDef());
867:       assertFalse(node0.isContinue());
868:       assertFalse(node0.isFalse());
869:       assertFalse(node0.isThrow());
870:       assertFalse(node0.hasOneChild());
871:       assertFalse(node0.isCast());
872:       assertFalse(node0.isScript());
873:       assertFalse(node0.isGetElem());
874:       assertFalse(node0.isExprResult());
875:       assertFalse(node0.isLabelName());
876:       assertFalse(node0.isNot());
877:       assertFalse(node0.isNumber());
878:       assertFalse(node0.isObjectLit());
879:       assertEquals((-1), node0.getSourcePosition());
880:       assertFalse(node0.isAnd());
881:       assertEquals((-1), node0.getLineno());
882:       assertEquals((-1518), node0.getType());
883:       assertFalse(node0.hasMoreThanOneChild());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.isBreak());
886:       assertFalse(node0.isGetProp());
887:       assertFalse(node0.isAssign());
888:       assertFalse(node0.isWith());
889:       assertFalse(node0.isWhile());
890:       assertFalse(node0.isDec());
891:       assertFalse(node0.isTypeOf());
892:       assertFalse(node0.isComma());
893:       assertFalse(node0.hasChildren());
894:       assertFalse(node0.isHook());
895:       assertFalse(node0.isReturn());
896:       assertFalse(node0.isBlock());
897:       assertFalse(node0.isThis());
898:       assertFalse(node0.isNew());
899:       assertFalse(node0.isCall());
900:       assertFalse(node0.isAdd());
901:       assertFalse(node0.isName());
902:       assertFalse(node0.isSwitch());
903:       assertFalse(node0.isParamList());
904:       assertEquals((-1), node0.getCharno());
905:       assertFalse(node0.isStringKey());
906:       assertFalse(node0.isNull());
907:       assertFalse(node0.isLabel());
908:       assertFalse(node0.isAssignAdd());
909:       assertFalse(node0.isOr());
910:       assertEquals(0, node0.getChildCount());
911:       assertFalse(node0.isDo());
912:       assertFalse(node0.isDefaultCase());
913:       assertFalse(node0.isVar());
914:       
915:       boolean boolean5 = node0.isSetterDef();
916:       assertFalse(boolean5);
917:       assertTrue(boolean5 == boolean0);
918:       assertTrue(boolean5 == boolean2);
919:       assertTrue(boolean5 == boolean4);
920:       assertTrue(boolean5 == boolean3);
921:       assertTrue(boolean5 == boolean1);
922:       assertEquals(37, Node.OPT_ARG_NAME);
923:       assertEquals(2, Node.POST_FLAG);
924:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
925:       assertEquals(47, Node.IS_DISPATCHER);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
928:       assertEquals(1, Node.DECR_FLAG);
929:       assertEquals(12, Node.COLUMN_BITS);
930:       assertEquals(32, Node.INCRDECR_PROP);
931:       assertEquals(57, Node.LAST_PROP);
932:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(53, Node.INPUT_ID);
935:       assertEquals(15, Node.NO_SIDE_EFFECTS);
936:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
938:       assertEquals(52, Node.LENGTH);
939:       assertEquals(57, Node.REFLECTED_OBJECT);
940:       assertEquals(49, Node.DIRECT_EVAL);
941:       assertEquals(56, Node.CHANGE_TIME);
942:       assertEquals(8, Node.FLAG_NO_THROWS);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
945:       assertEquals(39, Node.EMPTY_BLOCK);
946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
947:       assertEquals(50, Node.FREE_CALL);
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
950:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
951:       assertEquals(55, Node.INFERRED_FUNCTION);
952:       assertEquals(54, Node.SLASH_V);
953:       assertEquals(30, Node.VAR_ARGS_NAME);
954:       assertEquals(40, Node.ORIGINALNAME_PROP);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(46, Node.IS_NAMESPACE);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(0, nodeArray0.length);
959:       assertFalse(node0.isTry());
960:       assertFalse(node0.isVoid());
961:       assertFalse(node0.isFunction());
962:       assertFalse(node0.isArrayLit());
963:       assertFalse(node0.isEmpty());
964:       assertFalse(node0.isIf());
965:       assertFalse(node0.isDelProp());
966:       assertFalse(node0.isGetterDef());
967:       assertFalse(node0.isNE());
968:       assertFalse(node0.isDebugger());
969:       assertFalse(node0.isTrue());
970:       assertFalse(node0.isCatch());
971:       assertFalse(node0.isCase());
972:       assertFalse(node0.isRegExp());
973:       assertFalse(node0.isFor());
974:       assertFalse(node0.isInc());
975:       assertFalse(node0.isString());
976:       assertFalse(node0.isIn());
977:       assertFalse(node0.isSetterDef());
978:       assertFalse(node0.isContinue());
979:       assertFalse(node0.isFalse());
980:       assertFalse(node0.isThrow());
981:       assertFalse(node0.hasOneChild());
982:       assertFalse(node0.isCast());
983:       assertFalse(node0.isScript());
984:       assertFalse(node0.isGetElem());
985:       assertFalse(node0.isExprResult());
986:       assertFalse(node0.isLabelName());
987:       assertFalse(node0.isNot());
988:       assertFalse(node0.isNumber());
989:       assertFalse(node0.isObjectLit());
990:       assertEquals((-1), node0.getSourcePosition());
991:       assertFalse(node0.isAnd());
992:       assertEquals((-1), node0.getLineno());
993:       assertEquals((-1518), node0.getType());
994:       assertFalse(node0.hasMoreThanOneChild());
995:       assertFalse(node0.isInstanceOf());
996:       assertFalse(node0.isBreak());
997:       assertFalse(node0.isGetProp());
998:       assertFalse(node0.isAssign());
999:       assertFalse(node0.isWith());
1000:       assertFalse(node0.isWhile());
1001:       assertFalse(node0.isDec());
1002:       assertFalse(node0.isTypeOf());
1003:       assertFalse(node0.isComma());
1004:       assertFalse(node0.hasChildren());
1005:       assertFalse(node0.isHook());
1006:       assertFalse(node0.isReturn());
1007:       assertFalse(node0.isBlock());
1008:       assertFalse(node0.isThis());
1009:       assertFalse(node0.isNew());
1010:       assertFalse(node0.isCall());
1011:       assertFalse(node0.isAdd());
1012:       assertFalse(node0.isName());
1013:       assertFalse(node0.isSwitch());
1014:       assertFalse(node0.isParamList());
1015:       assertEquals((-1), node0.getCharno());
1016:       assertFalse(node0.isStringKey());
1017:       assertFalse(node0.isNull());
1018:       assertFalse(node0.isLabel());
1019:       assertFalse(node0.isAssignAdd());
1020:       assertFalse(node0.isOr());
1021:       assertEquals(0, node0.getChildCount());
1022:       assertFalse(node0.isDo());
1023:       assertFalse(node0.isDefaultCase());
1024:       assertFalse(node0.isVar());
1025:       
1026:       Node node1 = new Node(1748, node0, node0, node0, node0);
1027:       assertNotNull(node1);
1028:       assertFalse(node1.equals((Object)node0));
1029:       assertEquals(37, Node.OPT_ARG_NAME);
1030:       assertEquals(2, Node.POST_FLAG);
1031:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1032:       assertEquals(47, Node.IS_DISPATCHER);
1033:       assertEquals(29, Node.JSDOC_INFO_PROP);
1034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1035:       assertEquals(1, Node.DECR_FLAG);
1036:       assertEquals(12, Node.COLUMN_BITS);
1037:       assertEquals(32, Node.INCRDECR_PROP);
1038:       assertEquals(57, Node.LAST_PROP);
1039:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1040:       assertEquals(36, Node.QUOTED_PROP);
1041:       assertEquals(53, Node.INPUT_ID);
1042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1043:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1044:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1045:       assertEquals(52, Node.LENGTH);
1046:       assertEquals(57, Node.REFLECTED_OBJECT);
1047:       assertEquals(49, Node.DIRECT_EVAL);
1048:       assertEquals(56, Node.CHANGE_TIME);
1049:       assertEquals(8, Node.FLAG_NO_THROWS);
1050:       assertEquals(48, Node.DIRECTIVES);
1051:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1052:       assertEquals(39, Node.EMPTY_BLOCK);
1053:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1057:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1058:       assertEquals(55, Node.INFERRED_FUNCTION);
1059:       assertEquals(54, Node.SLASH_V);
1060:       assertEquals(30, Node.VAR_ARGS_NAME);
1061:       assertEquals(40, Node.ORIGINALNAME_PROP);
1062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1063:       assertEquals(46, Node.IS_NAMESPACE);
1064:       assertEquals(43, Node.IS_CONSTANT_NAME);
1065:       assertEquals(1, Node.DECR_FLAG);
1066:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1067:       assertEquals(12, Node.COLUMN_BITS);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(2, Node.POST_FLAG);
1070:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1071:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1072:       assertEquals(47, Node.IS_DISPATCHER);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       assertEquals(32, Node.INCRDECR_PROP);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(40, Node.ORIGINALNAME_PROP);
1077:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(54, Node.SLASH_V);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(43, Node.IS_CONSTANT_NAME);
1082:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1086:       assertEquals(53, Node.INPUT_ID);
1087:       assertEquals(39, Node.EMPTY_BLOCK);
1088:       assertEquals(29, Node.JSDOC_INFO_PROP);
1089:       assertEquals(57, Node.REFLECTED_OBJECT);
1090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1093:       assertEquals(52, Node.LENGTH);
1094:       assertEquals(8, Node.FLAG_NO_THROWS);
1095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1096:       assertEquals(37, Node.OPT_ARG_NAME);
1097:       assertEquals(48, Node.DIRECTIVES);
1098:       assertEquals(36, Node.QUOTED_PROP);
1099:       assertEquals(56, Node.CHANGE_TIME);
1100:       assertEquals(49, Node.DIRECT_EVAL);
1101:       assertEquals(0, nodeArray0.length);
1102:       assertFalse(node0.isTry());
1103:       assertFalse(node0.isVoid());
1104:       assertFalse(node0.isFunction());
1105:       assertFalse(node0.isArrayLit());
1106:       assertFalse(node0.isEmpty());
1107:       assertFalse(node0.isIf());
1108:       assertFalse(node0.isDelProp());
1109:       assertFalse(node0.isGetterDef());
1110:       assertFalse(node0.isNE());
1111:       assertFalse(node0.isDebugger());
1112:       assertFalse(node0.isTrue());
1113:       assertFalse(node0.isCatch());
1114:       assertFalse(node0.isCase());
1115:       assertFalse(node0.isRegExp());
1116:       assertFalse(node0.isFor());
1117:       assertFalse(node0.isInc());
1118:       assertFalse(node0.isString());
1119:       assertFalse(node0.isIn());
1120:       assertFalse(node0.isSetterDef());
1121:       assertFalse(node0.isContinue());
1122:       assertFalse(node0.isFalse());
1123:       assertFalse(node0.isThrow());
1124:       assertFalse(node0.hasOneChild());
1125:       assertFalse(node0.isCast());
1126:       assertFalse(node0.isScript());
1127:       assertFalse(node0.isGetElem());
1128:       assertFalse(node0.isExprResult());
1129:       assertFalse(node0.isLabelName());
1130:       assertFalse(node0.isNot());
1131:       assertFalse(node0.isNumber());
1132:       assertFalse(node0.isObjectLit());
1133:       assertEquals((-1), node0.getSourcePosition());
1134:       assertFalse(node0.isAnd());
1135:       assertEquals((-1), node0.getLineno());
1136:       assertEquals((-1518), node0.getType());
1137:       assertFalse(node0.hasMoreThanOneChild());
1138:       assertFalse(node0.isInstanceOf());
1139:       assertFalse(node0.isBreak());
1140:       assertFalse(node0.isGetProp());
1141:       assertFalse(node0.isAssign());
1142:       assertFalse(node0.isWith());
1143:       assertFalse(node0.isWhile());
1144:       assertFalse(node0.isDec());
1145:       assertFalse(node0.isTypeOf());
1146:       assertFalse(node0.isComma());
1147:       assertFalse(node0.hasChildren());
1148:       assertFalse(node0.isHook());
1149:       assertFalse(node0.isReturn());
1150:       assertFalse(node0.isBlock());
1151:       assertFalse(node0.isThis());
1152:       assertFalse(node0.isNew());
1153:       assertFalse(node0.isCall());
1154:       assertFalse(node0.isAdd());
1155:       assertFalse(node0.isName());
1156:       assertFalse(node0.isSwitch());
1157:       assertFalse(node0.isParamList());
1158:       assertEquals((-1), node0.getCharno());
1159:       assertFalse(node0.isStringKey());
1160:       assertFalse(node0.isNull());
1161:       assertFalse(node0.isLabel());
1162:       assertFalse(node0.isAssignAdd());
1163:       assertFalse(node0.isOr());
1164:       assertEquals(0, node0.getChildCount());
1165:       assertFalse(node0.isDo());
1166:       assertFalse(node0.isDefaultCase());
1167:       assertFalse(node0.isVar());
1168:       assertFalse(node1.isAssign());
1169:       assertFalse(node1.isDec());
1170:       assertFalse(node1.isNumber());
1171:       assertEquals(1748, node1.getType());
1172:       assertFalse(node1.isLabelName());
1173:       assertFalse(node1.isTypeOf());
1174:       assertFalse(node1.isCast());
1175:       assertFalse(node1.isGetElem());
1176:       assertFalse(node1.isOr());
1177:       assertEquals((-1), node1.getLineno());
1178:       assertEquals((-1), node1.getSourcePosition());
1179:       assertFalse(node1.isDo());
1180:       assertFalse(node1.isContinue());
1181:       assertFalse(node1.isAdd());
1182:       assertFalse(node1.isAssignAdd());
1183:       assertFalse(node1.isLabel());
1184:       assertFalse(node1.isNew());
1185:       assertFalse(node1.isVar());
1186:       assertFalse(node1.isBreak());
1187:       assertFalse(node1.isFalse());
1188:       assertFalse(node1.isName());
1189:       assertFalse(node1.isGetProp());
1190:       assertFalse(node1.isCall());
1191:       assertFalse(node1.isAnd());
1192:       assertFalse(node1.isNull());
1193:       assertFalse(node1.isNot());
1194:       assertFalse(node1.isWhile());
1195:       assertFalse(node1.isString());
1196:       assertFalse(node1.isObjectLit());
1197:       assertFalse(node1.isExprResult());
1198:       assertFalse(node1.isReturn());
1199:       assertFalse(node1.isComma());
1200:       assertTrue(node1.hasOneChild());
1201:       assertFalse(node1.isIf());
1202:       assertFalse(node1.isDelProp());
1203:       assertFalse(node1.isGetterDef());
1204:       assertFalse(node1.isArrayLit());
1205:       assertTrue(node1.hasChildren());
1206:       assertFalse(node1.isEmpty());
1207:       assertFalse(node1.isIn());
1208:       assertFalse(node1.isVoid());
1209:       assertFalse(node1.isNE());
1210:       assertFalse(node1.isDebugger());
1211:       assertFalse(node1.isTrue());
1212:       assertFalse(node1.isDefaultCase());
1213:       assertFalse(node1.isInc());
1214:       assertFalse(node1.isFunction());
1215:       assertFalse(node1.isThrow());
1216:       assertFalse(node1.isSetterDef());
1217:       assertFalse(node1.isSwitch());
1218:       assertFalse(node1.isParamList());
1219:       assertEquals((-1), node1.getCharno());
1220:       assertFalse(node1.isStringKey());
1221:       assertFalse(node1.isWith());
1222:       assertFalse(node1.isCase());
1223:       assertFalse(node1.isRegExp());
1224:       assertFalse(node1.hasMoreThanOneChild());
1225:       assertFalse(node1.isCatch());
1226:       assertFalse(node1.isInstanceOf());
1227:       assertFalse(node1.isScript());
1228:       assertEquals(1, node1.getChildCount());
1229:       assertFalse(node1.isTry());
1230:       assertFalse(node1.isThis());
1231:       assertFalse(node1.isHook());
1232:       assertFalse(node1.isBlock());
1233:       assertFalse(node1.isFor());
1234:       
1235:       boolean boolean6 = node0.isCatch();
1236:       assertFalse(boolean6);
1237:       assertFalse(node0.equals((Object)node1));
1238:       assertTrue(boolean6 == boolean0);
1239:       assertTrue(boolean6 == boolean3);
1240:       assertTrue(boolean6 == boolean4);
1241:       assertTrue(boolean6 == boolean1);
1242:       assertTrue(boolean6 == boolean2);
1243:       assertTrue(boolean6 == boolean5);
1244:       assertEquals(37, Node.OPT_ARG_NAME);
1245:       assertEquals(2, Node.POST_FLAG);
1246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1247:       assertEquals(47, Node.IS_DISPATCHER);
1248:       assertEquals(29, Node.JSDOC_INFO_PROP);
1249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1250:       assertEquals(1, Node.DECR_FLAG);
1251:       assertEquals(12, Node.COLUMN_BITS);
1252:       assertEquals(32, Node.INCRDECR_PROP);
1253:       assertEquals(57, Node.LAST_PROP);
1254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1255:       assertEquals(36, Node.QUOTED_PROP);
1256:       assertEquals(53, Node.INPUT_ID);
1257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1260:       assertEquals(52, Node.LENGTH);
1261:       assertEquals(57, Node.REFLECTED_OBJECT);
1262:       assertEquals(49, Node.DIRECT_EVAL);
1263:       assertEquals(56, Node.CHANGE_TIME);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(48, Node.DIRECTIVES);
1266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1267:       assertEquals(39, Node.EMPTY_BLOCK);
1268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1269:       assertEquals(50, Node.FREE_CALL);
1270:       assertEquals(4095, Node.COLUMN_MASK);
1271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1272:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1273:       assertEquals(55, Node.INFERRED_FUNCTION);
1274:       assertEquals(54, Node.SLASH_V);
1275:       assertEquals(30, Node.VAR_ARGS_NAME);
1276:       assertEquals(40, Node.ORIGINALNAME_PROP);
1277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1278:       assertEquals(46, Node.IS_NAMESPACE);
1279:       assertEquals(43, Node.IS_CONSTANT_NAME);
1280:       assertEquals(0, nodeArray0.length);
1281:       assertNotSame(node0, node1);
1282:       assertFalse(node0.isTry());
1283:       assertFalse(node0.isVoid());
1284:       assertFalse(node0.isFunction());
1285:       assertFalse(node0.isArrayLit());
1286:       assertFalse(node0.isEmpty());
1287:       assertFalse(node0.isIf());
1288:       assertFalse(node0.isDelProp());
1289:       assertFalse(node0.isGetterDef());
1290:       assertFalse(node0.isNE());
1291:       assertFalse(node0.isDebugger());
1292:       assertFalse(node0.isTrue());
1293:       assertFalse(node0.isCatch());
1294:       assertFalse(node0.isCase());
1295:       assertFalse(node0.isRegExp());
1296:       assertFalse(node0.isFor());
1297:       assertFalse(node0.isInc());
1298:       assertFalse(node0.isString());
1299:       assertFalse(node0.isIn());
1300:       assertFalse(node0.isSetterDef());
1301:       assertFalse(node0.isContinue());
1302:       assertFalse(node0.isFalse());
1303:       assertFalse(node0.isThrow());
1304:       assertFalse(node0.hasOneChild());
1305:       assertFalse(node0.isCast());
1306:       assertFalse(node0.isScript());
1307:       assertFalse(node0.isGetElem());
1308:       assertFalse(node0.isExprResult());
1309:       assertFalse(node0.isLabelName());
1310:       assertFalse(node0.isNot());
1311:       assertFalse(node0.isNumber());
1312:       assertFalse(node0.isObjectLit());
1313:       assertEquals((-1), node0.getSourcePosition());
1314:       assertFalse(node0.isAnd());
1315:       assertEquals((-1), node0.getLineno());
1316:       assertEquals((-1518), node0.getType());
1317:       assertFalse(node0.hasMoreThanOneChild());
1318:       assertFalse(node0.isInstanceOf());
1319:       assertFalse(node0.isBreak());
1320:       assertFalse(node0.isGetProp());
1321:       assertFalse(node0.isAssign());
1322:       assertFalse(node0.isWith());
1323:       assertFalse(node0.isWhile());
1324:       assertFalse(node0.isDec());
1325:       assertFalse(node0.isTypeOf());
1326:       assertFalse(node0.isComma());
1327:       assertFalse(node0.hasChildren());
1328:       assertFalse(node0.isHook());
1329:       assertFalse(node0.isReturn());
1330:       assertFalse(node0.isBlock());
1331:       assertFalse(node0.isThis());
1332:       assertFalse(node0.isNew());
1333:       assertFalse(node0.isCall());
1334:       assertFalse(node0.isAdd());
1335:       assertFalse(node0.isName());
1336:       assertFalse(node0.isSwitch());
1337:       assertFalse(node0.isParamList());
1338:       assertEquals((-1), node0.getCharno());
1339:       assertFalse(node0.isStringKey());
1340:       assertFalse(node0.isNull());
1341:       assertFalse(node0.isLabel());
1342:       assertFalse(node0.isAssignAdd());
1343:       assertFalse(node0.isOr());
1344:       assertEquals(0, node0.getChildCount());
1345:       assertFalse(node0.isDo());
1346:       assertFalse(node0.isDefaultCase());
1347:       assertFalse(node0.isVar());
1348:       
1349:       boolean boolean7 = node0.isRegExp();
1350:       assertFalse(boolean7);
1351:       assertFalse(node0.equals((Object)node1));
1352:       assertTrue(boolean7 == boolean1);
1353:       assertTrue(boolean7 == boolean6);
1354:       assertTrue(boolean7 == boolean2);
1355:       assertTrue(boolean7 == boolean4);
1356:       assertTrue(boolean7 == boolean0);
1357:       assertTrue(boolean7 == boolean3);
1358:       assertTrue(boolean7 == boolean5);
1359:       assertEquals(37, Node.OPT_ARG_NAME);
1360:       assertEquals(2, Node.POST_FLAG);
1361:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1362:       assertEquals(47, Node.IS_DISPATCHER);
1363:       assertEquals(29, Node.JSDOC_INFO_PROP);
1364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1365:       assertEquals(1, Node.DECR_FLAG);
1366:       assertEquals(12, Node.COLUMN_BITS);
1367:       assertEquals(32, Node.INCRDECR_PROP);
1368:       assertEquals(57, Node.LAST_PROP);
1369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1370:       assertEquals(36, Node.QUOTED_PROP);
1371:       assertEquals(53, Node.INPUT_ID);
1372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1375:       assertEquals(52, Node.LENGTH);
1376:       assertEquals(57, Node.REFLECTED_OBJECT);
1377:       assertEquals(49, Node.DIRECT_EVAL);
1378:       assertEquals(56, Node.CHANGE_TIME);
1379:       assertEquals(8, Node.FLAG_NO_THROWS);
1380:       assertEquals(48, Node.DIRECTIVES);
1381:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1382:       assertEquals(39, Node.EMPTY_BLOCK);
1383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1384:       assertEquals(50, Node.FREE_CALL);
1385:       assertEquals(4095, Node.COLUMN_MASK);
1386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1387:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1388:       assertEquals(55, Node.INFERRED_FUNCTION);
1389:       assertEquals(54, Node.SLASH_V);
1390:       assertEquals(30, Node.VAR_ARGS_NAME);
1391:       assertEquals(40, Node.ORIGINALNAME_PROP);
1392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1393:       assertEquals(46, Node.IS_NAMESPACE);
1394:       assertEquals(43, Node.IS_CONSTANT_NAME);
1395:       assertEquals(0, nodeArray0.length);
1396:       assertNotSame(node0, node1);
1397:       assertFalse(node0.isTry());
1398:       assertFalse(node0.isVoid());
1399:       assertFalse(node0.isFunction());
1400:       assertFalse(node0.isArrayLit());
1401:       assertFalse(node0.isEmpty());
1402:       assertFalse(node0.isIf());
1403:       assertFalse(node0.isDelProp());
1404:       assertFalse(node0.isGetterDef());
1405:       assertFalse(node0.isNE());
1406:       assertFalse(node0.isDebugger());
1407:       assertFalse(node0.isTrue());
1408:       assertFalse(node0.isCatch());
1409:       assertFalse(node0.isCase());
1410:       assertFalse(node0.isRegExp());
1411:       assertFalse(node0.isFor());
1412:       assertFalse(node0.isInc());
1413:       assertFalse(node0.isString());
1414:       assertFalse(node0.isIn());
1415:       assertFalse(node0.isSetterDef());
1416:       assertFalse(node0.isContinue());
1417:       assertFalse(node0.isFalse());
1418:       assertFalse(node0.isThrow());
1419:       assertFalse(node0.hasOneChild());
1420:       assertFalse(node0.isCast());
1421:       assertFalse(node0.isScript());
1422:       assertFalse(node0.isGetElem());
1423:       assertFalse(node0.isExprResult());
1424:       assertFalse(node0.isLabelName());
1425:       assertFalse(node0.isNot());
1426:       assertFalse(node0.isNumber());
1427:       assertFalse(node0.isObjectLit());
1428:       assertEquals((-1), node0.getSourcePosition());
1429:       assertFalse(node0.isAnd());
1430:       assertEquals((-1), node0.getLineno());
1431:       assertEquals((-1518), node0.getType());
1432:       assertFalse(node0.hasMoreThanOneChild());
1433:       assertFalse(node0.isInstanceOf());
1434:       assertFalse(node0.isBreak());
1435:       assertFalse(node0.isGetProp());
1436:       assertFalse(node0.isAssign());
1437:       assertFalse(node0.isWith());
1438:       assertFalse(node0.isWhile());
1439:       assertFalse(node0.isDec());
1440:       assertFalse(node0.isTypeOf());
1441:       assertFalse(node0.isComma());
1442:       assertFalse(node0.hasChildren());
1443:       assertFalse(node0.isHook());
1444:       assertFalse(node0.isReturn());
1445:       assertFalse(node0.isBlock());
1446:       assertFalse(node0.isThis());
1447:       assertFalse(node0.isNew());
1448:       assertFalse(node0.isCall());
1449:       assertFalse(node0.isAdd());
1450:       assertFalse(node0.isName());
1451:       assertFalse(node0.isSwitch());
1452:       assertFalse(node0.isParamList());
1453:       assertEquals((-1), node0.getCharno());
1454:       assertFalse(node0.isStringKey());
1455:       assertFalse(node0.isNull());
1456:       assertFalse(node0.isLabel());
1457:       assertFalse(node0.isAssignAdd());
1458:       assertFalse(node0.isOr());
1459:       assertEquals(0, node0.getChildCount());
1460:       assertFalse(node0.isDo());
1461:       assertFalse(node0.isDefaultCase());
1462:       assertFalse(node0.isVar());
1463:       
1464:       int int0 = Node.extractCharno(43);
1465:       assertEquals(43, int0);
1466:       
1467:       Node node2 = Node.newString(42, "com.google.jaPscript.rhino.Node$ObjectPropListtem", 37, 1);
1468:       assertNotNull(node2);
1469:       assertFalse(node2.equals((Object)node1));
1470:       assertFalse(node2.equals((Object)node0));
1471:       assertEquals(32, Node.INCRDECR_PROP);
1472:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1473:       assertEquals(12, Node.COLUMN_BITS);
1474:       assertEquals(2, Node.POST_FLAG);
1475:       assertEquals(56, Node.CHANGE_TIME);
1476:       assertEquals(46, Node.IS_NAMESPACE);
1477:       assertEquals(47, Node.IS_DISPATCHER);
1478:       assertEquals(49, Node.DIRECT_EVAL);
1479:       assertEquals(30, Node.VAR_ARGS_NAME);
1480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1481:       assertEquals(37, Node.OPT_ARG_NAME);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1484:       assertEquals(52, Node.LENGTH);
1485:       assertEquals(36, Node.QUOTED_PROP);
1486:       assertEquals(57, Node.REFLECTED_OBJECT);
1487:       assertEquals(29, Node.JSDOC_INFO_PROP);
1488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1489:       assertEquals(57, Node.LAST_PROP);
1490:       assertEquals(55, Node.INFERRED_FUNCTION);
1491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1493:       assertEquals(39, Node.EMPTY_BLOCK);
1494:       assertEquals(48, Node.DIRECTIVES);
1495:       assertEquals(8, Node.FLAG_NO_THROWS);
1496:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1497:       assertEquals(4095, Node.COLUMN_MASK);
1498:       assertEquals(40, Node.ORIGINALNAME_PROP);
1499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1500:       assertEquals(43, Node.IS_CONSTANT_NAME);
1501:       assertEquals(54, Node.SLASH_V);
1502:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(50, Node.FREE_CALL);
1505:       assertEquals(1, Node.DECR_FLAG);
1506:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1507:       assertFalse(node2.hasOneChild());
1508:       assertFalse(node2.isCast());
1509:       assertEquals(151553, node2.getSourcePosition());
1510:       assertFalse(node2.isAssign());
1511:       assertFalse(node2.isDec());
1512:       assertFalse(node2.isNumber());
1513:       assertFalse(node2.hasChildren());
1514:       assertFalse(node2.isScript());
1515:       assertEquals(42, node2.getType());
1516:       assertFalse(node2.isAssignAdd());
1517:       assertFalse(node2.isInstanceOf());
1518:       assertFalse(node2.isReturn());
1519:       assertFalse(node2.isOr());
1520:       assertFalse(node2.isWith());
1521:       assertFalse(node2.hasMoreThanOneChild());
1522:       assertFalse(node2.isComma());
1523:       assertFalse(node2.isTypeOf());
1524:       assertFalse(node2.isBreak());
1525:       assertFalse(node2.isExprResult());
1526:       assertFalse(node2.isGetElem());
1527:       assertFalse(node2.isCall());
1528:       assertFalse(node2.isFalse());
1529:       assertFalse(node2.isWhile());
1530:       assertFalse(node2.isString());
1531:       assertFalse(node2.isSetterDef());
1532:       assertFalse(node2.isInc());
1533:       assertFalse(node2.isThrow());
1534:       assertFalse(node2.isGetProp());
1535:       assertFalse(node2.isContinue());
1536:       assertFalse(node2.isObjectLit());
1537:       assertFalse(node2.isNot());
1538:       assertEquals(37, node2.getLineno());
1539:       assertEquals(1, node2.getCharno());
1540:       assertFalse(node2.isAnd());
1541:       assertFalse(node2.isArrayLit());
1542:       assertFalse(node2.isDebugger());
1543:       assertFalse(node2.isFunction());
1544:       assertFalse(node2.isGetterDef());
1545:       assertFalse(node2.isRegExp());
1546:       assertFalse(node2.isDefaultCase());
1547:       assertFalse(node2.isFor());
1548:       assertFalse(node2.isEmpty());
1549:       assertFalse(node2.isTry());
1550:       assertTrue(node2.isThis());
1551:       assertFalse(node2.isIn());
1552:       assertFalse(node2.isCatch());
1553:       assertFalse(node2.isIf());
1554:       assertFalse(node2.isNE());
1555:       assertFalse(node2.isNull());
1556:       assertFalse(node2.isTrue());
1557:       assertFalse(node2.isName());
1558:       assertFalse(node2.isDelProp());
1559:       assertFalse(node2.isVoid());
1560:       assertFalse(node2.isHook());
1561:       assertFalse(node2.isBlock());
1562:       assertFalse(node2.isVar());
1563:       assertFalse(node2.isAdd());
1564:       assertFalse(node2.isNew());
1565:       assertFalse(node2.isCase());
1566:       assertFalse(node2.isDo());
1567:       assertEquals(0, node2.getChildCount());
1568:       assertFalse(node2.isLabel());
1569:       assertFalse(node2.isStringKey());
1570:       assertFalse(node2.isParamList());
1571:       assertFalse(node2.isSwitch());
1572:       assertFalse(node2.isLabelName());
1573:       
1574:       Iterable<Node> iterable0 = new Vector<Node>();
1575:       assertNotNull(iterable0);
1576:       assertFalse(iterable0.contains(node0));
1577:       
1578:       int int1 = node1.getType();
1579:       assertEquals(1748, int1);
1580:       assertFalse(node0.equals((Object)node2));
1581:       assertFalse(node0.equals((Object)node1));
1582:       assertFalse(node1.equals((Object)node2));
1583:       assertFalse(node1.equals((Object)node0));
1584:       assertFalse(int1 == int0);
1585:       assertEquals(37, Node.OPT_ARG_NAME);
1586:       assertEquals(2, Node.POST_FLAG);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(47, Node.IS_DISPATCHER);
1589:       assertEquals(29, Node.JSDOC_INFO_PROP);
1590:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1591:       assertEquals(1, Node.DECR_FLAG);
1592:       assertEquals(12, Node.COLUMN_BITS);
1593:       assertEquals(32, Node.INCRDECR_PROP);
1594:       assertEquals(57, Node.LAST_PROP);
1595:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1596:       assertEquals(36, Node.QUOTED_PROP);
1597:       assertEquals(53, Node.INPUT_ID);
1598:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1601:       assertEquals(52, Node.LENGTH);
1602:       assertEquals(57, Node.REFLECTED_OBJECT);
1603:       assertEquals(49, Node.DIRECT_EVAL);
1604:       assertEquals(56, Node.CHANGE_TIME);
1605:       assertEquals(8, Node.FLAG_NO_THROWS);
1606:       assertEquals(48, Node.DIRECTIVES);
1607:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1608:       assertEquals(39, Node.EMPTY_BLOCK);
1609:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1610:       assertEquals(50, Node.FREE_CALL);
1611:       assertEquals(4095, Node.COLUMN_MASK);
1612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1614:       assertEquals(55, Node.INFERRED_FUNCTION);
1615:       assertEquals(54, Node.SLASH_V);
1616:       assertEquals(30, Node.VAR_ARGS_NAME);
1617:       assertEquals(40, Node.ORIGINALNAME_PROP);
1618:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1619:       assertEquals(46, Node.IS_NAMESPACE);
1620:       assertEquals(43, Node.IS_CONSTANT_NAME);
1621:       assertEquals(1, Node.DECR_FLAG);
1622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1623:       assertEquals(12, Node.COLUMN_BITS);
1624:       assertEquals(30, Node.VAR_ARGS_NAME);
1625:       assertEquals(2, Node.POST_FLAG);
1626:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1628:       assertEquals(47, Node.IS_DISPATCHER);
1629:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1630:       assertEquals(32, Node.INCRDECR_PROP);
1631:       assertEquals(57, Node.LAST_PROP);
1632:       assertEquals(40, Node.ORIGINALNAME_PROP);
1633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1634:       assertEquals(50, Node.FREE_CALL);
1635:       assertEquals(54, Node.SLASH_V);
1636:       assertEquals(46, Node.IS_NAMESPACE);
1637:       assertEquals(43, Node.IS_CONSTANT_NAME);
1638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1639:       assertEquals(55, Node.INFERRED_FUNCTION);
1640:       assertEquals(4095, Node.COLUMN_MASK);
1641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1642:       assertEquals(53, Node.INPUT_ID);
1643:       assertEquals(39, Node.EMPTY_BLOCK);
1644:       assertEquals(29, Node.JSDOC_INFO_PROP);
1645:       assertEquals(57, Node.REFLECTED_OBJECT);
1646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1649:       assertEquals(52, Node.LENGTH);
1650:       assertEquals(8, Node.FLAG_NO_THROWS);
1651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1652:       assertEquals(37, Node.OPT_ARG_NAME);
1653:       assertEquals(48, Node.DIRECTIVES);
1654:       assertEquals(36, Node.QUOTED_PROP);
1655:       assertEquals(56, Node.CHANGE_TIME);
1656:       assertEquals(49, Node.DIRECT_EVAL);
1657:       assertEquals(0, nodeArray0.length);
1658:       assertNotSame(node0, node1);
1659:       assertNotSame(node1, node0);
1660:       assertFalse(node0.isTry());
1661:       assertFalse(node0.isVoid());
1662:       assertFalse(node0.isFunction());
1663:       assertFalse(node0.isArrayLit());
1664:       assertFalse(node0.isEmpty());
1665:       assertFalse(node0.isIf());
1666:       assertFalse(node0.isDelProp());
1667:       assertFalse(node0.isGetterDef());
1668:       assertFalse(node0.isNE());
1669:       assertFalse(node0.isDebugger());
1670:       assertFalse(node0.isTrue());
1671:       assertFalse(node0.isCatch());
1672:       assertFalse(node0.isCase());
1673:       assertFalse(node0.isRegExp());
1674:       assertFalse(node0.isFor());
1675:       assertFalse(node0.isInc());
1676:       assertFalse(node0.isString());
1677:       assertFalse(node0.isIn());
1678:       assertFalse(node0.isSetterDef());
1679:       assertFalse(node0.isContinue());
1680:       assertFalse(node0.isFalse());
1681:       assertFalse(node0.isThrow());
1682:       assertFalse(node0.hasOneChild());
1683:       assertFalse(node0.isCast());
1684:       assertFalse(node0.isScript());
1685:       assertFalse(node0.isGetElem());
1686:       assertFalse(node0.isExprResult());
1687:       assertFalse(node0.isLabelName());
1688:       assertFalse(node0.isNot());
1689:       assertFalse(node0.isNumber());
1690:       assertFalse(node0.isObjectLit());
1691:       assertEquals((-1), node0.getSourcePosition());
1692:       assertFalse(node0.isAnd());
1693:       assertEquals((-1), node0.getLineno());
1694:       assertEquals((-1518), node0.getType());
1695:       assertFalse(node0.hasMoreThanOneChild());
1696:       assertFalse(node0.isInstanceOf());
1697:       assertFalse(node0.isBreak());
1698:       assertFalse(node0.isGetProp());
1699:       assertFalse(node0.isAssign());
1700:       assertFalse(node0.isWith());
1701:       assertFalse(node0.isWhile());
1702:       assertFalse(node0.isDec());
1703:       assertFalse(node0.isTypeOf());
1704:       assertFalse(node0.isComma());
1705:       assertFalse(node0.hasChildren());
1706:       assertFalse(node0.isHook());
1707:       assertFalse(node0.isReturn());
1708:       assertFalse(node0.isBlock());
1709:       assertFalse(node0.isThis());
1710:       assertFalse(node0.isNew());
1711:       assertFalse(node0.isCall());
1712:       assertFalse(node0.isAdd());
1713:       assertFalse(node0.isName());
1714:       assertFalse(node0.isSwitch());
1715:       assertFalse(node0.isParamList());
1716:       assertEquals((-1), node0.getCharno());
1717:       assertFalse(node0.isStringKey());
1718:       assertFalse(node0.isNull());
1719:       assertFalse(node0.isLabel());
1720:       assertFalse(node0.isAssignAdd());
1721:       assertFalse(node0.isOr());
1722:       assertEquals(0, node0.getChildCount());
1723:       assertFalse(node0.isDo());
1724:       assertFalse(node0.isDefaultCase());
1725:       assertFalse(node0.isVar());
1726:       assertFalse(node1.isAssign());
1727:       assertFalse(node1.isDec());
1728:       assertFalse(node1.isNumber());
1729:       assertEquals(1748, node1.getType());
1730:       assertFalse(node1.isLabelName());
1731:       assertFalse(node1.isTypeOf());
1732:       assertFalse(node1.isCast());
1733:       assertFalse(node1.isGetElem());
1734:       assertFalse(node1.isOr());
1735:       assertEquals((-1), node1.getLineno());
1736:       assertEquals((-1), node1.getSourcePosition());
1737:       assertFalse(node1.isDo());
1738:       assertFalse(node1.isContinue());
1739:       assertFalse(node1.isAdd());
1740:       assertFalse(node1.isAssignAdd());
1741:       assertFalse(node1.isLabel());
1742:       assertFalse(node1.isNew());
1743:       assertFalse(node1.isVar());
1744:       assertFalse(node1.isBreak());
1745:       assertFalse(node1.isFalse());
1746:       assertFalse(node1.isName());
1747:       assertFalse(node1.isGetProp());
1748:       assertFalse(node1.isCall());
1749:       assertFalse(node1.isAnd());
1750:       assertFalse(node1.isNull());
1751:       assertFalse(node1.isNot());
1752:       assertFalse(node1.isWhile());
1753:       assertFalse(node1.isString());
1754:       assertFalse(node1.isObjectLit());
1755:       assertFalse(node1.isExprResult());
1756:       assertFalse(node1.isReturn());
1757:       assertFalse(node1.isComma());
1758:       assertTrue(node1.hasOneChild());
1759:       assertFalse(node1.isIf());
1760:       assertFalse(node1.isDelProp());
1761:       assertFalse(node1.isGetterDef());
1762:       assertFalse(node1.isArrayLit());
1763:       assertTrue(node1.hasChildren());
1764:       assertFalse(node1.isEmpty());
1765:       assertFalse(node1.isIn());
1766:       assertFalse(node1.isVoid());
1767:       assertFalse(node1.isNE());
1768:       assertFalse(node1.isDebugger());
1769:       assertFalse(node1.isTrue());
1770:       assertFalse(node1.isDefaultCase());
1771:       assertFalse(node1.isInc());
1772:       assertFalse(node1.isFunction());
1773:       assertFalse(node1.isThrow());
1774:       assertFalse(node1.isSetterDef());
1775:       assertFalse(node1.isSwitch());
1776:       assertFalse(node1.isParamList());
1777:       assertEquals((-1), node1.getCharno());
1778:       assertFalse(node1.isStringKey());
1779:       assertFalse(node1.isWith());
1780:       assertFalse(node1.isCase());
1781:       assertFalse(node1.isRegExp());
1782:       assertFalse(node1.hasMoreThanOneChild());
1783:       assertFalse(node1.isCatch());
1784:       assertFalse(node1.isInstanceOf());
1785:       assertFalse(node1.isScript());
1786:       assertEquals(1, node1.getChildCount());
1787:       assertFalse(node1.isTry());
1788:       assertFalse(node1.isThis());
1789:       assertFalse(node1.isHook());
1790:       assertFalse(node1.isBlock());
1791:       assertFalse(node1.isFor());
1792:       
1793:       boolean boolean8 = node2.isExprResult();
1794:       assertFalse(boolean8);
1795:       assertFalse(node2.equals((Object)node1));
1796:       assertFalse(node2.equals((Object)node0));
1797:       assertTrue(boolean8 == boolean1);
1798:       assertTrue(boolean8 == boolean4);
1799:       assertTrue(boolean8 == boolean7);
1800:       assertTrue(boolean8 == boolean5);
1801:       assertTrue(boolean8 == boolean3);
1802:       assertTrue(boolean8 == boolean0);
1803:       assertTrue(boolean8 == boolean2);
1804:       assertTrue(boolean8 == boolean6);
1805:       assertEquals(32, Node.INCRDECR_PROP);
1806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1807:       assertEquals(12, Node.COLUMN_BITS);
1808:       assertEquals(2, Node.POST_FLAG);
1809:       assertEquals(56, Node.CHANGE_TIME);
1810:       assertEquals(46, Node.IS_NAMESPACE);
1811:       assertEquals(47, Node.IS_DISPATCHER);
1812:       assertEquals(49, Node.DIRECT_EVAL);
1813:       assertEquals(30, Node.VAR_ARGS_NAME);
1814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1815:       assertEquals(37, Node.OPT_ARG_NAME);
1816:       assertEquals(53, Node.INPUT_ID);
1817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1818:       assertEquals(52, Node.LENGTH);
1819:       assertEquals(36, Node.QUOTED_PROP);
1820:       assertEquals(57, Node.REFLECTED_OBJECT);
1821:       assertEquals(29, Node.JSDOC_INFO_PROP);
1822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1823:       assertEquals(57, Node.LAST_PROP);
1824:       assertEquals(55, Node.INFERRED_FUNCTION);
1825:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1827:       assertEquals(39, Node.EMPTY_BLOCK);
1828:       assertEquals(48, Node.DIRECTIVES);
1829:       assertEquals(8, Node.FLAG_NO_THROWS);
1830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1831:       assertEquals(4095, Node.COLUMN_MASK);
1832:       assertEquals(40, Node.ORIGINALNAME_PROP);
1833:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1834:       assertEquals(43, Node.IS_CONSTANT_NAME);
1835:       assertEquals(54, Node.SLASH_V);
1836:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1837:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1838:       assertEquals(50, Node.FREE_CALL);
1839:       assertEquals(1, Node.DECR_FLAG);
1840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1841:       assertFalse(node2.hasOneChild());
1842:       assertFalse(node2.isCast());
1843:       assertEquals(151553, node2.getSourcePosition());
1844:       assertFalse(node2.isAssign());
1845:       assertFalse(node2.isDec());
1846:       assertFalse(node2.isNumber());
1847:       assertFalse(node2.hasChildren());
1848:       assertFalse(node2.isScript());
1849:       assertEquals(42, node2.getType());
1850:       assertFalse(node2.isAssignAdd());
1851:       assertFalse(node2.isInstanceOf());
1852:       assertFalse(node2.isReturn());
1853:       assertFalse(node2.isOr());
1854:       assertFalse(node2.isWith());
1855:       assertFalse(node2.hasMoreThanOneChild());
1856:       assertFalse(node2.isComma());
1857:       assertFalse(node2.isTypeOf());
1858:       assertFalse(node2.isBreak());
1859:       assertFalse(node2.isExprResult());
1860:       assertFalse(node2.isGetElem());
1861:       assertFalse(node2.isCall());
1862:       assertFalse(node2.isFalse());
1863:       assertFalse(node2.isWhile());
1864:       assertFalse(node2.isString());
1865:       assertFalse(node2.isSetterDef());
1866:       assertFalse(node2.isInc());
1867:       assertFalse(node2.isThrow());
1868:       assertFalse(node2.isGetProp());
1869:       assertFalse(node2.isContinue());
1870:       assertFalse(node2.isObjectLit());
1871:       assertFalse(node2.isNot());
1872:       assertEquals(37, node2.getLineno());
1873:       assertEquals(1, node2.getCharno());
1874:       assertFalse(node2.isAnd());
1875:       assertFalse(node2.isArrayLit());
1876:       assertFalse(node2.isDebugger());
1877:       assertFalse(node2.isFunction());
1878:       assertFalse(node2.isGetterDef());
1879:       assertFalse(node2.isRegExp());
1880:       assertFalse(node2.isDefaultCase());
1881:       assertFalse(node2.isFor());
1882:       assertFalse(node2.isEmpty());
1883:       assertFalse(node2.isTry());
1884:       assertTrue(node2.isThis());
1885:       assertFalse(node2.isIn());
1886:       assertFalse(node2.isCatch());
1887:       assertFalse(node2.isIf());
1888:       assertFalse(node2.isNE());
1889:       assertFalse(node2.isNull());
1890:       assertFalse(node2.isTrue());
1891:       assertFalse(node2.isName());
1892:       assertFalse(node2.isDelProp());
1893:       assertFalse(node2.isVoid());
1894:       assertFalse(node2.isHook());
1895:       assertFalse(node2.isBlock());
1896:       assertFalse(node2.isVar());
1897:       assertFalse(node2.isAdd());
1898:       assertFalse(node2.isNew());
1899:       assertFalse(node2.isCase());
1900:       assertFalse(node2.isDo());
1901:       assertEquals(0, node2.getChildCount());
1902:       assertFalse(node2.isLabel());
1903:       assertFalse(node2.isStringKey());
1904:       assertFalse(node2.isParamList());
1905:       assertFalse(node2.isSwitch());
1906:       assertFalse(node2.isLabelName());
1907:   }
1908: }
RegularFileObject[/tmp/EvoSuite_146_1629223212422/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:12 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_146_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_146_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.common.collect.Iterables",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_146_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.base.Objects",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.common.collect.Iterables",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.common.collect.ImmutableSet",
344:       "com.google.common.collect.EmptyImmutableSet",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.common.collect.Platform",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
364:     );
365:   }
366: }

[MASTER] 18:00:12.804 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node((-1518), nodeArray0, (-1518), (-1518));
assertNotNull(node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());

byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)84;
byteArray0[1] = (byte)101;
byteArray0[2] = (byte)101;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)84, (byte)101, (byte)101}, byteArray0);
assertEquals(3, byteArray0.length);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

node0.setSourceFileForTesting("_I&c lsIPD7Xlk");
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

boolean boolean2 = node0.isGetProp();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertNotNull(node_AncestorIterable0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertNotNull(iterator0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

boolean boolean3 = node0.isCatch();
assertFalse(boolean3);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

boolean boolean4 = node0.isContinue();
assertFalse(boolean4);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

boolean boolean5 = node0.isSetterDef();
assertFalse(boolean5);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

Node node1 = new Node(1748, node0, node0, node0, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, nodeArray0.length);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertEquals(1748, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());

boolean boolean6 = node0.isCatch();
assertFalse(boolean6);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean5);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

boolean boolean7 = node0.isRegExp();
assertFalse(boolean7);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());

int int0 = Node.extractCharno(43);
assertEquals(43, int0);

Node node2 = Node.newString(42, "com.google.jaPscript.rhino.Node$ObjectPropListtem", 37, 1);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertEquals(151553, node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isScript());
assertEquals(42, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(37, node2.getLineno());
assertEquals(1, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertTrue(node2.isThis());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());

Iterable<Node> iterable0 = new Vector<Node>();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

int int1 = node1.getType();
assertEquals(1748, int1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(int1 == int0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, nodeArray0.length);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getLineno());
assertEquals((-1518), node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertEquals(1748, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertTrue(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());

boolean boolean8 = node2.isExprResult();
assertFalse(boolean8);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean6);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertEquals(151553, node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isScript());
assertEquals(42, node2.getType());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(37, node2.getLineno());
assertEquals(1, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertTrue(node2.isThis());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());


[MASTER] 18:00:31.630 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:32.009 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:32.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
com.google.javascript.rhino.Node_695_tmp__ESTest.test0(Node_695_tmp__ESTest.java:33)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:00:32.014 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = new Node(4499);
node0.setJSType((JSType) null);
node0.setVarArgs(false);
Node.extractLineno(4095);
node0.type = 0;
node0.getLength();
Node node1 = Node.newNumber((-715.37), 19, (-1917));
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
node1.appendStringTree(mockPrintWriter0);
node0.isEquivalentToTyped(node1);
node0.getString();

[MASTER] 18:00:35.591 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:35.897 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:36.125 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:36.351 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:36.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:36.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:37.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:37.362 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:37.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:37.930 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:38.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:38.461 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:38.695 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:38.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:39.153 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:39.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:40.461 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:40.681 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:40.916 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:41.160 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:41.392 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:41.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:41.910 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:42.161 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:42.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:42.705 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:42.917 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:43.135 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:43.323 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:43.555 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:43.796 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:44.035 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:44.333 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:44.573 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:44.775 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:45.029 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:45.266 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:45.614 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:45.852 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:46.402 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/19
* Done!

* Computation finished
