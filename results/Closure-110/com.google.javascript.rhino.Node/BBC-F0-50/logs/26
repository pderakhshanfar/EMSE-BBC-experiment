* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12921
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 933686904
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:12.900 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:49:34.922 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 605s and 375 generations, 177463 statements, best individual has fitness: 3028.0
* Minimizing test suite
[MASTER] 18:00:35.937 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 781
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 597
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 455
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2107
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 557
* Generated 723 tests with total length 9356
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:01:40.252 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6701833333333334% of time used, but only 39/723 tests minimized), falling back to using all assertions
[MASTER] 18:02:00.148 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 18:02:11.139 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 18:02:16.347 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_47_1629223336012/com/google/javascript/rhino/Node_47_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_47_1629223336012/com/google/javascript/rhino/Node_47_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:16.347 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:16.347 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:16.354 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1085
[MASTER] 18:02:16.357 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_47_1629223336012/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:16 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_47_tmp__ESTest extends Node_47_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertFalse(node0.isExprResult());
23:       assertFalse(node0.hasOneChild());
24:       assertFalse(node0.isObjectLit());
25:       assertFalse(node0.isNot());
26:       assertFalse(node0.isScript());
27:       assertFalse(node0.isComma());
28:       assertFalse(node0.isThis());
29:       assertFalse(node0.isGetProp());
30:       assertFalse(node0.isTypeOf());
31:       assertFalse(node0.isDec());
32:       assertFalse(node0.isOr());
33:       assertFalse(node0.isReturn());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.hasMoreThanOneChild());
36:       assertFalse(node0.isAssign());
37:       assertFalse(node0.isWith());
38:       assertEquals((-1), node0.getLineno());
39:       assertFalse(node0.isBreak());
40:       assertFalse(node0.isInstanceOf());
41:       assertFalse(node0.isGetElem());
42:       assertFalse(node0.isInc());
43:       assertFalse(node0.isWhile());
44:       assertFalse(node0.isString());
45:       assertTrue(node0.isNumber());
46:       assertFalse(node0.isIn());
47:       assertFalse(node0.isSetterDef());
48:       assertEquals((-1), node0.getSourcePosition());
49:       assertFalse(node0.isThrow());
50:       assertFalse(node0.isAnd());
51:       assertFalse(node0.isContinue());
52:       assertFalse(node0.isFalse());
53:       assertFalse(node0.isCast());
54:       assertFalse(node0.isTrue());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isDebugger());
57:       assertFalse(node0.isTry());
58:       assertFalse(node0.isRegExp());
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isDelProp());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isNE());
66:       assertFalse(node0.isFor());
67:       assertFalse(node0.isCatch());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isSwitch());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isNew());
73:       assertEquals(39, node0.getType());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isAdd());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isArrayLit());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.isLabelName());
88:       assertEquals(47, Node.IS_DISPATCHER);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(29, Node.JSDOC_INFO_PROP);
92:       assertEquals(37, Node.OPT_ARG_NAME);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(30, Node.VAR_ARGS_NAME);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(49, Node.DIRECT_EVAL);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertNotNull(node0);
125:       
126:       String string0 = "UNKNOWN";
127:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
128:       assertFalse(node1.isHook());
129:       assertFalse(node1.isThrow());
130:       assertFalse(node1.isComma());
131:       assertFalse(node1.isThis());
132:       assertFalse(node1.isSwitch());
133:       assertFalse(node1.isBreak());
134:       assertFalse(node1.isFalse());
135:       assertFalse(node1.isInstanceOf());
136:       assertFalse(node1.isNE());
137:       assertEquals(0, node1.getCharno());
138:       assertEquals(131072, node1.getSourcePosition());
139:       assertFalse(node1.isInc());
140:       assertFalse(node1.isEmpty());
141:       assertFalse(node1.isIn());
142:       assertFalse(node1.isCast());
143:       assertFalse(node1.isGetElem());
144:       assertFalse(node1.isDelProp());
145:       assertFalse(node1.isFunction());
146:       assertFalse(node1.isVoid());
147:       assertFalse(node1.isTypeOf());
148:       assertFalse(node1.isExprResult());
149:       assertFalse(node1.isDec());
150:       assertFalse(node1.hasChildren());
151:       assertFalse(node1.isAssign());
152:       assertFalse(node1.isObjectLit());
153:       assertFalse(node1.isReturn());
154:       assertFalse(node1.isAnd());
155:       assertFalse(node1.isWhile());
156:       assertFalse(node1.isGetProp());
157:       assertFalse(node1.isDebugger());
158:       assertFalse(node1.isNot());
159:       assertFalse(node1.isString());
160:       assertFalse(node1.isCall());
161:       assertFalse(node1.isVar());
162:       assertFalse(node1.isBlock());
163:       assertFalse(node1.isName());
164:       assertFalse(node1.isStringKey());
165:       assertFalse(node1.isContinue());
166:       assertFalse(node1.isCatch());
167:       assertEquals(0, node1.getChildCount());
168:       assertFalse(node1.isDo());
169:       assertFalse(node1.isDefaultCase());
170:       assertFalse(node1.isAssignAdd());
171:       assertFalse(node1.isSetterDef());
172:       assertFalse(node1.isTrue());
173:       assertFalse(node1.isNull());
174:       assertFalse(node1.isNew());
175:       assertFalse(node1.isOr());
176:       assertFalse(node1.isAdd());
177:       assertFalse(node1.hasOneChild());
178:       assertEquals((-1122), node1.getType());
179:       assertFalse(node1.isArrayLit());
180:       assertFalse(node1.isFor());
181:       assertFalse(node1.isTry());
182:       assertFalse(node1.isLabelName());
183:       assertFalse(node1.isIf());
184:       assertFalse(node1.isRegExp());
185:       assertFalse(node1.isLabel());
186:       assertEquals(32, node1.getLineno());
187:       assertFalse(node1.isWith());
188:       assertFalse(node1.hasMoreThanOneChild());
189:       assertFalse(node1.isCase());
190:       assertFalse(node1.isParamList());
191:       assertFalse(node1.isScript());
192:       assertFalse(node1.isGetterDef());
193:       assertFalse(node1.isNumber());
194:       assertFalse(node1.equals((Object)node0));
195:       assertEquals(4095, Node.COLUMN_MASK);
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(39, Node.EMPTY_BLOCK);
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(48, Node.DIRECTIVES);
200:       assertEquals(50, Node.FREE_CALL);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(8, Node.FLAG_NO_THROWS);
204:       assertEquals(57, Node.REFLECTED_OBJECT);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(52, Node.LENGTH);
207:       assertEquals(53, Node.INPUT_ID);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(2, Node.POST_FLAG);
214:       assertEquals(47, Node.IS_DISPATCHER);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(46, Node.IS_NAMESPACE);
217:       assertEquals(1, Node.DECR_FLAG);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertNotNull(node1);
232:       
233:       Object object0 = node1.getProp(0);
234:       assertFalse(node1.isHook());
235:       assertFalse(node1.isThrow());
236:       assertFalse(node1.isComma());
237:       assertFalse(node1.isThis());
238:       assertFalse(node1.isSwitch());
239:       assertFalse(node1.isBreak());
240:       assertFalse(node1.isFalse());
241:       assertFalse(node1.isInstanceOf());
242:       assertFalse(node1.isNE());
243:       assertEquals(0, node1.getCharno());
244:       assertEquals(131072, node1.getSourcePosition());
245:       assertFalse(node1.isInc());
246:       assertFalse(node1.isEmpty());
247:       assertFalse(node1.isIn());
248:       assertFalse(node1.isCast());
249:       assertFalse(node1.isGetElem());
250:       assertFalse(node1.isDelProp());
251:       assertFalse(node1.isFunction());
252:       assertFalse(node1.isVoid());
253:       assertFalse(node1.isTypeOf());
254:       assertFalse(node1.isExprResult());
255:       assertFalse(node1.isDec());
256:       assertFalse(node1.hasChildren());
257:       assertFalse(node1.isAssign());
258:       assertFalse(node1.isObjectLit());
259:       assertFalse(node1.isReturn());
260:       assertFalse(node1.isAnd());
261:       assertFalse(node1.isWhile());
262:       assertFalse(node1.isGetProp());
263:       assertFalse(node1.isDebugger());
264:       assertFalse(node1.isNot());
265:       assertFalse(node1.isString());
266:       assertFalse(node1.isCall());
267:       assertFalse(node1.isVar());
268:       assertFalse(node1.isBlock());
269:       assertFalse(node1.isName());
270:       assertFalse(node1.isStringKey());
271:       assertFalse(node1.isContinue());
272:       assertFalse(node1.isCatch());
273:       assertEquals(0, node1.getChildCount());
274:       assertFalse(node1.isDo());
275:       assertFalse(node1.isDefaultCase());
276:       assertFalse(node1.isAssignAdd());
277:       assertFalse(node1.isSetterDef());
278:       assertFalse(node1.isTrue());
279:       assertFalse(node1.isNull());
280:       assertFalse(node1.isNew());
281:       assertFalse(node1.isOr());
282:       assertFalse(node1.isAdd());
283:       assertFalse(node1.hasOneChild());
284:       assertEquals((-1122), node1.getType());
285:       assertFalse(node1.isArrayLit());
286:       assertFalse(node1.isFor());
287:       assertFalse(node1.isTry());
288:       assertFalse(node1.isLabelName());
289:       assertFalse(node1.isIf());
290:       assertFalse(node1.isRegExp());
291:       assertFalse(node1.isLabel());
292:       assertEquals(32, node1.getLineno());
293:       assertFalse(node1.isWith());
294:       assertFalse(node1.hasMoreThanOneChild());
295:       assertFalse(node1.isCase());
296:       assertFalse(node1.isParamList());
297:       assertFalse(node1.isScript());
298:       assertFalse(node1.isGetterDef());
299:       assertFalse(node1.isNumber());
300:       assertFalse(node1.equals((Object)node0));
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(55, Node.INFERRED_FUNCTION);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(43, Node.IS_CONSTANT_NAME);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(36, Node.QUOTED_PROP);
312:       assertEquals(52, Node.LENGTH);
313:       assertEquals(53, Node.INPUT_ID);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(57, Node.LAST_PROP);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(47, Node.IS_DISPATCHER);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(46, Node.IS_NAMESPACE);
323:       assertEquals(1, Node.DECR_FLAG);
324:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
329:       assertEquals(56, Node.CHANGE_TIME);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
335:       assertEquals(12, Node.COLUMN_BITS);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       assertNull(object0);
338:       
339:       Node node2 = Node.newString(46, "UNKNOWN");
340:       assertFalse(node2.isStringKey());
341:       assertFalse(node2.isVar());
342:       assertFalse(node2.isCall());
343:       assertFalse(node2.isName());
344:       assertFalse(node2.isBlock());
345:       assertEquals(0, node2.getChildCount());
346:       assertFalse(node2.isCatch());
347:       assertFalse(node2.isDefaultCase());
348:       assertEquals((-1), node2.getLineno());
349:       assertFalse(node2.isAssignAdd());
350:       assertFalse(node2.isDo());
351:       assertFalse(node2.isNew());
352:       assertFalse(node2.isSetterDef());
353:       assertFalse(node2.isTrue());
354:       assertFalse(node2.isNull());
355:       assertFalse(node2.isAdd());
356:       assertFalse(node2.isOr());
357:       assertFalse(node2.isCast());
358:       assertFalse(node2.isGetElem());
359:       assertFalse(node2.isDelProp());
360:       assertFalse(node2.isVoid());
361:       assertFalse(node2.isReturn());
362:       assertFalse(node2.isExprResult());
363:       assertFalse(node2.isDec());
364:       assertFalse(node2.hasChildren());
365:       assertFalse(node2.isAssign());
366:       assertFalse(node2.isFunction());
367:       assertFalse(node2.isTypeOf());
368:       assertFalse(node2.isAnd());
369:       assertFalse(node2.isContinue());
370:       assertFalse(node2.isWhile());
371:       assertFalse(node2.isGetProp());
372:       assertFalse(node2.isDebugger());
373:       assertEquals((-1), node2.getSourcePosition());
374:       assertFalse(node2.isString());
375:       assertFalse(node2.isNot());
376:       assertFalse(node2.isObjectLit());
377:       assertFalse(node2.isThrow());
378:       assertFalse(node2.isFalse());
379:       assertFalse(node2.isBreak());
380:       assertFalse(node2.isComma());
381:       assertFalse(node2.isThis());
382:       assertFalse(node2.isHook());
383:       assertFalse(node2.isInstanceOf());
384:       assertEquals(46, node2.getType());
385:       assertFalse(node2.isNE());
386:       assertFalse(node2.isInc());
387:       assertFalse(node2.isIn());
388:       assertFalse(node2.isEmpty());
389:       assertFalse(node2.isFor());
390:       assertFalse(node2.isIf());
391:       assertFalse(node2.hasOneChild());
392:       assertFalse(node2.isArrayLit());
393:       assertFalse(node2.isTry());
394:       assertFalse(node2.isLabelName());
395:       assertFalse(node2.isLabel());
396:       assertFalse(node2.isWith());
397:       assertFalse(node2.hasMoreThanOneChild());
398:       assertFalse(node2.isRegExp());
399:       assertFalse(node2.isCase());
400:       assertFalse(node2.isSwitch());
401:       assertEquals((-1), node2.getCharno());
402:       assertFalse(node2.isParamList());
403:       assertFalse(node2.isScript());
404:       assertFalse(node2.isNumber());
405:       assertFalse(node2.isGetterDef());
406:       assertFalse(node2.equals((Object)node0));
407:       assertFalse(node2.equals((Object)node1));
408:       assertNotSame(node2, node1);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(55, Node.INFERRED_FUNCTION);
412:       assertEquals(39, Node.EMPTY_BLOCK);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(36, Node.QUOTED_PROP);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(8, Node.FLAG_NO_THROWS);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
420:       assertEquals(57, Node.REFLECTED_OBJECT);
421:       assertEquals(52, Node.LENGTH);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(47, Node.IS_DISPATCHER);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
432:       assertEquals(32, Node.INCRDECR_PROP);
433:       assertEquals(1, Node.DECR_FLAG);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(49, Node.DIRECT_EVAL);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(46, Node.IS_NAMESPACE);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       assertNotNull(node2);
446:       
447:       boolean boolean0 = node1.isVarArgs();
448:       assertFalse(boolean0);
449:       assertFalse(node1.isHook());
450:       assertFalse(node1.isThrow());
451:       assertFalse(node1.isComma());
452:       assertFalse(node1.isThis());
453:       assertFalse(node1.isSwitch());
454:       assertFalse(node1.isBreak());
455:       assertFalse(node1.isFalse());
456:       assertFalse(node1.isInstanceOf());
457:       assertFalse(node1.isNE());
458:       assertEquals(0, node1.getCharno());
459:       assertEquals(131072, node1.getSourcePosition());
460:       assertFalse(node1.isInc());
461:       assertFalse(node1.isEmpty());
462:       assertFalse(node1.isIn());
463:       assertFalse(node1.isCast());
464:       assertFalse(node1.isGetElem());
465:       assertFalse(node1.isDelProp());
466:       assertFalse(node1.isFunction());
467:       assertFalse(node1.isVoid());
468:       assertFalse(node1.isTypeOf());
469:       assertFalse(node1.isExprResult());
470:       assertFalse(node1.isDec());
471:       assertFalse(node1.hasChildren());
472:       assertFalse(node1.isAssign());
473:       assertFalse(node1.isObjectLit());
474:       assertFalse(node1.isReturn());
475:       assertFalse(node1.isAnd());
476:       assertFalse(node1.isWhile());
477:       assertFalse(node1.isGetProp());
478:       assertFalse(node1.isDebugger());
479:       assertFalse(node1.isNot());
480:       assertFalse(node1.isString());
481:       assertFalse(node1.isCall());
482:       assertFalse(node1.isVar());
483:       assertFalse(node1.isBlock());
484:       assertFalse(node1.isName());
485:       assertFalse(node1.isStringKey());
486:       assertFalse(node1.isContinue());
487:       assertFalse(node1.isCatch());
488:       assertEquals(0, node1.getChildCount());
489:       assertFalse(node1.isDo());
490:       assertFalse(node1.isDefaultCase());
491:       assertFalse(node1.isAssignAdd());
492:       assertFalse(node1.isSetterDef());
493:       assertFalse(node1.isTrue());
494:       assertFalse(node1.isNull());
495:       assertFalse(node1.isNew());
496:       assertFalse(node1.isOr());
497:       assertFalse(node1.isAdd());
498:       assertFalse(node1.hasOneChild());
499:       assertEquals((-1122), node1.getType());
500:       assertFalse(node1.isArrayLit());
501:       assertFalse(node1.isFor());
502:       assertFalse(node1.isTry());
503:       assertFalse(node1.isLabelName());
504:       assertFalse(node1.isIf());
505:       assertFalse(node1.isRegExp());
506:       assertFalse(node1.isLabel());
507:       assertEquals(32, node1.getLineno());
508:       assertFalse(node1.isWith());
509:       assertFalse(node1.hasMoreThanOneChild());
510:       assertFalse(node1.isCase());
511:       assertFalse(node1.isParamList());
512:       assertFalse(node1.isScript());
513:       assertFalse(node1.isGetterDef());
514:       assertFalse(node1.isNumber());
515:       assertFalse(node1.equals((Object)node0));
516:       assertFalse(node1.equals((Object)node2));
517:       assertNotSame(node1, node2);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(55, Node.INFERRED_FUNCTION);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
522:       assertEquals(48, Node.DIRECTIVES);
523:       assertEquals(50, Node.FREE_CALL);
524:       assertEquals(43, Node.IS_CONSTANT_NAME);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(8, Node.FLAG_NO_THROWS);
527:       assertEquals(57, Node.REFLECTED_OBJECT);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(53, Node.INPUT_ID);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(2, Node.POST_FLAG);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(1, Node.DECR_FLAG);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(29, Node.JSDOC_INFO_PROP);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(54, Node.SLASH_V);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
552:       assertEquals(12, Node.COLUMN_BITS);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       
555:       node0.setLineno(39);
556:       assertEquals(0, node0.getCharno());
557:       assertFalse(node0.isExprResult());
558:       assertFalse(node0.hasOneChild());
559:       assertFalse(node0.isObjectLit());
560:       assertFalse(node0.isNot());
561:       assertFalse(node0.isScript());
562:       assertFalse(node0.isComma());
563:       assertFalse(node0.isThis());
564:       assertFalse(node0.isGetProp());
565:       assertFalse(node0.isTypeOf());
566:       assertFalse(node0.isDec());
567:       assertFalse(node0.isOr());
568:       assertFalse(node0.isReturn());
569:       assertFalse(node0.hasChildren());
570:       assertFalse(node0.hasMoreThanOneChild());
571:       assertFalse(node0.isAssign());
572:       assertFalse(node0.isWith());
573:       assertFalse(node0.isBreak());
574:       assertFalse(node0.isInstanceOf());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isInc());
577:       assertEquals(159744, node0.getSourcePosition());
578:       assertFalse(node0.isWhile());
579:       assertFalse(node0.isString());
580:       assertTrue(node0.isNumber());
581:       assertFalse(node0.isIn());
582:       assertFalse(node0.isSetterDef());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isAnd());
585:       assertFalse(node0.isContinue());
586:       assertFalse(node0.isFalse());
587:       assertFalse(node0.isCast());
588:       assertFalse(node0.isTrue());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isDebugger());
591:       assertFalse(node0.isTry());
592:       assertFalse(node0.isRegExp());
593:       assertFalse(node0.isVoid());
594:       assertFalse(node0.isDefaultCase());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isDelProp());
597:       assertFalse(node0.isIf());
598:       assertFalse(node0.isNull());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isFor());
601:       assertFalse(node0.isCatch());
602:       assertFalse(node0.isCall());
603:       assertFalse(node0.isName());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isNew());
606:       assertEquals(39, node0.getType());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isVar());
610:       assertFalse(node0.isCase());
611:       assertFalse(node0.isDo());
612:       assertFalse(node0.isAdd());
613:       assertFalse(node0.isParamList());
614:       assertFalse(node0.isGetterDef());
615:       assertEquals(39, node0.getLineno());
616:       assertFalse(node0.isLabel());
617:       assertFalse(node0.isAssignAdd());
618:       assertFalse(node0.isStringKey());
619:       assertFalse(node0.isArrayLit());
620:       assertEquals(0, node0.getChildCount());
621:       assertFalse(node0.isLabelName());
622:       assertFalse(node0.equals((Object)node1));
623:       assertFalse(node0.equals((Object)node2));
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
626:       assertEquals(56, Node.CHANGE_TIME);
627:       assertEquals(29, Node.JSDOC_INFO_PROP);
628:       assertEquals(37, Node.OPT_ARG_NAME);
629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
630:       assertEquals(12, Node.COLUMN_BITS);
631:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
632:       assertEquals(2, Node.POST_FLAG);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(57, Node.LAST_PROP);
635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(52, Node.LENGTH);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(57, Node.REFLECTED_OBJECT);
642:       assertEquals(55, Node.INFERRED_FUNCTION);
643:       assertEquals(8, Node.FLAG_NO_THROWS);
644:       assertEquals(36, Node.QUOTED_PROP);
645:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(40, Node.ORIGINALNAME_PROP);
648:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
649:       assertEquals(39, Node.EMPTY_BLOCK);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
652:       assertEquals(4095, Node.COLUMN_MASK);
653:       assertEquals(43, Node.IS_CONSTANT_NAME);
654:       assertEquals(1, Node.DECR_FLAG);
655:       assertEquals(32, Node.INCRDECR_PROP);
656:       assertEquals(46, Node.IS_NAMESPACE);
657:       assertEquals(54, Node.SLASH_V);
658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
659:       assertEquals(50, Node.FREE_CALL);
660:       
661:       node0.putProp(4095, (Object) null);
662:       assertEquals(0, node0.getCharno());
663:       assertFalse(node0.isExprResult());
664:       assertFalse(node0.hasOneChild());
665:       assertFalse(node0.isObjectLit());
666:       assertFalse(node0.isNot());
667:       assertFalse(node0.isScript());
668:       assertFalse(node0.isComma());
669:       assertFalse(node0.isThis());
670:       assertFalse(node0.isGetProp());
671:       assertFalse(node0.isTypeOf());
672:       assertFalse(node0.isDec());
673:       assertFalse(node0.isOr());
674:       assertFalse(node0.isReturn());
675:       assertFalse(node0.hasChildren());
676:       assertFalse(node0.hasMoreThanOneChild());
677:       assertFalse(node0.isAssign());
678:       assertFalse(node0.isWith());
679:       assertFalse(node0.isBreak());
680:       assertFalse(node0.isInstanceOf());
681:       assertFalse(node0.isGetElem());
682:       assertFalse(node0.isInc());
683:       assertEquals(159744, node0.getSourcePosition());
684:       assertFalse(node0.isWhile());
685:       assertFalse(node0.isString());
686:       assertTrue(node0.isNumber());
687:       assertFalse(node0.isIn());
688:       assertFalse(node0.isSetterDef());
689:       assertFalse(node0.isThrow());
690:       assertFalse(node0.isAnd());
691:       assertFalse(node0.isContinue());
692:       assertFalse(node0.isFalse());
693:       assertFalse(node0.isCast());
694:       assertFalse(node0.isTrue());
695:       assertFalse(node0.isFunction());
696:       assertFalse(node0.isDebugger());
697:       assertFalse(node0.isTry());
698:       assertFalse(node0.isRegExp());
699:       assertFalse(node0.isVoid());
700:       assertFalse(node0.isDefaultCase());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isDelProp());
703:       assertFalse(node0.isIf());
704:       assertFalse(node0.isNull());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isFor());
707:       assertFalse(node0.isCatch());
708:       assertFalse(node0.isCall());
709:       assertFalse(node0.isName());
710:       assertFalse(node0.isSwitch());
711:       assertFalse(node0.isNew());
712:       assertEquals(39, node0.getType());
713:       assertFalse(node0.isHook());
714:       assertFalse(node0.isBlock());
715:       assertFalse(node0.isVar());
716:       assertFalse(node0.isCase());
717:       assertFalse(node0.isDo());
718:       assertFalse(node0.isAdd());
719:       assertFalse(node0.isParamList());
720:       assertFalse(node0.isGetterDef());
721:       assertEquals(39, node0.getLineno());
722:       assertFalse(node0.isLabel());
723:       assertFalse(node0.isAssignAdd());
724:       assertFalse(node0.isStringKey());
725:       assertFalse(node0.isArrayLit());
726:       assertEquals(0, node0.getChildCount());
727:       assertFalse(node0.isLabelName());
728:       assertFalse(node0.equals((Object)node1));
729:       assertFalse(node0.equals((Object)node2));
730:       assertEquals(47, Node.IS_DISPATCHER);
731:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
732:       assertEquals(56, Node.CHANGE_TIME);
733:       assertEquals(29, Node.JSDOC_INFO_PROP);
734:       assertEquals(37, Node.OPT_ARG_NAME);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(12, Node.COLUMN_BITS);
737:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
738:       assertEquals(2, Node.POST_FLAG);
739:       assertEquals(30, Node.VAR_ARGS_NAME);
740:       assertEquals(57, Node.LAST_PROP);
741:       assertEquals(15, Node.NO_SIDE_EFFECTS);
742:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(49, Node.DIRECT_EVAL);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(53, Node.INPUT_ID);
747:       assertEquals(57, Node.REFLECTED_OBJECT);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(36, Node.QUOTED_PROP);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
753:       assertEquals(40, Node.ORIGINALNAME_PROP);
754:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
755:       assertEquals(39, Node.EMPTY_BLOCK);
756:       assertEquals(48, Node.DIRECTIVES);
757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(43, Node.IS_CONSTANT_NAME);
760:       assertEquals(1, Node.DECR_FLAG);
761:       assertEquals(32, Node.INCRDECR_PROP);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(54, Node.SLASH_V);
764:       assertEquals(51, Node.STATIC_SOURCE_FILE);
765:       assertEquals(50, Node.FREE_CALL);
766:       
767:       int int0 = node0.getIndexOfChild(node1);
768:       assertEquals((-1), int0);
769:       assertEquals(0, node0.getCharno());
770:       assertFalse(node0.isExprResult());
771:       assertFalse(node0.hasOneChild());
772:       assertFalse(node0.isObjectLit());
773:       assertFalse(node0.isNot());
774:       assertFalse(node0.isScript());
775:       assertFalse(node0.isComma());
776:       assertFalse(node0.isThis());
777:       assertFalse(node0.isGetProp());
778:       assertFalse(node0.isTypeOf());
779:       assertFalse(node0.isDec());
780:       assertFalse(node0.isOr());
781:       assertFalse(node0.isReturn());
782:       assertFalse(node0.hasChildren());
783:       assertFalse(node0.hasMoreThanOneChild());
784:       assertFalse(node0.isAssign());
785:       assertFalse(node0.isWith());
786:       assertFalse(node0.isBreak());
787:       assertFalse(node0.isInstanceOf());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isInc());
790:       assertEquals(159744, node0.getSourcePosition());
791:       assertFalse(node0.isWhile());
792:       assertFalse(node0.isString());
793:       assertTrue(node0.isNumber());
794:       assertFalse(node0.isIn());
795:       assertFalse(node0.isSetterDef());
796:       assertFalse(node0.isThrow());
797:       assertFalse(node0.isAnd());
798:       assertFalse(node0.isContinue());
799:       assertFalse(node0.isFalse());
800:       assertFalse(node0.isCast());
801:       assertFalse(node0.isTrue());
802:       assertFalse(node0.isFunction());
803:       assertFalse(node0.isDebugger());
804:       assertFalse(node0.isTry());
805:       assertFalse(node0.isRegExp());
806:       assertFalse(node0.isVoid());
807:       assertFalse(node0.isDefaultCase());
808:       assertFalse(node0.isEmpty());
809:       assertFalse(node0.isDelProp());
810:       assertFalse(node0.isIf());
811:       assertFalse(node0.isNull());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isFor());
814:       assertFalse(node0.isCatch());
815:       assertFalse(node0.isCall());
816:       assertFalse(node0.isName());
817:       assertFalse(node0.isSwitch());
818:       assertFalse(node0.isNew());
819:       assertEquals(39, node0.getType());
820:       assertFalse(node0.isHook());
821:       assertFalse(node0.isBlock());
822:       assertFalse(node0.isVar());
823:       assertFalse(node0.isCase());
824:       assertFalse(node0.isDo());
825:       assertFalse(node0.isAdd());
826:       assertFalse(node0.isParamList());
827:       assertFalse(node0.isGetterDef());
828:       assertEquals(39, node0.getLineno());
829:       assertFalse(node0.isLabel());
830:       assertFalse(node0.isAssignAdd());
831:       assertFalse(node0.isStringKey());
832:       assertFalse(node0.isArrayLit());
833:       assertEquals(0, node0.getChildCount());
834:       assertFalse(node0.isLabelName());
835:       assertFalse(node1.isHook());
836:       assertFalse(node1.isThrow());
837:       assertFalse(node1.isComma());
838:       assertFalse(node1.isThis());
839:       assertFalse(node1.isSwitch());
840:       assertFalse(node1.isBreak());
841:       assertFalse(node1.isFalse());
842:       assertFalse(node1.isInstanceOf());
843:       assertFalse(node1.isNE());
844:       assertEquals(0, node1.getCharno());
845:       assertEquals(131072, node1.getSourcePosition());
846:       assertFalse(node1.isInc());
847:       assertFalse(node1.isEmpty());
848:       assertFalse(node1.isIn());
849:       assertFalse(node1.isCast());
850:       assertFalse(node1.isGetElem());
851:       assertFalse(node1.isDelProp());
852:       assertFalse(node1.isFunction());
853:       assertFalse(node1.isVoid());
854:       assertFalse(node1.isTypeOf());
855:       assertFalse(node1.isExprResult());
856:       assertFalse(node1.isDec());
857:       assertFalse(node1.hasChildren());
858:       assertFalse(node1.isAssign());
859:       assertFalse(node1.isObjectLit());
860:       assertFalse(node1.isReturn());
861:       assertFalse(node1.isAnd());
862:       assertFalse(node1.isWhile());
863:       assertFalse(node1.isGetProp());
864:       assertFalse(node1.isDebugger());
865:       assertFalse(node1.isNot());
866:       assertFalse(node1.isString());
867:       assertFalse(node1.isCall());
868:       assertFalse(node1.isVar());
869:       assertFalse(node1.isBlock());
870:       assertFalse(node1.isName());
871:       assertFalse(node1.isStringKey());
872:       assertFalse(node1.isContinue());
873:       assertFalse(node1.isCatch());
874:       assertEquals(0, node1.getChildCount());
875:       assertFalse(node1.isDo());
876:       assertFalse(node1.isDefaultCase());
877:       assertFalse(node1.isAssignAdd());
878:       assertFalse(node1.isSetterDef());
879:       assertFalse(node1.isTrue());
880:       assertFalse(node1.isNull());
881:       assertFalse(node1.isNew());
882:       assertFalse(node1.isOr());
883:       assertFalse(node1.isAdd());
884:       assertFalse(node1.hasOneChild());
885:       assertEquals((-1122), node1.getType());
886:       assertFalse(node1.isArrayLit());
887:       assertFalse(node1.isFor());
888:       assertFalse(node1.isTry());
889:       assertFalse(node1.isLabelName());
890:       assertFalse(node1.isIf());
891:       assertFalse(node1.isRegExp());
892:       assertFalse(node1.isLabel());
893:       assertEquals(32, node1.getLineno());
894:       assertFalse(node1.isWith());
895:       assertFalse(node1.hasMoreThanOneChild());
896:       assertFalse(node1.isCase());
897:       assertFalse(node1.isParamList());
898:       assertFalse(node1.isScript());
899:       assertFalse(node1.isGetterDef());
900:       assertFalse(node1.isNumber());
901:       assertFalse(node0.equals((Object)node1));
902:       assertFalse(node0.equals((Object)node2));
903:       assertFalse(node1.equals((Object)node0));
904:       assertFalse(node1.equals((Object)node2));
905:       assertNotSame(node1, node2);
906:       assertEquals(47, Node.IS_DISPATCHER);
907:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
908:       assertEquals(56, Node.CHANGE_TIME);
909:       assertEquals(29, Node.JSDOC_INFO_PROP);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
912:       assertEquals(12, Node.COLUMN_BITS);
913:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
914:       assertEquals(2, Node.POST_FLAG);
915:       assertEquals(30, Node.VAR_ARGS_NAME);
916:       assertEquals(57, Node.LAST_PROP);
917:       assertEquals(15, Node.NO_SIDE_EFFECTS);
918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
919:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
920:       assertEquals(49, Node.DIRECT_EVAL);
921:       assertEquals(52, Node.LENGTH);
922:       assertEquals(53, Node.INPUT_ID);
923:       assertEquals(57, Node.REFLECTED_OBJECT);
924:       assertEquals(55, Node.INFERRED_FUNCTION);
925:       assertEquals(8, Node.FLAG_NO_THROWS);
926:       assertEquals(36, Node.QUOTED_PROP);
927:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
929:       assertEquals(40, Node.ORIGINALNAME_PROP);
930:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
931:       assertEquals(39, Node.EMPTY_BLOCK);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
934:       assertEquals(4095, Node.COLUMN_MASK);
935:       assertEquals(43, Node.IS_CONSTANT_NAME);
936:       assertEquals(1, Node.DECR_FLAG);
937:       assertEquals(32, Node.INCRDECR_PROP);
938:       assertEquals(46, Node.IS_NAMESPACE);
939:       assertEquals(54, Node.SLASH_V);
940:       assertEquals(51, Node.STATIC_SOURCE_FILE);
941:       assertEquals(50, Node.FREE_CALL);
942:       assertEquals(4095, Node.COLUMN_MASK);
943:       assertEquals(55, Node.INFERRED_FUNCTION);
944:       assertEquals(39, Node.EMPTY_BLOCK);
945:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(50, Node.FREE_CALL);
948:       assertEquals(43, Node.IS_CONSTANT_NAME);
949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
950:       assertEquals(8, Node.FLAG_NO_THROWS);
951:       assertEquals(57, Node.REFLECTED_OBJECT);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(52, Node.LENGTH);
954:       assertEquals(53, Node.INPUT_ID);
955:       assertEquals(40, Node.ORIGINALNAME_PROP);
956:       assertEquals(15, Node.NO_SIDE_EFFECTS);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(57, Node.LAST_PROP);
959:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
960:       assertEquals(2, Node.POST_FLAG);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(32, Node.INCRDECR_PROP);
963:       assertEquals(46, Node.IS_NAMESPACE);
964:       assertEquals(1, Node.DECR_FLAG);
965:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
966:       assertEquals(37, Node.OPT_ARG_NAME);
967:       assertEquals(29, Node.JSDOC_INFO_PROP);
968:       assertEquals(49, Node.DIRECT_EVAL);
969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
970:       assertEquals(56, Node.CHANGE_TIME);
971:       assertEquals(54, Node.SLASH_V);
972:       assertEquals(51, Node.STATIC_SOURCE_FILE);
973:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
976:       assertEquals(12, Node.COLUMN_BITS);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       
979:       Iterable<Node> iterable0 = node0.children();
980:       assertEquals(0, node0.getCharno());
981:       assertFalse(node0.isExprResult());
982:       assertFalse(node0.hasOneChild());
983:       assertFalse(node0.isObjectLit());
984:       assertFalse(node0.isNot());
985:       assertFalse(node0.isScript());
986:       assertFalse(node0.isComma());
987:       assertFalse(node0.isThis());
988:       assertFalse(node0.isGetProp());
989:       assertFalse(node0.isTypeOf());
990:       assertFalse(node0.isDec());
991:       assertFalse(node0.isOr());
992:       assertFalse(node0.isReturn());
993:       assertFalse(node0.hasChildren());
994:       assertFalse(node0.hasMoreThanOneChild());
995:       assertFalse(node0.isAssign());
996:       assertFalse(node0.isWith());
997:       assertFalse(node0.isBreak());
998:       assertFalse(node0.isInstanceOf());
999:       assertFalse(node0.isGetElem());
1000:       assertFalse(node0.isInc());
1001:       assertEquals(159744, node0.getSourcePosition());
1002:       assertFalse(node0.isWhile());
1003:       assertFalse(node0.isString());
1004:       assertTrue(node0.isNumber());
1005:       assertFalse(node0.isIn());
1006:       assertFalse(node0.isSetterDef());
1007:       assertFalse(node0.isThrow());
1008:       assertFalse(node0.isAnd());
1009:       assertFalse(node0.isContinue());
1010:       assertFalse(node0.isFalse());
1011:       assertFalse(node0.isCast());
1012:       assertFalse(node0.isTrue());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isDebugger());
1015:       assertFalse(node0.isTry());
1016:       assertFalse(node0.isRegExp());
1017:       assertFalse(node0.isVoid());
1018:       assertFalse(node0.isDefaultCase());
1019:       assertFalse(node0.isEmpty());
1020:       assertFalse(node0.isDelProp());
1021:       assertFalse(node0.isIf());
1022:       assertFalse(node0.isNull());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isFor());
1025:       assertFalse(node0.isCatch());
1026:       assertFalse(node0.isCall());
1027:       assertFalse(node0.isName());
1028:       assertFalse(node0.isSwitch());
1029:       assertFalse(node0.isNew());
1030:       assertEquals(39, node0.getType());
1031:       assertFalse(node0.isHook());
1032:       assertFalse(node0.isBlock());
1033:       assertFalse(node0.isVar());
1034:       assertFalse(node0.isCase());
1035:       assertFalse(node0.isDo());
1036:       assertFalse(node0.isAdd());
1037:       assertFalse(node0.isParamList());
1038:       assertFalse(node0.isGetterDef());
1039:       assertEquals(39, node0.getLineno());
1040:       assertFalse(node0.isLabel());
1041:       assertFalse(node0.isAssignAdd());
1042:       assertFalse(node0.isStringKey());
1043:       assertFalse(node0.isArrayLit());
1044:       assertEquals(0, node0.getChildCount());
1045:       assertFalse(node0.isLabelName());
1046:       assertFalse(node0.equals((Object)node1));
1047:       assertFalse(node0.equals((Object)node2));
1048:       assertEquals(47, Node.IS_DISPATCHER);
1049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1050:       assertEquals(56, Node.CHANGE_TIME);
1051:       assertEquals(29, Node.JSDOC_INFO_PROP);
1052:       assertEquals(37, Node.OPT_ARG_NAME);
1053:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1056:       assertEquals(2, Node.POST_FLAG);
1057:       assertEquals(30, Node.VAR_ARGS_NAME);
1058:       assertEquals(57, Node.LAST_PROP);
1059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1062:       assertEquals(49, Node.DIRECT_EVAL);
1063:       assertEquals(52, Node.LENGTH);
1064:       assertEquals(53, Node.INPUT_ID);
1065:       assertEquals(57, Node.REFLECTED_OBJECT);
1066:       assertEquals(55, Node.INFERRED_FUNCTION);
1067:       assertEquals(8, Node.FLAG_NO_THROWS);
1068:       assertEquals(36, Node.QUOTED_PROP);
1069:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(40, Node.ORIGINALNAME_PROP);
1072:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(48, Node.DIRECTIVES);
1075:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(43, Node.IS_CONSTANT_NAME);
1078:       assertEquals(1, Node.DECR_FLAG);
1079:       assertEquals(32, Node.INCRDECR_PROP);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(54, Node.SLASH_V);
1082:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1083:       assertEquals(50, Node.FREE_CALL);
1084:       assertNotNull(iterable0);
1085:       assertFalse(iterable0.contains(node2));
1086:       
1087:       node1.putIntProp(57, 38);
1088:       assertFalse(node1.isHook());
1089:       assertFalse(node1.isThrow());
1090:       assertFalse(node1.isComma());
1091:       assertFalse(node1.isThis());
1092:       assertFalse(node1.isSwitch());
1093:       assertFalse(node1.isBreak());
1094:       assertFalse(node1.isFalse());
1095:       assertFalse(node1.isInstanceOf());
1096:       assertFalse(node1.isNE());
1097:       assertEquals(0, node1.getCharno());
1098:       assertEquals(131072, node1.getSourcePosition());
1099:       assertFalse(node1.isInc());
1100:       assertFalse(node1.isEmpty());
1101:       assertFalse(node1.isIn());
1102:       assertFalse(node1.isCast());
1103:       assertFalse(node1.isGetElem());
1104:       assertFalse(node1.isDelProp());
1105:       assertFalse(node1.isFunction());
1106:       assertFalse(node1.isVoid());
1107:       assertFalse(node1.isTypeOf());
1108:       assertFalse(node1.isExprResult());
1109:       assertFalse(node1.isDec());
1110:       assertFalse(node1.hasChildren());
1111:       assertFalse(node1.isAssign());
1112:       assertFalse(node1.isObjectLit());
1113:       assertFalse(node1.isReturn());
1114:       assertFalse(node1.isAnd());
1115:       assertFalse(node1.isWhile());
1116:       assertFalse(node1.isGetProp());
1117:       assertFalse(node1.isDebugger());
1118:       assertFalse(node1.isNot());
1119:       assertFalse(node1.isString());
1120:       assertFalse(node1.isCall());
1121:       assertFalse(node1.isVar());
1122:       assertFalse(node1.isBlock());
1123:       assertFalse(node1.isName());
1124:       assertFalse(node1.isStringKey());
1125:       assertFalse(node1.isContinue());
1126:       assertFalse(node1.isCatch());
1127:       assertEquals(0, node1.getChildCount());
1128:       assertFalse(node1.isDo());
1129:       assertFalse(node1.isDefaultCase());
1130:       assertFalse(node1.isAssignAdd());
1131:       assertFalse(node1.isSetterDef());
1132:       assertFalse(node1.isTrue());
1133:       assertFalse(node1.isNull());
1134:       assertFalse(node1.isNew());
1135:       assertFalse(node1.isOr());
1136:       assertFalse(node1.isAdd());
1137:       assertFalse(node1.hasOneChild());
1138:       assertEquals((-1122), node1.getType());
1139:       assertFalse(node1.isArrayLit());
1140:       assertFalse(node1.isFor());
1141:       assertFalse(node1.isTry());
1142:       assertFalse(node1.isLabelName());
1143:       assertFalse(node1.isIf());
1144:       assertFalse(node1.isRegExp());
1145:       assertFalse(node1.isLabel());
1146:       assertEquals(32, node1.getLineno());
1147:       assertFalse(node1.isWith());
1148:       assertFalse(node1.hasMoreThanOneChild());
1149:       assertFalse(node1.isCase());
1150:       assertFalse(node1.isParamList());
1151:       assertFalse(node1.isScript());
1152:       assertFalse(node1.isGetterDef());
1153:       assertFalse(node1.isNumber());
1154:       assertFalse(node1.equals((Object)node0));
1155:       assertFalse(node1.equals((Object)node2));
1156:       assertNotSame(node1, node2);
1157:       assertEquals(4095, Node.COLUMN_MASK);
1158:       assertEquals(55, Node.INFERRED_FUNCTION);
1159:       assertEquals(39, Node.EMPTY_BLOCK);
1160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1161:       assertEquals(48, Node.DIRECTIVES);
1162:       assertEquals(50, Node.FREE_CALL);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(57, Node.REFLECTED_OBJECT);
1167:       assertEquals(36, Node.QUOTED_PROP);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(53, Node.INPUT_ID);
1170:       assertEquals(40, Node.ORIGINALNAME_PROP);
1171:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1172:       assertEquals(30, Node.VAR_ARGS_NAME);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1175:       assertEquals(2, Node.POST_FLAG);
1176:       assertEquals(47, Node.IS_DISPATCHER);
1177:       assertEquals(32, Node.INCRDECR_PROP);
1178:       assertEquals(46, Node.IS_NAMESPACE);
1179:       assertEquals(1, Node.DECR_FLAG);
1180:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(29, Node.JSDOC_INFO_PROP);
1183:       assertEquals(49, Node.DIRECT_EVAL);
1184:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1185:       assertEquals(56, Node.CHANGE_TIME);
1186:       assertEquals(54, Node.SLASH_V);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1191:       assertEquals(12, Node.COLUMN_BITS);
1192:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1193:       
1194:       Node node3 = new Node((-2115), node2, node1, node2, (-377), 103);
1195:       assertFalse(node1.isHook());
1196:       assertFalse(node1.isThrow());
1197:       assertFalse(node1.isComma());
1198:       assertFalse(node1.isThis());
1199:       assertFalse(node1.isSwitch());
1200:       assertFalse(node1.isBreak());
1201:       assertFalse(node1.isFalse());
1202:       assertFalse(node1.isInstanceOf());
1203:       assertFalse(node1.isNE());
1204:       assertEquals(0, node1.getCharno());
1205:       assertEquals(131072, node1.getSourcePosition());
1206:       assertFalse(node1.isInc());
1207:       assertFalse(node1.isEmpty());
1208:       assertFalse(node1.isIn());
1209:       assertFalse(node1.isCast());
1210:       assertFalse(node1.isGetElem());
1211:       assertFalse(node1.isDelProp());
1212:       assertFalse(node1.isFunction());
1213:       assertFalse(node1.isVoid());
1214:       assertFalse(node1.isTypeOf());
1215:       assertFalse(node1.isExprResult());
1216:       assertFalse(node1.isDec());
1217:       assertFalse(node1.hasChildren());
1218:       assertFalse(node1.isAssign());
1219:       assertFalse(node1.isObjectLit());
1220:       assertFalse(node1.isReturn());
1221:       assertFalse(node1.isAnd());
1222:       assertFalse(node1.isWhile());
1223:       assertFalse(node1.isGetProp());
1224:       assertFalse(node1.isDebugger());
1225:       assertFalse(node1.isNot());
1226:       assertFalse(node1.isString());
1227:       assertFalse(node1.isCall());
1228:       assertFalse(node1.isVar());
1229:       assertFalse(node1.isBlock());
1230:       assertFalse(node1.isName());
1231:       assertFalse(node1.isStringKey());
1232:       assertFalse(node1.isContinue());
1233:       assertFalse(node1.isCatch());
1234:       assertEquals(0, node1.getChildCount());
1235:       assertFalse(node1.isDo());
1236:       assertFalse(node1.isDefaultCase());
1237:       assertFalse(node1.isAssignAdd());
1238:       assertFalse(node1.isSetterDef());
1239:       assertFalse(node1.isTrue());
1240:       assertFalse(node1.isNull());
1241:       assertFalse(node1.isNew());
1242:       assertFalse(node1.isOr());
1243:       assertFalse(node1.isAdd());
1244:       assertFalse(node1.hasOneChild());
1245:       assertEquals((-1122), node1.getType());
1246:       assertFalse(node1.isArrayLit());
1247:       assertFalse(node1.isFor());
1248:       assertFalse(node1.isTry());
1249:       assertFalse(node1.isLabelName());
1250:       assertFalse(node1.isIf());
1251:       assertFalse(node1.isRegExp());
1252:       assertFalse(node1.isLabel());
1253:       assertEquals(32, node1.getLineno());
1254:       assertFalse(node1.isWith());
1255:       assertFalse(node1.hasMoreThanOneChild());
1256:       assertFalse(node1.isCase());
1257:       assertFalse(node1.isParamList());
1258:       assertFalse(node1.isScript());
1259:       assertFalse(node1.isGetterDef());
1260:       assertFalse(node1.isNumber());
1261:       assertFalse(node2.isStringKey());
1262:       assertFalse(node2.isVar());
1263:       assertFalse(node2.isCall());
1264:       assertFalse(node2.isName());
1265:       assertFalse(node2.isBlock());
1266:       assertEquals(0, node2.getChildCount());
1267:       assertFalse(node2.isCatch());
1268:       assertFalse(node2.isDefaultCase());
1269:       assertEquals((-1), node2.getLineno());
1270:       assertFalse(node2.isAssignAdd());
1271:       assertFalse(node2.isDo());
1272:       assertFalse(node2.isNew());
1273:       assertFalse(node2.isSetterDef());
1274:       assertFalse(node2.isTrue());
1275:       assertFalse(node2.isNull());
1276:       assertFalse(node2.isAdd());
1277:       assertFalse(node2.isOr());
1278:       assertFalse(node2.isCast());
1279:       assertFalse(node2.isGetElem());
1280:       assertFalse(node2.isDelProp());
1281:       assertFalse(node2.isVoid());
1282:       assertFalse(node2.isReturn());
1283:       assertFalse(node2.isExprResult());
1284:       assertFalse(node2.isDec());
1285:       assertFalse(node2.hasChildren());
1286:       assertFalse(node2.isAssign());
1287:       assertFalse(node2.isFunction());
1288:       assertFalse(node2.isTypeOf());
1289:       assertFalse(node2.isAnd());
1290:       assertFalse(node2.isContinue());
1291:       assertFalse(node2.isWhile());
1292:       assertFalse(node2.isGetProp());
1293:       assertFalse(node2.isDebugger());
1294:       assertEquals((-1), node2.getSourcePosition());
1295:       assertFalse(node2.isString());
1296:       assertFalse(node2.isNot());
1297:       assertFalse(node2.isObjectLit());
1298:       assertFalse(node2.isThrow());
1299:       assertFalse(node2.isFalse());
1300:       assertFalse(node2.isBreak());
1301:       assertFalse(node2.isComma());
1302:       assertFalse(node2.isThis());
1303:       assertFalse(node2.isHook());
1304:       assertFalse(node2.isInstanceOf());
1305:       assertEquals(46, node2.getType());
1306:       assertFalse(node2.isNE());
1307:       assertFalse(node2.isInc());
1308:       assertFalse(node2.isIn());
1309:       assertFalse(node2.isEmpty());
1310:       assertFalse(node2.isFor());
1311:       assertFalse(node2.isIf());
1312:       assertFalse(node2.hasOneChild());
1313:       assertFalse(node2.isArrayLit());
1314:       assertFalse(node2.isTry());
1315:       assertFalse(node2.isLabelName());
1316:       assertFalse(node2.isLabel());
1317:       assertFalse(node2.isWith());
1318:       assertFalse(node2.hasMoreThanOneChild());
1319:       assertFalse(node2.isRegExp());
1320:       assertFalse(node2.isCase());
1321:       assertFalse(node2.isSwitch());
1322:       assertEquals((-1), node2.getCharno());
1323:       assertFalse(node2.isParamList());
1324:       assertFalse(node2.isScript());
1325:       assertFalse(node2.isNumber());
1326:       assertFalse(node2.isGetterDef());
1327:       assertFalse(node3.isVar());
1328:       assertFalse(node3.isStringKey());
1329:       assertFalse(node3.isCall());
1330:       assertFalse(node3.isSetterDef());
1331:       assertFalse(node3.isBlock());
1332:       assertFalse(node3.isAdd());
1333:       assertFalse(node3.isDo());
1334:       assertFalse(node3.isWhile());
1335:       assertFalse(node3.isNew());
1336:       assertFalse(node3.isContinue());
1337:       assertFalse(node3.isLabel());
1338:       assertEquals((-1), node3.getSourcePosition());
1339:       assertFalse(node3.isDebugger());
1340:       assertFalse(node3.isParamList());
1341:       assertFalse(node3.isLabelName());
1342:       assertFalse(node3.isArrayLit());
1343:       assertFalse(node3.isGetElem());
1344:       assertFalse(node3.isEmpty());
1345:       assertFalse(node3.isAssign());
1346:       assertTrue(node3.hasOneChild());
1347:       assertFalse(node3.isDec());
1348:       assertFalse(node3.isTypeOf());
1349:       assertFalse(node3.isAssignAdd());
1350:       assertFalse(node3.isDefaultCase());
1351:       assertFalse(node3.isReturn());
1352:       assertFalse(node3.isOr());
1353:       assertFalse(node3.isBreak());
1354:       assertFalse(node3.isTrue());
1355:       assertFalse(node3.isExprResult());
1356:       assertFalse(node3.isNull());
1357:       assertFalse(node3.isVoid());
1358:       assertFalse(node3.isDelProp());
1359:       assertFalse(node3.isName());
1360:       assertFalse(node3.isHook());
1361:       assertFalse(node3.isThrow());
1362:       assertFalse(node3.isFalse());
1363:       assertFalse(node3.isComma());
1364:       assertFalse(node3.isThis());
1365:       assertFalse(node3.isGetProp());
1366:       assertFalse(node3.isInc());
1367:       assertFalse(node3.isCase());
1368:       assertFalse(node3.isAnd());
1369:       assertFalse(node3.isNot());
1370:       assertFalse(node3.isString());
1371:       assertFalse(node3.isObjectLit());
1372:       assertFalse(node3.isSwitch());
1373:       assertEquals((-1), node3.getCharno());
1374:       assertFalse(node3.isCast());
1375:       assertEquals((-2115), node3.getType());
1376:       assertFalse(node3.isFor());
1377:       assertFalse(node3.isNumber());
1378:       assertFalse(node3.isGetterDef());
1379:       assertFalse(node3.isFunction());
1380:       assertFalse(node3.isScript());
1381:       assertFalse(node3.isTry());
1382:       assertFalse(node3.isCatch());
1383:       assertFalse(node3.hasMoreThanOneChild());
1384:       assertFalse(node3.isInstanceOf());
1385:       assertTrue(node3.hasChildren());
1386:       assertFalse(node3.isWith());
1387:       assertEquals(1, node3.getChildCount());
1388:       assertFalse(node3.isIn());
1389:       assertFalse(node3.isRegExp());
1390:       assertFalse(node3.isNE());
1391:       assertEquals((-1), node3.getLineno());
1392:       assertFalse(node3.isIf());
1393:       assertFalse(node1.equals((Object)node0));
1394:       assertFalse(node1.equals((Object)node2));
1395:       assertFalse(node2.equals((Object)node0));
1396:       assertFalse(node2.equals((Object)node1));
1397:       assertFalse(node3.equals((Object)node0));
1398:       assertFalse(node3.equals((Object)node2));
1399:       assertFalse(node3.equals((Object)node1));
1400:       assertEquals(4095, Node.COLUMN_MASK);
1401:       assertEquals(55, Node.INFERRED_FUNCTION);
1402:       assertEquals(39, Node.EMPTY_BLOCK);
1403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1404:       assertEquals(48, Node.DIRECTIVES);
1405:       assertEquals(50, Node.FREE_CALL);
1406:       assertEquals(43, Node.IS_CONSTANT_NAME);
1407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1408:       assertEquals(8, Node.FLAG_NO_THROWS);
1409:       assertEquals(57, Node.REFLECTED_OBJECT);
1410:       assertEquals(36, Node.QUOTED_PROP);
1411:       assertEquals(52, Node.LENGTH);
1412:       assertEquals(53, Node.INPUT_ID);
1413:       assertEquals(40, Node.ORIGINALNAME_PROP);
1414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1415:       assertEquals(30, Node.VAR_ARGS_NAME);
1416:       assertEquals(57, Node.LAST_PROP);
1417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1418:       assertEquals(2, Node.POST_FLAG);
1419:       assertEquals(47, Node.IS_DISPATCHER);
1420:       assertEquals(32, Node.INCRDECR_PROP);
1421:       assertEquals(46, Node.IS_NAMESPACE);
1422:       assertEquals(1, Node.DECR_FLAG);
1423:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1424:       assertEquals(37, Node.OPT_ARG_NAME);
1425:       assertEquals(29, Node.JSDOC_INFO_PROP);
1426:       assertEquals(49, Node.DIRECT_EVAL);
1427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1428:       assertEquals(56, Node.CHANGE_TIME);
1429:       assertEquals(54, Node.SLASH_V);
1430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1434:       assertEquals(12, Node.COLUMN_BITS);
1435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1436:       assertEquals(4095, Node.COLUMN_MASK);
1437:       assertEquals(48, Node.DIRECTIVES);
1438:       assertEquals(55, Node.INFERRED_FUNCTION);
1439:       assertEquals(39, Node.EMPTY_BLOCK);
1440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1441:       assertEquals(43, Node.IS_CONSTANT_NAME);
1442:       assertEquals(36, Node.QUOTED_PROP);
1443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1444:       assertEquals(8, Node.FLAG_NO_THROWS);
1445:       assertEquals(50, Node.FREE_CALL);
1446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1447:       assertEquals(57, Node.REFLECTED_OBJECT);
1448:       assertEquals(52, Node.LENGTH);
1449:       assertEquals(29, Node.JSDOC_INFO_PROP);
1450:       assertEquals(40, Node.ORIGINALNAME_PROP);
1451:       assertEquals(53, Node.INPUT_ID);
1452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1453:       assertEquals(57, Node.LAST_PROP);
1454:       assertEquals(47, Node.IS_DISPATCHER);
1455:       assertEquals(2, Node.POST_FLAG);
1456:       assertEquals(30, Node.VAR_ARGS_NAME);
1457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1459:       assertEquals(32, Node.INCRDECR_PROP);
1460:       assertEquals(1, Node.DECR_FLAG);
1461:       assertEquals(37, Node.OPT_ARG_NAME);
1462:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1463:       assertEquals(56, Node.CHANGE_TIME);
1464:       assertEquals(49, Node.DIRECT_EVAL);
1465:       assertEquals(54, Node.SLASH_V);
1466:       assertEquals(46, Node.IS_NAMESPACE);
1467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(12, Node.COLUMN_BITS);
1472:       assertEquals(48, Node.DIRECTIVES);
1473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1474:       assertEquals(4095, Node.COLUMN_MASK);
1475:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1476:       assertEquals(40, Node.ORIGINALNAME_PROP);
1477:       assertEquals(43, Node.IS_CONSTANT_NAME);
1478:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1479:       assertEquals(54, Node.SLASH_V);
1480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1481:       assertEquals(1, Node.DECR_FLAG);
1482:       assertEquals(50, Node.FREE_CALL);
1483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1484:       assertEquals(32, Node.INCRDECR_PROP);
1485:       assertEquals(2, Node.POST_FLAG);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(56, Node.CHANGE_TIME);
1488:       assertEquals(47, Node.IS_DISPATCHER);
1489:       assertEquals(12, Node.COLUMN_BITS);
1490:       assertEquals(46, Node.IS_NAMESPACE);
1491:       assertEquals(30, Node.VAR_ARGS_NAME);
1492:       assertEquals(49, Node.DIRECT_EVAL);
1493:       assertEquals(37, Node.OPT_ARG_NAME);
1494:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1495:       assertEquals(52, Node.LENGTH);
1496:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1497:       assertEquals(36, Node.QUOTED_PROP);
1498:       assertEquals(57, Node.REFLECTED_OBJECT);
1499:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1500:       assertEquals(57, Node.LAST_PROP);
1501:       assertEquals(55, Node.INFERRED_FUNCTION);
1502:       assertEquals(8, Node.FLAG_NO_THROWS);
1503:       assertEquals(39, Node.EMPTY_BLOCK);
1504:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1505:       assertEquals(29, Node.JSDOC_INFO_PROP);
1506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1507:       assertEquals(53, Node.INPUT_ID);
1508:       assertNotNull(node3);
1509:       
1510:       // Undeclared exception!
1511:       try { 
1512:         node1.copyInformationFromForTree((Node) null);
1513:         fail("Expecting exception: NullPointerException");
1514:       
1515:       } catch(NullPointerException e) {
1516:          //
1517:          // no message in exception (getMessage() returned null)
1518:          //
1519:          verifyException("com.google.javascript.rhino.Node", e);
1520:       }
1521:   }
1522: }
RegularFileObject[/tmp/EvoSuite_47_1629223336012/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_47_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_47_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_47_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:16.431 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);

String string0 = "UNKNOWN";
Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node1);

Object object0 = node1.getProp(0);
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNull(object0);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertEquals(46, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node2);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node0.setLineno(39);
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.putProp(4095, (Object) null);
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

int int0 = node0.getIndexOfChild(node1);
assertEquals((-1), int0);
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));

node1.putIntProp(57, 38);
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node3 = new Node((-2115), node2, node1, node2, (-377), 103);
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertEquals(46, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isSetterDef());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isNew());
assertFalse(node3.isContinue());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssign());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isString());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCast());
assertEquals((-2115), node3.getType());
assertFalse(node3.isFor());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertTrue(node3.hasChildren());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isIn());
assertFalse(node3.isRegExp());
assertFalse(node3.isNE());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node3);

node1.copyInformationFromForTree((Node) null);

[MASTER] 18:02:17.391 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_54_1629223337358/com/google/javascript/rhino/Node_54_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_54_1629223337358/com/google/javascript/rhino/Node_54_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:17.391 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:17.391 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:17.392 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 231
[MASTER] 18:02:17.392 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_54_1629223337358/com/google/javascript/rhino/Node_54_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_54_tmp__ESTest extends Node_54_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       String string0 = "np";
22:       Node node0 = new Node((-1080));
23:       assertFalse(node0.isFalse());
24:       assertFalse(node0.isThrow());
25:       assertFalse(node0.isBreak());
26:       assertEquals((-1), node0.getCharno());
27:       assertFalse(node0.isGetProp());
28:       assertFalse(node0.isInc());
29:       assertFalse(node0.isObjectLit());
30:       assertFalse(node0.isAnd());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isFor());
33:       assertFalse(node0.hasOneChild());
34:       assertFalse(node0.isIf());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isTry());
37:       assertFalse(node0.isLabelName());
38:       assertFalse(node0.isNE());
39:       assertFalse(node0.isScript());
40:       assertFalse(node0.isNumber());
41:       assertFalse(node0.isIn());
42:       assertFalse(node0.isGetterDef());
43:       assertFalse(node0.isCase());
44:       assertFalse(node0.isCatch());
45:       assertEquals((-1080), node0.getType());
46:       assertEquals((-1), node0.getLineno());
47:       assertFalse(node0.isBlock());
48:       assertFalse(node0.isThis());
49:       assertFalse(node0.isHook());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isWith());
52:       assertFalse(node0.hasMoreThanOneChild());
53:       assertFalse(node0.isRegExp());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isVar());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isSetterDef());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isAdd());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isContinue());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.isFunction());
69:       assertEquals(0, node0.getChildCount());
70:       assertFalse(node0.isGetElem());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isCast());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isDebugger());
75:       assertFalse(node0.isTrue());
76:       assertEquals((-1), node0.getSourcePosition());
77:       assertFalse(node0.isNot());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isExprResult());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isAssign());
89:       assertEquals(4095, Node.COLUMN_MASK);
90:       assertEquals(39, Node.EMPTY_BLOCK);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
105:       assertEquals(57, Node.LAST_PROP);
106:       assertEquals(47, Node.IS_DISPATCHER);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(56, Node.CHANGE_TIME);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(8, Node.FLAG_NO_THROWS);
122:       assertEquals(48, Node.DIRECTIVES);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
125:       assertNotNull(node0);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(node0.isFalse());
129:       assertFalse(node0.isThrow());
130:       assertFalse(node0.isBreak());
131:       assertEquals((-1), node0.getCharno());
132:       assertFalse(node0.isGetProp());
133:       assertFalse(node0.isInc());
134:       assertFalse(node0.isObjectLit());
135:       assertFalse(node0.isAnd());
136:       assertFalse(node0.isSwitch());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.hasOneChild());
139:       assertFalse(node0.isIf());
140:       assertFalse(node0.isArrayLit());
141:       assertFalse(node0.isTry());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isScript());
145:       assertFalse(node0.isNumber());
146:       assertFalse(node0.isIn());
147:       assertFalse(node0.isGetterDef());
148:       assertFalse(node0.isCase());
149:       assertFalse(node0.isCatch());
150:       assertEquals((-1080), node0.getType());
151:       assertEquals((-1), node0.getLineno());
152:       assertFalse(node0.isBlock());
153:       assertFalse(node0.isThis());
154:       assertFalse(node0.isHook());
155:       assertFalse(node0.isInstanceOf());
156:       assertFalse(node0.isWith());
157:       assertFalse(node0.hasMoreThanOneChild());
158:       assertFalse(node0.isRegExp());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isVar());
163:       assertFalse(node0.isNew());
164:       assertFalse(node0.isSetterDef());
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isAdd());
167:       assertFalse(node0.isNull());
168:       assertFalse(node0.isContinue());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isDo());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isAssignAdd());
173:       assertFalse(node0.isFunction());
174:       assertEquals(0, node0.getChildCount());
175:       assertFalse(node0.isGetElem());
176:       assertFalse(node0.isEmpty());
177:       assertFalse(node0.isCast());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isDebugger());
180:       assertFalse(node0.isTrue());
181:       assertEquals((-1), node0.getSourcePosition());
182:       assertFalse(node0.isNot());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isString());
185:       assertFalse(node0.isWhile());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isReturn());
188:       assertFalse(node0.isExprResult());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isDec());
191:       assertFalse(node0.hasChildren());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isAssign());
194:       assertEquals(4095, Node.COLUMN_MASK);
195:       assertEquals(39, Node.EMPTY_BLOCK);
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(40, Node.ORIGINALNAME_PROP);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(50, Node.FREE_CALL);
203:       assertEquals(46, Node.IS_NAMESPACE);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
206:       assertEquals(32, Node.INCRDECR_PROP);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(57, Node.LAST_PROP);
211:       assertEquals(47, Node.IS_DISPATCHER);
212:       assertEquals(2, Node.POST_FLAG);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(12, Node.COLUMN_BITS);
216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(29, Node.JSDOC_INFO_PROP);
222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(8, Node.FLAG_NO_THROWS);
227:       assertEquals(48, Node.DIRECTIVES);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
230:       assertNotNull(iterable0);
231:       assertFalse(iterable0.contains(node0));
232:       
233:       Node node1 = null;
234:       node0.putIntProp((-862048943), (-852));
235:       assertFalse(node0.isFalse());
236:       assertFalse(node0.isThrow());
237:       assertFalse(node0.isBreak());
238:       assertEquals((-1), node0.getCharno());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isInc());
241:       assertFalse(node0.isObjectLit());
242:       assertFalse(node0.isAnd());
243:       assertFalse(node0.isSwitch());
244:       assertFalse(node0.isFor());
245:       assertFalse(node0.hasOneChild());
246:       assertFalse(node0.isIf());
247:       assertFalse(node0.isArrayLit());
248:       assertFalse(node0.isTry());
249:       assertFalse(node0.isLabelName());
250:       assertFalse(node0.isNE());
251:       assertFalse(node0.isScript());
252:       assertFalse(node0.isNumber());
253:       assertFalse(node0.isIn());
254:       assertFalse(node0.isGetterDef());
255:       assertFalse(node0.isCase());
256:       assertFalse(node0.isCatch());
257:       assertEquals((-1080), node0.getType());
258:       assertEquals((-1), node0.getLineno());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isThis());
261:       assertFalse(node0.isHook());
262:       assertFalse(node0.isInstanceOf());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.hasMoreThanOneChild());
265:       assertFalse(node0.isRegExp());
266:       assertFalse(node0.isName());
267:       assertFalse(node0.isStringKey());
268:       assertFalse(node0.isCall());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isNew());
271:       assertFalse(node0.isSetterDef());
272:       assertFalse(node0.isParamList());
273:       assertFalse(node0.isAdd());
274:       assertFalse(node0.isNull());
275:       assertFalse(node0.isContinue());
276:       assertFalse(node0.isDefaultCase());
277:       assertFalse(node0.isDo());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.isFunction());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.isEmpty());
284:       assertFalse(node0.isCast());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isDebugger());
287:       assertFalse(node0.isTrue());
288:       assertEquals((-1), node0.getSourcePosition());
289:       assertFalse(node0.isNot());
290:       assertFalse(node0.isOr());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isReturn());
295:       assertFalse(node0.isExprResult());
296:       assertFalse(node0.isTypeOf());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.hasChildren());
299:       assertFalse(node0.isComma());
300:       assertFalse(node0.isAssign());
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
307:       assertEquals(40, Node.ORIGINALNAME_PROP);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(50, Node.FREE_CALL);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(54, Node.SLASH_V);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(32, Node.INCRDECR_PROP);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
316:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
317:       assertEquals(57, Node.LAST_PROP);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
322:       assertEquals(12, Node.COLUMN_BITS);
323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(53, Node.INPUT_ID);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(52, Node.LENGTH);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(37, Node.OPT_ARG_NAME);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertEquals(48, Node.DIRECTIVES);
335:       assertEquals(49, Node.DIRECT_EVAL);
336:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
337:       
338:       Node node2 = null;
339:       try {
340:         node2 = new Node(4095, node0, node0, (Node) null, 18, 46);
341:         fail("Expecting exception: NullPointerException");
342:       
343:       } catch(NullPointerException e) {
344:          //
345:          // no message in exception (getMessage() returned null)
346:          //
347:          verifyException("com.google.javascript.rhino.Node", e);
348:       }
349:   }
350: }
RegularFileObject[/tmp/EvoSuite_54_1629223337358/com/google/javascript/rhino/Node_54_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_54_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_54_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_54_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:17.395 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "np";
Node node0 = new Node((-1080));
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertEquals((-1080), node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertEquals((-1080), node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

Node node1 = null;
node0.putIntProp((-862048943), (-852));
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isCatch());
assertEquals((-1080), node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node2 = new Node(4095, node0, node0, (Node) null, 18, 46);

[MASTER] 18:02:20.065 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1629223339813/com/google/javascript/rhino/Node_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1629223339813/com/google/javascript/rhino/Node_67_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:20.065 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:20.065 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:20.067 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1092
[MASTER] 18:02:20.069 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1629223339813/com/google/javascript/rhino/Node_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.NoObjectType;
17: import java.util.Iterator;
18: import java.util.LinkedList;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Node_67_tmp__ESTest extends Node_67_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Node node0 = Node.newNumber(1.0);
30:       assertFalse(node0.isBlock());
31:       assertFalse(node0.isAdd());
32:       assertEquals(39, node0.getType());
33:       assertFalse(node0.isVar());
34:       assertFalse(node0.isWhile());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.isAssignAdd());
38:       assertFalse(node0.isParamList());
39:       assertEquals(0, node0.getChildCount());
40:       assertFalse(node0.isLabel());
41:       assertEquals((-1), node0.getSourcePosition());
42:       assertFalse(node0.isContinue());
43:       assertFalse(node0.isCast());
44:       assertFalse(node0.isStringKey());
45:       assertFalse(node0.isLabelName());
46:       assertFalse(node0.isVoid());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isExprResult());
49:       assertFalse(node0.isNot());
50:       assertFalse(node0.isDebugger());
51:       assertFalse(node0.isObjectLit());
52:       assertFalse(node0.isEmpty());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.hasChildren());
55:       assertFalse(node0.isTypeOf());
56:       assertFalse(node0.isReturn());
57:       assertFalse(node0.isNull());
58:       assertFalse(node0.isAssign());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isDec());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isBreak());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isHook());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isCase());
74:       assertTrue(node0.isNumber());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isFalse());
79:       assertFalse(node0.isArrayLit());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isRegExp());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.isTry());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isSetterDef());
87:       assertFalse(node0.isThis());
88:       assertFalse(node0.isNE());
89:       assertFalse(node0.isIn());
90:       assertFalse(node0.isCatch());
91:       assertFalse(node0.isWith());
92:       assertFalse(node0.hasMoreThanOneChild());
93:       assertFalse(node0.isInstanceOf());
94:       assertFalse(node0.isIf());
95:       assertEquals((-1), node0.getLineno());
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(40, Node.ORIGINALNAME_PROP);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(32, Node.INCRDECR_PROP);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(57, Node.REFLECTED_OBJECT);
124:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
125:       assertEquals(8, Node.FLAG_NO_THROWS);
126:       assertEquals(39, Node.EMPTY_BLOCK);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(55, Node.INFERRED_FUNCTION);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(52, Node.LENGTH);
132:       assertNotNull(node0);
133:       
134:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
135:       assertFalse(node1.isTypeOf());
136:       assertFalse(node1.isAssignAdd());
137:       assertFalse(node1.isNumber());
138:       assertEquals(32, node1.getLineno());
139:       assertFalse(node1.isGetElem());
140:       assertFalse(node1.isLabelName());
141:       assertFalse(node1.isOr());
142:       assertFalse(node1.isExprResult());
143:       assertFalse(node1.hasOneChild());
144:       assertFalse(node1.isScript());
145:       assertFalse(node1.isCall());
146:       assertFalse(node1.isAssign());
147:       assertFalse(node1.isWith());
148:       assertFalse(node1.hasMoreThanOneChild());
149:       assertFalse(node1.hasChildren());
150:       assertFalse(node1.isWhile());
151:       assertFalse(node1.isDec());
152:       assertFalse(node1.isReturn());
153:       assertFalse(node1.isBlock());
154:       assertFalse(node1.isComma());
155:       assertFalse(node1.isParamList());
156:       assertFalse(node1.isBreak());
157:       assertFalse(node1.isStringKey());
158:       assertFalse(node1.isName());
159:       assertFalse(node1.isNull());
160:       assertFalse(node1.isNew());
161:       assertFalse(node1.isDefaultCase());
162:       assertFalse(node1.isSwitch());
163:       assertEquals((-1122), node1.getType());
164:       assertFalse(node1.isAdd());
165:       assertFalse(node1.isArrayLit());
166:       assertFalse(node1.isDo());
167:       assertEquals(0, node1.getChildCount());
168:       assertFalse(node1.isLabel());
169:       assertFalse(node1.isVar());
170:       assertFalse(node1.isNE());
171:       assertFalse(node1.isDelProp());
172:       assertFalse(node1.isIn());
173:       assertFalse(node1.isEmpty());
174:       assertFalse(node1.isGetterDef());
175:       assertFalse(node1.isIf());
176:       assertFalse(node1.isTrue());
177:       assertFalse(node1.isVoid());
178:       assertFalse(node1.isDebugger());
179:       assertFalse(node1.isTry());
180:       assertFalse(node1.isRegExp());
181:       assertFalse(node1.isString());
182:       assertFalse(node1.isCase());
183:       assertFalse(node1.isCatch());
184:       assertFalse(node1.isFor());
185:       assertFalse(node1.isHook());
186:       assertFalse(node1.isThis());
187:       assertEquals(131072, node1.getSourcePosition());
188:       assertFalse(node1.isInstanceOf());
189:       assertFalse(node1.isGetProp());
190:       assertFalse(node1.isSetterDef());
191:       assertFalse(node1.isObjectLit());
192:       assertFalse(node1.isAnd());
193:       assertFalse(node1.isNot());
194:       assertEquals(0, node1.getCharno());
195:       assertFalse(node1.isFunction());
196:       assertFalse(node1.isInc());
197:       assertFalse(node1.isContinue());
198:       assertFalse(node1.isThrow());
199:       assertFalse(node1.isCast());
200:       assertFalse(node1.isFalse());
201:       assertFalse(node1.equals((Object)node0));
202:       assertEquals(30, Node.VAR_ARGS_NAME);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(32, Node.INCRDECR_PROP);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(57, Node.LAST_PROP);
210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
211:       assertEquals(56, Node.CHANGE_TIME);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(48, Node.DIRECTIVES);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(43, Node.IS_CONSTANT_NAME);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(4095, Node.COLUMN_MASK);
227:       assertEquals(53, Node.INPUT_ID);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(47, Node.IS_DISPATCHER);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(50, Node.FREE_CALL);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(51, Node.STATIC_SOURCE_FILE);
237:       assertEquals(54, Node.SLASH_V);
238:       assertNotNull(node1);
239:       
240:       Object object0 = node1.getProp(0);
241:       assertFalse(node1.isTypeOf());
242:       assertFalse(node1.isAssignAdd());
243:       assertFalse(node1.isNumber());
244:       assertEquals(32, node1.getLineno());
245:       assertFalse(node1.isGetElem());
246:       assertFalse(node1.isLabelName());
247:       assertFalse(node1.isOr());
248:       assertFalse(node1.isExprResult());
249:       assertFalse(node1.hasOneChild());
250:       assertFalse(node1.isScript());
251:       assertFalse(node1.isCall());
252:       assertFalse(node1.isAssign());
253:       assertFalse(node1.isWith());
254:       assertFalse(node1.hasMoreThanOneChild());
255:       assertFalse(node1.hasChildren());
256:       assertFalse(node1.isWhile());
257:       assertFalse(node1.isDec());
258:       assertFalse(node1.isReturn());
259:       assertFalse(node1.isBlock());
260:       assertFalse(node1.isComma());
261:       assertFalse(node1.isParamList());
262:       assertFalse(node1.isBreak());
263:       assertFalse(node1.isStringKey());
264:       assertFalse(node1.isName());
265:       assertFalse(node1.isNull());
266:       assertFalse(node1.isNew());
267:       assertFalse(node1.isDefaultCase());
268:       assertFalse(node1.isSwitch());
269:       assertEquals((-1122), node1.getType());
270:       assertFalse(node1.isAdd());
271:       assertFalse(node1.isArrayLit());
272:       assertFalse(node1.isDo());
273:       assertEquals(0, node1.getChildCount());
274:       assertFalse(node1.isLabel());
275:       assertFalse(node1.isVar());
276:       assertFalse(node1.isNE());
277:       assertFalse(node1.isDelProp());
278:       assertFalse(node1.isIn());
279:       assertFalse(node1.isEmpty());
280:       assertFalse(node1.isGetterDef());
281:       assertFalse(node1.isIf());
282:       assertFalse(node1.isTrue());
283:       assertFalse(node1.isVoid());
284:       assertFalse(node1.isDebugger());
285:       assertFalse(node1.isTry());
286:       assertFalse(node1.isRegExp());
287:       assertFalse(node1.isString());
288:       assertFalse(node1.isCase());
289:       assertFalse(node1.isCatch());
290:       assertFalse(node1.isFor());
291:       assertFalse(node1.isHook());
292:       assertFalse(node1.isThis());
293:       assertEquals(131072, node1.getSourcePosition());
294:       assertFalse(node1.isInstanceOf());
295:       assertFalse(node1.isGetProp());
296:       assertFalse(node1.isSetterDef());
297:       assertFalse(node1.isObjectLit());
298:       assertFalse(node1.isAnd());
299:       assertFalse(node1.isNot());
300:       assertEquals(0, node1.getCharno());
301:       assertFalse(node1.isFunction());
302:       assertFalse(node1.isInc());
303:       assertFalse(node1.isContinue());
304:       assertFalse(node1.isThrow());
305:       assertFalse(node1.isCast());
306:       assertFalse(node1.isFalse());
307:       assertFalse(node1.equals((Object)node0));
308:       assertEquals(30, Node.VAR_ARGS_NAME);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(52, Node.LENGTH);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(12, Node.COLUMN_BITS);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(57, Node.LAST_PROP);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
321:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(48, Node.DIRECTIVES);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
331:       assertEquals(55, Node.INFERRED_FUNCTION);
332:       assertEquals(4095, Node.COLUMN_MASK);
333:       assertEquals(53, Node.INPUT_ID);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       assertEquals(47, Node.IS_DISPATCHER);
337:       assertEquals(40, Node.ORIGINALNAME_PROP);
338:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
339:       assertEquals(2, Node.POST_FLAG);
340:       assertEquals(50, Node.FREE_CALL);
341:       assertEquals(46, Node.IS_NAMESPACE);
342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
343:       assertEquals(54, Node.SLASH_V);
344:       assertNull(object0);
345:       
346:       Node node2 = Node.newString(46, "UNKNOWN");
347:       assertFalse(node2.isHook());
348:       assertEquals((-1), node2.getCharno());
349:       assertFalse(node2.isInc());
350:       assertFalse(node2.isFalse());
351:       assertFalse(node2.isString());
352:       assertFalse(node2.isCase());
353:       assertFalse(node2.isThis());
354:       assertFalse(node2.isThrow());
355:       assertFalse(node2.isGetProp());
356:       assertFalse(node2.isObjectLit());
357:       assertFalse(node2.isGetterDef());
358:       assertFalse(node2.isNot());
359:       assertFalse(node2.isSwitch());
360:       assertFalse(node2.isAnd());
361:       assertFalse(node2.isTry());
362:       assertFalse(node2.hasOneChild());
363:       assertFalse(node2.isFunction());
364:       assertFalse(node2.isCast());
365:       assertFalse(node2.isRegExp());
366:       assertFalse(node2.isScript());
367:       assertFalse(node2.isWith());
368:       assertFalse(node2.isFor());
369:       assertEquals((-1), node2.getLineno());
370:       assertFalse(node2.isCatch());
371:       assertFalse(node2.isSetterDef());
372:       assertFalse(node2.hasMoreThanOneChild());
373:       assertFalse(node2.isIn());
374:       assertFalse(node2.isInstanceOf());
375:       assertFalse(node2.isNE());
376:       assertFalse(node2.isIf());
377:       assertFalse(node2.isBlock());
378:       assertFalse(node2.isAdd());
379:       assertFalse(node2.isNew());
380:       assertFalse(node2.isCall());
381:       assertFalse(node2.isDo());
382:       assertFalse(node2.isVar());
383:       assertFalse(node2.isWhile());
384:       assertEquals(0, node2.getChildCount());
385:       assertFalse(node2.isLabel());
386:       assertFalse(node2.isNumber());
387:       assertFalse(node2.isContinue());
388:       assertFalse(node2.isLabelName());
389:       assertEquals((-1), node2.getSourcePosition());
390:       assertFalse(node2.isStringKey());
391:       assertFalse(node2.isParamList());
392:       assertFalse(node2.isDebugger());
393:       assertFalse(node2.isArrayLit());
394:       assertFalse(node2.isExprResult());
395:       assertFalse(node2.isAssign());
396:       assertFalse(node2.isEmpty());
397:       assertFalse(node2.isDec());
398:       assertFalse(node2.hasChildren());
399:       assertFalse(node2.isDefaultCase());
400:       assertFalse(node2.isAssignAdd());
401:       assertFalse(node2.isOr());
402:       assertFalse(node2.isReturn());
403:       assertEquals(46, node2.getType());
404:       assertFalse(node2.isComma());
405:       assertFalse(node2.isTypeOf());
406:       assertFalse(node2.isDelProp());
407:       assertFalse(node2.isName());
408:       assertFalse(node2.isGetElem());
409:       assertFalse(node2.isBreak());
410:       assertFalse(node2.isTrue());
411:       assertFalse(node2.isVoid());
412:       assertFalse(node2.isNull());
413:       assertFalse(node2.equals((Object)node0));
414:       assertFalse(node2.equals((Object)node1));
415:       assertNotSame(node2, node1);
416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
417:       assertEquals(8, Node.FLAG_NO_THROWS);
418:       assertEquals(39, Node.EMPTY_BLOCK);
419:       assertEquals(50, Node.FREE_CALL);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(4095, Node.COLUMN_MASK);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(54, Node.SLASH_V);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
427:       assertEquals(12, Node.COLUMN_BITS);
428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(1, Node.DECR_FLAG);
431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
432:       assertEquals(2, Node.POST_FLAG);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(46, Node.IS_NAMESPACE);
435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
436:       assertEquals(47, Node.IS_DISPATCHER);
437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
438:       assertEquals(49, Node.DIRECT_EVAL);
439:       assertEquals(37, Node.OPT_ARG_NAME);
440:       assertEquals(57, Node.LAST_PROP);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(52, Node.LENGTH);
444:       assertEquals(57, Node.REFLECTED_OBJECT);
445:       assertEquals(36, Node.QUOTED_PROP);
446:       assertEquals(55, Node.INFERRED_FUNCTION);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
449:       assertEquals(29, Node.JSDOC_INFO_PROP);
450:       assertEquals(53, Node.INPUT_ID);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertNotNull(node2);
453:       
454:       boolean boolean0 = node2.isSyntheticBlock();
455:       assertFalse(boolean0);
456:       assertFalse(node2.isHook());
457:       assertEquals((-1), node2.getCharno());
458:       assertFalse(node2.isInc());
459:       assertFalse(node2.isFalse());
460:       assertFalse(node2.isString());
461:       assertFalse(node2.isCase());
462:       assertFalse(node2.isThis());
463:       assertFalse(node2.isThrow());
464:       assertFalse(node2.isGetProp());
465:       assertFalse(node2.isObjectLit());
466:       assertFalse(node2.isGetterDef());
467:       assertFalse(node2.isNot());
468:       assertFalse(node2.isSwitch());
469:       assertFalse(node2.isAnd());
470:       assertFalse(node2.isTry());
471:       assertFalse(node2.hasOneChild());
472:       assertFalse(node2.isFunction());
473:       assertFalse(node2.isCast());
474:       assertFalse(node2.isRegExp());
475:       assertFalse(node2.isScript());
476:       assertFalse(node2.isWith());
477:       assertFalse(node2.isFor());
478:       assertEquals((-1), node2.getLineno());
479:       assertFalse(node2.isCatch());
480:       assertFalse(node2.isSetterDef());
481:       assertFalse(node2.hasMoreThanOneChild());
482:       assertFalse(node2.isIn());
483:       assertFalse(node2.isInstanceOf());
484:       assertFalse(node2.isNE());
485:       assertFalse(node2.isIf());
486:       assertFalse(node2.isBlock());
487:       assertFalse(node2.isAdd());
488:       assertFalse(node2.isNew());
489:       assertFalse(node2.isCall());
490:       assertFalse(node2.isDo());
491:       assertFalse(node2.isVar());
492:       assertFalse(node2.isWhile());
493:       assertEquals(0, node2.getChildCount());
494:       assertFalse(node2.isLabel());
495:       assertFalse(node2.isNumber());
496:       assertFalse(node2.isContinue());
497:       assertFalse(node2.isLabelName());
498:       assertEquals((-1), node2.getSourcePosition());
499:       assertFalse(node2.isStringKey());
500:       assertFalse(node2.isParamList());
501:       assertFalse(node2.isDebugger());
502:       assertFalse(node2.isArrayLit());
503:       assertFalse(node2.isExprResult());
504:       assertFalse(node2.isAssign());
505:       assertFalse(node2.isEmpty());
506:       assertFalse(node2.isDec());
507:       assertFalse(node2.hasChildren());
508:       assertFalse(node2.isDefaultCase());
509:       assertFalse(node2.isAssignAdd());
510:       assertFalse(node2.isOr());
511:       assertFalse(node2.isReturn());
512:       assertEquals(46, node2.getType());
513:       assertFalse(node2.isComma());
514:       assertFalse(node2.isTypeOf());
515:       assertFalse(node2.isDelProp());
516:       assertFalse(node2.isName());
517:       assertFalse(node2.isGetElem());
518:       assertFalse(node2.isBreak());
519:       assertFalse(node2.isTrue());
520:       assertFalse(node2.isVoid());
521:       assertFalse(node2.isNull());
522:       assertFalse(node2.equals((Object)node0));
523:       assertFalse(node2.equals((Object)node1));
524:       assertNotSame(node2, node1);
525:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
526:       assertEquals(8, Node.FLAG_NO_THROWS);
527:       assertEquals(39, Node.EMPTY_BLOCK);
528:       assertEquals(50, Node.FREE_CALL);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(4095, Node.COLUMN_MASK);
531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(54, Node.SLASH_V);
534:       assertEquals(43, Node.IS_CONSTANT_NAME);
535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(1, Node.DECR_FLAG);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(2, Node.POST_FLAG);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       assertEquals(51, Node.STATIC_SOURCE_FILE);
545:       assertEquals(47, Node.IS_DISPATCHER);
546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       assertEquals(37, Node.OPT_ARG_NAME);
549:       assertEquals(57, Node.LAST_PROP);
550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
551:       assertEquals(30, Node.VAR_ARGS_NAME);
552:       assertEquals(52, Node.LENGTH);
553:       assertEquals(57, Node.REFLECTED_OBJECT);
554:       assertEquals(36, Node.QUOTED_PROP);
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(29, Node.JSDOC_INFO_PROP);
559:       assertEquals(53, Node.INPUT_ID);
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       
562:       node0.setLineno(39);
563:       assertFalse(node0.isBlock());
564:       assertFalse(node0.isAdd());
565:       assertEquals(39, node0.getType());
566:       assertFalse(node0.isVar());
567:       assertFalse(node0.isWhile());
568:       assertFalse(node0.isDo());
569:       assertFalse(node0.isNew());
570:       assertFalse(node0.isAssignAdd());
571:       assertFalse(node0.isParamList());
572:       assertEquals(0, node0.getChildCount());
573:       assertFalse(node0.isLabel());
574:       assertFalse(node0.isContinue());
575:       assertFalse(node0.isCast());
576:       assertFalse(node0.isStringKey());
577:       assertFalse(node0.isLabelName());
578:       assertFalse(node0.isVoid());
579:       assertFalse(node0.isTrue());
580:       assertFalse(node0.isExprResult());
581:       assertFalse(node0.isNot());
582:       assertFalse(node0.isDebugger());
583:       assertFalse(node0.isObjectLit());
584:       assertFalse(node0.isEmpty());
585:       assertFalse(node0.isDefaultCase());
586:       assertFalse(node0.hasChildren());
587:       assertFalse(node0.isTypeOf());
588:       assertFalse(node0.isReturn());
589:       assertFalse(node0.isNull());
590:       assertFalse(node0.isAssign());
591:       assertFalse(node0.isOr());
592:       assertFalse(node0.isComma());
593:       assertFalse(node0.isDec());
594:       assertFalse(node0.isGetElem());
595:       assertFalse(node0.isName());
596:       assertFalse(node0.isCall());
597:       assertFalse(node0.isDelProp());
598:       assertFalse(node0.isBreak());
599:       assertEquals(159744, node0.getSourcePosition());
600:       assertFalse(node0.isInc());
601:       assertFalse(node0.isSwitch());
602:       assertFalse(node0.isHook());
603:       assertFalse(node0.isThrow());
604:       assertFalse(node0.isString());
605:       assertFalse(node0.isCase());
606:       assertTrue(node0.isNumber());
607:       assertFalse(node0.isGetProp());
608:       assertFalse(node0.isGetterDef());
609:       assertEquals(39, node0.getLineno());
610:       assertFalse(node0.isAnd());
611:       assertFalse(node0.isFalse());
612:       assertFalse(node0.isArrayLit());
613:       assertEquals(0, node0.getCharno());
614:       assertFalse(node0.isFunction());
615:       assertFalse(node0.isScript());
616:       assertFalse(node0.isRegExp());
617:       assertFalse(node0.isFor());
618:       assertFalse(node0.isTry());
619:       assertFalse(node0.hasOneChild());
620:       assertFalse(node0.isSetterDef());
621:       assertFalse(node0.isThis());
622:       assertFalse(node0.isNE());
623:       assertFalse(node0.isIn());
624:       assertFalse(node0.isCatch());
625:       assertFalse(node0.isWith());
626:       assertFalse(node0.hasMoreThanOneChild());
627:       assertFalse(node0.isInstanceOf());
628:       assertFalse(node0.isIf());
629:       assertFalse(node0.equals((Object)node2));
630:       assertFalse(node0.equals((Object)node1));
631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(40, Node.ORIGINALNAME_PROP);
636:       assertEquals(4095, Node.COLUMN_MASK);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
639:       assertEquals(54, Node.SLASH_V);
640:       assertEquals(43, Node.IS_CONSTANT_NAME);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
645:       assertEquals(47, Node.IS_DISPATCHER);
646:       assertEquals(2, Node.POST_FLAG);
647:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(56, Node.CHANGE_TIME);
650:       assertEquals(12, Node.COLUMN_BITS);
651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
652:       assertEquals(15, Node.NO_SIDE_EFFECTS);
653:       assertEquals(57, Node.LAST_PROP);
654:       assertEquals(30, Node.VAR_ARGS_NAME);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertEquals(36, Node.QUOTED_PROP);
657:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
658:       assertEquals(57, Node.REFLECTED_OBJECT);
659:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
660:       assertEquals(8, Node.FLAG_NO_THROWS);
661:       assertEquals(39, Node.EMPTY_BLOCK);
662:       assertEquals(53, Node.INPUT_ID);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
665:       assertEquals(29, Node.JSDOC_INFO_PROP);
666:       assertEquals(52, Node.LENGTH);
667:       
668:       node0.putProp(4095, (Object) null);
669:       assertFalse(node0.isBlock());
670:       assertFalse(node0.isAdd());
671:       assertEquals(39, node0.getType());
672:       assertFalse(node0.isVar());
673:       assertFalse(node0.isWhile());
674:       assertFalse(node0.isDo());
675:       assertFalse(node0.isNew());
676:       assertFalse(node0.isAssignAdd());
677:       assertFalse(node0.isParamList());
678:       assertEquals(0, node0.getChildCount());
679:       assertFalse(node0.isLabel());
680:       assertFalse(node0.isContinue());
681:       assertFalse(node0.isCast());
682:       assertFalse(node0.isStringKey());
683:       assertFalse(node0.isLabelName());
684:       assertFalse(node0.isVoid());
685:       assertFalse(node0.isTrue());
686:       assertFalse(node0.isExprResult());
687:       assertFalse(node0.isNot());
688:       assertFalse(node0.isDebugger());
689:       assertFalse(node0.isObjectLit());
690:       assertFalse(node0.isEmpty());
691:       assertFalse(node0.isDefaultCase());
692:       assertFalse(node0.hasChildren());
693:       assertFalse(node0.isTypeOf());
694:       assertFalse(node0.isReturn());
695:       assertFalse(node0.isNull());
696:       assertFalse(node0.isAssign());
697:       assertFalse(node0.isOr());
698:       assertFalse(node0.isComma());
699:       assertFalse(node0.isDec());
700:       assertFalse(node0.isGetElem());
701:       assertFalse(node0.isName());
702:       assertFalse(node0.isCall());
703:       assertFalse(node0.isDelProp());
704:       assertFalse(node0.isBreak());
705:       assertEquals(159744, node0.getSourcePosition());
706:       assertFalse(node0.isInc());
707:       assertFalse(node0.isSwitch());
708:       assertFalse(node0.isHook());
709:       assertFalse(node0.isThrow());
710:       assertFalse(node0.isString());
711:       assertFalse(node0.isCase());
712:       assertTrue(node0.isNumber());
713:       assertFalse(node0.isGetProp());
714:       assertFalse(node0.isGetterDef());
715:       assertEquals(39, node0.getLineno());
716:       assertFalse(node0.isAnd());
717:       assertFalse(node0.isFalse());
718:       assertFalse(node0.isArrayLit());
719:       assertEquals(0, node0.getCharno());
720:       assertFalse(node0.isFunction());
721:       assertFalse(node0.isScript());
722:       assertFalse(node0.isRegExp());
723:       assertFalse(node0.isFor());
724:       assertFalse(node0.isTry());
725:       assertFalse(node0.hasOneChild());
726:       assertFalse(node0.isSetterDef());
727:       assertFalse(node0.isThis());
728:       assertFalse(node0.isNE());
729:       assertFalse(node0.isIn());
730:       assertFalse(node0.isCatch());
731:       assertFalse(node0.isWith());
732:       assertFalse(node0.hasMoreThanOneChild());
733:       assertFalse(node0.isInstanceOf());
734:       assertFalse(node0.isIf());
735:       assertFalse(node0.equals((Object)node2));
736:       assertFalse(node0.equals((Object)node1));
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(48, Node.DIRECTIVES);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(40, Node.ORIGINALNAME_PROP);
742:       assertEquals(4095, Node.COLUMN_MASK);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(54, Node.SLASH_V);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(46, Node.IS_NAMESPACE);
748:       assertEquals(32, Node.INCRDECR_PROP);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
751:       assertEquals(47, Node.IS_DISPATCHER);
752:       assertEquals(2, Node.POST_FLAG);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(37, Node.OPT_ARG_NAME);
755:       assertEquals(56, Node.CHANGE_TIME);
756:       assertEquals(12, Node.COLUMN_BITS);
757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
759:       assertEquals(57, Node.LAST_PROP);
760:       assertEquals(30, Node.VAR_ARGS_NAME);
761:       assertEquals(49, Node.DIRECT_EVAL);
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
764:       assertEquals(57, Node.REFLECTED_OBJECT);
765:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(39, Node.EMPTY_BLOCK);
768:       assertEquals(53, Node.INPUT_ID);
769:       assertEquals(55, Node.INFERRED_FUNCTION);
770:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
771:       assertEquals(29, Node.JSDOC_INFO_PROP);
772:       assertEquals(52, Node.LENGTH);
773:       
774:       int int0 = node0.getIndexOfChild(node1);
775:       assertEquals((-1), int0);
776:       assertFalse(node0.isBlock());
777:       assertFalse(node0.isAdd());
778:       assertEquals(39, node0.getType());
779:       assertFalse(node0.isVar());
780:       assertFalse(node0.isWhile());
781:       assertFalse(node0.isDo());
782:       assertFalse(node0.isNew());
783:       assertFalse(node0.isAssignAdd());
784:       assertFalse(node0.isParamList());
785:       assertEquals(0, node0.getChildCount());
786:       assertFalse(node0.isLabel());
787:       assertFalse(node0.isContinue());
788:       assertFalse(node0.isCast());
789:       assertFalse(node0.isStringKey());
790:       assertFalse(node0.isLabelName());
791:       assertFalse(node0.isVoid());
792:       assertFalse(node0.isTrue());
793:       assertFalse(node0.isExprResult());
794:       assertFalse(node0.isNot());
795:       assertFalse(node0.isDebugger());
796:       assertFalse(node0.isObjectLit());
797:       assertFalse(node0.isEmpty());
798:       assertFalse(node0.isDefaultCase());
799:       assertFalse(node0.hasChildren());
800:       assertFalse(node0.isTypeOf());
801:       assertFalse(node0.isReturn());
802:       assertFalse(node0.isNull());
803:       assertFalse(node0.isAssign());
804:       assertFalse(node0.isOr());
805:       assertFalse(node0.isComma());
806:       assertFalse(node0.isDec());
807:       assertFalse(node0.isGetElem());
808:       assertFalse(node0.isName());
809:       assertFalse(node0.isCall());
810:       assertFalse(node0.isDelProp());
811:       assertFalse(node0.isBreak());
812:       assertEquals(159744, node0.getSourcePosition());
813:       assertFalse(node0.isInc());
814:       assertFalse(node0.isSwitch());
815:       assertFalse(node0.isHook());
816:       assertFalse(node0.isThrow());
817:       assertFalse(node0.isString());
818:       assertFalse(node0.isCase());
819:       assertTrue(node0.isNumber());
820:       assertFalse(node0.isGetProp());
821:       assertFalse(node0.isGetterDef());
822:       assertEquals(39, node0.getLineno());
823:       assertFalse(node0.isAnd());
824:       assertFalse(node0.isFalse());
825:       assertFalse(node0.isArrayLit());
826:       assertEquals(0, node0.getCharno());
827:       assertFalse(node0.isFunction());
828:       assertFalse(node0.isScript());
829:       assertFalse(node0.isRegExp());
830:       assertFalse(node0.isFor());
831:       assertFalse(node0.isTry());
832:       assertFalse(node0.hasOneChild());
833:       assertFalse(node0.isSetterDef());
834:       assertFalse(node0.isThis());
835:       assertFalse(node0.isNE());
836:       assertFalse(node0.isIn());
837:       assertFalse(node0.isCatch());
838:       assertFalse(node0.isWith());
839:       assertFalse(node0.hasMoreThanOneChild());
840:       assertFalse(node0.isInstanceOf());
841:       assertFalse(node0.isIf());
842:       assertFalse(node1.isTypeOf());
843:       assertFalse(node1.isAssignAdd());
844:       assertFalse(node1.isNumber());
845:       assertEquals(32, node1.getLineno());
846:       assertFalse(node1.isGetElem());
847:       assertFalse(node1.isLabelName());
848:       assertFalse(node1.isOr());
849:       assertFalse(node1.isExprResult());
850:       assertFalse(node1.hasOneChild());
851:       assertFalse(node1.isScript());
852:       assertFalse(node1.isCall());
853:       assertFalse(node1.isAssign());
854:       assertFalse(node1.isWith());
855:       assertFalse(node1.hasMoreThanOneChild());
856:       assertFalse(node1.hasChildren());
857:       assertFalse(node1.isWhile());
858:       assertFalse(node1.isDec());
859:       assertFalse(node1.isReturn());
860:       assertFalse(node1.isBlock());
861:       assertFalse(node1.isComma());
862:       assertFalse(node1.isParamList());
863:       assertFalse(node1.isBreak());
864:       assertFalse(node1.isStringKey());
865:       assertFalse(node1.isName());
866:       assertFalse(node1.isNull());
867:       assertFalse(node1.isNew());
868:       assertFalse(node1.isDefaultCase());
869:       assertFalse(node1.isSwitch());
870:       assertEquals((-1122), node1.getType());
871:       assertFalse(node1.isAdd());
872:       assertFalse(node1.isArrayLit());
873:       assertFalse(node1.isDo());
874:       assertEquals(0, node1.getChildCount());
875:       assertFalse(node1.isLabel());
876:       assertFalse(node1.isVar());
877:       assertFalse(node1.isNE());
878:       assertFalse(node1.isDelProp());
879:       assertFalse(node1.isIn());
880:       assertFalse(node1.isEmpty());
881:       assertFalse(node1.isGetterDef());
882:       assertFalse(node1.isIf());
883:       assertFalse(node1.isTrue());
884:       assertFalse(node1.isVoid());
885:       assertFalse(node1.isDebugger());
886:       assertFalse(node1.isTry());
887:       assertFalse(node1.isRegExp());
888:       assertFalse(node1.isString());
889:       assertFalse(node1.isCase());
890:       assertFalse(node1.isCatch());
891:       assertFalse(node1.isFor());
892:       assertFalse(node1.isHook());
893:       assertFalse(node1.isThis());
894:       assertEquals(131072, node1.getSourcePosition());
895:       assertFalse(node1.isInstanceOf());
896:       assertFalse(node1.isGetProp());
897:       assertFalse(node1.isSetterDef());
898:       assertFalse(node1.isObjectLit());
899:       assertFalse(node1.isAnd());
900:       assertFalse(node1.isNot());
901:       assertEquals(0, node1.getCharno());
902:       assertFalse(node1.isFunction());
903:       assertFalse(node1.isInc());
904:       assertFalse(node1.isContinue());
905:       assertFalse(node1.isThrow());
906:       assertFalse(node1.isCast());
907:       assertFalse(node1.isFalse());
908:       assertFalse(node0.equals((Object)node2));
909:       assertFalse(node0.equals((Object)node1));
910:       assertFalse(node1.equals((Object)node2));
911:       assertFalse(node1.equals((Object)node0));
912:       assertNotSame(node1, node2);
913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
914:       assertEquals(50, Node.FREE_CALL);
915:       assertEquals(48, Node.DIRECTIVES);
916:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
917:       assertEquals(40, Node.ORIGINALNAME_PROP);
918:       assertEquals(4095, Node.COLUMN_MASK);
919:       assertEquals(1, Node.DECR_FLAG);
920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
921:       assertEquals(54, Node.SLASH_V);
922:       assertEquals(43, Node.IS_CONSTANT_NAME);
923:       assertEquals(46, Node.IS_NAMESPACE);
924:       assertEquals(32, Node.INCRDECR_PROP);
925:       assertEquals(51, Node.STATIC_SOURCE_FILE);
926:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
927:       assertEquals(47, Node.IS_DISPATCHER);
928:       assertEquals(2, Node.POST_FLAG);
929:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
930:       assertEquals(37, Node.OPT_ARG_NAME);
931:       assertEquals(56, Node.CHANGE_TIME);
932:       assertEquals(12, Node.COLUMN_BITS);
933:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
934:       assertEquals(15, Node.NO_SIDE_EFFECTS);
935:       assertEquals(57, Node.LAST_PROP);
936:       assertEquals(30, Node.VAR_ARGS_NAME);
937:       assertEquals(49, Node.DIRECT_EVAL);
938:       assertEquals(36, Node.QUOTED_PROP);
939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
940:       assertEquals(57, Node.REFLECTED_OBJECT);
941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
942:       assertEquals(8, Node.FLAG_NO_THROWS);
943:       assertEquals(39, Node.EMPTY_BLOCK);
944:       assertEquals(53, Node.INPUT_ID);
945:       assertEquals(55, Node.INFERRED_FUNCTION);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(52, Node.LENGTH);
949:       assertEquals(30, Node.VAR_ARGS_NAME);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(52, Node.LENGTH);
952:       assertEquals(32, Node.INCRDECR_PROP);
953:       assertEquals(12, Node.COLUMN_BITS);
954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
955:       assertEquals(1, Node.DECR_FLAG);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
958:       assertEquals(56, Node.CHANGE_TIME);
959:       assertEquals(29, Node.JSDOC_INFO_PROP);
960:       assertEquals(39, Node.EMPTY_BLOCK);
961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
962:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
963:       assertEquals(8, Node.FLAG_NO_THROWS);
964:       assertEquals(57, Node.REFLECTED_OBJECT);
965:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
966:       assertEquals(37, Node.OPT_ARG_NAME);
967:       assertEquals(48, Node.DIRECTIVES);
968:       assertEquals(49, Node.DIRECT_EVAL);
969:       assertEquals(43, Node.IS_CONSTANT_NAME);
970:       assertEquals(36, Node.QUOTED_PROP);
971:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
972:       assertEquals(55, Node.INFERRED_FUNCTION);
973:       assertEquals(4095, Node.COLUMN_MASK);
974:       assertEquals(53, Node.INPUT_ID);
975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
976:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
977:       assertEquals(47, Node.IS_DISPATCHER);
978:       assertEquals(40, Node.ORIGINALNAME_PROP);
979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
980:       assertEquals(2, Node.POST_FLAG);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(46, Node.IS_NAMESPACE);
983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
984:       assertEquals(54, Node.SLASH_V);
985:       
986:       Iterable<Node> iterable0 = node0.children();
987:       assertFalse(node0.isBlock());
988:       assertFalse(node0.isAdd());
989:       assertEquals(39, node0.getType());
990:       assertFalse(node0.isVar());
991:       assertFalse(node0.isWhile());
992:       assertFalse(node0.isDo());
993:       assertFalse(node0.isNew());
994:       assertFalse(node0.isAssignAdd());
995:       assertFalse(node0.isParamList());
996:       assertEquals(0, node0.getChildCount());
997:       assertFalse(node0.isLabel());
998:       assertFalse(node0.isContinue());
999:       assertFalse(node0.isCast());
1000:       assertFalse(node0.isStringKey());
1001:       assertFalse(node0.isLabelName());
1002:       assertFalse(node0.isVoid());
1003:       assertFalse(node0.isTrue());
1004:       assertFalse(node0.isExprResult());
1005:       assertFalse(node0.isNot());
1006:       assertFalse(node0.isDebugger());
1007:       assertFalse(node0.isObjectLit());
1008:       assertFalse(node0.isEmpty());
1009:       assertFalse(node0.isDefaultCase());
1010:       assertFalse(node0.hasChildren());
1011:       assertFalse(node0.isTypeOf());
1012:       assertFalse(node0.isReturn());
1013:       assertFalse(node0.isNull());
1014:       assertFalse(node0.isAssign());
1015:       assertFalse(node0.isOr());
1016:       assertFalse(node0.isComma());
1017:       assertFalse(node0.isDec());
1018:       assertFalse(node0.isGetElem());
1019:       assertFalse(node0.isName());
1020:       assertFalse(node0.isCall());
1021:       assertFalse(node0.isDelProp());
1022:       assertFalse(node0.isBreak());
1023:       assertEquals(159744, node0.getSourcePosition());
1024:       assertFalse(node0.isInc());
1025:       assertFalse(node0.isSwitch());
1026:       assertFalse(node0.isHook());
1027:       assertFalse(node0.isThrow());
1028:       assertFalse(node0.isString());
1029:       assertFalse(node0.isCase());
1030:       assertTrue(node0.isNumber());
1031:       assertFalse(node0.isGetProp());
1032:       assertFalse(node0.isGetterDef());
1033:       assertEquals(39, node0.getLineno());
1034:       assertFalse(node0.isAnd());
1035:       assertFalse(node0.isFalse());
1036:       assertFalse(node0.isArrayLit());
1037:       assertEquals(0, node0.getCharno());
1038:       assertFalse(node0.isFunction());
1039:       assertFalse(node0.isScript());
1040:       assertFalse(node0.isRegExp());
1041:       assertFalse(node0.isFor());
1042:       assertFalse(node0.isTry());
1043:       assertFalse(node0.hasOneChild());
1044:       assertFalse(node0.isSetterDef());
1045:       assertFalse(node0.isThis());
1046:       assertFalse(node0.isNE());
1047:       assertFalse(node0.isIn());
1048:       assertFalse(node0.isCatch());
1049:       assertFalse(node0.isWith());
1050:       assertFalse(node0.hasMoreThanOneChild());
1051:       assertFalse(node0.isInstanceOf());
1052:       assertFalse(node0.isIf());
1053:       assertFalse(node0.equals((Object)node2));
1054:       assertFalse(node0.equals((Object)node1));
1055:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1056:       assertEquals(50, Node.FREE_CALL);
1057:       assertEquals(48, Node.DIRECTIVES);
1058:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1059:       assertEquals(40, Node.ORIGINALNAME_PROP);
1060:       assertEquals(4095, Node.COLUMN_MASK);
1061:       assertEquals(1, Node.DECR_FLAG);
1062:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1063:       assertEquals(54, Node.SLASH_V);
1064:       assertEquals(43, Node.IS_CONSTANT_NAME);
1065:       assertEquals(46, Node.IS_NAMESPACE);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1068:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(2, Node.POST_FLAG);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(37, Node.OPT_ARG_NAME);
1073:       assertEquals(56, Node.CHANGE_TIME);
1074:       assertEquals(12, Node.COLUMN_BITS);
1075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1076:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1077:       assertEquals(57, Node.LAST_PROP);
1078:       assertEquals(30, Node.VAR_ARGS_NAME);
1079:       assertEquals(49, Node.DIRECT_EVAL);
1080:       assertEquals(36, Node.QUOTED_PROP);
1081:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1082:       assertEquals(57, Node.REFLECTED_OBJECT);
1083:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1084:       assertEquals(8, Node.FLAG_NO_THROWS);
1085:       assertEquals(39, Node.EMPTY_BLOCK);
1086:       assertEquals(53, Node.INPUT_ID);
1087:       assertEquals(55, Node.INFERRED_FUNCTION);
1088:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1089:       assertEquals(29, Node.JSDOC_INFO_PROP);
1090:       assertEquals(52, Node.LENGTH);
1091:       assertNotNull(iterable0);
1092:       assertFalse(iterable0.contains(node0));
1093:       
1094:       node1.putIntProp(57, 2);
1095:       assertFalse(node1.isTypeOf());
1096:       assertFalse(node1.isAssignAdd());
1097:       assertFalse(node1.isNumber());
1098:       assertEquals(32, node1.getLineno());
1099:       assertFalse(node1.isGetElem());
1100:       assertFalse(node1.isLabelName());
1101:       assertFalse(node1.isOr());
1102:       assertFalse(node1.isExprResult());
1103:       assertFalse(node1.hasOneChild());
1104:       assertFalse(node1.isScript());
1105:       assertFalse(node1.isCall());
1106:       assertFalse(node1.isAssign());
1107:       assertFalse(node1.isWith());
1108:       assertFalse(node1.hasMoreThanOneChild());
1109:       assertFalse(node1.hasChildren());
1110:       assertFalse(node1.isWhile());
1111:       assertFalse(node1.isDec());
1112:       assertFalse(node1.isReturn());
1113:       assertFalse(node1.isBlock());
1114:       assertFalse(node1.isComma());
1115:       assertFalse(node1.isParamList());
1116:       assertFalse(node1.isBreak());
1117:       assertFalse(node1.isStringKey());
1118:       assertFalse(node1.isName());
1119:       assertFalse(node1.isNull());
1120:       assertFalse(node1.isNew());
1121:       assertFalse(node1.isDefaultCase());
1122:       assertFalse(node1.isSwitch());
1123:       assertEquals((-1122), node1.getType());
1124:       assertFalse(node1.isAdd());
1125:       assertFalse(node1.isArrayLit());
1126:       assertFalse(node1.isDo());
1127:       assertEquals(0, node1.getChildCount());
1128:       assertFalse(node1.isLabel());
1129:       assertFalse(node1.isVar());
1130:       assertFalse(node1.isNE());
1131:       assertFalse(node1.isDelProp());
1132:       assertFalse(node1.isIn());
1133:       assertFalse(node1.isEmpty());
1134:       assertFalse(node1.isGetterDef());
1135:       assertFalse(node1.isIf());
1136:       assertFalse(node1.isTrue());
1137:       assertFalse(node1.isVoid());
1138:       assertFalse(node1.isDebugger());
1139:       assertFalse(node1.isTry());
1140:       assertFalse(node1.isRegExp());
1141:       assertFalse(node1.isString());
1142:       assertFalse(node1.isCase());
1143:       assertFalse(node1.isCatch());
1144:       assertFalse(node1.isFor());
1145:       assertFalse(node1.isHook());
1146:       assertFalse(node1.isThis());
1147:       assertEquals(131072, node1.getSourcePosition());
1148:       assertFalse(node1.isInstanceOf());
1149:       assertFalse(node1.isGetProp());
1150:       assertFalse(node1.isSetterDef());
1151:       assertFalse(node1.isObjectLit());
1152:       assertFalse(node1.isAnd());
1153:       assertFalse(node1.isNot());
1154:       assertEquals(0, node1.getCharno());
1155:       assertFalse(node1.isFunction());
1156:       assertFalse(node1.isInc());
1157:       assertFalse(node1.isContinue());
1158:       assertFalse(node1.isThrow());
1159:       assertFalse(node1.isCast());
1160:       assertFalse(node1.isFalse());
1161:       assertFalse(node1.equals((Object)node2));
1162:       assertFalse(node1.equals((Object)node0));
1163:       assertNotSame(node1, node2);
1164:       assertEquals(30, Node.VAR_ARGS_NAME);
1165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1166:       assertEquals(52, Node.LENGTH);
1167:       assertEquals(32, Node.INCRDECR_PROP);
1168:       assertEquals(12, Node.COLUMN_BITS);
1169:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1170:       assertEquals(1, Node.DECR_FLAG);
1171:       assertEquals(57, Node.LAST_PROP);
1172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1173:       assertEquals(56, Node.CHANGE_TIME);
1174:       assertEquals(29, Node.JSDOC_INFO_PROP);
1175:       assertEquals(39, Node.EMPTY_BLOCK);
1176:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1178:       assertEquals(8, Node.FLAG_NO_THROWS);
1179:       assertEquals(57, Node.REFLECTED_OBJECT);
1180:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(48, Node.DIRECTIVES);
1183:       assertEquals(49, Node.DIRECT_EVAL);
1184:       assertEquals(43, Node.IS_CONSTANT_NAME);
1185:       assertEquals(36, Node.QUOTED_PROP);
1186:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(4095, Node.COLUMN_MASK);
1189:       assertEquals(53, Node.INPUT_ID);
1190:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1191:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1192:       assertEquals(47, Node.IS_DISPATCHER);
1193:       assertEquals(40, Node.ORIGINALNAME_PROP);
1194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1195:       assertEquals(2, Node.POST_FLAG);
1196:       assertEquals(50, Node.FREE_CALL);
1197:       assertEquals(46, Node.IS_NAMESPACE);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(54, Node.SLASH_V);
1200:       
1201:       LinkedList<NoObjectType> linkedList0 = new LinkedList<NoObjectType>();
1202:       assertEquals(0, linkedList0.size());
1203:       assertNotNull(linkedList0);
1204:       
1205:       Iterator<NoObjectType> iterator0 = linkedList0.iterator();
1206:       assertEquals(0, linkedList0.size());
1207:       assertNotNull(iterator0);
1208:       
1209:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
1210:       assertEquals(0, linkedList0.size());
1211:       assertEquals(0, immutableList0.size());
1212:       assertNotNull(immutableList0);
1213:       
1214:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1215:       assertNotNull(simpleErrorReporter0);
1216:       
1217:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
1218:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1219:       assertNotNull(jSTypeRegistry0);
1220:       
1221:       Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
1222:       assertEquals(0, linkedList0.size());
1223:       assertEquals(0, immutableList0.size());
1224:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1225:       assertFalse(node3.isCast());
1226:       assertFalse(node3.hasOneChild());
1227:       assertFalse(node3.isGetElem());
1228:       assertFalse(node3.isLabelName());
1229:       assertEquals((-1), node3.getSourcePosition());
1230:       assertFalse(node3.isScript());
1231:       assertFalse(node3.isNot());
1232:       assertFalse(node3.isOr());
1233:       assertFalse(node3.isObjectLit());
1234:       assertFalse(node3.isNumber());
1235:       assertFalse(node3.isAnd());
1236:       assertFalse(node3.isAssignAdd());
1237:       assertFalse(node3.isDo());
1238:       assertFalse(node3.isLabel());
1239:       assertFalse(node3.isContinue());
1240:       assertFalse(node3.isFalse());
1241:       assertFalse(node3.isThrow());
1242:       assertFalse(node3.isStringKey());
1243:       assertFalse(node3.isHook());
1244:       assertFalse(node3.isSetterDef());
1245:       assertFalse(node3.isSwitch());
1246:       assertEquals((-1), node3.getCharno());
1247:       assertFalse(node3.isInc());
1248:       assertFalse(node3.isCatch());
1249:       assertFalse(node3.hasMoreThanOneChild());
1250:       assertFalse(node3.isInstanceOf());
1251:       assertFalse(node3.isCase());
1252:       assertEquals((-1), node3.getLineno());
1253:       assertFalse(node3.isBlock());
1254:       assertFalse(node3.isThis());
1255:       assertFalse(node3.isWith());
1256:       assertFalse(node3.isRegExp());
1257:       assertFalse(node3.isArrayLit());
1258:       assertFalse(node3.isFor());
1259:       assertFalse(node3.isTry());
1260:       assertFalse(node3.isIf());
1261:       assertFalse(node3.isVoid());
1262:       assertFalse(node3.isDelProp());
1263:       assertFalse(node3.isNE());
1264:       assertFalse(node3.isDebugger());
1265:       assertFalse(node3.isTrue());
1266:       assertFalse(node3.isEmpty());
1267:       assertFalse(node3.isGetterDef());
1268:       assertFalse(node3.isIn());
1269:       assertFalse(node3.isDefaultCase());
1270:       assertEquals(0, node3.getChildCount());
1271:       assertFalse(node3.isFunction());
1272:       assertFalse(node3.isVar());
1273:       assertFalse(node3.isCall());
1274:       assertFalse(node3.isNew());
1275:       assertFalse(node3.isName());
1276:       assertEquals(83, node3.getType());
1277:       assertFalse(node3.isGetProp());
1278:       assertFalse(node3.isNull());
1279:       assertFalse(node3.isAdd());
1280:       assertFalse(node3.isString());
1281:       assertTrue(node3.isParamList());
1282:       assertFalse(node3.isReturn());
1283:       assertFalse(node3.isWhile());
1284:       assertFalse(node3.isComma());
1285:       assertFalse(node3.isBreak());
1286:       assertFalse(node3.hasChildren());
1287:       assertFalse(node3.isExprResult());
1288:       assertFalse(node3.isAssign());
1289:       assertFalse(node3.isDec());
1290:       assertFalse(node3.isTypeOf());
1291:       assertFalse(node3.equals((Object)node1));
1292:       assertFalse(node3.equals((Object)node0));
1293:       assertFalse(node3.equals((Object)node2));
1294:       assertEquals(32, Node.INCRDECR_PROP);
1295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1296:       assertEquals(37, Node.OPT_ARG_NAME);
1297:       assertEquals(30, Node.VAR_ARGS_NAME);
1298:       assertEquals(57, Node.LAST_PROP);
1299:       assertEquals(1, Node.DECR_FLAG);
1300:       assertEquals(2, Node.POST_FLAG);
1301:       assertEquals(47, Node.IS_DISPATCHER);
1302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1303:       assertEquals(12, Node.COLUMN_BITS);
1304:       assertEquals(40, Node.ORIGINALNAME_PROP);
1305:       assertEquals(50, Node.FREE_CALL);
1306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1307:       assertEquals(43, Node.IS_CONSTANT_NAME);
1308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1309:       assertEquals(46, Node.IS_NAMESPACE);
1310:       assertEquals(54, Node.SLASH_V);
1311:       assertEquals(48, Node.DIRECTIVES);
1312:       assertEquals(55, Node.INFERRED_FUNCTION);
1313:       assertEquals(8, Node.FLAG_NO_THROWS);
1314:       assertEquals(39, Node.EMPTY_BLOCK);
1315:       assertEquals(4095, Node.COLUMN_MASK);
1316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1319:       assertEquals(52, Node.LENGTH);
1320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1322:       assertEquals(53, Node.INPUT_ID);
1323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1324:       assertEquals(29, Node.JSDOC_INFO_PROP);
1325:       assertEquals(49, Node.DIRECT_EVAL);
1326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1327:       assertEquals(56, Node.CHANGE_TIME);
1328:       assertEquals(36, Node.QUOTED_PROP);
1329:       assertEquals(57, Node.REFLECTED_OBJECT);
1330:       assertNotNull(node3);
1331:       
1332:       // Undeclared exception!
1333:       try { 
1334:         node2.checkTreeEquals((Node) null);
1335:         fail("Expecting exception: NullPointerException");
1336:       
1337:       } catch(NullPointerException e) {
1338:          //
1339:          // no message in exception (getMessage() returned null)
1340:          //
1341:          verifyException("com.google.javascript.rhino.Node", e);
1342:       }
1343:   }
1344: }
RegularFileObject[/tmp/EvoSuite_67_1629223339813/com/google/javascript/rhino/Node_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_67_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:20.117 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertNotNull(node0);

Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals(32, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1122), node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.equals((Object)node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node1);

Object object0 = node1.getProp(0);
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals(32, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1122), node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.equals((Object)node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertNull(object0);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals(46, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node2);

boolean boolean0 = node2.isSyntheticBlock();
assertFalse(boolean0);
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals(46, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);

node0.setLineno(39);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

node0.putProp(4095, (Object) null);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

int int0 = node0.getIndexOfChild(node1);
assertEquals((-1), int0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals(32, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1122), node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

node1.putIntProp(57, 2);
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals(32, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1122), node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);

LinkedList<NoObjectType> linkedList0 = new LinkedList<NoObjectType>();
assertEquals(0, linkedList0.size());
assertNotNull(linkedList0);

Iterator<NoObjectType> iterator0 = linkedList0.iterator();
assertEquals(0, linkedList0.size());
assertNotNull(iterator0);

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
assertEquals(0, linkedList0.size());
assertEquals(0, immutableList0.size());
assertNotNull(immutableList0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertEquals(0, linkedList0.size());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isScript());
assertFalse(node3.isNot());
assertFalse(node3.isOr());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNumber());
assertFalse(node3.isAnd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isSetterDef());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCase());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFunction());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertEquals(83, node3.getType());
assertFalse(node3.isGetProp());
assertFalse(node3.isNull());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertTrue(node3.isParamList());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node3);

node2.checkTreeEquals((Node) null);

[MASTER] 18:02:21.111 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_71_1629223340787/com/google/javascript/rhino/Node_71_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_71_1629223340787/com/google/javascript/rhino/Node_71_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:21.112 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:21.112 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:21.112 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 18:02:21.114 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_71_1629223340787/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_71_tmp__ESTest extends Node_71_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertFalse(node0.isNot());
23:       assertFalse(node0.isObjectLit());
24:       assertFalse(node0.isAnd());
25:       assertFalse(node0.isWith());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isScript());
28:       assertFalse(node0.isExprResult());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isThrow());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isCast());
33:       assertFalse(node0.isAssignAdd());
34:       assertFalse(node0.isLabel());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isString());
37:       assertFalse(node0.isWhile());
38:       assertFalse(node0.isContinue());
39:       assertTrue(node0.isNumber());
40:       assertFalse(node0.isAdd());
41:       assertFalse(node0.isOr());
42:       assertEquals((-1), node0.getSourcePosition());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isName());
45:       assertFalse(node0.isAssign());
46:       assertFalse(node0.isDelProp());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isBreak());
49:       assertFalse(node0.isGetProp());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.isComma());
53:       assertFalse(node0.isReturn());
54:       assertFalse(node0.hasChildren());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isCatch());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isParamList());
59:       assertFalse(node0.isNull());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isFunction());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.isInc());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isIn());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isGetterDef());
78:       assertEquals((-1), node0.getCharno());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isTry());
84:       assertFalse(node0.isRegExp());
85:       assertFalse(node0.isHook());
86:       assertFalse(node0.isThis());
87:       assertEquals(39, node0.getType());
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(29, Node.JSDOC_INFO_PROP);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(30, Node.VAR_ARGS_NAME);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(1, Node.DECR_FLAG);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
124:       assertNotNull(node0);
125:       
126:       Node node1 = new Node(17, 52, 47);
127:       assertFalse(node1.isComma());
128:       assertFalse(node1.isThis());
129:       assertEquals(17, node1.getType());
130:       assertFalse(node1.isBreak());
131:       assertFalse(node1.isGetProp());
132:       assertFalse(node1.isThrow());
133:       assertEquals(213039, node1.getSourcePosition());
134:       assertFalse(node1.isHook());
135:       assertFalse(node1.isWith());
136:       assertFalse(node1.isFalse());
137:       assertFalse(node1.isInstanceOf());
138:       assertFalse(node1.isInc());
139:       assertFalse(node1.isExprResult());
140:       assertFalse(node1.isIn());
141:       assertFalse(node1.isNE());
142:       assertFalse(node1.isLabel());
143:       assertFalse(node1.isFor());
144:       assertFalse(node1.isLabelName());
145:       assertFalse(node1.isIf());
146:       assertFalse(node1.isAssignAdd());
147:       assertFalse(node1.isArrayLit());
148:       assertFalse(node1.hasMoreThanOneChild());
149:       assertFalse(node1.isRegExp());
150:       assertFalse(node1.isScript());
151:       assertFalse(node1.isBlock());
152:       assertFalse(node1.isTry());
153:       assertFalse(node1.isSwitch());
154:       assertFalse(node1.isCase());
155:       assertFalse(node1.hasOneChild());
156:       assertFalse(node1.isGetterDef());
157:       assertFalse(node1.isNumber());
158:       assertEquals(52, node1.getLineno());
159:       assertFalse(node1.isSetterDef());
160:       assertFalse(node1.isParamList());
161:       assertFalse(node1.isNull());
162:       assertEquals(47, node1.getCharno());
163:       assertFalse(node1.isName());
164:       assertFalse(node1.isStringKey());
165:       assertFalse(node1.isCatch());
166:       assertFalse(node1.isCall());
167:       assertFalse(node1.isVar());
168:       assertEquals(0, node1.getChildCount());
169:       assertFalse(node1.isTrue());
170:       assertFalse(node1.isFunction());
171:       assertFalse(node1.isVoid());
172:       assertFalse(node1.isNew());
173:       assertFalse(node1.isDo());
174:       assertFalse(node1.isDefaultCase());
175:       assertFalse(node1.isEmpty());
176:       assertFalse(node1.isOr());
177:       assertFalse(node1.isAdd());
178:       assertFalse(node1.isDec());
179:       assertFalse(node1.hasChildren());
180:       assertFalse(node1.isReturn());
181:       assertFalse(node1.isDelProp());
182:       assertFalse(node1.isCast());
183:       assertFalse(node1.isGetElem());
184:       assertFalse(node1.isAssign());
185:       assertFalse(node1.isTypeOf());
186:       assertFalse(node1.isContinue());
187:       assertFalse(node1.isDebugger());
188:       assertFalse(node1.isWhile());
189:       assertFalse(node1.isAnd());
190:       assertFalse(node1.isObjectLit());
191:       assertFalse(node1.isString());
192:       assertFalse(node1.isNot());
193:       assertFalse(node1.equals((Object)node0));
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(55, Node.INFERRED_FUNCTION);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(40, Node.ORIGINALNAME_PROP);
204:       assertEquals(39, Node.EMPTY_BLOCK);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(57, Node.LAST_PROP);
211:       assertEquals(1, Node.DECR_FLAG);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(46, Node.IS_NAMESPACE);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(51, Node.STATIC_SOURCE_FILE);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(12, Node.COLUMN_BITS);
229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
230:       assertNotNull(node1);
231:       
232:       Node node2 = new Node(55, node1);
233:       assertFalse(node1.isComma());
234:       assertFalse(node1.isThis());
235:       assertEquals(17, node1.getType());
236:       assertFalse(node1.isBreak());
237:       assertFalse(node1.isGetProp());
238:       assertFalse(node1.isThrow());
239:       assertEquals(213039, node1.getSourcePosition());
240:       assertFalse(node1.isHook());
241:       assertFalse(node1.isWith());
242:       assertFalse(node1.isFalse());
243:       assertFalse(node1.isInstanceOf());
244:       assertFalse(node1.isInc());
245:       assertFalse(node1.isExprResult());
246:       assertFalse(node1.isIn());
247:       assertFalse(node1.isNE());
248:       assertFalse(node1.isLabel());
249:       assertFalse(node1.isFor());
250:       assertFalse(node1.isLabelName());
251:       assertFalse(node1.isIf());
252:       assertFalse(node1.isAssignAdd());
253:       assertFalse(node1.isArrayLit());
254:       assertFalse(node1.hasMoreThanOneChild());
255:       assertFalse(node1.isRegExp());
256:       assertFalse(node1.isScript());
257:       assertFalse(node1.isBlock());
258:       assertFalse(node1.isTry());
259:       assertFalse(node1.isSwitch());
260:       assertFalse(node1.isCase());
261:       assertFalse(node1.hasOneChild());
262:       assertFalse(node1.isGetterDef());
263:       assertFalse(node1.isNumber());
264:       assertEquals(52, node1.getLineno());
265:       assertFalse(node1.isSetterDef());
266:       assertFalse(node1.isParamList());
267:       assertFalse(node1.isNull());
268:       assertEquals(47, node1.getCharno());
269:       assertFalse(node1.isName());
270:       assertFalse(node1.isStringKey());
271:       assertFalse(node1.isCatch());
272:       assertFalse(node1.isCall());
273:       assertFalse(node1.isVar());
274:       assertEquals(0, node1.getChildCount());
275:       assertFalse(node1.isTrue());
276:       assertFalse(node1.isFunction());
277:       assertFalse(node1.isVoid());
278:       assertFalse(node1.isNew());
279:       assertFalse(node1.isDo());
280:       assertFalse(node1.isDefaultCase());
281:       assertFalse(node1.isEmpty());
282:       assertFalse(node1.isOr());
283:       assertFalse(node1.isAdd());
284:       assertFalse(node1.isDec());
285:       assertFalse(node1.hasChildren());
286:       assertFalse(node1.isReturn());
287:       assertFalse(node1.isDelProp());
288:       assertFalse(node1.isCast());
289:       assertFalse(node1.isGetElem());
290:       assertFalse(node1.isAssign());
291:       assertFalse(node1.isTypeOf());
292:       assertFalse(node1.isContinue());
293:       assertFalse(node1.isDebugger());
294:       assertFalse(node1.isWhile());
295:       assertFalse(node1.isAnd());
296:       assertFalse(node1.isObjectLit());
297:       assertFalse(node1.isString());
298:       assertFalse(node1.isNot());
299:       assertFalse(node2.isBlock());
300:       assertFalse(node2.isVar());
301:       assertFalse(node2.isAdd());
302:       assertFalse(node2.isWhile());
303:       assertFalse(node2.isSetterDef());
304:       assertFalse(node2.isDo());
305:       assertFalse(node2.isNew());
306:       assertFalse(node2.isReturn());
307:       assertFalse(node2.isCatch());
308:       assertFalse(node2.hasMoreThanOneChild());
309:       assertFalse(node2.isTypeOf());
310:       assertFalse(node2.isDec());
311:       assertFalse(node2.isOr());
312:       assertFalse(node2.isNull());
313:       assertFalse(node2.isVoid());
314:       assertFalse(node2.isCall());
315:       assertFalse(node2.isGetElem());
316:       assertFalse(node2.isName());
317:       assertEquals((-1), node2.getLineno());
318:       assertFalse(node2.isTrue());
319:       assertFalse(node2.isRegExp());
320:       assertFalse(node2.isGetterDef());
321:       assertFalse(node2.isNumber());
322:       assertFalse(node2.isDefaultCase());
323:       assertFalse(node2.isFor());
324:       assertFalse(node2.isEmpty());
325:       assertFalse(node2.isScript());
326:       assertFalse(node2.isTry());
327:       assertFalse(node2.isAssignAdd());
328:       assertFalse(node2.isLabel());
329:       assertEquals(55, node2.getType());
330:       assertFalse(node2.isStringKey());
331:       assertFalse(node2.isParamList());
332:       assertFalse(node2.isSwitch());
333:       assertFalse(node2.isArrayLit());
334:       assertFalse(node2.isLabelName());
335:       assertFalse(node2.isHook());
336:       assertEquals((-1), node2.getCharno());
337:       assertFalse(node2.isFalse());
338:       assertFalse(node2.isString());
339:       assertFalse(node2.isThrow());
340:       assertFalse(node2.isInc());
341:       assertFalse(node2.isGetProp());
342:       assertFalse(node2.isCase());
343:       assertEquals(1, node2.getChildCount());
344:       assertFalse(node2.isIn());
345:       assertTrue(node2.hasChildren());
346:       assertFalse(node2.isInstanceOf());
347:       assertFalse(node2.isThis());
348:       assertFalse(node2.isComma());
349:       assertFalse(node2.isDelProp());
350:       assertFalse(node2.isBreak());
351:       assertFalse(node2.isIf());
352:       assertFalse(node2.isWith());
353:       assertFalse(node2.isNE());
354:       assertFalse(node2.isExprResult());
355:       assertFalse(node2.isCast());
356:       assertFalse(node2.isDebugger());
357:       assertFalse(node2.isFunction());
358:       assertFalse(node2.isAssign());
359:       assertTrue(node2.hasOneChild());
360:       assertFalse(node2.isObjectLit());
361:       assertFalse(node2.isContinue());
362:       assertEquals((-1), node2.getSourcePosition());
363:       assertFalse(node2.isNot());
364:       assertFalse(node2.isAnd());
365:       assertFalse(node1.equals((Object)node0));
366:       assertFalse(node2.equals((Object)node0));
367:       assertFalse(node2.equals((Object)node1));
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
371:       assertEquals(53, Node.INPUT_ID);
372:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(36, Node.QUOTED_PROP);
375:       assertEquals(29, Node.JSDOC_INFO_PROP);
376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
377:       assertEquals(40, Node.ORIGINALNAME_PROP);
378:       assertEquals(39, Node.EMPTY_BLOCK);
379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
380:       assertEquals(2, Node.POST_FLAG);
381:       assertEquals(47, Node.IS_DISPATCHER);
382:       assertEquals(30, Node.VAR_ARGS_NAME);
383:       assertEquals(49, Node.DIRECT_EVAL);
384:       assertEquals(57, Node.LAST_PROP);
385:       assertEquals(1, Node.DECR_FLAG);
386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
387:       assertEquals(46, Node.IS_NAMESPACE);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(54, Node.SLASH_V);
390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
391:       assertEquals(57, Node.REFLECTED_OBJECT);
392:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
393:       assertEquals(50, Node.FREE_CALL);
394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
395:       assertEquals(56, Node.CHANGE_TIME);
396:       assertEquals(37, Node.OPT_ARG_NAME);
397:       assertEquals(48, Node.DIRECTIVES);
398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
399:       assertEquals(32, Node.INCRDECR_PROP);
400:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
401:       assertEquals(4095, Node.COLUMN_MASK);
402:       assertEquals(12, Node.COLUMN_BITS);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(8, Node.FLAG_NO_THROWS);
405:       assertEquals(39, Node.EMPTY_BLOCK);
406:       assertEquals(48, Node.DIRECTIVES);
407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
410:       assertEquals(4095, Node.COLUMN_MASK);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(36, Node.QUOTED_PROP);
413:       assertEquals(57, Node.LAST_PROP);
414:       assertEquals(57, Node.REFLECTED_OBJECT);
415:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
416:       assertEquals(52, Node.LENGTH);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(53, Node.INPUT_ID);
421:       assertEquals(55, Node.INFERRED_FUNCTION);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(47, Node.IS_DISPATCHER);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(56, Node.CHANGE_TIME);
430:       assertEquals(49, Node.DIRECT_EVAL);
431:       assertEquals(30, Node.VAR_ARGS_NAME);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(54, Node.SLASH_V);
434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
435:       assertEquals(43, Node.IS_CONSTANT_NAME);
436:       assertEquals(50, Node.FREE_CALL);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(1, Node.DECR_FLAG);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertNotNull(node2);
441:       
442:       node0.setType((-2042));
443:       assertFalse(node0.isNot());
444:       assertFalse(node0.isObjectLit());
445:       assertFalse(node0.isAnd());
446:       assertFalse(node0.isWith());
447:       assertFalse(node0.isInstanceOf());
448:       assertFalse(node0.isScript());
449:       assertFalse(node0.isExprResult());
450:       assertFalse(node0.isFalse());
451:       assertFalse(node0.isThrow());
452:       assertFalse(node0.isLabelName());
453:       assertFalse(node0.isCast());
454:       assertFalse(node0.isAssignAdd());
455:       assertFalse(node0.isLabel());
456:       assertFalse(node0.isDo());
457:       assertFalse(node0.isString());
458:       assertFalse(node0.isWhile());
459:       assertFalse(node0.isContinue());
460:       assertFalse(node0.isAdd());
461:       assertFalse(node0.isOr());
462:       assertEquals((-1), node0.getSourcePosition());
463:       assertFalse(node0.isGetElem());
464:       assertFalse(node0.isName());
465:       assertFalse(node0.isAssign());
466:       assertFalse(node0.isDelProp());
467:       assertFalse(node0.isCall());
468:       assertFalse(node0.isBreak());
469:       assertFalse(node0.isGetProp());
470:       assertFalse(node0.isTypeOf());
471:       assertFalse(node0.isDec());
472:       assertFalse(node0.isComma());
473:       assertFalse(node0.isReturn());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isDefaultCase());
476:       assertFalse(node0.isCatch());
477:       assertFalse(node0.isVoid());
478:       assertFalse(node0.isParamList());
479:       assertFalse(node0.isNull());
480:       assertFalse(node0.isTrue());
481:       assertFalse(node0.isDebugger());
482:       assertFalse(node0.isStringKey());
483:       assertFalse(node0.isEmpty());
484:       assertFalse(node0.isArrayLit());
485:       assertFalse(node0.isSetterDef());
486:       assertFalse(node0.isNew());
487:       assertFalse(node0.isFunction());
488:       assertEquals(0, node0.getChildCount());
489:       assertFalse(node0.isVar());
490:       assertFalse(node0.isCase());
491:       assertFalse(node0.hasMoreThanOneChild());
492:       assertFalse(node0.isInc());
493:       assertEquals((-1), node0.getLineno());
494:       assertFalse(node0.isIn());
495:       assertFalse(node0.isSwitch());
496:       assertFalse(node0.isNumber());
497:       assertFalse(node0.isNE());
498:       assertFalse(node0.isGetterDef());
499:       assertEquals((-1), node0.getCharno());
500:       assertFalse(node0.isFor());
501:       assertFalse(node0.isIf());
502:       assertFalse(node0.hasOneChild());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isRegExp());
506:       assertFalse(node0.isHook());
507:       assertFalse(node0.isThis());
508:       assertEquals((-2042), node0.getType());
509:       assertFalse(node0.equals((Object)node2));
510:       assertFalse(node0.equals((Object)node1));
511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
512:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(29, Node.JSDOC_INFO_PROP);
515:       assertEquals(2, Node.POST_FLAG);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertEquals(47, Node.IS_DISPATCHER);
518:       assertEquals(32, Node.INCRDECR_PROP);
519:       assertEquals(51, Node.STATIC_SOURCE_FILE);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(43, Node.IS_CONSTANT_NAME);
523:       assertEquals(54, Node.SLASH_V);
524:       assertEquals(57, Node.REFLECTED_OBJECT);
525:       assertEquals(40, Node.ORIGINALNAME_PROP);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(39, Node.EMPTY_BLOCK);
532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
533:       assertEquals(1, Node.DECR_FLAG);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(55, Node.INFERRED_FUNCTION);
537:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
538:       assertEquals(8, Node.FLAG_NO_THROWS);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(36, Node.QUOTED_PROP);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(37, Node.OPT_ARG_NAME);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(49, Node.DIRECT_EVAL);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       
548:       Iterable<Node> iterable0 = node0.children();
549:       assertFalse(node0.isNot());
550:       assertFalse(node0.isObjectLit());
551:       assertFalse(node0.isAnd());
552:       assertFalse(node0.isWith());
553:       assertFalse(node0.isInstanceOf());
554:       assertFalse(node0.isScript());
555:       assertFalse(node0.isExprResult());
556:       assertFalse(node0.isFalse());
557:       assertFalse(node0.isThrow());
558:       assertFalse(node0.isLabelName());
559:       assertFalse(node0.isCast());
560:       assertFalse(node0.isAssignAdd());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.isDo());
563:       assertFalse(node0.isString());
564:       assertFalse(node0.isWhile());
565:       assertFalse(node0.isContinue());
566:       assertFalse(node0.isAdd());
567:       assertFalse(node0.isOr());
568:       assertEquals((-1), node0.getSourcePosition());
569:       assertFalse(node0.isGetElem());
570:       assertFalse(node0.isName());
571:       assertFalse(node0.isAssign());
572:       assertFalse(node0.isDelProp());
573:       assertFalse(node0.isCall());
574:       assertFalse(node0.isBreak());
575:       assertFalse(node0.isGetProp());
576:       assertFalse(node0.isTypeOf());
577:       assertFalse(node0.isDec());
578:       assertFalse(node0.isComma());
579:       assertFalse(node0.isReturn());
580:       assertFalse(node0.hasChildren());
581:       assertFalse(node0.isDefaultCase());
582:       assertFalse(node0.isCatch());
583:       assertFalse(node0.isVoid());
584:       assertFalse(node0.isParamList());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isTrue());
587:       assertFalse(node0.isDebugger());
588:       assertFalse(node0.isStringKey());
589:       assertFalse(node0.isEmpty());
590:       assertFalse(node0.isArrayLit());
591:       assertFalse(node0.isSetterDef());
592:       assertFalse(node0.isNew());
593:       assertFalse(node0.isFunction());
594:       assertEquals(0, node0.getChildCount());
595:       assertFalse(node0.isVar());
596:       assertFalse(node0.isCase());
597:       assertFalse(node0.hasMoreThanOneChild());
598:       assertFalse(node0.isInc());
599:       assertEquals((-1), node0.getLineno());
600:       assertFalse(node0.isIn());
601:       assertFalse(node0.isSwitch());
602:       assertFalse(node0.isNumber());
603:       assertFalse(node0.isNE());
604:       assertFalse(node0.isGetterDef());
605:       assertEquals((-1), node0.getCharno());
606:       assertFalse(node0.isFor());
607:       assertFalse(node0.isIf());
608:       assertFalse(node0.hasOneChild());
609:       assertFalse(node0.isBlock());
610:       assertFalse(node0.isTry());
611:       assertFalse(node0.isRegExp());
612:       assertFalse(node0.isHook());
613:       assertFalse(node0.isThis());
614:       assertEquals((-2042), node0.getType());
615:       assertFalse(node0.equals((Object)node2));
616:       assertFalse(node0.equals((Object)node1));
617:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(29, Node.JSDOC_INFO_PROP);
621:       assertEquals(2, Node.POST_FLAG);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(47, Node.IS_DISPATCHER);
624:       assertEquals(32, Node.INCRDECR_PROP);
625:       assertEquals(51, Node.STATIC_SOURCE_FILE);
626:       assertEquals(46, Node.IS_NAMESPACE);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(43, Node.IS_CONSTANT_NAME);
629:       assertEquals(54, Node.SLASH_V);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(15, Node.NO_SIDE_EFFECTS);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
639:       assertEquals(1, Node.DECR_FLAG);
640:       assertEquals(57, Node.LAST_PROP);
641:       assertEquals(12, Node.COLUMN_BITS);
642:       assertEquals(55, Node.INFERRED_FUNCTION);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(8, Node.FLAG_NO_THROWS);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(56, Node.CHANGE_TIME);
647:       assertEquals(36, Node.QUOTED_PROP);
648:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
649:       assertEquals(37, Node.OPT_ARG_NAME);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(49, Node.DIRECT_EVAL);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertNotNull(iterable0);
654:       assertFalse(iterable0.contains(node2));
655:       
656:       boolean boolean0 = node0.isNew();
657:       assertFalse(boolean0);
658:       assertFalse(node0.isNot());
659:       assertFalse(node0.isObjectLit());
660:       assertFalse(node0.isAnd());
661:       assertFalse(node0.isWith());
662:       assertFalse(node0.isInstanceOf());
663:       assertFalse(node0.isScript());
664:       assertFalse(node0.isExprResult());
665:       assertFalse(node0.isFalse());
666:       assertFalse(node0.isThrow());
667:       assertFalse(node0.isLabelName());
668:       assertFalse(node0.isCast());
669:       assertFalse(node0.isAssignAdd());
670:       assertFalse(node0.isLabel());
671:       assertFalse(node0.isDo());
672:       assertFalse(node0.isString());
673:       assertFalse(node0.isWhile());
674:       assertFalse(node0.isContinue());
675:       assertFalse(node0.isAdd());
676:       assertFalse(node0.isOr());
677:       assertEquals((-1), node0.getSourcePosition());
678:       assertFalse(node0.isGetElem());
679:       assertFalse(node0.isName());
680:       assertFalse(node0.isAssign());
681:       assertFalse(node0.isDelProp());
682:       assertFalse(node0.isCall());
683:       assertFalse(node0.isBreak());
684:       assertFalse(node0.isGetProp());
685:       assertFalse(node0.isTypeOf());
686:       assertFalse(node0.isDec());
687:       assertFalse(node0.isComma());
688:       assertFalse(node0.isReturn());
689:       assertFalse(node0.hasChildren());
690:       assertFalse(node0.isDefaultCase());
691:       assertFalse(node0.isCatch());
692:       assertFalse(node0.isVoid());
693:       assertFalse(node0.isParamList());
694:       assertFalse(node0.isNull());
695:       assertFalse(node0.isTrue());
696:       assertFalse(node0.isDebugger());
697:       assertFalse(node0.isStringKey());
698:       assertFalse(node0.isEmpty());
699:       assertFalse(node0.isArrayLit());
700:       assertFalse(node0.isSetterDef());
701:       assertFalse(node0.isNew());
702:       assertFalse(node0.isFunction());
703:       assertEquals(0, node0.getChildCount());
704:       assertFalse(node0.isVar());
705:       assertFalse(node0.isCase());
706:       assertFalse(node0.hasMoreThanOneChild());
707:       assertFalse(node0.isInc());
708:       assertEquals((-1), node0.getLineno());
709:       assertFalse(node0.isIn());
710:       assertFalse(node0.isSwitch());
711:       assertFalse(node0.isNumber());
712:       assertFalse(node0.isNE());
713:       assertFalse(node0.isGetterDef());
714:       assertEquals((-1), node0.getCharno());
715:       assertFalse(node0.isFor());
716:       assertFalse(node0.isIf());
717:       assertFalse(node0.hasOneChild());
718:       assertFalse(node0.isBlock());
719:       assertFalse(node0.isTry());
720:       assertFalse(node0.isRegExp());
721:       assertFalse(node0.isHook());
722:       assertFalse(node0.isThis());
723:       assertEquals((-2042), node0.getType());
724:       assertFalse(node0.equals((Object)node2));
725:       assertFalse(node0.equals((Object)node1));
726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
727:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(32, Node.INCRDECR_PROP);
734:       assertEquals(51, Node.STATIC_SOURCE_FILE);
735:       assertEquals(46, Node.IS_NAMESPACE);
736:       assertEquals(30, Node.VAR_ARGS_NAME);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(54, Node.SLASH_V);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(40, Node.ORIGINALNAME_PROP);
741:       assertEquals(50, Node.FREE_CALL);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(57, Node.LAST_PROP);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(55, Node.INFERRED_FUNCTION);
752:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(4095, Node.COLUMN_MASK);
755:       assertEquals(56, Node.CHANGE_TIME);
756:       assertEquals(36, Node.QUOTED_PROP);
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       assertEquals(37, Node.OPT_ARG_NAME);
759:       assertEquals(48, Node.DIRECTIVES);
760:       assertEquals(49, Node.DIRECT_EVAL);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       
763:       node2.setSourceFileForTesting("");
764:       assertFalse(node1.isComma());
765:       assertFalse(node1.isThis());
766:       assertEquals(17, node1.getType());
767:       assertFalse(node1.isBreak());
768:       assertFalse(node1.isGetProp());
769:       assertFalse(node1.isThrow());
770:       assertEquals(213039, node1.getSourcePosition());
771:       assertFalse(node1.isHook());
772:       assertFalse(node1.isWith());
773:       assertFalse(node1.isFalse());
774:       assertFalse(node1.isInstanceOf());
775:       assertFalse(node1.isInc());
776:       assertFalse(node1.isExprResult());
777:       assertFalse(node1.isIn());
778:       assertFalse(node1.isNE());
779:       assertFalse(node1.isLabel());
780:       assertFalse(node1.isFor());
781:       assertFalse(node1.isLabelName());
782:       assertFalse(node1.isIf());
783:       assertFalse(node1.isAssignAdd());
784:       assertFalse(node1.isArrayLit());
785:       assertFalse(node1.hasMoreThanOneChild());
786:       assertFalse(node1.isRegExp());
787:       assertFalse(node1.isScript());
788:       assertFalse(node1.isBlock());
789:       assertFalse(node1.isTry());
790:       assertFalse(node1.isSwitch());
791:       assertFalse(node1.isCase());
792:       assertFalse(node1.hasOneChild());
793:       assertFalse(node1.isGetterDef());
794:       assertFalse(node1.isNumber());
795:       assertEquals(52, node1.getLineno());
796:       assertFalse(node1.isSetterDef());
797:       assertFalse(node1.isParamList());
798:       assertFalse(node1.isNull());
799:       assertEquals(47, node1.getCharno());
800:       assertFalse(node1.isName());
801:       assertFalse(node1.isStringKey());
802:       assertFalse(node1.isCatch());
803:       assertFalse(node1.isCall());
804:       assertFalse(node1.isVar());
805:       assertEquals(0, node1.getChildCount());
806:       assertFalse(node1.isTrue());
807:       assertFalse(node1.isFunction());
808:       assertFalse(node1.isVoid());
809:       assertFalse(node1.isNew());
810:       assertFalse(node1.isDo());
811:       assertFalse(node1.isDefaultCase());
812:       assertFalse(node1.isEmpty());
813:       assertFalse(node1.isOr());
814:       assertFalse(node1.isAdd());
815:       assertFalse(node1.isDec());
816:       assertFalse(node1.hasChildren());
817:       assertFalse(node1.isReturn());
818:       assertFalse(node1.isDelProp());
819:       assertFalse(node1.isCast());
820:       assertFalse(node1.isGetElem());
821:       assertFalse(node1.isAssign());
822:       assertFalse(node1.isTypeOf());
823:       assertFalse(node1.isContinue());
824:       assertFalse(node1.isDebugger());
825:       assertFalse(node1.isWhile());
826:       assertFalse(node1.isAnd());
827:       assertFalse(node1.isObjectLit());
828:       assertFalse(node1.isString());
829:       assertFalse(node1.isNot());
830:       assertFalse(node2.isBlock());
831:       assertFalse(node2.isVar());
832:       assertFalse(node2.isAdd());
833:       assertFalse(node2.isWhile());
834:       assertFalse(node2.isSetterDef());
835:       assertFalse(node2.isDo());
836:       assertFalse(node2.isNew());
837:       assertFalse(node2.isReturn());
838:       assertFalse(node2.isCatch());
839:       assertFalse(node2.hasMoreThanOneChild());
840:       assertFalse(node2.isTypeOf());
841:       assertFalse(node2.isDec());
842:       assertFalse(node2.isOr());
843:       assertFalse(node2.isNull());
844:       assertFalse(node2.isVoid());
845:       assertFalse(node2.isCall());
846:       assertFalse(node2.isGetElem());
847:       assertFalse(node2.isName());
848:       assertEquals((-1), node2.getLineno());
849:       assertFalse(node2.isTrue());
850:       assertFalse(node2.isRegExp());
851:       assertFalse(node2.isGetterDef());
852:       assertFalse(node2.isNumber());
853:       assertFalse(node2.isDefaultCase());
854:       assertFalse(node2.isFor());
855:       assertFalse(node2.isEmpty());
856:       assertFalse(node2.isScript());
857:       assertFalse(node2.isTry());
858:       assertFalse(node2.isAssignAdd());
859:       assertFalse(node2.isLabel());
860:       assertEquals(55, node2.getType());
861:       assertFalse(node2.isStringKey());
862:       assertFalse(node2.isParamList());
863:       assertFalse(node2.isSwitch());
864:       assertFalse(node2.isArrayLit());
865:       assertFalse(node2.isLabelName());
866:       assertFalse(node2.isHook());
867:       assertEquals((-1), node2.getCharno());
868:       assertFalse(node2.isFalse());
869:       assertFalse(node2.isString());
870:       assertFalse(node2.isThrow());
871:       assertFalse(node2.isInc());
872:       assertFalse(node2.isGetProp());
873:       assertFalse(node2.isCase());
874:       assertEquals(1, node2.getChildCount());
875:       assertFalse(node2.isIn());
876:       assertTrue(node2.hasChildren());
877:       assertFalse(node2.isInstanceOf());
878:       assertFalse(node2.isThis());
879:       assertFalse(node2.isComma());
880:       assertFalse(node2.isDelProp());
881:       assertFalse(node2.isBreak());
882:       assertFalse(node2.isIf());
883:       assertFalse(node2.isWith());
884:       assertFalse(node2.isNE());
885:       assertFalse(node2.isExprResult());
886:       assertFalse(node2.isCast());
887:       assertFalse(node2.isDebugger());
888:       assertFalse(node2.isFunction());
889:       assertFalse(node2.isAssign());
890:       assertTrue(node2.hasOneChild());
891:       assertFalse(node2.isObjectLit());
892:       assertFalse(node2.isContinue());
893:       assertEquals((-1), node2.getSourcePosition());
894:       assertFalse(node2.isNot());
895:       assertFalse(node2.isAnd());
896:       assertFalse(node1.equals((Object)node0));
897:       assertFalse(node1.equals((Object)node2));
898:       assertFalse(node2.equals((Object)node0));
899:       assertFalse(node2.equals((Object)node1));
900:       assertNotSame(node1, node2);
901:       assertNotSame(node2, node1);
902:       assertEquals(43, Node.IS_CONSTANT_NAME);
903:       assertEquals(55, Node.INFERRED_FUNCTION);
904:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
905:       assertEquals(53, Node.INPUT_ID);
906:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
907:       assertEquals(8, Node.FLAG_NO_THROWS);
908:       assertEquals(36, Node.QUOTED_PROP);
909:       assertEquals(29, Node.JSDOC_INFO_PROP);
910:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
911:       assertEquals(40, Node.ORIGINALNAME_PROP);
912:       assertEquals(39, Node.EMPTY_BLOCK);
913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
914:       assertEquals(2, Node.POST_FLAG);
915:       assertEquals(47, Node.IS_DISPATCHER);
916:       assertEquals(30, Node.VAR_ARGS_NAME);
917:       assertEquals(49, Node.DIRECT_EVAL);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(1, Node.DECR_FLAG);
920:       assertEquals(15, Node.NO_SIDE_EFFECTS);
921:       assertEquals(46, Node.IS_NAMESPACE);
922:       assertEquals(52, Node.LENGTH);
923:       assertEquals(54, Node.SLASH_V);
924:       assertEquals(51, Node.STATIC_SOURCE_FILE);
925:       assertEquals(57, Node.REFLECTED_OBJECT);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
929:       assertEquals(56, Node.CHANGE_TIME);
930:       assertEquals(37, Node.OPT_ARG_NAME);
931:       assertEquals(48, Node.DIRECTIVES);
932:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
933:       assertEquals(32, Node.INCRDECR_PROP);
934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
935:       assertEquals(4095, Node.COLUMN_MASK);
936:       assertEquals(12, Node.COLUMN_BITS);
937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
938:       assertEquals(8, Node.FLAG_NO_THROWS);
939:       assertEquals(39, Node.EMPTY_BLOCK);
940:       assertEquals(48, Node.DIRECTIVES);
941:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
942:       assertEquals(40, Node.ORIGINALNAME_PROP);
943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
944:       assertEquals(4095, Node.COLUMN_MASK);
945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
946:       assertEquals(36, Node.QUOTED_PROP);
947:       assertEquals(57, Node.LAST_PROP);
948:       assertEquals(57, Node.REFLECTED_OBJECT);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(52, Node.LENGTH);
951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(53, Node.INPUT_ID);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(2, Node.POST_FLAG);
958:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
959:       assertEquals(32, Node.INCRDECR_PROP);
960:       assertEquals(46, Node.IS_NAMESPACE);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(56, Node.CHANGE_TIME);
964:       assertEquals(49, Node.DIRECT_EVAL);
965:       assertEquals(30, Node.VAR_ARGS_NAME);
966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
967:       assertEquals(54, Node.SLASH_V);
968:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
969:       assertEquals(43, Node.IS_CONSTANT_NAME);
970:       assertEquals(50, Node.FREE_CALL);
971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
972:       assertEquals(1, Node.DECR_FLAG);
973:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
974:       
975:       Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
976:       assertFalse(node0.isNot());
977:       assertFalse(node0.isObjectLit());
978:       assertFalse(node0.isAnd());
979:       assertFalse(node0.isWith());
980:       assertFalse(node0.isInstanceOf());
981:       assertFalse(node0.isScript());
982:       assertFalse(node0.isExprResult());
983:       assertFalse(node0.isFalse());
984:       assertFalse(node0.isThrow());
985:       assertFalse(node0.isLabelName());
986:       assertFalse(node0.isCast());
987:       assertFalse(node0.isAssignAdd());
988:       assertFalse(node0.isLabel());
989:       assertFalse(node0.isDo());
990:       assertFalse(node0.isString());
991:       assertFalse(node0.isWhile());
992:       assertFalse(node0.isContinue());
993:       assertFalse(node0.isAdd());
994:       assertFalse(node0.isOr());
995:       assertEquals((-1), node0.getSourcePosition());
996:       assertFalse(node0.isGetElem());
997:       assertFalse(node0.isName());
998:       assertFalse(node0.isAssign());
999:       assertFalse(node0.isDelProp());
1000:       assertFalse(node0.isCall());
1001:       assertFalse(node0.isBreak());
1002:       assertFalse(node0.isGetProp());
1003:       assertFalse(node0.isTypeOf());
1004:       assertFalse(node0.isDec());
1005:       assertFalse(node0.isComma());
1006:       assertFalse(node0.isReturn());
1007:       assertFalse(node0.hasChildren());
1008:       assertFalse(node0.isDefaultCase());
1009:       assertFalse(node0.isCatch());
1010:       assertFalse(node0.isVoid());
1011:       assertFalse(node0.isParamList());
1012:       assertFalse(node0.isNull());
1013:       assertFalse(node0.isTrue());
1014:       assertFalse(node0.isDebugger());
1015:       assertFalse(node0.isStringKey());
1016:       assertFalse(node0.isEmpty());
1017:       assertFalse(node0.isArrayLit());
1018:       assertFalse(node0.isSetterDef());
1019:       assertFalse(node0.isNew());
1020:       assertFalse(node0.isFunction());
1021:       assertEquals(0, node0.getChildCount());
1022:       assertFalse(node0.isVar());
1023:       assertFalse(node0.isCase());
1024:       assertFalse(node0.hasMoreThanOneChild());
1025:       assertFalse(node0.isInc());
1026:       assertEquals((-1), node0.getLineno());
1027:       assertFalse(node0.isIn());
1028:       assertFalse(node0.isSwitch());
1029:       assertFalse(node0.isNumber());
1030:       assertFalse(node0.isNE());
1031:       assertFalse(node0.isGetterDef());
1032:       assertEquals((-1), node0.getCharno());
1033:       assertFalse(node0.isFor());
1034:       assertFalse(node0.isIf());
1035:       assertFalse(node0.hasOneChild());
1036:       assertFalse(node0.isBlock());
1037:       assertFalse(node0.isTry());
1038:       assertFalse(node0.isRegExp());
1039:       assertFalse(node0.isHook());
1040:       assertFalse(node0.isThis());
1041:       assertEquals((-2042), node0.getType());
1042:       assertFalse(node1.isComma());
1043:       assertFalse(node1.isThis());
1044:       assertEquals(17, node1.getType());
1045:       assertFalse(node1.isBreak());
1046:       assertFalse(node1.isGetProp());
1047:       assertFalse(node1.isThrow());
1048:       assertFalse(node1.isHook());
1049:       assertFalse(node1.isWith());
1050:       assertFalse(node1.isFalse());
1051:       assertFalse(node1.isInstanceOf());
1052:       assertFalse(node1.isInc());
1053:       assertFalse(node1.isExprResult());
1054:       assertFalse(node1.isIn());
1055:       assertFalse(node1.isNE());
1056:       assertFalse(node1.isLabel());
1057:       assertEquals((-1), node1.getLineno());
1058:       assertFalse(node1.isFor());
1059:       assertFalse(node1.isLabelName());
1060:       assertFalse(node1.isIf());
1061:       assertFalse(node1.isAssignAdd());
1062:       assertFalse(node1.isArrayLit());
1063:       assertFalse(node1.hasMoreThanOneChild());
1064:       assertFalse(node1.isRegExp());
1065:       assertFalse(node1.isScript());
1066:       assertFalse(node1.isBlock());
1067:       assertEquals((-1), node1.getCharno());
1068:       assertFalse(node1.isTry());
1069:       assertFalse(node1.isSwitch());
1070:       assertFalse(node1.isCase());
1071:       assertFalse(node1.hasOneChild());
1072:       assertFalse(node1.isGetterDef());
1073:       assertFalse(node1.isNumber());
1074:       assertFalse(node1.isSetterDef());
1075:       assertFalse(node1.isParamList());
1076:       assertFalse(node1.isNull());
1077:       assertFalse(node1.isName());
1078:       assertFalse(node1.isStringKey());
1079:       assertFalse(node1.isCatch());
1080:       assertFalse(node1.isCall());
1081:       assertFalse(node1.isVar());
1082:       assertEquals(0, node1.getChildCount());
1083:       assertFalse(node1.isTrue());
1084:       assertFalse(node1.isFunction());
1085:       assertFalse(node1.isVoid());
1086:       assertFalse(node1.isNew());
1087:       assertFalse(node1.isDo());
1088:       assertFalse(node1.isDefaultCase());
1089:       assertFalse(node1.isEmpty());
1090:       assertFalse(node1.isOr());
1091:       assertFalse(node1.isAdd());
1092:       assertEquals((-1), node1.getSourcePosition());
1093:       assertFalse(node1.isDec());
1094:       assertFalse(node1.hasChildren());
1095:       assertFalse(node1.isReturn());
1096:       assertFalse(node1.isDelProp());
1097:       assertFalse(node1.isCast());
1098:       assertFalse(node1.isGetElem());
1099:       assertFalse(node1.isAssign());
1100:       assertFalse(node1.isTypeOf());
1101:       assertFalse(node1.isContinue());
1102:       assertFalse(node1.isDebugger());
1103:       assertFalse(node1.isWhile());
1104:       assertFalse(node1.isAnd());
1105:       assertFalse(node1.isObjectLit());
1106:       assertFalse(node1.isString());
1107:       assertFalse(node1.isNot());
1108:       assertEquals((-1), node3.getSourcePosition());
1109:       assertFalse(node3.isTypeOf());
1110:       assertFalse(node3.isDec());
1111:       assertFalse(node3.isOr());
1112:       assertEquals((-1), node3.getLineno());
1113:       assertFalse(node3.isNumber());
1114:       assertFalse(node3.isGetElem());
1115:       assertFalse(node3.isContinue());
1116:       assertFalse(node3.hasMoreThanOneChild());
1117:       assertFalse(node3.hasOneChild());
1118:       assertFalse(node3.isAssign());
1119:       assertFalse(node3.isDo());
1120:       assertFalse(node3.isReturn());
1121:       assertFalse(node3.isWhile());
1122:       assertFalse(node3.isLabel());
1123:       assertFalse(node3.hasChildren());
1124:       assertFalse(node3.isAssignAdd());
1125:       assertFalse(node3.isExprResult());
1126:       assertFalse(node3.isNew());
1127:       assertFalse(node3.isWith());
1128:       assertFalse(node3.isAdd());
1129:       assertFalse(node3.isCall());
1130:       assertFalse(node3.isName());
1131:       assertFalse(node3.isNull());
1132:       assertFalse(node3.isParamList());
1133:       assertFalse(node3.isThis());
1134:       assertFalse(node3.isCatch());
1135:       assertEquals(17, node3.getType());
1136:       assertFalse(node3.isInstanceOf());
1137:       assertEquals(0, node3.getChildCount());
1138:       assertFalse(node3.isDefaultCase());
1139:       assertFalse(node3.isHook());
1140:       assertFalse(node3.isBlock());
1141:       assertFalse(node3.isVar());
1142:       assertEquals((-1), node3.getCharno());
1143:       assertFalse(node3.isSwitch());
1144:       assertFalse(node3.isTry());
1145:       assertFalse(node3.isScript());
1146:       assertFalse(node3.isArrayLit());
1147:       assertFalse(node3.isLabelName());
1148:       assertFalse(node3.isStringKey());
1149:       assertFalse(node3.isGetterDef());
1150:       assertFalse(node3.isIn());
1151:       assertFalse(node3.isEmpty());
1152:       assertFalse(node3.isCase());
1153:       assertFalse(node3.isFor());
1154:       assertFalse(node3.isTrue());
1155:       assertFalse(node3.isInc());
1156:       assertFalse(node3.isRegExp());
1157:       assertFalse(node3.isVoid());
1158:       assertFalse(node3.isDelProp());
1159:       assertFalse(node3.isIf());
1160:       assertFalse(node3.isNE());
1161:       assertFalse(node3.isComma());
1162:       assertFalse(node3.isGetProp());
1163:       assertFalse(node3.isSetterDef());
1164:       assertFalse(node3.isBreak());
1165:       assertFalse(node3.isFalse());
1166:       assertFalse(node3.isThrow());
1167:       assertFalse(node3.isFunction());
1168:       assertFalse(node3.isDebugger());
1169:       assertFalse(node3.isString());
1170:       assertFalse(node3.isCast());
1171:       assertFalse(node3.isObjectLit());
1172:       assertFalse(node3.isAnd());
1173:       assertFalse(node3.isNot());
1174:       assertFalse(node0.equals((Object)node2));
1175:       assertFalse(node0.equals((Object)node1));
1176:       assertFalse(node1.equals((Object)node0));
1177:       assertFalse(node1.equals((Object)node2));
1178:       assertFalse(node3.equals((Object)node2));
1179:       assertFalse(node3.equals((Object)node0));
1180:       assertNotSame(node1, node2);
1181:       assertSame(node1, node3);
1182:       assertNotSame(node3, node2);
1183:       assertSame(node3, node1);
1184:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1185:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1186:       assertEquals(53, Node.INPUT_ID);
1187:       assertEquals(29, Node.JSDOC_INFO_PROP);
1188:       assertEquals(2, Node.POST_FLAG);
1189:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1190:       assertEquals(47, Node.IS_DISPATCHER);
1191:       assertEquals(32, Node.INCRDECR_PROP);
1192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1193:       assertEquals(46, Node.IS_NAMESPACE);
1194:       assertEquals(30, Node.VAR_ARGS_NAME);
1195:       assertEquals(43, Node.IS_CONSTANT_NAME);
1196:       assertEquals(54, Node.SLASH_V);
1197:       assertEquals(57, Node.REFLECTED_OBJECT);
1198:       assertEquals(40, Node.ORIGINALNAME_PROP);
1199:       assertEquals(50, Node.FREE_CALL);
1200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1201:       assertEquals(52, Node.LENGTH);
1202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1204:       assertEquals(39, Node.EMPTY_BLOCK);
1205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1206:       assertEquals(1, Node.DECR_FLAG);
1207:       assertEquals(57, Node.LAST_PROP);
1208:       assertEquals(12, Node.COLUMN_BITS);
1209:       assertEquals(55, Node.INFERRED_FUNCTION);
1210:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1211:       assertEquals(8, Node.FLAG_NO_THROWS);
1212:       assertEquals(4095, Node.COLUMN_MASK);
1213:       assertEquals(56, Node.CHANGE_TIME);
1214:       assertEquals(36, Node.QUOTED_PROP);
1215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1216:       assertEquals(37, Node.OPT_ARG_NAME);
1217:       assertEquals(48, Node.DIRECTIVES);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1220:       assertEquals(43, Node.IS_CONSTANT_NAME);
1221:       assertEquals(55, Node.INFERRED_FUNCTION);
1222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1223:       assertEquals(53, Node.INPUT_ID);
1224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1225:       assertEquals(8, Node.FLAG_NO_THROWS);
1226:       assertEquals(36, Node.QUOTED_PROP);
1227:       assertEquals(29, Node.JSDOC_INFO_PROP);
1228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1229:       assertEquals(40, Node.ORIGINALNAME_PROP);
1230:       assertEquals(39, Node.EMPTY_BLOCK);
1231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1232:       assertEquals(2, Node.POST_FLAG);
1233:       assertEquals(47, Node.IS_DISPATCHER);
1234:       assertEquals(30, Node.VAR_ARGS_NAME);
1235:       assertEquals(49, Node.DIRECT_EVAL);
1236:       assertEquals(57, Node.LAST_PROP);
1237:       assertEquals(1, Node.DECR_FLAG);
1238:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1239:       assertEquals(46, Node.IS_NAMESPACE);
1240:       assertEquals(52, Node.LENGTH);
1241:       assertEquals(54, Node.SLASH_V);
1242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1243:       assertEquals(57, Node.REFLECTED_OBJECT);
1244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1245:       assertEquals(50, Node.FREE_CALL);
1246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1247:       assertEquals(56, Node.CHANGE_TIME);
1248:       assertEquals(37, Node.OPT_ARG_NAME);
1249:       assertEquals(48, Node.DIRECTIVES);
1250:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1251:       assertEquals(32, Node.INCRDECR_PROP);
1252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1253:       assertEquals(4095, Node.COLUMN_MASK);
1254:       assertEquals(12, Node.COLUMN_BITS);
1255:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1257:       assertEquals(57, Node.LAST_PROP);
1258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1260:       assertEquals(30, Node.VAR_ARGS_NAME);
1261:       assertEquals(46, Node.IS_NAMESPACE);
1262:       assertEquals(57, Node.REFLECTED_OBJECT);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(40, Node.ORIGINALNAME_PROP);
1265:       assertEquals(37, Node.OPT_ARG_NAME);
1266:       assertEquals(49, Node.DIRECT_EVAL);
1267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1268:       assertEquals(47, Node.IS_DISPATCHER);
1269:       assertEquals(56, Node.CHANGE_TIME);
1270:       assertEquals(29, Node.JSDOC_INFO_PROP);
1271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1272:       assertEquals(8, Node.FLAG_NO_THROWS);
1273:       assertEquals(2, Node.POST_FLAG);
1274:       assertEquals(52, Node.LENGTH);
1275:       assertEquals(53, Node.INPUT_ID);
1276:       assertEquals(55, Node.INFERRED_FUNCTION);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(39, Node.EMPTY_BLOCK);
1279:       assertEquals(43, Node.IS_CONSTANT_NAME);
1280:       assertEquals(36, Node.QUOTED_PROP);
1281:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1282:       assertEquals(4095, Node.COLUMN_MASK);
1283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1284:       assertEquals(48, Node.DIRECTIVES);
1285:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1286:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(32, Node.INCRDECR_PROP);
1289:       assertEquals(12, Node.COLUMN_BITS);
1290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1291:       assertEquals(1, Node.DECR_FLAG);
1292:       assertNotNull(node3);
1293:       
1294:       Node node4 = Node.newString("", 31, 2);
1295:       assertFalse(node4.isTypeOf());
1296:       assertFalse(node4.isDec());
1297:       assertFalse(node4.isNumber());
1298:       assertFalse(node4.hasChildren());
1299:       assertFalse(node4.isLabel());
1300:       assertFalse(node4.isAssign());
1301:       assertFalse(node4.isOr());
1302:       assertFalse(node4.hasOneChild());
1303:       assertFalse(node4.isReturn());
1304:       assertFalse(node4.isAssignAdd());
1305:       assertFalse(node4.isDo());
1306:       assertFalse(node4.isWhile());
1307:       assertFalse(node4.isExprResult());
1308:       assertFalse(node4.isBlock());
1309:       assertFalse(node4.isWith());
1310:       assertFalse(node4.hasMoreThanOneChild());
1311:       assertFalse(node4.isInstanceOf());
1312:       assertFalse(node4.isCall());
1313:       assertFalse(node4.isGetElem());
1314:       assertFalse(node4.isName());
1315:       assertFalse(node4.isBreak());
1316:       assertFalse(node4.isSetterDef());
1317:       assertFalse(node4.isFalse());
1318:       assertFalse(node4.isComma());
1319:       assertFalse(node4.isThrow());
1320:       assertFalse(node4.isGetProp());
1321:       assertEquals(40, node4.getType());
1322:       assertFalse(node4.isDebugger());
1323:       assertFalse(node4.isContinue());
1324:       assertFalse(node4.isFunction());
1325:       assertFalse(node4.isObjectLit());
1326:       assertFalse(node4.isNot());
1327:       assertFalse(node4.isCast());
1328:       assertFalse(node4.isAnd());
1329:       assertFalse(node4.isIf());
1330:       assertFalse(node4.isNE());
1331:       assertFalse(node4.isFor());
1332:       assertFalse(node4.isEmpty());
1333:       assertFalse(node4.isGetterDef());
1334:       assertFalse(node4.isIn());
1335:       assertFalse(node4.isCase());
1336:       assertFalse(node4.isTry());
1337:       assertEquals(2, node4.getCharno());
1338:       assertFalse(node4.isTrue());
1339:       assertFalse(node4.isInc());
1340:       assertFalse(node4.isRegExp());
1341:       assertFalse(node4.isCatch());
1342:       assertFalse(node4.isDelProp());
1343:       assertFalse(node4.isVoid());
1344:       assertEquals(126978, node4.getSourcePosition());
1345:       assertFalse(node4.isNull());
1346:       assertFalse(node4.isParamList());
1347:       assertFalse(node4.isThis());
1348:       assertEquals(0, node4.getChildCount());
1349:       assertFalse(node4.isHook());
1350:       assertFalse(node4.isVar());
1351:       assertFalse(node4.isAdd());
1352:       assertTrue(node4.isString());
1353:       assertFalse(node4.isNew());
1354:       assertFalse(node4.isDefaultCase());
1355:       assertFalse(node4.isSwitch());
1356:       assertFalse(node4.isScript());
1357:       assertFalse(node4.isArrayLit());
1358:       assertFalse(node4.isStringKey());
1359:       assertEquals(31, node4.getLineno());
1360:       assertFalse(node4.isLabelName());
1361:       assertFalse(node4.equals((Object)node3));
1362:       assertFalse(node4.equals((Object)node2));
1363:       assertFalse(node4.equals((Object)node1));
1364:       assertFalse(node4.equals((Object)node0));
1365:       assertEquals(1, Node.DECR_FLAG);
1366:       assertEquals(30, Node.VAR_ARGS_NAME);
1367:       assertEquals(49, Node.DIRECT_EVAL);
1368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1369:       assertEquals(57, Node.LAST_PROP);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(46, Node.IS_NAMESPACE);
1372:       assertEquals(54, Node.SLASH_V);
1373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1374:       assertEquals(37, Node.OPT_ARG_NAME);
1375:       assertEquals(2, Node.POST_FLAG);
1376:       assertEquals(40, Node.ORIGINALNAME_PROP);
1377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1378:       assertEquals(56, Node.CHANGE_TIME);
1379:       assertEquals(57, Node.REFLECTED_OBJECT);
1380:       assertEquals(47, Node.IS_DISPATCHER);
1381:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1382:       assertEquals(53, Node.INPUT_ID);
1383:       assertEquals(52, Node.LENGTH);
1384:       assertEquals(8, Node.FLAG_NO_THROWS);
1385:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1386:       assertEquals(55, Node.INFERRED_FUNCTION);
1387:       assertEquals(39, Node.EMPTY_BLOCK);
1388:       assertEquals(29, Node.JSDOC_INFO_PROP);
1389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1390:       assertEquals(43, Node.IS_CONSTANT_NAME);
1391:       assertEquals(36, Node.QUOTED_PROP);
1392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(4095, Node.COLUMN_MASK);
1396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1397:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1398:       assertEquals(50, Node.FREE_CALL);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1401:       assertNotNull(node4);
1402:       
1403:       Node node5 = Node.newNumber((double) 32, 241, 38);
1404:       assertFalse(node5.isString());
1405:       assertFalse(node5.isInc());
1406:       assertFalse(node5.isSwitch());
1407:       assertFalse(node5.isGetterDef());
1408:       assertFalse(node5.isBreak());
1409:       assertFalse(node5.isFor());
1410:       assertFalse(node5.isThis());
1411:       assertFalse(node5.isComma());
1412:       assertEquals(987174, node5.getSourcePosition());
1413:       assertTrue(node5.isNumber());
1414:       assertFalse(node5.isHook());
1415:       assertFalse(node5.isGetProp());
1416:       assertFalse(node5.isCase());
1417:       assertFalse(node5.isTry());
1418:       assertFalse(node5.isDebugger());
1419:       assertFalse(node5.isNot());
1420:       assertFalse(node5.isWith());
1421:       assertFalse(node5.isRegExp());
1422:       assertFalse(node5.isObjectLit());
1423:       assertFalse(node5.isFunction());
1424:       assertFalse(node5.isInstanceOf());
1425:       assertFalse(node5.isCatch());
1426:       assertFalse(node5.isCast());
1427:       assertFalse(node5.isAnd());
1428:       assertFalse(node5.isIf());
1429:       assertFalse(node5.isNE());
1430:       assertFalse(node5.isSetterDef());
1431:       assertFalse(node5.isFalse());
1432:       assertFalse(node5.isIn());
1433:       assertFalse(node5.isThrow());
1434:       assertFalse(node5.isWhile());
1435:       assertEquals(39, node5.getType());
1436:       assertFalse(node5.isContinue());
1437:       assertFalse(node5.hasMoreThanOneChild());
1438:       assertFalse(node5.isCall());
1439:       assertFalse(node5.isStringKey());
1440:       assertEquals(38, node5.getCharno());
1441:       assertFalse(node5.isName());
1442:       assertFalse(node5.isDec());
1443:       assertFalse(node5.hasChildren());
1444:       assertFalse(node5.isGetElem());
1445:       assertFalse(node5.isAssign());
1446:       assertFalse(node5.isTypeOf());
1447:       assertFalse(node5.hasOneChild());
1448:       assertFalse(node5.isReturn());
1449:       assertFalse(node5.isBlock());
1450:       assertFalse(node5.isDefaultCase());
1451:       assertFalse(node5.isTrue());
1452:       assertFalse(node5.isExprResult());
1453:       assertFalse(node5.isScript());
1454:       assertFalse(node5.isArrayLit());
1455:       assertFalse(node5.isVoid());
1456:       assertFalse(node5.isParamList());
1457:       assertFalse(node5.isLabelName());
1458:       assertFalse(node5.isDelProp());
1459:       assertFalse(node5.isEmpty());
1460:       assertFalse(node5.isNull());
1461:       assertFalse(node5.isOr());
1462:       assertEquals(0, node5.getChildCount());
1463:       assertFalse(node5.isLabel());
1464:       assertFalse(node5.isVar());
1465:       assertFalse(node5.isAdd());
1466:       assertEquals(241, node5.getLineno());
1467:       assertFalse(node5.isNew());
1468:       assertFalse(node5.isAssignAdd());
1469:       assertFalse(node5.isDo());
1470:       assertFalse(node5.equals((Object)node1));
1471:       assertFalse(node5.equals((Object)node3));
1472:       assertFalse(node5.equals((Object)node4));
1473:       assertFalse(node5.equals((Object)node2));
1474:       assertFalse(node5.equals((Object)node0));
1475:       assertNotSame(node5, node0);
1476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1477:       assertEquals(50, Node.FREE_CALL);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(57, Node.REFLECTED_OBJECT);
1480:       assertEquals(52, Node.LENGTH);
1481:       assertEquals(8, Node.FLAG_NO_THROWS);
1482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1483:       assertEquals(55, Node.INFERRED_FUNCTION);
1484:       assertEquals(39, Node.EMPTY_BLOCK);
1485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1486:       assertEquals(1, Node.DECR_FLAG);
1487:       assertEquals(49, Node.DIRECT_EVAL);
1488:       assertEquals(36, Node.QUOTED_PROP);
1489:       assertEquals(12, Node.COLUMN_BITS);
1490:       assertEquals(48, Node.DIRECTIVES);
1491:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1493:       assertEquals(37, Node.OPT_ARG_NAME);
1494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1495:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1496:       assertEquals(4095, Node.COLUMN_MASK);
1497:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(56, Node.CHANGE_TIME);
1500:       assertEquals(32, Node.INCRDECR_PROP);
1501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1502:       assertEquals(29, Node.JSDOC_INFO_PROP);
1503:       assertEquals(53, Node.INPUT_ID);
1504:       assertEquals(30, Node.VAR_ARGS_NAME);
1505:       assertEquals(57, Node.LAST_PROP);
1506:       assertEquals(46, Node.IS_NAMESPACE);
1507:       assertEquals(43, Node.IS_CONSTANT_NAME);
1508:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1509:       assertEquals(54, Node.SLASH_V);
1510:       assertEquals(2, Node.POST_FLAG);
1511:       assertEquals(40, Node.ORIGINALNAME_PROP);
1512:       assertNotNull(node5);
1513:       
1514:       Node node6 = Node.newString("`[[5`~'ZD|cNsy", 37, 48);
1515:       assertFalse(node6.isTry());
1516:       assertFalse(node6.isVoid());
1517:       assertFalse(node6.isTrue());
1518:       assertFalse(node6.isDebugger());
1519:       assertFalse(node6.isFor());
1520:       assertFalse(node6.isIf());
1521:       assertFalse(node6.isDelProp());
1522:       assertFalse(node6.isRegExp());
1523:       assertFalse(node6.isCatch());
1524:       assertFalse(node6.isFunction());
1525:       assertFalse(node6.isArrayLit());
1526:       assertEquals(151600, node6.getSourcePosition());
1527:       assertFalse(node6.isParamList());
1528:       assertFalse(node6.isCase());
1529:       assertFalse(node6.isGetterDef());
1530:       assertTrue(node6.isString());
1531:       assertFalse(node6.isHook());
1532:       assertFalse(node6.isBlock());
1533:       assertFalse(node6.isThrow());
1534:       assertFalse(node6.isFalse());
1535:       assertEquals(37, node6.getLineno());
1536:       assertFalse(node6.hasMoreThanOneChild());
1537:       assertFalse(node6.isContinue());
1538:       assertFalse(node6.isIn());
1539:       assertEquals(40, node6.getType());
1540:       assertFalse(node6.isNE());
1541:       assertFalse(node6.isInc());
1542:       assertFalse(node6.isSetterDef());
1543:       assertFalse(node6.hasOneChild());
1544:       assertFalse(node6.isWith());
1545:       assertFalse(node6.hasChildren());
1546:       assertFalse(node6.isDec());
1547:       assertFalse(node6.isTypeOf());
1548:       assertFalse(node6.isAssign());
1549:       assertFalse(node6.isLabelName());
1550:       assertFalse(node6.isExprResult());
1551:       assertFalse(node6.isInstanceOf());
1552:       assertFalse(node6.isGetElem());
1553:       assertFalse(node6.isCast());
1554:       assertFalse(node6.isReturn());
1555:       assertFalse(node6.isComma());
1556:       assertFalse(node6.isThis());
1557:       assertFalse(node6.isAnd());
1558:       assertFalse(node6.isWhile());
1559:       assertFalse(node6.isNumber());
1560:       assertFalse(node6.isObjectLit());
1561:       assertFalse(node6.isNot());
1562:       assertFalse(node6.isGetProp());
1563:       assertFalse(node6.isScript());
1564:       assertFalse(node6.isNew());
1565:       assertFalse(node6.isSwitch());
1566:       assertFalse(node6.isStringKey());
1567:       assertFalse(node6.isVar());
1568:       assertFalse(node6.isBreak());
1569:       assertFalse(node6.isName());
1570:       assertFalse(node6.isCall());
1571:       assertFalse(node6.isLabel());
1572:       assertFalse(node6.isAssignAdd());
1573:       assertEquals(0, node6.getChildCount());
1574:       assertFalse(node6.isOr());
1575:       assertEquals(48, node6.getCharno());
1576:       assertFalse(node6.isNull());
1577:       assertFalse(node6.isDefaultCase());
1578:       assertFalse(node6.isDo());
1579:       assertFalse(node6.isEmpty());
1580:       assertFalse(node6.isAdd());
1581:       assertFalse(node6.equals((Object)node0));
1582:       assertFalse(node6.equals((Object)node4));
1583:       assertFalse(node6.equals((Object)node5));
1584:       assertFalse(node6.equals((Object)node3));
1585:       assertFalse(node6.equals((Object)node1));
1586:       assertFalse(node6.equals((Object)node2));
1587:       assertNotSame(node6, node4);
1588:       assertEquals(37, Node.OPT_ARG_NAME);
1589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1590:       assertEquals(56, Node.CHANGE_TIME);
1591:       assertEquals(47, Node.IS_DISPATCHER);
1592:       assertEquals(32, Node.INCRDECR_PROP);
1593:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1594:       assertEquals(29, Node.JSDOC_INFO_PROP);
1595:       assertEquals(46, Node.IS_NAMESPACE);
1596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1599:       assertEquals(1, Node.DECR_FLAG);
1600:       assertEquals(49, Node.DIRECT_EVAL);
1601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1602:       assertEquals(4095, Node.COLUMN_MASK);
1603:       assertEquals(12, Node.COLUMN_BITS);
1604:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1605:       assertEquals(8, Node.FLAG_NO_THROWS);
1606:       assertEquals(39, Node.EMPTY_BLOCK);
1607:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1608:       assertEquals(48, Node.DIRECTIVES);
1609:       assertEquals(55, Node.INFERRED_FUNCTION);
1610:       assertEquals(57, Node.REFLECTED_OBJECT);
1611:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1612:       assertEquals(52, Node.LENGTH);
1613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1614:       assertEquals(36, Node.QUOTED_PROP);
1615:       assertEquals(50, Node.FREE_CALL);
1616:       assertEquals(43, Node.IS_CONSTANT_NAME);
1617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1618:       assertEquals(53, Node.INPUT_ID);
1619:       assertEquals(54, Node.SLASH_V);
1620:       assertEquals(57, Node.LAST_PROP);
1621:       assertEquals(40, Node.ORIGINALNAME_PROP);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(30, Node.VAR_ARGS_NAME);
1624:       assertNotNull(node6);
1625:       
1626:       // Undeclared exception!
1627:       try { 
1628:         node5.getChildBefore(node6);
1629:         fail("Expecting exception: NullPointerException");
1630:       
1631:       } catch(NullPointerException e) {
1632:          //
1633:          // no message in exception (getMessage() returned null)
1634:          //
1635:          verifyException("com.google.javascript.rhino.Node", e);
1636:       }
1637:   }
1638: }
RegularFileObject[/tmp/EvoSuite_71_1629223340787/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_71_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_71_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_71_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:21.180 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(node0);

Node node1 = new Node(17, 52, 47);
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(17, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(213039, node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(52, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(47, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node1);

Node node2 = new Node(55, node1);
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(17, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(213039, node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(52, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(47, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertEquals(55, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node2);

node0.setType((-2042));
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-2042), node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-2042), node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));

boolean boolean0 = node0.isNew();
assertFalse(boolean0);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-2042), node0.getType());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node2.setSourceFileForTesting("");
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(17, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(213039, node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(52, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(47, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertEquals(55, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertEquals((-2042), node0.getType());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(17, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isExprResult());
assertFalse(node3.isNew());
assertFalse(node3.isWith());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isCatch());
assertEquals(17, node3.getType());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isBreak());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isString());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node1, node2);
assertSame(node1, node3);
assertNotSame(node3, node2);
assertSame(node3, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node3);

Node node4 = Node.newString("", 31, 2);
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isNumber());
assertFalse(node4.hasChildren());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertFalse(node4.isOr());
assertFalse(node4.hasOneChild());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isWhile());
assertFalse(node4.isExprResult());
assertFalse(node4.isBlock());
assertFalse(node4.isWith());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCall());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertFalse(node4.isBreak());
assertFalse(node4.isSetterDef());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertEquals(40, node4.getType());
assertFalse(node4.isDebugger());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isCase());
assertFalse(node4.isTry());
assertEquals(2, node4.getCharno());
assertFalse(node4.isTrue());
assertFalse(node4.isInc());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertEquals(126978, node4.getSourcePosition());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isThis());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isHook());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertTrue(node4.isString());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isArrayLit());
assertFalse(node4.isStringKey());
assertEquals(31, node4.getLineno());
assertFalse(node4.isLabelName());
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node4);

Node node5 = Node.newNumber((double) 32, 241, 38);
assertFalse(node5.isString());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertFalse(node5.isGetterDef());
assertFalse(node5.isBreak());
assertFalse(node5.isFor());
assertFalse(node5.isThis());
assertFalse(node5.isComma());
assertEquals(987174, node5.getSourcePosition());
assertTrue(node5.isNumber());
assertFalse(node5.isHook());
assertFalse(node5.isGetProp());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertFalse(node5.isDebugger());
assertFalse(node5.isNot());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node5.isObjectLit());
assertFalse(node5.isFunction());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCatch());
assertFalse(node5.isCast());
assertFalse(node5.isAnd());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isSetterDef());
assertFalse(node5.isFalse());
assertFalse(node5.isIn());
assertFalse(node5.isThrow());
assertFalse(node5.isWhile());
assertEquals(39, node5.getType());
assertFalse(node5.isContinue());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertEquals(38, node5.getCharno());
assertFalse(node5.isName());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.hasOneChild());
assertFalse(node5.isReturn());
assertFalse(node5.isBlock());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isScript());
assertFalse(node5.isArrayLit());
assertFalse(node5.isVoid());
assertFalse(node5.isParamList());
assertFalse(node5.isLabelName());
assertFalse(node5.isDelProp());
assertFalse(node5.isEmpty());
assertFalse(node5.isNull());
assertFalse(node5.isOr());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isVar());
assertFalse(node5.isAdd());
assertEquals(241, node5.getLineno());
assertFalse(node5.isNew());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertNotSame(node5, node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node5);

Node node6 = Node.newString("`[[5`~'ZD|cNsy", 37, 48);
assertFalse(node6.isTry());
assertFalse(node6.isVoid());
assertFalse(node6.isTrue());
assertFalse(node6.isDebugger());
assertFalse(node6.isFor());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertFalse(node6.isRegExp());
assertFalse(node6.isCatch());
assertFalse(node6.isFunction());
assertFalse(node6.isArrayLit());
assertEquals(151600, node6.getSourcePosition());
assertFalse(node6.isParamList());
assertFalse(node6.isCase());
assertFalse(node6.isGetterDef());
assertTrue(node6.isString());
assertFalse(node6.isHook());
assertFalse(node6.isBlock());
assertFalse(node6.isThrow());
assertFalse(node6.isFalse());
assertEquals(37, node6.getLineno());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isContinue());
assertFalse(node6.isIn());
assertEquals(40, node6.getType());
assertFalse(node6.isNE());
assertFalse(node6.isInc());
assertFalse(node6.isSetterDef());
assertFalse(node6.hasOneChild());
assertFalse(node6.isWith());
assertFalse(node6.hasChildren());
assertFalse(node6.isDec());
assertFalse(node6.isTypeOf());
assertFalse(node6.isAssign());
assertFalse(node6.isLabelName());
assertFalse(node6.isExprResult());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isGetElem());
assertFalse(node6.isCast());
assertFalse(node6.isReturn());
assertFalse(node6.isComma());
assertFalse(node6.isThis());
assertFalse(node6.isAnd());
assertFalse(node6.isWhile());
assertFalse(node6.isNumber());
assertFalse(node6.isObjectLit());
assertFalse(node6.isNot());
assertFalse(node6.isGetProp());
assertFalse(node6.isScript());
assertFalse(node6.isNew());
assertFalse(node6.isSwitch());
assertFalse(node6.isStringKey());
assertFalse(node6.isVar());
assertFalse(node6.isBreak());
assertFalse(node6.isName());
assertFalse(node6.isCall());
assertFalse(node6.isLabel());
assertFalse(node6.isAssignAdd());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isOr());
assertEquals(48, node6.getCharno());
assertFalse(node6.isNull());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isDo());
assertFalse(node6.isEmpty());
assertFalse(node6.isAdd());
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));
assertNotSame(node6, node4);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node6);

node5.getChildBefore(node6);

[MASTER] 18:02:21.463 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1629223341388/com/google/javascript/rhino/Node_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1629223341388/com/google/javascript/rhino/Node_73_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:21.463 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:21.463 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:21.463 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 753
[MASTER] 18:02:21.464 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1629223341388/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_73_tmp__ESTest extends Node_73_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0, 124, 124);
22:       assertFalse(node0.isTry());
23:       assertFalse(node0.isArrayLit());
24:       assertEquals(508028, node0.getSourcePosition());
25:       assertFalse(node0.isFunction());
26:       assertFalse(node0.isEmpty());
27:       assertFalse(node0.isDelProp());
28:       assertFalse(node0.isGetterDef());
29:       assertFalse(node0.isIf());
30:       assertFalse(node0.isVoid());
31:       assertFalse(node0.isDebugger());
32:       assertFalse(node0.isTrue());
33:       assertFalse(node0.isNE());
34:       assertEquals(124, node0.getLineno());
35:       assertFalse(node0.isIn());
36:       assertEquals(0, node0.getChildCount());
37:       assertFalse(node0.isSetterDef());
38:       assertFalse(node0.isDefaultCase());
39:       assertFalse(node0.isVar());
40:       assertFalse(node0.isHook());
41:       assertFalse(node0.isInc());
42:       assertFalse(node0.isSwitch());
43:       assertFalse(node0.isParamList());
44:       assertFalse(node0.isStringKey());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.isInstanceOf());
48:       assertFalse(node0.isWith());
49:       assertFalse(node0.isCase());
50:       assertFalse(node0.isRegExp());
51:       assertEquals(39, node0.getType());
52:       assertFalse(node0.isBlock());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.isFor());
55:       assertEquals(124, node0.getCharno());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isExprResult());
58:       assertFalse(node0.isGetElem());
59:       assertFalse(node0.isScript());
60:       assertFalse(node0.isCast());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isAnd());
64:       assertFalse(node0.isOr());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.isContinue());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isFalse());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isReturn());
78:       assertTrue(node0.isNumber());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isString());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isAssign());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.isWhile());
88:       assertEquals(37, Node.OPT_ARG_NAME);
89:       assertEquals(56, Node.CHANGE_TIME);
90:       assertEquals(46, Node.IS_NAMESPACE);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(43, Node.IS_CONSTANT_NAME);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(50, Node.FREE_CALL);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(52, Node.LENGTH);
118:       assertEquals(57, Node.REFLECTED_OBJECT);
119:       assertEquals(36, Node.QUOTED_PROP);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertNotNull(node0);
125:       
126:       String string0 = "}?Zy4Up-D>t[";
127:       node0.putProp(124, "}?Zy4Up-D>t[");
128:       assertFalse(node0.isTry());
129:       assertFalse(node0.isArrayLit());
130:       assertEquals(508028, node0.getSourcePosition());
131:       assertFalse(node0.isFunction());
132:       assertFalse(node0.isEmpty());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isGetterDef());
135:       assertFalse(node0.isIf());
136:       assertFalse(node0.isVoid());
137:       assertFalse(node0.isDebugger());
138:       assertFalse(node0.isTrue());
139:       assertFalse(node0.isNE());
140:       assertEquals(124, node0.getLineno());
141:       assertFalse(node0.isIn());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isDefaultCase());
145:       assertFalse(node0.isVar());
146:       assertFalse(node0.isHook());
147:       assertFalse(node0.isInc());
148:       assertFalse(node0.isSwitch());
149:       assertFalse(node0.isParamList());
150:       assertFalse(node0.isStringKey());
151:       assertFalse(node0.hasMoreThanOneChild());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isInstanceOf());
154:       assertFalse(node0.isWith());
155:       assertFalse(node0.isCase());
156:       assertFalse(node0.isRegExp());
157:       assertEquals(39, node0.getType());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isThis());
160:       assertFalse(node0.isFor());
161:       assertEquals(124, node0.getCharno());
162:       assertFalse(node0.hasOneChild());
163:       assertFalse(node0.isExprResult());
164:       assertFalse(node0.isGetElem());
165:       assertFalse(node0.isScript());
166:       assertFalse(node0.isCast());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isLabelName());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isDo());
174:       assertFalse(node0.isThrow());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isNew());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isFalse());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isReturn());
184:       assertTrue(node0.isNumber());
185:       assertFalse(node0.isObjectLit());
186:       assertFalse(node0.isGetProp());
187:       assertFalse(node0.isString());
188:       assertFalse(node0.hasChildren());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isComma());
192:       assertFalse(node0.isDec());
193:       assertFalse(node0.isWhile());
194:       assertEquals(37, Node.OPT_ARG_NAME);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(46, Node.IS_NAMESPACE);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
200:       assertEquals(29, Node.JSDOC_INFO_PROP);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
203:       assertEquals(57, Node.LAST_PROP);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(54, Node.SLASH_V);
209:       assertEquals(43, Node.IS_CONSTANT_NAME);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(40, Node.ORIGINALNAME_PROP);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(50, Node.FREE_CALL);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
222:       assertEquals(53, Node.INPUT_ID);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(57, Node.REFLECTED_OBJECT);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
229:       assertEquals(49, Node.DIRECT_EVAL);
230:       
231:       Node node1 = new Node((-377), node0, node0, node0);
232:       assertFalse(node0.isTry());
233:       assertFalse(node0.isArrayLit());
234:       assertEquals(508028, node0.getSourcePosition());
235:       assertFalse(node0.isFunction());
236:       assertFalse(node0.isEmpty());
237:       assertFalse(node0.isDelProp());
238:       assertFalse(node0.isGetterDef());
239:       assertFalse(node0.isIf());
240:       assertFalse(node0.isVoid());
241:       assertFalse(node0.isDebugger());
242:       assertFalse(node0.isTrue());
243:       assertFalse(node0.isNE());
244:       assertEquals(124, node0.getLineno());
245:       assertFalse(node0.isIn());
246:       assertEquals(0, node0.getChildCount());
247:       assertFalse(node0.isSetterDef());
248:       assertFalse(node0.isDefaultCase());
249:       assertFalse(node0.isVar());
250:       assertFalse(node0.isHook());
251:       assertFalse(node0.isInc());
252:       assertFalse(node0.isSwitch());
253:       assertFalse(node0.isParamList());
254:       assertFalse(node0.isStringKey());
255:       assertFalse(node0.hasMoreThanOneChild());
256:       assertFalse(node0.isCatch());
257:       assertFalse(node0.isInstanceOf());
258:       assertFalse(node0.isWith());
259:       assertFalse(node0.isCase());
260:       assertFalse(node0.isRegExp());
261:       assertEquals(39, node0.getType());
262:       assertFalse(node0.isBlock());
263:       assertFalse(node0.isThis());
264:       assertFalse(node0.isFor());
265:       assertEquals(124, node0.getCharno());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isExprResult());
268:       assertFalse(node0.isGetElem());
269:       assertFalse(node0.isScript());
270:       assertFalse(node0.isCast());
271:       assertFalse(node0.isNot());
272:       assertFalse(node0.isLabelName());
273:       assertFalse(node0.isAnd());
274:       assertFalse(node0.isOr());
275:       assertFalse(node0.isLabel());
276:       assertFalse(node0.isContinue());
277:       assertFalse(node0.isDo());
278:       assertFalse(node0.isThrow());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isCall());
282:       assertFalse(node0.isFalse());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isName());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isReturn());
288:       assertTrue(node0.isNumber());
289:       assertFalse(node0.isObjectLit());
290:       assertFalse(node0.isGetProp());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isTypeOf());
294:       assertFalse(node0.isAssign());
295:       assertFalse(node0.isComma());
296:       assertFalse(node0.isDec());
297:       assertFalse(node0.isWhile());
298:       assertFalse(node1.isThrow());
299:       assertFalse(node1.isFalse());
300:       assertFalse(node1.isHook());
301:       assertFalse(node1.isComma());
302:       assertFalse(node1.isThis());
303:       assertFalse(node1.isSwitch());
304:       assertFalse(node1.isBreak());
305:       assertFalse(node1.isInstanceOf());
306:       assertFalse(node1.isIn());
307:       assertFalse(node1.isInc());
308:       assertFalse(node1.isGetElem());
309:       assertFalse(node1.isEmpty());
310:       assertFalse(node1.isCast());
311:       assertFalse(node1.isDec());
312:       assertFalse(node1.isTypeOf());
313:       assertFalse(node1.isAssign());
314:       assertTrue(node1.hasOneChild());
315:       assertEquals((-1), node1.getSourcePosition());
316:       assertFalse(node1.isTrue());
317:       assertFalse(node1.isVoid());
318:       assertFalse(node1.isFunction());
319:       assertFalse(node1.isExprResult());
320:       assertFalse(node1.isDelProp());
321:       assertFalse(node1.isObjectLit());
322:       assertFalse(node1.isString());
323:       assertFalse(node1.isAnd());
324:       assertFalse(node1.isWhile());
325:       assertFalse(node1.isNot());
326:       assertFalse(node1.isReturn());
327:       assertFalse(node1.isDebugger());
328:       assertFalse(node1.isGetProp());
329:       assertFalse(node1.isStringKey());
330:       assertFalse(node1.isName());
331:       assertFalse(node1.isCall());
332:       assertFalse(node1.isNull());
333:       assertFalse(node1.isVar());
334:       assertFalse(node1.isParamList());
335:       assertFalse(node1.isContinue());
336:       assertEquals((-377), node1.getType());
337:       assertFalse(node1.isOr());
338:       assertFalse(node1.isLabel());
339:       assertFalse(node1.isAdd());
340:       assertFalse(node1.isAssignAdd());
341:       assertFalse(node1.isDefaultCase());
342:       assertFalse(node1.isSetterDef());
343:       assertFalse(node1.isDo());
344:       assertFalse(node1.isNew());
345:       assertFalse(node1.isFor());
346:       assertFalse(node1.isNumber());
347:       assertFalse(node1.isGetterDef());
348:       assertFalse(node1.isNE());
349:       assertTrue(node1.hasChildren());
350:       assertFalse(node1.isIf());
351:       assertFalse(node1.isLabelName());
352:       assertEquals((-1), node1.getLineno());
353:       assertFalse(node1.isArrayLit());
354:       assertFalse(node1.isCatch());
355:       assertFalse(node1.isWith());
356:       assertFalse(node1.hasMoreThanOneChild());
357:       assertFalse(node1.isRegExp());
358:       assertEquals((-1), node1.getCharno());
359:       assertEquals(1, node1.getChildCount());
360:       assertFalse(node1.isTry());
361:       assertFalse(node1.isBlock());
362:       assertFalse(node1.isScript());
363:       assertFalse(node1.isCase());
364:       assertFalse(node1.equals((Object)node0));
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(56, Node.CHANGE_TIME);
367:       assertEquals(46, Node.IS_NAMESPACE);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(2, Node.POST_FLAG);
370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
371:       assertEquals(29, Node.JSDOC_INFO_PROP);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
374:       assertEquals(57, Node.LAST_PROP);
375:       assertEquals(32, Node.INCRDECR_PROP);
376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
378:       assertEquals(1, Node.DECR_FLAG);
379:       assertEquals(54, Node.SLASH_V);
380:       assertEquals(43, Node.IS_CONSTANT_NAME);
381:       assertEquals(30, Node.VAR_ARGS_NAME);
382:       assertEquals(40, Node.ORIGINALNAME_PROP);
383:       assertEquals(48, Node.DIRECTIVES);
384:       assertEquals(8, Node.FLAG_NO_THROWS);
385:       assertEquals(39, Node.EMPTY_BLOCK);
386:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
387:       assertEquals(50, Node.FREE_CALL);
388:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
389:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
390:       assertEquals(55, Node.INFERRED_FUNCTION);
391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
393:       assertEquals(53, Node.INPUT_ID);
394:       assertEquals(52, Node.LENGTH);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(36, Node.QUOTED_PROP);
397:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
398:       assertEquals(4095, Node.COLUMN_MASK);
399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
400:       assertEquals(49, Node.DIRECT_EVAL);
401:       assertEquals(48, Node.DIRECTIVES);
402:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
403:       assertEquals(39, Node.EMPTY_BLOCK);
404:       assertEquals(36, Node.QUOTED_PROP);
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(53, Node.INPUT_ID);
408:       assertEquals(55, Node.INFERRED_FUNCTION);
409:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
410:       assertEquals(8, Node.FLAG_NO_THROWS);
411:       assertEquals(54, Node.SLASH_V);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(47, Node.IS_DISPATCHER);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(30, Node.VAR_ARGS_NAME);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(32, Node.INCRDECR_PROP);
419:       assertEquals(46, Node.IS_NAMESPACE);
420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
421:       assertEquals(1, Node.DECR_FLAG);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(56, Node.CHANGE_TIME);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(29, Node.JSDOC_INFO_PROP);
428:       assertEquals(52, Node.LENGTH);
429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
436:       assertEquals(4095, Node.COLUMN_MASK);
437:       assertNotNull(node1);
438:       
439:       int int0 = node0.getIndexOfChild(node1);
440:       assertEquals((-1), int0);
441:       assertFalse(node0.isTry());
442:       assertFalse(node0.isArrayLit());
443:       assertEquals(508028, node0.getSourcePosition());
444:       assertFalse(node0.isFunction());
445:       assertFalse(node0.isEmpty());
446:       assertFalse(node0.isDelProp());
447:       assertFalse(node0.isGetterDef());
448:       assertFalse(node0.isIf());
449:       assertFalse(node0.isVoid());
450:       assertFalse(node0.isDebugger());
451:       assertFalse(node0.isTrue());
452:       assertFalse(node0.isNE());
453:       assertEquals(124, node0.getLineno());
454:       assertFalse(node0.isIn());
455:       assertEquals(0, node0.getChildCount());
456:       assertFalse(node0.isSetterDef());
457:       assertFalse(node0.isDefaultCase());
458:       assertFalse(node0.isVar());
459:       assertFalse(node0.isHook());
460:       assertFalse(node0.isInc());
461:       assertFalse(node0.isSwitch());
462:       assertFalse(node0.isParamList());
463:       assertFalse(node0.isStringKey());
464:       assertFalse(node0.hasMoreThanOneChild());
465:       assertFalse(node0.isCatch());
466:       assertFalse(node0.isInstanceOf());
467:       assertFalse(node0.isWith());
468:       assertFalse(node0.isCase());
469:       assertFalse(node0.isRegExp());
470:       assertEquals(39, node0.getType());
471:       assertFalse(node0.isBlock());
472:       assertFalse(node0.isThis());
473:       assertFalse(node0.isFor());
474:       assertEquals(124, node0.getCharno());
475:       assertFalse(node0.hasOneChild());
476:       assertFalse(node0.isExprResult());
477:       assertFalse(node0.isGetElem());
478:       assertFalse(node0.isScript());
479:       assertFalse(node0.isCast());
480:       assertFalse(node0.isNot());
481:       assertFalse(node0.isLabelName());
482:       assertFalse(node0.isAnd());
483:       assertFalse(node0.isOr());
484:       assertFalse(node0.isLabel());
485:       assertFalse(node0.isContinue());
486:       assertFalse(node0.isDo());
487:       assertFalse(node0.isThrow());
488:       assertFalse(node0.isAssignAdd());
489:       assertFalse(node0.isNew());
490:       assertFalse(node0.isCall());
491:       assertFalse(node0.isFalse());
492:       assertFalse(node0.isAdd());
493:       assertFalse(node0.isBreak());
494:       assertFalse(node0.isName());
495:       assertFalse(node0.isNull());
496:       assertFalse(node0.isReturn());
497:       assertTrue(node0.isNumber());
498:       assertFalse(node0.isObjectLit());
499:       assertFalse(node0.isGetProp());
500:       assertFalse(node0.isString());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isTypeOf());
503:       assertFalse(node0.isAssign());
504:       assertFalse(node0.isComma());
505:       assertFalse(node0.isDec());
506:       assertFalse(node0.isWhile());
507:       assertFalse(node1.isThrow());
508:       assertFalse(node1.isFalse());
509:       assertFalse(node1.isHook());
510:       assertFalse(node1.isComma());
511:       assertFalse(node1.isThis());
512:       assertFalse(node1.isSwitch());
513:       assertFalse(node1.isBreak());
514:       assertFalse(node1.isInstanceOf());
515:       assertFalse(node1.isIn());
516:       assertFalse(node1.isInc());
517:       assertFalse(node1.isGetElem());
518:       assertFalse(node1.isEmpty());
519:       assertFalse(node1.isCast());
520:       assertFalse(node1.isDec());
521:       assertFalse(node1.isTypeOf());
522:       assertFalse(node1.isAssign());
523:       assertTrue(node1.hasOneChild());
524:       assertEquals((-1), node1.getSourcePosition());
525:       assertFalse(node1.isTrue());
526:       assertFalse(node1.isVoid());
527:       assertFalse(node1.isFunction());
528:       assertFalse(node1.isExprResult());
529:       assertFalse(node1.isDelProp());
530:       assertFalse(node1.isObjectLit());
531:       assertFalse(node1.isString());
532:       assertFalse(node1.isAnd());
533:       assertFalse(node1.isWhile());
534:       assertFalse(node1.isNot());
535:       assertFalse(node1.isReturn());
536:       assertFalse(node1.isDebugger());
537:       assertFalse(node1.isGetProp());
538:       assertFalse(node1.isStringKey());
539:       assertFalse(node1.isName());
540:       assertFalse(node1.isCall());
541:       assertFalse(node1.isNull());
542:       assertFalse(node1.isVar());
543:       assertFalse(node1.isParamList());
544:       assertFalse(node1.isContinue());
545:       assertEquals((-377), node1.getType());
546:       assertFalse(node1.isOr());
547:       assertFalse(node1.isLabel());
548:       assertFalse(node1.isAdd());
549:       assertFalse(node1.isAssignAdd());
550:       assertFalse(node1.isDefaultCase());
551:       assertFalse(node1.isSetterDef());
552:       assertFalse(node1.isDo());
553:       assertFalse(node1.isNew());
554:       assertFalse(node1.isFor());
555:       assertFalse(node1.isNumber());
556:       assertFalse(node1.isGetterDef());
557:       assertFalse(node1.isNE());
558:       assertTrue(node1.hasChildren());
559:       assertFalse(node1.isIf());
560:       assertFalse(node1.isLabelName());
561:       assertEquals((-1), node1.getLineno());
562:       assertFalse(node1.isArrayLit());
563:       assertFalse(node1.isCatch());
564:       assertFalse(node1.isWith());
565:       assertFalse(node1.hasMoreThanOneChild());
566:       assertFalse(node1.isRegExp());
567:       assertEquals((-1), node1.getCharno());
568:       assertEquals(1, node1.getChildCount());
569:       assertFalse(node1.isTry());
570:       assertFalse(node1.isBlock());
571:       assertFalse(node1.isScript());
572:       assertFalse(node1.isCase());
573:       assertFalse(node0.equals((Object)node1));
574:       assertFalse(node1.equals((Object)node0));
575:       assertEquals(37, Node.OPT_ARG_NAME);
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(47, Node.IS_DISPATCHER);
579:       assertEquals(2, Node.POST_FLAG);
580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
581:       assertEquals(29, Node.JSDOC_INFO_PROP);
582:       assertEquals(12, Node.COLUMN_BITS);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(57, Node.LAST_PROP);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertEquals(15, Node.NO_SIDE_EFFECTS);
587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
588:       assertEquals(1, Node.DECR_FLAG);
589:       assertEquals(54, Node.SLASH_V);
590:       assertEquals(43, Node.IS_CONSTANT_NAME);
591:       assertEquals(30, Node.VAR_ARGS_NAME);
592:       assertEquals(40, Node.ORIGINALNAME_PROP);
593:       assertEquals(48, Node.DIRECTIVES);
594:       assertEquals(8, Node.FLAG_NO_THROWS);
595:       assertEquals(39, Node.EMPTY_BLOCK);
596:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
597:       assertEquals(50, Node.FREE_CALL);
598:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
599:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
600:       assertEquals(55, Node.INFERRED_FUNCTION);
601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
602:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
603:       assertEquals(53, Node.INPUT_ID);
604:       assertEquals(52, Node.LENGTH);
605:       assertEquals(57, Node.REFLECTED_OBJECT);
606:       assertEquals(36, Node.QUOTED_PROP);
607:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
608:       assertEquals(4095, Node.COLUMN_MASK);
609:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
610:       assertEquals(49, Node.DIRECT_EVAL);
611:       assertEquals(48, Node.DIRECTIVES);
612:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
613:       assertEquals(39, Node.EMPTY_BLOCK);
614:       assertEquals(36, Node.QUOTED_PROP);
615:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(55, Node.INFERRED_FUNCTION);
619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
620:       assertEquals(8, Node.FLAG_NO_THROWS);
621:       assertEquals(54, Node.SLASH_V);
622:       assertEquals(43, Node.IS_CONSTANT_NAME);
623:       assertEquals(47, Node.IS_DISPATCHER);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(30, Node.VAR_ARGS_NAME);
626:       assertEquals(40, Node.ORIGINALNAME_PROP);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(32, Node.INCRDECR_PROP);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(56, Node.CHANGE_TIME);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
640:       assertEquals(57, Node.REFLECTED_OBJECT);
641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
642:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
644:       assertEquals(37, Node.OPT_ARG_NAME);
645:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       
648:       Iterable<Node> iterable0 = node0.children();
649:       assertFalse(node0.isTry());
650:       assertFalse(node0.isArrayLit());
651:       assertEquals(508028, node0.getSourcePosition());
652:       assertFalse(node0.isFunction());
653:       assertFalse(node0.isEmpty());
654:       assertFalse(node0.isDelProp());
655:       assertFalse(node0.isGetterDef());
656:       assertFalse(node0.isIf());
657:       assertFalse(node0.isVoid());
658:       assertFalse(node0.isDebugger());
659:       assertFalse(node0.isTrue());
660:       assertFalse(node0.isNE());
661:       assertEquals(124, node0.getLineno());
662:       assertFalse(node0.isIn());
663:       assertEquals(0, node0.getChildCount());
664:       assertFalse(node0.isSetterDef());
665:       assertFalse(node0.isDefaultCase());
666:       assertFalse(node0.isVar());
667:       assertFalse(node0.isHook());
668:       assertFalse(node0.isInc());
669:       assertFalse(node0.isSwitch());
670:       assertFalse(node0.isParamList());
671:       assertFalse(node0.isStringKey());
672:       assertFalse(node0.hasMoreThanOneChild());
673:       assertFalse(node0.isCatch());
674:       assertFalse(node0.isInstanceOf());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isCase());
677:       assertFalse(node0.isRegExp());
678:       assertEquals(39, node0.getType());
679:       assertFalse(node0.isBlock());
680:       assertFalse(node0.isThis());
681:       assertFalse(node0.isFor());
682:       assertEquals(124, node0.getCharno());
683:       assertFalse(node0.hasOneChild());
684:       assertFalse(node0.isExprResult());
685:       assertFalse(node0.isGetElem());
686:       assertFalse(node0.isScript());
687:       assertFalse(node0.isCast());
688:       assertFalse(node0.isNot());
689:       assertFalse(node0.isLabelName());
690:       assertFalse(node0.isAnd());
691:       assertFalse(node0.isOr());
692:       assertFalse(node0.isLabel());
693:       assertFalse(node0.isContinue());
694:       assertFalse(node0.isDo());
695:       assertFalse(node0.isThrow());
696:       assertFalse(node0.isAssignAdd());
697:       assertFalse(node0.isNew());
698:       assertFalse(node0.isCall());
699:       assertFalse(node0.isFalse());
700:       assertFalse(node0.isAdd());
701:       assertFalse(node0.isBreak());
702:       assertFalse(node0.isName());
703:       assertFalse(node0.isNull());
704:       assertFalse(node0.isReturn());
705:       assertTrue(node0.isNumber());
706:       assertFalse(node0.isObjectLit());
707:       assertFalse(node0.isGetProp());
708:       assertFalse(node0.isString());
709:       assertFalse(node0.hasChildren());
710:       assertFalse(node0.isTypeOf());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isComma());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.isWhile());
715:       assertFalse(node0.equals((Object)node1));
716:       assertEquals(37, Node.OPT_ARG_NAME);
717:       assertEquals(56, Node.CHANGE_TIME);
718:       assertEquals(46, Node.IS_NAMESPACE);
719:       assertEquals(47, Node.IS_DISPATCHER);
720:       assertEquals(2, Node.POST_FLAG);
721:       assertEquals(51, Node.STATIC_SOURCE_FILE);
722:       assertEquals(29, Node.JSDOC_INFO_PROP);
723:       assertEquals(12, Node.COLUMN_BITS);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertEquals(57, Node.LAST_PROP);
726:       assertEquals(32, Node.INCRDECR_PROP);
727:       assertEquals(15, Node.NO_SIDE_EFFECTS);
728:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
729:       assertEquals(1, Node.DECR_FLAG);
730:       assertEquals(54, Node.SLASH_V);
731:       assertEquals(43, Node.IS_CONSTANT_NAME);
732:       assertEquals(30, Node.VAR_ARGS_NAME);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(8, Node.FLAG_NO_THROWS);
736:       assertEquals(39, Node.EMPTY_BLOCK);
737:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
741:       assertEquals(55, Node.INFERRED_FUNCTION);
742:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(57, Node.REFLECTED_OBJECT);
747:       assertEquals(36, Node.QUOTED_PROP);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertNotNull(iterable0);
753:       assertFalse(iterable0.contains(node1));
754:       
755:       Node node2 = null;
756:       node1.putIntProp(12, 31);
757:       assertFalse(node0.isTry());
758:       assertFalse(node0.isArrayLit());
759:       assertEquals(508028, node0.getSourcePosition());
760:       assertFalse(node0.isFunction());
761:       assertFalse(node0.isEmpty());
762:       assertFalse(node0.isDelProp());
763:       assertFalse(node0.isGetterDef());
764:       assertFalse(node0.isIf());
765:       assertFalse(node0.isVoid());
766:       assertFalse(node0.isDebugger());
767:       assertFalse(node0.isTrue());
768:       assertFalse(node0.isNE());
769:       assertEquals(124, node0.getLineno());
770:       assertFalse(node0.isIn());
771:       assertEquals(0, node0.getChildCount());
772:       assertFalse(node0.isSetterDef());
773:       assertFalse(node0.isDefaultCase());
774:       assertFalse(node0.isVar());
775:       assertFalse(node0.isHook());
776:       assertFalse(node0.isInc());
777:       assertFalse(node0.isSwitch());
778:       assertFalse(node0.isParamList());
779:       assertFalse(node0.isStringKey());
780:       assertFalse(node0.hasMoreThanOneChild());
781:       assertFalse(node0.isCatch());
782:       assertFalse(node0.isInstanceOf());
783:       assertFalse(node0.isWith());
784:       assertFalse(node0.isCase());
785:       assertFalse(node0.isRegExp());
786:       assertEquals(39, node0.getType());
787:       assertFalse(node0.isBlock());
788:       assertFalse(node0.isThis());
789:       assertFalse(node0.isFor());
790:       assertEquals(124, node0.getCharno());
791:       assertFalse(node0.hasOneChild());
792:       assertFalse(node0.isExprResult());
793:       assertFalse(node0.isGetElem());
794:       assertFalse(node0.isScript());
795:       assertFalse(node0.isCast());
796:       assertFalse(node0.isNot());
797:       assertFalse(node0.isLabelName());
798:       assertFalse(node0.isAnd());
799:       assertFalse(node0.isOr());
800:       assertFalse(node0.isLabel());
801:       assertFalse(node0.isContinue());
802:       assertFalse(node0.isDo());
803:       assertFalse(node0.isThrow());
804:       assertFalse(node0.isAssignAdd());
805:       assertFalse(node0.isNew());
806:       assertFalse(node0.isCall());
807:       assertFalse(node0.isFalse());
808:       assertFalse(node0.isAdd());
809:       assertFalse(node0.isBreak());
810:       assertFalse(node0.isName());
811:       assertFalse(node0.isNull());
812:       assertFalse(node0.isReturn());
813:       assertTrue(node0.isNumber());
814:       assertFalse(node0.isObjectLit());
815:       assertFalse(node0.isGetProp());
816:       assertFalse(node0.isString());
817:       assertFalse(node0.hasChildren());
818:       assertFalse(node0.isTypeOf());
819:       assertFalse(node0.isAssign());
820:       assertFalse(node0.isComma());
821:       assertFalse(node0.isDec());
822:       assertFalse(node0.isWhile());
823:       assertFalse(node1.isThrow());
824:       assertFalse(node1.isFalse());
825:       assertFalse(node1.isHook());
826:       assertFalse(node1.isComma());
827:       assertFalse(node1.isThis());
828:       assertFalse(node1.isSwitch());
829:       assertFalse(node1.isBreak());
830:       assertFalse(node1.isInstanceOf());
831:       assertFalse(node1.isIn());
832:       assertFalse(node1.isInc());
833:       assertFalse(node1.isGetElem());
834:       assertFalse(node1.isEmpty());
835:       assertFalse(node1.isCast());
836:       assertFalse(node1.isDec());
837:       assertFalse(node1.isTypeOf());
838:       assertFalse(node1.isAssign());
839:       assertTrue(node1.hasOneChild());
840:       assertEquals((-1), node1.getSourcePosition());
841:       assertFalse(node1.isTrue());
842:       assertFalse(node1.isVoid());
843:       assertFalse(node1.isFunction());
844:       assertFalse(node1.isExprResult());
845:       assertFalse(node1.isDelProp());
846:       assertFalse(node1.isObjectLit());
847:       assertFalse(node1.isString());
848:       assertFalse(node1.isAnd());
849:       assertFalse(node1.isWhile());
850:       assertFalse(node1.isNot());
851:       assertFalse(node1.isReturn());
852:       assertFalse(node1.isDebugger());
853:       assertFalse(node1.isGetProp());
854:       assertFalse(node1.isStringKey());
855:       assertFalse(node1.isName());
856:       assertFalse(node1.isCall());
857:       assertFalse(node1.isNull());
858:       assertFalse(node1.isVar());
859:       assertFalse(node1.isParamList());
860:       assertFalse(node1.isContinue());
861:       assertEquals((-377), node1.getType());
862:       assertFalse(node1.isOr());
863:       assertFalse(node1.isLabel());
864:       assertFalse(node1.isAdd());
865:       assertFalse(node1.isAssignAdd());
866:       assertFalse(node1.isDefaultCase());
867:       assertFalse(node1.isSetterDef());
868:       assertFalse(node1.isDo());
869:       assertFalse(node1.isNew());
870:       assertFalse(node1.isFor());
871:       assertFalse(node1.isNumber());
872:       assertFalse(node1.isGetterDef());
873:       assertFalse(node1.isNE());
874:       assertTrue(node1.hasChildren());
875:       assertFalse(node1.isIf());
876:       assertFalse(node1.isLabelName());
877:       assertEquals((-1), node1.getLineno());
878:       assertFalse(node1.isArrayLit());
879:       assertFalse(node1.isCatch());
880:       assertFalse(node1.isWith());
881:       assertFalse(node1.hasMoreThanOneChild());
882:       assertFalse(node1.isRegExp());
883:       assertEquals((-1), node1.getCharno());
884:       assertEquals(1, node1.getChildCount());
885:       assertFalse(node1.isTry());
886:       assertFalse(node1.isBlock());
887:       assertFalse(node1.isScript());
888:       assertFalse(node1.isCase());
889:       assertFalse(node0.equals((Object)node1));
890:       assertFalse(node1.equals((Object)node0));
891:       assertEquals(37, Node.OPT_ARG_NAME);
892:       assertEquals(56, Node.CHANGE_TIME);
893:       assertEquals(46, Node.IS_NAMESPACE);
894:       assertEquals(47, Node.IS_DISPATCHER);
895:       assertEquals(2, Node.POST_FLAG);
896:       assertEquals(51, Node.STATIC_SOURCE_FILE);
897:       assertEquals(29, Node.JSDOC_INFO_PROP);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
900:       assertEquals(57, Node.LAST_PROP);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(15, Node.NO_SIDE_EFFECTS);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(1, Node.DECR_FLAG);
905:       assertEquals(54, Node.SLASH_V);
906:       assertEquals(43, Node.IS_CONSTANT_NAME);
907:       assertEquals(30, Node.VAR_ARGS_NAME);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(48, Node.DIRECTIVES);
910:       assertEquals(8, Node.FLAG_NO_THROWS);
911:       assertEquals(39, Node.EMPTY_BLOCK);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(50, Node.FREE_CALL);
914:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
916:       assertEquals(55, Node.INFERRED_FUNCTION);
917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
918:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
919:       assertEquals(53, Node.INPUT_ID);
920:       assertEquals(52, Node.LENGTH);
921:       assertEquals(57, Node.REFLECTED_OBJECT);
922:       assertEquals(36, Node.QUOTED_PROP);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(4095, Node.COLUMN_MASK);
925:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
926:       assertEquals(49, Node.DIRECT_EVAL);
927:       assertEquals(48, Node.DIRECTIVES);
928:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
929:       assertEquals(39, Node.EMPTY_BLOCK);
930:       assertEquals(36, Node.QUOTED_PROP);
931:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
932:       assertEquals(50, Node.FREE_CALL);
933:       assertEquals(53, Node.INPUT_ID);
934:       assertEquals(55, Node.INFERRED_FUNCTION);
935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
936:       assertEquals(8, Node.FLAG_NO_THROWS);
937:       assertEquals(54, Node.SLASH_V);
938:       assertEquals(43, Node.IS_CONSTANT_NAME);
939:       assertEquals(47, Node.IS_DISPATCHER);
940:       assertEquals(2, Node.POST_FLAG);
941:       assertEquals(30, Node.VAR_ARGS_NAME);
942:       assertEquals(40, Node.ORIGINALNAME_PROP);
943:       assertEquals(12, Node.COLUMN_BITS);
944:       assertEquals(32, Node.INCRDECR_PROP);
945:       assertEquals(46, Node.IS_NAMESPACE);
946:       assertEquals(51, Node.STATIC_SOURCE_FILE);
947:       assertEquals(1, Node.DECR_FLAG);
948:       assertEquals(49, Node.DIRECT_EVAL);
949:       assertEquals(56, Node.CHANGE_TIME);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(52, Node.LENGTH);
955:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
956:       assertEquals(57, Node.REFLECTED_OBJECT);
957:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
958:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
959:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
960:       assertEquals(37, Node.OPT_ARG_NAME);
961:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
962:       assertEquals(4095, Node.COLUMN_MASK);
963:       
964:       Node node3 = null;
965:       try {
966:         node3 = new Node(4095, node0, node0, node0, 528, 103);
967:         fail("Expecting exception: IllegalArgumentException");
968:       
969:       } catch(IllegalArgumentException e) {
970:          //
971:          // no message in exception (getMessage() returned null)
972:          //
973:          verifyException("com.google.common.base.Preconditions", e);
974:       }
975:   }
976: }
RegularFileObject[/tmp/EvoSuite_73_1629223341388/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_73_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:21.487 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 124, 124);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(124, node0.getLineno());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(124, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);

String string0 = "}?Zy4Up-D>t[";
node0.putProp(124, "}?Zy4Up-D>t[");
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(124, node0.getLineno());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(124, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);

Node node1 = new Node((-377), node0, node0, node0);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(124, node0.getLineno());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(124, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isContinue());
assertEquals((-377), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node1);

int int0 = node0.getIndexOfChild(node1);
assertEquals((-1), int0);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(124, node0.getLineno());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(124, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isContinue());
assertEquals((-377), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(124, node0.getLineno());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(124, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));

Node node2 = null;
node1.putIntProp(12, 31);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(124, node0.getLineno());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertEquals(124, node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isContinue());
assertEquals((-377), node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node3 = new Node(4095, node0, node0, node0, 528, 103);

[MASTER] 18:02:21.751 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1629223341651/com/google/javascript/rhino/Node_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1629223341651/com/google/javascript/rhino/Node_75_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:21.751 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:21.751 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:21.752 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 546
[MASTER] 18:02:21.753 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1629223341651/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_75_tmp__ESTest extends Node_75_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(0);
22:       assertFalse(node0.isCatch());
23:       assertFalse(node0.isDefaultCase());
24:       assertFalse(node0.isRegExp());
25:       assertEquals(0, node0.getChildCount());
26:       assertFalse(node0.isTrue());
27:       assertFalse(node0.isDebugger());
28:       assertFalse(node0.isVoid());
29:       assertFalse(node0.isFunction());
30:       assertFalse(node0.isParamList());
31:       assertFalse(node0.isArrayLit());
32:       assertFalse(node0.isStringKey());
33:       assertFalse(node0.isFor());
34:       assertFalse(node0.isGetterDef());
35:       assertFalse(node0.isBlock());
36:       assertFalse(node0.isTry());
37:       assertFalse(node0.isDo());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.isReturn());
40:       assertEquals((-1), node0.getCharno());
41:       assertFalse(node0.isLabel());
42:       assertEquals(0, node0.getType());
43:       assertFalse(node0.isSwitch());
44:       assertFalse(node0.isDelProp());
45:       assertFalse(node0.isCall());
46:       assertFalse(node0.isName());
47:       assertFalse(node0.isEmpty());
48:       assertFalse(node0.isNull());
49:       assertFalse(node0.isVar());
50:       assertFalse(node0.isNew());
51:       assertFalse(node0.isOr());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isAssignAdd());
54:       assertFalse(node0.isObjectLit());
55:       assertFalse(node0.isNot());
56:       assertFalse(node0.isWith());
57:       assertFalse(node0.isAnd());
58:       assertFalse(node0.isInstanceOf());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isExprResult());
61:       assertFalse(node0.isBreak());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isAssign());
64:       assertFalse(node0.isLabelName());
65:       assertFalse(node0.isHook());
66:       assertEquals((-1), node0.getSourcePosition());
67:       assertFalse(node0.isTypeOf());
68:       assertFalse(node0.isDec());
69:       assertFalse(node0.isNumber());
70:       assertFalse(node0.isComma());
71:       assertFalse(node0.isThis());
72:       assertFalse(node0.hasChildren());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isContinue());
80:       assertEquals((-1), node0.getLineno());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isIn());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isSetterDef());
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(36, Node.QUOTED_PROP);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(29, Node.JSDOC_INFO_PROP);
97:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
98:       assertEquals(55, Node.INFERRED_FUNCTION);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(49, Node.DIRECT_EVAL);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(30, Node.VAR_ARGS_NAME);
124:       assertNotNull(node0);
125:       
126:       Node node1 = Node.newString(54, "<");
127:       assertFalse(node1.isCall());
128:       assertFalse(node1.isVar());
129:       assertFalse(node1.isName());
130:       assertFalse(node1.isStringKey());
131:       assertFalse(node1.isSetterDef());
132:       assertFalse(node1.isParamList());
133:       assertFalse(node1.isNull());
134:       assertFalse(node1.isNew());
135:       assertFalse(node1.isAdd());
136:       assertFalse(node1.isCatch());
137:       assertFalse(node1.isReturn());
138:       assertFalse(node1.isWhile());
139:       assertEquals((-1), node1.getLineno());
140:       assertFalse(node1.isVoid());
141:       assertFalse(node1.isDec());
142:       assertFalse(node1.isBlock());
143:       assertFalse(node1.hasChildren());
144:       assertFalse(node1.isAssign());
145:       assertFalse(node1.isRegExp());
146:       assertFalse(node1.isTypeOf());
147:       assertFalse(node1.hasMoreThanOneChild());
148:       assertFalse(node1.isCast());
149:       assertFalse(node1.isIf());
150:       assertFalse(node1.isDebugger());
151:       assertFalse(node1.isNE());
152:       assertEquals((-1), node1.getSourcePosition());
153:       assertFalse(node1.isNot());
154:       assertFalse(node1.isIn());
155:       assertFalse(node1.isObjectLit());
156:       assertFalse(node1.isAnd());
157:       assertFalse(node1.isFunction());
158:       assertFalse(node1.isFalse());
159:       assertFalse(node1.isContinue());
160:       assertFalse(node1.isThrow());
161:       assertFalse(node1.isHook());
162:       assertFalse(node1.isInc());
163:       assertEquals((-1), node1.getCharno());
164:       assertFalse(node1.isGetProp());
165:       assertEquals(54, node1.getType());
166:       assertFalse(node1.isString());
167:       assertFalse(node1.isCase());
168:       assertFalse(node1.isComma());
169:       assertFalse(node1.isExprResult());
170:       assertFalse(node1.isThis());
171:       assertFalse(node1.isBreak());
172:       assertFalse(node1.isInstanceOf());
173:       assertFalse(node1.isWith());
174:       assertFalse(node1.hasOneChild());
175:       assertFalse(node1.isGetElem());
176:       assertFalse(node1.isArrayLit());
177:       assertFalse(node1.isDelProp());
178:       assertFalse(node1.isFor());
179:       assertFalse(node1.isTry());
180:       assertFalse(node1.isLabelName());
181:       assertFalse(node1.isTrue());
182:       assertFalse(node1.isScript());
183:       assertFalse(node1.isGetterDef());
184:       assertFalse(node1.isEmpty());
185:       assertFalse(node1.isOr());
186:       assertFalse(node1.isNumber());
187:       assertFalse(node1.isDo());
188:       assertFalse(node1.isAssignAdd());
189:       assertFalse(node1.isDefaultCase());
190:       assertFalse(node1.isSwitch());
191:       assertFalse(node1.isLabel());
192:       assertEquals(0, node1.getChildCount());
193:       assertFalse(node1.equals((Object)node0));
194:       assertEquals(4095, Node.COLUMN_MASK);
195:       assertEquals(39, Node.EMPTY_BLOCK);
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(15, Node.NO_SIDE_EFFECTS);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(49, Node.DIRECT_EVAL);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(8, Node.FLAG_NO_THROWS);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(32, Node.INCRDECR_PROP);
214:       assertEquals(46, Node.IS_NAMESPACE);
215:       assertEquals(37, Node.OPT_ARG_NAME);
216:       assertEquals(1, Node.DECR_FLAG);
217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(57, Node.LAST_PROP);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(47, Node.IS_DISPATCHER);
223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
230:       assertNotNull(node1);
231:       
232:       int int0 = node1.getIndexOfChild(node0);
233:       assertEquals((-1), int0);
234:       assertFalse(node0.isCatch());
235:       assertFalse(node0.isDefaultCase());
236:       assertFalse(node0.isRegExp());
237:       assertEquals(0, node0.getChildCount());
238:       assertFalse(node0.isTrue());
239:       assertFalse(node0.isDebugger());
240:       assertFalse(node0.isVoid());
241:       assertFalse(node0.isFunction());
242:       assertFalse(node0.isParamList());
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isFor());
246:       assertFalse(node0.isGetterDef());
247:       assertFalse(node0.isBlock());
248:       assertFalse(node0.isTry());
249:       assertFalse(node0.isDo());
250:       assertFalse(node0.isWhile());
251:       assertFalse(node0.isReturn());
252:       assertEquals((-1), node0.getCharno());
253:       assertFalse(node0.isLabel());
254:       assertEquals(0, node0.getType());
255:       assertFalse(node0.isSwitch());
256:       assertFalse(node0.isDelProp());
257:       assertFalse(node0.isCall());
258:       assertFalse(node0.isName());
259:       assertFalse(node0.isEmpty());
260:       assertFalse(node0.isNull());
261:       assertFalse(node0.isVar());
262:       assertFalse(node0.isNew());
263:       assertFalse(node0.isOr());
264:       assertFalse(node0.isAdd());
265:       assertFalse(node0.isAssignAdd());
266:       assertFalse(node0.isObjectLit());
267:       assertFalse(node0.isNot());
268:       assertFalse(node0.isWith());
269:       assertFalse(node0.isAnd());
270:       assertFalse(node0.isInstanceOf());
271:       assertFalse(node0.isCast());
272:       assertFalse(node0.isExprResult());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isGetElem());
275:       assertFalse(node0.isAssign());
276:       assertFalse(node0.isLabelName());
277:       assertFalse(node0.isHook());
278:       assertEquals((-1), node0.getSourcePosition());
279:       assertFalse(node0.isTypeOf());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.isNumber());
282:       assertFalse(node0.isComma());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isScript());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isCase());
289:       assertFalse(node0.isString());
290:       assertFalse(node0.hasMoreThanOneChild());
291:       assertFalse(node0.isContinue());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isFalse());
294:       assertFalse(node0.isThrow());
295:       assertFalse(node0.isIf());
296:       assertFalse(node0.isNE());
297:       assertFalse(node0.isIn());
298:       assertFalse(node0.isInc());
299:       assertFalse(node0.isSetterDef());
300:       assertFalse(node1.isCall());
301:       assertFalse(node1.isVar());
302:       assertFalse(node1.isName());
303:       assertFalse(node1.isStringKey());
304:       assertFalse(node1.isSetterDef());
305:       assertFalse(node1.isParamList());
306:       assertFalse(node1.isNull());
307:       assertFalse(node1.isNew());
308:       assertFalse(node1.isAdd());
309:       assertFalse(node1.isCatch());
310:       assertFalse(node1.isReturn());
311:       assertFalse(node1.isWhile());
312:       assertEquals((-1), node1.getLineno());
313:       assertFalse(node1.isVoid());
314:       assertFalse(node1.isDec());
315:       assertFalse(node1.isBlock());
316:       assertFalse(node1.hasChildren());
317:       assertFalse(node1.isAssign());
318:       assertFalse(node1.isRegExp());
319:       assertFalse(node1.isTypeOf());
320:       assertFalse(node1.hasMoreThanOneChild());
321:       assertFalse(node1.isCast());
322:       assertFalse(node1.isIf());
323:       assertFalse(node1.isDebugger());
324:       assertFalse(node1.isNE());
325:       assertEquals((-1), node1.getSourcePosition());
326:       assertFalse(node1.isNot());
327:       assertFalse(node1.isIn());
328:       assertFalse(node1.isObjectLit());
329:       assertFalse(node1.isAnd());
330:       assertFalse(node1.isFunction());
331:       assertFalse(node1.isFalse());
332:       assertFalse(node1.isContinue());
333:       assertFalse(node1.isThrow());
334:       assertFalse(node1.isHook());
335:       assertFalse(node1.isInc());
336:       assertEquals((-1), node1.getCharno());
337:       assertFalse(node1.isGetProp());
338:       assertEquals(54, node1.getType());
339:       assertFalse(node1.isString());
340:       assertFalse(node1.isCase());
341:       assertFalse(node1.isComma());
342:       assertFalse(node1.isExprResult());
343:       assertFalse(node1.isThis());
344:       assertFalse(node1.isBreak());
345:       assertFalse(node1.isInstanceOf());
346:       assertFalse(node1.isWith());
347:       assertFalse(node1.hasOneChild());
348:       assertFalse(node1.isGetElem());
349:       assertFalse(node1.isArrayLit());
350:       assertFalse(node1.isDelProp());
351:       assertFalse(node1.isFor());
352:       assertFalse(node1.isTry());
353:       assertFalse(node1.isLabelName());
354:       assertFalse(node1.isTrue());
355:       assertFalse(node1.isScript());
356:       assertFalse(node1.isGetterDef());
357:       assertFalse(node1.isEmpty());
358:       assertFalse(node1.isOr());
359:       assertFalse(node1.isNumber());
360:       assertFalse(node1.isDo());
361:       assertFalse(node1.isAssignAdd());
362:       assertFalse(node1.isDefaultCase());
363:       assertFalse(node1.isSwitch());
364:       assertFalse(node1.isLabel());
365:       assertEquals(0, node1.getChildCount());
366:       assertFalse(node0.equals((Object)node1));
367:       assertFalse(node1.equals((Object)node0));
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(43, Node.IS_CONSTANT_NAME);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(36, Node.QUOTED_PROP);
373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
375:       assertEquals(53, Node.INPUT_ID);
376:       assertEquals(29, Node.JSDOC_INFO_PROP);
377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
378:       assertEquals(55, Node.INFERRED_FUNCTION);
379:       assertEquals(12, Node.COLUMN_BITS);
380:       assertEquals(32, Node.INCRDECR_PROP);
381:       assertEquals(1, Node.DECR_FLAG);
382:       assertEquals(48, Node.DIRECTIVES);
383:       assertEquals(49, Node.DIRECT_EVAL);
384:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
385:       assertEquals(37, Node.OPT_ARG_NAME);
386:       assertEquals(4095, Node.COLUMN_MASK);
387:       assertEquals(57, Node.REFLECTED_OBJECT);
388:       assertEquals(40, Node.ORIGINALNAME_PROP);
389:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
390:       assertEquals(54, Node.SLASH_V);
391:       assertEquals(15, Node.NO_SIDE_EFFECTS);
392:       assertEquals(39, Node.EMPTY_BLOCK);
393:       assertEquals(50, Node.FREE_CALL);
394:       assertEquals(52, Node.LENGTH);
395:       assertEquals(8, Node.FLAG_NO_THROWS);
396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
398:       assertEquals(46, Node.IS_NAMESPACE);
399:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
400:       assertEquals(57, Node.LAST_PROP);
401:       assertEquals(2, Node.POST_FLAG);
402:       assertEquals(47, Node.IS_DISPATCHER);
403:       assertEquals(30, Node.VAR_ARGS_NAME);
404:       assertEquals(4095, Node.COLUMN_MASK);
405:       assertEquals(39, Node.EMPTY_BLOCK);
406:       assertEquals(55, Node.INFERRED_FUNCTION);
407:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
408:       assertEquals(48, Node.DIRECTIVES);
409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
411:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
412:       assertEquals(52, Node.LENGTH);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
415:       assertEquals(29, Node.JSDOC_INFO_PROP);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(56, Node.CHANGE_TIME);
418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
420:       assertEquals(8, Node.FLAG_NO_THROWS);
421:       assertEquals(36, Node.QUOTED_PROP);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(32, Node.INCRDECR_PROP);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(37, Node.OPT_ARG_NAME);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
428:       assertEquals(30, Node.VAR_ARGS_NAME);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(2, Node.POST_FLAG);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(43, Node.IS_CONSTANT_NAME);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
440:       
441:       Iterable<Node> iterable0 = node1.children();
442:       assertFalse(node1.isCall());
443:       assertFalse(node1.isVar());
444:       assertFalse(node1.isName());
445:       assertFalse(node1.isStringKey());
446:       assertFalse(node1.isSetterDef());
447:       assertFalse(node1.isParamList());
448:       assertFalse(node1.isNull());
449:       assertFalse(node1.isNew());
450:       assertFalse(node1.isAdd());
451:       assertFalse(node1.isCatch());
452:       assertFalse(node1.isReturn());
453:       assertFalse(node1.isWhile());
454:       assertEquals((-1), node1.getLineno());
455:       assertFalse(node1.isVoid());
456:       assertFalse(node1.isDec());
457:       assertFalse(node1.isBlock());
458:       assertFalse(node1.hasChildren());
459:       assertFalse(node1.isAssign());
460:       assertFalse(node1.isRegExp());
461:       assertFalse(node1.isTypeOf());
462:       assertFalse(node1.hasMoreThanOneChild());
463:       assertFalse(node1.isCast());
464:       assertFalse(node1.isIf());
465:       assertFalse(node1.isDebugger());
466:       assertFalse(node1.isNE());
467:       assertEquals((-1), node1.getSourcePosition());
468:       assertFalse(node1.isNot());
469:       assertFalse(node1.isIn());
470:       assertFalse(node1.isObjectLit());
471:       assertFalse(node1.isAnd());
472:       assertFalse(node1.isFunction());
473:       assertFalse(node1.isFalse());
474:       assertFalse(node1.isContinue());
475:       assertFalse(node1.isThrow());
476:       assertFalse(node1.isHook());
477:       assertFalse(node1.isInc());
478:       assertEquals((-1), node1.getCharno());
479:       assertFalse(node1.isGetProp());
480:       assertEquals(54, node1.getType());
481:       assertFalse(node1.isString());
482:       assertFalse(node1.isCase());
483:       assertFalse(node1.isComma());
484:       assertFalse(node1.isExprResult());
485:       assertFalse(node1.isThis());
486:       assertFalse(node1.isBreak());
487:       assertFalse(node1.isInstanceOf());
488:       assertFalse(node1.isWith());
489:       assertFalse(node1.hasOneChild());
490:       assertFalse(node1.isGetElem());
491:       assertFalse(node1.isArrayLit());
492:       assertFalse(node1.isDelProp());
493:       assertFalse(node1.isFor());
494:       assertFalse(node1.isTry());
495:       assertFalse(node1.isLabelName());
496:       assertFalse(node1.isTrue());
497:       assertFalse(node1.isScript());
498:       assertFalse(node1.isGetterDef());
499:       assertFalse(node1.isEmpty());
500:       assertFalse(node1.isOr());
501:       assertFalse(node1.isNumber());
502:       assertFalse(node1.isDo());
503:       assertFalse(node1.isAssignAdd());
504:       assertFalse(node1.isDefaultCase());
505:       assertFalse(node1.isSwitch());
506:       assertFalse(node1.isLabel());
507:       assertEquals(0, node1.getChildCount());
508:       assertFalse(node1.equals((Object)node0));
509:       assertEquals(4095, Node.COLUMN_MASK);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(55, Node.INFERRED_FUNCTION);
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(48, Node.DIRECTIVES);
514:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
516:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
517:       assertEquals(52, Node.LENGTH);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
520:       assertEquals(29, Node.JSDOC_INFO_PROP);
521:       assertEquals(49, Node.DIRECT_EVAL);
522:       assertEquals(56, Node.CHANGE_TIME);
523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(8, Node.FLAG_NO_THROWS);
526:       assertEquals(36, Node.QUOTED_PROP);
527:       assertEquals(57, Node.REFLECTED_OBJECT);
528:       assertEquals(32, Node.INCRDECR_PROP);
529:       assertEquals(46, Node.IS_NAMESPACE);
530:       assertEquals(37, Node.OPT_ARG_NAME);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(2, Node.POST_FLAG);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(50, Node.FREE_CALL);
541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
542:       assertEquals(43, Node.IS_CONSTANT_NAME);
543:       assertEquals(54, Node.SLASH_V);
544:       assertEquals(51, Node.STATIC_SOURCE_FILE);
545:       assertNotNull(iterable0);
546:       assertFalse(iterable0.contains(node0));
547:       
548:       boolean boolean0 = node1.isComma();
549:       assertFalse(boolean0);
550:       assertFalse(node1.isCall());
551:       assertFalse(node1.isVar());
552:       assertFalse(node1.isName());
553:       assertFalse(node1.isStringKey());
554:       assertFalse(node1.isSetterDef());
555:       assertFalse(node1.isParamList());
556:       assertFalse(node1.isNull());
557:       assertFalse(node1.isNew());
558:       assertFalse(node1.isAdd());
559:       assertFalse(node1.isCatch());
560:       assertFalse(node1.isReturn());
561:       assertFalse(node1.isWhile());
562:       assertEquals((-1), node1.getLineno());
563:       assertFalse(node1.isVoid());
564:       assertFalse(node1.isDec());
565:       assertFalse(node1.isBlock());
566:       assertFalse(node1.hasChildren());
567:       assertFalse(node1.isAssign());
568:       assertFalse(node1.isRegExp());
569:       assertFalse(node1.isTypeOf());
570:       assertFalse(node1.hasMoreThanOneChild());
571:       assertFalse(node1.isCast());
572:       assertFalse(node1.isIf());
573:       assertFalse(node1.isDebugger());
574:       assertFalse(node1.isNE());
575:       assertEquals((-1), node1.getSourcePosition());
576:       assertFalse(node1.isNot());
577:       assertFalse(node1.isIn());
578:       assertFalse(node1.isObjectLit());
579:       assertFalse(node1.isAnd());
580:       assertFalse(node1.isFunction());
581:       assertFalse(node1.isFalse());
582:       assertFalse(node1.isContinue());
583:       assertFalse(node1.isThrow());
584:       assertFalse(node1.isHook());
585:       assertFalse(node1.isInc());
586:       assertEquals((-1), node1.getCharno());
587:       assertFalse(node1.isGetProp());
588:       assertEquals(54, node1.getType());
589:       assertFalse(node1.isString());
590:       assertFalse(node1.isCase());
591:       assertFalse(node1.isComma());
592:       assertFalse(node1.isExprResult());
593:       assertFalse(node1.isThis());
594:       assertFalse(node1.isBreak());
595:       assertFalse(node1.isInstanceOf());
596:       assertFalse(node1.isWith());
597:       assertFalse(node1.hasOneChild());
598:       assertFalse(node1.isGetElem());
599:       assertFalse(node1.isArrayLit());
600:       assertFalse(node1.isDelProp());
601:       assertFalse(node1.isFor());
602:       assertFalse(node1.isTry());
603:       assertFalse(node1.isLabelName());
604:       assertFalse(node1.isTrue());
605:       assertFalse(node1.isScript());
606:       assertFalse(node1.isGetterDef());
607:       assertFalse(node1.isEmpty());
608:       assertFalse(node1.isOr());
609:       assertFalse(node1.isNumber());
610:       assertFalse(node1.isDo());
611:       assertFalse(node1.isAssignAdd());
612:       assertFalse(node1.isDefaultCase());
613:       assertFalse(node1.isSwitch());
614:       assertFalse(node1.isLabel());
615:       assertEquals(0, node1.getChildCount());
616:       assertFalse(node1.equals((Object)node0));
617:       assertEquals(4095, Node.COLUMN_MASK);
618:       assertEquals(39, Node.EMPTY_BLOCK);
619:       assertEquals(55, Node.INFERRED_FUNCTION);
620:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
621:       assertEquals(48, Node.DIRECTIVES);
622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
623:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
624:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
625:       assertEquals(52, Node.LENGTH);
626:       assertEquals(53, Node.INPUT_ID);
627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
628:       assertEquals(29, Node.JSDOC_INFO_PROP);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(56, Node.CHANGE_TIME);
631:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
633:       assertEquals(8, Node.FLAG_NO_THROWS);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(57, Node.REFLECTED_OBJECT);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(46, Node.IS_NAMESPACE);
638:       assertEquals(37, Node.OPT_ARG_NAME);
639:       assertEquals(1, Node.DECR_FLAG);
640:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
641:       assertEquals(30, Node.VAR_ARGS_NAME);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(2, Node.POST_FLAG);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(47, Node.IS_DISPATCHER);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(40, Node.ORIGINALNAME_PROP);
648:       assertEquals(50, Node.FREE_CALL);
649:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
650:       assertEquals(43, Node.IS_CONSTANT_NAME);
651:       assertEquals(54, Node.SLASH_V);
652:       assertEquals(51, Node.STATIC_SOURCE_FILE);
653:       
654:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
655:       assertFalse(node0.isCatch());
656:       assertFalse(node0.isDefaultCase());
657:       assertFalse(node0.isRegExp());
658:       assertEquals(0, node0.getChildCount());
659:       assertFalse(node0.isTrue());
660:       assertFalse(node0.isDebugger());
661:       assertFalse(node0.isVoid());
662:       assertFalse(node0.isFunction());
663:       assertFalse(node0.isParamList());
664:       assertFalse(node0.isArrayLit());
665:       assertFalse(node0.isStringKey());
666:       assertFalse(node0.isFor());
667:       assertFalse(node0.isGetterDef());
668:       assertFalse(node0.isBlock());
669:       assertFalse(node0.isTry());
670:       assertFalse(node0.isDo());
671:       assertFalse(node0.isWhile());
672:       assertFalse(node0.isReturn());
673:       assertEquals((-1), node0.getCharno());
674:       assertFalse(node0.isLabel());
675:       assertEquals(0, node0.getType());
676:       assertFalse(node0.isSwitch());
677:       assertFalse(node0.isDelProp());
678:       assertFalse(node0.isCall());
679:       assertFalse(node0.isName());
680:       assertFalse(node0.isEmpty());
681:       assertFalse(node0.isNull());
682:       assertFalse(node0.isVar());
683:       assertFalse(node0.isNew());
684:       assertFalse(node0.isOr());
685:       assertFalse(node0.isAdd());
686:       assertFalse(node0.isAssignAdd());
687:       assertFalse(node0.isObjectLit());
688:       assertFalse(node0.isNot());
689:       assertFalse(node0.isWith());
690:       assertFalse(node0.isAnd());
691:       assertFalse(node0.isInstanceOf());
692:       assertFalse(node0.isCast());
693:       assertFalse(node0.isExprResult());
694:       assertFalse(node0.isBreak());
695:       assertFalse(node0.isGetElem());
696:       assertFalse(node0.isAssign());
697:       assertFalse(node0.isLabelName());
698:       assertFalse(node0.isHook());
699:       assertEquals((-1), node0.getSourcePosition());
700:       assertFalse(node0.isTypeOf());
701:       assertFalse(node0.isDec());
702:       assertFalse(node0.isNumber());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isThis());
705:       assertFalse(node0.hasChildren());
706:       assertFalse(node0.hasOneChild());
707:       assertFalse(node0.isScript());
708:       assertFalse(node0.isGetProp());
709:       assertFalse(node0.isCase());
710:       assertFalse(node0.isString());
711:       assertFalse(node0.hasMoreThanOneChild());
712:       assertFalse(node0.isContinue());
713:       assertEquals((-1), node0.getLineno());
714:       assertFalse(node0.isFalse());
715:       assertFalse(node0.isThrow());
716:       assertFalse(node0.isIf());
717:       assertFalse(node0.isNE());
718:       assertFalse(node0.isIn());
719:       assertFalse(node0.isInc());
720:       assertFalse(node0.isSetterDef());
721:       assertFalse(node1.isCall());
722:       assertFalse(node1.isVar());
723:       assertFalse(node1.isName());
724:       assertFalse(node1.isStringKey());
725:       assertFalse(node1.isSetterDef());
726:       assertFalse(node1.isParamList());
727:       assertFalse(node1.isNull());
728:       assertFalse(node1.isNew());
729:       assertFalse(node1.isAdd());
730:       assertFalse(node1.isCatch());
731:       assertFalse(node1.isReturn());
732:       assertFalse(node1.isWhile());
733:       assertEquals((-1), node1.getLineno());
734:       assertFalse(node1.isVoid());
735:       assertFalse(node1.isDec());
736:       assertFalse(node1.isBlock());
737:       assertFalse(node1.hasChildren());
738:       assertFalse(node1.isAssign());
739:       assertFalse(node1.isRegExp());
740:       assertFalse(node1.isTypeOf());
741:       assertFalse(node1.hasMoreThanOneChild());
742:       assertFalse(node1.isCast());
743:       assertFalse(node1.isIf());
744:       assertFalse(node1.isDebugger());
745:       assertFalse(node1.isNE());
746:       assertEquals((-1), node1.getSourcePosition());
747:       assertFalse(node1.isNot());
748:       assertFalse(node1.isIn());
749:       assertFalse(node1.isObjectLit());
750:       assertFalse(node1.isAnd());
751:       assertFalse(node1.isFunction());
752:       assertFalse(node1.isFalse());
753:       assertFalse(node1.isContinue());
754:       assertFalse(node1.isThrow());
755:       assertFalse(node1.isHook());
756:       assertFalse(node1.isInc());
757:       assertEquals((-1), node1.getCharno());
758:       assertFalse(node1.isGetProp());
759:       assertEquals(54, node1.getType());
760:       assertFalse(node1.isString());
761:       assertFalse(node1.isCase());
762:       assertFalse(node1.isComma());
763:       assertFalse(node1.isExprResult());
764:       assertFalse(node1.isThis());
765:       assertFalse(node1.isBreak());
766:       assertFalse(node1.isInstanceOf());
767:       assertFalse(node1.isWith());
768:       assertFalse(node1.hasOneChild());
769:       assertFalse(node1.isGetElem());
770:       assertFalse(node1.isArrayLit());
771:       assertFalse(node1.isDelProp());
772:       assertFalse(node1.isFor());
773:       assertFalse(node1.isTry());
774:       assertFalse(node1.isLabelName());
775:       assertFalse(node1.isTrue());
776:       assertFalse(node1.isScript());
777:       assertFalse(node1.isGetterDef());
778:       assertFalse(node1.isEmpty());
779:       assertFalse(node1.isOr());
780:       assertFalse(node1.isNumber());
781:       assertFalse(node1.isDo());
782:       assertFalse(node1.isAssignAdd());
783:       assertFalse(node1.isDefaultCase());
784:       assertFalse(node1.isSwitch());
785:       assertFalse(node1.isLabel());
786:       assertEquals(0, node1.getChildCount());
787:       assertFalse(node0.equals((Object)node1));
788:       assertFalse(node1.equals((Object)node0));
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
791:       assertEquals(43, Node.IS_CONSTANT_NAME);
792:       assertEquals(56, Node.CHANGE_TIME);
793:       assertEquals(36, Node.QUOTED_PROP);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
796:       assertEquals(53, Node.INPUT_ID);
797:       assertEquals(29, Node.JSDOC_INFO_PROP);
798:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
799:       assertEquals(55, Node.INFERRED_FUNCTION);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(32, Node.INCRDECR_PROP);
802:       assertEquals(1, Node.DECR_FLAG);
803:       assertEquals(48, Node.DIRECTIVES);
804:       assertEquals(49, Node.DIRECT_EVAL);
805:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
806:       assertEquals(37, Node.OPT_ARG_NAME);
807:       assertEquals(4095, Node.COLUMN_MASK);
808:       assertEquals(57, Node.REFLECTED_OBJECT);
809:       assertEquals(40, Node.ORIGINALNAME_PROP);
810:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
811:       assertEquals(54, Node.SLASH_V);
812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
813:       assertEquals(39, Node.EMPTY_BLOCK);
814:       assertEquals(50, Node.FREE_CALL);
815:       assertEquals(52, Node.LENGTH);
816:       assertEquals(8, Node.FLAG_NO_THROWS);
817:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
818:       assertEquals(51, Node.STATIC_SOURCE_FILE);
819:       assertEquals(46, Node.IS_NAMESPACE);
820:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
821:       assertEquals(57, Node.LAST_PROP);
822:       assertEquals(2, Node.POST_FLAG);
823:       assertEquals(47, Node.IS_DISPATCHER);
824:       assertEquals(30, Node.VAR_ARGS_NAME);
825:       assertEquals(4095, Node.COLUMN_MASK);
826:       assertEquals(39, Node.EMPTY_BLOCK);
827:       assertEquals(55, Node.INFERRED_FUNCTION);
828:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
829:       assertEquals(48, Node.DIRECTIVES);
830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
831:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
832:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
833:       assertEquals(52, Node.LENGTH);
834:       assertEquals(53, Node.INPUT_ID);
835:       assertEquals(15, Node.NO_SIDE_EFFECTS);
836:       assertEquals(29, Node.JSDOC_INFO_PROP);
837:       assertEquals(49, Node.DIRECT_EVAL);
838:       assertEquals(56, Node.CHANGE_TIME);
839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
840:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
841:       assertEquals(8, Node.FLAG_NO_THROWS);
842:       assertEquals(36, Node.QUOTED_PROP);
843:       assertEquals(57, Node.REFLECTED_OBJECT);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(37, Node.OPT_ARG_NAME);
847:       assertEquals(1, Node.DECR_FLAG);
848:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
849:       assertEquals(30, Node.VAR_ARGS_NAME);
850:       assertEquals(57, Node.LAST_PROP);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(47, Node.IS_DISPATCHER);
854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(50, Node.FREE_CALL);
857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
858:       assertEquals(43, Node.IS_CONSTANT_NAME);
859:       assertEquals(54, Node.SLASH_V);
860:       assertEquals(51, Node.STATIC_SOURCE_FILE);
861:       assertNotNull(node_NodeMismatch0);
862:       
863:       Node node2 = new Node(208, node0, node1);
864:       assertFalse(node0.isCatch());
865:       assertFalse(node0.isDefaultCase());
866:       assertFalse(node0.isRegExp());
867:       assertEquals(0, node0.getChildCount());
868:       assertFalse(node0.isTrue());
869:       assertFalse(node0.isDebugger());
870:       assertFalse(node0.isVoid());
871:       assertFalse(node0.isFunction());
872:       assertFalse(node0.isParamList());
873:       assertFalse(node0.isArrayLit());
874:       assertFalse(node0.isStringKey());
875:       assertFalse(node0.isFor());
876:       assertFalse(node0.isGetterDef());
877:       assertFalse(node0.isBlock());
878:       assertFalse(node0.isTry());
879:       assertFalse(node0.isDo());
880:       assertFalse(node0.isWhile());
881:       assertFalse(node0.isReturn());
882:       assertEquals((-1), node0.getCharno());
883:       assertFalse(node0.isLabel());
884:       assertEquals(0, node0.getType());
885:       assertFalse(node0.isSwitch());
886:       assertFalse(node0.isDelProp());
887:       assertFalse(node0.isCall());
888:       assertFalse(node0.isName());
889:       assertFalse(node0.isEmpty());
890:       assertFalse(node0.isNull());
891:       assertFalse(node0.isVar());
892:       assertFalse(node0.isNew());
893:       assertFalse(node0.isOr());
894:       assertFalse(node0.isAdd());
895:       assertFalse(node0.isAssignAdd());
896:       assertFalse(node0.isObjectLit());
897:       assertFalse(node0.isNot());
898:       assertFalse(node0.isWith());
899:       assertFalse(node0.isAnd());
900:       assertFalse(node0.isInstanceOf());
901:       assertFalse(node0.isCast());
902:       assertFalse(node0.isExprResult());
903:       assertFalse(node0.isBreak());
904:       assertFalse(node0.isGetElem());
905:       assertFalse(node0.isAssign());
906:       assertFalse(node0.isLabelName());
907:       assertFalse(node0.isHook());
908:       assertEquals((-1), node0.getSourcePosition());
909:       assertFalse(node0.isTypeOf());
910:       assertFalse(node0.isDec());
911:       assertFalse(node0.isNumber());
912:       assertFalse(node0.isComma());
913:       assertFalse(node0.isThis());
914:       assertFalse(node0.hasChildren());
915:       assertFalse(node0.hasOneChild());
916:       assertFalse(node0.isScript());
917:       assertFalse(node0.isGetProp());
918:       assertFalse(node0.isCase());
919:       assertFalse(node0.isString());
920:       assertFalse(node0.hasMoreThanOneChild());
921:       assertFalse(node0.isContinue());
922:       assertEquals((-1), node0.getLineno());
923:       assertFalse(node0.isFalse());
924:       assertFalse(node0.isThrow());
925:       assertFalse(node0.isIf());
926:       assertFalse(node0.isNE());
927:       assertFalse(node0.isIn());
928:       assertFalse(node0.isInc());
929:       assertFalse(node0.isSetterDef());
930:       assertFalse(node1.isCall());
931:       assertFalse(node1.isVar());
932:       assertFalse(node1.isName());
933:       assertFalse(node1.isStringKey());
934:       assertFalse(node1.isSetterDef());
935:       assertFalse(node1.isParamList());
936:       assertFalse(node1.isNull());
937:       assertFalse(node1.isNew());
938:       assertFalse(node1.isAdd());
939:       assertFalse(node1.isCatch());
940:       assertFalse(node1.isReturn());
941:       assertFalse(node1.isWhile());
942:       assertEquals((-1), node1.getLineno());
943:       assertFalse(node1.isVoid());
944:       assertFalse(node1.isDec());
945:       assertFalse(node1.isBlock());
946:       assertFalse(node1.hasChildren());
947:       assertFalse(node1.isAssign());
948:       assertFalse(node1.isRegExp());
949:       assertFalse(node1.isTypeOf());
950:       assertFalse(node1.hasMoreThanOneChild());
951:       assertFalse(node1.isCast());
952:       assertFalse(node1.isIf());
953:       assertFalse(node1.isDebugger());
954:       assertFalse(node1.isNE());
955:       assertEquals((-1), node1.getSourcePosition());
956:       assertFalse(node1.isNot());
957:       assertFalse(node1.isIn());
958:       assertFalse(node1.isObjectLit());
959:       assertFalse(node1.isAnd());
960:       assertFalse(node1.isFunction());
961:       assertFalse(node1.isFalse());
962:       assertFalse(node1.isContinue());
963:       assertFalse(node1.isThrow());
964:       assertFalse(node1.isHook());
965:       assertFalse(node1.isInc());
966:       assertEquals((-1), node1.getCharno());
967:       assertFalse(node1.isGetProp());
968:       assertEquals(54, node1.getType());
969:       assertFalse(node1.isString());
970:       assertFalse(node1.isCase());
971:       assertFalse(node1.isComma());
972:       assertFalse(node1.isExprResult());
973:       assertFalse(node1.isThis());
974:       assertFalse(node1.isBreak());
975:       assertFalse(node1.isInstanceOf());
976:       assertFalse(node1.isWith());
977:       assertFalse(node1.hasOneChild());
978:       assertFalse(node1.isGetElem());
979:       assertFalse(node1.isArrayLit());
980:       assertFalse(node1.isDelProp());
981:       assertFalse(node1.isFor());
982:       assertFalse(node1.isTry());
983:       assertFalse(node1.isLabelName());
984:       assertFalse(node1.isTrue());
985:       assertFalse(node1.isScript());
986:       assertFalse(node1.isGetterDef());
987:       assertFalse(node1.isEmpty());
988:       assertFalse(node1.isOr());
989:       assertFalse(node1.isNumber());
990:       assertFalse(node1.isDo());
991:       assertFalse(node1.isAssignAdd());
992:       assertFalse(node1.isDefaultCase());
993:       assertFalse(node1.isSwitch());
994:       assertFalse(node1.isLabel());
995:       assertEquals(0, node1.getChildCount());
996:       assertFalse(node2.isIf());
997:       assertFalse(node2.isDelProp());
998:       assertFalse(node2.isNE());
999:       assertFalse(node2.isEmpty());
1000:       assertFalse(node2.isCase());
1001:       assertFalse(node2.isIn());
1002:       assertFalse(node2.isGetterDef());
1003:       assertFalse(node2.isString());
1004:       assertFalse(node2.isFunction());
1005:       assertFalse(node2.isInc());
1006:       assertEquals((-1), node2.getCharno());
1007:       assertFalse(node2.isDebugger());
1008:       assertFalse(node2.isDefaultCase());
1009:       assertFalse(node2.isSwitch());
1010:       assertFalse(node2.isThrow());
1011:       assertFalse(node2.isFalse());
1012:       assertFalse(node2.isArrayLit());
1013:       assertFalse(node2.isSetterDef());
1014:       assertEquals(2, node2.getChildCount());
1015:       assertFalse(node2.isThis());
1016:       assertFalse(node2.isParamList());
1017:       assertFalse(node2.isStringKey());
1018:       assertFalse(node2.isScript());
1019:       assertFalse(node2.isTry());
1020:       assertFalse(node2.isBlock());
1021:       assertFalse(node2.isHook());
1022:       assertFalse(node2.hasOneChild());
1023:       assertFalse(node2.isFor());
1024:       assertFalse(node2.isInstanceOf());
1025:       assertFalse(node2.isRegExp());
1026:       assertFalse(node2.isCatch());
1027:       assertTrue(node2.hasChildren());
1028:       assertFalse(node2.isWith());
1029:       assertEquals(208, node2.getType());
1030:       assertFalse(node2.isOr());
1031:       assertFalse(node2.isReturn());
1032:       assertEquals((-1), node2.getLineno());
1033:       assertEquals((-1), node2.getSourcePosition());
1034:       assertFalse(node2.isLabel());
1035:       assertFalse(node2.isAssignAdd());
1036:       assertFalse(node2.isDo());
1037:       assertFalse(node2.isNumber());
1038:       assertFalse(node2.isAdd());
1039:       assertFalse(node2.isNew());
1040:       assertFalse(node2.isVar());
1041:       assertFalse(node2.isLabelName());
1042:       assertFalse(node2.isCast());
1043:       assertFalse(node2.isContinue());
1044:       assertFalse(node2.isGetProp());
1045:       assertFalse(node2.isComma());
1046:       assertFalse(node2.isNull());
1047:       assertFalse(node2.isAnd());
1048:       assertFalse(node2.isObjectLit());
1049:       assertFalse(node2.isNot());
1050:       assertFalse(node2.isTrue());
1051:       assertFalse(node2.isVoid());
1052:       assertFalse(node2.isExprResult());
1053:       assertTrue(node2.hasMoreThanOneChild());
1054:       assertFalse(node2.isWhile());
1055:       assertFalse(node2.isGetElem());
1056:       assertFalse(node2.isName());
1057:       assertFalse(node2.isCall());
1058:       assertFalse(node2.isAssign());
1059:       assertFalse(node2.isBreak());
1060:       assertFalse(node2.isDec());
1061:       assertFalse(node2.isTypeOf());
1062:       assertFalse(node0.equals((Object)node1));
1063:       assertFalse(node1.equals((Object)node0));
1064:       assertFalse(node2.equals((Object)node0));
1065:       assertFalse(node2.equals((Object)node1));
1066:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1068:       assertEquals(43, Node.IS_CONSTANT_NAME);
1069:       assertEquals(56, Node.CHANGE_TIME);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(53, Node.INPUT_ID);
1074:       assertEquals(29, Node.JSDOC_INFO_PROP);
1075:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1076:       assertEquals(55, Node.INFERRED_FUNCTION);
1077:       assertEquals(12, Node.COLUMN_BITS);
1078:       assertEquals(32, Node.INCRDECR_PROP);
1079:       assertEquals(1, Node.DECR_FLAG);
1080:       assertEquals(48, Node.DIRECTIVES);
1081:       assertEquals(49, Node.DIRECT_EVAL);
1082:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1083:       assertEquals(37, Node.OPT_ARG_NAME);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(40, Node.ORIGINALNAME_PROP);
1087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1088:       assertEquals(54, Node.SLASH_V);
1089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1090:       assertEquals(39, Node.EMPTY_BLOCK);
1091:       assertEquals(50, Node.FREE_CALL);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1096:       assertEquals(46, Node.IS_NAMESPACE);
1097:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1098:       assertEquals(57, Node.LAST_PROP);
1099:       assertEquals(2, Node.POST_FLAG);
1100:       assertEquals(47, Node.IS_DISPATCHER);
1101:       assertEquals(30, Node.VAR_ARGS_NAME);
1102:       assertEquals(4095, Node.COLUMN_MASK);
1103:       assertEquals(39, Node.EMPTY_BLOCK);
1104:       assertEquals(55, Node.INFERRED_FUNCTION);
1105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1106:       assertEquals(48, Node.DIRECTIVES);
1107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1110:       assertEquals(52, Node.LENGTH);
1111:       assertEquals(53, Node.INPUT_ID);
1112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(49, Node.DIRECT_EVAL);
1115:       assertEquals(56, Node.CHANGE_TIME);
1116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(36, Node.QUOTED_PROP);
1120:       assertEquals(57, Node.REFLECTED_OBJECT);
1121:       assertEquals(32, Node.INCRDECR_PROP);
1122:       assertEquals(46, Node.IS_NAMESPACE);
1123:       assertEquals(37, Node.OPT_ARG_NAME);
1124:       assertEquals(1, Node.DECR_FLAG);
1125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1126:       assertEquals(30, Node.VAR_ARGS_NAME);
1127:       assertEquals(57, Node.LAST_PROP);
1128:       assertEquals(2, Node.POST_FLAG);
1129:       assertEquals(12, Node.COLUMN_BITS);
1130:       assertEquals(47, Node.IS_DISPATCHER);
1131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1132:       assertEquals(40, Node.ORIGINALNAME_PROP);
1133:       assertEquals(50, Node.FREE_CALL);
1134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1135:       assertEquals(43, Node.IS_CONSTANT_NAME);
1136:       assertEquals(54, Node.SLASH_V);
1137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(57, Node.LAST_PROP);
1140:       assertEquals(1, Node.DECR_FLAG);
1141:       assertEquals(49, Node.DIRECT_EVAL);
1142:       assertEquals(12, Node.COLUMN_BITS);
1143:       assertEquals(32, Node.INCRDECR_PROP);
1144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1145:       assertEquals(2, Node.POST_FLAG);
1146:       assertEquals(30, Node.VAR_ARGS_NAME);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertEquals(40, Node.ORIGINALNAME_PROP);
1149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1150:       assertEquals(46, Node.IS_NAMESPACE);
1151:       assertEquals(50, Node.FREE_CALL);
1152:       assertEquals(54, Node.SLASH_V);
1153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1155:       assertEquals(43, Node.IS_CONSTANT_NAME);
1156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1157:       assertEquals(53, Node.INPUT_ID);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(4095, Node.COLUMN_MASK);
1160:       assertEquals(56, Node.CHANGE_TIME);
1161:       assertEquals(47, Node.IS_DISPATCHER);
1162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1163:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(48, Node.DIRECTIVES);
1167:       assertEquals(29, Node.JSDOC_INFO_PROP);
1168:       assertEquals(39, Node.EMPTY_BLOCK);
1169:       assertEquals(37, Node.OPT_ARG_NAME);
1170:       assertEquals(57, Node.REFLECTED_OBJECT);
1171:       assertEquals(55, Node.INFERRED_FUNCTION);
1172:       assertEquals(52, Node.LENGTH);
1173:       assertEquals(36, Node.QUOTED_PROP);
1174:       assertNotNull(node2);
1175:       
1176:       // Undeclared exception!
1177:       try { 
1178:         node1.addChildBefore(node0, node2);
1179:         fail("Expecting exception: IllegalArgumentException");
1180:       
1181:       } catch(IllegalArgumentException e) {
1182:          //
1183:          // The existing child node of the parent should not be null.
1184:          //
1185:          verifyException("com.google.common.base.Preconditions", e);
1186:       }
1187:   }
1188: }
RegularFileObject[/tmp/EvoSuite_75_1629223341651/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_75_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:21.788 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);

Node node1 = Node.newString(54, "<");
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isIn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals(54, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node1);

int int0 = node1.getIndexOfChild(node0);
assertEquals((-1), int0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isIn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals(54, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isIn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals(54, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node1.isComma();
assertFalse(boolean0);
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isIn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals(54, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isIn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals(54, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node_NodeMismatch0);

Node node2 = new Node(208, node0, node1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isIn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertEquals(54, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSetterDef());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertEquals(208, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node2);

node1.addChildBefore(node0, node2);

[MASTER] 18:02:23.749 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_85_1629223343687/com/google/javascript/rhino/Node_85_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_85_1629223343687/com/google/javascript/rhino/Node_85_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:23.749 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.749 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.750 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 441
[MASTER] 18:02:23.751 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_85_1629223343687/com/google/javascript/rhino/Node_85_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_85_tmp__ESTest extends Node_85_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(21, "ALL_TYPE");
22:       assertFalse(node0.isCatch());
23:       assertFalse(node0.isDefaultCase());
24:       assertFalse(node0.isVoid());
25:       assertFalse(node0.isTrue());
26:       assertFalse(node0.isParamList());
27:       assertFalse(node0.isNull());
28:       assertFalse(node0.isDebugger());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isStringKey());
31:       assertFalse(node0.isVar());
32:       assertFalse(node0.isArrayLit());
33:       assertFalse(node0.isSetterDef());
34:       assertFalse(node0.isFunction());
35:       assertEquals(0, node0.getChildCount());
36:       assertFalse(node0.isString());
37:       assertFalse(node0.isContinue());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.isDo());
40:       assertFalse(node0.isNew());
41:       assertEquals((-1), node0.getSourcePosition());
42:       assertFalse(node0.isOr());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isName());
45:       assertFalse(node0.isCall());
46:       assertFalse(node0.isBreak());
47:       assertFalse(node0.isDelProp());
48:       assertFalse(node0.isReturn());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.hasChildren());
52:       assertFalse(node0.isComma());
53:       assertFalse(node0.isDec());
54:       assertFalse(node0.isAssign());
55:       assertFalse(node0.isWith());
56:       assertFalse(node0.isAnd());
57:       assertFalse(node0.isScript());
58:       assertFalse(node0.isGetProp());
59:       assertFalse(node0.isObjectLit());
60:       assertEquals(21, node0.getType());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isFalse());
63:       assertTrue(node0.isAdd());
64:       assertFalse(node0.isThrow());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isLabelName());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isSwitch());
71:       assertEquals((-1), node0.getLineno());
72:       assertEquals((-1), node0.getCharno());
73:       assertFalse(node0.isInc());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isIn());
76:       assertFalse(node0.isNumber());
77:       assertFalse(node0.isGetterDef());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.hasOneChild());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isHook());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(29, Node.JSDOC_INFO_PROP);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(46, Node.IS_NAMESPACE);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(12, Node.COLUMN_BITS);
114:       assertEquals(4095, Node.COLUMN_MASK);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(37, Node.OPT_ARG_NAME);
120:       assertEquals(48, Node.DIRECTIVES);
121:       assertEquals(49, Node.DIRECT_EVAL);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(56, Node.CHANGE_TIME);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isFromExterns();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isCatch());
129:       assertFalse(node0.isDefaultCase());
130:       assertFalse(node0.isVoid());
131:       assertFalse(node0.isTrue());
132:       assertFalse(node0.isParamList());
133:       assertFalse(node0.isNull());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isEmpty());
136:       assertFalse(node0.isStringKey());
137:       assertFalse(node0.isVar());
138:       assertFalse(node0.isArrayLit());
139:       assertFalse(node0.isSetterDef());
140:       assertFalse(node0.isFunction());
141:       assertEquals(0, node0.getChildCount());
142:       assertFalse(node0.isString());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isWhile());
145:       assertFalse(node0.isDo());
146:       assertFalse(node0.isNew());
147:       assertEquals((-1), node0.getSourcePosition());
148:       assertFalse(node0.isOr());
149:       assertFalse(node0.isGetElem());
150:       assertFalse(node0.isName());
151:       assertFalse(node0.isCall());
152:       assertFalse(node0.isBreak());
153:       assertFalse(node0.isDelProp());
154:       assertFalse(node0.isReturn());
155:       assertFalse(node0.isExprResult());
156:       assertFalse(node0.isTypeOf());
157:       assertFalse(node0.hasChildren());
158:       assertFalse(node0.isComma());
159:       assertFalse(node0.isDec());
160:       assertFalse(node0.isAssign());
161:       assertFalse(node0.isWith());
162:       assertFalse(node0.isAnd());
163:       assertFalse(node0.isScript());
164:       assertFalse(node0.isGetProp());
165:       assertFalse(node0.isObjectLit());
166:       assertEquals(21, node0.getType());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isFalse());
169:       assertTrue(node0.isAdd());
170:       assertFalse(node0.isThrow());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isLabelName());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.isCase());
176:       assertFalse(node0.isSwitch());
177:       assertEquals((-1), node0.getLineno());
178:       assertEquals((-1), node0.getCharno());
179:       assertFalse(node0.isInc());
180:       assertFalse(node0.isNE());
181:       assertFalse(node0.isIn());
182:       assertFalse(node0.isNumber());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.hasOneChild());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isTry());
188:       assertFalse(node0.isBlock());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isInstanceOf());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isHook());
193:       assertFalse(node0.hasMoreThanOneChild());
194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
195:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
196:       assertEquals(53, Node.INPUT_ID);
197:       assertEquals(29, Node.JSDOC_INFO_PROP);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(47, Node.IS_DISPATCHER);
200:       assertEquals(2, Node.POST_FLAG);
201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(1, Node.DECR_FLAG);
204:       assertEquals(43, Node.IS_CONSTANT_NAME);
205:       assertEquals(46, Node.IS_NAMESPACE);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(40, Node.ORIGINALNAME_PROP);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(57, Node.LAST_PROP);
216:       assertEquals(30, Node.VAR_ARGS_NAME);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(8, Node.FLAG_NO_THROWS);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
229:       assertEquals(56, Node.CHANGE_TIME);
230:       
231:       boolean boolean1 = node0.isObjectLit();
232:       assertFalse(boolean1);
233:       assertFalse(node0.isCatch());
234:       assertFalse(node0.isDefaultCase());
235:       assertFalse(node0.isVoid());
236:       assertFalse(node0.isTrue());
237:       assertFalse(node0.isParamList());
238:       assertFalse(node0.isNull());
239:       assertFalse(node0.isDebugger());
240:       assertFalse(node0.isEmpty());
241:       assertFalse(node0.isStringKey());
242:       assertFalse(node0.isVar());
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isSetterDef());
245:       assertFalse(node0.isFunction());
246:       assertEquals(0, node0.getChildCount());
247:       assertFalse(node0.isString());
248:       assertFalse(node0.isContinue());
249:       assertFalse(node0.isWhile());
250:       assertFalse(node0.isDo());
251:       assertFalse(node0.isNew());
252:       assertEquals((-1), node0.getSourcePosition());
253:       assertFalse(node0.isOr());
254:       assertFalse(node0.isGetElem());
255:       assertFalse(node0.isName());
256:       assertFalse(node0.isCall());
257:       assertFalse(node0.isBreak());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isReturn());
260:       assertFalse(node0.isExprResult());
261:       assertFalse(node0.isTypeOf());
262:       assertFalse(node0.hasChildren());
263:       assertFalse(node0.isComma());
264:       assertFalse(node0.isDec());
265:       assertFalse(node0.isAssign());
266:       assertFalse(node0.isWith());
267:       assertFalse(node0.isAnd());
268:       assertFalse(node0.isScript());
269:       assertFalse(node0.isGetProp());
270:       assertFalse(node0.isObjectLit());
271:       assertEquals(21, node0.getType());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isFalse());
274:       assertTrue(node0.isAdd());
275:       assertFalse(node0.isThrow());
276:       assertFalse(node0.isCast());
277:       assertFalse(node0.isLabelName());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.isSwitch());
282:       assertEquals((-1), node0.getLineno());
283:       assertEquals((-1), node0.getCharno());
284:       assertFalse(node0.isInc());
285:       assertFalse(node0.isNE());
286:       assertFalse(node0.isIn());
287:       assertFalse(node0.isNumber());
288:       assertFalse(node0.isGetterDef());
289:       assertFalse(node0.isFor());
290:       assertFalse(node0.hasOneChild());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.isTry());
293:       assertFalse(node0.isBlock());
294:       assertFalse(node0.isThis());
295:       assertFalse(node0.isInstanceOf());
296:       assertFalse(node0.isRegExp());
297:       assertFalse(node0.isHook());
298:       assertFalse(node0.hasMoreThanOneChild());
299:       assertTrue(boolean1 == boolean0);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
302:       assertEquals(53, Node.INPUT_ID);
303:       assertEquals(29, Node.JSDOC_INFO_PROP);
304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(43, Node.IS_CONSTANT_NAME);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(50, Node.FREE_CALL);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(40, Node.ORIGINALNAME_PROP);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
320:       assertEquals(39, Node.EMPTY_BLOCK);
321:       assertEquals(57, Node.LAST_PROP);
322:       assertEquals(30, Node.VAR_ARGS_NAME);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(12, Node.COLUMN_BITS);
326:       assertEquals(4095, Node.COLUMN_MASK);
327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(36, Node.QUOTED_PROP);
330:       assertEquals(8, Node.FLAG_NO_THROWS);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(49, Node.DIRECT_EVAL);
334:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
335:       assertEquals(56, Node.CHANGE_TIME);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertFalse(node0.isCatch());
339:       assertFalse(node0.isDefaultCase());
340:       assertFalse(node0.isVoid());
341:       assertFalse(node0.isTrue());
342:       assertFalse(node0.isParamList());
343:       assertFalse(node0.isNull());
344:       assertFalse(node0.isDebugger());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isStringKey());
347:       assertFalse(node0.isVar());
348:       assertFalse(node0.isArrayLit());
349:       assertFalse(node0.isSetterDef());
350:       assertFalse(node0.isFunction());
351:       assertEquals(0, node0.getChildCount());
352:       assertFalse(node0.isString());
353:       assertFalse(node0.isContinue());
354:       assertFalse(node0.isWhile());
355:       assertFalse(node0.isDo());
356:       assertFalse(node0.isNew());
357:       assertEquals((-1), node0.getSourcePosition());
358:       assertFalse(node0.isOr());
359:       assertFalse(node0.isGetElem());
360:       assertFalse(node0.isName());
361:       assertFalse(node0.isCall());
362:       assertFalse(node0.isBreak());
363:       assertFalse(node0.isDelProp());
364:       assertFalse(node0.isReturn());
365:       assertFalse(node0.isExprResult());
366:       assertFalse(node0.isTypeOf());
367:       assertFalse(node0.hasChildren());
368:       assertFalse(node0.isComma());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.isAssign());
371:       assertFalse(node0.isWith());
372:       assertFalse(node0.isAnd());
373:       assertFalse(node0.isScript());
374:       assertFalse(node0.isGetProp());
375:       assertFalse(node0.isObjectLit());
376:       assertEquals(21, node0.getType());
377:       assertFalse(node0.isNot());
378:       assertFalse(node0.isFalse());
379:       assertTrue(node0.isAdd());
380:       assertFalse(node0.isThrow());
381:       assertFalse(node0.isCast());
382:       assertFalse(node0.isLabelName());
383:       assertFalse(node0.isLabel());
384:       assertFalse(node0.isAssignAdd());
385:       assertFalse(node0.isCase());
386:       assertFalse(node0.isSwitch());
387:       assertEquals((-1), node0.getLineno());
388:       assertEquals((-1), node0.getCharno());
389:       assertFalse(node0.isInc());
390:       assertFalse(node0.isNE());
391:       assertFalse(node0.isIn());
392:       assertFalse(node0.isNumber());
393:       assertFalse(node0.isGetterDef());
394:       assertFalse(node0.isFor());
395:       assertFalse(node0.hasOneChild());
396:       assertFalse(node0.isIf());
397:       assertFalse(node0.isTry());
398:       assertFalse(node0.isBlock());
399:       assertFalse(node0.isThis());
400:       assertFalse(node0.isInstanceOf());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(node0.isHook());
403:       assertFalse(node0.hasMoreThanOneChild());
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(53, Node.INPUT_ID);
407:       assertEquals(29, Node.JSDOC_INFO_PROP);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(47, Node.IS_DISPATCHER);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
412:       assertEquals(32, Node.INCRDECR_PROP);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(46, Node.IS_NAMESPACE);
416:       assertEquals(54, Node.SLASH_V);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(40, Node.ORIGINALNAME_PROP);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(30, Node.VAR_ARGS_NAME);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(4095, Node.COLUMN_MASK);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(36, Node.QUOTED_PROP);
434:       assertEquals(8, Node.FLAG_NO_THROWS);
435:       assertEquals(37, Node.OPT_ARG_NAME);
436:       assertEquals(48, Node.DIRECTIVES);
437:       assertEquals(49, Node.DIRECT_EVAL);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(56, Node.CHANGE_TIME);
440:       assertNotNull(iterable0);
441:       assertFalse(iterable0.contains(node0));
442:       
443:       boolean boolean2 = node0.isNew();
444:       assertFalse(boolean2);
445:       assertFalse(node0.isCatch());
446:       assertFalse(node0.isDefaultCase());
447:       assertFalse(node0.isVoid());
448:       assertFalse(node0.isTrue());
449:       assertFalse(node0.isParamList());
450:       assertFalse(node0.isNull());
451:       assertFalse(node0.isDebugger());
452:       assertFalse(node0.isEmpty());
453:       assertFalse(node0.isStringKey());
454:       assertFalse(node0.isVar());
455:       assertFalse(node0.isArrayLit());
456:       assertFalse(node0.isSetterDef());
457:       assertFalse(node0.isFunction());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isString());
460:       assertFalse(node0.isContinue());
461:       assertFalse(node0.isWhile());
462:       assertFalse(node0.isDo());
463:       assertFalse(node0.isNew());
464:       assertEquals((-1), node0.getSourcePosition());
465:       assertFalse(node0.isOr());
466:       assertFalse(node0.isGetElem());
467:       assertFalse(node0.isName());
468:       assertFalse(node0.isCall());
469:       assertFalse(node0.isBreak());
470:       assertFalse(node0.isDelProp());
471:       assertFalse(node0.isReturn());
472:       assertFalse(node0.isExprResult());
473:       assertFalse(node0.isTypeOf());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isComma());
476:       assertFalse(node0.isDec());
477:       assertFalse(node0.isAssign());
478:       assertFalse(node0.isWith());
479:       assertFalse(node0.isAnd());
480:       assertFalse(node0.isScript());
481:       assertFalse(node0.isGetProp());
482:       assertFalse(node0.isObjectLit());
483:       assertEquals(21, node0.getType());
484:       assertFalse(node0.isNot());
485:       assertFalse(node0.isFalse());
486:       assertTrue(node0.isAdd());
487:       assertFalse(node0.isThrow());
488:       assertFalse(node0.isCast());
489:       assertFalse(node0.isLabelName());
490:       assertFalse(node0.isLabel());
491:       assertFalse(node0.isAssignAdd());
492:       assertFalse(node0.isCase());
493:       assertFalse(node0.isSwitch());
494:       assertEquals((-1), node0.getLineno());
495:       assertEquals((-1), node0.getCharno());
496:       assertFalse(node0.isInc());
497:       assertFalse(node0.isNE());
498:       assertFalse(node0.isIn());
499:       assertFalse(node0.isNumber());
500:       assertFalse(node0.isGetterDef());
501:       assertFalse(node0.isFor());
502:       assertFalse(node0.hasOneChild());
503:       assertFalse(node0.isIf());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isBlock());
506:       assertFalse(node0.isThis());
507:       assertFalse(node0.isInstanceOf());
508:       assertFalse(node0.isRegExp());
509:       assertFalse(node0.isHook());
510:       assertFalse(node0.hasMoreThanOneChild());
511:       assertTrue(boolean2 == boolean0);
512:       assertTrue(boolean2 == boolean1);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
515:       assertEquals(53, Node.INPUT_ID);
516:       assertEquals(29, Node.JSDOC_INFO_PROP);
517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
518:       assertEquals(47, Node.IS_DISPATCHER);
519:       assertEquals(2, Node.POST_FLAG);
520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
521:       assertEquals(32, Node.INCRDECR_PROP);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(43, Node.IS_CONSTANT_NAME);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(50, Node.FREE_CALL);
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(30, Node.VAR_ARGS_NAME);
536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
538:       assertEquals(12, Node.COLUMN_BITS);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(8, Node.FLAG_NO_THROWS);
544:       assertEquals(37, Node.OPT_ARG_NAME);
545:       assertEquals(48, Node.DIRECTIVES);
546:       assertEquals(49, Node.DIRECT_EVAL);
547:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
548:       assertEquals(56, Node.CHANGE_TIME);
549:       
550:       String string0 = "";
551:       node0.setSourceFileForTesting("");
552:       assertFalse(node0.isCatch());
553:       assertFalse(node0.isDefaultCase());
554:       assertFalse(node0.isVoid());
555:       assertFalse(node0.isTrue());
556:       assertFalse(node0.isParamList());
557:       assertFalse(node0.isNull());
558:       assertFalse(node0.isDebugger());
559:       assertFalse(node0.isEmpty());
560:       assertFalse(node0.isStringKey());
561:       assertFalse(node0.isVar());
562:       assertFalse(node0.isArrayLit());
563:       assertFalse(node0.isSetterDef());
564:       assertFalse(node0.isFunction());
565:       assertEquals(0, node0.getChildCount());
566:       assertFalse(node0.isString());
567:       assertFalse(node0.isContinue());
568:       assertFalse(node0.isWhile());
569:       assertFalse(node0.isDo());
570:       assertFalse(node0.isNew());
571:       assertEquals((-1), node0.getSourcePosition());
572:       assertFalse(node0.isOr());
573:       assertFalse(node0.isGetElem());
574:       assertFalse(node0.isName());
575:       assertFalse(node0.isCall());
576:       assertFalse(node0.isBreak());
577:       assertFalse(node0.isDelProp());
578:       assertFalse(node0.isReturn());
579:       assertFalse(node0.isExprResult());
580:       assertFalse(node0.isTypeOf());
581:       assertFalse(node0.hasChildren());
582:       assertFalse(node0.isComma());
583:       assertFalse(node0.isDec());
584:       assertFalse(node0.isAssign());
585:       assertFalse(node0.isWith());
586:       assertFalse(node0.isAnd());
587:       assertFalse(node0.isScript());
588:       assertFalse(node0.isGetProp());
589:       assertFalse(node0.isObjectLit());
590:       assertEquals(21, node0.getType());
591:       assertFalse(node0.isNot());
592:       assertFalse(node0.isFalse());
593:       assertTrue(node0.isAdd());
594:       assertFalse(node0.isThrow());
595:       assertFalse(node0.isCast());
596:       assertFalse(node0.isLabelName());
597:       assertFalse(node0.isLabel());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.isSwitch());
601:       assertEquals((-1), node0.getLineno());
602:       assertEquals((-1), node0.getCharno());
603:       assertFalse(node0.isInc());
604:       assertFalse(node0.isNE());
605:       assertFalse(node0.isIn());
606:       assertFalse(node0.isNumber());
607:       assertFalse(node0.isGetterDef());
608:       assertFalse(node0.isFor());
609:       assertFalse(node0.hasOneChild());
610:       assertFalse(node0.isIf());
611:       assertFalse(node0.isTry());
612:       assertFalse(node0.isBlock());
613:       assertFalse(node0.isThis());
614:       assertFalse(node0.isInstanceOf());
615:       assertFalse(node0.isRegExp());
616:       assertFalse(node0.isHook());
617:       assertFalse(node0.hasMoreThanOneChild());
618:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
620:       assertEquals(53, Node.INPUT_ID);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(47, Node.IS_DISPATCHER);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(51, Node.STATIC_SOURCE_FILE);
626:       assertEquals(32, Node.INCRDECR_PROP);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(43, Node.IS_CONSTANT_NAME);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(54, Node.SLASH_V);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(40, Node.ORIGINALNAME_PROP);
636:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
637:       assertEquals(15, Node.NO_SIDE_EFFECTS);
638:       assertEquals(39, Node.EMPTY_BLOCK);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(30, Node.VAR_ARGS_NAME);
641:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertEquals(4095, Node.COLUMN_MASK);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(36, Node.QUOTED_PROP);
648:       assertEquals(8, Node.FLAG_NO_THROWS);
649:       assertEquals(37, Node.OPT_ARG_NAME);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(49, Node.DIRECT_EVAL);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertEquals(56, Node.CHANGE_TIME);
654:       
655:       Node node1 = null;
656:       // Undeclared exception!
657:       try { 
658:         node0.useSourceInfoIfMissingFromForTree((Node) null);
659:         fail("Expecting exception: NullPointerException");
660:       
661:       } catch(NullPointerException e) {
662:          //
663:          // no message in exception (getMessage() returned null)
664:          //
665:          verifyException("com.google.javascript.rhino.Node", e);
666:       }
667:   }
668: }
RegularFileObject[/tmp/EvoSuite_85_1629223343687/com/google/javascript/rhino/Node_85_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_85_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_85_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_85_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:23.762 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(21, "ALL_TYPE");
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals(21, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node0);

boolean boolean0 = node0.isFromExterns();
assertFalse(boolean0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals(21, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

boolean boolean1 = node0.isObjectLit();
assertFalse(boolean1);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals(21, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(boolean1 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals(21, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean2 = node0.isNew();
assertFalse(boolean2);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals(21, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

String string0 = "";
node0.setSourceFileForTesting("");
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals(21, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Node node1 = null;
node0.useSourceInfoIfMissingFromForTree((Node) null);

[MASTER] 18:02:27.599 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1629223347341/com/google/javascript/rhino/Node_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1629223347341/com/google/javascript/rhino/Node_103_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:27.600 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:27.600 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:27.601 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 877
[MASTER] 18:02:27.602 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1629223347341/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:27 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.EnumElementType;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_103_tmp__ESTest extends Node_103_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newNumber(1.0);
27:       assertFalse(node0.isFalse());
28:       assertFalse(node0.isThrow());
29:       assertFalse(node0.isBreak());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isHook());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isComma());
34:       assertFalse(node0.isCase());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isString());
37:       assertFalse(node0.isSwitch());
38:       assertTrue(node0.isNumber());
39:       assertEquals((-1), node0.getCharno());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isScript());
42:       assertFalse(node0.isObjectLit());
43:       assertFalse(node0.isGetterDef());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isGetElem());
46:       assertFalse(node0.isEmpty());
47:       assertFalse(node0.isArrayLit());
48:       assertFalse(node0.isDelProp());
49:       assertFalse(node0.isLabelName());
50:       assertFalse(node0.isLabel());
51:       assertFalse(node0.isAssignAdd());
52:       assertFalse(node0.isReturn());
53:       assertFalse(node0.isExprResult());
54:       assertFalse(node0.isTypeOf());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.hasChildren());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isNew());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isStringKey());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isBlock());
71:       assertEquals(0, node0.getChildCount());
72:       assertEquals(39, node0.getType());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isParamList());
76:       assertEquals((-1), node0.getSourcePosition());
77:       assertFalse(node0.isDebugger());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isCast());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isRegExp());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isCatch());
88:       assertEquals((-1), node0.getLineno());
89:       assertFalse(node0.isInc());
90:       assertFalse(node0.isSetterDef());
91:       assertFalse(node0.isNE());
92:       assertFalse(node0.isIn());
93:       assertEquals(4095, Node.COLUMN_MASK);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(8, Node.FLAG_NO_THROWS);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(1, Node.DECR_FLAG);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(49, Node.DIRECT_EVAL);
115:       assertEquals(46, Node.IS_NAMESPACE);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(53, Node.INPUT_ID);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(52, Node.LENGTH);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(15, Node.NO_SIDE_EFFECTS);
124:       assertEquals(57, Node.LAST_PROP);
125:       assertEquals(47, Node.IS_DISPATCHER);
126:       assertEquals(2, Node.POST_FLAG);
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
129:       assertNotNull(node0);
130:       
131:       Node node1 = new Node(407, 5177, 149);
132:       assertFalse(node1.isCatch());
133:       assertFalse(node1.isRegExp());
134:       assertEquals(0, node1.getChildCount());
135:       assertFalse(node1.isTrue());
136:       assertFalse(node1.isDebugger());
137:       assertFalse(node1.isTry());
138:       assertFalse(node1.isDefaultCase());
139:       assertFalse(node1.isSetterDef());
140:       assertFalse(node1.isName());
141:       assertFalse(node1.isFor());
142:       assertFalse(node1.isEmpty());
143:       assertFalse(node1.isIf());
144:       assertFalse(node1.isNE());
145:       assertFalse(node1.isNull());
146:       assertEquals(407, node1.getType());
147:       assertFalse(node1.isVoid());
148:       assertFalse(node1.isDelProp());
149:       assertFalse(node1.isCall());
150:       assertFalse(node1.isString());
151:       assertFalse(node1.isWhile());
152:       assertFalse(node1.isContinue());
153:       assertFalse(node1.isReturn());
154:       assertEquals(5177, node1.getLineno());
155:       assertFalse(node1.isIn());
156:       assertFalse(node1.isInc());
157:       assertFalse(node1.isFalse());
158:       assertEquals(149, node1.getCharno());
159:       assertFalse(node1.isThrow());
160:       assertFalse(node1.isFunction());
161:       assertFalse(node1.isCast());
162:       assertFalse(node1.isObjectLit());
163:       assertFalse(node1.isNot());
164:       assertFalse(node1.isWith());
165:       assertFalse(node1.isAnd());
166:       assertFalse(node1.hasOneChild());
167:       assertFalse(node1.isScript());
168:       assertFalse(node1.isGetProp());
169:       assertEquals(21205141, node1.getSourcePosition());
170:       assertFalse(node1.isGetElem());
171:       assertFalse(node1.isAssign());
172:       assertFalse(node1.isHook());
173:       assertFalse(node1.isDec());
174:       assertFalse(node1.isTypeOf());
175:       assertFalse(node1.isComma());
176:       assertFalse(node1.isThis());
177:       assertFalse(node1.hasChildren());
178:       assertFalse(node1.isExprResult());
179:       assertFalse(node1.isInstanceOf());
180:       assertFalse(node1.isBreak());
181:       assertFalse(node1.isCase());
182:       assertFalse(node1.isDo());
183:       assertFalse(node1.hasMoreThanOneChild());
184:       assertFalse(node1.isLabel());
185:       assertFalse(node1.isBlock());
186:       assertFalse(node1.isNew());
187:       assertFalse(node1.isOr());
188:       assertFalse(node1.isAdd());
189:       assertFalse(node1.isAssignAdd());
190:       assertFalse(node1.isStringKey());
191:       assertFalse(node1.isLabelName());
192:       assertFalse(node1.isNumber());
193:       assertFalse(node1.isGetterDef());
194:       assertFalse(node1.isVar());
195:       assertFalse(node1.isParamList());
196:       assertFalse(node1.isSwitch());
197:       assertFalse(node1.isArrayLit());
198:       assertFalse(node1.equals((Object)node0));
199:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
200:       assertEquals(47, Node.IS_DISPATCHER);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(37, Node.OPT_ARG_NAME);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(48, Node.DIRECTIVES);
206:       assertEquals(49, Node.DIRECT_EVAL);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(39, Node.EMPTY_BLOCK);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(55, Node.INFERRED_FUNCTION);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertEquals(46, Node.IS_NAMESPACE);
230:       assertEquals(1, Node.DECR_FLAG);
231:       assertEquals(43, Node.IS_CONSTANT_NAME);
232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
234:       assertEquals(50, Node.FREE_CALL);
235:       assertNotNull(node1);
236:       
237:       Node node2 = new Node(16, node0);
238:       assertFalse(node0.isFalse());
239:       assertFalse(node0.isThrow());
240:       assertFalse(node0.isBreak());
241:       assertFalse(node0.isThis());
242:       assertFalse(node0.isHook());
243:       assertFalse(node0.isInstanceOf());
244:       assertFalse(node0.isComma());
245:       assertFalse(node0.isCase());
246:       assertFalse(node0.isAnd());
247:       assertFalse(node0.isString());
248:       assertFalse(node0.isSwitch());
249:       assertTrue(node0.isNumber());
250:       assertEquals((-1), node0.getCharno());
251:       assertFalse(node0.isGetProp());
252:       assertFalse(node0.isScript());
253:       assertFalse(node0.isObjectLit());
254:       assertFalse(node0.isGetterDef());
255:       assertFalse(node0.isNot());
256:       assertFalse(node0.isGetElem());
257:       assertFalse(node0.isEmpty());
258:       assertFalse(node0.isArrayLit());
259:       assertFalse(node0.isDelProp());
260:       assertFalse(node0.isLabelName());
261:       assertFalse(node0.isLabel());
262:       assertFalse(node0.isAssignAdd());
263:       assertFalse(node0.isReturn());
264:       assertFalse(node0.isExprResult());
265:       assertFalse(node0.isTypeOf());
266:       assertFalse(node0.isDec());
267:       assertFalse(node0.hasChildren());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isDefaultCase());
270:       assertFalse(node0.isVoid());
271:       assertFalse(node0.isDo());
272:       assertFalse(node0.isNew());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isAdd());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isName());
278:       assertFalse(node0.isStringKey());
279:       assertFalse(node0.isCall());
280:       assertFalse(node0.isVar());
281:       assertFalse(node0.isBlock());
282:       assertEquals(0, node0.getChildCount());
283:       assertEquals(39, node0.getType());
284:       assertFalse(node0.isContinue());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isParamList());
287:       assertEquals((-1), node0.getSourcePosition());
288:       assertFalse(node0.isDebugger());
289:       assertFalse(node0.isFor());
290:       assertFalse(node0.isCast());
291:       assertFalse(node0.hasOneChild());
292:       assertFalse(node0.isIf());
293:       assertFalse(node0.isTry());
294:       assertFalse(node0.isRegExp());
295:       assertFalse(node0.hasMoreThanOneChild());
296:       assertFalse(node0.isFunction());
297:       assertFalse(node0.isWith());
298:       assertFalse(node0.isCatch());
299:       assertEquals((-1), node0.getLineno());
300:       assertFalse(node0.isInc());
301:       assertFalse(node0.isSetterDef());
302:       assertFalse(node0.isNE());
303:       assertFalse(node0.isIn());
304:       assertFalse(node2.isCast());
305:       assertFalse(node2.isExprResult());
306:       assertFalse(node2.isScript());
307:       assertFalse(node2.isNot());
308:       assertFalse(node2.isLabelName());
309:       assertEquals((-1), node2.getSourcePosition());
310:       assertFalse(node2.isGetElem());
311:       assertFalse(node2.isAnd());
312:       assertFalse(node2.isOr());
313:       assertFalse(node2.isLabel());
314:       assertFalse(node2.isContinue());
315:       assertFalse(node2.isDo());
316:       assertFalse(node2.isThrow());
317:       assertFalse(node2.isAssignAdd());
318:       assertFalse(node2.isHook());
319:       assertFalse(node2.isBlock());
320:       assertEquals((-1), node2.getCharno());
321:       assertFalse(node2.isInc());
322:       assertFalse(node2.isParamList());
323:       assertFalse(node2.isSwitch());
324:       assertFalse(node2.isStringKey());
325:       assertEquals(1, node2.getChildCount());
326:       assertEquals((-1), node2.getLineno());
327:       assertTrue(node2.hasChildren());
328:       assertFalse(node2.isCatch());
329:       assertFalse(node2.hasMoreThanOneChild());
330:       assertFalse(node2.isNumber());
331:       assertFalse(node2.isInstanceOf());
332:       assertFalse(node2.isWith());
333:       assertFalse(node2.isFor());
334:       assertFalse(node2.isCase());
335:       assertFalse(node2.isThis());
336:       assertFalse(node2.isTry());
337:       assertFalse(node2.isDebugger());
338:       assertFalse(node2.isArrayLit());
339:       assertFalse(node2.isFunction());
340:       assertFalse(node2.isRegExp());
341:       assertFalse(node2.isDelProp());
342:       assertFalse(node2.isGetterDef());
343:       assertFalse(node2.isTrue());
344:       assertFalse(node2.isNE());
345:       assertFalse(node2.isVoid());
346:       assertFalse(node2.isIf());
347:       assertFalse(node2.isSetterDef());
348:       assertFalse(node2.isIn());
349:       assertFalse(node2.isEmpty());
350:       assertFalse(node2.isVar());
351:       assertFalse(node2.isDefaultCase());
352:       assertFalse(node2.isAdd());
353:       assertFalse(node2.isNew());
354:       assertFalse(node2.isCall());
355:       assertFalse(node2.isFalse());
356:       assertFalse(node2.isBreak());
357:       assertFalse(node2.isNull());
358:       assertFalse(node2.isName());
359:       assertFalse(node2.isReturn());
360:       assertEquals(16, node2.getType());
361:       assertFalse(node2.isGetProp());
362:       assertFalse(node2.isComma());
363:       assertFalse(node2.isObjectLit());
364:       assertFalse(node2.isTypeOf());
365:       assertFalse(node2.isString());
366:       assertTrue(node2.hasOneChild());
367:       assertFalse(node2.isWhile());
368:       assertFalse(node2.isAssign());
369:       assertFalse(node2.isDec());
370:       assertFalse(node0.equals((Object)node1));
371:       assertFalse(node2.equals((Object)node0));
372:       assertFalse(node2.equals((Object)node1));
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(39, Node.EMPTY_BLOCK);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(43, Node.IS_CONSTANT_NAME);
378:       assertEquals(36, Node.QUOTED_PROP);
379:       assertEquals(8, Node.FLAG_NO_THROWS);
380:       assertEquals(48, Node.DIRECTIVES);
381:       assertEquals(50, Node.FREE_CALL);
382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
385:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
386:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
387:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
389:       assertEquals(12, Node.COLUMN_BITS);
390:       assertEquals(32, Node.INCRDECR_PROP);
391:       assertEquals(1, Node.DECR_FLAG);
392:       assertEquals(56, Node.CHANGE_TIME);
393:       assertEquals(37, Node.OPT_ARG_NAME);
394:       assertEquals(49, Node.DIRECT_EVAL);
395:       assertEquals(46, Node.IS_NAMESPACE);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(57, Node.REFLECTED_OBJECT);
398:       assertEquals(53, Node.INPUT_ID);
399:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
400:       assertEquals(52, Node.LENGTH);
401:       assertEquals(40, Node.ORIGINALNAME_PROP);
402:       assertEquals(29, Node.JSDOC_INFO_PROP);
403:       assertEquals(15, Node.NO_SIDE_EFFECTS);
404:       assertEquals(57, Node.LAST_PROP);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(2, Node.POST_FLAG);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(2, Node.POST_FLAG);
410:       assertEquals(56, Node.CHANGE_TIME);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
413:       assertEquals(47, Node.IS_DISPATCHER);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(29, Node.JSDOC_INFO_PROP);
417:       assertEquals(32, Node.INCRDECR_PROP);
418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
419:       assertEquals(1, Node.DECR_FLAG);
420:       assertEquals(53, Node.INPUT_ID);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertEquals(54, Node.SLASH_V);
423:       assertEquals(43, Node.IS_CONSTANT_NAME);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(30, Node.VAR_ARGS_NAME);
426:       assertEquals(40, Node.ORIGINALNAME_PROP);
427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(48, Node.DIRECTIVES);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
436:       assertEquals(52, Node.LENGTH);
437:       assertEquals(36, Node.QUOTED_PROP);
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       assertEquals(57, Node.REFLECTED_OBJECT);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(4095, Node.COLUMN_MASK);
442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
443:       assertEquals(49, Node.DIRECT_EVAL);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertNotNull(node2);
446:       
447:       double double0 = node0.getDouble();
448:       assertEquals(1.0, double0, 0.01);
449:       assertFalse(node0.isFalse());
450:       assertFalse(node0.isThrow());
451:       assertFalse(node0.isBreak());
452:       assertFalse(node0.isThis());
453:       assertFalse(node0.isHook());
454:       assertFalse(node0.isInstanceOf());
455:       assertFalse(node0.isComma());
456:       assertFalse(node0.isCase());
457:       assertFalse(node0.isAnd());
458:       assertFalse(node0.isString());
459:       assertFalse(node0.isSwitch());
460:       assertTrue(node0.isNumber());
461:       assertEquals((-1), node0.getCharno());
462:       assertFalse(node0.isGetProp());
463:       assertFalse(node0.isScript());
464:       assertFalse(node0.isObjectLit());
465:       assertFalse(node0.isGetterDef());
466:       assertFalse(node0.isNot());
467:       assertFalse(node0.isGetElem());
468:       assertFalse(node0.isEmpty());
469:       assertFalse(node0.isArrayLit());
470:       assertFalse(node0.isDelProp());
471:       assertFalse(node0.isLabelName());
472:       assertFalse(node0.isLabel());
473:       assertFalse(node0.isAssignAdd());
474:       assertFalse(node0.isReturn());
475:       assertFalse(node0.isExprResult());
476:       assertFalse(node0.isTypeOf());
477:       assertFalse(node0.isDec());
478:       assertFalse(node0.hasChildren());
479:       assertFalse(node0.isAssign());
480:       assertFalse(node0.isDefaultCase());
481:       assertFalse(node0.isVoid());
482:       assertFalse(node0.isDo());
483:       assertFalse(node0.isNew());
484:       assertFalse(node0.isTrue());
485:       assertFalse(node0.isAdd());
486:       assertFalse(node0.isNull());
487:       assertFalse(node0.isOr());
488:       assertFalse(node0.isName());
489:       assertFalse(node0.isStringKey());
490:       assertFalse(node0.isCall());
491:       assertFalse(node0.isVar());
492:       assertFalse(node0.isBlock());
493:       assertEquals(0, node0.getChildCount());
494:       assertEquals(39, node0.getType());
495:       assertFalse(node0.isContinue());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.isParamList());
498:       assertEquals((-1), node0.getSourcePosition());
499:       assertFalse(node0.isDebugger());
500:       assertFalse(node0.isFor());
501:       assertFalse(node0.isCast());
502:       assertFalse(node0.hasOneChild());
503:       assertFalse(node0.isIf());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isRegExp());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.isFunction());
508:       assertFalse(node0.isWith());
509:       assertFalse(node0.isCatch());
510:       assertEquals((-1), node0.getLineno());
511:       assertFalse(node0.isInc());
512:       assertFalse(node0.isSetterDef());
513:       assertFalse(node0.isNE());
514:       assertFalse(node0.isIn());
515:       assertFalse(node0.equals((Object)node1));
516:       assertFalse(node0.equals((Object)node2));
517:       assertEquals(4095, Node.COLUMN_MASK);
518:       assertEquals(39, Node.EMPTY_BLOCK);
519:       assertEquals(55, Node.INFERRED_FUNCTION);
520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
521:       assertEquals(43, Node.IS_CONSTANT_NAME);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(8, Node.FLAG_NO_THROWS);
524:       assertEquals(48, Node.DIRECTIVES);
525:       assertEquals(50, Node.FREE_CALL);
526:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
529:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
530:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
532:       assertEquals(51, Node.STATIC_SOURCE_FILE);
533:       assertEquals(12, Node.COLUMN_BITS);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(1, Node.DECR_FLAG);
536:       assertEquals(56, Node.CHANGE_TIME);
537:       assertEquals(37, Node.OPT_ARG_NAME);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(54, Node.SLASH_V);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(53, Node.INPUT_ID);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(52, Node.LENGTH);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(29, Node.JSDOC_INFO_PROP);
547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
548:       assertEquals(57, Node.LAST_PROP);
549:       assertEquals(47, Node.IS_DISPATCHER);
550:       assertEquals(2, Node.POST_FLAG);
551:       assertEquals(30, Node.VAR_ARGS_NAME);
552:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
553:       
554:       Node node3 = Node.newString((-125), "me");
555:       assertFalse(node3.isParamList());
556:       assertFalse(node3.isSetterDef());
557:       assertFalse(node3.isNull());
558:       assertFalse(node3.isStringKey());
559:       assertFalse(node3.isName());
560:       assertFalse(node3.isAdd());
561:       assertFalse(node3.isRegExp());
562:       assertFalse(node3.isTrue());
563:       assertFalse(node3.isBlock());
564:       assertFalse(node3.isTry());
565:       assertFalse(node3.isWhile());
566:       assertFalse(node3.isVoid());
567:       assertFalse(node3.isCatch());
568:       assertFalse(node3.isReturn());
569:       assertFalse(node3.isCall());
570:       assertFalse(node3.hasMoreThanOneChild());
571:       assertFalse(node3.isNE());
572:       assertEquals((-1), node3.getSourcePosition());
573:       assertFalse(node3.isDec());
574:       assertFalse(node3.hasChildren());
575:       assertEquals((-1), node3.getLineno());
576:       assertFalse(node3.isIf());
577:       assertFalse(node3.isString());
578:       assertFalse(node3.isIn());
579:       assertEquals((-125), node3.getType());
580:       assertFalse(node3.isDebugger());
581:       assertFalse(node3.isInc());
582:       assertFalse(node3.isAnd());
583:       assertFalse(node3.isCast());
584:       assertFalse(node3.isThrow());
585:       assertFalse(node3.isContinue());
586:       assertFalse(node3.isFunction());
587:       assertFalse(node3.isFalse());
588:       assertFalse(node3.isComma());
589:       assertFalse(node3.isBreak());
590:       assertFalse(node3.isGetProp());
591:       assertFalse(node3.isThis());
592:       assertFalse(node3.isNot());
593:       assertFalse(node3.isObjectLit());
594:       assertFalse(node3.isScript());
595:       assertFalse(node3.isExprResult());
596:       assertFalse(node3.isCase());
597:       assertFalse(node3.isInstanceOf());
598:       assertFalse(node3.isHook());
599:       assertFalse(node3.isGetElem());
600:       assertFalse(node3.isAssign());
601:       assertFalse(node3.isTypeOf());
602:       assertFalse(node3.isWith());
603:       assertFalse(node3.isFor());
604:       assertFalse(node3.isAssignAdd());
605:       assertFalse(node3.isLabelName());
606:       assertFalse(node3.isDelProp());
607:       assertFalse(node3.hasOneChild());
608:       assertFalse(node3.isEmpty());
609:       assertFalse(node3.isOr());
610:       assertFalse(node3.isGetterDef());
611:       assertFalse(node3.isNumber());
612:       assertEquals((-1), node3.getCharno());
613:       assertFalse(node3.isDo());
614:       assertFalse(node3.isNew());
615:       assertFalse(node3.isDefaultCase());
616:       assertFalse(node3.isSwitch());
617:       assertFalse(node3.isVar());
618:       assertFalse(node3.isArrayLit());
619:       assertFalse(node3.isLabel());
620:       assertEquals(0, node3.getChildCount());
621:       assertFalse(node3.equals((Object)node1));
622:       assertFalse(node3.equals((Object)node0));
623:       assertFalse(node3.equals((Object)node2));
624:       assertEquals(4095, Node.COLUMN_MASK);
625:       assertEquals(55, Node.INFERRED_FUNCTION);
626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
627:       assertEquals(53, Node.INPUT_ID);
628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
630:       assertEquals(29, Node.JSDOC_INFO_PROP);
631:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
632:       assertEquals(37, Node.OPT_ARG_NAME);
633:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
636:       assertEquals(48, Node.DIRECTIVES);
637:       assertEquals(52, Node.LENGTH);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(56, Node.CHANGE_TIME);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(57, Node.REFLECTED_OBJECT);
642:       assertEquals(30, Node.VAR_ARGS_NAME);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(1, Node.DECR_FLAG);
645:       assertEquals(57, Node.LAST_PROP);
646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(2, Node.POST_FLAG);
649:       assertEquals(12, Node.COLUMN_BITS);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
652:       assertEquals(50, Node.FREE_CALL);
653:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
654:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(43, Node.IS_CONSTANT_NAME);
657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
658:       assertEquals(46, Node.IS_NAMESPACE);
659:       assertEquals(54, Node.SLASH_V);
660:       assertNotNull(node3);
661:       
662:       node3.setType(36);
663:       assertFalse(node3.isParamList());
664:       assertFalse(node3.isSetterDef());
665:       assertFalse(node3.isNull());
666:       assertFalse(node3.isStringKey());
667:       assertFalse(node3.isName());
668:       assertFalse(node3.isAdd());
669:       assertFalse(node3.isRegExp());
670:       assertFalse(node3.isTrue());
671:       assertFalse(node3.isBlock());
672:       assertFalse(node3.isTry());
673:       assertFalse(node3.isWhile());
674:       assertFalse(node3.isVoid());
675:       assertFalse(node3.isCatch());
676:       assertFalse(node3.isReturn());
677:       assertFalse(node3.isCall());
678:       assertFalse(node3.hasMoreThanOneChild());
679:       assertFalse(node3.isNE());
680:       assertEquals((-1), node3.getSourcePosition());
681:       assertFalse(node3.isDec());
682:       assertFalse(node3.hasChildren());
683:       assertEquals((-1), node3.getLineno());
684:       assertFalse(node3.isIf());
685:       assertFalse(node3.isString());
686:       assertFalse(node3.isIn());
687:       assertFalse(node3.isDebugger());
688:       assertFalse(node3.isInc());
689:       assertFalse(node3.isAnd());
690:       assertFalse(node3.isCast());
691:       assertFalse(node3.isThrow());
692:       assertFalse(node3.isContinue());
693:       assertEquals(36, node3.getType());
694:       assertFalse(node3.isFunction());
695:       assertFalse(node3.isFalse());
696:       assertFalse(node3.isComma());
697:       assertFalse(node3.isBreak());
698:       assertFalse(node3.isGetProp());
699:       assertFalse(node3.isThis());
700:       assertFalse(node3.isNot());
701:       assertFalse(node3.isObjectLit());
702:       assertFalse(node3.isScript());
703:       assertFalse(node3.isExprResult());
704:       assertFalse(node3.isCase());
705:       assertFalse(node3.isInstanceOf());
706:       assertFalse(node3.isHook());
707:       assertFalse(node3.isGetElem());
708:       assertFalse(node3.isAssign());
709:       assertFalse(node3.isTypeOf());
710:       assertFalse(node3.isWith());
711:       assertFalse(node3.isFor());
712:       assertFalse(node3.isAssignAdd());
713:       assertFalse(node3.isLabelName());
714:       assertFalse(node3.isDelProp());
715:       assertFalse(node3.hasOneChild());
716:       assertFalse(node3.isEmpty());
717:       assertFalse(node3.isOr());
718:       assertFalse(node3.isGetterDef());
719:       assertFalse(node3.isNumber());
720:       assertEquals((-1), node3.getCharno());
721:       assertFalse(node3.isDo());
722:       assertFalse(node3.isNew());
723:       assertFalse(node3.isDefaultCase());
724:       assertFalse(node3.isSwitch());
725:       assertFalse(node3.isVar());
726:       assertFalse(node3.isArrayLit());
727:       assertFalse(node3.isLabel());
728:       assertEquals(0, node3.getChildCount());
729:       assertFalse(node3.equals((Object)node1));
730:       assertFalse(node3.equals((Object)node0));
731:       assertFalse(node3.equals((Object)node2));
732:       assertEquals(4095, Node.COLUMN_MASK);
733:       assertEquals(55, Node.INFERRED_FUNCTION);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(53, Node.INPUT_ID);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(29, Node.JSDOC_INFO_PROP);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(37, Node.OPT_ARG_NAME);
741:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
742:       assertEquals(39, Node.EMPTY_BLOCK);
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(48, Node.DIRECTIVES);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(8, Node.FLAG_NO_THROWS);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(57, Node.REFLECTED_OBJECT);
750:       assertEquals(30, Node.VAR_ARGS_NAME);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
755:       assertEquals(32, Node.INCRDECR_PROP);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(47, Node.IS_DISPATCHER);
759:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
762:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
763:       assertEquals(40, Node.ORIGINALNAME_PROP);
764:       assertEquals(43, Node.IS_CONSTANT_NAME);
765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
766:       assertEquals(46, Node.IS_NAMESPACE);
767:       assertEquals(54, Node.SLASH_V);
768:       
769:       Iterable<Node> iterable0 = node1.children();
770:       assertFalse(node1.isCatch());
771:       assertFalse(node1.isRegExp());
772:       assertEquals(0, node1.getChildCount());
773:       assertFalse(node1.isTrue());
774:       assertFalse(node1.isDebugger());
775:       assertFalse(node1.isTry());
776:       assertFalse(node1.isDefaultCase());
777:       assertFalse(node1.isSetterDef());
778:       assertFalse(node1.isName());
779:       assertFalse(node1.isFor());
780:       assertFalse(node1.isEmpty());
781:       assertFalse(node1.isIf());
782:       assertFalse(node1.isNE());
783:       assertFalse(node1.isNull());
784:       assertEquals(407, node1.getType());
785:       assertFalse(node1.isVoid());
786:       assertFalse(node1.isDelProp());
787:       assertFalse(node1.isCall());
788:       assertFalse(node1.isString());
789:       assertFalse(node1.isWhile());
790:       assertFalse(node1.isContinue());
791:       assertFalse(node1.isReturn());
792:       assertEquals(5177, node1.getLineno());
793:       assertFalse(node1.isIn());
794:       assertFalse(node1.isInc());
795:       assertFalse(node1.isFalse());
796:       assertEquals(149, node1.getCharno());
797:       assertFalse(node1.isThrow());
798:       assertFalse(node1.isFunction());
799:       assertFalse(node1.isCast());
800:       assertFalse(node1.isObjectLit());
801:       assertFalse(node1.isNot());
802:       assertFalse(node1.isWith());
803:       assertFalse(node1.isAnd());
804:       assertFalse(node1.hasOneChild());
805:       assertFalse(node1.isScript());
806:       assertFalse(node1.isGetProp());
807:       assertEquals(21205141, node1.getSourcePosition());
808:       assertFalse(node1.isGetElem());
809:       assertFalse(node1.isAssign());
810:       assertFalse(node1.isHook());
811:       assertFalse(node1.isDec());
812:       assertFalse(node1.isTypeOf());
813:       assertFalse(node1.isComma());
814:       assertFalse(node1.isThis());
815:       assertFalse(node1.hasChildren());
816:       assertFalse(node1.isExprResult());
817:       assertFalse(node1.isInstanceOf());
818:       assertFalse(node1.isBreak());
819:       assertFalse(node1.isCase());
820:       assertFalse(node1.isDo());
821:       assertFalse(node1.hasMoreThanOneChild());
822:       assertFalse(node1.isLabel());
823:       assertFalse(node1.isBlock());
824:       assertFalse(node1.isNew());
825:       assertFalse(node1.isOr());
826:       assertFalse(node1.isAdd());
827:       assertFalse(node1.isAssignAdd());
828:       assertFalse(node1.isStringKey());
829:       assertFalse(node1.isLabelName());
830:       assertFalse(node1.isNumber());
831:       assertFalse(node1.isGetterDef());
832:       assertFalse(node1.isVar());
833:       assertFalse(node1.isParamList());
834:       assertFalse(node1.isSwitch());
835:       assertFalse(node1.isArrayLit());
836:       assertFalse(node1.equals((Object)node0));
837:       assertFalse(node1.equals((Object)node3));
838:       assertFalse(node1.equals((Object)node2));
839:       assertNotSame(node1, node2);
840:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
841:       assertEquals(47, Node.IS_DISPATCHER);
842:       assertEquals(2, Node.POST_FLAG);
843:       assertEquals(37, Node.OPT_ARG_NAME);
844:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
845:       assertEquals(4095, Node.COLUMN_MASK);
846:       assertEquals(48, Node.DIRECTIVES);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
849:       assertEquals(57, Node.LAST_PROP);
850:       assertEquals(56, Node.CHANGE_TIME);
851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
852:       assertEquals(36, Node.QUOTED_PROP);
853:       assertEquals(39, Node.EMPTY_BLOCK);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(29, Node.JSDOC_INFO_PROP);
856:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
857:       assertEquals(55, Node.INFERRED_FUNCTION);
858:       assertEquals(52, Node.LENGTH);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(57, Node.REFLECTED_OBJECT);
862:       assertEquals(40, Node.ORIGINALNAME_PROP);
863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
864:       assertEquals(54, Node.SLASH_V);
865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
866:       assertEquals(30, Node.VAR_ARGS_NAME);
867:       assertEquals(51, Node.STATIC_SOURCE_FILE);
868:       assertEquals(12, Node.COLUMN_BITS);
869:       assertEquals(32, Node.INCRDECR_PROP);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(1, Node.DECR_FLAG);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(50, Node.FREE_CALL);
876:       assertNotNull(iterable0);
877:       assertFalse(iterable0.contains(node0));
878:       
879:       boolean boolean0 = node3.isNew();
880:       assertFalse(boolean0);
881:       assertFalse(node3.isParamList());
882:       assertFalse(node3.isSetterDef());
883:       assertFalse(node3.isNull());
884:       assertFalse(node3.isStringKey());
885:       assertFalse(node3.isName());
886:       assertFalse(node3.isAdd());
887:       assertFalse(node3.isRegExp());
888:       assertFalse(node3.isTrue());
889:       assertFalse(node3.isBlock());
890:       assertFalse(node3.isTry());
891:       assertFalse(node3.isWhile());
892:       assertFalse(node3.isVoid());
893:       assertFalse(node3.isCatch());
894:       assertFalse(node3.isReturn());
895:       assertFalse(node3.isCall());
896:       assertFalse(node3.hasMoreThanOneChild());
897:       assertFalse(node3.isNE());
898:       assertEquals((-1), node3.getSourcePosition());
899:       assertFalse(node3.isDec());
900:       assertFalse(node3.hasChildren());
901:       assertEquals((-1), node3.getLineno());
902:       assertFalse(node3.isIf());
903:       assertFalse(node3.isString());
904:       assertFalse(node3.isIn());
905:       assertFalse(node3.isDebugger());
906:       assertFalse(node3.isInc());
907:       assertFalse(node3.isAnd());
908:       assertFalse(node3.isCast());
909:       assertFalse(node3.isThrow());
910:       assertFalse(node3.isContinue());
911:       assertEquals(36, node3.getType());
912:       assertFalse(node3.isFunction());
913:       assertFalse(node3.isFalse());
914:       assertFalse(node3.isComma());
915:       assertFalse(node3.isBreak());
916:       assertFalse(node3.isGetProp());
917:       assertFalse(node3.isThis());
918:       assertFalse(node3.isNot());
919:       assertFalse(node3.isObjectLit());
920:       assertFalse(node3.isScript());
921:       assertFalse(node3.isExprResult());
922:       assertFalse(node3.isCase());
923:       assertFalse(node3.isInstanceOf());
924:       assertFalse(node3.isHook());
925:       assertFalse(node3.isGetElem());
926:       assertFalse(node3.isAssign());
927:       assertFalse(node3.isTypeOf());
928:       assertFalse(node3.isWith());
929:       assertFalse(node3.isFor());
930:       assertFalse(node3.isAssignAdd());
931:       assertFalse(node3.isLabelName());
932:       assertFalse(node3.isDelProp());
933:       assertFalse(node3.hasOneChild());
934:       assertFalse(node3.isEmpty());
935:       assertFalse(node3.isOr());
936:       assertFalse(node3.isGetterDef());
937:       assertFalse(node3.isNumber());
938:       assertEquals((-1), node3.getCharno());
939:       assertFalse(node3.isDo());
940:       assertFalse(node3.isNew());
941:       assertFalse(node3.isDefaultCase());
942:       assertFalse(node3.isSwitch());
943:       assertFalse(node3.isVar());
944:       assertFalse(node3.isArrayLit());
945:       assertFalse(node3.isLabel());
946:       assertEquals(0, node3.getChildCount());
947:       assertFalse(node3.equals((Object)node1));
948:       assertFalse(node3.equals((Object)node0));
949:       assertFalse(node3.equals((Object)node2));
950:       assertEquals(4095, Node.COLUMN_MASK);
951:       assertEquals(55, Node.INFERRED_FUNCTION);
952:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
953:       assertEquals(53, Node.INPUT_ID);
954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
956:       assertEquals(29, Node.JSDOC_INFO_PROP);
957:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
958:       assertEquals(37, Node.OPT_ARG_NAME);
959:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
960:       assertEquals(39, Node.EMPTY_BLOCK);
961:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(36, Node.QUOTED_PROP);
967:       assertEquals(57, Node.REFLECTED_OBJECT);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(49, Node.DIRECT_EVAL);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
973:       assertEquals(32, Node.INCRDECR_PROP);
974:       assertEquals(2, Node.POST_FLAG);
975:       assertEquals(12, Node.COLUMN_BITS);
976:       assertEquals(47, Node.IS_DISPATCHER);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       assertEquals(50, Node.FREE_CALL);
979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
980:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
981:       assertEquals(40, Node.ORIGINALNAME_PROP);
982:       assertEquals(43, Node.IS_CONSTANT_NAME);
983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
984:       assertEquals(46, Node.IS_NAMESPACE);
985:       assertEquals(54, Node.SLASH_V);
986:       
987:       node2.setSourceFileForTesting((String) null);
988:       assertFalse(node0.isFalse());
989:       assertFalse(node0.isThrow());
990:       assertFalse(node0.isBreak());
991:       assertFalse(node0.isThis());
992:       assertFalse(node0.isHook());
993:       assertFalse(node0.isInstanceOf());
994:       assertFalse(node0.isComma());
995:       assertFalse(node0.isCase());
996:       assertFalse(node0.isAnd());
997:       assertFalse(node0.isString());
998:       assertFalse(node0.isSwitch());
999:       assertTrue(node0.isNumber());
1000:       assertEquals((-1), node0.getCharno());
1001:       assertFalse(node0.isGetProp());
1002:       assertFalse(node0.isScript());
1003:       assertFalse(node0.isObjectLit());
1004:       assertFalse(node0.isGetterDef());
1005:       assertFalse(node0.isNot());
1006:       assertFalse(node0.isGetElem());
1007:       assertFalse(node0.isEmpty());
1008:       assertFalse(node0.isArrayLit());
1009:       assertFalse(node0.isDelProp());
1010:       assertFalse(node0.isLabelName());
1011:       assertFalse(node0.isLabel());
1012:       assertFalse(node0.isAssignAdd());
1013:       assertFalse(node0.isReturn());
1014:       assertFalse(node0.isExprResult());
1015:       assertFalse(node0.isTypeOf());
1016:       assertFalse(node0.isDec());
1017:       assertFalse(node0.hasChildren());
1018:       assertFalse(node0.isAssign());
1019:       assertFalse(node0.isDefaultCase());
1020:       assertFalse(node0.isVoid());
1021:       assertFalse(node0.isDo());
1022:       assertFalse(node0.isNew());
1023:       assertFalse(node0.isTrue());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isNull());
1026:       assertFalse(node0.isOr());
1027:       assertFalse(node0.isName());
1028:       assertFalse(node0.isStringKey());
1029:       assertFalse(node0.isCall());
1030:       assertFalse(node0.isVar());
1031:       assertFalse(node0.isBlock());
1032:       assertEquals(0, node0.getChildCount());
1033:       assertEquals(39, node0.getType());
1034:       assertFalse(node0.isContinue());
1035:       assertFalse(node0.isWhile());
1036:       assertFalse(node0.isParamList());
1037:       assertEquals((-1), node0.getSourcePosition());
1038:       assertFalse(node0.isDebugger());
1039:       assertFalse(node0.isFor());
1040:       assertFalse(node0.isCast());
1041:       assertFalse(node0.hasOneChild());
1042:       assertFalse(node0.isIf());
1043:       assertFalse(node0.isTry());
1044:       assertFalse(node0.isRegExp());
1045:       assertFalse(node0.hasMoreThanOneChild());
1046:       assertFalse(node0.isFunction());
1047:       assertFalse(node0.isWith());
1048:       assertFalse(node0.isCatch());
1049:       assertEquals((-1), node0.getLineno());
1050:       assertFalse(node0.isInc());
1051:       assertFalse(node0.isSetterDef());
1052:       assertFalse(node0.isNE());
1053:       assertFalse(node0.isIn());
1054:       assertFalse(node2.isCast());
1055:       assertFalse(node2.isExprResult());
1056:       assertFalse(node2.isScript());
1057:       assertFalse(node2.isNot());
1058:       assertFalse(node2.isLabelName());
1059:       assertEquals((-1), node2.getSourcePosition());
1060:       assertFalse(node2.isGetElem());
1061:       assertFalse(node2.isAnd());
1062:       assertFalse(node2.isOr());
1063:       assertFalse(node2.isLabel());
1064:       assertFalse(node2.isContinue());
1065:       assertFalse(node2.isDo());
1066:       assertFalse(node2.isThrow());
1067:       assertFalse(node2.isAssignAdd());
1068:       assertFalse(node2.isHook());
1069:       assertFalse(node2.isBlock());
1070:       assertEquals((-1), node2.getCharno());
1071:       assertFalse(node2.isInc());
1072:       assertFalse(node2.isParamList());
1073:       assertFalse(node2.isSwitch());
1074:       assertFalse(node2.isStringKey());
1075:       assertEquals(1, node2.getChildCount());
1076:       assertEquals((-1), node2.getLineno());
1077:       assertTrue(node2.hasChildren());
1078:       assertFalse(node2.isCatch());
1079:       assertFalse(node2.hasMoreThanOneChild());
1080:       assertFalse(node2.isNumber());
1081:       assertFalse(node2.isInstanceOf());
1082:       assertFalse(node2.isWith());
1083:       assertFalse(node2.isFor());
1084:       assertFalse(node2.isCase());
1085:       assertFalse(node2.isThis());
1086:       assertFalse(node2.isTry());
1087:       assertFalse(node2.isDebugger());
1088:       assertFalse(node2.isArrayLit());
1089:       assertFalse(node2.isFunction());
1090:       assertFalse(node2.isRegExp());
1091:       assertFalse(node2.isDelProp());
1092:       assertFalse(node2.isGetterDef());
1093:       assertFalse(node2.isTrue());
1094:       assertFalse(node2.isNE());
1095:       assertFalse(node2.isVoid());
1096:       assertFalse(node2.isIf());
1097:       assertFalse(node2.isSetterDef());
1098:       assertFalse(node2.isIn());
1099:       assertFalse(node2.isEmpty());
1100:       assertFalse(node2.isVar());
1101:       assertFalse(node2.isDefaultCase());
1102:       assertFalse(node2.isAdd());
1103:       assertFalse(node2.isNew());
1104:       assertFalse(node2.isCall());
1105:       assertFalse(node2.isFalse());
1106:       assertFalse(node2.isBreak());
1107:       assertFalse(node2.isNull());
1108:       assertFalse(node2.isName());
1109:       assertFalse(node2.isReturn());
1110:       assertEquals(16, node2.getType());
1111:       assertFalse(node2.isGetProp());
1112:       assertFalse(node2.isComma());
1113:       assertFalse(node2.isObjectLit());
1114:       assertFalse(node2.isTypeOf());
1115:       assertFalse(node2.isString());
1116:       assertTrue(node2.hasOneChild());
1117:       assertFalse(node2.isWhile());
1118:       assertFalse(node2.isAssign());
1119:       assertFalse(node2.isDec());
1120:       assertFalse(node0.equals((Object)node1));
1121:       assertFalse(node0.equals((Object)node3));
1122:       assertFalse(node0.equals((Object)node2));
1123:       assertFalse(node2.equals((Object)node0));
1124:       assertFalse(node2.equals((Object)node3));
1125:       assertFalse(node2.equals((Object)node1));
1126:       assertNotSame(node2, node1);
1127:       assertEquals(4095, Node.COLUMN_MASK);
1128:       assertEquals(39, Node.EMPTY_BLOCK);
1129:       assertEquals(55, Node.INFERRED_FUNCTION);
1130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1131:       assertEquals(43, Node.IS_CONSTANT_NAME);
1132:       assertEquals(36, Node.QUOTED_PROP);
1133:       assertEquals(8, Node.FLAG_NO_THROWS);
1134:       assertEquals(48, Node.DIRECTIVES);
1135:       assertEquals(50, Node.FREE_CALL);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1143:       assertEquals(12, Node.COLUMN_BITS);
1144:       assertEquals(32, Node.INCRDECR_PROP);
1145:       assertEquals(1, Node.DECR_FLAG);
1146:       assertEquals(56, Node.CHANGE_TIME);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(49, Node.DIRECT_EVAL);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(54, Node.SLASH_V);
1151:       assertEquals(57, Node.REFLECTED_OBJECT);
1152:       assertEquals(53, Node.INPUT_ID);
1153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1154:       assertEquals(52, Node.LENGTH);
1155:       assertEquals(40, Node.ORIGINALNAME_PROP);
1156:       assertEquals(29, Node.JSDOC_INFO_PROP);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(57, Node.LAST_PROP);
1159:       assertEquals(47, Node.IS_DISPATCHER);
1160:       assertEquals(2, Node.POST_FLAG);
1161:       assertEquals(30, Node.VAR_ARGS_NAME);
1162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1163:       assertEquals(2, Node.POST_FLAG);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(46, Node.IS_NAMESPACE);
1166:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1167:       assertEquals(47, Node.IS_DISPATCHER);
1168:       assertEquals(12, Node.COLUMN_BITS);
1169:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1170:       assertEquals(29, Node.JSDOC_INFO_PROP);
1171:       assertEquals(32, Node.INCRDECR_PROP);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(1, Node.DECR_FLAG);
1174:       assertEquals(53, Node.INPUT_ID);
1175:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1176:       assertEquals(54, Node.SLASH_V);
1177:       assertEquals(43, Node.IS_CONSTANT_NAME);
1178:       assertEquals(57, Node.LAST_PROP);
1179:       assertEquals(30, Node.VAR_ARGS_NAME);
1180:       assertEquals(40, Node.ORIGINALNAME_PROP);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(8, Node.FLAG_NO_THROWS);
1183:       assertEquals(39, Node.EMPTY_BLOCK);
1184:       assertEquals(48, Node.DIRECTIVES);
1185:       assertEquals(50, Node.FREE_CALL);
1186:       assertEquals(55, Node.INFERRED_FUNCTION);
1187:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1189:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1190:       assertEquals(52, Node.LENGTH);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1193:       assertEquals(57, Node.REFLECTED_OBJECT);
1194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1195:       assertEquals(4095, Node.COLUMN_MASK);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(49, Node.DIRECT_EVAL);
1198:       assertEquals(37, Node.OPT_ARG_NAME);
1199:       
1200:       Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
1201:       assertFalse(node1.isCatch());
1202:       assertFalse(node1.isRegExp());
1203:       assertEquals(0, node1.getChildCount());
1204:       assertFalse(node1.isTrue());
1205:       assertFalse(node1.isDebugger());
1206:       assertFalse(node1.isTry());
1207:       assertFalse(node1.isDefaultCase());
1208:       assertFalse(node1.isSetterDef());
1209:       assertFalse(node1.isName());
1210:       assertFalse(node1.isFor());
1211:       assertFalse(node1.isEmpty());
1212:       assertFalse(node1.isIf());
1213:       assertFalse(node1.isNE());
1214:       assertFalse(node1.isNull());
1215:       assertEquals(407, node1.getType());
1216:       assertFalse(node1.isVoid());
1217:       assertFalse(node1.isDelProp());
1218:       assertFalse(node1.isCall());
1219:       assertFalse(node1.isString());
1220:       assertFalse(node1.isWhile());
1221:       assertFalse(node1.isContinue());
1222:       assertFalse(node1.isReturn());
1223:       assertFalse(node1.isIn());
1224:       assertFalse(node1.isInc());
1225:       assertFalse(node1.isFalse());
1226:       assertFalse(node1.isThrow());
1227:       assertEquals((-1), node1.getSourcePosition());
1228:       assertFalse(node1.isFunction());
1229:       assertFalse(node1.isCast());
1230:       assertFalse(node1.isObjectLit());
1231:       assertFalse(node1.isNot());
1232:       assertFalse(node1.isWith());
1233:       assertFalse(node1.isAnd());
1234:       assertFalse(node1.hasOneChild());
1235:       assertFalse(node1.isScript());
1236:       assertFalse(node1.isGetProp());
1237:       assertFalse(node1.isGetElem());
1238:       assertFalse(node1.isAssign());
1239:       assertFalse(node1.isHook());
1240:       assertFalse(node1.isDec());
1241:       assertFalse(node1.isTypeOf());
1242:       assertFalse(node1.isComma());
1243:       assertFalse(node1.isThis());
1244:       assertFalse(node1.hasChildren());
1245:       assertFalse(node1.isExprResult());
1246:       assertFalse(node1.isInstanceOf());
1247:       assertEquals((-1), node1.getLineno());
1248:       assertFalse(node1.isBreak());
1249:       assertFalse(node1.isCase());
1250:       assertFalse(node1.isDo());
1251:       assertFalse(node1.hasMoreThanOneChild());
1252:       assertEquals((-1), node1.getCharno());
1253:       assertFalse(node1.isLabel());
1254:       assertFalse(node1.isBlock());
1255:       assertFalse(node1.isNew());
1256:       assertFalse(node1.isOr());
1257:       assertFalse(node1.isAdd());
1258:       assertFalse(node1.isAssignAdd());
1259:       assertFalse(node1.isStringKey());
1260:       assertFalse(node1.isLabelName());
1261:       assertFalse(node1.isNumber());
1262:       assertFalse(node1.isGetterDef());
1263:       assertFalse(node1.isVar());
1264:       assertFalse(node1.isParamList());
1265:       assertFalse(node1.isSwitch());
1266:       assertFalse(node1.isArrayLit());
1267:       assertFalse(node3.isParamList());
1268:       assertFalse(node3.isSetterDef());
1269:       assertFalse(node3.isNull());
1270:       assertFalse(node3.isStringKey());
1271:       assertFalse(node3.isName());
1272:       assertFalse(node3.isAdd());
1273:       assertFalse(node3.isRegExp());
1274:       assertFalse(node3.isTrue());
1275:       assertFalse(node3.isBlock());
1276:       assertFalse(node3.isTry());
1277:       assertFalse(node3.isWhile());
1278:       assertFalse(node3.isVoid());
1279:       assertFalse(node3.isCatch());
1280:       assertFalse(node3.isReturn());
1281:       assertFalse(node3.isCall());
1282:       assertFalse(node3.hasMoreThanOneChild());
1283:       assertFalse(node3.isNE());
1284:       assertEquals((-1), node3.getSourcePosition());
1285:       assertFalse(node3.isDec());
1286:       assertFalse(node3.hasChildren());
1287:       assertEquals((-1), node3.getLineno());
1288:       assertFalse(node3.isIf());
1289:       assertFalse(node3.isString());
1290:       assertFalse(node3.isIn());
1291:       assertFalse(node3.isDebugger());
1292:       assertFalse(node3.isInc());
1293:       assertFalse(node3.isAnd());
1294:       assertFalse(node3.isCast());
1295:       assertFalse(node3.isThrow());
1296:       assertFalse(node3.isContinue());
1297:       assertEquals(36, node3.getType());
1298:       assertFalse(node3.isFunction());
1299:       assertFalse(node3.isFalse());
1300:       assertFalse(node3.isComma());
1301:       assertFalse(node3.isBreak());
1302:       assertFalse(node3.isGetProp());
1303:       assertFalse(node3.isThis());
1304:       assertFalse(node3.isNot());
1305:       assertFalse(node3.isObjectLit());
1306:       assertFalse(node3.isScript());
1307:       assertFalse(node3.isExprResult());
1308:       assertFalse(node3.isCase());
1309:       assertFalse(node3.isInstanceOf());
1310:       assertFalse(node3.isHook());
1311:       assertFalse(node3.isGetElem());
1312:       assertFalse(node3.isAssign());
1313:       assertFalse(node3.isTypeOf());
1314:       assertFalse(node3.isWith());
1315:       assertFalse(node3.isFor());
1316:       assertFalse(node3.isAssignAdd());
1317:       assertFalse(node3.isLabelName());
1318:       assertFalse(node3.isDelProp());
1319:       assertFalse(node3.hasOneChild());
1320:       assertFalse(node3.isEmpty());
1321:       assertFalse(node3.isOr());
1322:       assertFalse(node3.isGetterDef());
1323:       assertFalse(node3.isNumber());
1324:       assertEquals((-1), node3.getCharno());
1325:       assertFalse(node3.isDo());
1326:       assertFalse(node3.isNew());
1327:       assertFalse(node3.isDefaultCase());
1328:       assertFalse(node3.isSwitch());
1329:       assertFalse(node3.isVar());
1330:       assertFalse(node3.isArrayLit());
1331:       assertFalse(node3.isLabel());
1332:       assertEquals(0, node3.getChildCount());
1333:       assertFalse(node4.isExprResult());
1334:       assertFalse(node4.isScript());
1335:       assertFalse(node4.isAnd());
1336:       assertFalse(node4.hasOneChild());
1337:       assertFalse(node4.isObjectLit());
1338:       assertFalse(node4.isNot());
1339:       assertFalse(node4.isTypeOf());
1340:       assertFalse(node4.isDec());
1341:       assertFalse(node4.isNumber());
1342:       assertFalse(node4.isBreak());
1343:       assertFalse(node4.hasChildren());
1344:       assertFalse(node4.isThis());
1345:       assertFalse(node4.isGetElem());
1346:       assertFalse(node4.isGetProp());
1347:       assertEquals((-1), node4.getLineno());
1348:       assertFalse(node4.isHook());
1349:       assertFalse(node4.isInstanceOf());
1350:       assertFalse(node4.isReturn());
1351:       assertFalse(node4.isComma());
1352:       assertFalse(node4.isWith());
1353:       assertFalse(node4.hasMoreThanOneChild());
1354:       assertFalse(node4.isAssign());
1355:       assertFalse(node4.isCase());
1356:       assertFalse(node4.isNew());
1357:       assertFalse(node4.isSwitch());
1358:       assertFalse(node4.isDo());
1359:       assertFalse(node4.isAdd());
1360:       assertEquals((-1), node4.getCharno());
1361:       assertFalse(node4.isOr());
1362:       assertFalse(node4.isParamList());
1363:       assertFalse(node4.isEmpty());
1364:       assertFalse(node4.isStringKey());
1365:       assertFalse(node4.isAssignAdd());
1366:       assertFalse(node4.isLabelName());
1367:       assertFalse(node4.isArrayLit());
1368:       assertFalse(node4.isVar());
1369:       assertFalse(node4.isLabel());
1370:       assertEquals(0, node4.getChildCount());
1371:       assertFalse(node4.isDefaultCase());
1372:       assertFalse(node4.isTrue());
1373:       assertFalse(node4.isTry());
1374:       assertFalse(node4.isVoid());
1375:       assertFalse(node4.isDebugger());
1376:       assertFalse(node4.isGetterDef());
1377:       assertFalse(node4.isNull());
1378:       assertFalse(node4.isIf());
1379:       assertFalse(node4.isNE());
1380:       assertFalse(node4.isFor());
1381:       assertFalse(node4.isName());
1382:       assertFalse(node4.isDelProp());
1383:       assertFalse(node4.isCatch());
1384:       assertFalse(node4.isCall());
1385:       assertFalse(node4.isBlock());
1386:       assertFalse(node4.isRegExp());
1387:       assertFalse(node4.isInc());
1388:       assertFalse(node4.isString());
1389:       assertFalse(node4.isWhile());
1390:       assertFalse(node4.isIn());
1391:       assertEquals(407, node4.getType());
1392:       assertEquals((-1), node4.getSourcePosition());
1393:       assertFalse(node4.isSetterDef());
1394:       assertFalse(node4.isThrow());
1395:       assertFalse(node4.isCast());
1396:       assertFalse(node4.isFalse());
1397:       assertFalse(node4.isContinue());
1398:       assertFalse(node4.isFunction());
1399:       assertFalse(node1.equals((Object)node0));
1400:       assertFalse(node1.equals((Object)node3));
1401:       assertFalse(node1.equals((Object)node2));
1402:       assertFalse(node3.equals((Object)node1));
1403:       assertFalse(node3.equals((Object)node0));
1404:       assertFalse(node3.equals((Object)node2));
1405:       assertFalse(node4.equals((Object)node3));
1406:       assertFalse(node4.equals((Object)node0));
1407:       assertFalse(node4.equals((Object)node2));
1408:       assertSame(node1, node4);
1409:       assertNotSame(node1, node2);
1410:       assertNotSame(node4, node2);
1411:       assertSame(node4, node1);
1412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1413:       assertEquals(47, Node.IS_DISPATCHER);
1414:       assertEquals(2, Node.POST_FLAG);
1415:       assertEquals(37, Node.OPT_ARG_NAME);
1416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1417:       assertEquals(4095, Node.COLUMN_MASK);
1418:       assertEquals(48, Node.DIRECTIVES);
1419:       assertEquals(49, Node.DIRECT_EVAL);
1420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(56, Node.CHANGE_TIME);
1423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1424:       assertEquals(36, Node.QUOTED_PROP);
1425:       assertEquals(39, Node.EMPTY_BLOCK);
1426:       assertEquals(53, Node.INPUT_ID);
1427:       assertEquals(29, Node.JSDOC_INFO_PROP);
1428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1429:       assertEquals(55, Node.INFERRED_FUNCTION);
1430:       assertEquals(52, Node.LENGTH);
1431:       assertEquals(8, Node.FLAG_NO_THROWS);
1432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1433:       assertEquals(57, Node.REFLECTED_OBJECT);
1434:       assertEquals(40, Node.ORIGINALNAME_PROP);
1435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1436:       assertEquals(54, Node.SLASH_V);
1437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1438:       assertEquals(30, Node.VAR_ARGS_NAME);
1439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1440:       assertEquals(12, Node.COLUMN_BITS);
1441:       assertEquals(32, Node.INCRDECR_PROP);
1442:       assertEquals(46, Node.IS_NAMESPACE);
1443:       assertEquals(1, Node.DECR_FLAG);
1444:       assertEquals(43, Node.IS_CONSTANT_NAME);
1445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1446:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1447:       assertEquals(50, Node.FREE_CALL);
1448:       assertEquals(4095, Node.COLUMN_MASK);
1449:       assertEquals(55, Node.INFERRED_FUNCTION);
1450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1451:       assertEquals(53, Node.INPUT_ID);
1452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1454:       assertEquals(29, Node.JSDOC_INFO_PROP);
1455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1456:       assertEquals(37, Node.OPT_ARG_NAME);
1457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1458:       assertEquals(39, Node.EMPTY_BLOCK);
1459:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1460:       assertEquals(48, Node.DIRECTIVES);
1461:       assertEquals(52, Node.LENGTH);
1462:       assertEquals(8, Node.FLAG_NO_THROWS);
1463:       assertEquals(56, Node.CHANGE_TIME);
1464:       assertEquals(36, Node.QUOTED_PROP);
1465:       assertEquals(57, Node.REFLECTED_OBJECT);
1466:       assertEquals(30, Node.VAR_ARGS_NAME);
1467:       assertEquals(49, Node.DIRECT_EVAL);
1468:       assertEquals(1, Node.DECR_FLAG);
1469:       assertEquals(57, Node.LAST_PROP);
1470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1471:       assertEquals(32, Node.INCRDECR_PROP);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(12, Node.COLUMN_BITS);
1474:       assertEquals(47, Node.IS_DISPATCHER);
1475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1476:       assertEquals(50, Node.FREE_CALL);
1477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1479:       assertEquals(40, Node.ORIGINALNAME_PROP);
1480:       assertEquals(43, Node.IS_CONSTANT_NAME);
1481:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1482:       assertEquals(46, Node.IS_NAMESPACE);
1483:       assertEquals(54, Node.SLASH_V);
1484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1487:       assertEquals(29, Node.JSDOC_INFO_PROP);
1488:       assertEquals(53, Node.INPUT_ID);
1489:       assertEquals(2, Node.POST_FLAG);
1490:       assertEquals(32, Node.INCRDECR_PROP);
1491:       assertEquals(47, Node.IS_DISPATCHER);
1492:       assertEquals(12, Node.COLUMN_BITS);
1493:       assertEquals(49, Node.DIRECT_EVAL);
1494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1495:       assertEquals(4095, Node.COLUMN_MASK);
1496:       assertEquals(55, Node.INFERRED_FUNCTION);
1497:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1499:       assertEquals(37, Node.OPT_ARG_NAME);
1500:       assertEquals(52, Node.LENGTH);
1501:       assertEquals(8, Node.FLAG_NO_THROWS);
1502:       assertEquals(48, Node.DIRECTIVES);
1503:       assertEquals(56, Node.CHANGE_TIME);
1504:       assertEquals(36, Node.QUOTED_PROP);
1505:       assertEquals(57, Node.REFLECTED_OBJECT);
1506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1507:       assertEquals(50, Node.FREE_CALL);
1508:       assertEquals(40, Node.ORIGINALNAME_PROP);
1509:       assertEquals(39, Node.EMPTY_BLOCK);
1510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1511:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1512:       assertEquals(57, Node.LAST_PROP);
1513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1514:       assertEquals(1, Node.DECR_FLAG);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(43, Node.IS_CONSTANT_NAME);
1517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1518:       assertEquals(46, Node.IS_NAMESPACE);
1519:       assertEquals(54, Node.SLASH_V);
1520:       assertNotNull(node4);
1521:       
1522:       Node node5 = Node.newString("me", 5177, 49);
1523:       assertFalse(node5.isIn());
1524:       assertFalse(node5.isInc());
1525:       assertFalse(node5.isFor());
1526:       assertFalse(node5.isEmpty());
1527:       assertFalse(node5.isCase());
1528:       assertFalse(node5.isArrayLit());
1529:       assertFalse(node5.isThrow());
1530:       assertFalse(node5.isFalse());
1531:       assertFalse(node5.isDebugger());
1532:       assertFalse(node5.isFunction());
1533:       assertFalse(node5.isGetterDef());
1534:       assertEquals(21205041, node5.getSourcePosition());
1535:       assertFalse(node5.isSwitch());
1536:       assertFalse(node5.isInstanceOf());
1537:       assertFalse(node5.isCatch());
1538:       assertEquals(40, node5.getType());
1539:       assertFalse(node5.isWith());
1540:       assertFalse(node5.isSetterDef());
1541:       assertFalse(node5.isThis());
1542:       assertEquals(49, node5.getCharno());
1543:       assertFalse(node5.isScript());
1544:       assertFalse(node5.isTry());
1545:       assertFalse(node5.isHook());
1546:       assertFalse(node5.isBlock());
1547:       assertFalse(node5.isRegExp());
1548:       assertFalse(node5.isIf());
1549:       assertFalse(node5.isNE());
1550:       assertFalse(node5.isReturn());
1551:       assertFalse(node5.isContinue());
1552:       assertFalse(node5.isLabel());
1553:       assertFalse(node5.hasMoreThanOneChild());
1554:       assertEquals(5177, node5.getLineno());
1555:       assertFalse(node5.isOr());
1556:       assertFalse(node5.isDec());
1557:       assertFalse(node5.isNumber());
1558:       assertFalse(node5.hasChildren());
1559:       assertFalse(node5.isWhile());
1560:       assertTrue(node5.isString());
1561:       assertFalse(node5.isNew());
1562:       assertFalse(node5.isAssignAdd());
1563:       assertFalse(node5.isDo());
1564:       assertFalse(node5.hasOneChild());
1565:       assertFalse(node5.isCast());
1566:       assertFalse(node5.isVar());
1567:       assertFalse(node5.isParamList());
1568:       assertFalse(node5.isStringKey());
1569:       assertFalse(node5.isAnd());
1570:       assertFalse(node5.isLabelName());
1571:       assertFalse(node5.isComma());
1572:       assertFalse(node5.isObjectLit());
1573:       assertEquals(0, node5.getChildCount());
1574:       assertFalse(node5.isNot());
1575:       assertFalse(node5.isDefaultCase());
1576:       assertFalse(node5.isGetProp());
1577:       assertFalse(node5.isCall());
1578:       assertFalse(node5.isAdd());
1579:       assertFalse(node5.isAssign());
1580:       assertFalse(node5.isTypeOf());
1581:       assertFalse(node5.isNull());
1582:       assertFalse(node5.isBreak());
1583:       assertFalse(node5.isTrue());
1584:       assertFalse(node5.isExprResult());
1585:       assertFalse(node5.isGetElem());
1586:       assertFalse(node5.isName());
1587:       assertFalse(node5.isDelProp());
1588:       assertFalse(node5.isVoid());
1589:       assertFalse(node5.equals((Object)node0));
1590:       assertFalse(node5.equals((Object)node2));
1591:       assertFalse(node5.equals((Object)node1));
1592:       assertFalse(node5.equals((Object)node3));
1593:       assertFalse(node5.equals((Object)node4));
1594:       assertNotSame(node5, node3);
1595:       assertEquals(52, Node.LENGTH);
1596:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1597:       assertEquals(57, Node.REFLECTED_OBJECT);
1598:       assertEquals(57, Node.LAST_PROP);
1599:       assertEquals(54, Node.SLASH_V);
1600:       assertEquals(30, Node.VAR_ARGS_NAME);
1601:       assertEquals(49, Node.DIRECT_EVAL);
1602:       assertEquals(40, Node.ORIGINALNAME_PROP);
1603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1604:       assertEquals(32, Node.INCRDECR_PROP);
1605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1606:       assertEquals(12, Node.COLUMN_BITS);
1607:       assertEquals(46, Node.IS_NAMESPACE);
1608:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1609:       assertEquals(1, Node.DECR_FLAG);
1610:       assertEquals(50, Node.FREE_CALL);
1611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1612:       assertEquals(53, Node.INPUT_ID);
1613:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1614:       assertEquals(43, Node.IS_CONSTANT_NAME);
1615:       assertEquals(36, Node.QUOTED_PROP);
1616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1617:       assertEquals(4095, Node.COLUMN_MASK);
1618:       assertEquals(37, Node.OPT_ARG_NAME);
1619:       assertEquals(8, Node.FLAG_NO_THROWS);
1620:       assertEquals(2, Node.POST_FLAG);
1621:       assertEquals(48, Node.DIRECTIVES);
1622:       assertEquals(56, Node.CHANGE_TIME);
1623:       assertEquals(47, Node.IS_DISPATCHER);
1624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1625:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1627:       assertEquals(39, Node.EMPTY_BLOCK);
1628:       assertEquals(55, Node.INFERRED_FUNCTION);
1629:       assertEquals(29, Node.JSDOC_INFO_PROP);
1630:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1631:       assertNotNull(node5);
1632:       
1633:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1634:       assertNotNull(simpleErrorReporter0);
1635:       
1636:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
1637:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1638:       assertNotNull(jSTypeRegistry0);
1639:       
1640:       // Undeclared exception!
1641:       try { 
1642:         jSTypeRegistry0.createEnumType("zTf{[37q`ufF97", node0, (JSType) null);
1643:         fail("Expecting exception: NullPointerException");
1644:       
1645:       } catch(NullPointerException e) {
1646:          //
1647:          // no message in exception (getMessage() returned null)
1648:          //
1649:          verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
1650:       }
1651:   }
1652: }
RegularFileObject[/tmp/EvoSuite_103_1629223347341/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_103_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:27.730 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);

Node node1 = new Node(407, 5177, 149);
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertEquals(407, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(5177, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertEquals(149, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertEquals(21205141, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node1);

Node node2 = new Node(16, node0);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertEquals(16, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node2);

double double0 = node0.getDouble();
assertEquals(1.0, double0, 0.01);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node3 = Node.newString((-125), "me");
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isWhile());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertEquals((-125), node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node3);

node3.setType(36);
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isWhile());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isContinue());
assertEquals(36, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertEquals(407, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertEquals(5177, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertEquals(149, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertEquals(21205141, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node3.isNew();
assertFalse(boolean0);
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isWhile());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isContinue());
assertEquals(36, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node2.setSourceFileForTesting((String) null);
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertEquals(16, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTypeOf());
assertFalse(node2.isString());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertEquals(407, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isWhile());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isContinue());
assertEquals(36, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertEquals(0, node3.getChildCount());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isAnd());
assertFalse(node4.hasOneChild());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isNumber());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isThis());
assertFalse(node4.isGetElem());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isWith());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssign());
assertFalse(node4.isCase());
assertFalse(node4.isNew());
assertFalse(node4.isSwitch());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isOr());
assertFalse(node4.isParamList());
assertFalse(node4.isEmpty());
assertFalse(node4.isStringKey());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabelName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isVar());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTrue());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isBlock());
assertFalse(node4.isRegExp());
assertFalse(node4.isInc());
assertFalse(node4.isString());
assertFalse(node4.isWhile());
assertFalse(node4.isIn());
assertEquals(407, node4.getType());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isCast());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertSame(node1, node4);
assertNotSame(node1, node2);
assertNotSame(node4, node2);
assertSame(node4, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node4);

Node node5 = Node.newString("me", 5177, 49);
assertFalse(node5.isIn());
assertFalse(node5.isInc());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isCase());
assertFalse(node5.isArrayLit());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isDebugger());
assertFalse(node5.isFunction());
assertFalse(node5.isGetterDef());
assertEquals(21205041, node5.getSourcePosition());
assertFalse(node5.isSwitch());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCatch());
assertEquals(40, node5.getType());
assertFalse(node5.isWith());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThis());
assertEquals(49, node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isTry());
assertFalse(node5.isHook());
assertFalse(node5.isBlock());
assertFalse(node5.isRegExp());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isReturn());
assertFalse(node5.isContinue());
assertFalse(node5.isLabel());
assertFalse(node5.hasMoreThanOneChild());
assertEquals(5177, node5.getLineno());
assertFalse(node5.isOr());
assertFalse(node5.isDec());
assertFalse(node5.isNumber());
assertFalse(node5.hasChildren());
assertFalse(node5.isWhile());
assertTrue(node5.isString());
assertFalse(node5.isNew());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.hasOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isVar());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isAnd());
assertFalse(node5.isLabelName());
assertFalse(node5.isComma());
assertFalse(node5.isObjectLit());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isNot());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isGetProp());
assertFalse(node5.isCall());
assertFalse(node5.isAdd());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNull());
assertFalse(node5.isBreak());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isGetElem());
assertFalse(node5.isName());
assertFalse(node5.isDelProp());
assertFalse(node5.isVoid());
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertNotSame(node5, node3);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node5);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

jSTypeRegistry0.createEnumType("zTf{[37q`ufF97", node0, (JSType) null);

[MASTER] 18:02:29.301 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_109_1629223348801/com/google/javascript/rhino/Node_109_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_109_1629223348801/com/google/javascript/rhino/Node_109_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:29.301 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:29.301 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:29.302 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1085
[MASTER] 18:02:29.305 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_109_1629223348801/com/google/javascript/rhino/Node_109_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:28 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_109_tmp__ESTest extends Node_109_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(1.0);
23:       assertFalse(node0.isWhile());
24:       assertFalse(node0.isDo());
25:       assertEquals(39, node0.getType());
26:       assertFalse(node0.hasMoreThanOneChild());
27:       assertFalse(node0.isContinue());
28:       assertEquals((-1), node0.getLineno());
29:       assertFalse(node0.isOr());
30:       assertFalse(node0.isStringKey());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.isSetterDef());
33:       assertFalse(node0.isCast());
34:       assertEquals(0, node0.getChildCount());
35:       assertFalse(node0.isAdd());
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isVar());
39:       assertFalse(node0.isAssignAdd());
40:       assertFalse(node0.isWith());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isRegExp());
43:       assertFalse(node0.isScript());
44:       assertFalse(node0.isInstanceOf());
45:       assertFalse(node0.isArrayLit());
46:       assertFalse(node0.isParamList());
47:       assertFalse(node0.isGetterDef());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isTry());
50:       assertFalse(node0.isHook());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isBlock());
53:       assertFalse(node0.isThis());
54:       assertFalse(node0.isCase());
55:       assertFalse(node0.isInc());
56:       assertFalse(node0.isIn());
57:       assertFalse(node0.isString());
58:       assertEquals((-1), node0.getCharno());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isNE());
61:       assertFalse(node0.isIf());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isThrow());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isNot());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isAnd());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.isAssign());
77:       assertFalse(node0.isName());
78:       assertEquals((-1), node0.getSourcePosition());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isCall());
86:       assertTrue(node0.isNumber());
87:       assertFalse(node0.isReturn());
88:       assertFalse(node0.isGetProp());
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(52, Node.LENGTH);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(39, Node.EMPTY_BLOCK);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(43, Node.IS_CONSTANT_NAME);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(29, Node.JSDOC_INFO_PROP);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertEquals(37, Node.OPT_ARG_NAME);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
128:       assertFalse(node1.isCatch());
129:       assertEquals(0, node1.getChildCount());
130:       assertFalse(node1.isStringKey());
131:       assertFalse(node1.isCall());
132:       assertFalse(node1.isNull());
133:       assertFalse(node1.isParamList());
134:       assertFalse(node1.isVoid());
135:       assertFalse(node1.isName());
136:       assertFalse(node1.isNew());
137:       assertFalse(node1.isTrue());
138:       assertFalse(node1.isVar());
139:       assertFalse(node1.isAdd());
140:       assertFalse(node1.isFunction());
141:       assertFalse(node1.isDo());
142:       assertFalse(node1.isEmpty());
143:       assertFalse(node1.isSetterDef());
144:       assertFalse(node1.isDefaultCase());
145:       assertFalse(node1.isOr());
146:       assertFalse(node1.isReturn());
147:       assertFalse(node1.isContinue());
148:       assertFalse(node1.isDec());
149:       assertFalse(node1.isTypeOf());
150:       assertFalse(node1.isGetElem());
151:       assertFalse(node1.isDelProp());
152:       assertFalse(node1.isExprResult());
153:       assertFalse(node1.isDebugger());
154:       assertFalse(node1.isAssign());
155:       assertFalse(node1.isString());
156:       assertFalse(node1.isWhile());
157:       assertFalse(node1.hasChildren());
158:       assertFalse(node1.isGetProp());
159:       assertFalse(node1.isInstanceOf());
160:       assertFalse(node1.isComma());
161:       assertFalse(node1.isThis());
162:       assertFalse(node1.isObjectLit());
163:       assertFalse(node1.isNot());
164:       assertFalse(node1.isWith());
165:       assertFalse(node1.isBreak());
166:       assertEquals(131072, node1.getSourcePosition());
167:       assertFalse(node1.isAnd());
168:       assertEquals((-1122), node1.getType());
169:       assertEquals(0, node1.getCharno());
170:       assertFalse(node1.isCast());
171:       assertFalse(node1.isFalse());
172:       assertFalse(node1.isThrow());
173:       assertFalse(node1.isInc());
174:       assertFalse(node1.isAssignAdd());
175:       assertFalse(node1.isLabel());
176:       assertEquals(32, node1.getLineno());
177:       assertFalse(node1.hasMoreThanOneChild());
178:       assertFalse(node1.isIn());
179:       assertFalse(node1.isNumber());
180:       assertFalse(node1.isGetterDef());
181:       assertFalse(node1.isLabelName());
182:       assertFalse(node1.isNE());
183:       assertFalse(node1.isSwitch());
184:       assertFalse(node1.isArrayLit());
185:       assertFalse(node1.isIf());
186:       assertFalse(node1.isHook());
187:       assertFalse(node1.isBlock());
188:       assertFalse(node1.isRegExp());
189:       assertFalse(node1.isCase());
190:       assertFalse(node1.isFor());
191:       assertFalse(node1.isScript());
192:       assertFalse(node1.hasOneChild());
193:       assertFalse(node1.isTry());
194:       assertFalse(node1.equals((Object)node0));
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(29, Node.JSDOC_INFO_PROP);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
205:       assertEquals(39, Node.EMPTY_BLOCK);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(57, Node.LAST_PROP);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(54, Node.SLASH_V);
214:       assertEquals(51, Node.STATIC_SOURCE_FILE);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
223:       assertEquals(37, Node.OPT_ARG_NAME);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       assertEquals(49, Node.DIRECT_EVAL);
230:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
231:       assertNotNull(node1);
232:       
233:       Object object0 = node1.getProp(0);
234:       assertFalse(node1.isCatch());
235:       assertEquals(0, node1.getChildCount());
236:       assertFalse(node1.isStringKey());
237:       assertFalse(node1.isCall());
238:       assertFalse(node1.isNull());
239:       assertFalse(node1.isParamList());
240:       assertFalse(node1.isVoid());
241:       assertFalse(node1.isName());
242:       assertFalse(node1.isNew());
243:       assertFalse(node1.isTrue());
244:       assertFalse(node1.isVar());
245:       assertFalse(node1.isAdd());
246:       assertFalse(node1.isFunction());
247:       assertFalse(node1.isDo());
248:       assertFalse(node1.isEmpty());
249:       assertFalse(node1.isSetterDef());
250:       assertFalse(node1.isDefaultCase());
251:       assertFalse(node1.isOr());
252:       assertFalse(node1.isReturn());
253:       assertFalse(node1.isContinue());
254:       assertFalse(node1.isDec());
255:       assertFalse(node1.isTypeOf());
256:       assertFalse(node1.isGetElem());
257:       assertFalse(node1.isDelProp());
258:       assertFalse(node1.isExprResult());
259:       assertFalse(node1.isDebugger());
260:       assertFalse(node1.isAssign());
261:       assertFalse(node1.isString());
262:       assertFalse(node1.isWhile());
263:       assertFalse(node1.hasChildren());
264:       assertFalse(node1.isGetProp());
265:       assertFalse(node1.isInstanceOf());
266:       assertFalse(node1.isComma());
267:       assertFalse(node1.isThis());
268:       assertFalse(node1.isObjectLit());
269:       assertFalse(node1.isNot());
270:       assertFalse(node1.isWith());
271:       assertFalse(node1.isBreak());
272:       assertEquals(131072, node1.getSourcePosition());
273:       assertFalse(node1.isAnd());
274:       assertEquals((-1122), node1.getType());
275:       assertEquals(0, node1.getCharno());
276:       assertFalse(node1.isCast());
277:       assertFalse(node1.isFalse());
278:       assertFalse(node1.isThrow());
279:       assertFalse(node1.isInc());
280:       assertFalse(node1.isAssignAdd());
281:       assertFalse(node1.isLabel());
282:       assertEquals(32, node1.getLineno());
283:       assertFalse(node1.hasMoreThanOneChild());
284:       assertFalse(node1.isIn());
285:       assertFalse(node1.isNumber());
286:       assertFalse(node1.isGetterDef());
287:       assertFalse(node1.isLabelName());
288:       assertFalse(node1.isNE());
289:       assertFalse(node1.isSwitch());
290:       assertFalse(node1.isArrayLit());
291:       assertFalse(node1.isIf());
292:       assertFalse(node1.isHook());
293:       assertFalse(node1.isBlock());
294:       assertFalse(node1.isRegExp());
295:       assertFalse(node1.isCase());
296:       assertFalse(node1.isFor());
297:       assertFalse(node1.isScript());
298:       assertFalse(node1.hasOneChild());
299:       assertFalse(node1.isTry());
300:       assertFalse(node1.equals((Object)node0));
301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(36, Node.QUOTED_PROP);
304:       assertEquals(55, Node.INFERRED_FUNCTION);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertEquals(29, Node.JSDOC_INFO_PROP);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(2, Node.POST_FLAG);
310:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
311:       assertEquals(39, Node.EMPTY_BLOCK);
312:       assertEquals(47, Node.IS_DISPATCHER);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(57, Node.LAST_PROP);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(54, Node.SLASH_V);
320:       assertEquals(51, Node.STATIC_SOURCE_FILE);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(32, Node.INCRDECR_PROP);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(48, Node.DIRECTIVES);
331:       assertEquals(56, Node.CHANGE_TIME);
332:       assertEquals(12, Node.COLUMN_BITS);
333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:       assertEquals(49, Node.DIRECT_EVAL);
336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
337:       assertNull(object0);
338:       
339:       Node node2 = Node.newString(46, "UNKNOWN");
340:       assertFalse(node2.isTry());
341:       assertFalse(node2.isVoid());
342:       assertFalse(node2.isArrayLit());
343:       assertFalse(node2.isFor());
344:       assertFalse(node2.isDefaultCase());
345:       assertFalse(node2.isFunction());
346:       assertFalse(node2.isRegExp());
347:       assertEquals(0, node2.getChildCount());
348:       assertFalse(node2.isCase());
349:       assertFalse(node2.isString());
350:       assertFalse(node2.isGetterDef());
351:       assertFalse(node2.isStringKey());
352:       assertFalse(node2.isParamList());
353:       assertEquals((-1), node2.getCharno());
354:       assertFalse(node2.isDebugger());
355:       assertFalse(node2.isInc());
356:       assertFalse(node2.isFalse());
357:       assertFalse(node2.isContinue());
358:       assertFalse(node2.hasMoreThanOneChild());
359:       assertFalse(node2.isThis());
360:       assertFalse(node2.isThrow());
361:       assertFalse(node2.isHook());
362:       assertFalse(node2.isBlock());
363:       assertEquals((-1), node2.getLineno());
364:       assertFalse(node2.isInstanceOf());
365:       assertFalse(node2.isIn());
366:       assertFalse(node2.isCatch());
367:       assertFalse(node2.isSetterDef());
368:       assertFalse(node2.isIf());
369:       assertFalse(node2.isNE());
370:       assertFalse(node2.isExprResult());
371:       assertFalse(node2.isCast());
372:       assertFalse(node2.isScript());
373:       assertFalse(node2.hasOneChild());
374:       assertFalse(node2.isGetElem());
375:       assertFalse(node2.isWith());
376:       assertFalse(node2.isAssign());
377:       assertFalse(node2.isTypeOf());
378:       assertFalse(node2.isDec());
379:       assertFalse(node2.isLabel());
380:       assertFalse(node2.hasChildren());
381:       assertFalse(node2.isReturn());
382:       assertFalse(node2.isGetProp());
383:       assertFalse(node2.isNot());
384:       assertFalse(node2.isLabelName());
385:       assertFalse(node2.isNumber());
386:       assertFalse(node2.isAnd());
387:       assertFalse(node2.isObjectLit());
388:       assertEquals((-1), node2.getSourcePosition());
389:       assertFalse(node2.isAdd());
390:       assertFalse(node2.isCall());
391:       assertFalse(node2.isSwitch());
392:       assertFalse(node2.isNew());
393:       assertFalse(node2.isWhile());
394:       assertFalse(node2.isDo());
395:       assertFalse(node2.isComma());
396:       assertFalse(node2.isVar());
397:       assertEquals(46, node2.getType());
398:       assertFalse(node2.isOr());
399:       assertFalse(node2.isAssignAdd());
400:       assertFalse(node2.isBreak());
401:       assertFalse(node2.isDelProp());
402:       assertFalse(node2.isEmpty());
403:       assertFalse(node2.isName());
404:       assertFalse(node2.isTrue());
405:       assertFalse(node2.isNull());
406:       assertFalse(node2.equals((Object)node0));
407:       assertFalse(node2.equals((Object)node1));
408:       assertNotSame(node2, node1);
409:       assertEquals(2, Node.POST_FLAG);
410:       assertEquals(47, Node.IS_DISPATCHER);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(37, Node.OPT_ARG_NAME);
413:       assertEquals(29, Node.JSDOC_INFO_PROP);
414:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
422:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
423:       assertEquals(12, Node.COLUMN_BITS);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(39, Node.EMPTY_BLOCK);
429:       assertEquals(48, Node.DIRECTIVES);
430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(43, Node.IS_CONSTANT_NAME);
437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
438:       assertEquals(36, Node.QUOTED_PROP);
439:       assertEquals(53, Node.INPUT_ID);
440:       assertEquals(52, Node.LENGTH);
441:       assertEquals(30, Node.VAR_ARGS_NAME);
442:       assertEquals(55, Node.INFERRED_FUNCTION);
443:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
444:       assertEquals(57, Node.LAST_PROP);
445:       assertNotNull(node2);
446:       
447:       boolean boolean0 = node1.isNull();
448:       assertFalse(boolean0);
449:       assertFalse(node1.isCatch());
450:       assertEquals(0, node1.getChildCount());
451:       assertFalse(node1.isStringKey());
452:       assertFalse(node1.isCall());
453:       assertFalse(node1.isNull());
454:       assertFalse(node1.isParamList());
455:       assertFalse(node1.isVoid());
456:       assertFalse(node1.isName());
457:       assertFalse(node1.isNew());
458:       assertFalse(node1.isTrue());
459:       assertFalse(node1.isVar());
460:       assertFalse(node1.isAdd());
461:       assertFalse(node1.isFunction());
462:       assertFalse(node1.isDo());
463:       assertFalse(node1.isEmpty());
464:       assertFalse(node1.isSetterDef());
465:       assertFalse(node1.isDefaultCase());
466:       assertFalse(node1.isOr());
467:       assertFalse(node1.isReturn());
468:       assertFalse(node1.isContinue());
469:       assertFalse(node1.isDec());
470:       assertFalse(node1.isTypeOf());
471:       assertFalse(node1.isGetElem());
472:       assertFalse(node1.isDelProp());
473:       assertFalse(node1.isExprResult());
474:       assertFalse(node1.isDebugger());
475:       assertFalse(node1.isAssign());
476:       assertFalse(node1.isString());
477:       assertFalse(node1.isWhile());
478:       assertFalse(node1.hasChildren());
479:       assertFalse(node1.isGetProp());
480:       assertFalse(node1.isInstanceOf());
481:       assertFalse(node1.isComma());
482:       assertFalse(node1.isThis());
483:       assertFalse(node1.isObjectLit());
484:       assertFalse(node1.isNot());
485:       assertFalse(node1.isWith());
486:       assertFalse(node1.isBreak());
487:       assertEquals(131072, node1.getSourcePosition());
488:       assertFalse(node1.isAnd());
489:       assertEquals((-1122), node1.getType());
490:       assertEquals(0, node1.getCharno());
491:       assertFalse(node1.isCast());
492:       assertFalse(node1.isFalse());
493:       assertFalse(node1.isThrow());
494:       assertFalse(node1.isInc());
495:       assertFalse(node1.isAssignAdd());
496:       assertFalse(node1.isLabel());
497:       assertEquals(32, node1.getLineno());
498:       assertFalse(node1.hasMoreThanOneChild());
499:       assertFalse(node1.isIn());
500:       assertFalse(node1.isNumber());
501:       assertFalse(node1.isGetterDef());
502:       assertFalse(node1.isLabelName());
503:       assertFalse(node1.isNE());
504:       assertFalse(node1.isSwitch());
505:       assertFalse(node1.isArrayLit());
506:       assertFalse(node1.isIf());
507:       assertFalse(node1.isHook());
508:       assertFalse(node1.isBlock());
509:       assertFalse(node1.isRegExp());
510:       assertFalse(node1.isCase());
511:       assertFalse(node1.isFor());
512:       assertFalse(node1.isScript());
513:       assertFalse(node1.hasOneChild());
514:       assertFalse(node1.isTry());
515:       assertFalse(node1.equals((Object)node2));
516:       assertFalse(node1.equals((Object)node0));
517:       assertNotSame(node1, node2);
518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertEquals(36, Node.QUOTED_PROP);
521:       assertEquals(55, Node.INFERRED_FUNCTION);
522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
523:       assertEquals(29, Node.JSDOC_INFO_PROP);
524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
528:       assertEquals(39, Node.EMPTY_BLOCK);
529:       assertEquals(47, Node.IS_DISPATCHER);
530:       assertEquals(46, Node.IS_NAMESPACE);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(57, Node.LAST_PROP);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
535:       assertEquals(57, Node.REFLECTED_OBJECT);
536:       assertEquals(54, Node.SLASH_V);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(50, Node.FREE_CALL);
541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
542:       assertEquals(52, Node.LENGTH);
543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(37, Node.OPT_ARG_NAME);
547:       assertEquals(48, Node.DIRECTIVES);
548:       assertEquals(56, Node.CHANGE_TIME);
549:       assertEquals(12, Node.COLUMN_BITS);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       assertEquals(49, Node.DIRECT_EVAL);
553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
554:       
555:       node0.setLineno(39);
556:       assertFalse(node0.isWhile());
557:       assertFalse(node0.isDo());
558:       assertEquals(39, node0.getType());
559:       assertFalse(node0.hasMoreThanOneChild());
560:       assertFalse(node0.isContinue());
561:       assertFalse(node0.isOr());
562:       assertFalse(node0.isStringKey());
563:       assertFalse(node0.isLabelName());
564:       assertFalse(node0.isSetterDef());
565:       assertFalse(node0.isCast());
566:       assertEquals(0, node0.getChildCount());
567:       assertFalse(node0.isAdd());
568:       assertFalse(node0.isNew());
569:       assertFalse(node0.isLabel());
570:       assertFalse(node0.isVar());
571:       assertFalse(node0.isAssignAdd());
572:       assertFalse(node0.isWith());
573:       assertFalse(node0.isCatch());
574:       assertFalse(node0.isRegExp());
575:       assertFalse(node0.isScript());
576:       assertFalse(node0.isInstanceOf());
577:       assertFalse(node0.isArrayLit());
578:       assertEquals(0, node0.getCharno());
579:       assertFalse(node0.isParamList());
580:       assertFalse(node0.isGetterDef());
581:       assertFalse(node0.isFor());
582:       assertFalse(node0.isTry());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.hasOneChild());
585:       assertFalse(node0.isBlock());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isCase());
588:       assertFalse(node0.isInc());
589:       assertFalse(node0.isIn());
590:       assertFalse(node0.isString());
591:       assertFalse(node0.isSwitch());
592:       assertFalse(node0.isNE());
593:       assertFalse(node0.isIf());
594:       assertEquals(39, node0.getLineno());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isFalse());
597:       assertFalse(node0.isThrow());
598:       assertEquals(159744, node0.getSourcePosition());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isNot());
601:       assertFalse(node0.isFunction());
602:       assertFalse(node0.isObjectLit());
603:       assertFalse(node0.isExprResult());
604:       assertFalse(node0.isDebugger());
605:       assertFalse(node0.isTrue());
606:       assertFalse(node0.isVoid());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isAnd());
609:       assertFalse(node0.isDelProp());
610:       assertFalse(node0.isAssign());
611:       assertFalse(node0.isName());
612:       assertFalse(node0.isDec());
613:       assertFalse(node0.isGetElem());
614:       assertFalse(node0.isBreak());
615:       assertFalse(node0.hasChildren());
616:       assertFalse(node0.isComma());
617:       assertFalse(node0.isTypeOf());
618:       assertFalse(node0.isCall());
619:       assertTrue(node0.isNumber());
620:       assertFalse(node0.isReturn());
621:       assertFalse(node0.isGetProp());
622:       assertFalse(node0.equals((Object)node2));
623:       assertFalse(node0.equals((Object)node1));
624:       assertEquals(40, Node.ORIGINALNAME_PROP);
625:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(50, Node.FREE_CALL);
628:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
629:       assertEquals(57, Node.REFLECTED_OBJECT);
630:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(39, Node.EMPTY_BLOCK);
633:       assertEquals(57, Node.LAST_PROP);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(1, Node.DECR_FLAG);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(46, Node.IS_NAMESPACE);
638:       assertEquals(51, Node.STATIC_SOURCE_FILE);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(54, Node.SLASH_V);
641:       assertEquals(43, Node.IS_CONSTANT_NAME);
642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(47, Node.IS_DISPATCHER);
645:       assertEquals(29, Node.JSDOC_INFO_PROP);
646:       assertEquals(32, Node.INCRDECR_PROP);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
651:       assertEquals(12, Node.COLUMN_BITS);
652:       assertEquals(4095, Node.COLUMN_MASK);
653:       assertEquals(36, Node.QUOTED_PROP);
654:       assertEquals(48, Node.DIRECTIVES);
655:       assertEquals(56, Node.CHANGE_TIME);
656:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
657:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
658:       assertEquals(49, Node.DIRECT_EVAL);
659:       assertEquals(37, Node.OPT_ARG_NAME);
660:       
661:       node0.putProp(4095, (Object) null);
662:       assertFalse(node0.isWhile());
663:       assertFalse(node0.isDo());
664:       assertEquals(39, node0.getType());
665:       assertFalse(node0.hasMoreThanOneChild());
666:       assertFalse(node0.isContinue());
667:       assertFalse(node0.isOr());
668:       assertFalse(node0.isStringKey());
669:       assertFalse(node0.isLabelName());
670:       assertFalse(node0.isSetterDef());
671:       assertFalse(node0.isCast());
672:       assertEquals(0, node0.getChildCount());
673:       assertFalse(node0.isAdd());
674:       assertFalse(node0.isNew());
675:       assertFalse(node0.isLabel());
676:       assertFalse(node0.isVar());
677:       assertFalse(node0.isAssignAdd());
678:       assertFalse(node0.isWith());
679:       assertFalse(node0.isCatch());
680:       assertFalse(node0.isRegExp());
681:       assertFalse(node0.isScript());
682:       assertFalse(node0.isInstanceOf());
683:       assertFalse(node0.isArrayLit());
684:       assertEquals(0, node0.getCharno());
685:       assertFalse(node0.isParamList());
686:       assertFalse(node0.isGetterDef());
687:       assertFalse(node0.isFor());
688:       assertFalse(node0.isTry());
689:       assertFalse(node0.isHook());
690:       assertFalse(node0.hasOneChild());
691:       assertFalse(node0.isBlock());
692:       assertFalse(node0.isThis());
693:       assertFalse(node0.isCase());
694:       assertFalse(node0.isInc());
695:       assertFalse(node0.isIn());
696:       assertFalse(node0.isString());
697:       assertFalse(node0.isSwitch());
698:       assertFalse(node0.isNE());
699:       assertFalse(node0.isIf());
700:       assertEquals(39, node0.getLineno());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isFalse());
703:       assertFalse(node0.isThrow());
704:       assertEquals(159744, node0.getSourcePosition());
705:       assertFalse(node0.isDefaultCase());
706:       assertFalse(node0.isNot());
707:       assertFalse(node0.isFunction());
708:       assertFalse(node0.isObjectLit());
709:       assertFalse(node0.isExprResult());
710:       assertFalse(node0.isDebugger());
711:       assertFalse(node0.isTrue());
712:       assertFalse(node0.isVoid());
713:       assertFalse(node0.isNull());
714:       assertFalse(node0.isAnd());
715:       assertFalse(node0.isDelProp());
716:       assertFalse(node0.isAssign());
717:       assertFalse(node0.isName());
718:       assertFalse(node0.isDec());
719:       assertFalse(node0.isGetElem());
720:       assertFalse(node0.isBreak());
721:       assertFalse(node0.hasChildren());
722:       assertFalse(node0.isComma());
723:       assertFalse(node0.isTypeOf());
724:       assertFalse(node0.isCall());
725:       assertTrue(node0.isNumber());
726:       assertFalse(node0.isReturn());
727:       assertFalse(node0.isGetProp());
728:       assertFalse(node0.equals((Object)node2));
729:       assertFalse(node0.equals((Object)node1));
730:       assertEquals(40, Node.ORIGINALNAME_PROP);
731:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
732:       assertEquals(52, Node.LENGTH);
733:       assertEquals(50, Node.FREE_CALL);
734:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
735:       assertEquals(57, Node.REFLECTED_OBJECT);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(8, Node.FLAG_NO_THROWS);
738:       assertEquals(39, Node.EMPTY_BLOCK);
739:       assertEquals(57, Node.LAST_PROP);
740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
741:       assertEquals(1, Node.DECR_FLAG);
742:       assertEquals(30, Node.VAR_ARGS_NAME);
743:       assertEquals(46, Node.IS_NAMESPACE);
744:       assertEquals(51, Node.STATIC_SOURCE_FILE);
745:       assertEquals(2, Node.POST_FLAG);
746:       assertEquals(54, Node.SLASH_V);
747:       assertEquals(43, Node.IS_CONSTANT_NAME);
748:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
750:       assertEquals(47, Node.IS_DISPATCHER);
751:       assertEquals(29, Node.JSDOC_INFO_PROP);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertEquals(53, Node.INPUT_ID);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(55, Node.INFERRED_FUNCTION);
756:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(36, Node.QUOTED_PROP);
760:       assertEquals(48, Node.DIRECTIVES);
761:       assertEquals(56, Node.CHANGE_TIME);
762:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
763:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(37, Node.OPT_ARG_NAME);
766:       
767:       int int0 = node0.getIndexOfChild(node1);
768:       assertEquals((-1), int0);
769:       assertFalse(node0.isWhile());
770:       assertFalse(node0.isDo());
771:       assertEquals(39, node0.getType());
772:       assertFalse(node0.hasMoreThanOneChild());
773:       assertFalse(node0.isContinue());
774:       assertFalse(node0.isOr());
775:       assertFalse(node0.isStringKey());
776:       assertFalse(node0.isLabelName());
777:       assertFalse(node0.isSetterDef());
778:       assertFalse(node0.isCast());
779:       assertEquals(0, node0.getChildCount());
780:       assertFalse(node0.isAdd());
781:       assertFalse(node0.isNew());
782:       assertFalse(node0.isLabel());
783:       assertFalse(node0.isVar());
784:       assertFalse(node0.isAssignAdd());
785:       assertFalse(node0.isWith());
786:       assertFalse(node0.isCatch());
787:       assertFalse(node0.isRegExp());
788:       assertFalse(node0.isScript());
789:       assertFalse(node0.isInstanceOf());
790:       assertFalse(node0.isArrayLit());
791:       assertEquals(0, node0.getCharno());
792:       assertFalse(node0.isParamList());
793:       assertFalse(node0.isGetterDef());
794:       assertFalse(node0.isFor());
795:       assertFalse(node0.isTry());
796:       assertFalse(node0.isHook());
797:       assertFalse(node0.hasOneChild());
798:       assertFalse(node0.isBlock());
799:       assertFalse(node0.isThis());
800:       assertFalse(node0.isCase());
801:       assertFalse(node0.isInc());
802:       assertFalse(node0.isIn());
803:       assertFalse(node0.isString());
804:       assertFalse(node0.isSwitch());
805:       assertFalse(node0.isNE());
806:       assertFalse(node0.isIf());
807:       assertEquals(39, node0.getLineno());
808:       assertFalse(node0.isEmpty());
809:       assertFalse(node0.isFalse());
810:       assertFalse(node0.isThrow());
811:       assertEquals(159744, node0.getSourcePosition());
812:       assertFalse(node0.isDefaultCase());
813:       assertFalse(node0.isNot());
814:       assertFalse(node0.isFunction());
815:       assertFalse(node0.isObjectLit());
816:       assertFalse(node0.isExprResult());
817:       assertFalse(node0.isDebugger());
818:       assertFalse(node0.isTrue());
819:       assertFalse(node0.isVoid());
820:       assertFalse(node0.isNull());
821:       assertFalse(node0.isAnd());
822:       assertFalse(node0.isDelProp());
823:       assertFalse(node0.isAssign());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isDec());
826:       assertFalse(node0.isGetElem());
827:       assertFalse(node0.isBreak());
828:       assertFalse(node0.hasChildren());
829:       assertFalse(node0.isComma());
830:       assertFalse(node0.isTypeOf());
831:       assertFalse(node0.isCall());
832:       assertTrue(node0.isNumber());
833:       assertFalse(node0.isReturn());
834:       assertFalse(node0.isGetProp());
835:       assertFalse(node1.isCatch());
836:       assertEquals(0, node1.getChildCount());
837:       assertFalse(node1.isStringKey());
838:       assertFalse(node1.isCall());
839:       assertFalse(node1.isNull());
840:       assertFalse(node1.isParamList());
841:       assertFalse(node1.isVoid());
842:       assertFalse(node1.isName());
843:       assertFalse(node1.isNew());
844:       assertFalse(node1.isTrue());
845:       assertFalse(node1.isVar());
846:       assertFalse(node1.isAdd());
847:       assertFalse(node1.isFunction());
848:       assertFalse(node1.isDo());
849:       assertFalse(node1.isEmpty());
850:       assertFalse(node1.isSetterDef());
851:       assertFalse(node1.isDefaultCase());
852:       assertFalse(node1.isOr());
853:       assertFalse(node1.isReturn());
854:       assertFalse(node1.isContinue());
855:       assertFalse(node1.isDec());
856:       assertFalse(node1.isTypeOf());
857:       assertFalse(node1.isGetElem());
858:       assertFalse(node1.isDelProp());
859:       assertFalse(node1.isExprResult());
860:       assertFalse(node1.isDebugger());
861:       assertFalse(node1.isAssign());
862:       assertFalse(node1.isString());
863:       assertFalse(node1.isWhile());
864:       assertFalse(node1.hasChildren());
865:       assertFalse(node1.isGetProp());
866:       assertFalse(node1.isInstanceOf());
867:       assertFalse(node1.isComma());
868:       assertFalse(node1.isThis());
869:       assertFalse(node1.isObjectLit());
870:       assertFalse(node1.isNot());
871:       assertFalse(node1.isWith());
872:       assertFalse(node1.isBreak());
873:       assertEquals(131072, node1.getSourcePosition());
874:       assertFalse(node1.isAnd());
875:       assertEquals((-1122), node1.getType());
876:       assertEquals(0, node1.getCharno());
877:       assertFalse(node1.isCast());
878:       assertFalse(node1.isFalse());
879:       assertFalse(node1.isThrow());
880:       assertFalse(node1.isInc());
881:       assertFalse(node1.isAssignAdd());
882:       assertFalse(node1.isLabel());
883:       assertEquals(32, node1.getLineno());
884:       assertFalse(node1.hasMoreThanOneChild());
885:       assertFalse(node1.isIn());
886:       assertFalse(node1.isNumber());
887:       assertFalse(node1.isGetterDef());
888:       assertFalse(node1.isLabelName());
889:       assertFalse(node1.isNE());
890:       assertFalse(node1.isSwitch());
891:       assertFalse(node1.isArrayLit());
892:       assertFalse(node1.isIf());
893:       assertFalse(node1.isHook());
894:       assertFalse(node1.isBlock());
895:       assertFalse(node1.isRegExp());
896:       assertFalse(node1.isCase());
897:       assertFalse(node1.isFor());
898:       assertFalse(node1.isScript());
899:       assertFalse(node1.hasOneChild());
900:       assertFalse(node1.isTry());
901:       assertFalse(node0.equals((Object)node2));
902:       assertFalse(node0.equals((Object)node1));
903:       assertFalse(node1.equals((Object)node2));
904:       assertFalse(node1.equals((Object)node0));
905:       assertNotSame(node1, node2);
906:       assertEquals(40, Node.ORIGINALNAME_PROP);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(50, Node.FREE_CALL);
910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
911:       assertEquals(57, Node.REFLECTED_OBJECT);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(8, Node.FLAG_NO_THROWS);
914:       assertEquals(39, Node.EMPTY_BLOCK);
915:       assertEquals(57, Node.LAST_PROP);
916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
917:       assertEquals(1, Node.DECR_FLAG);
918:       assertEquals(30, Node.VAR_ARGS_NAME);
919:       assertEquals(46, Node.IS_NAMESPACE);
920:       assertEquals(51, Node.STATIC_SOURCE_FILE);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(54, Node.SLASH_V);
923:       assertEquals(43, Node.IS_CONSTANT_NAME);
924:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
926:       assertEquals(47, Node.IS_DISPATCHER);
927:       assertEquals(29, Node.JSDOC_INFO_PROP);
928:       assertEquals(32, Node.INCRDECR_PROP);
929:       assertEquals(53, Node.INPUT_ID);
930:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
931:       assertEquals(55, Node.INFERRED_FUNCTION);
932:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
933:       assertEquals(12, Node.COLUMN_BITS);
934:       assertEquals(4095, Node.COLUMN_MASK);
935:       assertEquals(36, Node.QUOTED_PROP);
936:       assertEquals(48, Node.DIRECTIVES);
937:       assertEquals(56, Node.CHANGE_TIME);
938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
940:       assertEquals(49, Node.DIRECT_EVAL);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(36, Node.QUOTED_PROP);
945:       assertEquals(55, Node.INFERRED_FUNCTION);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(53, Node.INPUT_ID);
950:       assertEquals(2, Node.POST_FLAG);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(39, Node.EMPTY_BLOCK);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(46, Node.IS_NAMESPACE);
955:       assertEquals(40, Node.ORIGINALNAME_PROP);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(57, Node.REFLECTED_OBJECT);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(51, Node.STATIC_SOURCE_FILE);
962:       assertEquals(1, Node.DECR_FLAG);
963:       assertEquals(32, Node.INCRDECR_PROP);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
966:       assertEquals(52, Node.LENGTH);
967:       assertEquals(15, Node.NO_SIDE_EFFECTS);
968:       assertEquals(8, Node.FLAG_NO_THROWS);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(37, Node.OPT_ARG_NAME);
971:       assertEquals(48, Node.DIRECTIVES);
972:       assertEquals(56, Node.CHANGE_TIME);
973:       assertEquals(12, Node.COLUMN_BITS);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(49, Node.DIRECT_EVAL);
977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
978:       
979:       Iterable<Node> iterable0 = node0.children();
980:       assertFalse(node0.isWhile());
981:       assertFalse(node0.isDo());
982:       assertEquals(39, node0.getType());
983:       assertFalse(node0.hasMoreThanOneChild());
984:       assertFalse(node0.isContinue());
985:       assertFalse(node0.isOr());
986:       assertFalse(node0.isStringKey());
987:       assertFalse(node0.isLabelName());
988:       assertFalse(node0.isSetterDef());
989:       assertFalse(node0.isCast());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isAdd());
992:       assertFalse(node0.isNew());
993:       assertFalse(node0.isLabel());
994:       assertFalse(node0.isVar());
995:       assertFalse(node0.isAssignAdd());
996:       assertFalse(node0.isWith());
997:       assertFalse(node0.isCatch());
998:       assertFalse(node0.isRegExp());
999:       assertFalse(node0.isScript());
1000:       assertFalse(node0.isInstanceOf());
1001:       assertFalse(node0.isArrayLit());
1002:       assertEquals(0, node0.getCharno());
1003:       assertFalse(node0.isParamList());
1004:       assertFalse(node0.isGetterDef());
1005:       assertFalse(node0.isFor());
1006:       assertFalse(node0.isTry());
1007:       assertFalse(node0.isHook());
1008:       assertFalse(node0.hasOneChild());
1009:       assertFalse(node0.isBlock());
1010:       assertFalse(node0.isThis());
1011:       assertFalse(node0.isCase());
1012:       assertFalse(node0.isInc());
1013:       assertFalse(node0.isIn());
1014:       assertFalse(node0.isString());
1015:       assertFalse(node0.isSwitch());
1016:       assertFalse(node0.isNE());
1017:       assertFalse(node0.isIf());
1018:       assertEquals(39, node0.getLineno());
1019:       assertFalse(node0.isEmpty());
1020:       assertFalse(node0.isFalse());
1021:       assertFalse(node0.isThrow());
1022:       assertEquals(159744, node0.getSourcePosition());
1023:       assertFalse(node0.isDefaultCase());
1024:       assertFalse(node0.isNot());
1025:       assertFalse(node0.isFunction());
1026:       assertFalse(node0.isObjectLit());
1027:       assertFalse(node0.isExprResult());
1028:       assertFalse(node0.isDebugger());
1029:       assertFalse(node0.isTrue());
1030:       assertFalse(node0.isVoid());
1031:       assertFalse(node0.isNull());
1032:       assertFalse(node0.isAnd());
1033:       assertFalse(node0.isDelProp());
1034:       assertFalse(node0.isAssign());
1035:       assertFalse(node0.isName());
1036:       assertFalse(node0.isDec());
1037:       assertFalse(node0.isGetElem());
1038:       assertFalse(node0.isBreak());
1039:       assertFalse(node0.hasChildren());
1040:       assertFalse(node0.isComma());
1041:       assertFalse(node0.isTypeOf());
1042:       assertFalse(node0.isCall());
1043:       assertTrue(node0.isNumber());
1044:       assertFalse(node0.isReturn());
1045:       assertFalse(node0.isGetProp());
1046:       assertFalse(node0.equals((Object)node2));
1047:       assertFalse(node0.equals((Object)node1));
1048:       assertEquals(40, Node.ORIGINALNAME_PROP);
1049:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1050:       assertEquals(52, Node.LENGTH);
1051:       assertEquals(50, Node.FREE_CALL);
1052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1055:       assertEquals(8, Node.FLAG_NO_THROWS);
1056:       assertEquals(39, Node.EMPTY_BLOCK);
1057:       assertEquals(57, Node.LAST_PROP);
1058:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1059:       assertEquals(1, Node.DECR_FLAG);
1060:       assertEquals(30, Node.VAR_ARGS_NAME);
1061:       assertEquals(46, Node.IS_NAMESPACE);
1062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1063:       assertEquals(2, Node.POST_FLAG);
1064:       assertEquals(54, Node.SLASH_V);
1065:       assertEquals(43, Node.IS_CONSTANT_NAME);
1066:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(47, Node.IS_DISPATCHER);
1069:       assertEquals(29, Node.JSDOC_INFO_PROP);
1070:       assertEquals(32, Node.INCRDECR_PROP);
1071:       assertEquals(53, Node.INPUT_ID);
1072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:       assertEquals(55, Node.INFERRED_FUNCTION);
1074:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1075:       assertEquals(12, Node.COLUMN_BITS);
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(36, Node.QUOTED_PROP);
1078:       assertEquals(48, Node.DIRECTIVES);
1079:       assertEquals(56, Node.CHANGE_TIME);
1080:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1081:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1082:       assertEquals(49, Node.DIRECT_EVAL);
1083:       assertEquals(37, Node.OPT_ARG_NAME);
1084:       assertNotNull(iterable0);
1085:       assertFalse(iterable0.contains(node1));
1086:       
1087:       boolean boolean1 = node2.isIn();
1088:       assertFalse(boolean1);
1089:       assertFalse(node2.isTry());
1090:       assertFalse(node2.isVoid());
1091:       assertFalse(node2.isArrayLit());
1092:       assertFalse(node2.isFor());
1093:       assertFalse(node2.isDefaultCase());
1094:       assertFalse(node2.isFunction());
1095:       assertFalse(node2.isRegExp());
1096:       assertEquals(0, node2.getChildCount());
1097:       assertFalse(node2.isCase());
1098:       assertFalse(node2.isString());
1099:       assertFalse(node2.isGetterDef());
1100:       assertFalse(node2.isStringKey());
1101:       assertFalse(node2.isParamList());
1102:       assertEquals((-1), node2.getCharno());
1103:       assertFalse(node2.isDebugger());
1104:       assertFalse(node2.isInc());
1105:       assertFalse(node2.isFalse());
1106:       assertFalse(node2.isContinue());
1107:       assertFalse(node2.hasMoreThanOneChild());
1108:       assertFalse(node2.isThis());
1109:       assertFalse(node2.isThrow());
1110:       assertFalse(node2.isHook());
1111:       assertFalse(node2.isBlock());
1112:       assertEquals((-1), node2.getLineno());
1113:       assertFalse(node2.isInstanceOf());
1114:       assertFalse(node2.isIn());
1115:       assertFalse(node2.isCatch());
1116:       assertFalse(node2.isSetterDef());
1117:       assertFalse(node2.isIf());
1118:       assertFalse(node2.isNE());
1119:       assertFalse(node2.isExprResult());
1120:       assertFalse(node2.isCast());
1121:       assertFalse(node2.isScript());
1122:       assertFalse(node2.hasOneChild());
1123:       assertFalse(node2.isGetElem());
1124:       assertFalse(node2.isWith());
1125:       assertFalse(node2.isAssign());
1126:       assertFalse(node2.isTypeOf());
1127:       assertFalse(node2.isDec());
1128:       assertFalse(node2.isLabel());
1129:       assertFalse(node2.hasChildren());
1130:       assertFalse(node2.isReturn());
1131:       assertFalse(node2.isGetProp());
1132:       assertFalse(node2.isNot());
1133:       assertFalse(node2.isLabelName());
1134:       assertFalse(node2.isNumber());
1135:       assertFalse(node2.isAnd());
1136:       assertFalse(node2.isObjectLit());
1137:       assertEquals((-1), node2.getSourcePosition());
1138:       assertFalse(node2.isAdd());
1139:       assertFalse(node2.isCall());
1140:       assertFalse(node2.isSwitch());
1141:       assertFalse(node2.isNew());
1142:       assertFalse(node2.isWhile());
1143:       assertFalse(node2.isDo());
1144:       assertFalse(node2.isComma());
1145:       assertFalse(node2.isVar());
1146:       assertEquals(46, node2.getType());
1147:       assertFalse(node2.isOr());
1148:       assertFalse(node2.isAssignAdd());
1149:       assertFalse(node2.isBreak());
1150:       assertFalse(node2.isDelProp());
1151:       assertFalse(node2.isEmpty());
1152:       assertFalse(node2.isName());
1153:       assertFalse(node2.isTrue());
1154:       assertFalse(node2.isNull());
1155:       assertFalse(node2.equals((Object)node0));
1156:       assertFalse(node2.equals((Object)node1));
1157:       assertTrue(boolean1 == boolean0);
1158:       assertNotSame(node2, node1);
1159:       assertEquals(2, Node.POST_FLAG);
1160:       assertEquals(47, Node.IS_DISPATCHER);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(29, Node.JSDOC_INFO_PROP);
1164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1165:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1166:       assertEquals(49, Node.DIRECT_EVAL);
1167:       assertEquals(46, Node.IS_NAMESPACE);
1168:       assertEquals(56, Node.CHANGE_TIME);
1169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1170:       assertEquals(54, Node.SLASH_V);
1171:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1172:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1173:       assertEquals(12, Node.COLUMN_BITS);
1174:       assertEquals(1, Node.DECR_FLAG);
1175:       assertEquals(32, Node.INCRDECR_PROP);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(8, Node.FLAG_NO_THROWS);
1178:       assertEquals(39, Node.EMPTY_BLOCK);
1179:       assertEquals(48, Node.DIRECTIVES);
1180:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1181:       assertEquals(50, Node.FREE_CALL);
1182:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1183:       assertEquals(4095, Node.COLUMN_MASK);
1184:       assertEquals(40, Node.ORIGINALNAME_PROP);
1185:       assertEquals(57, Node.REFLECTED_OBJECT);
1186:       assertEquals(43, Node.IS_CONSTANT_NAME);
1187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1188:       assertEquals(36, Node.QUOTED_PROP);
1189:       assertEquals(53, Node.INPUT_ID);
1190:       assertEquals(52, Node.LENGTH);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(55, Node.INFERRED_FUNCTION);
1193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1194:       assertEquals(57, Node.LAST_PROP);
1195:       
1196:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1197:       assertFalse(node0.isWhile());
1198:       assertFalse(node0.isDo());
1199:       assertEquals(39, node0.getType());
1200:       assertFalse(node0.hasMoreThanOneChild());
1201:       assertFalse(node0.isContinue());
1202:       assertFalse(node0.isOr());
1203:       assertFalse(node0.isStringKey());
1204:       assertFalse(node0.isLabelName());
1205:       assertFalse(node0.isSetterDef());
1206:       assertFalse(node0.isCast());
1207:       assertEquals(0, node0.getChildCount());
1208:       assertFalse(node0.isAdd());
1209:       assertFalse(node0.isNew());
1210:       assertFalse(node0.isLabel());
1211:       assertFalse(node0.isVar());
1212:       assertFalse(node0.isAssignAdd());
1213:       assertFalse(node0.isWith());
1214:       assertFalse(node0.isCatch());
1215:       assertFalse(node0.isRegExp());
1216:       assertFalse(node0.isScript());
1217:       assertFalse(node0.isInstanceOf());
1218:       assertFalse(node0.isArrayLit());
1219:       assertEquals(0, node0.getCharno());
1220:       assertFalse(node0.isParamList());
1221:       assertFalse(node0.isGetterDef());
1222:       assertFalse(node0.isFor());
1223:       assertFalse(node0.isTry());
1224:       assertFalse(node0.isHook());
1225:       assertFalse(node0.hasOneChild());
1226:       assertFalse(node0.isBlock());
1227:       assertFalse(node0.isThis());
1228:       assertFalse(node0.isCase());
1229:       assertFalse(node0.isInc());
1230:       assertFalse(node0.isIn());
1231:       assertFalse(node0.isString());
1232:       assertFalse(node0.isSwitch());
1233:       assertFalse(node0.isNE());
1234:       assertFalse(node0.isIf());
1235:       assertEquals(39, node0.getLineno());
1236:       assertFalse(node0.isEmpty());
1237:       assertFalse(node0.isFalse());
1238:       assertFalse(node0.isThrow());
1239:       assertEquals(159744, node0.getSourcePosition());
1240:       assertFalse(node0.isDefaultCase());
1241:       assertFalse(node0.isNot());
1242:       assertFalse(node0.isFunction());
1243:       assertFalse(node0.isObjectLit());
1244:       assertFalse(node0.isExprResult());
1245:       assertFalse(node0.isDebugger());
1246:       assertFalse(node0.isTrue());
1247:       assertFalse(node0.isVoid());
1248:       assertFalse(node0.isNull());
1249:       assertFalse(node0.isAnd());
1250:       assertFalse(node0.isDelProp());
1251:       assertFalse(node0.isAssign());
1252:       assertFalse(node0.isName());
1253:       assertFalse(node0.isDec());
1254:       assertFalse(node0.isGetElem());
1255:       assertFalse(node0.isBreak());
1256:       assertFalse(node0.hasChildren());
1257:       assertFalse(node0.isComma());
1258:       assertFalse(node0.isTypeOf());
1259:       assertFalse(node0.isCall());
1260:       assertTrue(node0.isNumber());
1261:       assertFalse(node0.isReturn());
1262:       assertFalse(node0.isGetProp());
1263:       assertFalse(node2.isTry());
1264:       assertFalse(node2.isVoid());
1265:       assertFalse(node2.isArrayLit());
1266:       assertFalse(node2.isFor());
1267:       assertFalse(node2.isDefaultCase());
1268:       assertFalse(node2.isFunction());
1269:       assertFalse(node2.isRegExp());
1270:       assertEquals(0, node2.getChildCount());
1271:       assertFalse(node2.isCase());
1272:       assertFalse(node2.isString());
1273:       assertFalse(node2.isGetterDef());
1274:       assertFalse(node2.isStringKey());
1275:       assertFalse(node2.isParamList());
1276:       assertEquals((-1), node2.getCharno());
1277:       assertFalse(node2.isDebugger());
1278:       assertFalse(node2.isInc());
1279:       assertFalse(node2.isFalse());
1280:       assertFalse(node2.isContinue());
1281:       assertFalse(node2.hasMoreThanOneChild());
1282:       assertFalse(node2.isThis());
1283:       assertFalse(node2.isThrow());
1284:       assertFalse(node2.isHook());
1285:       assertFalse(node2.isBlock());
1286:       assertEquals((-1), node2.getLineno());
1287:       assertFalse(node2.isInstanceOf());
1288:       assertFalse(node2.isIn());
1289:       assertFalse(node2.isCatch());
1290:       assertFalse(node2.isSetterDef());
1291:       assertFalse(node2.isIf());
1292:       assertFalse(node2.isNE());
1293:       assertFalse(node2.isExprResult());
1294:       assertFalse(node2.isCast());
1295:       assertFalse(node2.isScript());
1296:       assertFalse(node2.hasOneChild());
1297:       assertFalse(node2.isGetElem());
1298:       assertFalse(node2.isWith());
1299:       assertFalse(node2.isAssign());
1300:       assertFalse(node2.isTypeOf());
1301:       assertFalse(node2.isDec());
1302:       assertFalse(node2.isLabel());
1303:       assertFalse(node2.hasChildren());
1304:       assertFalse(node2.isReturn());
1305:       assertFalse(node2.isGetProp());
1306:       assertFalse(node2.isNot());
1307:       assertFalse(node2.isLabelName());
1308:       assertFalse(node2.isNumber());
1309:       assertFalse(node2.isAnd());
1310:       assertFalse(node2.isObjectLit());
1311:       assertEquals((-1), node2.getSourcePosition());
1312:       assertFalse(node2.isAdd());
1313:       assertFalse(node2.isCall());
1314:       assertFalse(node2.isSwitch());
1315:       assertFalse(node2.isNew());
1316:       assertFalse(node2.isWhile());
1317:       assertFalse(node2.isDo());
1318:       assertFalse(node2.isComma());
1319:       assertFalse(node2.isVar());
1320:       assertEquals(46, node2.getType());
1321:       assertFalse(node2.isOr());
1322:       assertFalse(node2.isAssignAdd());
1323:       assertFalse(node2.isBreak());
1324:       assertFalse(node2.isDelProp());
1325:       assertFalse(node2.isEmpty());
1326:       assertFalse(node2.isName());
1327:       assertFalse(node2.isTrue());
1328:       assertFalse(node2.isNull());
1329:       assertFalse(node0.equals((Object)node2));
1330:       assertFalse(node0.equals((Object)node1));
1331:       assertFalse(node2.equals((Object)node0));
1332:       assertFalse(node2.equals((Object)node1));
1333:       assertNotSame(node2, node1);
1334:       assertEquals(40, Node.ORIGINALNAME_PROP);
1335:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1336:       assertEquals(52, Node.LENGTH);
1337:       assertEquals(50, Node.FREE_CALL);
1338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1339:       assertEquals(57, Node.REFLECTED_OBJECT);
1340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1341:       assertEquals(8, Node.FLAG_NO_THROWS);
1342:       assertEquals(39, Node.EMPTY_BLOCK);
1343:       assertEquals(57, Node.LAST_PROP);
1344:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1345:       assertEquals(1, Node.DECR_FLAG);
1346:       assertEquals(30, Node.VAR_ARGS_NAME);
1347:       assertEquals(46, Node.IS_NAMESPACE);
1348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1349:       assertEquals(2, Node.POST_FLAG);
1350:       assertEquals(54, Node.SLASH_V);
1351:       assertEquals(43, Node.IS_CONSTANT_NAME);
1352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(29, Node.JSDOC_INFO_PROP);
1356:       assertEquals(32, Node.INCRDECR_PROP);
1357:       assertEquals(53, Node.INPUT_ID);
1358:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1359:       assertEquals(55, Node.INFERRED_FUNCTION);
1360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1361:       assertEquals(12, Node.COLUMN_BITS);
1362:       assertEquals(4095, Node.COLUMN_MASK);
1363:       assertEquals(36, Node.QUOTED_PROP);
1364:       assertEquals(48, Node.DIRECTIVES);
1365:       assertEquals(56, Node.CHANGE_TIME);
1366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1368:       assertEquals(49, Node.DIRECT_EVAL);
1369:       assertEquals(37, Node.OPT_ARG_NAME);
1370:       assertEquals(2, Node.POST_FLAG);
1371:       assertEquals(47, Node.IS_DISPATCHER);
1372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1373:       assertEquals(37, Node.OPT_ARG_NAME);
1374:       assertEquals(29, Node.JSDOC_INFO_PROP);
1375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1377:       assertEquals(49, Node.DIRECT_EVAL);
1378:       assertEquals(46, Node.IS_NAMESPACE);
1379:       assertEquals(56, Node.CHANGE_TIME);
1380:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1381:       assertEquals(54, Node.SLASH_V);
1382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1384:       assertEquals(12, Node.COLUMN_BITS);
1385:       assertEquals(1, Node.DECR_FLAG);
1386:       assertEquals(32, Node.INCRDECR_PROP);
1387:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(48, Node.DIRECTIVES);
1391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1392:       assertEquals(50, Node.FREE_CALL);
1393:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1394:       assertEquals(4095, Node.COLUMN_MASK);
1395:       assertEquals(40, Node.ORIGINALNAME_PROP);
1396:       assertEquals(57, Node.REFLECTED_OBJECT);
1397:       assertEquals(43, Node.IS_CONSTANT_NAME);
1398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1399:       assertEquals(36, Node.QUOTED_PROP);
1400:       assertEquals(53, Node.INPUT_ID);
1401:       assertEquals(52, Node.LENGTH);
1402:       assertEquals(30, Node.VAR_ARGS_NAME);
1403:       assertEquals(55, Node.INFERRED_FUNCTION);
1404:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1405:       assertEquals(57, Node.LAST_PROP);
1406:       assertNotNull(node_NodeMismatch0);
1407:       
1408:       Node node3 = new Node(39, node1, node2);
1409:       assertFalse(node1.isCatch());
1410:       assertEquals(0, node1.getChildCount());
1411:       assertFalse(node1.isStringKey());
1412:       assertFalse(node1.isCall());
1413:       assertFalse(node1.isNull());
1414:       assertFalse(node1.isParamList());
1415:       assertFalse(node1.isVoid());
1416:       assertFalse(node1.isName());
1417:       assertFalse(node1.isNew());
1418:       assertFalse(node1.isTrue());
1419:       assertFalse(node1.isVar());
1420:       assertFalse(node1.isAdd());
1421:       assertFalse(node1.isFunction());
1422:       assertFalse(node1.isDo());
1423:       assertFalse(node1.isEmpty());
1424:       assertFalse(node1.isSetterDef());
1425:       assertFalse(node1.isDefaultCase());
1426:       assertFalse(node1.isOr());
1427:       assertFalse(node1.isReturn());
1428:       assertFalse(node1.isContinue());
1429:       assertFalse(node1.isDec());
1430:       assertFalse(node1.isTypeOf());
1431:       assertFalse(node1.isGetElem());
1432:       assertFalse(node1.isDelProp());
1433:       assertFalse(node1.isExprResult());
1434:       assertFalse(node1.isDebugger());
1435:       assertFalse(node1.isAssign());
1436:       assertFalse(node1.isString());
1437:       assertFalse(node1.isWhile());
1438:       assertFalse(node1.hasChildren());
1439:       assertFalse(node1.isGetProp());
1440:       assertFalse(node1.isInstanceOf());
1441:       assertFalse(node1.isComma());
1442:       assertFalse(node1.isThis());
1443:       assertFalse(node1.isObjectLit());
1444:       assertFalse(node1.isNot());
1445:       assertFalse(node1.isWith());
1446:       assertFalse(node1.isBreak());
1447:       assertEquals(131072, node1.getSourcePosition());
1448:       assertFalse(node1.isAnd());
1449:       assertEquals((-1122), node1.getType());
1450:       assertEquals(0, node1.getCharno());
1451:       assertFalse(node1.isCast());
1452:       assertFalse(node1.isFalse());
1453:       assertFalse(node1.isThrow());
1454:       assertFalse(node1.isInc());
1455:       assertFalse(node1.isAssignAdd());
1456:       assertFalse(node1.isLabel());
1457:       assertEquals(32, node1.getLineno());
1458:       assertFalse(node1.hasMoreThanOneChild());
1459:       assertFalse(node1.isIn());
1460:       assertFalse(node1.isNumber());
1461:       assertFalse(node1.isGetterDef());
1462:       assertFalse(node1.isLabelName());
1463:       assertFalse(node1.isNE());
1464:       assertFalse(node1.isSwitch());
1465:       assertFalse(node1.isArrayLit());
1466:       assertFalse(node1.isIf());
1467:       assertFalse(node1.isHook());
1468:       assertFalse(node1.isBlock());
1469:       assertFalse(node1.isRegExp());
1470:       assertFalse(node1.isCase());
1471:       assertFalse(node1.isFor());
1472:       assertFalse(node1.isScript());
1473:       assertFalse(node1.hasOneChild());
1474:       assertFalse(node1.isTry());
1475:       assertFalse(node2.isTry());
1476:       assertFalse(node2.isVoid());
1477:       assertFalse(node2.isArrayLit());
1478:       assertFalse(node2.isFor());
1479:       assertFalse(node2.isDefaultCase());
1480:       assertFalse(node2.isFunction());
1481:       assertFalse(node2.isRegExp());
1482:       assertEquals(0, node2.getChildCount());
1483:       assertFalse(node2.isCase());
1484:       assertFalse(node2.isString());
1485:       assertFalse(node2.isGetterDef());
1486:       assertFalse(node2.isStringKey());
1487:       assertFalse(node2.isParamList());
1488:       assertEquals((-1), node2.getCharno());
1489:       assertFalse(node2.isDebugger());
1490:       assertFalse(node2.isInc());
1491:       assertFalse(node2.isFalse());
1492:       assertFalse(node2.isContinue());
1493:       assertFalse(node2.hasMoreThanOneChild());
1494:       assertFalse(node2.isThis());
1495:       assertFalse(node2.isThrow());
1496:       assertFalse(node2.isHook());
1497:       assertFalse(node2.isBlock());
1498:       assertEquals((-1), node2.getLineno());
1499:       assertFalse(node2.isInstanceOf());
1500:       assertFalse(node2.isIn());
1501:       assertFalse(node2.isCatch());
1502:       assertFalse(node2.isSetterDef());
1503:       assertFalse(node2.isIf());
1504:       assertFalse(node2.isNE());
1505:       assertFalse(node2.isExprResult());
1506:       assertFalse(node2.isCast());
1507:       assertFalse(node2.isScript());
1508:       assertFalse(node2.hasOneChild());
1509:       assertFalse(node2.isGetElem());
1510:       assertFalse(node2.isWith());
1511:       assertFalse(node2.isAssign());
1512:       assertFalse(node2.isTypeOf());
1513:       assertFalse(node2.isDec());
1514:       assertFalse(node2.isLabel());
1515:       assertFalse(node2.hasChildren());
1516:       assertFalse(node2.isReturn());
1517:       assertFalse(node2.isGetProp());
1518:       assertFalse(node2.isNot());
1519:       assertFalse(node2.isLabelName());
1520:       assertFalse(node2.isNumber());
1521:       assertFalse(node2.isAnd());
1522:       assertFalse(node2.isObjectLit());
1523:       assertEquals((-1), node2.getSourcePosition());
1524:       assertFalse(node2.isAdd());
1525:       assertFalse(node2.isCall());
1526:       assertFalse(node2.isSwitch());
1527:       assertFalse(node2.isNew());
1528:       assertFalse(node2.isWhile());
1529:       assertFalse(node2.isDo());
1530:       assertFalse(node2.isComma());
1531:       assertFalse(node2.isVar());
1532:       assertEquals(46, node2.getType());
1533:       assertFalse(node2.isOr());
1534:       assertFalse(node2.isAssignAdd());
1535:       assertFalse(node2.isBreak());
1536:       assertFalse(node2.isDelProp());
1537:       assertFalse(node2.isEmpty());
1538:       assertFalse(node2.isName());
1539:       assertFalse(node2.isTrue());
1540:       assertFalse(node2.isNull());
1541:       assertFalse(node3.isDefaultCase());
1542:       assertFalse(node3.isTrue());
1543:       assertFalse(node3.isCatch());
1544:       assertFalse(node3.isFunction());
1545:       assertFalse(node3.isDebugger());
1546:       assertFalse(node3.isRegExp());
1547:       assertFalse(node3.isSetterDef());
1548:       assertFalse(node3.isTry());
1549:       assertFalse(node3.isIf());
1550:       assertFalse(node3.isNull());
1551:       assertFalse(node3.isNE());
1552:       assertFalse(node3.isFor());
1553:       assertFalse(node3.isEmpty());
1554:       assertTrue(node3.hasChildren());
1555:       assertFalse(node3.isCall());
1556:       assertFalse(node3.isName());
1557:       assertFalse(node3.isDelProp());
1558:       assertFalse(node3.isVoid());
1559:       assertEquals(39, node3.getType());
1560:       assertEquals((-1), node3.getCharno());
1561:       assertFalse(node3.isLabel());
1562:       assertFalse(node3.isAssignAdd());
1563:       assertFalse(node3.isHook());
1564:       assertFalse(node3.isBlock());
1565:       assertFalse(node3.isVar());
1566:       assertFalse(node3.isAdd());
1567:       assertFalse(node3.isCase());
1568:       assertFalse(node3.isNew());
1569:       assertFalse(node3.isDo());
1570:       assertFalse(node3.isStringKey());
1571:       assertFalse(node3.isGetterDef());
1572:       assertFalse(node3.isParamList());
1573:       assertFalse(node3.isSwitch());
1574:       assertFalse(node3.isArrayLit());
1575:       assertFalse(node3.isLabelName());
1576:       assertFalse(node3.isWith());
1577:       assertFalse(node3.isScript());
1578:       assertFalse(node3.isObjectLit());
1579:       assertFalse(node3.isNot());
1580:       assertEquals(2, node3.getChildCount());
1581:       assertFalse(node3.isGetProp());
1582:       assertFalse(node3.hasOneChild());
1583:       assertFalse(node3.isBreak());
1584:       assertFalse(node3.isGetElem());
1585:       assertFalse(node3.isComma());
1586:       assertFalse(node3.isThis());
1587:       assertFalse(node3.isTypeOf());
1588:       assertFalse(node3.isDec());
1589:       assertFalse(node3.isAssign());
1590:       assertFalse(node3.isOr());
1591:       assertEquals((-1), node3.getLineno());
1592:       assertFalse(node3.isInstanceOf());
1593:       assertFalse(node3.isExprResult());
1594:       assertTrue(node3.hasMoreThanOneChild());
1595:       assertFalse(node3.isString());
1596:       assertFalse(node3.isWhile());
1597:       assertFalse(node3.isContinue());
1598:       assertTrue(node3.isNumber());
1599:       assertFalse(node3.isReturn());
1600:       assertFalse(node3.isIn());
1601:       assertFalse(node3.isInc());
1602:       assertFalse(node3.isThrow());
1603:       assertEquals((-1), node3.getSourcePosition());
1604:       assertFalse(node3.isFalse());
1605:       assertFalse(node3.isCast());
1606:       assertFalse(node3.isAnd());
1607:       assertFalse(node1.equals((Object)node2));
1608:       assertFalse(node1.equals((Object)node0));
1609:       assertFalse(node2.equals((Object)node0));
1610:       assertFalse(node2.equals((Object)node1));
1611:       assertFalse(node3.equals((Object)node2));
1612:       assertFalse(node3.equals((Object)node0));
1613:       assertFalse(node3.equals((Object)node1));
1614:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1615:       assertEquals(43, Node.IS_CONSTANT_NAME);
1616:       assertEquals(36, Node.QUOTED_PROP);
1617:       assertEquals(55, Node.INFERRED_FUNCTION);
1618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1619:       assertEquals(29, Node.JSDOC_INFO_PROP);
1620:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1621:       assertEquals(53, Node.INPUT_ID);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1624:       assertEquals(39, Node.EMPTY_BLOCK);
1625:       assertEquals(47, Node.IS_DISPATCHER);
1626:       assertEquals(46, Node.IS_NAMESPACE);
1627:       assertEquals(40, Node.ORIGINALNAME_PROP);
1628:       assertEquals(57, Node.LAST_PROP);
1629:       assertEquals(30, Node.VAR_ARGS_NAME);
1630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1631:       assertEquals(57, Node.REFLECTED_OBJECT);
1632:       assertEquals(54, Node.SLASH_V);
1633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1634:       assertEquals(1, Node.DECR_FLAG);
1635:       assertEquals(32, Node.INCRDECR_PROP);
1636:       assertEquals(50, Node.FREE_CALL);
1637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1638:       assertEquals(52, Node.LENGTH);
1639:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1640:       assertEquals(8, Node.FLAG_NO_THROWS);
1641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1642:       assertEquals(37, Node.OPT_ARG_NAME);
1643:       assertEquals(48, Node.DIRECTIVES);
1644:       assertEquals(56, Node.CHANGE_TIME);
1645:       assertEquals(12, Node.COLUMN_BITS);
1646:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1647:       assertEquals(4095, Node.COLUMN_MASK);
1648:       assertEquals(49, Node.DIRECT_EVAL);
1649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1650:       assertEquals(2, Node.POST_FLAG);
1651:       assertEquals(47, Node.IS_DISPATCHER);
1652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1653:       assertEquals(37, Node.OPT_ARG_NAME);
1654:       assertEquals(29, Node.JSDOC_INFO_PROP);
1655:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1657:       assertEquals(49, Node.DIRECT_EVAL);
1658:       assertEquals(46, Node.IS_NAMESPACE);
1659:       assertEquals(56, Node.CHANGE_TIME);
1660:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1661:       assertEquals(54, Node.SLASH_V);
1662:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1663:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1664:       assertEquals(12, Node.COLUMN_BITS);
1665:       assertEquals(1, Node.DECR_FLAG);
1666:       assertEquals(32, Node.INCRDECR_PROP);
1667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1668:       assertEquals(8, Node.FLAG_NO_THROWS);
1669:       assertEquals(39, Node.EMPTY_BLOCK);
1670:       assertEquals(48, Node.DIRECTIVES);
1671:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1672:       assertEquals(50, Node.FREE_CALL);
1673:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1674:       assertEquals(4095, Node.COLUMN_MASK);
1675:       assertEquals(40, Node.ORIGINALNAME_PROP);
1676:       assertEquals(57, Node.REFLECTED_OBJECT);
1677:       assertEquals(43, Node.IS_CONSTANT_NAME);
1678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1679:       assertEquals(36, Node.QUOTED_PROP);
1680:       assertEquals(53, Node.INPUT_ID);
1681:       assertEquals(52, Node.LENGTH);
1682:       assertEquals(30, Node.VAR_ARGS_NAME);
1683:       assertEquals(55, Node.INFERRED_FUNCTION);
1684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1685:       assertEquals(57, Node.LAST_PROP);
1686:       assertEquals(47, Node.IS_DISPATCHER);
1687:       assertEquals(56, Node.CHANGE_TIME);
1688:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1689:       assertEquals(37, Node.OPT_ARG_NAME);
1690:       assertEquals(2, Node.POST_FLAG);
1691:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1692:       assertEquals(30, Node.VAR_ARGS_NAME);
1693:       assertEquals(49, Node.DIRECT_EVAL);
1694:       assertEquals(57, Node.LAST_PROP);
1695:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1696:       assertEquals(8, Node.FLAG_NO_THROWS);
1697:       assertEquals(39, Node.EMPTY_BLOCK);
1698:       assertEquals(36, Node.QUOTED_PROP);
1699:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1700:       assertEquals(52, Node.LENGTH);
1701:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1702:       assertEquals(53, Node.INPUT_ID);
1703:       assertEquals(55, Node.INFERRED_FUNCTION);
1704:       assertEquals(29, Node.JSDOC_INFO_PROP);
1705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1706:       assertEquals(40, Node.ORIGINALNAME_PROP);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(57, Node.REFLECTED_OBJECT);
1709:       assertEquals(54, Node.SLASH_V);
1710:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1711:       assertEquals(48, Node.DIRECTIVES);
1712:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1713:       assertEquals(4095, Node.COLUMN_MASK);
1714:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1715:       assertEquals(32, Node.INCRDECR_PROP);
1716:       assertEquals(1, Node.DECR_FLAG);
1717:       assertEquals(43, Node.IS_CONSTANT_NAME);
1718:       assertEquals(12, Node.COLUMN_BITS);
1719:       assertEquals(46, Node.IS_NAMESPACE);
1720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1721:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1722:       assertNotNull(node3);
1723:       
1724:       node3.addChildBefore(node0, node2);
1725:       assertFalse(node0.isWhile());
1726:       assertFalse(node0.isDo());
1727:       assertEquals(39, node0.getType());
1728:       assertFalse(node0.hasMoreThanOneChild());
1729:       assertFalse(node0.isContinue());
1730:       assertFalse(node0.isOr());
1731:       assertFalse(node0.isStringKey());
1732:       assertFalse(node0.isLabelName());
1733:       assertFalse(node0.isSetterDef());
1734:       assertFalse(node0.isCast());
1735:       assertEquals(0, node0.getChildCount());
1736:       assertFalse(node0.isAdd());
1737:       assertFalse(node0.isNew());
1738:       assertFalse(node0.isLabel());
1739:       assertFalse(node0.isVar());
1740:       assertFalse(node0.isAssignAdd());
1741:       assertFalse(node0.isWith());
1742:       assertFalse(node0.isCatch());
1743:       assertFalse(node0.isRegExp());
1744:       assertFalse(node0.isScript());
1745:       assertFalse(node0.isInstanceOf());
1746:       assertFalse(node0.isArrayLit());
1747:       assertEquals(0, node0.getCharno());
1748:       assertFalse(node0.isParamList());
1749:       assertFalse(node0.isGetterDef());
1750:       assertFalse(node0.isFor());
1751:       assertFalse(node0.isTry());
1752:       assertFalse(node0.isHook());
1753:       assertFalse(node0.hasOneChild());
1754:       assertFalse(node0.isBlock());
1755:       assertFalse(node0.isThis());
1756:       assertFalse(node0.isCase());
1757:       assertFalse(node0.isInc());
1758:       assertFalse(node0.isIn());
1759:       assertFalse(node0.isString());
1760:       assertFalse(node0.isSwitch());
1761:       assertFalse(node0.isNE());
1762:       assertFalse(node0.isIf());
1763:       assertEquals(39, node0.getLineno());
1764:       assertFalse(node0.isEmpty());
1765:       assertFalse(node0.isFalse());
1766:       assertFalse(node0.isThrow());
1767:       assertEquals(159744, node0.getSourcePosition());
1768:       assertFalse(node0.isDefaultCase());
1769:       assertFalse(node0.isNot());
1770:       assertFalse(node0.isFunction());
1771:       assertFalse(node0.isObjectLit());
1772:       assertFalse(node0.isExprResult());
1773:       assertFalse(node0.isDebugger());
1774:       assertFalse(node0.isTrue());
1775:       assertFalse(node0.isVoid());
1776:       assertFalse(node0.isNull());
1777:       assertFalse(node0.isAnd());
1778:       assertFalse(node0.isDelProp());
1779:       assertFalse(node0.isAssign());
1780:       assertFalse(node0.isName());
1781:       assertFalse(node0.isDec());
1782:       assertFalse(node0.isGetElem());
1783:       assertFalse(node0.isBreak());
1784:       assertFalse(node0.hasChildren());
1785:       assertFalse(node0.isComma());
1786:       assertFalse(node0.isTypeOf());
1787:       assertFalse(node0.isCall());
1788:       assertTrue(node0.isNumber());
1789:       assertFalse(node0.isReturn());
1790:       assertFalse(node0.isGetProp());
1791:       assertFalse(node1.isCatch());
1792:       assertEquals(0, node1.getChildCount());
1793:       assertFalse(node1.isStringKey());
1794:       assertFalse(node1.isCall());
1795:       assertFalse(node1.isNull());
1796:       assertFalse(node1.isParamList());
1797:       assertFalse(node1.isVoid());
1798:       assertFalse(node1.isName());
1799:       assertFalse(node1.isNew());
1800:       assertFalse(node1.isTrue());
1801:       assertFalse(node1.isVar());
1802:       assertFalse(node1.isAdd());
1803:       assertFalse(node1.isFunction());
1804:       assertFalse(node1.isDo());
1805:       assertFalse(node1.isEmpty());
1806:       assertFalse(node1.isSetterDef());
1807:       assertFalse(node1.isDefaultCase());
1808:       assertFalse(node1.isOr());
1809:       assertFalse(node1.isReturn());
1810:       assertFalse(node1.isContinue());
1811:       assertFalse(node1.isDec());
1812:       assertFalse(node1.isTypeOf());
1813:       assertFalse(node1.isGetElem());
1814:       assertFalse(node1.isDelProp());
1815:       assertFalse(node1.isExprResult());
1816:       assertFalse(node1.isDebugger());
1817:       assertFalse(node1.isAssign());
1818:       assertFalse(node1.isString());
1819:       assertFalse(node1.isWhile());
1820:       assertFalse(node1.hasChildren());
1821:       assertFalse(node1.isGetProp());
1822:       assertFalse(node1.isInstanceOf());
1823:       assertFalse(node1.isComma());
1824:       assertFalse(node1.isThis());
1825:       assertFalse(node1.isObjectLit());
1826:       assertFalse(node1.isNot());
1827:       assertFalse(node1.isWith());
1828:       assertFalse(node1.isBreak());
1829:       assertEquals(131072, node1.getSourcePosition());
1830:       assertFalse(node1.isAnd());
1831:       assertEquals((-1122), node1.getType());
1832:       assertEquals(0, node1.getCharno());
1833:       assertFalse(node1.isCast());
1834:       assertFalse(node1.isFalse());
1835:       assertFalse(node1.isThrow());
1836:       assertFalse(node1.isInc());
1837:       assertFalse(node1.isAssignAdd());
1838:       assertFalse(node1.isLabel());
1839:       assertEquals(32, node1.getLineno());
1840:       assertFalse(node1.hasMoreThanOneChild());
1841:       assertFalse(node1.isIn());
1842:       assertFalse(node1.isNumber());
1843:       assertFalse(node1.isGetterDef());
1844:       assertFalse(node1.isLabelName());
1845:       assertFalse(node1.isNE());
1846:       assertFalse(node1.isSwitch());
1847:       assertFalse(node1.isArrayLit());
1848:       assertFalse(node1.isIf());
1849:       assertFalse(node1.isHook());
1850:       assertFalse(node1.isBlock());
1851:       assertFalse(node1.isRegExp());
1852:       assertFalse(node1.isCase());
1853:       assertFalse(node1.isFor());
1854:       assertFalse(node1.isScript());
1855:       assertFalse(node1.hasOneChild());
1856:       assertFalse(node1.isTry());
1857:       assertFalse(node2.isTry());
1858:       assertFalse(node2.isVoid());
1859:       assertFalse(node2.isArrayLit());
1860:       assertFalse(node2.isFor());
1861:       assertFalse(node2.isDefaultCase());
1862:       assertFalse(node2.isFunction());
1863:       assertFalse(node2.isRegExp());
1864:       assertEquals(0, node2.getChildCount());
1865:       assertFalse(node2.isCase());
1866:       assertFalse(node2.isString());
1867:       assertFalse(node2.isGetterDef());
1868:       assertFalse(node2.isStringKey());
1869:       assertFalse(node2.isParamList());
1870:       assertEquals((-1), node2.getCharno());
1871:       assertFalse(node2.isDebugger());
1872:       assertFalse(node2.isInc());
1873:       assertFalse(node2.isFalse());
1874:       assertFalse(node2.isContinue());
1875:       assertFalse(node2.hasMoreThanOneChild());
1876:       assertFalse(node2.isThis());
1877:       assertFalse(node2.isThrow());
1878:       assertFalse(node2.isHook());
1879:       assertFalse(node2.isBlock());
1880:       assertEquals((-1), node2.getLineno());
1881:       assertFalse(node2.isInstanceOf());
1882:       assertFalse(node2.isIn());
1883:       assertFalse(node2.isCatch());
1884:       assertFalse(node2.isSetterDef());
1885:       assertFalse(node2.isIf());
1886:       assertFalse(node2.isNE());
1887:       assertFalse(node2.isExprResult());
1888:       assertFalse(node2.isCast());
1889:       assertFalse(node2.isScript());
1890:       assertFalse(node2.hasOneChild());
1891:       assertFalse(node2.isGetElem());
1892:       assertFalse(node2.isWith());
1893:       assertFalse(node2.isAssign());
1894:       assertFalse(node2.isTypeOf());
1895:       assertFalse(node2.isDec());
1896:       assertFalse(node2.isLabel());
1897:       assertFalse(node2.hasChildren());
1898:       assertFalse(node2.isReturn());
1899:       assertFalse(node2.isGetProp());
1900:       assertFalse(node2.isNot());
1901:       assertFalse(node2.isLabelName());
1902:       assertFalse(node2.isNumber());
1903:       assertFalse(node2.isAnd());
1904:       assertFalse(node2.isObjectLit());
1905:       assertEquals((-1), node2.getSourcePosition());
1906:       assertFalse(node2.isAdd());
1907:       assertFalse(node2.isCall());
1908:       assertFalse(node2.isSwitch());
1909:       assertFalse(node2.isNew());
1910:       assertFalse(node2.isWhile());
1911:       assertFalse(node2.isDo());
1912:       assertFalse(node2.isComma());
1913:       assertFalse(node2.isVar());
1914:       assertEquals(46, node2.getType());
1915:       assertFalse(node2.isOr());
1916:       assertFalse(node2.isAssignAdd());
1917:       assertFalse(node2.isBreak());
1918:       assertFalse(node2.isDelProp());
1919:       assertFalse(node2.isEmpty());
1920:       assertFalse(node2.isName());
1921:       assertFalse(node2.isTrue());
1922:       assertFalse(node2.isNull());
1923:       assertFalse(node3.isDefaultCase());
1924:       assertFalse(node3.isTrue());
1925:       assertFalse(node3.isCatch());
1926:       assertFalse(node3.isFunction());
1927:       assertFalse(node3.isDebugger());
1928:       assertFalse(node3.isRegExp());
1929:       assertFalse(node3.isSetterDef());
1930:       assertFalse(node3.isTry());
1931:       assertFalse(node3.isIf());
1932:       assertFalse(node3.isNull());
1933:       assertFalse(node3.isNE());
1934:       assertFalse(node3.isFor());
1935:       assertFalse(node3.isEmpty());
1936:       assertTrue(node3.hasChildren());
1937:       assertFalse(node3.isCall());
1938:       assertFalse(node3.isName());
1939:       assertFalse(node3.isDelProp());
1940:       assertFalse(node3.isVoid());
1941:       assertEquals(39, node3.getType());
1942:       assertEquals((-1), node3.getCharno());
1943:       assertFalse(node3.isLabel());
1944:       assertFalse(node3.isAssignAdd());
1945:       assertFalse(node3.isHook());
1946:       assertFalse(node3.isBlock());
1947:       assertFalse(node3.isVar());
1948:       assertFalse(node3.isAdd());
1949:       assertFalse(node3.isCase());
1950:       assertFalse(node3.isNew());
1951:       assertFalse(node3.isDo());
1952:       assertFalse(node3.isStringKey());
1953:       assertFalse(node3.isGetterDef());
1954:       assertFalse(node3.isParamList());
1955:       assertFalse(node3.isSwitch());
1956:       assertFalse(node3.isArrayLit());
1957:       assertFalse(node3.isLabelName());
1958:       assertFalse(node3.isWith());
1959:       assertFalse(node3.isScript());
1960:       assertFalse(node3.isObjectLit());
1961:       assertFalse(node3.isNot());
1962:       assertFalse(node3.isGetProp());
1963:       assertFalse(node3.hasOneChild());
1964:       assertFalse(node3.isBreak());
1965:       assertFalse(node3.isGetElem());
1966:       assertFalse(node3.isComma());
1967:       assertFalse(node3.isThis());
1968:       assertFalse(node3.isTypeOf());
1969:       assertFalse(node3.isDec());
1970:       assertFalse(node3.isAssign());
1971:       assertFalse(node3.isOr());
1972:       assertEquals((-1), node3.getLineno());
1973:       assertFalse(node3.isInstanceOf());
1974:       assertFalse(node3.isExprResult());
1975:       assertTrue(node3.hasMoreThanOneChild());
1976:       assertFalse(node3.isString());
1977:       assertFalse(node3.isWhile());
1978:       assertFalse(node3.isContinue());
1979:       assertTrue(node3.isNumber());
1980:       assertFalse(node3.isReturn());
1981:       assertFalse(node3.isIn());
1982:       assertEquals(3, node3.getChildCount());
1983:       assertFalse(node3.isInc());
1984:       assertFalse(node3.isThrow());
1985:       assertEquals((-1), node3.getSourcePosition());
1986:       assertFalse(node3.isFalse());
1987:       assertFalse(node3.isCast());
1988:       assertFalse(node3.isAnd());
1989:       assertFalse(node0.equals((Object)node2));
1990:       assertFalse(node0.equals((Object)node3));
1991:       assertFalse(node0.equals((Object)node1));
1992:       assertFalse(node1.equals((Object)node2));
1993:       assertFalse(node1.equals((Object)node3));
1994:       assertFalse(node1.equals((Object)node0));
1995:       assertFalse(node2.equals((Object)node0));
1996:       assertFalse(node2.equals((Object)node1));
1997:       assertFalse(node2.equals((Object)node3));
1998:       assertFalse(node3.equals((Object)node2));
1999:       assertFalse(node3.equals((Object)node0));
2000:       assertFalse(node3.equals((Object)node1));
2001:       assertNotSame(node1, node2);
2002:       assertNotSame(node2, node1);
2003:       assertEquals(40, Node.ORIGINALNAME_PROP);
2004:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2005:       assertEquals(52, Node.LENGTH);
2006:       assertEquals(50, Node.FREE_CALL);
2007:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2008:       assertEquals(57, Node.REFLECTED_OBJECT);
2009:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2010:       assertEquals(8, Node.FLAG_NO_THROWS);
2011:       assertEquals(39, Node.EMPTY_BLOCK);
2012:       assertEquals(57, Node.LAST_PROP);
2013:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2014:       assertEquals(1, Node.DECR_FLAG);
2015:       assertEquals(30, Node.VAR_ARGS_NAME);
2016:       assertEquals(46, Node.IS_NAMESPACE);
2017:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2018:       assertEquals(2, Node.POST_FLAG);
2019:       assertEquals(54, Node.SLASH_V);
2020:       assertEquals(43, Node.IS_CONSTANT_NAME);
2021:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2022:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2023:       assertEquals(47, Node.IS_DISPATCHER);
2024:       assertEquals(29, Node.JSDOC_INFO_PROP);
2025:       assertEquals(32, Node.INCRDECR_PROP);
2026:       assertEquals(53, Node.INPUT_ID);
2027:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2028:       assertEquals(55, Node.INFERRED_FUNCTION);
2029:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2030:       assertEquals(12, Node.COLUMN_BITS);
2031:       assertEquals(4095, Node.COLUMN_MASK);
2032:       assertEquals(36, Node.QUOTED_PROP);
2033:       assertEquals(48, Node.DIRECTIVES);
2034:       assertEquals(56, Node.CHANGE_TIME);
2035:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2036:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2037:       assertEquals(49, Node.DIRECT_EVAL);
2038:       assertEquals(37, Node.OPT_ARG_NAME);
2039:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2040:       assertEquals(43, Node.IS_CONSTANT_NAME);
2041:       assertEquals(36, Node.QUOTED_PROP);
2042:       assertEquals(55, Node.INFERRED_FUNCTION);
2043:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2044:       assertEquals(29, Node.JSDOC_INFO_PROP);
2045:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2046:       assertEquals(53, Node.INPUT_ID);
2047:       assertEquals(2, Node.POST_FLAG);
2048:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2049:       assertEquals(39, Node.EMPTY_BLOCK);
2050:       assertEquals(47, Node.IS_DISPATCHER);
2051:       assertEquals(46, Node.IS_NAMESPACE);
2052:       assertEquals(40, Node.ORIGINALNAME_PROP);
2053:       assertEquals(57, Node.LAST_PROP);
2054:       assertEquals(30, Node.VAR_ARGS_NAME);
2055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2056:       assertEquals(57, Node.REFLECTED_OBJECT);
2057:       assertEquals(54, Node.SLASH_V);
2058:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2059:       assertEquals(1, Node.DECR_FLAG);
2060:       assertEquals(32, Node.INCRDECR_PROP);
2061:       assertEquals(50, Node.FREE_CALL);
2062:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2063:       assertEquals(52, Node.LENGTH);
2064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2065:       assertEquals(8, Node.FLAG_NO_THROWS);
2066:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2067:       assertEquals(37, Node.OPT_ARG_NAME);
2068:       assertEquals(48, Node.DIRECTIVES);
2069:       assertEquals(56, Node.CHANGE_TIME);
2070:       assertEquals(12, Node.COLUMN_BITS);
2071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2072:       assertEquals(4095, Node.COLUMN_MASK);
2073:       assertEquals(49, Node.DIRECT_EVAL);
2074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2075:       assertEquals(2, Node.POST_FLAG);
2076:       assertEquals(47, Node.IS_DISPATCHER);
2077:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2078:       assertEquals(37, Node.OPT_ARG_NAME);
2079:       assertEquals(29, Node.JSDOC_INFO_PROP);
2080:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2081:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2082:       assertEquals(49, Node.DIRECT_EVAL);
2083:       assertEquals(46, Node.IS_NAMESPACE);
2084:       assertEquals(56, Node.CHANGE_TIME);
2085:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2086:       assertEquals(54, Node.SLASH_V);
2087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2089:       assertEquals(12, Node.COLUMN_BITS);
2090:       assertEquals(1, Node.DECR_FLAG);
2091:       assertEquals(32, Node.INCRDECR_PROP);
2092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2093:       assertEquals(8, Node.FLAG_NO_THROWS);
2094:       assertEquals(39, Node.EMPTY_BLOCK);
2095:       assertEquals(48, Node.DIRECTIVES);
2096:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2097:       assertEquals(50, Node.FREE_CALL);
2098:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2099:       assertEquals(4095, Node.COLUMN_MASK);
2100:       assertEquals(40, Node.ORIGINALNAME_PROP);
2101:       assertEquals(57, Node.REFLECTED_OBJECT);
2102:       assertEquals(43, Node.IS_CONSTANT_NAME);
2103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2104:       assertEquals(36, Node.QUOTED_PROP);
2105:       assertEquals(53, Node.INPUT_ID);
2106:       assertEquals(52, Node.LENGTH);
2107:       assertEquals(30, Node.VAR_ARGS_NAME);
2108:       assertEquals(55, Node.INFERRED_FUNCTION);
2109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2110:       assertEquals(57, Node.LAST_PROP);
2111:       assertEquals(47, Node.IS_DISPATCHER);
2112:       assertEquals(56, Node.CHANGE_TIME);
2113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2114:       assertEquals(37, Node.OPT_ARG_NAME);
2115:       assertEquals(2, Node.POST_FLAG);
2116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2117:       assertEquals(30, Node.VAR_ARGS_NAME);
2118:       assertEquals(49, Node.DIRECT_EVAL);
2119:       assertEquals(57, Node.LAST_PROP);
2120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2121:       assertEquals(8, Node.FLAG_NO_THROWS);
2122:       assertEquals(39, Node.EMPTY_BLOCK);
2123:       assertEquals(36, Node.QUOTED_PROP);
2124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2125:       assertEquals(52, Node.LENGTH);
2126:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2127:       assertEquals(53, Node.INPUT_ID);
2128:       assertEquals(55, Node.INFERRED_FUNCTION);
2129:       assertEquals(29, Node.JSDOC_INFO_PROP);
2130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2131:       assertEquals(40, Node.ORIGINALNAME_PROP);
2132:       assertEquals(50, Node.FREE_CALL);
2133:       assertEquals(57, Node.REFLECTED_OBJECT);
2134:       assertEquals(54, Node.SLASH_V);
2135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2136:       assertEquals(48, Node.DIRECTIVES);
2137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2138:       assertEquals(4095, Node.COLUMN_MASK);
2139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2140:       assertEquals(32, Node.INCRDECR_PROP);
2141:       assertEquals(1, Node.DECR_FLAG);
2142:       assertEquals(43, Node.IS_CONSTANT_NAME);
2143:       assertEquals(12, Node.COLUMN_BITS);
2144:       assertEquals(46, Node.IS_NAMESPACE);
2145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2147:       
2148:       InputId inputId0 = node3.getInputId();
2149:       assertFalse(node1.isCatch());
2150:       assertEquals(0, node1.getChildCount());
2151:       assertFalse(node1.isStringKey());
2152:       assertFalse(node1.isCall());
2153:       assertFalse(node1.isNull());
2154:       assertFalse(node1.isParamList());
2155:       assertFalse(node1.isVoid());
2156:       assertFalse(node1.isName());
2157:       assertFalse(node1.isNew());
2158:       assertFalse(node1.isTrue());
2159:       assertFalse(node1.isVar());
2160:       assertFalse(node1.isAdd());
2161:       assertFalse(node1.isFunction());
2162:       assertFalse(node1.isDo());
2163:       assertFalse(node1.isEmpty());
2164:       assertFalse(node1.isSetterDef());
2165:       assertFalse(node1.isDefaultCase());
2166:       assertFalse(node1.isOr());
2167:       assertFalse(node1.isReturn());
2168:       assertFalse(node1.isContinue());
2169:       assertFalse(node1.isDec());
2170:       assertFalse(node1.isTypeOf());
2171:       assertFalse(node1.isGetElem());
2172:       assertFalse(node1.isDelProp());
2173:       assertFalse(node1.isExprResult());
2174:       assertFalse(node1.isDebugger());
2175:       assertFalse(node1.isAssign());
2176:       assertFalse(node1.isString());
2177:       assertFalse(node1.isWhile());
2178:       assertFalse(node1.hasChildren());
2179:       assertFalse(node1.isGetProp());
2180:       assertFalse(node1.isInstanceOf());
2181:       assertFalse(node1.isComma());
2182:       assertFalse(node1.isThis());
2183:       assertFalse(node1.isObjectLit());
2184:       assertFalse(node1.isNot());
2185:       assertFalse(node1.isWith());
2186:       assertFalse(node1.isBreak());
2187:       assertEquals(131072, node1.getSourcePosition());
2188:       assertFalse(node1.isAnd());
2189:       assertEquals((-1122), node1.getType());
2190:       assertEquals(0, node1.getCharno());
2191:       assertFalse(node1.isCast());
2192:       assertFalse(node1.isFalse());
2193:       assertFalse(node1.isThrow());
2194:       assertFalse(node1.isInc());
2195:       assertFalse(node1.isAssignAdd());
2196:       assertFalse(node1.isLabel());
2197:       assertEquals(32, node1.getLineno());
2198:       assertFalse(node1.hasMoreThanOneChild());
2199:       assertFalse(node1.isIn());
2200:       assertFalse(node1.isNumber());
2201:       assertFalse(node1.isGetterDef());
2202:       assertFalse(node1.isLabelName());
2203:       assertFalse(node1.isNE());
2204:       assertFalse(node1.isSwitch());
2205:       assertFalse(node1.isArrayLit());
2206:       assertFalse(node1.isIf());
2207:       assertFalse(node1.isHook());
2208:       assertFalse(node1.isBlock());
2209:       assertFalse(node1.isRegExp());
2210:       assertFalse(node1.isCase());
2211:       assertFalse(node1.isFor());
2212:       assertFalse(node1.isScript());
2213:       assertFalse(node1.hasOneChild());
2214:       assertFalse(node1.isTry());
2215:       assertFalse(node2.isTry());
2216:       assertFalse(node2.isVoid());
2217:       assertFalse(node2.isArrayLit());
2218:       assertFalse(node2.isFor());
2219:       assertFalse(node2.isDefaultCase());
2220:       assertFalse(node2.isFunction());
2221:       assertFalse(node2.isRegExp());
2222:       assertEquals(0, node2.getChildCount());
2223:       assertFalse(node2.isCase());
2224:       assertFalse(node2.isString());
2225:       assertFalse(node2.isGetterDef());
2226:       assertFalse(node2.isStringKey());
2227:       assertFalse(node2.isParamList());
2228:       assertEquals((-1), node2.getCharno());
2229:       assertFalse(node2.isDebugger());
2230:       assertFalse(node2.isInc());
2231:       assertFalse(node2.isFalse());
2232:       assertFalse(node2.isContinue());
2233:       assertFalse(node2.hasMoreThanOneChild());
2234:       assertFalse(node2.isThis());
2235:       assertFalse(node2.isThrow());
2236:       assertFalse(node2.isHook());
2237:       assertFalse(node2.isBlock());
2238:       assertEquals((-1), node2.getLineno());
2239:       assertFalse(node2.isInstanceOf());
2240:       assertFalse(node2.isIn());
2241:       assertFalse(node2.isCatch());
2242:       assertFalse(node2.isSetterDef());
2243:       assertFalse(node2.isIf());
2244:       assertFalse(node2.isNE());
2245:       assertFalse(node2.isExprResult());
2246:       assertFalse(node2.isCast());
2247:       assertFalse(node2.isScript());
2248:       assertFalse(node2.hasOneChild());
2249:       assertFalse(node2.isGetElem());
2250:       assertFalse(node2.isWith());
2251:       assertFalse(node2.isAssign());
2252:       assertFalse(node2.isTypeOf());
2253:       assertFalse(node2.isDec());
2254:       assertFalse(node2.isLabel());
2255:       assertFalse(node2.hasChildren());
2256:       assertFalse(node2.isReturn());
2257:       assertFalse(node2.isGetProp());
2258:       assertFalse(node2.isNot());
2259:       assertFalse(node2.isLabelName());
2260:       assertFalse(node2.isNumber());
2261:       assertFalse(node2.isAnd());
2262:       assertFalse(node2.isObjectLit());
2263:       assertEquals((-1), node2.getSourcePosition());
2264:       assertFalse(node2.isAdd());
2265:       assertFalse(node2.isCall());
2266:       assertFalse(node2.isSwitch());
2267:       assertFalse(node2.isNew());
2268:       assertFalse(node2.isWhile());
2269:       assertFalse(node2.isDo());
2270:       assertFalse(node2.isComma());
2271:       assertFalse(node2.isVar());
2272:       assertEquals(46, node2.getType());
2273:       assertFalse(node2.isOr());
2274:       assertFalse(node2.isAssignAdd());
2275:       assertFalse(node2.isBreak());
2276:       assertFalse(node2.isDelProp());
2277:       assertFalse(node2.isEmpty());
2278:       assertFalse(node2.isName());
2279:       assertFalse(node2.isTrue());
2280:       assertFalse(node2.isNull());
2281:       assertFalse(node3.isDefaultCase());
2282:       assertFalse(node3.isTrue());
2283:       assertFalse(node3.isCatch());
2284:       assertFalse(node3.isFunction());
2285:       assertFalse(node3.isDebugger());
2286:       assertFalse(node3.isRegExp());
2287:       assertFalse(node3.isSetterDef());
2288:       assertFalse(node3.isTry());
2289:       assertFalse(node3.isIf());
2290:       assertFalse(node3.isNull());
2291:       assertFalse(node3.isNE());
2292:       assertFalse(node3.isFor());
2293:       assertFalse(node3.isEmpty());
2294:       assertTrue(node3.hasChildren());
2295:       assertFalse(node3.isCall());
2296:       assertFalse(node3.isName());
2297:       assertFalse(node3.isDelProp());
2298:       assertFalse(node3.isVoid());
2299:       assertEquals(39, node3.getType());
2300:       assertEquals((-1), node3.getCharno());
2301:       assertFalse(node3.isLabel());
2302:       assertFalse(node3.isAssignAdd());
2303:       assertFalse(node3.isHook());
2304:       assertFalse(node3.isBlock());
2305:       assertFalse(node3.isVar());
2306:       assertFalse(node3.isAdd());
2307:       assertFalse(node3.isCase());
2308:       assertFalse(node3.isNew());
2309:       assertFalse(node3.isDo());
2310:       assertFalse(node3.isStringKey());
2311:       assertFalse(node3.isGetterDef());
2312:       assertFalse(node3.isParamList());
2313:       assertFalse(node3.isSwitch());
2314:       assertFalse(node3.isArrayLit());
2315:       assertFalse(node3.isLabelName());
2316:       assertFalse(node3.isWith());
2317:       assertFalse(node3.isScript());
2318:       assertFalse(node3.isObjectLit());
2319:       assertFalse(node3.isNot());
2320:       assertFalse(node3.isGetProp());
2321:       assertFalse(node3.hasOneChild());
2322:       assertFalse(node3.isBreak());
2323:       assertFalse(node3.isGetElem());
2324:       assertFalse(node3.isComma());
2325:       assertFalse(node3.isThis());
2326:       assertFalse(node3.isTypeOf());
2327:       assertFalse(node3.isDec());
2328:       assertFalse(node3.isAssign());
2329:       assertFalse(node3.isOr());
2330:       assertEquals((-1), node3.getLineno());
2331:       assertFalse(node3.isInstanceOf());
2332:       assertFalse(node3.isExprResult());
2333:       assertTrue(node3.hasMoreThanOneChild());
2334:       assertFalse(node3.isString());
2335:       assertFalse(node3.isWhile());
2336:       assertFalse(node3.isContinue());
2337:       assertTrue(node3.isNumber());
2338:       assertFalse(node3.isReturn());
2339:       assertFalse(node3.isIn());
2340:       assertEquals(3, node3.getChildCount());
2341:       assertFalse(node3.isInc());
2342:       assertFalse(node3.isThrow());
2343:       assertEquals((-1), node3.getSourcePosition());
2344:       assertFalse(node3.isFalse());
2345:       assertFalse(node3.isCast());
2346:       assertFalse(node3.isAnd());
2347:       assertFalse(node1.equals((Object)node2));
2348:       assertFalse(node1.equals((Object)node3));
2349:       assertFalse(node1.equals((Object)node0));
2350:       assertFalse(node2.equals((Object)node0));
2351:       assertFalse(node2.equals((Object)node1));
2352:       assertFalse(node2.equals((Object)node3));
2353:       assertFalse(node3.equals((Object)node2));
2354:       assertFalse(node3.equals((Object)node0));
2355:       assertFalse(node3.equals((Object)node1));
2356:       assertNotSame(node1, node2);
2357:       assertNotSame(node2, node1);
2358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2359:       assertEquals(43, Node.IS_CONSTANT_NAME);
2360:       assertEquals(36, Node.QUOTED_PROP);
2361:       assertEquals(55, Node.INFERRED_FUNCTION);
2362:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2363:       assertEquals(29, Node.JSDOC_INFO_PROP);
2364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2365:       assertEquals(53, Node.INPUT_ID);
2366:       assertEquals(2, Node.POST_FLAG);
2367:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2368:       assertEquals(39, Node.EMPTY_BLOCK);
2369:       assertEquals(47, Node.IS_DISPATCHER);
2370:       assertEquals(46, Node.IS_NAMESPACE);
2371:       assertEquals(40, Node.ORIGINALNAME_PROP);
2372:       assertEquals(57, Node.LAST_PROP);
2373:       assertEquals(30, Node.VAR_ARGS_NAME);
2374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2375:       assertEquals(57, Node.REFLECTED_OBJECT);
2376:       assertEquals(54, Node.SLASH_V);
2377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2378:       assertEquals(1, Node.DECR_FLAG);
2379:       assertEquals(32, Node.INCRDECR_PROP);
2380:       assertEquals(50, Node.FREE_CALL);
2381:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2382:       assertEquals(52, Node.LENGTH);
2383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2384:       assertEquals(8, Node.FLAG_NO_THROWS);
2385:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2386:       assertEquals(37, Node.OPT_ARG_NAME);
2387:       assertEquals(48, Node.DIRECTIVES);
2388:       assertEquals(56, Node.CHANGE_TIME);
2389:       assertEquals(12, Node.COLUMN_BITS);
2390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2391:       assertEquals(4095, Node.COLUMN_MASK);
2392:       assertEquals(49, Node.DIRECT_EVAL);
2393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2394:       assertEquals(2, Node.POST_FLAG);
2395:       assertEquals(47, Node.IS_DISPATCHER);
2396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2397:       assertEquals(37, Node.OPT_ARG_NAME);
2398:       assertEquals(29, Node.JSDOC_INFO_PROP);
2399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2400:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2401:       assertEquals(49, Node.DIRECT_EVAL);
2402:       assertEquals(46, Node.IS_NAMESPACE);
2403:       assertEquals(56, Node.CHANGE_TIME);
2404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2405:       assertEquals(54, Node.SLASH_V);
2406:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2408:       assertEquals(12, Node.COLUMN_BITS);
2409:       assertEquals(1, Node.DECR_FLAG);
2410:       assertEquals(32, Node.INCRDECR_PROP);
2411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2412:       assertEquals(8, Node.FLAG_NO_THROWS);
2413:       assertEquals(39, Node.EMPTY_BLOCK);
2414:       assertEquals(48, Node.DIRECTIVES);
2415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2416:       assertEquals(50, Node.FREE_CALL);
2417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2418:       assertEquals(4095, Node.COLUMN_MASK);
2419:       assertEquals(40, Node.ORIGINALNAME_PROP);
2420:       assertEquals(57, Node.REFLECTED_OBJECT);
2421:       assertEquals(43, Node.IS_CONSTANT_NAME);
2422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2423:       assertEquals(36, Node.QUOTED_PROP);
2424:       assertEquals(53, Node.INPUT_ID);
2425:       assertEquals(52, Node.LENGTH);
2426:       assertEquals(30, Node.VAR_ARGS_NAME);
2427:       assertEquals(55, Node.INFERRED_FUNCTION);
2428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2429:       assertEquals(57, Node.LAST_PROP);
2430:       assertEquals(47, Node.IS_DISPATCHER);
2431:       assertEquals(56, Node.CHANGE_TIME);
2432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2433:       assertEquals(37, Node.OPT_ARG_NAME);
2434:       assertEquals(2, Node.POST_FLAG);
2435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2436:       assertEquals(30, Node.VAR_ARGS_NAME);
2437:       assertEquals(49, Node.DIRECT_EVAL);
2438:       assertEquals(57, Node.LAST_PROP);
2439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2440:       assertEquals(8, Node.FLAG_NO_THROWS);
2441:       assertEquals(39, Node.EMPTY_BLOCK);
2442:       assertEquals(36, Node.QUOTED_PROP);
2443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2444:       assertEquals(52, Node.LENGTH);
2445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2446:       assertEquals(53, Node.INPUT_ID);
2447:       assertEquals(55, Node.INFERRED_FUNCTION);
2448:       assertEquals(29, Node.JSDOC_INFO_PROP);
2449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2450:       assertEquals(40, Node.ORIGINALNAME_PROP);
2451:       assertEquals(50, Node.FREE_CALL);
2452:       assertEquals(57, Node.REFLECTED_OBJECT);
2453:       assertEquals(54, Node.SLASH_V);
2454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2455:       assertEquals(48, Node.DIRECTIVES);
2456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2457:       assertEquals(4095, Node.COLUMN_MASK);
2458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2459:       assertEquals(32, Node.INCRDECR_PROP);
2460:       assertEquals(1, Node.DECR_FLAG);
2461:       assertEquals(43, Node.IS_CONSTANT_NAME);
2462:       assertEquals(12, Node.COLUMN_BITS);
2463:       assertEquals(46, Node.IS_NAMESPACE);
2464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2465:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2466:       assertNull(inputId0);
2467:       
2468:       // Undeclared exception!
2469:       try { 
2470:         node1.replaceChildAfter(node2, node3);
2471:         fail("Expecting exception: IllegalArgumentException");
2472:       
2473:       } catch(IllegalArgumentException e) {
2474:          //
2475:          // prev is not a child of this node.
2476:          //
2477:          verifyException("com.google.common.base.Preconditions", e);
2478:       }
2479:   }
2480: }
RegularFileObject[/tmp/EvoSuite_109_1629223348801/com/google/javascript/rhino/Node_109_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:29 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_109_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_109_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_109_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:29.505 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node0);

Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node1);

Object object0 = node1.getProp(0);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNull(object0);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertEquals(46, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node2);

boolean boolean0 = node1.isNull();
assertFalse(boolean0);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

node0.setLineno(39);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(39, node0.getLineno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

node0.putProp(4095, (Object) null);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(39, node0.getLineno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

int int0 = node0.getIndexOfChild(node1);
assertEquals((-1), int0);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(39, node0.getLineno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(39, node0.getLineno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));

boolean boolean1 = node2.isIn();
assertFalse(boolean1);
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertEquals(46, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node1);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(39, node0.getLineno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertEquals(46, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node_NodeMismatch0);

Node node3 = new Node(39, node1, node2);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertEquals(46, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertTrue(node3.hasChildren());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node3);

node3.addChildBefore(node0, node2);
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(39, node0.getLineno());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertEquals(46, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertTrue(node3.hasChildren());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

InputId inputId0 = node3.getInputId();
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isAssign());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals((-1122), node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(32, node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertEquals(46, node2.getType());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertTrue(node3.hasChildren());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertEquals(39, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isExprResult());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNull(inputId0);

node1.replaceChildAfter(node2, node3);

[MASTER] 18:02:45.466 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_179_1629223365086/com/google/javascript/rhino/Node_179_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_179_1629223365086/com/google/javascript/rhino/Node_179_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:45.466 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:45.466 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:45.467 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1082
[MASTER] 18:02:45.468 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_179_1629223365086/com/google/javascript/rhino/Node_179_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.JSType;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_179_tmp__ESTest extends Node_179_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(21, "ALL_TYPE");
22:       assertFalse(node0.isCast());
23:       assertFalse(node0.isGetElem());
24:       assertFalse(node0.hasOneChild());
25:       assertFalse(node0.isLabelName());
26:       assertFalse(node0.isExprResult());
27:       assertFalse(node0.isLabel());
28:       assertFalse(node0.isReturn());
29:       assertFalse(node0.hasChildren());
30:       assertFalse(node0.isDec());
31:       assertFalse(node0.isAssign());
32:       assertFalse(node0.isTypeOf());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.hasMoreThanOneChild());
35:       assertFalse(node0.isObjectLit());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isContinue());
38:       assertFalse(node0.isWhile());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isScript());
41:       assertFalse(node0.isGetProp());
42:       assertFalse(node0.isNot());
43:       assertFalse(node0.isNumber());
44:       assertFalse(node0.isCall());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isVar());
47:       assertFalse(node0.isBreak());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.isComma());
50:       assertEquals(0, node0.getChildCount());
51:       assertFalse(node0.isDo());
52:       assertFalse(node0.isAssignAdd());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isTrue());
55:       assertFalse(node0.isNull());
56:       assertFalse(node0.isNew());
57:       assertEquals(21, node0.getType());
58:       assertFalse(node0.isOr());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isArrayLit());
62:       assertFalse(node0.isDelProp());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isSwitch());
70:       assertEquals((-1), node0.getCharno());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isString());
75:       assertTrue(node0.isAdd());
76:       assertFalse(node0.isThrow());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isCatch());
83:       assertEquals((-1), node0.getLineno());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isSetterDef());
87:       assertFalse(node0.isIn());
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(37, Node.OPT_ARG_NAME);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(56, Node.CHANGE_TIME);
94:       assertEquals(49, Node.DIRECT_EVAL);
95:       assertEquals(54, Node.SLASH_V);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(4095, Node.COLUMN_MASK);
103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(43, Node.IS_CONSTANT_NAME);
108:       assertEquals(50, Node.FREE_CALL);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isFromExterns();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isCast());
129:       assertFalse(node0.isGetElem());
130:       assertFalse(node0.hasOneChild());
131:       assertFalse(node0.isLabelName());
132:       assertFalse(node0.isExprResult());
133:       assertFalse(node0.isLabel());
134:       assertFalse(node0.isReturn());
135:       assertFalse(node0.hasChildren());
136:       assertFalse(node0.isDec());
137:       assertFalse(node0.isAssign());
138:       assertFalse(node0.isTypeOf());
139:       assertFalse(node0.isWith());
140:       assertFalse(node0.hasMoreThanOneChild());
141:       assertFalse(node0.isObjectLit());
142:       assertFalse(node0.isAnd());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isWhile());
145:       assertEquals((-1), node0.getSourcePosition());
146:       assertFalse(node0.isScript());
147:       assertFalse(node0.isGetProp());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.isNumber());
150:       assertFalse(node0.isCall());
151:       assertFalse(node0.isStringKey());
152:       assertFalse(node0.isVar());
153:       assertFalse(node0.isBreak());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isComma());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isDo());
158:       assertFalse(node0.isAssignAdd());
159:       assertFalse(node0.isDefaultCase());
160:       assertFalse(node0.isTrue());
161:       assertFalse(node0.isNull());
162:       assertFalse(node0.isNew());
163:       assertEquals(21, node0.getType());
164:       assertFalse(node0.isOr());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isDelProp());
169:       assertFalse(node0.isTry());
170:       assertFalse(node0.isIf());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isSwitch());
176:       assertEquals((-1), node0.getCharno());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isParamList());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isString());
181:       assertTrue(node0.isAdd());
182:       assertFalse(node0.isThrow());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isBlock());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isInstanceOf());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isCatch());
189:       assertEquals((-1), node0.getLineno());
190:       assertFalse(node0.isNE());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isIn());
194:       assertEquals(32, Node.INCRDECR_PROP);
195:       assertEquals(46, Node.IS_NAMESPACE);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(49, Node.DIRECT_EVAL);
201:       assertEquals(54, Node.SLASH_V);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(4095, Node.COLUMN_MASK);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(55, Node.INFERRED_FUNCTION);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(39, Node.EMPTY_BLOCK);
213:       assertEquals(43, Node.IS_CONSTANT_NAME);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(53, Node.INPUT_ID);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       
231:       boolean boolean1 = node0.isQualifiedName();
232:       assertFalse(boolean1);
233:       assertFalse(node0.isCast());
234:       assertFalse(node0.isGetElem());
235:       assertFalse(node0.hasOneChild());
236:       assertFalse(node0.isLabelName());
237:       assertFalse(node0.isExprResult());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.isReturn());
240:       assertFalse(node0.hasChildren());
241:       assertFalse(node0.isDec());
242:       assertFalse(node0.isAssign());
243:       assertFalse(node0.isTypeOf());
244:       assertFalse(node0.isWith());
245:       assertFalse(node0.hasMoreThanOneChild());
246:       assertFalse(node0.isObjectLit());
247:       assertFalse(node0.isAnd());
248:       assertFalse(node0.isContinue());
249:       assertFalse(node0.isWhile());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isScript());
252:       assertFalse(node0.isGetProp());
253:       assertFalse(node0.isNot());
254:       assertFalse(node0.isNumber());
255:       assertFalse(node0.isCall());
256:       assertFalse(node0.isStringKey());
257:       assertFalse(node0.isVar());
258:       assertFalse(node0.isBreak());
259:       assertFalse(node0.isName());
260:       assertFalse(node0.isComma());
261:       assertEquals(0, node0.getChildCount());
262:       assertFalse(node0.isDo());
263:       assertFalse(node0.isAssignAdd());
264:       assertFalse(node0.isDefaultCase());
265:       assertFalse(node0.isTrue());
266:       assertFalse(node0.isNull());
267:       assertFalse(node0.isNew());
268:       assertEquals(21, node0.getType());
269:       assertFalse(node0.isOr());
270:       assertFalse(node0.isFor());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isArrayLit());
273:       assertFalse(node0.isDelProp());
274:       assertFalse(node0.isTry());
275:       assertFalse(node0.isIf());
276:       assertFalse(node0.isVoid());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isRegExp());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isSwitch());
281:       assertEquals((-1), node0.getCharno());
282:       assertFalse(node0.isDebugger());
283:       assertFalse(node0.isParamList());
284:       assertFalse(node0.isGetterDef());
285:       assertFalse(node0.isString());
286:       assertTrue(node0.isAdd());
287:       assertFalse(node0.isThrow());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isInstanceOf());
292:       assertFalse(node0.isFalse());
293:       assertFalse(node0.isCatch());
294:       assertEquals((-1), node0.getLineno());
295:       assertFalse(node0.isNE());
296:       assertFalse(node0.isInc());
297:       assertFalse(node0.isSetterDef());
298:       assertFalse(node0.isIn());
299:       assertTrue(boolean1 == boolean0);
300:       assertEquals(32, Node.INCRDECR_PROP);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(37, Node.OPT_ARG_NAME);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(49, Node.DIRECT_EVAL);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
312:       assertEquals(12, Node.COLUMN_BITS);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(4095, Node.COLUMN_MASK);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(39, Node.EMPTY_BLOCK);
319:       assertEquals(43, Node.IS_CONSTANT_NAME);
320:       assertEquals(50, Node.FREE_CALL);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
324:       assertEquals(36, Node.QUOTED_PROP);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(2, Node.POST_FLAG);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(47, Node.IS_DISPATCHER);
336:       
337:       boolean boolean2 = node0.isEquivalentTo(node0, false, false, false);
338:       assertTrue(boolean2);
339:       assertFalse(node0.isCast());
340:       assertFalse(node0.isGetElem());
341:       assertFalse(node0.hasOneChild());
342:       assertFalse(node0.isLabelName());
343:       assertFalse(node0.isExprResult());
344:       assertFalse(node0.isLabel());
345:       assertFalse(node0.isReturn());
346:       assertFalse(node0.hasChildren());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.isAssign());
349:       assertFalse(node0.isTypeOf());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.hasMoreThanOneChild());
352:       assertFalse(node0.isObjectLit());
353:       assertFalse(node0.isAnd());
354:       assertFalse(node0.isContinue());
355:       assertFalse(node0.isWhile());
356:       assertEquals((-1), node0.getSourcePosition());
357:       assertFalse(node0.isScript());
358:       assertFalse(node0.isGetProp());
359:       assertFalse(node0.isNot());
360:       assertFalse(node0.isNumber());
361:       assertFalse(node0.isCall());
362:       assertFalse(node0.isStringKey());
363:       assertFalse(node0.isVar());
364:       assertFalse(node0.isBreak());
365:       assertFalse(node0.isName());
366:       assertFalse(node0.isComma());
367:       assertEquals(0, node0.getChildCount());
368:       assertFalse(node0.isDo());
369:       assertFalse(node0.isAssignAdd());
370:       assertFalse(node0.isDefaultCase());
371:       assertFalse(node0.isTrue());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isNew());
374:       assertEquals(21, node0.getType());
375:       assertFalse(node0.isOr());
376:       assertFalse(node0.isFor());
377:       assertFalse(node0.isEmpty());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isTry());
381:       assertFalse(node0.isIf());
382:       assertFalse(node0.isVoid());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isRegExp());
385:       assertFalse(node0.isCase());
386:       assertFalse(node0.isSwitch());
387:       assertEquals((-1), node0.getCharno());
388:       assertFalse(node0.isDebugger());
389:       assertFalse(node0.isParamList());
390:       assertFalse(node0.isGetterDef());
391:       assertFalse(node0.isString());
392:       assertTrue(node0.isAdd());
393:       assertFalse(node0.isThrow());
394:       assertFalse(node0.isHook());
395:       assertFalse(node0.isBlock());
396:       assertFalse(node0.isThis());
397:       assertFalse(node0.isInstanceOf());
398:       assertFalse(node0.isFalse());
399:       assertFalse(node0.isCatch());
400:       assertEquals((-1), node0.getLineno());
401:       assertFalse(node0.isNE());
402:       assertFalse(node0.isInc());
403:       assertFalse(node0.isSetterDef());
404:       assertFalse(node0.isIn());
405:       assertFalse(boolean2 == boolean0);
406:       assertFalse(boolean2 == boolean1);
407:       assertEquals(32, Node.INCRDECR_PROP);
408:       assertEquals(46, Node.IS_NAMESPACE);
409:       assertEquals(37, Node.OPT_ARG_NAME);
410:       assertEquals(1, Node.DECR_FLAG);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(49, Node.DIRECT_EVAL);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(4095, Node.COLUMN_MASK);
422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(43, Node.IS_CONSTANT_NAME);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
429:       assertEquals(8, Node.FLAG_NO_THROWS);
430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(52, Node.LENGTH);
434:       assertEquals(40, Node.ORIGINALNAME_PROP);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
438:       assertEquals(30, Node.VAR_ARGS_NAME);
439:       assertEquals(57, Node.LAST_PROP);
440:       assertEquals(2, Node.POST_FLAG);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(47, Node.IS_DISPATCHER);
443:       
444:       Node node1 = Node.newNumber(1.0, (-497), 53);
445:       assertFalse(node1.isSetterDef());
446:       assertFalse(node1.isParamList());
447:       assertFalse(node1.isStringKey());
448:       assertFalse(node1.isNull());
449:       assertFalse(node1.isTry());
450:       assertFalse(node1.isTrue());
451:       assertFalse(node1.isBlock());
452:       assertFalse(node1.isVoid());
453:       assertFalse(node1.isName());
454:       assertFalse(node1.isFor());
455:       assertEquals(39, node1.getType());
456:       assertFalse(node1.isWhile());
457:       assertFalse(node1.isCall());
458:       assertFalse(node1.isRegExp());
459:       assertFalse(node1.isCatch());
460:       assertFalse(node1.hasMoreThanOneChild());
461:       assertFalse(node1.isOr());
462:       assertFalse(node1.isLabel());
463:       assertFalse(node1.isAssignAdd());
464:       assertFalse(node1.isDelProp());
465:       assertFalse(node1.isEmpty());
466:       assertFalse(node1.isDo());
467:       assertFalse(node1.isCase());
468:       assertFalse(node1.isGetterDef());
469:       assertFalse(node1.isAdd());
470:       assertFalse(node1.isNew());
471:       assertEquals((-1), node1.getCharno());
472:       assertFalse(node1.isVar());
473:       assertFalse(node1.isArrayLit());
474:       assertFalse(node1.isDefaultCase());
475:       assertFalse(node1.isSwitch());
476:       assertFalse(node1.isLabelName());
477:       assertEquals(0, node1.getChildCount());
478:       assertFalse(node1.isGetProp());
479:       assertFalse(node1.isThis());
480:       assertFalse(node1.isAnd());
481:       assertFalse(node1.isNot());
482:       assertFalse(node1.isScript());
483:       assertFalse(node1.isObjectLit());
484:       assertFalse(node1.isHook());
485:       assertFalse(node1.isExprResult());
486:       assertFalse(node1.hasOneChild());
487:       assertFalse(node1.isAssign());
488:       assertFalse(node1.isBreak());
489:       assertFalse(node1.hasChildren());
490:       assertFalse(node1.isGetElem());
491:       assertFalse(node1.isComma());
492:       assertFalse(node1.isDec());
493:       assertFalse(node1.isInstanceOf());
494:       assertFalse(node1.isTypeOf());
495:       assertFalse(node1.isWith());
496:       assertTrue(node1.isNumber());
497:       assertEquals((-1), node1.getLineno());
498:       assertFalse(node1.isReturn());
499:       assertFalse(node1.isNE());
500:       assertFalse(node1.isIf());
501:       assertFalse(node1.isString());
502:       assertEquals((-1), node1.getSourcePosition());
503:       assertFalse(node1.isIn());
504:       assertFalse(node1.isDebugger());
505:       assertFalse(node1.isInc());
506:       assertFalse(node1.isThrow());
507:       assertFalse(node1.isCast());
508:       assertFalse(node1.isContinue());
509:       assertFalse(node1.isFunction());
510:       assertFalse(node1.isFalse());
511:       assertFalse(node1.equals((Object)node0));
512:       assertEquals(43, Node.IS_CONSTANT_NAME);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
516:       assertEquals(53, Node.INPUT_ID);
517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(47, Node.IS_DISPATCHER);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(48, Node.DIRECTIVES);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(29, Node.JSDOC_INFO_PROP);
527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
528:       assertEquals(39, Node.EMPTY_BLOCK);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(57, Node.REFLECTED_OBJECT);
532:       assertEquals(57, Node.LAST_PROP);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(30, Node.VAR_ARGS_NAME);
539:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(40, Node.ORIGINALNAME_PROP);
544:       assertEquals(51, Node.STATIC_SOURCE_FILE);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(46, Node.IS_NAMESPACE);
547:       assertEquals(54, Node.SLASH_V);
548:       assertNotNull(node1);
549:       
550:       boolean boolean3 = node0.isEquivalentTo(node1, false, false, false);
551:       assertFalse(boolean3);
552:       assertFalse(node0.isCast());
553:       assertFalse(node0.isGetElem());
554:       assertFalse(node0.hasOneChild());
555:       assertFalse(node0.isLabelName());
556:       assertFalse(node0.isExprResult());
557:       assertFalse(node0.isLabel());
558:       assertFalse(node0.isReturn());
559:       assertFalse(node0.hasChildren());
560:       assertFalse(node0.isDec());
561:       assertFalse(node0.isAssign());
562:       assertFalse(node0.isTypeOf());
563:       assertFalse(node0.isWith());
564:       assertFalse(node0.hasMoreThanOneChild());
565:       assertFalse(node0.isObjectLit());
566:       assertFalse(node0.isAnd());
567:       assertFalse(node0.isContinue());
568:       assertFalse(node0.isWhile());
569:       assertEquals((-1), node0.getSourcePosition());
570:       assertFalse(node0.isScript());
571:       assertFalse(node0.isGetProp());
572:       assertFalse(node0.isNot());
573:       assertFalse(node0.isNumber());
574:       assertFalse(node0.isCall());
575:       assertFalse(node0.isStringKey());
576:       assertFalse(node0.isVar());
577:       assertFalse(node0.isBreak());
578:       assertFalse(node0.isName());
579:       assertFalse(node0.isComma());
580:       assertEquals(0, node0.getChildCount());
581:       assertFalse(node0.isDo());
582:       assertFalse(node0.isAssignAdd());
583:       assertFalse(node0.isDefaultCase());
584:       assertFalse(node0.isTrue());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isNew());
587:       assertEquals(21, node0.getType());
588:       assertFalse(node0.isOr());
589:       assertFalse(node0.isFor());
590:       assertFalse(node0.isEmpty());
591:       assertFalse(node0.isArrayLit());
592:       assertFalse(node0.isDelProp());
593:       assertFalse(node0.isTry());
594:       assertFalse(node0.isIf());
595:       assertFalse(node0.isVoid());
596:       assertFalse(node0.isFunction());
597:       assertFalse(node0.isRegExp());
598:       assertFalse(node0.isCase());
599:       assertFalse(node0.isSwitch());
600:       assertEquals((-1), node0.getCharno());
601:       assertFalse(node0.isDebugger());
602:       assertFalse(node0.isParamList());
603:       assertFalse(node0.isGetterDef());
604:       assertFalse(node0.isString());
605:       assertTrue(node0.isAdd());
606:       assertFalse(node0.isThrow());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.isInstanceOf());
611:       assertFalse(node0.isFalse());
612:       assertFalse(node0.isCatch());
613:       assertEquals((-1), node0.getLineno());
614:       assertFalse(node0.isNE());
615:       assertFalse(node0.isInc());
616:       assertFalse(node0.isSetterDef());
617:       assertFalse(node0.isIn());
618:       assertFalse(node1.isSetterDef());
619:       assertFalse(node1.isParamList());
620:       assertFalse(node1.isStringKey());
621:       assertFalse(node1.isNull());
622:       assertFalse(node1.isTry());
623:       assertFalse(node1.isTrue());
624:       assertFalse(node1.isBlock());
625:       assertFalse(node1.isVoid());
626:       assertFalse(node1.isName());
627:       assertFalse(node1.isFor());
628:       assertEquals(39, node1.getType());
629:       assertFalse(node1.isWhile());
630:       assertFalse(node1.isCall());
631:       assertFalse(node1.isRegExp());
632:       assertFalse(node1.isCatch());
633:       assertFalse(node1.hasMoreThanOneChild());
634:       assertFalse(node1.isOr());
635:       assertFalse(node1.isLabel());
636:       assertFalse(node1.isAssignAdd());
637:       assertFalse(node1.isDelProp());
638:       assertFalse(node1.isEmpty());
639:       assertFalse(node1.isDo());
640:       assertFalse(node1.isCase());
641:       assertFalse(node1.isGetterDef());
642:       assertFalse(node1.isAdd());
643:       assertFalse(node1.isNew());
644:       assertEquals((-1), node1.getCharno());
645:       assertFalse(node1.isVar());
646:       assertFalse(node1.isArrayLit());
647:       assertFalse(node1.isDefaultCase());
648:       assertFalse(node1.isSwitch());
649:       assertFalse(node1.isLabelName());
650:       assertEquals(0, node1.getChildCount());
651:       assertFalse(node1.isGetProp());
652:       assertFalse(node1.isThis());
653:       assertFalse(node1.isAnd());
654:       assertFalse(node1.isNot());
655:       assertFalse(node1.isScript());
656:       assertFalse(node1.isObjectLit());
657:       assertFalse(node1.isHook());
658:       assertFalse(node1.isExprResult());
659:       assertFalse(node1.hasOneChild());
660:       assertFalse(node1.isAssign());
661:       assertFalse(node1.isBreak());
662:       assertFalse(node1.hasChildren());
663:       assertFalse(node1.isGetElem());
664:       assertFalse(node1.isComma());
665:       assertFalse(node1.isDec());
666:       assertFalse(node1.isInstanceOf());
667:       assertFalse(node1.isTypeOf());
668:       assertFalse(node1.isWith());
669:       assertTrue(node1.isNumber());
670:       assertEquals((-1), node1.getLineno());
671:       assertFalse(node1.isReturn());
672:       assertFalse(node1.isNE());
673:       assertFalse(node1.isIf());
674:       assertFalse(node1.isString());
675:       assertEquals((-1), node1.getSourcePosition());
676:       assertFalse(node1.isIn());
677:       assertFalse(node1.isDebugger());
678:       assertFalse(node1.isInc());
679:       assertFalse(node1.isThrow());
680:       assertFalse(node1.isCast());
681:       assertFalse(node1.isContinue());
682:       assertFalse(node1.isFunction());
683:       assertFalse(node1.isFalse());
684:       assertFalse(node0.equals((Object)node1));
685:       assertFalse(node1.equals((Object)node0));
686:       assertFalse(boolean3 == boolean2);
687:       assertTrue(boolean3 == boolean0);
688:       assertTrue(boolean3 == boolean1);
689:       assertEquals(32, Node.INCRDECR_PROP);
690:       assertEquals(46, Node.IS_NAMESPACE);
691:       assertEquals(37, Node.OPT_ARG_NAME);
692:       assertEquals(1, Node.DECR_FLAG);
693:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
694:       assertEquals(56, Node.CHANGE_TIME);
695:       assertEquals(49, Node.DIRECT_EVAL);
696:       assertEquals(54, Node.SLASH_V);
697:       assertEquals(51, Node.STATIC_SOURCE_FILE);
698:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
699:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
700:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
701:       assertEquals(12, Node.COLUMN_BITS);
702:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
703:       assertEquals(4095, Node.COLUMN_MASK);
704:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
705:       assertEquals(55, Node.INFERRED_FUNCTION);
706:       assertEquals(48, Node.DIRECTIVES);
707:       assertEquals(39, Node.EMPTY_BLOCK);
708:       assertEquals(43, Node.IS_CONSTANT_NAME);
709:       assertEquals(50, Node.FREE_CALL);
710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
711:       assertEquals(8, Node.FLAG_NO_THROWS);
712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
713:       assertEquals(36, Node.QUOTED_PROP);
714:       assertEquals(57, Node.REFLECTED_OBJECT);
715:       assertEquals(52, Node.LENGTH);
716:       assertEquals(40, Node.ORIGINALNAME_PROP);
717:       assertEquals(29, Node.JSDOC_INFO_PROP);
718:       assertEquals(53, Node.INPUT_ID);
719:       assertEquals(15, Node.NO_SIDE_EFFECTS);
720:       assertEquals(30, Node.VAR_ARGS_NAME);
721:       assertEquals(57, Node.LAST_PROP);
722:       assertEquals(2, Node.POST_FLAG);
723:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
724:       assertEquals(47, Node.IS_DISPATCHER);
725:       assertEquals(43, Node.IS_CONSTANT_NAME);
726:       assertEquals(36, Node.QUOTED_PROP);
727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
729:       assertEquals(53, Node.INPUT_ID);
730:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
731:       assertEquals(4095, Node.COLUMN_MASK);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(37, Node.OPT_ARG_NAME);
734:       assertEquals(56, Node.CHANGE_TIME);
735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
736:       assertEquals(48, Node.DIRECTIVES);
737:       assertEquals(8, Node.FLAG_NO_THROWS);
738:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
739:       assertEquals(29, Node.JSDOC_INFO_PROP);
740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
741:       assertEquals(39, Node.EMPTY_BLOCK);
742:       assertEquals(55, Node.INFERRED_FUNCTION);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(57, Node.LAST_PROP);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(1, Node.DECR_FLAG);
748:       assertEquals(15, Node.NO_SIDE_EFFECTS);
749:       assertEquals(12, Node.COLUMN_BITS);
750:       assertEquals(32, Node.INCRDECR_PROP);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
753:       assertEquals(2, Node.POST_FLAG);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(40, Node.ORIGINALNAME_PROP);
757:       assertEquals(51, Node.STATIC_SOURCE_FILE);
758:       assertEquals(50, Node.FREE_CALL);
759:       assertEquals(46, Node.IS_NAMESPACE);
760:       assertEquals(54, Node.SLASH_V);
761:       
762:       boolean boolean4 = node0.isAssignAdd();
763:       assertFalse(boolean4);
764:       assertFalse(node0.isCast());
765:       assertFalse(node0.isGetElem());
766:       assertFalse(node0.hasOneChild());
767:       assertFalse(node0.isLabelName());
768:       assertFalse(node0.isExprResult());
769:       assertFalse(node0.isLabel());
770:       assertFalse(node0.isReturn());
771:       assertFalse(node0.hasChildren());
772:       assertFalse(node0.isDec());
773:       assertFalse(node0.isAssign());
774:       assertFalse(node0.isTypeOf());
775:       assertFalse(node0.isWith());
776:       assertFalse(node0.hasMoreThanOneChild());
777:       assertFalse(node0.isObjectLit());
778:       assertFalse(node0.isAnd());
779:       assertFalse(node0.isContinue());
780:       assertFalse(node0.isWhile());
781:       assertEquals((-1), node0.getSourcePosition());
782:       assertFalse(node0.isScript());
783:       assertFalse(node0.isGetProp());
784:       assertFalse(node0.isNot());
785:       assertFalse(node0.isNumber());
786:       assertFalse(node0.isCall());
787:       assertFalse(node0.isStringKey());
788:       assertFalse(node0.isVar());
789:       assertFalse(node0.isBreak());
790:       assertFalse(node0.isName());
791:       assertFalse(node0.isComma());
792:       assertEquals(0, node0.getChildCount());
793:       assertFalse(node0.isDo());
794:       assertFalse(node0.isAssignAdd());
795:       assertFalse(node0.isDefaultCase());
796:       assertFalse(node0.isTrue());
797:       assertFalse(node0.isNull());
798:       assertFalse(node0.isNew());
799:       assertEquals(21, node0.getType());
800:       assertFalse(node0.isOr());
801:       assertFalse(node0.isFor());
802:       assertFalse(node0.isEmpty());
803:       assertFalse(node0.isArrayLit());
804:       assertFalse(node0.isDelProp());
805:       assertFalse(node0.isTry());
806:       assertFalse(node0.isIf());
807:       assertFalse(node0.isVoid());
808:       assertFalse(node0.isFunction());
809:       assertFalse(node0.isRegExp());
810:       assertFalse(node0.isCase());
811:       assertFalse(node0.isSwitch());
812:       assertEquals((-1), node0.getCharno());
813:       assertFalse(node0.isDebugger());
814:       assertFalse(node0.isParamList());
815:       assertFalse(node0.isGetterDef());
816:       assertFalse(node0.isString());
817:       assertTrue(node0.isAdd());
818:       assertFalse(node0.isThrow());
819:       assertFalse(node0.isHook());
820:       assertFalse(node0.isBlock());
821:       assertFalse(node0.isThis());
822:       assertFalse(node0.isInstanceOf());
823:       assertFalse(node0.isFalse());
824:       assertFalse(node0.isCatch());
825:       assertEquals((-1), node0.getLineno());
826:       assertFalse(node0.isNE());
827:       assertFalse(node0.isInc());
828:       assertFalse(node0.isSetterDef());
829:       assertFalse(node0.isIn());
830:       assertFalse(node0.equals((Object)node1));
831:       assertTrue(boolean4 == boolean1);
832:       assertFalse(boolean4 == boolean2);
833:       assertTrue(boolean4 == boolean0);
834:       assertTrue(boolean4 == boolean3);
835:       assertEquals(32, Node.INCRDECR_PROP);
836:       assertEquals(46, Node.IS_NAMESPACE);
837:       assertEquals(37, Node.OPT_ARG_NAME);
838:       assertEquals(1, Node.DECR_FLAG);
839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
840:       assertEquals(56, Node.CHANGE_TIME);
841:       assertEquals(49, Node.DIRECT_EVAL);
842:       assertEquals(54, Node.SLASH_V);
843:       assertEquals(51, Node.STATIC_SOURCE_FILE);
844:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
845:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
846:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
847:       assertEquals(12, Node.COLUMN_BITS);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(4095, Node.COLUMN_MASK);
850:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
851:       assertEquals(55, Node.INFERRED_FUNCTION);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(39, Node.EMPTY_BLOCK);
854:       assertEquals(43, Node.IS_CONSTANT_NAME);
855:       assertEquals(50, Node.FREE_CALL);
856:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
859:       assertEquals(36, Node.QUOTED_PROP);
860:       assertEquals(57, Node.REFLECTED_OBJECT);
861:       assertEquals(52, Node.LENGTH);
862:       assertEquals(40, Node.ORIGINALNAME_PROP);
863:       assertEquals(29, Node.JSDOC_INFO_PROP);
864:       assertEquals(53, Node.INPUT_ID);
865:       assertEquals(15, Node.NO_SIDE_EFFECTS);
866:       assertEquals(30, Node.VAR_ARGS_NAME);
867:       assertEquals(57, Node.LAST_PROP);
868:       assertEquals(2, Node.POST_FLAG);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       
872:       node0.addSuppression((String) null);
873:       assertFalse(node0.isCast());
874:       assertFalse(node0.isGetElem());
875:       assertFalse(node0.hasOneChild());
876:       assertFalse(node0.isLabelName());
877:       assertFalse(node0.isExprResult());
878:       assertFalse(node0.isLabel());
879:       assertFalse(node0.isReturn());
880:       assertFalse(node0.hasChildren());
881:       assertFalse(node0.isDec());
882:       assertFalse(node0.isAssign());
883:       assertFalse(node0.isTypeOf());
884:       assertFalse(node0.isWith());
885:       assertFalse(node0.hasMoreThanOneChild());
886:       assertFalse(node0.isObjectLit());
887:       assertFalse(node0.isAnd());
888:       assertFalse(node0.isContinue());
889:       assertFalse(node0.isWhile());
890:       assertEquals((-1), node0.getSourcePosition());
891:       assertFalse(node0.isScript());
892:       assertFalse(node0.isGetProp());
893:       assertFalse(node0.isNot());
894:       assertFalse(node0.isNumber());
895:       assertFalse(node0.isCall());
896:       assertFalse(node0.isStringKey());
897:       assertFalse(node0.isVar());
898:       assertFalse(node0.isBreak());
899:       assertFalse(node0.isName());
900:       assertFalse(node0.isComma());
901:       assertEquals(0, node0.getChildCount());
902:       assertFalse(node0.isDo());
903:       assertFalse(node0.isAssignAdd());
904:       assertFalse(node0.isDefaultCase());
905:       assertFalse(node0.isTrue());
906:       assertFalse(node0.isNull());
907:       assertFalse(node0.isNew());
908:       assertEquals(21, node0.getType());
909:       assertFalse(node0.isOr());
910:       assertFalse(node0.isFor());
911:       assertFalse(node0.isEmpty());
912:       assertFalse(node0.isArrayLit());
913:       assertFalse(node0.isDelProp());
914:       assertFalse(node0.isTry());
915:       assertFalse(node0.isIf());
916:       assertFalse(node0.isVoid());
917:       assertFalse(node0.isFunction());
918:       assertFalse(node0.isRegExp());
919:       assertFalse(node0.isCase());
920:       assertFalse(node0.isSwitch());
921:       assertEquals((-1), node0.getCharno());
922:       assertFalse(node0.isDebugger());
923:       assertFalse(node0.isParamList());
924:       assertFalse(node0.isGetterDef());
925:       assertFalse(node0.isString());
926:       assertTrue(node0.isAdd());
927:       assertFalse(node0.isThrow());
928:       assertFalse(node0.isHook());
929:       assertFalse(node0.isBlock());
930:       assertFalse(node0.isThis());
931:       assertFalse(node0.isInstanceOf());
932:       assertFalse(node0.isFalse());
933:       assertFalse(node0.isCatch());
934:       assertEquals((-1), node0.getLineno());
935:       assertFalse(node0.isNE());
936:       assertFalse(node0.isInc());
937:       assertFalse(node0.isSetterDef());
938:       assertFalse(node0.isIn());
939:       assertFalse(node0.equals((Object)node1));
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(46, Node.IS_NAMESPACE);
942:       assertEquals(37, Node.OPT_ARG_NAME);
943:       assertEquals(1, Node.DECR_FLAG);
944:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(49, Node.DIRECT_EVAL);
947:       assertEquals(54, Node.SLASH_V);
948:       assertEquals(51, Node.STATIC_SOURCE_FILE);
949:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
950:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
952:       assertEquals(12, Node.COLUMN_BITS);
953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
954:       assertEquals(4095, Node.COLUMN_MASK);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(55, Node.INFERRED_FUNCTION);
957:       assertEquals(48, Node.DIRECTIVES);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(43, Node.IS_CONSTANT_NAME);
960:       assertEquals(50, Node.FREE_CALL);
961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
962:       assertEquals(8, Node.FLAG_NO_THROWS);
963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
964:       assertEquals(36, Node.QUOTED_PROP);
965:       assertEquals(57, Node.REFLECTED_OBJECT);
966:       assertEquals(52, Node.LENGTH);
967:       assertEquals(40, Node.ORIGINALNAME_PROP);
968:       assertEquals(29, Node.JSDOC_INFO_PROP);
969:       assertEquals(53, Node.INPUT_ID);
970:       assertEquals(15, Node.NO_SIDE_EFFECTS);
971:       assertEquals(30, Node.VAR_ARGS_NAME);
972:       assertEquals(57, Node.LAST_PROP);
973:       assertEquals(2, Node.POST_FLAG);
974:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
975:       assertEquals(47, Node.IS_DISPATCHER);
976:       
977:       Iterable<Node> iterable0 = node1.children();
978:       assertFalse(node1.isSetterDef());
979:       assertFalse(node1.isParamList());
980:       assertFalse(node1.isStringKey());
981:       assertFalse(node1.isNull());
982:       assertFalse(node1.isTry());
983:       assertFalse(node1.isTrue());
984:       assertFalse(node1.isBlock());
985:       assertFalse(node1.isVoid());
986:       assertFalse(node1.isName());
987:       assertFalse(node1.isFor());
988:       assertEquals(39, node1.getType());
989:       assertFalse(node1.isWhile());
990:       assertFalse(node1.isCall());
991:       assertFalse(node1.isRegExp());
992:       assertFalse(node1.isCatch());
993:       assertFalse(node1.hasMoreThanOneChild());
994:       assertFalse(node1.isOr());
995:       assertFalse(node1.isLabel());
996:       assertFalse(node1.isAssignAdd());
997:       assertFalse(node1.isDelProp());
998:       assertFalse(node1.isEmpty());
999:       assertFalse(node1.isDo());
1000:       assertFalse(node1.isCase());
1001:       assertFalse(node1.isGetterDef());
1002:       assertFalse(node1.isAdd());
1003:       assertFalse(node1.isNew());
1004:       assertEquals((-1), node1.getCharno());
1005:       assertFalse(node1.isVar());
1006:       assertFalse(node1.isArrayLit());
1007:       assertFalse(node1.isDefaultCase());
1008:       assertFalse(node1.isSwitch());
1009:       assertFalse(node1.isLabelName());
1010:       assertEquals(0, node1.getChildCount());
1011:       assertFalse(node1.isGetProp());
1012:       assertFalse(node1.isThis());
1013:       assertFalse(node1.isAnd());
1014:       assertFalse(node1.isNot());
1015:       assertFalse(node1.isScript());
1016:       assertFalse(node1.isObjectLit());
1017:       assertFalse(node1.isHook());
1018:       assertFalse(node1.isExprResult());
1019:       assertFalse(node1.hasOneChild());
1020:       assertFalse(node1.isAssign());
1021:       assertFalse(node1.isBreak());
1022:       assertFalse(node1.hasChildren());
1023:       assertFalse(node1.isGetElem());
1024:       assertFalse(node1.isComma());
1025:       assertFalse(node1.isDec());
1026:       assertFalse(node1.isInstanceOf());
1027:       assertFalse(node1.isTypeOf());
1028:       assertFalse(node1.isWith());
1029:       assertTrue(node1.isNumber());
1030:       assertEquals((-1), node1.getLineno());
1031:       assertFalse(node1.isReturn());
1032:       assertFalse(node1.isNE());
1033:       assertFalse(node1.isIf());
1034:       assertFalse(node1.isString());
1035:       assertEquals((-1), node1.getSourcePosition());
1036:       assertFalse(node1.isIn());
1037:       assertFalse(node1.isDebugger());
1038:       assertFalse(node1.isInc());
1039:       assertFalse(node1.isThrow());
1040:       assertFalse(node1.isCast());
1041:       assertFalse(node1.isContinue());
1042:       assertFalse(node1.isFunction());
1043:       assertFalse(node1.isFalse());
1044:       assertFalse(node1.equals((Object)node0));
1045:       assertEquals(43, Node.IS_CONSTANT_NAME);
1046:       assertEquals(36, Node.QUOTED_PROP);
1047:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1051:       assertEquals(4095, Node.COLUMN_MASK);
1052:       assertEquals(47, Node.IS_DISPATCHER);
1053:       assertEquals(37, Node.OPT_ARG_NAME);
1054:       assertEquals(56, Node.CHANGE_TIME);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(48, Node.DIRECTIVES);
1057:       assertEquals(8, Node.FLAG_NO_THROWS);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(29, Node.JSDOC_INFO_PROP);
1060:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1061:       assertEquals(39, Node.EMPTY_BLOCK);
1062:       assertEquals(55, Node.INFERRED_FUNCTION);
1063:       assertEquals(52, Node.LENGTH);
1064:       assertEquals(57, Node.REFLECTED_OBJECT);
1065:       assertEquals(57, Node.LAST_PROP);
1066:       assertEquals(49, Node.DIRECT_EVAL);
1067:       assertEquals(1, Node.DECR_FLAG);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(32, Node.INCRDECR_PROP);
1071:       assertEquals(30, Node.VAR_ARGS_NAME);
1072:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1073:       assertEquals(2, Node.POST_FLAG);
1074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(40, Node.ORIGINALNAME_PROP);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(46, Node.IS_NAMESPACE);
1080:       assertEquals(54, Node.SLASH_V);
1081:       assertNotNull(iterable0);
1082:       assertFalse(iterable0.contains(node1));
1083:       
1084:       Node node2 = new Node(4, node1, node1, (-4127), (-399));
1085:       assertFalse(node1.isSetterDef());
1086:       assertFalse(node1.isParamList());
1087:       assertFalse(node1.isStringKey());
1088:       assertFalse(node1.isNull());
1089:       assertFalse(node1.isTry());
1090:       assertFalse(node1.isTrue());
1091:       assertFalse(node1.isBlock());
1092:       assertFalse(node1.isVoid());
1093:       assertFalse(node1.isName());
1094:       assertFalse(node1.isFor());
1095:       assertEquals(39, node1.getType());
1096:       assertFalse(node1.isWhile());
1097:       assertFalse(node1.isCall());
1098:       assertFalse(node1.isRegExp());
1099:       assertFalse(node1.isCatch());
1100:       assertFalse(node1.hasMoreThanOneChild());
1101:       assertFalse(node1.isOr());
1102:       assertFalse(node1.isLabel());
1103:       assertFalse(node1.isAssignAdd());
1104:       assertFalse(node1.isDelProp());
1105:       assertFalse(node1.isEmpty());
1106:       assertFalse(node1.isDo());
1107:       assertFalse(node1.isCase());
1108:       assertFalse(node1.isGetterDef());
1109:       assertFalse(node1.isAdd());
1110:       assertFalse(node1.isNew());
1111:       assertEquals((-1), node1.getCharno());
1112:       assertFalse(node1.isVar());
1113:       assertFalse(node1.isArrayLit());
1114:       assertFalse(node1.isDefaultCase());
1115:       assertFalse(node1.isSwitch());
1116:       assertFalse(node1.isLabelName());
1117:       assertEquals(0, node1.getChildCount());
1118:       assertFalse(node1.isGetProp());
1119:       assertFalse(node1.isThis());
1120:       assertFalse(node1.isAnd());
1121:       assertFalse(node1.isNot());
1122:       assertFalse(node1.isScript());
1123:       assertFalse(node1.isObjectLit());
1124:       assertFalse(node1.isHook());
1125:       assertFalse(node1.isExprResult());
1126:       assertFalse(node1.hasOneChild());
1127:       assertFalse(node1.isAssign());
1128:       assertFalse(node1.isBreak());
1129:       assertFalse(node1.hasChildren());
1130:       assertFalse(node1.isGetElem());
1131:       assertFalse(node1.isComma());
1132:       assertFalse(node1.isDec());
1133:       assertFalse(node1.isInstanceOf());
1134:       assertFalse(node1.isTypeOf());
1135:       assertFalse(node1.isWith());
1136:       assertTrue(node1.isNumber());
1137:       assertEquals((-1), node1.getLineno());
1138:       assertFalse(node1.isReturn());
1139:       assertFalse(node1.isNE());
1140:       assertFalse(node1.isIf());
1141:       assertFalse(node1.isString());
1142:       assertEquals((-1), node1.getSourcePosition());
1143:       assertFalse(node1.isIn());
1144:       assertFalse(node1.isDebugger());
1145:       assertFalse(node1.isInc());
1146:       assertFalse(node1.isThrow());
1147:       assertFalse(node1.isCast());
1148:       assertFalse(node1.isContinue());
1149:       assertFalse(node1.isFunction());
1150:       assertFalse(node1.isFalse());
1151:       assertEquals((-1), node2.getSourcePosition());
1152:       assertFalse(node2.isTypeOf());
1153:       assertFalse(node2.isNumber());
1154:       assertFalse(node2.isDec());
1155:       assertFalse(node2.isAssign());
1156:       assertFalse(node2.isLabelName());
1157:       assertFalse(node2.isGetElem());
1158:       assertFalse(node2.isCast());
1159:       assertFalse(node2.hasMoreThanOneChild());
1160:       assertFalse(node2.isLabel());
1161:       assertFalse(node2.isAssignAdd());
1162:       assertFalse(node2.isWhile());
1163:       assertFalse(node2.isDo());
1164:       assertFalse(node2.isAdd());
1165:       assertFalse(node2.isNew());
1166:       assertFalse(node2.isWith());
1167:       assertFalse(node2.isExprResult());
1168:       assertEquals((-1), node2.getLineno());
1169:       assertFalse(node2.isOr());
1170:       assertFalse(node2.isName());
1171:       assertFalse(node2.isNull());
1172:       assertFalse(node2.isHook());
1173:       assertFalse(node2.isInstanceOf());
1174:       assertFalse(node2.isBlock());
1175:       assertFalse(node2.isThis());
1176:       assertFalse(node2.isVar());
1177:       assertFalse(node2.isScript());
1178:       assertFalse(node2.isSwitch());
1179:       assertFalse(node2.isCase());
1180:       assertFalse(node2.isArrayLit());
1181:       assertEquals((-1), node2.getCharno());
1182:       assertFalse(node2.isParamList());
1183:       assertFalse(node2.isStringKey());
1184:       assertFalse(node2.isIf());
1185:       assertFalse(node2.isDelProp());
1186:       assertFalse(node2.isGetterDef());
1187:       assertFalse(node2.isEmpty());
1188:       assertTrue(node2.hasChildren());
1189:       assertEquals(1, node2.getChildCount());
1190:       assertFalse(node2.isTry());
1191:       assertFalse(node2.isFor());
1192:       assertTrue(node2.hasOneChild());
1193:       assertFalse(node2.isRegExp());
1194:       assertEquals(4, node2.getType());
1195:       assertFalse(node2.isDefaultCase());
1196:       assertFalse(node2.isVoid());
1197:       assertTrue(node2.isReturn());
1198:       assertFalse(node2.isInc());
1199:       assertFalse(node2.isCatch());
1200:       assertFalse(node2.isIn());
1201:       assertFalse(node2.isTrue());
1202:       assertFalse(node2.isNE());
1203:       assertFalse(node2.isBreak());
1204:       assertFalse(node2.isSetterDef());
1205:       assertFalse(node2.isComma());
1206:       assertFalse(node2.isFalse());
1207:       assertFalse(node2.isGetProp());
1208:       assertFalse(node2.isCall());
1209:       assertFalse(node2.isThrow());
1210:       assertFalse(node2.isFunction());
1211:       assertFalse(node2.isDebugger());
1212:       assertFalse(node2.isNot());
1213:       assertFalse(node2.isContinue());
1214:       assertFalse(node2.isString());
1215:       assertFalse(node2.isObjectLit());
1216:       assertFalse(node2.isAnd());
1217:       assertFalse(node1.equals((Object)node0));
1218:       assertFalse(node2.equals((Object)node1));
1219:       assertFalse(node2.equals((Object)node0));
1220:       assertEquals(43, Node.IS_CONSTANT_NAME);
1221:       assertEquals(36, Node.QUOTED_PROP);
1222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1224:       assertEquals(53, Node.INPUT_ID);
1225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1226:       assertEquals(4095, Node.COLUMN_MASK);
1227:       assertEquals(47, Node.IS_DISPATCHER);
1228:       assertEquals(37, Node.OPT_ARG_NAME);
1229:       assertEquals(56, Node.CHANGE_TIME);
1230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1231:       assertEquals(48, Node.DIRECTIVES);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1234:       assertEquals(29, Node.JSDOC_INFO_PROP);
1235:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1236:       assertEquals(39, Node.EMPTY_BLOCK);
1237:       assertEquals(55, Node.INFERRED_FUNCTION);
1238:       assertEquals(52, Node.LENGTH);
1239:       assertEquals(57, Node.REFLECTED_OBJECT);
1240:       assertEquals(57, Node.LAST_PROP);
1241:       assertEquals(49, Node.DIRECT_EVAL);
1242:       assertEquals(1, Node.DECR_FLAG);
1243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1244:       assertEquals(12, Node.COLUMN_BITS);
1245:       assertEquals(32, Node.INCRDECR_PROP);
1246:       assertEquals(30, Node.VAR_ARGS_NAME);
1247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1248:       assertEquals(2, Node.POST_FLAG);
1249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1251:       assertEquals(40, Node.ORIGINALNAME_PROP);
1252:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1253:       assertEquals(50, Node.FREE_CALL);
1254:       assertEquals(46, Node.IS_NAMESPACE);
1255:       assertEquals(54, Node.SLASH_V);
1256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1257:       assertEquals(12, Node.COLUMN_BITS);
1258:       assertEquals(30, Node.VAR_ARGS_NAME);
1259:       assertEquals(46, Node.IS_NAMESPACE);
1260:       assertEquals(54, Node.SLASH_V);
1261:       assertEquals(56, Node.CHANGE_TIME);
1262:       assertEquals(37, Node.OPT_ARG_NAME);
1263:       assertEquals(49, Node.DIRECT_EVAL);
1264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1265:       assertEquals(40, Node.ORIGINALNAME_PROP);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(57, Node.REFLECTED_OBJECT);
1268:       assertEquals(8, Node.FLAG_NO_THROWS);
1269:       assertEquals(47, Node.IS_DISPATCHER);
1270:       assertEquals(2, Node.POST_FLAG);
1271:       assertEquals(53, Node.INPUT_ID);
1272:       assertEquals(52, Node.LENGTH);
1273:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1274:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1275:       assertEquals(39, Node.EMPTY_BLOCK);
1276:       assertEquals(57, Node.LAST_PROP);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(55, Node.INFERRED_FUNCTION);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1282:       assertEquals(43, Node.IS_CONSTANT_NAME);
1283:       assertEquals(48, Node.DIRECTIVES);
1284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1286:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1290:       assertEquals(32, Node.INCRDECR_PROP);
1291:       assertEquals(1, Node.DECR_FLAG);
1292:       assertNotNull(node2);
1293:       
1294:       Node node3 = node2.getAncestor(2247);
1295:       assertFalse(node1.isSetterDef());
1296:       assertFalse(node1.isParamList());
1297:       assertFalse(node1.isStringKey());
1298:       assertFalse(node1.isNull());
1299:       assertFalse(node1.isTry());
1300:       assertFalse(node1.isTrue());
1301:       assertFalse(node1.isBlock());
1302:       assertFalse(node1.isVoid());
1303:       assertFalse(node1.isName());
1304:       assertFalse(node1.isFor());
1305:       assertEquals(39, node1.getType());
1306:       assertFalse(node1.isWhile());
1307:       assertFalse(node1.isCall());
1308:       assertFalse(node1.isRegExp());
1309:       assertFalse(node1.isCatch());
1310:       assertFalse(node1.hasMoreThanOneChild());
1311:       assertFalse(node1.isOr());
1312:       assertFalse(node1.isLabel());
1313:       assertFalse(node1.isAssignAdd());
1314:       assertFalse(node1.isDelProp());
1315:       assertFalse(node1.isEmpty());
1316:       assertFalse(node1.isDo());
1317:       assertFalse(node1.isCase());
1318:       assertFalse(node1.isGetterDef());
1319:       assertFalse(node1.isAdd());
1320:       assertFalse(node1.isNew());
1321:       assertEquals((-1), node1.getCharno());
1322:       assertFalse(node1.isVar());
1323:       assertFalse(node1.isArrayLit());
1324:       assertFalse(node1.isDefaultCase());
1325:       assertFalse(node1.isSwitch());
1326:       assertFalse(node1.isLabelName());
1327:       assertEquals(0, node1.getChildCount());
1328:       assertFalse(node1.isGetProp());
1329:       assertFalse(node1.isThis());
1330:       assertFalse(node1.isAnd());
1331:       assertFalse(node1.isNot());
1332:       assertFalse(node1.isScript());
1333:       assertFalse(node1.isObjectLit());
1334:       assertFalse(node1.isHook());
1335:       assertFalse(node1.isExprResult());
1336:       assertFalse(node1.hasOneChild());
1337:       assertFalse(node1.isAssign());
1338:       assertFalse(node1.isBreak());
1339:       assertFalse(node1.hasChildren());
1340:       assertFalse(node1.isGetElem());
1341:       assertFalse(node1.isComma());
1342:       assertFalse(node1.isDec());
1343:       assertFalse(node1.isInstanceOf());
1344:       assertFalse(node1.isTypeOf());
1345:       assertFalse(node1.isWith());
1346:       assertTrue(node1.isNumber());
1347:       assertEquals((-1), node1.getLineno());
1348:       assertFalse(node1.isReturn());
1349:       assertFalse(node1.isNE());
1350:       assertFalse(node1.isIf());
1351:       assertFalse(node1.isString());
1352:       assertEquals((-1), node1.getSourcePosition());
1353:       assertFalse(node1.isIn());
1354:       assertFalse(node1.isDebugger());
1355:       assertFalse(node1.isInc());
1356:       assertFalse(node1.isThrow());
1357:       assertFalse(node1.isCast());
1358:       assertFalse(node1.isContinue());
1359:       assertFalse(node1.isFunction());
1360:       assertFalse(node1.isFalse());
1361:       assertEquals((-1), node2.getSourcePosition());
1362:       assertFalse(node2.isTypeOf());
1363:       assertFalse(node2.isNumber());
1364:       assertFalse(node2.isDec());
1365:       assertFalse(node2.isAssign());
1366:       assertFalse(node2.isLabelName());
1367:       assertFalse(node2.isGetElem());
1368:       assertFalse(node2.isCast());
1369:       assertFalse(node2.hasMoreThanOneChild());
1370:       assertFalse(node2.isLabel());
1371:       assertFalse(node2.isAssignAdd());
1372:       assertFalse(node2.isWhile());
1373:       assertFalse(node2.isDo());
1374:       assertFalse(node2.isAdd());
1375:       assertFalse(node2.isNew());
1376:       assertFalse(node2.isWith());
1377:       assertFalse(node2.isExprResult());
1378:       assertEquals((-1), node2.getLineno());
1379:       assertFalse(node2.isOr());
1380:       assertFalse(node2.isName());
1381:       assertFalse(node2.isNull());
1382:       assertFalse(node2.isHook());
1383:       assertFalse(node2.isInstanceOf());
1384:       assertFalse(node2.isBlock());
1385:       assertFalse(node2.isThis());
1386:       assertFalse(node2.isVar());
1387:       assertFalse(node2.isScript());
1388:       assertFalse(node2.isSwitch());
1389:       assertFalse(node2.isCase());
1390:       assertFalse(node2.isArrayLit());
1391:       assertEquals((-1), node2.getCharno());
1392:       assertFalse(node2.isParamList());
1393:       assertFalse(node2.isStringKey());
1394:       assertFalse(node2.isIf());
1395:       assertFalse(node2.isDelProp());
1396:       assertFalse(node2.isGetterDef());
1397:       assertFalse(node2.isEmpty());
1398:       assertTrue(node2.hasChildren());
1399:       assertEquals(1, node2.getChildCount());
1400:       assertFalse(node2.isTry());
1401:       assertFalse(node2.isFor());
1402:       assertTrue(node2.hasOneChild());
1403:       assertFalse(node2.isRegExp());
1404:       assertEquals(4, node2.getType());
1405:       assertFalse(node2.isDefaultCase());
1406:       assertFalse(node2.isVoid());
1407:       assertTrue(node2.isReturn());
1408:       assertFalse(node2.isInc());
1409:       assertFalse(node2.isCatch());
1410:       assertFalse(node2.isIn());
1411:       assertFalse(node2.isTrue());
1412:       assertFalse(node2.isNE());
1413:       assertFalse(node2.isBreak());
1414:       assertFalse(node2.isSetterDef());
1415:       assertFalse(node2.isComma());
1416:       assertFalse(node2.isFalse());
1417:       assertFalse(node2.isGetProp());
1418:       assertFalse(node2.isCall());
1419:       assertFalse(node2.isThrow());
1420:       assertFalse(node2.isFunction());
1421:       assertFalse(node2.isDebugger());
1422:       assertFalse(node2.isNot());
1423:       assertFalse(node2.isContinue());
1424:       assertFalse(node2.isString());
1425:       assertFalse(node2.isObjectLit());
1426:       assertFalse(node2.isAnd());
1427:       assertFalse(node1.equals((Object)node0));
1428:       assertFalse(node1.equals((Object)node2));
1429:       assertFalse(node2.equals((Object)node1));
1430:       assertFalse(node2.equals((Object)node0));
1431:       assertEquals(43, Node.IS_CONSTANT_NAME);
1432:       assertEquals(36, Node.QUOTED_PROP);
1433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1435:       assertEquals(53, Node.INPUT_ID);
1436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1437:       assertEquals(4095, Node.COLUMN_MASK);
1438:       assertEquals(47, Node.IS_DISPATCHER);
1439:       assertEquals(37, Node.OPT_ARG_NAME);
1440:       assertEquals(56, Node.CHANGE_TIME);
1441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1442:       assertEquals(48, Node.DIRECTIVES);
1443:       assertEquals(8, Node.FLAG_NO_THROWS);
1444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1445:       assertEquals(29, Node.JSDOC_INFO_PROP);
1446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1447:       assertEquals(39, Node.EMPTY_BLOCK);
1448:       assertEquals(55, Node.INFERRED_FUNCTION);
1449:       assertEquals(52, Node.LENGTH);
1450:       assertEquals(57, Node.REFLECTED_OBJECT);
1451:       assertEquals(57, Node.LAST_PROP);
1452:       assertEquals(49, Node.DIRECT_EVAL);
1453:       assertEquals(1, Node.DECR_FLAG);
1454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1455:       assertEquals(12, Node.COLUMN_BITS);
1456:       assertEquals(32, Node.INCRDECR_PROP);
1457:       assertEquals(30, Node.VAR_ARGS_NAME);
1458:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1459:       assertEquals(2, Node.POST_FLAG);
1460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1462:       assertEquals(40, Node.ORIGINALNAME_PROP);
1463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1464:       assertEquals(50, Node.FREE_CALL);
1465:       assertEquals(46, Node.IS_NAMESPACE);
1466:       assertEquals(54, Node.SLASH_V);
1467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1468:       assertEquals(12, Node.COLUMN_BITS);
1469:       assertEquals(30, Node.VAR_ARGS_NAME);
1470:       assertEquals(46, Node.IS_NAMESPACE);
1471:       assertEquals(54, Node.SLASH_V);
1472:       assertEquals(56, Node.CHANGE_TIME);
1473:       assertEquals(37, Node.OPT_ARG_NAME);
1474:       assertEquals(49, Node.DIRECT_EVAL);
1475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1476:       assertEquals(40, Node.ORIGINALNAME_PROP);
1477:       assertEquals(29, Node.JSDOC_INFO_PROP);
1478:       assertEquals(57, Node.REFLECTED_OBJECT);
1479:       assertEquals(8, Node.FLAG_NO_THROWS);
1480:       assertEquals(47, Node.IS_DISPATCHER);
1481:       assertEquals(2, Node.POST_FLAG);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(52, Node.LENGTH);
1484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1485:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1486:       assertEquals(39, Node.EMPTY_BLOCK);
1487:       assertEquals(57, Node.LAST_PROP);
1488:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1489:       assertEquals(55, Node.INFERRED_FUNCTION);
1490:       assertEquals(36, Node.QUOTED_PROP);
1491:       assertEquals(4095, Node.COLUMN_MASK);
1492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1493:       assertEquals(43, Node.IS_CONSTANT_NAME);
1494:       assertEquals(48, Node.DIRECTIVES);
1495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1498:       assertEquals(50, Node.FREE_CALL);
1499:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1501:       assertEquals(32, Node.INCRDECR_PROP);
1502:       assertEquals(1, Node.DECR_FLAG);
1503:       assertNull(node3);
1504:       
1505:       Node node4 = Node.newNumber((-2963.0));
1506:       assertFalse(node4.isOr());
1507:       assertFalse(node4.isReturn());
1508:       assertEquals((-1), node4.getLineno());
1509:       assertFalse(node4.isLabel());
1510:       assertFalse(node4.isAssignAdd());
1511:       assertFalse(node4.isDo());
1512:       assertEquals((-1), node4.getSourcePosition());
1513:       assertFalse(node4.isAdd());
1514:       assertFalse(node4.isNew());
1515:       assertFalse(node4.isVar());
1516:       assertFalse(node4.isLabelName());
1517:       assertFalse(node4.isCast());
1518:       assertFalse(node4.isContinue());
1519:       assertFalse(node4.isComma());
1520:       assertFalse(node4.isGetProp());
1521:       assertFalse(node4.isNull());
1522:       assertFalse(node4.isAnd());
1523:       assertFalse(node4.isNot());
1524:       assertFalse(node4.isObjectLit());
1525:       assertFalse(node4.isVoid());
1526:       assertFalse(node4.isTrue());
1527:       assertFalse(node4.isExprResult());
1528:       assertFalse(node4.isWhile());
1529:       assertFalse(node4.isGetElem());
1530:       assertFalse(node4.isName());
1531:       assertFalse(node4.isAssign());
1532:       assertFalse(node4.isCall());
1533:       assertFalse(node4.isBreak());
1534:       assertFalse(node4.hasChildren());
1535:       assertFalse(node4.isTypeOf());
1536:       assertFalse(node4.isDec());
1537:       assertTrue(node4.isNumber());
1538:       assertFalse(node4.isNE());
1539:       assertFalse(node4.isDelProp());
1540:       assertFalse(node4.isIf());
1541:       assertFalse(node4.isCase());
1542:       assertFalse(node4.isEmpty());
1543:       assertFalse(node4.isGetterDef());
1544:       assertFalse(node4.isString());
1545:       assertFalse(node4.isIn());
1546:       assertFalse(node4.isInc());
1547:       assertFalse(node4.isDebugger());
1548:       assertEquals((-1), node4.getCharno());
1549:       assertFalse(node4.isArrayLit());
1550:       assertFalse(node4.isDefaultCase());
1551:       assertFalse(node4.isSwitch());
1552:       assertFalse(node4.isFalse());
1553:       assertFalse(node4.isThrow());
1554:       assertEquals(0, node4.getChildCount());
1555:       assertFalse(node4.isFunction());
1556:       assertFalse(node4.isThis());
1557:       assertFalse(node4.isSetterDef());
1558:       assertFalse(node4.isParamList());
1559:       assertFalse(node4.isStringKey());
1560:       assertFalse(node4.isScript());
1561:       assertFalse(node4.isBlock());
1562:       assertFalse(node4.isTry());
1563:       assertFalse(node4.isHook());
1564:       assertFalse(node4.hasOneChild());
1565:       assertFalse(node4.isFor());
1566:       assertEquals(39, node4.getType());
1567:       assertFalse(node4.isRegExp());
1568:       assertFalse(node4.isInstanceOf());
1569:       assertFalse(node4.isCatch());
1570:       assertFalse(node4.isWith());
1571:       assertFalse(node4.hasMoreThanOneChild());
1572:       assertFalse(node4.equals((Object)node0));
1573:       assertFalse(node4.equals((Object)node1));
1574:       assertFalse(node4.equals((Object)node2));
1575:       assertNotSame(node4, node1);
1576:       assertEquals(57, Node.LAST_PROP);
1577:       assertEquals(49, Node.DIRECT_EVAL);
1578:       assertEquals(1, Node.DECR_FLAG);
1579:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1580:       assertEquals(12, Node.COLUMN_BITS);
1581:       assertEquals(32, Node.INCRDECR_PROP);
1582:       assertEquals(30, Node.VAR_ARGS_NAME);
1583:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1584:       assertEquals(2, Node.POST_FLAG);
1585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1586:       assertEquals(40, Node.ORIGINALNAME_PROP);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1589:       assertEquals(46, Node.IS_NAMESPACE);
1590:       assertEquals(50, Node.FREE_CALL);
1591:       assertEquals(54, Node.SLASH_V);
1592:       assertEquals(43, Node.IS_CONSTANT_NAME);
1593:       assertEquals(36, Node.QUOTED_PROP);
1594:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1595:       assertEquals(53, Node.INPUT_ID);
1596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1598:       assertEquals(4095, Node.COLUMN_MASK);
1599:       assertEquals(47, Node.IS_DISPATCHER);
1600:       assertEquals(56, Node.CHANGE_TIME);
1601:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1602:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1603:       assertEquals(8, Node.FLAG_NO_THROWS);
1604:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1605:       assertEquals(29, Node.JSDOC_INFO_PROP);
1606:       assertEquals(48, Node.DIRECTIVES);
1607:       assertEquals(37, Node.OPT_ARG_NAME);
1608:       assertEquals(39, Node.EMPTY_BLOCK);
1609:       assertEquals(57, Node.REFLECTED_OBJECT);
1610:       assertEquals(55, Node.INFERRED_FUNCTION);
1611:       assertEquals(52, Node.LENGTH);
1612:       assertNotNull(node4);
1613:       
1614:       node2.setJSType((JSType) null);
1615:       assertFalse(node1.isSetterDef());
1616:       assertFalse(node1.isParamList());
1617:       assertFalse(node1.isStringKey());
1618:       assertFalse(node1.isNull());
1619:       assertFalse(node1.isTry());
1620:       assertFalse(node1.isTrue());
1621:       assertFalse(node1.isBlock());
1622:       assertFalse(node1.isVoid());
1623:       assertFalse(node1.isName());
1624:       assertFalse(node1.isFor());
1625:       assertEquals(39, node1.getType());
1626:       assertFalse(node1.isWhile());
1627:       assertFalse(node1.isCall());
1628:       assertFalse(node1.isRegExp());
1629:       assertFalse(node1.isCatch());
1630:       assertFalse(node1.hasMoreThanOneChild());
1631:       assertFalse(node1.isOr());
1632:       assertFalse(node1.isLabel());
1633:       assertFalse(node1.isAssignAdd());
1634:       assertFalse(node1.isDelProp());
1635:       assertFalse(node1.isEmpty());
1636:       assertFalse(node1.isDo());
1637:       assertFalse(node1.isCase());
1638:       assertFalse(node1.isGetterDef());
1639:       assertFalse(node1.isAdd());
1640:       assertFalse(node1.isNew());
1641:       assertEquals((-1), node1.getCharno());
1642:       assertFalse(node1.isVar());
1643:       assertFalse(node1.isArrayLit());
1644:       assertFalse(node1.isDefaultCase());
1645:       assertFalse(node1.isSwitch());
1646:       assertFalse(node1.isLabelName());
1647:       assertEquals(0, node1.getChildCount());
1648:       assertFalse(node1.isGetProp());
1649:       assertFalse(node1.isThis());
1650:       assertFalse(node1.isAnd());
1651:       assertFalse(node1.isNot());
1652:       assertFalse(node1.isScript());
1653:       assertFalse(node1.isObjectLit());
1654:       assertFalse(node1.isHook());
1655:       assertFalse(node1.isExprResult());
1656:       assertFalse(node1.hasOneChild());
1657:       assertFalse(node1.isAssign());
1658:       assertFalse(node1.isBreak());
1659:       assertFalse(node1.hasChildren());
1660:       assertFalse(node1.isGetElem());
1661:       assertFalse(node1.isComma());
1662:       assertFalse(node1.isDec());
1663:       assertFalse(node1.isInstanceOf());
1664:       assertFalse(node1.isTypeOf());
1665:       assertFalse(node1.isWith());
1666:       assertTrue(node1.isNumber());
1667:       assertEquals((-1), node1.getLineno());
1668:       assertFalse(node1.isReturn());
1669:       assertFalse(node1.isNE());
1670:       assertFalse(node1.isIf());
1671:       assertFalse(node1.isString());
1672:       assertEquals((-1), node1.getSourcePosition());
1673:       assertFalse(node1.isIn());
1674:       assertFalse(node1.isDebugger());
1675:       assertFalse(node1.isInc());
1676:       assertFalse(node1.isThrow());
1677:       assertFalse(node1.isCast());
1678:       assertFalse(node1.isContinue());
1679:       assertFalse(node1.isFunction());
1680:       assertFalse(node1.isFalse());
1681:       assertEquals((-1), node2.getSourcePosition());
1682:       assertFalse(node2.isTypeOf());
1683:       assertFalse(node2.isNumber());
1684:       assertFalse(node2.isDec());
1685:       assertFalse(node2.isAssign());
1686:       assertFalse(node2.isLabelName());
1687:       assertFalse(node2.isGetElem());
1688:       assertFalse(node2.isCast());
1689:       assertFalse(node2.hasMoreThanOneChild());
1690:       assertFalse(node2.isLabel());
1691:       assertFalse(node2.isAssignAdd());
1692:       assertFalse(node2.isWhile());
1693:       assertFalse(node2.isDo());
1694:       assertFalse(node2.isAdd());
1695:       assertFalse(node2.isNew());
1696:       assertFalse(node2.isWith());
1697:       assertFalse(node2.isExprResult());
1698:       assertEquals((-1), node2.getLineno());
1699:       assertFalse(node2.isOr());
1700:       assertFalse(node2.isName());
1701:       assertFalse(node2.isNull());
1702:       assertFalse(node2.isHook());
1703:       assertFalse(node2.isInstanceOf());
1704:       assertFalse(node2.isBlock());
1705:       assertFalse(node2.isThis());
1706:       assertFalse(node2.isVar());
1707:       assertFalse(node2.isScript());
1708:       assertFalse(node2.isSwitch());
1709:       assertFalse(node2.isCase());
1710:       assertFalse(node2.isArrayLit());
1711:       assertEquals((-1), node2.getCharno());
1712:       assertFalse(node2.isParamList());
1713:       assertFalse(node2.isStringKey());
1714:       assertFalse(node2.isIf());
1715:       assertFalse(node2.isDelProp());
1716:       assertFalse(node2.isGetterDef());
1717:       assertFalse(node2.isEmpty());
1718:       assertTrue(node2.hasChildren());
1719:       assertEquals(1, node2.getChildCount());
1720:       assertFalse(node2.isTry());
1721:       assertFalse(node2.isFor());
1722:       assertTrue(node2.hasOneChild());
1723:       assertFalse(node2.isRegExp());
1724:       assertEquals(4, node2.getType());
1725:       assertFalse(node2.isDefaultCase());
1726:       assertFalse(node2.isVoid());
1727:       assertTrue(node2.isReturn());
1728:       assertFalse(node2.isInc());
1729:       assertFalse(node2.isCatch());
1730:       assertFalse(node2.isIn());
1731:       assertFalse(node2.isTrue());
1732:       assertFalse(node2.isNE());
1733:       assertFalse(node2.isBreak());
1734:       assertFalse(node2.isSetterDef());
1735:       assertFalse(node2.isComma());
1736:       assertFalse(node2.isFalse());
1737:       assertFalse(node2.isGetProp());
1738:       assertFalse(node2.isCall());
1739:       assertFalse(node2.isThrow());
1740:       assertFalse(node2.isFunction());
1741:       assertFalse(node2.isDebugger());
1742:       assertFalse(node2.isNot());
1743:       assertFalse(node2.isContinue());
1744:       assertFalse(node2.isString());
1745:       assertFalse(node2.isObjectLit());
1746:       assertFalse(node2.isAnd());
1747:       assertFalse(node1.equals((Object)node0));
1748:       assertFalse(node1.equals((Object)node4));
1749:       assertFalse(node1.equals((Object)node2));
1750:       assertFalse(node2.equals((Object)node4));
1751:       assertFalse(node2.equals((Object)node0));
1752:       assertFalse(node2.equals((Object)node1));
1753:       assertNotSame(node1, node4);
1754:       assertEquals(43, Node.IS_CONSTANT_NAME);
1755:       assertEquals(36, Node.QUOTED_PROP);
1756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1757:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1758:       assertEquals(53, Node.INPUT_ID);
1759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1760:       assertEquals(4095, Node.COLUMN_MASK);
1761:       assertEquals(47, Node.IS_DISPATCHER);
1762:       assertEquals(37, Node.OPT_ARG_NAME);
1763:       assertEquals(56, Node.CHANGE_TIME);
1764:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1765:       assertEquals(48, Node.DIRECTIVES);
1766:       assertEquals(8, Node.FLAG_NO_THROWS);
1767:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1768:       assertEquals(29, Node.JSDOC_INFO_PROP);
1769:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1770:       assertEquals(39, Node.EMPTY_BLOCK);
1771:       assertEquals(55, Node.INFERRED_FUNCTION);
1772:       assertEquals(52, Node.LENGTH);
1773:       assertEquals(57, Node.REFLECTED_OBJECT);
1774:       assertEquals(57, Node.LAST_PROP);
1775:       assertEquals(49, Node.DIRECT_EVAL);
1776:       assertEquals(1, Node.DECR_FLAG);
1777:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1778:       assertEquals(12, Node.COLUMN_BITS);
1779:       assertEquals(32, Node.INCRDECR_PROP);
1780:       assertEquals(30, Node.VAR_ARGS_NAME);
1781:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1782:       assertEquals(2, Node.POST_FLAG);
1783:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1784:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1785:       assertEquals(40, Node.ORIGINALNAME_PROP);
1786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1787:       assertEquals(50, Node.FREE_CALL);
1788:       assertEquals(46, Node.IS_NAMESPACE);
1789:       assertEquals(54, Node.SLASH_V);
1790:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1791:       assertEquals(12, Node.COLUMN_BITS);
1792:       assertEquals(30, Node.VAR_ARGS_NAME);
1793:       assertEquals(46, Node.IS_NAMESPACE);
1794:       assertEquals(54, Node.SLASH_V);
1795:       assertEquals(56, Node.CHANGE_TIME);
1796:       assertEquals(37, Node.OPT_ARG_NAME);
1797:       assertEquals(49, Node.DIRECT_EVAL);
1798:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1799:       assertEquals(40, Node.ORIGINALNAME_PROP);
1800:       assertEquals(29, Node.JSDOC_INFO_PROP);
1801:       assertEquals(57, Node.REFLECTED_OBJECT);
1802:       assertEquals(8, Node.FLAG_NO_THROWS);
1803:       assertEquals(47, Node.IS_DISPATCHER);
1804:       assertEquals(2, Node.POST_FLAG);
1805:       assertEquals(53, Node.INPUT_ID);
1806:       assertEquals(52, Node.LENGTH);
1807:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1808:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1809:       assertEquals(39, Node.EMPTY_BLOCK);
1810:       assertEquals(57, Node.LAST_PROP);
1811:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1812:       assertEquals(55, Node.INFERRED_FUNCTION);
1813:       assertEquals(36, Node.QUOTED_PROP);
1814:       assertEquals(4095, Node.COLUMN_MASK);
1815:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1816:       assertEquals(43, Node.IS_CONSTANT_NAME);
1817:       assertEquals(48, Node.DIRECTIVES);
1818:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1819:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1821:       assertEquals(50, Node.FREE_CALL);
1822:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1824:       assertEquals(32, Node.INCRDECR_PROP);
1825:       assertEquals(1, Node.DECR_FLAG);
1826:       
1827:       Node node5 = Node.newString(30, "directives");
1828:       assertFalse(node5.isFor());
1829:       assertFalse(node5.isEmpty());
1830:       assertFalse(node5.isArrayLit());
1831:       assertFalse(node5.isGetterDef());
1832:       assertFalse(node5.isTrue());
1833:       assertFalse(node5.isVoid());
1834:       assertFalse(node5.isDebugger());
1835:       assertFalse(node5.isNE());
1836:       assertFalse(node5.isDelProp());
1837:       assertFalse(node5.isIf());
1838:       assertFalse(node5.isCase());
1839:       assertFalse(node5.isRegExp());
1840:       assertFalse(node5.isCatch());
1841:       assertFalse(node5.isString());
1842:       assertFalse(node5.isTry());
1843:       assertFalse(node5.isHook());
1844:       assertFalse(node5.isStringKey());
1845:       assertFalse(node5.isName());
1846:       assertFalse(node5.isCall());
1847:       assertFalse(node5.isBreak());
1848:       assertEquals((-1), node5.getCharno());
1849:       assertFalse(node5.isNull());
1850:       assertFalse(node5.isParamList());
1851:       assertFalse(node5.isSwitch());
1852:       assertFalse(node5.isDo());
1853:       assertEquals(0, node5.getChildCount());
1854:       assertFalse(node5.isAdd());
1855:       assertFalse(node5.isLabel());
1856:       assertFalse(node5.isDefaultCase());
1857:       assertFalse(node5.isVar());
1858:       assertFalse(node5.isAssignAdd());
1859:       assertFalse(node5.isGetElem());
1860:       assertFalse(node5.isAssign());
1861:       assertFalse(node5.isLabelName());
1862:       assertFalse(node5.hasChildren());
1863:       assertEquals((-1), node5.getSourcePosition());
1864:       assertFalse(node5.isDec());
1865:       assertFalse(node5.isNumber());
1866:       assertFalse(node5.isTypeOf());
1867:       assertFalse(node5.isCast());
1868:       assertFalse(node5.isOr());
1869:       assertFalse(node5.isExprResult());
1870:       assertEquals(30, node5.getType());
1871:       assertEquals((-1), node5.getLineno());
1872:       assertFalse(node5.isObjectLit());
1873:       assertFalse(node5.isNot());
1874:       assertFalse(node5.isInstanceOf());
1875:       assertFalse(node5.isScript());
1876:       assertFalse(node5.isWith());
1877:       assertFalse(node5.hasMoreThanOneChild());
1878:       assertFalse(node5.isGetProp());
1879:       assertFalse(node5.isBlock());
1880:       assertFalse(node5.isComma());
1881:       assertFalse(node5.isReturn());
1882:       assertFalse(node5.isThis());
1883:       assertFalse(node5.hasOneChild());
1884:       assertFalse(node5.isWhile());
1885:       assertFalse(node5.isThrow());
1886:       assertFalse(node5.isFalse());
1887:       assertTrue(node5.isNew());
1888:       assertFalse(node5.isAnd());
1889:       assertFalse(node5.isFunction());
1890:       assertFalse(node5.isIn());
1891:       assertFalse(node5.isContinue());
1892:       assertFalse(node5.isInc());
1893:       assertFalse(node5.isSetterDef());
1894:       assertFalse(node5.equals((Object)node4));
1895:       assertFalse(node5.equals((Object)node2));
1896:       assertFalse(node5.equals((Object)node0));
1897:       assertFalse(node5.equals((Object)node1));
1898:       assertNotSame(node5, node0);
1899:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1900:       assertEquals(12, Node.COLUMN_BITS);
1901:       assertEquals(32, Node.INCRDECR_PROP);
1902:       assertEquals(46, Node.IS_NAMESPACE);
1903:       assertEquals(30, Node.VAR_ARGS_NAME);
1904:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1905:       assertEquals(47, Node.IS_DISPATCHER);
1906:       assertEquals(57, Node.LAST_PROP);
1907:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1908:       assertEquals(1, Node.DECR_FLAG);
1909:       assertEquals(29, Node.JSDOC_INFO_PROP);
1910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1911:       assertEquals(57, Node.REFLECTED_OBJECT);
1912:       assertEquals(52, Node.LENGTH);
1913:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1914:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1915:       assertEquals(56, Node.CHANGE_TIME);
1916:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1918:       assertEquals(48, Node.DIRECTIVES);
1919:       assertEquals(49, Node.DIRECT_EVAL);
1920:       assertEquals(37, Node.OPT_ARG_NAME);
1921:       assertEquals(55, Node.INFERRED_FUNCTION);
1922:       assertEquals(4095, Node.COLUMN_MASK);
1923:       assertEquals(36, Node.QUOTED_PROP);
1924:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1925:       assertEquals(8, Node.FLAG_NO_THROWS);
1926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1927:       assertEquals(53, Node.INPUT_ID);
1928:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1929:       assertEquals(39, Node.EMPTY_BLOCK);
1930:       assertEquals(50, Node.FREE_CALL);
1931:       assertEquals(54, Node.SLASH_V);
1932:       assertEquals(43, Node.IS_CONSTANT_NAME);
1933:       assertEquals(2, Node.POST_FLAG);
1934:       assertEquals(40, Node.ORIGINALNAME_PROP);
1935:       assertNotNull(node5);
1936:       
1937:       boolean boolean5 = node2.isFor();
1938:       assertFalse(boolean5);
1939:       assertFalse(node1.isSetterDef());
1940:       assertFalse(node1.isParamList());
1941:       assertFalse(node1.isStringKey());
1942:       assertFalse(node1.isNull());
1943:       assertFalse(node1.isTry());
1944:       assertFalse(node1.isTrue());
1945:       assertFalse(node1.isBlock());
1946:       assertFalse(node1.isVoid());
1947:       assertFalse(node1.isName());
1948:       assertFalse(node1.isFor());
1949:       assertEquals(39, node1.getType());
1950:       assertFalse(node1.isWhile());
1951:       assertFalse(node1.isCall());
1952:       assertFalse(node1.isRegExp());
1953:       assertFalse(node1.isCatch());
1954:       assertFalse(node1.hasMoreThanOneChild());
1955:       assertFalse(node1.isOr());
1956:       assertFalse(node1.isLabel());
1957:       assertFalse(node1.isAssignAdd());
1958:       assertFalse(node1.isDelProp());
1959:       assertFalse(node1.isEmpty());
1960:       assertFalse(node1.isDo());
1961:       assertFalse(node1.isCase());
1962:       assertFalse(node1.isGetterDef());
1963:       assertFalse(node1.isAdd());
1964:       assertFalse(node1.isNew());
1965:       assertEquals((-1), node1.getCharno());
1966:       assertFalse(node1.isVar());
1967:       assertFalse(node1.isArrayLit());
1968:       assertFalse(node1.isDefaultCase());
1969:       assertFalse(node1.isSwitch());
1970:       assertFalse(node1.isLabelName());
1971:       assertEquals(0, node1.getChildCount());
1972:       assertFalse(node1.isGetProp());
1973:       assertFalse(node1.isThis());
1974:       assertFalse(node1.isAnd());
1975:       assertFalse(node1.isNot());
1976:       assertFalse(node1.isScript());
1977:       assertFalse(node1.isObjectLit());
1978:       assertFalse(node1.isHook());
1979:       assertFalse(node1.isExprResult());
1980:       assertFalse(node1.hasOneChild());
1981:       assertFalse(node1.isAssign());
1982:       assertFalse(node1.isBreak());
1983:       assertFalse(node1.hasChildren());
1984:       assertFalse(node1.isGetElem());
1985:       assertFalse(node1.isComma());
1986:       assertFalse(node1.isDec());
1987:       assertFalse(node1.isInstanceOf());
1988:       assertFalse(node1.isTypeOf());
1989:       assertFalse(node1.isWith());
1990:       assertTrue(node1.isNumber());
1991:       assertEquals((-1), node1.getLineno());
1992:       assertFalse(node1.isReturn());
1993:       assertFalse(node1.isNE());
1994:       assertFalse(node1.isIf());
1995:       assertFalse(node1.isString());
1996:       assertEquals((-1), node1.getSourcePosition());
1997:       assertFalse(node1.isIn());
1998:       assertFalse(node1.isDebugger());
1999:       assertFalse(node1.isInc());
2000:       assertFalse(node1.isThrow());
2001:       assertFalse(node1.isCast());
2002:       assertFalse(node1.isContinue());
2003:       assertFalse(node1.isFunction());
2004:       assertFalse(node1.isFalse());
2005:       assertEquals((-1), node2.getSourcePosition());
2006:       assertFalse(node2.isTypeOf());
2007:       assertFalse(node2.isNumber());
2008:       assertFalse(node2.isDec());
2009:       assertFalse(node2.isAssign());
2010:       assertFalse(node2.isLabelName());
2011:       assertFalse(node2.isGetElem());
2012:       assertFalse(node2.isCast());
2013:       assertFalse(node2.hasMoreThanOneChild());
2014:       assertFalse(node2.isLabel());
2015:       assertFalse(node2.isAssignAdd());
2016:       assertFalse(node2.isWhile());
2017:       assertFalse(node2.isDo());
2018:       assertFalse(node2.isAdd());
2019:       assertFalse(node2.isNew());
2020:       assertFalse(node2.isWith());
2021:       assertFalse(node2.isExprResult());
2022:       assertEquals((-1), node2.getLineno());
2023:       assertFalse(node2.isOr());
2024:       assertFalse(node2.isName());
2025:       assertFalse(node2.isNull());
2026:       assertFalse(node2.isHook());
2027:       assertFalse(node2.isInstanceOf());
2028:       assertFalse(node2.isBlock());
2029:       assertFalse(node2.isThis());
2030:       assertFalse(node2.isVar());
2031:       assertFalse(node2.isScript());
2032:       assertFalse(node2.isSwitch());
2033:       assertFalse(node2.isCase());
2034:       assertFalse(node2.isArrayLit());
2035:       assertEquals((-1), node2.getCharno());
2036:       assertFalse(node2.isParamList());
2037:       assertFalse(node2.isStringKey());
2038:       assertFalse(node2.isIf());
2039:       assertFalse(node2.isDelProp());
2040:       assertFalse(node2.isGetterDef());
2041:       assertFalse(node2.isEmpty());
2042:       assertTrue(node2.hasChildren());
2043:       assertEquals(1, node2.getChildCount());
2044:       assertFalse(node2.isTry());
2045:       assertFalse(node2.isFor());
2046:       assertTrue(node2.hasOneChild());
2047:       assertFalse(node2.isRegExp());
2048:       assertEquals(4, node2.getType());
2049:       assertFalse(node2.isDefaultCase());
2050:       assertFalse(node2.isVoid());
2051:       assertTrue(node2.isReturn());
2052:       assertFalse(node2.isInc());
2053:       assertFalse(node2.isCatch());
2054:       assertFalse(node2.isIn());
2055:       assertFalse(node2.isTrue());
2056:       assertFalse(node2.isNE());
2057:       assertFalse(node2.isBreak());
2058:       assertFalse(node2.isSetterDef());
2059:       assertFalse(node2.isComma());
2060:       assertFalse(node2.isFalse());
2061:       assertFalse(node2.isGetProp());
2062:       assertFalse(node2.isCall());
2063:       assertFalse(node2.isThrow());
2064:       assertFalse(node2.isFunction());
2065:       assertFalse(node2.isDebugger());
2066:       assertFalse(node2.isNot());
2067:       assertFalse(node2.isContinue());
2068:       assertFalse(node2.isString());
2069:       assertFalse(node2.isObjectLit());
2070:       assertFalse(node2.isAnd());
2071:       assertFalse(node1.equals((Object)node0));
2072:       assertFalse(node1.equals((Object)node4));
2073:       assertFalse(node1.equals((Object)node5));
2074:       assertFalse(node1.equals((Object)node2));
2075:       assertFalse(node2.equals((Object)node5));
2076:       assertFalse(node2.equals((Object)node4));
2077:       assertFalse(node2.equals((Object)node0));
2078:       assertFalse(node2.equals((Object)node1));
2079:       assertTrue(boolean5 == boolean1);
2080:       assertTrue(boolean5 == boolean0);
2081:       assertFalse(boolean5 == boolean2);
2082:       assertTrue(boolean5 == boolean4);
2083:       assertTrue(boolean5 == boolean3);
2084:       assertNotSame(node1, node4);
2085:       assertEquals(43, Node.IS_CONSTANT_NAME);
2086:       assertEquals(36, Node.QUOTED_PROP);
2087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2089:       assertEquals(53, Node.INPUT_ID);
2090:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2091:       assertEquals(4095, Node.COLUMN_MASK);
2092:       assertEquals(47, Node.IS_DISPATCHER);
2093:       assertEquals(37, Node.OPT_ARG_NAME);
2094:       assertEquals(56, Node.CHANGE_TIME);
2095:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2096:       assertEquals(48, Node.DIRECTIVES);
2097:       assertEquals(8, Node.FLAG_NO_THROWS);
2098:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2099:       assertEquals(29, Node.JSDOC_INFO_PROP);
2100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2101:       assertEquals(39, Node.EMPTY_BLOCK);
2102:       assertEquals(55, Node.INFERRED_FUNCTION);
2103:       assertEquals(52, Node.LENGTH);
2104:       assertEquals(57, Node.REFLECTED_OBJECT);
2105:       assertEquals(57, Node.LAST_PROP);
2106:       assertEquals(49, Node.DIRECT_EVAL);
2107:       assertEquals(1, Node.DECR_FLAG);
2108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2109:       assertEquals(12, Node.COLUMN_BITS);
2110:       assertEquals(32, Node.INCRDECR_PROP);
2111:       assertEquals(30, Node.VAR_ARGS_NAME);
2112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2113:       assertEquals(2, Node.POST_FLAG);
2114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2116:       assertEquals(40, Node.ORIGINALNAME_PROP);
2117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2118:       assertEquals(50, Node.FREE_CALL);
2119:       assertEquals(46, Node.IS_NAMESPACE);
2120:       assertEquals(54, Node.SLASH_V);
2121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2122:       assertEquals(12, Node.COLUMN_BITS);
2123:       assertEquals(30, Node.VAR_ARGS_NAME);
2124:       assertEquals(46, Node.IS_NAMESPACE);
2125:       assertEquals(54, Node.SLASH_V);
2126:       assertEquals(56, Node.CHANGE_TIME);
2127:       assertEquals(37, Node.OPT_ARG_NAME);
2128:       assertEquals(49, Node.DIRECT_EVAL);
2129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2130:       assertEquals(40, Node.ORIGINALNAME_PROP);
2131:       assertEquals(29, Node.JSDOC_INFO_PROP);
2132:       assertEquals(57, Node.REFLECTED_OBJECT);
2133:       assertEquals(8, Node.FLAG_NO_THROWS);
2134:       assertEquals(47, Node.IS_DISPATCHER);
2135:       assertEquals(2, Node.POST_FLAG);
2136:       assertEquals(53, Node.INPUT_ID);
2137:       assertEquals(52, Node.LENGTH);
2138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2140:       assertEquals(39, Node.EMPTY_BLOCK);
2141:       assertEquals(57, Node.LAST_PROP);
2142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2143:       assertEquals(55, Node.INFERRED_FUNCTION);
2144:       assertEquals(36, Node.QUOTED_PROP);
2145:       assertEquals(4095, Node.COLUMN_MASK);
2146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2147:       assertEquals(43, Node.IS_CONSTANT_NAME);
2148:       assertEquals(48, Node.DIRECTIVES);
2149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2152:       assertEquals(50, Node.FREE_CALL);
2153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2155:       assertEquals(32, Node.INCRDECR_PROP);
2156:       assertEquals(1, Node.DECR_FLAG);
2157:       
2158:       boolean boolean6 = node0.isDefaultCase();
2159:       assertFalse(boolean6);
2160:       assertFalse(node0.isCast());
2161:       assertFalse(node0.isGetElem());
2162:       assertFalse(node0.hasOneChild());
2163:       assertFalse(node0.isLabelName());
2164:       assertFalse(node0.isExprResult());
2165:       assertFalse(node0.isLabel());
2166:       assertFalse(node0.isReturn());
2167:       assertFalse(node0.hasChildren());
2168:       assertFalse(node0.isDec());
2169:       assertFalse(node0.isAssign());
2170:       assertFalse(node0.isTypeOf());
2171:       assertFalse(node0.isWith());
2172:       assertFalse(node0.hasMoreThanOneChild());
2173:       assertFalse(node0.isObjectLit());
2174:       assertFalse(node0.isAnd());
2175:       assertFalse(node0.isContinue());
2176:       assertFalse(node0.isWhile());
2177:       assertEquals((-1), node0.getSourcePosition());
2178:       assertFalse(node0.isScript());
2179:       assertFalse(node0.isGetProp());
2180:       assertFalse(node0.isNot());
2181:       assertFalse(node0.isNumber());
2182:       assertFalse(node0.isCall());
2183:       assertFalse(node0.isStringKey());
2184:       assertFalse(node0.isVar());
2185:       assertFalse(node0.isBreak());
2186:       assertFalse(node0.isName());
2187:       assertFalse(node0.isComma());
2188:       assertEquals(0, node0.getChildCount());
2189:       assertFalse(node0.isDo());
2190:       assertFalse(node0.isAssignAdd());
2191:       assertFalse(node0.isDefaultCase());
2192:       assertFalse(node0.isTrue());
2193:       assertFalse(node0.isNull());
2194:       assertFalse(node0.isNew());
2195:       assertEquals(21, node0.getType());
2196:       assertFalse(node0.isOr());
2197:       assertFalse(node0.isFor());
2198:       assertFalse(node0.isEmpty());
2199:       assertFalse(node0.isArrayLit());
2200:       assertFalse(node0.isDelProp());
2201:       assertFalse(node0.isTry());
2202:       assertFalse(node0.isIf());
2203:       assertFalse(node0.isVoid());
2204:       assertFalse(node0.isFunction());
2205:       assertFalse(node0.isRegExp());
2206:       assertFalse(node0.isCase());
2207:       assertFalse(node0.isSwitch());
2208:       assertEquals((-1), node0.getCharno());
2209:       assertFalse(node0.isDebugger());
2210:       assertFalse(node0.isParamList());
2211:       assertFalse(node0.isGetterDef());
2212:       assertFalse(node0.isString());
2213:       assertTrue(node0.isAdd());
2214:       assertFalse(node0.isThrow());
2215:       assertFalse(node0.isHook());
2216:       assertFalse(node0.isBlock());
2217:       assertFalse(node0.isThis());
2218:       assertFalse(node0.isInstanceOf());
2219:       assertFalse(node0.isFalse());
2220:       assertFalse(node0.isCatch());
2221:       assertEquals((-1), node0.getLineno());
2222:       assertFalse(node0.isNE());
2223:       assertFalse(node0.isInc());
2224:       assertFalse(node0.isSetterDef());
2225:       assertFalse(node0.isIn());
2226:       assertFalse(node0.equals((Object)node2));
2227:       assertFalse(node0.equals((Object)node4));
2228:       assertFalse(node0.equals((Object)node1));
2229:       assertFalse(node0.equals((Object)node5));
2230:       assertTrue(boolean6 == boolean5);
2231:       assertTrue(boolean6 == boolean3);
2232:       assertTrue(boolean6 == boolean4);
2233:       assertTrue(boolean6 == boolean0);
2234:       assertTrue(boolean6 == boolean1);
2235:       assertFalse(boolean6 == boolean2);
2236:       assertNotSame(node0, node5);
2237:       assertEquals(32, Node.INCRDECR_PROP);
2238:       assertEquals(46, Node.IS_NAMESPACE);
2239:       assertEquals(37, Node.OPT_ARG_NAME);
2240:       assertEquals(1, Node.DECR_FLAG);
2241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2242:       assertEquals(56, Node.CHANGE_TIME);
2243:       assertEquals(49, Node.DIRECT_EVAL);
2244:       assertEquals(54, Node.SLASH_V);
2245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2246:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2249:       assertEquals(12, Node.COLUMN_BITS);
2250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2251:       assertEquals(4095, Node.COLUMN_MASK);
2252:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2253:       assertEquals(55, Node.INFERRED_FUNCTION);
2254:       assertEquals(48, Node.DIRECTIVES);
2255:       assertEquals(39, Node.EMPTY_BLOCK);
2256:       assertEquals(43, Node.IS_CONSTANT_NAME);
2257:       assertEquals(50, Node.FREE_CALL);
2258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2259:       assertEquals(8, Node.FLAG_NO_THROWS);
2260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2261:       assertEquals(36, Node.QUOTED_PROP);
2262:       assertEquals(57, Node.REFLECTED_OBJECT);
2263:       assertEquals(52, Node.LENGTH);
2264:       assertEquals(40, Node.ORIGINALNAME_PROP);
2265:       assertEquals(29, Node.JSDOC_INFO_PROP);
2266:       assertEquals(53, Node.INPUT_ID);
2267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2268:       assertEquals(30, Node.VAR_ARGS_NAME);
2269:       assertEquals(57, Node.LAST_PROP);
2270:       assertEquals(2, Node.POST_FLAG);
2271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2272:       assertEquals(47, Node.IS_DISPATCHER);
2273:   }
2274: }
RegularFileObject[/tmp/EvoSuite_179_1629223365086/com/google/javascript/rhino/Node_179_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_179_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_179_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_179_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.ImmutableSet",
342:       "com.google.common.collect.EmptyImmutableSet",
343:       "com.google.common.collect.AbstractIndexedListIterator",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.Iterables",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.AbstractMultimap$Values",
350:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
351:       "com.google.common.collect.AbstractMapBasedMultimap$1",
352:       "com.google.common.collect.Multimaps$Entries",
353:       "com.google.common.collect.AbstractMultimap$Entries",
354:       "com.google.common.collect.AbstractMapBasedMultimap$2",
355:       "com.google.javascript.rhino.jstype.JSType$TypePair",
356:       "com.google.common.collect.Iterators$12",
357:       "com.google.javascript.rhino.jstype.TernaryValue",
358:       "com.google.javascript.rhino.jstype.JSType$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet"
367:     );
368:   }
369: }

[MASTER] 18:02:45.605 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(21, "ALL_TYPE");
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node0);

boolean boolean0 = node0.isFromExterns();
assertFalse(boolean0);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node0.isQualifiedName();
assertFalse(boolean1);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertTrue(boolean1 == boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean2 = node0.isEquivalentTo(node0, false, false, false);
assertTrue(boolean2);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = Node.newNumber(1.0, (-497), 53);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node1);

boolean boolean3 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(boolean3);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean4 = node0.isAssignAdd();
assertFalse(boolean4);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertFalse(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

node0.addSuppression((String) null);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));

Node node2 = new Node(4, node1, node1, (-4127), (-399));
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isVar());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertEquals(4, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertTrue(node2.isReturn());
assertFalse(node2.isInc());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node2);

Node node3 = node2.getAncestor(2247);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isVar());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertEquals(4, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertTrue(node2.isReturn());
assertFalse(node2.isInc());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNull(node3);

Node node4 = Node.newNumber((-2963.0));
assertFalse(node4.isOr());
assertFalse(node4.isReturn());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isLabelName());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isNull());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isWhile());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertFalse(node4.isAssign());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertTrue(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isIn());
assertFalse(node4.isInc());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isThis());
assertFalse(node4.isSetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isScript());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isHook());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFor());
assertEquals(39, node4.getType());
assertFalse(node4.isRegExp());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertNotSame(node4, node1);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertNotNull(node4);

node2.setJSType((JSType) null);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isVar());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertEquals(4, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertTrue(node2.isReturn());
assertFalse(node2.isInc());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node5 = Node.newString(30, "directives");
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isArrayLit());
assertFalse(node5.isGetterDef());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isDebugger());
assertFalse(node5.isNE());
assertFalse(node5.isDelProp());
assertFalse(node5.isIf());
assertFalse(node5.isCase());
assertFalse(node5.isRegExp());
assertFalse(node5.isCatch());
assertFalse(node5.isString());
assertFalse(node5.isTry());
assertFalse(node5.isHook());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertFalse(node5.isSwitch());
assertFalse(node5.isDo());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isAdd());
assertFalse(node5.isLabel());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isVar());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssign());
assertFalse(node5.isLabelName());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isNumber());
assertFalse(node5.isTypeOf());
assertFalse(node5.isCast());
assertFalse(node5.isOr());
assertFalse(node5.isExprResult());
assertEquals(30, node5.getType());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isScript());
assertFalse(node5.isWith());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isBlock());
assertFalse(node5.isComma());
assertFalse(node5.isReturn());
assertFalse(node5.isThis());
assertFalse(node5.hasOneChild());
assertFalse(node5.isWhile());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertTrue(node5.isNew());
assertFalse(node5.isAnd());
assertFalse(node5.isFunction());
assertFalse(node5.isIn());
assertFalse(node5.isContinue());
assertFalse(node5.isInc());
assertFalse(node5.isSetterDef());
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertNotSame(node5, node0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node5);

boolean boolean5 = node2.isFor();
assertFalse(boolean5);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isVar());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertEquals(4, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertTrue(node2.isReturn());
assertFalse(node2.isInc());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isBreak());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertFalse(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertNotSame(node1, node4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean6 = node0.isDefaultCase();
assertFalse(boolean6);
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertEquals(21, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertTrue(node0.isAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertFalse(boolean6 == boolean2);
assertNotSame(node0, node5);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);


[MASTER] 18:03:03.446 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:03.815 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:04.090 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:04.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:04.816 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:05.277 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:05.520 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:05.788 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:06.019 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:06.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:06.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:06.739 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:07.002 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:07.430 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:07.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:07.896 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:09.243 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/26
* Done!

* Computation finished
